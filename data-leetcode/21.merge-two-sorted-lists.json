[
    {
        "title": "Merge Two Sorted Lists",
        "question_content": "You are given the heads of two sorted linked lists list1 and list2.\nMerge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.\nReturn the head of the merged linked list.\n&nbsp;\nExample 1:\n\nInput: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n\nExample 2:\n\nInput: list1 = [], list2 = []\nOutput: []\n\nExample 3:\n\nInput: list1 = [], list2 = [0]\nOutput: [0]\n\n&nbsp;\nConstraints:\n\n\tThe number of nodes in both lists is in the range [0, 50].\n\t-100 <= Node.val <= 100\n\tBoth list1 and list2 are sorted in non-decreasing order.",
        "solutions": [
            {
                "id": 1826666,
                "title": "c-easy-to-understand-2-approaches-recursive-iterative",
                "content": "# 21. Merge Two Sorted Lists\\n**KNOCKCAT**\\n\\n\\n```\\n1. Easy C++\\n2. Line by Line Explanation with Comments.\\n3. Detailed Explanation \\u2705\\n4. Linked list problem, merge.\\n5. Please Upvote if it helps\\u2B06\\uFE0F\\n6. Link to my Github Profile contains a repository of Leetcode with all my Solutions. \\u2B07\\uFE0F\\n\\t// \\uD83D\\uDE09If you Like the repository don\\'t foget to star & fork the repository\\uD83D\\uDE09\\n```\\n\\n[LeetCode](https://github.com/knockcat/Leetcode)    **LINK TO LEETCODE REPOSITORY**\\n\\nPlease upvote my comment so that i get to win the 2022 giveaway and motivate to make such discussion post.\\n**Happy new Year 2023 to all of you**\\n**keep solving keep improving**\\nLink To comment\\n[Leetcode Give away comment](https://leetcode.com/discuss/general-discussion/2946993/2022-Annual-Badge-and-the-Giveaway/1734919)\\n\\n**EXPLANATION**\\n\\n* Maintain a **head and a tail pointer** on the merged linked list. \\n* Then choose the head of the merged linked list by comparing the first node of both linked lists.\\n* For all subsequent nodes in both lists, you **choose the smaller current node** and l**ink it to the tail** of the merged list, and **moving the current pointer of that list one step forward.**\\n\\n* You **keep doing this while there are some remaining elements in both the lists.**\\n* If there are **still some elements in only one of the lists**, you **link this remaining list to the tail of the merged list.**\\n\\n* Initially, the merged linked list is NULL.\\n\\n* **Compare the value of the first two nodes and make the node with the smaller value** the head node of the merged linked list.\\n\\n* Since it\\u2019s the first and only node in the merged list, it will also be the tail.\\n\\n* Then **move head1 one step forward.**\\n\\n**Time Complexity O(n+m)**\\n**Space Complexity O(n+m)** this is auxiliary stack space due to recursion.\\n\\n\\n**RECURSIVE APPROACH**\\n```\\n\\t\\t\\t\\t\\t// \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09Please upvote if it helps \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\nclass Solution {\\npublic:\\n\\tListNode* mergeTwoLists(ListNode* l1, ListNode* l2) \\n  {\\n\\t\\t// if list1 happen to be NULL\\n\\t\\t// we will simply return list2.\\n\\t\\tif(l1 == NULL)\\n        {\\n\\t\\t\\treturn l2;\\n\\t\\t}\\n\\t\\t\\n\\t\\t// if list2 happen to be NULL\\n\\t\\t// we will simply return list1.\\n\\t\\tif(l2 == NULL)\\n        {\\n\\t\\t\\treturn l1;\\n\\t\\t} \\n\\t\\t\\n\\t\\t// if value pointend by l1 pointer is less than equal to value pointed by l2 pointer\\n\\t\\t// we wall call recursively l1 -> next and whole l2 list.\\n\\t\\tif(l1 -> val <= l2 -> val)\\n        {\\n\\t\\t\\tl1 -> next = mergeTwoLists(l1 -> next, l2);\\n\\t\\t\\treturn l1;\\n\\t\\t}\\n\\t\\t// we will call recursive l1 whole list and l2 -> next\\n\\t\\telse\\n        {\\n\\t\\t\\tl2 -> next = mergeTwoLists(l1, l2 -> next);\\n\\t\\t\\treturn l2;            \\n\\t\\t}\\n\\t}\\n};\\t\\n```\\n\\n**ITERATIVE APPROACH**\\n\\n**Time Complexity O(n+m)**\\n**Space Complexity O(1)** \\n\\n```\\n\\t\\t\\t\\t\\t// \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09Please upvote if it helps \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n       \\n\\t    // if list1 happen to be NULL\\n\\t\\t// we will simply return list2.\\n        if(list1 == NULL)\\n            return list2;\\n\\t\\t\\n\\t\\t// if list2 happen to be NULL\\n\\t\\t// we will simply return list1.\\n        if(list2 == NULL)\\n            return list1;\\n        \\n        ListNode * ptr = list1;\\n        if(list1 -> val > list2 -> val)\\n        {\\n            ptr = list2;\\n            list2 = list2 -> next;\\n        }\\n        else\\n        {\\n            list1 = list1 -> next;\\n        }\\n        ListNode *curr = ptr;\\n        \\n\\t\\t// till one of the list doesn\\'t reaches NULL\\n        while(list1 &&  list2)\\n        {\\n            if(list1 -> val < list2 -> val){\\n                curr->next = list1;\\n                list1 = list1 -> next;\\n            }\\n            else{\\n                curr->next = list2;\\n                list2 = list2 -> next;\\n            }\\n            curr = curr -> next;\\n                \\n        }\\n\\t\\t\\n\\t\\t// adding remaining elements of bigger list.\\n        if(!list1)\\n            curr -> next = list2;\\n        else\\n            curr -> next = list1;\\n            \\n        return ptr;\\n       \\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Linked List",
                    "Recursion",
                    "Merge Sort",
                    "Iterator"
                ],
                "code": "```\\n1. Easy C++\\n2. Line by Line Explanation with Comments.\\n3. Detailed Explanation \\u2705\\n4. Linked list problem, merge.\\n5. Please Upvote if it helps\\u2B06\\uFE0F\\n6. Link to my Github Profile contains a repository of Leetcode with all my Solutions. \\u2B07\\uFE0F\\n\\t// \\uD83D\\uDE09If you Like the repository don\\'t foget to star & fork the repository\\uD83D\\uDE09\\n```\n```\\n\\t\\t\\t\\t\\t// \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09Please upvote if it helps \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\nclass Solution {\\npublic:\\n\\tListNode* mergeTwoLists(ListNode* l1, ListNode* l2) \\n  {\\n\\t\\t// if list1 happen to be NULL\\n\\t\\t// we will simply return list2.\\n\\t\\tif(l1 == NULL)\\n        {\\n\\t\\t\\treturn l2;\\n\\t\\t}\\n\\t\\t\\n\\t\\t// if list2 happen to be NULL\\n\\t\\t// we will simply return list1.\\n\\t\\tif(l2 == NULL)\\n        {\\n\\t\\t\\treturn l1;\\n\\t\\t} \\n\\t\\t\\n\\t\\t// if value pointend by l1 pointer is less than equal to value pointed by l2 pointer\\n\\t\\t// we wall call recursively l1 -> next and whole l2 list.\\n\\t\\tif(l1 -> val <= l2 -> val)\\n        {\\n\\t\\t\\tl1 -> next = mergeTwoLists(l1 -> next, l2);\\n\\t\\t\\treturn l1;\\n\\t\\t}\\n\\t\\t// we will call recursive l1 whole list and l2 -> next\\n\\t\\telse\\n        {\\n\\t\\t\\tl2 -> next = mergeTwoLists(l1, l2 -> next);\\n\\t\\t\\treturn l2;            \\n\\t\\t}\\n\\t}\\n};\\t\\n```\n```\\n\\t\\t\\t\\t\\t// \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09Please upvote if it helps \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n       \\n\\t    // if list1 happen to be NULL\\n\\t\\t// we will simply return list2.\\n        if(list1 == NULL)\\n            return list2;\\n\\t\\t\\n\\t\\t// if list2 happen to be NULL\\n\\t\\t// we will simply return list1.\\n        if(list2 == NULL)\\n            return list1;\\n        \\n        ListNode * ptr = list1;\\n        if(list1 -> val > list2 -> val)\\n        {\\n            ptr = list2;\\n            list2 = list2 -> next;\\n        }\\n        else\\n        {\\n            list1 = list1 -> next;\\n        }\\n        ListNode *curr = ptr;\\n        \\n\\t\\t// till one of the list doesn\\'t reaches NULL\\n        while(list1 &&  list2)\\n        {\\n            if(list1 -> val < list2 -> val){\\n                curr->next = list1;\\n                list1 = list1 -> next;\\n            }\\n            else{\\n                curr->next = list2;\\n                list2 = list2 -> next;\\n            }\\n            curr = curr -> next;\\n                \\n        }\\n\\t\\t\\n\\t\\t// adding remaining elements of bigger list.\\n        if(!list1)\\n            curr -> next = list2;\\n        else\\n            curr -> next = list1;\\n            \\n        return ptr;\\n       \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1826693,
                "title": "python3-merging-explained",
                "content": "**UPVOTE if you like (\\uD83C\\uDF38\\u25E0\\u203F\\u25E0), If you have any question, feel free to ask.**\\n\\nFor simplicity, we create a dummy node to which we attach nodes from lists. We iterate over lists using two-pointers and build up a resulting list so that values are monotonically increased.\\n\\nTime: **O(n)**\\nSpace: **O(1)**\\n\\n```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        cur = dummy = ListNode()\\n        while list1 and list2:               \\n            if list1.val < list2.val:\\n                cur.next = list1\\n                list1, cur = list1.next, list1\\n            else:\\n                cur.next = list2\\n                list2, cur = list2.next, list2\\n                \\n        if list1 or list2:\\n            cur.next = list1 if list1 else list2\\n            \\n        return dummy.next\\n```\\n\\n**UPVOTE if you like (\\uD83C\\uDF38\\u25E0\\u203F\\u25E0), If you have any question, feel free to ask.**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        cur = dummy = ListNode()\\n        while list1 and list2:               \\n            if list1.val < list2.val:\\n                cur.next = list1\\n                list1, cur = list1.next, list1\\n            else:\\n                cur.next = list2\\n                list2, cur = list2.next, list2\\n                \\n        if list1 or list2:\\n            cur.next = list1 if list1 else list2\\n            \\n        return dummy.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 9715,
                "title": "java-1-ms-4-lines-codes-using-recursion",
                "content": "    public ListNode mergeTwoLists(ListNode l1, ListNode l2){\\n    \\t\\tif(l1 == null) return l2;\\n    \\t\\tif(l2 == null) return l1;\\n    \\t\\tif(l1.val < l2.val){\\n    \\t\\t\\tl1.next = mergeTwoLists(l1.next, l2);\\n    \\t\\t\\treturn l1;\\n    \\t\\t} else{\\n    \\t\\t\\tl2.next = mergeTwoLists(l1, l2.next);\\n    \\t\\t\\treturn l2;\\n    \\t\\t}\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    public ListNode mergeTwoLists(ListNode l1, ListNode l2){\\n    \\t\\tif(l1 == null) return l2;\\n    \\t\\tif(l2 == null) return l1;\\n    \\t\\tif(l1.val < l2.val){\\n    \\t\\t\\tl1.next = mergeTwoLists(l1.next, l2);\\n    \\t\\t\\treturn l1;\\n    \\t\\t} else{\\n    \\t\\t\\tl2.next = mergeTwoLists(l1, l2.next);\\n    \\t\\t\\treturn l2;\\n    \\t\\t}\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 9735,
                "title": "python-solutions-iteratively-recursively-iteratively-in-place",
                "content": "        \\n    \\n    # iteratively\\n    def mergeTwoLists1(self, l1, l2):\\n        dummy = cur = ListNode(0)\\n        while l1 and l2:\\n            if l1.val < l2.val:\\n                cur.next = l1\\n                l1 = l1.next\\n            else:\\n                cur.next = l2\\n                l2 = l2.next\\n            cur = cur.next\\n        cur.next = l1 or l2\\n        return dummy.next\\n        \\n    # recursively    \\n    def mergeTwoLists2(self, l1, l2):\\n        if not l1 or not l2:\\n            return l1 or l2\\n        if l1.val < l2.val:\\n            l1.next = self.mergeTwoLists(l1.next, l2)\\n            return l1\\n        else:\\n            l2.next = self.mergeTwoLists(l1, l2.next)\\n            return l2\\n            \\n    # in-place, iteratively        \\n    def mergeTwoLists(self, l1, l2):\\n        if None in (l1, l2):\\n            return l1 or l2\\n        dummy = cur = ListNode(0)\\n        dummy.next = l1\\n        while l1 and l2:\\n            if l1.val < l2.val:\\n                l1 = l1.next\\n            else:\\n                nxt = cur.next\\n                cur.next = l2\\n                tmp = l2.next\\n                l2.next = nxt\\n                l2 = tmp\\n            cur = cur.next\\n        cur.next = l1 or l2\\n        return dummy.next",
                "solutionTags": [
                    "Python",
                    "Recursion"
                ],
                "code": "        \\n    \\n    # iteratively\\n    def mergeTwoLists1(self, l1, l2):\\n        dummy = cur = ListNode(0)\\n        while l1 and l2:\\n            if l1.val < l2.val:\\n                cur.next = l1\\n                l1 = l1.next\\n            else:\\n                cur.next = l2\\n                l2 = l2.next\\n            cur = cur.next\\n        cur.next = l1 or l2\\n        return dummy.next\\n        \\n    # recursively    \\n    def mergeTwoLists2(self, l1, l2):\\n        if not l1 or not l2:\\n            return l1 or l2\\n        if l1.val < l2.val:\\n            l1.next = self.mergeTwoLists(l1.next, l2)\\n            return l1\\n        else:\\n            l2.next = self.mergeTwoLists(l1, l2.next)\\n            return l2\\n            \\n    # in-place, iteratively        \\n    def mergeTwoLists(self, l1, l2):\\n        if None in (l1, l2):\\n            return l1 or l2\\n        dummy = cur = ListNode(0)\\n        dummy.next = l1\\n        while l1 and l2:\\n            if l1.val < l2.val:\\n                l1 = l1.next\\n            else:\\n                nxt = cur.next\\n                cur.next = l2\\n                tmp = l2.next\\n                l2.next = nxt\\n                l2 = tmp\\n            cur = cur.next\\n        cur.next = l1 or l2\\n        return dummy.next",
                "codeTag": "Python3"
            },
            {
                "id": 9714,
                "title": "14-line-clean-c-solution",
                "content": "    class Solution {\\n    public:\\n        ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {\\n            ListNode dummy(INT_MIN);\\n            ListNode *tail = &dummy;\\n            \\n            while (l1 && l2) {\\n                if (l1->val < l2->val) {\\n                    tail->next = l1;\\n                    l1 = l1->next;\\n                } else {\\n                    tail->next = l2;\\n                    l2 = l2->next;\\n                }\\n                tail = tail->next;\\n            }\\n    \\n            tail->next = l1 ? l1 : l2;\\n            return dummy.next;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {\\n            ListNode dummy(INT_MIN);\\n            ListNode *tail = &dummy;\\n            \\n            while (l1 && l2) {\\n                if (l1->val < l2->val) {\\n                    tail->next = l1;\\n                    l1 = l1->next;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 9772,
                "title": "java-solution-with-real-world-concerns-real-world-concerns",
                "content": "My first solution is an iterative one. One thing deserves discussion is whether we should create a new `ListNode` as a convenient way to hold the list. Sometimes, in industrial projects, sometimes it's not trivial to create a `ListNode` which might require many resource allocations or inaccessible dependencies (we need to mock them).\\n\\nSo ideally, we should pick up either the head of l1 or l2 as the head other than creating a new one, which however makes the initialization step tedious.  \\n\\nBut during an interview, I would rather create a new `ListNode` as list holder, but communicate with the interviewer that I'm aware of the potential issue, and would improve it if he/she thinks this is a big deal. \\n\\n```java\\npublic class Solution {\\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        ListNode head = new ListNode(0);\\n        ListNode handler = head;\\n        while(l1 != null && l2 != null) {\\n            if (l1.val <= l2.val) {\\n                handler.next = l1;\\n                l1 = l1.next;\\n            } else {\\n                handler.next = l2;\\n                l2 = l2.next;\\n            }\\n            handler = handler.next;\\n        }\\n        \\n        if (l1 != null) {\\n            handler.next = l1;\\n        } else if (l2 != null) {\\n            handler.next = l2;\\n        }\\n        \\n        return head.next;\\n    }\\n}\\n```\\n\\n-----\\nMy second solution is to use recursion. Personally, I don't like this approach. Because in real life, the length of a linked list could be much longer than we expected, in which case the recursive approach is likely to introduce a stack overflow. (Imagine a file system)\\n\\nBut anyway, as long as we communicate this concerning properly with the interviewer, I don't think it's a big deal here.\\n\\n```java\\npublic class Solution {\\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        if (l1 == null) return l2;\\n        if (l2 == null) return l1;\\n        \\n        ListNode handler;\\n        if(l1.val < l2.val) {\\n            handler = l1;\\n            handler.next = mergeTwoLists(l1.next, l2);\\n        } else {\\n            handler = l2;\\n            handler.next = mergeTwoLists(l1, l2.next);\\n        }\\n        \\n        return handler;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```java\\npublic class Solution {\\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        ListNode head = new ListNode(0);\\n        ListNode handler = head;\\n        while(l1 != null && l2 != null) {\\n            if (l1.val <= l2.val) {\\n                handler.next = l1;\\n                l1 = l1.next;\\n            } else {\\n                handler.next = l2;\\n                l2 = l2.next;\\n            }\\n            handler = handler.next;\\n        }\\n        \\n        if (l1 != null) {\\n            handler.next = l1;\\n        } else if (l2 != null) {\\n            handler.next = l2;\\n        }\\n        \\n        return head.next;\\n    }\\n}\\n```\n```java\\npublic class Solution {\\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        if (l1 == null) return l2;\\n        if (l2 == null) return l1;\\n        \\n        ListNode handler;\\n        if(l1.val < l2.val) {\\n            handler = l1;\\n            handler.next = mergeTwoLists(l1.next, l2);\\n        } else {\\n            handler = l2;\\n            handler.next = mergeTwoLists(l1, l2.next);\\n        }\\n        \\n        return handler;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 9771,
                "title": "simple-5-lines-python",
                "content": "**Solution 1**\\n\\nIf both lists are non-empty, I first make sure `a` starts smaller, use its head as result, and merge the remainders behind it. Otherwise, i.e., if one or both are empty, I just return what's there.\\n\\n    class Solution:\\n        def mergeTwoLists(self, a, b):\\n            if a and b:\\n                if a.val > b.val:\\n                    a, b = b, a\\n                a.next = self.mergeTwoLists(a.next, b)\\n            return a or b\\n\\n---\\n\\n**Solution 2**\\n\\nFirst make sure that `a` is the \"better\" one (meaning `b` is None or has larger/equal value). Then merge the remainders behind `a`.\\n\\n    def mergeTwoLists(self, a, b):\\n        if not a or b and a.val > b.val:\\n            a, b = b, a\\n        if a:\\n            a.next = self.mergeTwoLists(a.next, b)\\n        return a",
                "solutionTags": [
                    "Python"
                ],
                "code": "**Solution 1**\\n\\nIf both lists are non-empty, I first make sure `a` starts smaller, use its head as result, and merge the remainders behind it. Otherwise, i.e., if one or both are empty, I just return what's there.\\n\\n    class Solution:\\n        def mergeTwoLists(self, a, b):\\n            if a and b:\\n                if a.val > b.val:\\n                    a, b = b, a\\n                a.next = self.mergeTwoLists(a.next, b)\\n            return a or b\\n\\n---\\n\\n**Solution 2**\\n\\nFirst make sure that `a` is the \"better\" one (meaning `b` is None or has larger/equal value). Then merge the remainders behind `a`.\\n\\n    def mergeTwoLists(self, a, b):\\n        if not a or b and a.val > b.val:\\n            a, b = b, a\\n        if a:\\n            a.next = self.mergeTwoLists(a.next, b)\\n        return a",
                "codeTag": "Java"
            },
            {
                "id": 759870,
                "title": "python3-solution-with-a-detailed-explanation-dummy-explained",
                "content": "[Linkedlists](https://realpython.com/linked-lists-python/) can be confusing especially if you\\'ve recently started to code but (I think) once you understand it fully, it should not be that difficult. \\n\\nFor this problem, I\\'m going to explain several ways of solving it **BUT** I want to make something clear. Something that you\\'ve seen a lot of times in the posts on this website but probably haven\\'t fully understood. `dummy` variable! It has been used significantly in the solutions of this problem and not well explained for a newbie level coder! The idea is we\\'re dealing with `pointers` that point to a memory location! Think of it this way! You want to find gold that is hidden somewhere. Someone has put a set of clues in a sequence! Meaning, if you find the first clue and solve the problem hidden in the clue, you will get to the second clue! Solving the hidden problem of second clue will get you to the thrid clue, and so on! If you keep solving, you\\'ll get to the gold! `dummy` helps you to find the first clue!!!! \\n\\nThroughout the solution below, you\\'ll be asking yourself why `dummy` is not changing and we eventually return `dummy.next`???? It doesn\\'t make sense, right? However, if you think that `dummy` is pointing to the start and there is another variable (`temp`) that makes the linkes from node to node, you\\'ll have a better filling! \\nSimilar to the gold example if I tell you the first clue is at location X, then, you can solve clues sequentially (because of course you\\'re smart) and bingo! you find the gold! Watch [this](https://www.youtube.com/watch?v=3O_f_sk3mFc). \\n\\nThis video shows why we need the `dummy`! Since we\\'re traversing using `temp` but once `temp` gets to the tail of the sorted merged linkedlist, there\\'s no way back to the start of the list to return as a result! So `dummy` to the rescue! it does not get changed throughout the list traversals `temp` is doing! So, `dummy` makes sure we don\\'t loose the head of the thread (result list). Does this make sense? Alright! Enough with `dummy`! \\n\\nI think if you get this, the first solution feels natural! Now, watch [this](https://www.youtube.com/watch?v=GfRQvf7MB3k). You got the idea?? Nice! \\n\\n\\nFirst you initialize `dummy` and `temp`. One is sitting at the start of the linkedlist and the other (`temp`) is going to move forward find which value should be added to the list. Note that it\\'s initialized with a value `0` but it can be anything! You initialize it with your value of choice! Doesn\\'t matter since we\\'re going to finally return `dummy.next` which disregards `0` that we used to start the linkedlist. Line `#1` makes sure none of the `l1` and `l2` are empty! If one of them is empty, we should return the other! If both are nonempty, we check `val` of each of them to add the smaller one to the result linkedlist! In line `#2`, `l1.val` is smaller and we want to add it to the list. How? We use `temp` POINTER (it\\'s pointer, remember that!). Since we initialized `temp` to have value `0` at first node, we use `temp.next` to point `0` to the next value we\\'re going to add to the list `l1.val` (line `#3`). Once we do that, we update `l1` to go to the next node of `l1`. If the `if` statement of line `#2` doesn\\'t work, we do similar stuff with `l2`. And finally, if the length of `l1` and `l2` are not the same, we\\'re going to the end of one of them at some point! Line `#5` adds whatever left from whatever linkedlist to the `temp.next` (check the above video for a great explanation of this part). Note that both linkedlists were sorted initially. Also, this line takes care of when one of the linkedlists are empty. Finally, we return `dummy.next` since `dummy` is pointing to `0` and `next` to zero is what we\\'ve added throughout the process. \\n\\n```\\nclass Solution:\\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:   \\n        dummy = temp = ListNode(0)\\n        while l1 != None and l2 != None: #1\\n\\n            if l1.val < l2.val: #2\\n                temp.next = l1 #3\\n                l1 = l1.next #4\\n            else: \\n                temp.next = l2\\n                l2 = l2.next\\n            temp = temp.next\\n        temp.next = l1 or l2  #5\\n        return dummy.next #6\\n```\\n\\n\\nAnother way of solving is problem is by doing recursion. This is from [here](https://leetcode.com/problems/merge-two-sorted-lists/discuss/9735/Python-solutions-(iteratively-recursively-iteratively-in-place)). The first check is obvious! If one of them is empty, return the other one! Similar to line `#5` of previous solution. Here, we have two cases, whatever list has the smaller first element (equal elements also satisfies line `#1`), will be returned at the end. In the example `l1 = [1,2,4], l2 = [1,3,4]`, we go in the `if` statement of line `#1` first, this means that the first element of `l1` doesn\\'t get changed! Then, we move the pointer to the second element of `l1` by calling the function again but with `l1.next` and `l2` as input! This round of call, goes to line `#2` because now we have element `1` from `l2` versus `2` from `l1`. Now, basically, `l2` gets connected to the tail of `l1`. We keep moving forward by switching between `l1` and `l2` until the last element. Sorry if it\\'s not clear enough! I\\'m not a fan of recursion for such a problems! But, let me know which part it\\'s hard to understand, I\\'ll try to explain better! \\n\\n```\\nclass Solution:\\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:   \\n        if not l1 or not l2:\\n            return l1 or l2\\n        \\n        if l1.val <= l2.val: #1\\n            l1.next = self.mergeTwoLists(l1.next, l2)\\n            return l1\\n        else: #2\\n            l2.next = self.mergeTwoLists(l1, l2.next)\\n            return l2\\n```\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n===============================================================\\nFinal note: Please let me know if you want me to explain anything in more detail. \\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:   \\n        dummy = temp = ListNode(0)\\n        while l1 != None and l2 != None: #1\\n\\n            if l1.val < l2.val: #2\\n                temp.next = l1 #3\\n                l1 = l1.next #4\\n            else: \\n                temp.next = l2\\n                l2 = l2.next\\n            temp = temp.next\\n        temp.next = l1 or l2  #5\\n        return dummy.next #6\\n```\n```\\nclass Solution:\\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:   \\n        if not l1 or not l2:\\n            return l1 or l2\\n        \\n        if l1.val <= l2.val: #1\\n            l1.next = self.mergeTwoLists(l1.next, l2)\\n            return l1\\n        else: #2\\n            l2.next = self.mergeTwoLists(l1, l2.next)\\n            return l2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3177193,
                "title": "simple-java-runtime-1-ms-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        if(list1!=null && list2!=null){\\n        if(list1.val<list2.val){\\n            list1.next=mergeTwoLists(list1.next,list2);\\n            return list1;\\n            }\\n            else{\\n                list2.next=mergeTwoLists(list1,list2.next);\\n                return list2;\\n        }\\n        }\\n        if(list1==null)\\n            return list2;\\n        return list1;\\n    }\\n}\\n```\\n![7abc56.jpg](https://assets.leetcode.com/users/images/e31fd3eb-1900-4974-bbbf-b21af86784c5_1676225247.3487868.jpeg)\\n",
                "solutionTags": [
                    "Java",
                    "Linked List"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        if(list1!=null && list2!=null){\\n        if(list1.val<list2.val){\\n            list1.next=mergeTwoLists(list1.next,list2);\\n            return list1;\\n            }\\n            else{\\n                list2.next=mergeTwoLists(list1,list2.next);\\n                return list2;\\n        }\\n        }\\n        if(list1==null)\\n            return list2;\\n        return list1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 9713,
                "title": "a-recursive-solution",
                "content": "    class Solution {\\n    public:\\n        ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {\\n            if(l1 == NULL) return l2;\\n            if(l2 == NULL) return l1;\\n            \\n            if(l1->val < l2->val) {\\n                l1->next = mergeTwoLists(l1->next, l2);\\n                return l1;\\n            } else {\\n                l2->next = mergeTwoLists(l2->next, l1);\\n                return l2;\\n            }\\n        }\\n    };\\n\\n\\nThis solution is not a tail-recursive, the stack will overflow while the list is too long :)\\nhttp://en.wikipedia.org/wiki/Tail_call",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {\\n            if(l1 == NULL) return l2;\\n            if(l2 == NULL) return l1;\\n            \\n            if(l1->val < l2->val) {\\n                l1->next = mergeTwoLists(l1->next, l2);\\n                return l1;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2809815,
                "title": "java",
                "content": "If you like it pls upvote\\n```\\n\\n\\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        ListNode prehead = new ListNode(-1);\\n        ListNode cur = prehead;\\n\\n        while (l1 != null && l2 != null) {\\n            if (l1.val <= l2.val) {\\n                cur.next = l1;\\n                l1 = l1.next;\\n            } else {\\n                cur.next = l2;\\n                l2 = l2.next;\\n            }\\n            cur = cur.next;\\n        }\\n\\n        cur.next = l1 == null ? l2 : l1;\\n        return prehead.next;\\n    }\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\n\\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        ListNode prehead = new ListNode(-1);\\n        ListNode cur = prehead;\\n\\n        while (l1 != null && l2 != null) {\\n            if (l1.val <= l2.val) {\\n                cur.next = l1;\\n                l1 = l1.next;\\n            } else {\\n                cur.next = l2;\\n                l2 = l2.next;\\n            }\\n            cur = cur.next;\\n        }\\n\\n        cur.next = l1 == null ? l2 : l1;\\n        return prehead.next;\\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 10065,
                "title": "clean-simple-o-n-m-c-solution-without-dummy-head-and-recurtion",
                "content": "Please refer to the comments inline.\\n\\n    ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {\\n        \\n        if(NULL == l1) return l2;\\n        if(NULL == l2) return l1;\\n        \\n        ListNode* head=NULL;    // head of the list to return\\n        \\n        // find first element (can use dummy node to put this part inside of the loop)\\n        if(l1->val < l2->val)       { head = l1; l1 = l1->next; }\\n        else                        { head = l2; l2 = l2->next; }\\n        \\n        ListNode* p = head;     // pointer to form new list\\n        \\n        // I use && to remove extra IF from the loop\\n        while(l1 && l2){\\n            if(l1->val < l2->val)   { p->next = l1; l1 = l1->next; }\\n            else                    { p->next = l2; l2 = l2->next; }\\n            p=p->next;\\n        }\\n        \\n        // add the rest of the tail, done!\\n        if(l1)  p->next=l1;\\n        else    p->next=l2;\\n        \\n        return head;\\n    }",
                "solutionTags": [],
                "code": "Please refer to the comments inline.\\n\\n    ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {\\n        \\n        if(NULL == l1) return l2;\\n        if(NULL == l2) return l1;\\n        \\n        ListNode* head=NULL;    // head of the list to return\\n        \\n        // find first element (can use dummy node to put this part inside of the loop)\\n        if(l1->val < l2->val)       { head = l1; l1 = l1->next; }\\n        else                        { head = l2; l2 = l2->next; }\\n        \\n        ListNode* p = head;     // pointer to form new list\\n        \\n        // I use && to remove extra IF from the loop\\n        while(l1 && l2){\\n            if(l1->val < l2->val)   { p->next = l1; l1 = l1->next; }\\n            else                    { p->next = l2; l2 = l2->next; }\\n            p=p->next;\\n        }\\n        \\n        // add the rest of the tail, done!\\n        if(l1)  p->next=l1;\\n        else    p->next=l2;\\n        \\n        return head;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 9716,
                "title": "my-recursive-way-to-solve-this-problem-java-easy-understanding",
                "content": "Hello every one, here is my code, simple but works well:\\n\\n    public class Solution {\\n        public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n            if(l1 == null){\\n                return l2;\\n            }\\n            if(l2 == null){\\n                return l1;\\n            }\\n            \\n            ListNode mergeHead;\\n            if(l1.val < l2.val){\\n                mergeHead = l1;\\n                mergeHead.next = mergeTwoLists(l1.next, l2);\\n            }\\n            else{\\n                mergeHead = l2;\\n                mergeHead.next = mergeTwoLists(l1, l2.next);\\n            }\\n            return mergeHead;\\n        }\\n    }\\n\\t\\n",
                "solutionTags": [
                    "Java",
                    "Linked List",
                    "Recursion"
                ],
                "code": "class Solution {\\n        public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n            if(l1 == null){\\n                return l2;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2705782,
                "title": "js-recursion-with-exlanation",
                "content": "To solve this problem, we can use **recursion**, calling it until one of the sheets is **null**, and while it is not null, we do an **equality check**, if list1 is less than or equal to list2, we call recursion with **list1.next** = mergeTwoLists (**list1.next**, list2), else if the value is greater than **list2.next** = mergeTwoLists(list1, **list2.next**). If one of the sheets is null, we simply return the opposite list **(we don\\'t care if it\\'s null or not**). Thus, when the recursion ends, the stack will begin to collapse in reverse order, which will allow us to get a new merged sorted list.\\n\\nI hope the picture below helps you understand better.\\n\\n![image](https://assets.leetcode.com/users/images/693abd06-11db-47eb-9bed-92853dcced4f_1665835272.4866369.png)\\n![image](https://assets.leetcode.com/users/images/c63066ed-9e8c-42c9-aa68-4091e45817b4_1665835300.8266866.png)\\n\\n**Time Complexity:** Since we\\'re completely going through two lists. Thus, the time complexity is **O(m+n)**, where m and n are the lengths of the two lists to be combined.\\n\\n```\\nvar mergeTwoLists = function (l1, l2) {\\n    if (!l1) return l2;\\n    else if (!l2) return l1;\\n    else if (l1.val <= l2.val) {\\n        l1.next = mergeTwoLists(l1.next, l2);\\n        return l1;\\n    } else {\\n        l2.next = mergeTwoLists(l1, l2.next);\\n        return l2\\n    }\\n};\\n```\\n\\nI hope I was able to explain clearly.\\n**Happy coding!** \\uD83D\\uDE43",
                "solutionTags": [
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```\\nvar mergeTwoLists = function (l1, l2) {\\n    if (!l1) return l2;\\n    else if (!l2) return l1;\\n    else if (l1.val <= l2.val) {\\n        l1.next = mergeTwoLists(l1.next, l2);\\n        return l1;\\n    } else {\\n        l2.next = mergeTwoLists(l1, l2.next);\\n        return l2\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 9906,
                "title": "just-can-t-image-why-there-are-so-many-recursion-enthusiast-mine-is-a-neat-iterative-little-ones",
                "content": "    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        ListNode preHead = new ListNode(0);\\n        ListNode last = preHead;\\n        \\n        while(l1 != null && l2 != null) {\\n            if(l1.val > l2.val) {\\n                last.next = l2;\\n                l2 = l2.next;\\n            } else {\\n                last.next = l1;\\n                l1 = l1.next;\\n            }\\n            last = last.next;\\n        }\\n        \\n        if(l1 == null) {\\n            last.next = l2;\\n        } else {\\n            last.next = l1;\\n        }\\n        \\n        return preHead.next;\\n    }",
                "solutionTags": [
                    "Java",
                    "Linked List"
                ],
                "code": "    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        ListNode preHead = new ListNode(0);\\n        ListNode last = preHead;\\n        \\n        while(l1 != null && l2 != null) {\\n            if(l1.val > l2.val) {\\n                last.next = l2;\\n                l2 = l2.next;\\n            } else {\\n                last.next = l1;\\n                l1 = l1.next;\\n            }\\n            last = last.next;\\n        }\\n        \\n        if(l1 == null) {\\n            last.next = l2;\\n        } else {\\n            last.next = l1;\\n        }\\n        \\n        return preHead.next;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 9963,
                "title": "simple-javascript-solution",
                "content": "    var mergeTwoLists = function(l1, l2) {\\n        var mergedHead = { val : -1, next : null },\\n            crt = mergedHead;\\n        while(l1 && l2) {\\n            if(l1.val > l2.val) {\\n                crt.next = l2;\\n                l2 = l2.next;\\n            } else {\\n                crt.next = l1;\\n                l1 = l1.next;\\n            }\\n            crt = crt.next;\\n        }\\n        crt.next = l1 || l2;\\n        \\n        return mergedHead.next;\\n    };",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "    var mergeTwoLists = function(l1, l2) {\\n        var mergedHead = { val : -1, next : null },\\n            crt = mergedHead;\\n        while(l1 && l2) {\\n            if(l1.val > l2.val) {\\n                crt.next = l2;\\n                l2 = l2.next;\\n            } else {\\n                crt.next = l1;\\n                l1 = l1.next;\\n            }\\n            crt = crt.next;\\n        }\\n        crt.next = l1 || l2;\\n        \\n        return mergedHead.next;\\n    };",
                "codeTag": "Unknown"
            },
            {
                "id": 9858,
                "title": "java-solution-for-reference",
                "content": "Similar to array, the difference is if any of two listnode is not null after first loop, we only need to add it as previous node's next and no need to add them one by one.\\n\\n\\n    public class Solution {\\n        public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n            if (l1 == null && l2 == null) {\\n                return null;\\n            }\\n            if (l1 == null) {\\n                return l2;\\n            }\\n            if (l2 == null) {\\n                return l1;\\n            }\\n            ListNode result = new ListNode(0);\\n            ListNode prev = result;\\n            while (l1 != null && l2 != null) {\\n                if (l1.val <= l2.val) {\\n                    prev.next = l1;\\n                    l1 = l1.next;\\n                } else {\\n                    prev.next = l2;\\n                    l2 = l2.next;\\n                }\\n                prev = prev.next;\\n            }\\n            if (l1 != null) {\\n                prev.next = l1;\\n            }\\n            if (l2 != null) {\\n                prev.next = l2;\\n            }\\n            return result.next;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n            if (l1 == null && l2 == null) {\\n                return null;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 238175,
                "title": "10-line-javascript-recursion",
                "content": "```\\nvar mergeTwoLists = function(l1, l2) {\\n  if(!l1 || !l2) return (l1? l1:l2);\\n  if(l1.val < l2.val) {\\n    l1.next = mergeTwoLists(l1.next, l2);\\n    return l1;\\n  } else {\\n    l2.next = mergeTwoLists(l1, l2.next);\\n    return l2;\\n  }\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```\\nvar mergeTwoLists = function(l1, l2) {\\n  if(!l1 || !l2) return (l1? l1:l2);\\n  if(l1.val < l2.val) {\\n    l1.next = mergeTwoLists(l1.next, l2);\\n    return l1;\\n  } else {\\n    l2.next = mergeTwoLists(l1, l2.next);\\n    return l2;\\n  }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 9814,
                "title": "3-lines-c-12ms-and-c-4ms",
                "content": "**C++**\\n\\nThe first line ensures that `a` is at least as good a list head as `b`, by swapping them if that's not already the case. The second line merges the remaining lists behind `a`.\\n\\n    ListNode* mergeTwoLists(ListNode* a, ListNode* b) {\\n        if (!a || b && a->val > b->val) swap(a, b);\\n        if (a) a->next = mergeTwoLists(a->next, b);\\n        return a;\\n    }\\n\\n---\\n\\n**C**\\n\\nSame solution, I just have to replace C++'s `swap`. I'm not sure whether evaluation order is standardized, but it worked and got accepted this way.\\n\\n    struct ListNode* mergeTwoLists(struct ListNode* a, struct ListNode* b) {\\n        if (!a || b && a->val > b->val) a += b - (b = a);\\n        if (a) a->next = mergeTwoLists(a->next, b);\\n        return a;\\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "**C++**\\n\\nThe first line ensures that `a` is at least as good a list head as `b`, by swapping them if that's not already the case. The second line merges the remaining lists behind `a`.\\n\\n    ListNode* mergeTwoLists(ListNode* a, ListNode* b) {\\n        if (!a || b && a->val > b->val) swap(a, b);\\n        if (a) a->next = mergeTwoLists(a->next, b);\\n        return a;\\n    }\\n\\n---\\n\\n**C**\\n\\nSame solution, I just have to replace C++'s `swap`. I'm not sure whether evaluation order is standardized, but it worked and got accepted this way.\\n\\n    struct ListNode* mergeTwoLists(struct ListNode* a, struct ListNode* b) {\\n        if (!a || b && a->val > b->val) a += b - (b = a);\\n        if (a) a->next = mergeTwoLists(a->next, b);\\n        return a;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2684056,
                "title": "python-easy-solution-99-faster-merge-two-sorted-lists",
                "content": "**IF YOU FIND THIS POST HELPFUL PLEASE UPVOTE**\\n\\nVisit this blog to learn Python tips and techniques and to find a Leetcode solution with an explanation: https://www.python-techs.com/\\n\\n**Solution:**\\n```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        newHead = dummyHead = ListNode()\\n        while list1 and list2:\\n            if list1.val < list2.val:\\n                dummyHead.next = list1\\n                list1 = list1.next\\n            else:\\n                dummyHead.next = list2\\n                list2 = list2.next\\n            dummyHead = dummyHead.next\\n        \\n        if list1:\\n            dummyHead.next = list1\\n        if list2:\\n            dummyHead.next = list2\\n        return newHead.next\\n```\\n**Thank you for reading! \\uD83D\\uDE04 Comment if you have any questions or feedback.**",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Linked List"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        newHead = dummyHead = ListNode()\\n        while list1 and list2:\\n            if list1.val < list2.val:\\n                dummyHead.next = list1\\n                list1 = list1.next\\n            else:\\n                dummyHead.next = list2\\n                list2 = list2.next\\n            dummyHead = dummyHead.next\\n        \\n        if list1:\\n            dummyHead.next = list1\\n        if list2:\\n            dummyHead.next = list2\\n        return newHead.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 563498,
                "title": "c-short-recursive-solution",
                "content": "```\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if(l1 == NULL) return l2;\\n        if(l2 == NULL) return l1;\\n        if(l1->val>=l2->val) l2->next = mergeTwoLists(l1, l2-> next);\\n        else{\\n            l1->next = mergeTwoLists(l1->next, l2);\\n            l2 = l1;\\n        }return l2;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if(l1 == NULL) return l2;\\n        if(l2 == NULL) return l1;\\n        if(l1->val>=l2->val) l2->next = mergeTwoLists(l1, l2-> next);\\n        else{\\n            l1->next = mergeTwoLists(l1->next, l2);\\n            l2 = l1;\\n        }return l2;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3627101,
                "title": "video-step-by-step-visualization-and-explanation",
                "content": "https://www.youtube.com/watch?v=E5XXiY6QnAs\\n\\nWe\\'ll create a starting node called `head` and use a pointer called `current` to traverse the two lists.  At each iteration of the loop, we compare the values of the nodes at list1 and list2, and point `current.next` to the <i>smaller</i> node.  Then we advance the pointers and repeat until one of the list pointers reaches the end of the list.\\n\\nAt this point, there\\'s no need to iterate through the rest of the other list because we know that it\\'s still in sorted order.  So `current.next = list1 or list2` points current.next to the list that still has nodes left.  The last step is just to return `head.next`, since head was just a placeholder node and the actual list starts at `head.next`.\\n\\n# Code\\n```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        head = ListNode()\\n        current = head\\n        while list1 and list2:\\n            if list1.val < list2.val:\\n                current.next = list1\\n                list1 = list1.next\\n            else:\\n                current.next = list2\\n                list2 = list2.next\\n            current = current.next\\n\\n        current.next = list1 or list2\\n        return head.next\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Linked List"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        head = ListNode()\\n        current = head\\n        while list1 and list2:\\n            if list1.val < list2.val:\\n                current.next = list1\\n                list1 = list1.next\\n            else:\\n                current.next = list2\\n                list2 = list2.next\\n            current = current.next\\n\\n        current.next = list1 or list2\\n        return head.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 341711,
                "title": "clean-javascript",
                "content": "Here is a simple, intuitive Javascript solution.\\n\\n\\n**Javascript**\\n```javascript\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(l1, l2) {\\n    let list = new ListNode()\\n    let head = list\\n    \\n    while (l1 !== null && l2 !== null) {\\n\\t\\n\\t\\t// Select the smallest value from either linked list,\\n\\t\\t// then increment that list forward.\\n        if (l1.val < l2.val) {\\n            list.next = new ListNode(l1.val)\\n            l1 = l1.next\\n        } else {\\n            list.next = new ListNode(l2.val)\\n            l2 = l2.next\\n        }\\n        \\n        list = list.next\\n    }\\n    \\n\\t// It\\'s possible that one linked list is shorter than the other so we just\\n\\t// add on the remainder of the last linked list. It\\'s already sorted :)\\n    if (l1 !== null)\\n        list.next = l1\\n    if (l2 !== null)\\n        list.next = l2\\n    \\n\\t// return .next because this first element in the linkedlist is empty\\n    return head.next\\n};\\n```",
                "solutionTags": [],
                "code": "```javascript\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(l1, l2) {\\n    let list = new ListNode()\\n    let head = list\\n    \\n    while (l1 !== null && l2 !== null) {\\n\\t\\n\\t\\t// Select the smallest value from either linked list,\\n\\t\\t// then increment that list forward.\\n        if (l1.val < l2.val) {\\n            list.next = new ListNode(l1.val)\\n            l1 = l1.next\\n        } else {\\n            list.next = new ListNode(l2.val)\\n            l2 = l2.next\\n        }\\n        \\n        list = list.next\\n    }\\n    \\n\\t// It\\'s possible that one linked list is shorter than the other so we just\\n\\t// add on the remainder of the last linked list. It\\'s already sorted :)\\n    if (l1 !== null)\\n        list.next = l1\\n    if (l2 !== null)\\n        list.next = l2\\n    \\n\\t// return .next because this first element in the linkedlist is empty\\n    return head.next\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 9930,
                "title": "9-lines-c-simple-solution",
                "content": "    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if (l1 == NULL) return l2;\\n        if (l2 == NULL) return l1;\\n        if (l1->val <= l2->val) {\\n            l1->next = mergeTwoLists(l1->next, l2);\\n            return l1;\\n        } else {\\n            l2->next = mergeTwoLists(l1, l2->next);\\n            return l2;\\n        }\\n    }",
                "solutionTags": [],
                "code": "    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if (l1 == NULL) return l2;\\n        if (l2 == NULL) return l1;\\n        if (l1->val <= l2->val) {\\n            l1->next = mergeTwoLists(l1->next, l2);\\n            return l1;\\n        } else {\\n            l2->next = mergeTwoLists(l1, l2->next);\\n            return l2;\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1001380,
                "title": "c-recursive-and-iterative-solution",
                "content": "#### Recursive Approach\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n\\t\\t\\tif(l1 == NULL){\\n\\t\\t\\t\\treturn l2;\\n\\t\\t\\t}\\n\\t\\t\\tif(l2 == NULL){\\n\\t\\t\\t\\treturn l1;\\n\\t\\t\\t}        \\n\\t\\t\\tif(l1->val < l2->val){\\n\\t\\t\\t\\tl1->next = mergeTwoLists(l1->next, l2);\\n\\t\\t\\t\\treturn l1;\\n\\t\\t\\t}\\n\\t\\t\\telse{\\n\\t\\t\\t\\tl2->next = mergeTwoLists(l1, l2->next);\\n\\t\\t\\t\\treturn l2;            \\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\t\\n#### Iterative Approach\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n\\t\\t\\tif(l1 == NULL){\\n\\t\\t\\t\\treturn l2;\\n\\t\\t\\t}\\n\\t\\t\\tif(l2 == NULL){\\n\\t\\t\\t\\treturn l1;\\n\\t\\t\\t}\\n\\t\\t\\tListNode* newHead = NULL;\\n\\t\\t\\tListNode* newTail = NULL;\\n\\t\\t\\tif(l1->val < l2->val){\\n\\t\\t\\t\\tnewHead = l1;\\n\\t\\t\\t\\tnewTail = l1;\\n\\t\\t\\t\\tl1 = l1->next;\\n\\t\\t\\t}\\n\\t\\t\\telse{\\n\\t\\t\\t\\tnewHead = l2;\\n\\t\\t\\t\\tnewTail = l2;\\n\\t\\t\\t\\tl2 = l2->next;\\n\\t\\t\\t}\\n\\t\\t\\twhile(l1 != NULL and l2 != NULL){\\n\\t\\t\\t\\tif(l1->val < l2->val){\\n\\t\\t\\t\\t\\tnewTail->next = l1;\\n\\t\\t\\t\\t\\tnewTail = newTail->next;\\n\\t\\t\\t\\t\\tl1 = l1->next;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\tnewTail->next = l2;\\n\\t\\t\\t\\t\\tnewTail = newTail->next;\\n\\t\\t\\t\\t\\tl2 = l2->next;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif(l1 != NULL){\\n\\t\\t\\t\\tnewTail->next = l1;\\n\\t\\t\\t\\tl1 = l1->next;\\n\\t\\t\\t}\\n\\t\\t\\tif(l2 != NULL){\\n\\t\\t\\t\\tnewTail->next = l2;\\n\\t\\t\\t}\\n\\t\\t\\treturn newHead;\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers",
                    "Recursion",
                    "Iterator"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n\\t\\t\\tif(l1 == NULL){\\n\\t\\t\\t\\treturn l2;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1132854,
                "title": "accepted-solution-for-swift",
                "content": "<blockquote>\\n<b>Disclaimer:</b> By using any content from this post or thread, you release the author(s) from all liability and warranties of any kind. You can are to use the content as you see fit. Any suggestions for improvement are welcome and greatly appreciated! Happy coding!\\n</blockquote>\\n\\n```swift\\nclass Solution {\\n    func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        if l1 == nil || l2 == nil { return l1 == nil ? l2 : l1 }\\n        if l1!.val <= l2!.val {\\n            l1?.next = mergeTwoLists(l1?.next, l2)\\n            return l1\\n        } else {\\n            l2?.next = mergeTwoLists(l1, l2?.next)\\n            return l2\\n        }\\n    }\\n}\\n```\\n\\n---\\n\\n<details>\\n<summary>\\n<b>ListNode</b>\\n</summary>\\n\\n```swift\\npublic class ListNode {\\n    public var val: Int\\n    public var next: ListNode?\\n    public init() { self.val = 0; self.next = nil; }\\n    public init(_ val: Int) { self.val = val; self.next = nil; }\\n    public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\\n    \\n    // An additional initializer that can be used to implement nodes from an array\\n    public init?(_ array: [Int]) {\\n        guard !array.isEmpty else { return nil }\\n        self.val = array[0]\\n        var prev: ListNode = self\\n        for i in 1..<array.count {\\n            let new = ListNode(array[i])\\n            prev.next = new\\n            prev = new\\n        }\\n    }\\n}\\n\\n// Extension for ListNode\\n\\nextension ListNode: Equatable {\\n    public static func == (lhs: ListNode, rhs: ListNode) -> Bool {\\n        return lhs.val == rhs.val && lhs.next == rhs.next\\n    }\\n}\\n```\\n\\n</details>\\n\\n<br>\\n\\n<details>\\n<summary>\\n<img src=\"https://git.io/JDblm\" height=\"24\">\\n<b>TEST CASES</b>\\n</summary>\\n\\n<pre>\\n<b>Result:</b> Executed 3 tests, with 0 failures (0 unexpected) in 0.014 (0.016) seconds\\n</pre>\\n\\n```swift\\nclass Tests {\\n    \\n    private typealias sol = Solution\\n    private typealias LN = ListNode\\n    \\n    static func testExample1() {\\n        let node = sol().mergeTwoLists(LN([1,2,4]), LN([1,3,4]))\\n        print(node?.val == LN([1,1,2,3,4,4])?.val)\\n    }\\n    \\n    static func testExample2() {\\n        let node = sol().mergeTwoLists(LN([]), LN([]))\\n        print(node?.val == LN([])?.val)\\n    }\\n    \\n    static func testExample3() {\\n        let node = sol().mergeTwoLists(LN([]), LN([0]))\\n        print(node?.val == LN([0])?.val)\\n    }\\n}\\n\\nTests.testExample1()\\nTests.testExample2()\\nTests.testExample3()\\n```\\n</details>",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```swift\\nclass Solution {\\n    func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        if l1 == nil || l2 == nil { return l1 == nil ? l2 : l1 }\\n        if l1!.val <= l2!.val {\\n            l1?.next = mergeTwoLists(l1?.next, l2)\\n            return l1\\n        } else {\\n            l2?.next = mergeTwoLists(l1, l2?.next)\\n            return l2\\n        }\\n    }\\n}\\n```\n```swift\\npublic class ListNode {\\n    public var val: Int\\n    public var next: ListNode?\\n    public init() { self.val = 0; self.next = nil; }\\n    public init(_ val: Int) { self.val = val; self.next = nil; }\\n    public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\\n    \\n    // An additional initializer that can be used to implement nodes from an array\\n    public init?(_ array: [Int]) {\\n        guard !array.isEmpty else { return nil }\\n        self.val = array[0]\\n        var prev: ListNode = self\\n        for i in 1..<array.count {\\n            let new = ListNode(array[i])\\n            prev.next = new\\n            prev = new\\n        }\\n    }\\n}\\n\\n// Extension for ListNode\\n\\nextension ListNode: Equatable {\\n    public static func == (lhs: ListNode, rhs: ListNode) -> Bool {\\n        return lhs.val == rhs.val && lhs.next == rhs.next\\n    }\\n}\\n```\n```swift\\nclass Tests {\\n    \\n    private typealias sol = Solution\\n    private typealias LN = ListNode\\n    \\n    static func testExample1() {\\n        let node = sol().mergeTwoLists(LN([1,2,4]), LN([1,3,4]))\\n        print(node?.val == LN([1,1,2,3,4,4])?.val)\\n    }\\n    \\n    static func testExample2() {\\n        let node = sol().mergeTwoLists(LN([]), LN([]))\\n        print(node?.val == LN([])?.val)\\n    }\\n    \\n    static func testExample3() {\\n        let node = sol().mergeTwoLists(LN([]), LN([0]))\\n        print(node?.val == LN([0])?.val)\\n    }\\n}\\n\\nTests.testExample1()\\nTests.testExample2()\\nTests.testExample3()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3224012,
                "title": "simple-c-s-c-o-1-beats-99-84",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(m+n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        \\n        if(l1 == NULL) return l2;\\n        if(l2 == NULL) return l1;\\n\\n\\n        if(l1->val > l2->val){  // taking L1 is smaller than l2 \\n            swap(l1,l2);    // haar baar l1 hi chota hoga\\n        }\\n        ListNode* result = l1;\\n        ListNode* temp = NULL;\\n        while(l1 != NULL && l2 != NULL){\\n            \\n            if(l1->val <= l2->val ){\\n                temp = l1;\\n                l1 = l1->next;\\n            }\\n            else {\\n                temp -> next = l2;\\n                swap(l1,l2); // haar baar l1 hi chota hoga\\n            }\\n        }\\n         while(l1 != NULL){\\n            temp->next = l1;\\n            temp = l1;\\n            l2 = l2->next;\\n        }\\n        while(l2 != NULL){\\n            temp->next = l2;\\n            temp = l2;\\n            l2 = l2 ->next;\\n        }\\n       \\n        return result;\\n    }\\n};\\n```\\n![7abc56.jpg](https://assets.leetcode.com/users/images/a7e09c3d-720e-4f75-ae4b-fefcab01b134_1677217136.9320183.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        \\n        if(l1 == NULL) return l2;\\n        if(l2 == NULL) return l1;\\n\\n\\n        if(l1->val > l2->val){  // taking L1 is smaller than l2 \\n            swap(l1,l2);    // haar baar l1 hi chota hoga\\n        }\\n        ListNode* result = l1;\\n        ListNode* temp = NULL;\\n        while(l1 != NULL && l2 != NULL){\\n            \\n            if(l1->val <= l2->val ){\\n                temp = l1;\\n                l1 = l1->next;\\n            }\\n            else {\\n                temp -> next = l2;\\n                swap(l1,l2); // haar baar l1 hi chota hoga\\n            }\\n        }\\n         while(l1 != NULL){\\n            temp->next = l1;\\n            temp = l1;\\n            l2 = l2->next;\\n        }\\n        while(l2 != NULL){\\n            temp->next = l2;\\n            temp = l2;\\n            l2 = l2 ->next;\\n        }\\n       \\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 402908,
                "title": "csharp-recursive-solution",
                "content": "`````\\npublic ListNode MergeTwoLists(ListNode l1, ListNode l2){\\n        if(l1 == null) return l2;\\n        if(l2 == null) return l1;\\n        if(l1.val <= l2.val){\\n            l1.next = MergeTwoLists(l1.next,l2);\\n            return l1;\\n        }else{\\n            l2.next = MergeTwoLists(l1,l2.next);\\n            return l2;\\n        }\\n    }\\n````",
                "solutionTags": [
                    "C#"
                ],
                "code": "`````\\npublic ListNode MergeTwoLists(ListNode l1, ListNode l2){\\n        if(l1 == null) return l2;\\n        if(l2 == null) return l1;\\n        if(l1.val <= l2.val){\\n            l1.next = MergeTwoLists(l1.next,l2);\\n            return l1;\\n        }else{\\n            l2.next = MergeTwoLists(l1,l2.next);\\n            return l2;\\n        }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 10010,
                "title": "recursive-c-solution-4ms",
                "content": " \\n\\n    struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\\n        if (l1 == NULL)\\n            return l2;\\n        if (l2 == NULL)\\n            return l1;\\n        if (l1->val <= l2->val) {\\n            l1->next = mergeTwoLists(l1->next, l2);\\n            return l1;\\n        } else {\\n            l2->next = mergeTwoLists(l1, l2->next);\\n            return l2;\\n        }\\n    }",
                "solutionTags": [],
                "code": " \\n\\n    struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\\n        if (l1 == NULL)\\n            return l2;\\n        if (l2 == NULL)\\n            return l1;\\n        if (l1->val <= l2->val) {\\n            l1->next = mergeTwoLists(l1->next, l2);\\n            return l1;\\n        } else {\\n            l2->next = mergeTwoLists(l1, l2->next);\\n            return l2;\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1872003,
                "title": "java-0ms-100-faster-simple-solution",
                "content": "```\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    ListNode head = new ListNode(0);\\n        \\n        if(list1 == null && list2 == null) return null;  //null checking\\n        if(list1 == null) return list2;\\n        if(list2 == null) return list1;\\n        \\n        if(list1.val > list2.val) { //comparing and merging\\n            head = list2;\\n            list2 = list2.next;\\n        }\\n        else {\\n            head = list1;\\n            list1 = list1.next;\\n        }\\n        \\n        head.next = mergeTwoLists(list1, list2);\\n        return head;\\n    }\\n}\\n```\\nPerform a dry run for better understanding !\\nHappy Coding !\\nDo Upvote if it helped !",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    ListNode head = new ListNode(0);\\n        \\n        if(list1 == null && list2 == null) return null;  //null checking\\n        if(list1 == null) return list2;\\n        if(list2 == null) return list1;\\n        \\n        if(list1.val > list2.val) { //comparing and merging\\n            head = list2;\\n            list2 = list2.next;\\n        }\\n        else {\\n            head = list1;\\n            list1 = list1.next;\\n        }\\n        \\n        head.next = mergeTwoLists(list1, list2);\\n        return head;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3431490,
                "title": "c-java-python-javascript-full-explained-iterative-approach-recursive-approach",
                "content": "# Intuition:\\nThe problem requires us to merge two sorted linked lists into a new sorted linked list. We can achieve this by comparing the values of the head nodes of the two linked lists and adding the smaller one to our new merged linked list. We can repeat this process by advancing the pointer of the smaller element and comparing it with the other linked list\\'s head node\\'s value, and we continue this process until we exhaust all the nodes in both lists. This way, we can obtain a new linked list containing all the elements of both linked lists in a sorted order.\\n\\n# Approach:\\n\\n- **Recursive Approach:**\\nThe recursive approach is based on the idea that we compare the values of the first nodes of the two lists, and whichever has the smaller value, we add that node to our merged linked list and call the same function recursively with the next node of that list and the other list\\'s current node. We repeat this process until one of the lists exhausts, and we return the merged list.\\n\\n- **Iterative Approach:**\\nThe iterative approach is based on the same idea as the recursive approach. Here, we maintain three pointers: one for the merged linked list\\'s head, one for the current node of the merged list, and one for the current node of each of the two input linked lists. We compare the two lists\\' head nodes and add the smaller one to our merged linked list and advance the pointer of that list. We continue this process until we exhaust one of the input lists, and then we add the remaining nodes of the other list to our merged linked list.\\n\\n# Complexity:\\n\\n- Time complexity: Both approaches take O(n+m) time, where n and m are the sizes of the two linked lists because we iterate through all the nodes of both linked lists at most once.\\n\\n- Space complexity: Recursive approach has a space complexity of O(n+m) due to the recursive stack space, while the iterative approach has a space complexity of O(1) since we are using constant space for storing the merged linked list.\\n# C++\\n- ### Code: Recursive Approach \\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* ptr1 = list1;\\n        ListNode* ptr2 = list2;\\n        if(ptr1 == NULL){\\n            return list2;\\n        }\\n        if(ptr2 == NULL){\\n            return list1;\\n        }\\n        if(ptr1->val < ptr2->val){\\n            ptr1->next = mergeTwoLists(ptr1->next, ptr2);\\n            return ptr1;\\n        }\\n        else{\\n            ptr2->next = mergeTwoLists(ptr1, ptr2->next);\\n            return ptr2;\\n        }\\n    }\\n};\\n```\\n- ### Code: Iterative Approach\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* ans = new ListNode();\\n        ListNode* ptr = ans;\\n        while(list1 && list2){\\n            if(list1->val <= list2->val){\\n                ans->next = new ListNode(list1->val);\\n                list1 = list1->next;\\n            }\\n            else{\\n                ans->next = new ListNode(list2->val);\\n                list2 = list2->next;\\n            }\\n            ans = ans->next;\\n        }\\n        while(list1){\\n            ans->next = new ListNode(list1->val);\\n            list1 = list1->next;\\n            ans = ans->next;\\n        }\\n        while(list2){\\n            ans->next = new ListNode(list2->val);\\n            list2 = list2->next;\\n            ans = ans->next;\\n        }\\n        return ptr->next;\\n    }\\n};\\n```\\n\\n---\\n\\n# JavaScript\\n- ### Code: Recursive Approach \\n```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(l1, l2) {\\n    if (!l1) return l2;\\n    if (!l2) return l1;\\n    if (l1.val < l2.val) {\\n        l1.next = mergeTwoLists(l1.next, l2);\\n        return l1;\\n    } else {\\n        l2.next = mergeTwoLists(l1, l2.next);\\n        return l2;\\n    }\\n};\\n\\n```\\n- ### Code: Iterative Approach\\n```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {\\n    let ans = new ListNode();\\n    let ptr = ans;\\n    while(list1 && list2){\\n        if(list1.val <= list2.val){\\n            ans.next = new ListNode(list1.val);\\n            list1 = list1.next;\\n        }\\n        else{\\n            ans.next = new ListNode(list2.val);\\n            list2 = list2.next;\\n        }\\n        ans = ans.next;\\n    }\\n    while(list1){\\n        ans.next = new ListNode(list1.val);\\n        list1 = list1.next;\\n        ans = ans.next;\\n    }\\n    while(list2){\\n        ans.next = new ListNode(list2.val);\\n        list2 = list2.next;\\n        ans = ans.next;\\n    }\\n    return ptr.next;\\n};\\n\\n```\\n\\n---\\n\\n# JAVA\\n- ### Code: Recursive Approach \\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if (list1 == null) return list2;\\n        if (list2 == null) return list1;\\n        if (list1.val < list2.val) {\\n            list1.next = mergeTwoLists(list1.next, list2);\\n            return list1;\\n        } else {\\n            list2.next = mergeTwoLists(list1, list2.next);\\n            return list2;\\n        }\\n    }\\n}\\n\\n```\\n- ### Code: Iterative Approach\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        ListNode ans = new ListNode();\\n        ListNode ptr = ans;\\n        while(list1 != null && list2 != null){\\n            if(list1.val <= list2.val){\\n                ans.next = new ListNode(list1.val);\\n                list1 = list1.next;\\n            }\\n            else{\\n                ans.next = new ListNode(list2.val);\\n                list2 = list2.next;\\n            }\\n            ans = ans.next;\\n        }\\n        while(list1 != null){\\n            ans.next = new ListNode(list1.val);\\n            list1 = list1.next;\\n            ans = ans.next;\\n        }\\n        while(list2 != null){\\n            ans.next = new ListNode(list2.val);\\n            list2 = list2.next;\\n            ans = ans.next;\\n        }\\n        return ptr.next;\\n    }\\n}\\n\\n```\\n\\n---\\n\\n# Python\\n### Code: Recursive Approach \\n```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\n\\nclass Solution(object):\\n    def mergeTwoLists(self, l1, l2):\\n        \"\"\"\\n        :type l1: ListNode\\n        :type l2: ListNode\\n        :rtype: ListNode\\n        \"\"\"\\n        if not l1: return l2\\n        if not l2: return l1\\n        if l1.val < l2.val:\\n            l1.next = self.mergeTwoLists(l1.next, l2)\\n            return l1\\n        else:\\n            l2.next = self.mergeTwoLists(l1, l2.next)\\n            return l2\\n\\n```\\n- ### Code: Iterative Approach\\n```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        \"\"\"\\n        :type list1: Optional[ListNode]\\n        :type list2: Optional[ListNode]\\n        :rtype: Optional[ListNode]\\n        \"\"\"\\n        ans = ListNode()\\n        ptr = ans\\n        while list1 and list2:\\n            if list1.val <= list2.val:\\n                ans.next = ListNode(list1.val)\\n                list1 = list1.next\\n            else:\\n                ans.next = ListNode(list2.val)\\n                list2 = list2.next\\n            ans = ans.next\\n        while list1:\\n            ans.next = ListNode(list1.val)\\n            list1 = list1.next\\n            ans = ans.next\\n        while list2:\\n            ans.next = ListNode(list2.val)\\n            list2 = list2.next\\n            ans = ans.next\\n        return ptr.next\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "JavaScript",
                    "Linked List"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* ptr1 = list1;\\n        ListNode* ptr2 = list2;\\n        if(ptr1 == NULL){\\n            return list2;\\n        }\\n        if(ptr2 == NULL){\\n            return list1;\\n        }\\n        if(ptr1->val < ptr2->val){\\n            ptr1->next = mergeTwoLists(ptr1->next, ptr2);\\n            return ptr1;\\n        }\\n        else{\\n            ptr2->next = mergeTwoLists(ptr1, ptr2->next);\\n            return ptr2;\\n        }\\n    }\\n};\\n```\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* ans = new ListNode();\\n        ListNode* ptr = ans;\\n        while(list1 && list2){\\n            if(list1->val <= list2->val){\\n                ans->next = new ListNode(list1->val);\\n                list1 = list1->next;\\n            }\\n            else{\\n                ans->next = new ListNode(list2->val);\\n                list2 = list2->next;\\n            }\\n            ans = ans->next;\\n        }\\n        while(list1){\\n            ans->next = new ListNode(list1->val);\\n            list1 = list1->next;\\n            ans = ans->next;\\n        }\\n        while(list2){\\n            ans->next = new ListNode(list2->val);\\n            list2 = list2->next;\\n            ans = ans->next;\\n        }\\n        return ptr->next;\\n    }\\n};\\n```\n```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(l1, l2) {\\n    if (!l1) return l2;\\n    if (!l2) return l1;\\n    if (l1.val < l2.val) {\\n        l1.next = mergeTwoLists(l1.next, l2);\\n        return l1;\\n    } else {\\n        l2.next = mergeTwoLists(l1, l2.next);\\n        return l2;\\n    }\\n};\\n\\n```\n```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {\\n    let ans = new ListNode();\\n    let ptr = ans;\\n    while(list1 && list2){\\n        if(list1.val <= list2.val){\\n            ans.next = new ListNode(list1.val);\\n            list1 = list1.next;\\n        }\\n        else{\\n            ans.next = new ListNode(list2.val);\\n            list2 = list2.next;\\n        }\\n        ans = ans.next;\\n    }\\n    while(list1){\\n        ans.next = new ListNode(list1.val);\\n        list1 = list1.next;\\n        ans = ans.next;\\n    }\\n    while(list2){\\n        ans.next = new ListNode(list2.val);\\n        list2 = list2.next;\\n        ans = ans.next;\\n    }\\n    return ptr.next;\\n};\\n\\n```\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if (list1 == null) return list2;\\n        if (list2 == null) return list1;\\n        if (list1.val < list2.val) {\\n            list1.next = mergeTwoLists(list1.next, list2);\\n            return list1;\\n        } else {\\n            list2.next = mergeTwoLists(list1, list2.next);\\n            return list2;\\n        }\\n    }\\n}\\n\\n```\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        ListNode ans = new ListNode();\\n        ListNode ptr = ans;\\n        while(list1 != null && list2 != null){\\n            if(list1.val <= list2.val){\\n                ans.next = new ListNode(list1.val);\\n                list1 = list1.next;\\n            }\\n            else{\\n                ans.next = new ListNode(list2.val);\\n                list2 = list2.next;\\n            }\\n            ans = ans.next;\\n        }\\n        while(list1 != null){\\n            ans.next = new ListNode(list1.val);\\n            list1 = list1.next;\\n            ans = ans.next;\\n        }\\n        while(list2 != null){\\n            ans.next = new ListNode(list2.val);\\n            list2 = list2.next;\\n            ans = ans.next;\\n        }\\n        return ptr.next;\\n    }\\n}\\n\\n```\n```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\n\\nclass Solution(object):\\n    def mergeTwoLists(self, l1, l2):\\n        \"\"\"\\n        :type l1: ListNode\\n        :type l2: ListNode\\n        :rtype: ListNode\\n        \"\"\"\\n        if not l1: return l2\\n        if not l2: return l1\\n        if l1.val < l2.val:\\n            l1.next = self.mergeTwoLists(l1.next, l2)\\n            return l1\\n        else:\\n            l2.next = self.mergeTwoLists(l1, l2.next)\\n            return l2\\n\\n```\n```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        \"\"\"\\n        :type list1: Optional[ListNode]\\n        :type list2: Optional[ListNode]\\n        :rtype: Optional[ListNode]\\n        \"\"\"\\n        ans = ListNode()\\n        ptr = ans\\n        while list1 and list2:\\n            if list1.val <= list2.val:\\n                ans.next = ListNode(list1.val)\\n                list1 = list1.next\\n            else:\\n                ans.next = ListNode(list2.val)\\n                list2 = list2.next\\n            ans = ans.next\\n        while list1:\\n            ans.next = ListNode(list1.val)\\n            list1 = list1.next\\n            ans = ans.next\\n        while list2:\\n            ans.next = ListNode(list2.val)\\n            list2 = list2.next\\n            ans = ans.next\\n        return ptr.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 9944,
                "title": "java-recursive-solution-in-6-lines",
                "content": "    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        if (l1 == null) return l2;\\n        if (l2 == null) return l1;\\n        ListNode head = l1.val < l2.val ? l1 : l2;\\n        ListNode nonHead = l1.val < l2.val ? l2 : l1;\\n        \\n        head.next = mergeTwoLists(head.next, nonHead);\\n        \\n        return head;\\n    }",
                "solutionTags": [],
                "code": "    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        if (l1 == null) return l2;\\n        if (l2 == null) return l1;\\n        ListNode head = l1.val < l2.val ? l1 : l2;\\n        ListNode nonHead = l1.val < l2.val ? l2 : l1;\\n        \\n        head.next = mergeTwoLists(head.next, nonHead);\\n        \\n        return head;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 398326,
                "title": "python3-beats-99-96-runtime-28ms",
                "content": "**Runtime: 28 ms\\nMemory Usage: 13.7 MB**\\n\\n```\\n\\nclass Solution:\\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\\n\\n        head = sort_list = ListNode(0)\\n        \\n        while(l1 and l2):\\n            if (l1.val < l2.val):\\n                sort_list.next = l1\\n                l1 = l1.next\\n                sort_list = sort_list.next\\n                \\n            elif (l1.val >= l2.val):\\n                sort_list.next = l2\\n                l2 = l2.next\\n                sort_list = sort_list.next\\n\\n        sort_list.next = l1 or l2\\n        return head.next\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n\\nclass Solution:\\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\\n\\n        head = sort_list = ListNode(0)\\n        \\n        while(l1 and l2):\\n            if (l1.val < l2.val):\\n                sort_list.next = l1\\n                l1 = l1.next\\n                sort_list = sort_list.next\\n                \\n            elif (l1.val >= l2.val):\\n                sort_list.next = l2\\n                l2 = l2.next\\n                sort_list = sort_list.next\\n\\n        sort_list.next = l1 or l2\\n        return head.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 360472,
                "title": "golang-0ms-recursive-solution",
                "content": "```\\nfunc mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {\\n\\tif l1 == nil {\\n\\t\\treturn l2\\n\\t}\\n\\tif l2 == nil {\\n\\t\\treturn l1\\n\\t}\\n\\tif l1.Val < l2.Val {\\n\\t\\tl1.Next = mergeTwoLists(l1.Next, l2)\\n\\t\\treturn l1\\n\\t}\\n\\tl2.Next = mergeTwoLists(l1, l2.Next)\\n\\treturn l2\\n}\\n\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {\\n\\tif l1 == nil {\\n\\t\\treturn l2\\n\\t}\\n\\tif l2 == nil {\\n\\t\\treturn l1\\n\\t}\\n\\tif l1.Val < l2.Val {\\n\\t\\tl1.Next = mergeTwoLists(l1.Next, l2)\\n\\t\\treturn l1\\n\\t}\\n\\tl2.Next = mergeTwoLists(l1, l2.Next)\\n\\treturn l2\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 9911,
                "title": "c-solution-using-merge-sort-concept-simple-and-documented",
                "content": "    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) \\n    {\\n        if(!l1)         // If no l1, return l2\\n            return l2;\\n        if(!l2)         // If no l2, return l1\\n            return l1;\\n        if(!l2 && !l1)  // If neither, return NULL;\\n            return NULL;\\n            \\n        ListNode* head; // The pointer we will use to construct a merged list\\n        \\n        \\n        if(l1->val < l2->val)   // If l1 less than l2\\n        {\\n            head = l1;          // We start at l1\\n            l1 = l1->next;      // and iterate l1\\n        }\\n        else                    // If l2 less than l1\\n        {\\n            head = l2;          // We start at l2\\n            l2 = l2->next;      // and iterate l2\\n        }\\n        \\n        ListNode* ret = head;   // We need to save the addres of the head of the list\\n        \\n        while(l1 && l2)         // While both input lists have values\\n        {\\n            if(l1->val < l2->val)   // Compare the current values, if l1 is less\\n            {\\n                head->next = l1;    // Append the merged list with l1's current address\\n                l1 = l1->next;      // Advance l1\\n            }\\n            else                    // Else, l2 had the low value\\n            {\\n                head->next = l2;    // Append l2 to the list\\n                l2 = l2->next;      // Advance l2\\n            }\\n            head->next->next = NULL;    // Append a NULL teminator to the list\\n            head = head->next;          // Advance the merged list\\n        }\\n        \\n        // Lastly, if list were different lengths, we need to append the longer list tail to the merged list\\n        \\n        if(l1)\\n            head->next = l1;\\n        else if(l2)\\n            head->next = l2;\\n            \\n        return ret; // Return the starting address of head that we saved.\\n        \\n        \\n    }",
                "solutionTags": [
                    "C++",
                    "Merge Sort"
                ],
                "code": "    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) \\n    {\\n        if(!l1)         // If no l1, return l2\\n            return l2;\\n        if(!l2)         // If no l2, return l1\\n            return l1;\\n        if(!l2 && !l1)  // If neither, return NULL;\\n            return NULL;\\n            \\n        ListNode* head; // The pointer we will use to construct a merged list\\n        \\n        \\n        if(l1->val < l2->val)   // If l1 less than l2\\n        {\\n            head = l1;          // We start at l1\\n            l1 = l1->next;      // and iterate l1\\n        }\\n        else                    // If l2 less than l1\\n        {\\n            head = l2;          // We start at l2\\n            l2 = l2->next;      // and iterate l2\\n        }\\n        \\n        ListNode* ret = head;   // We need to save the addres of the head of the list\\n        \\n        while(l1 && l2)         // While both input lists have values\\n        {\\n            if(l1->val < l2->val)   // Compare the current values, if l1 is less\\n            {\\n                head->next = l1;    // Append the merged list with l1's current address\\n                l1 = l1->next;      // Advance l1\\n            }\\n            else                    // Else, l2 had the low value\\n            {\\n                head->next = l2;    // Append l2 to the list\\n                l2 = l2->next;      // Advance l2\\n            }\\n            head->next->next = NULL;    // Append a NULL teminator to the list\\n            head = head->next;          // Advance the merged list\\n        }\\n        \\n        // Lastly, if list were different lengths, we need to append the longer list tail to the merged list\\n        \\n        if(l1)\\n            head->next = l1;\\n        else if(l2)\\n            head->next = l2;\\n            \\n        return ret; // Return the starting address of head that we saved.\\n        \\n        \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2383569,
                "title": "fastest-solution-explained-0ms-100-o-n-time-complexity-o-n-space-complexity",
                "content": "**As a professional with a passion for problem-solving and collaboration, I am always looking to expand my network of like-minded individuals on LinkedIn. By connecting with me, we can work together to tackle complex challenges, share ideas, and grow both professionally and personally.**\\n\\n**Whether you\\'re an expert in your field or just starting out, I welcome connections from all backgrounds and experiences. By building a diverse and collaborative network, we can leverage our unique perspectives and skill sets to push the boundaries of what\\'s possible.**\\n\\n**So, if you\\'re interested in connecting and exploring the potential for future collaborations, please don\\'t hesitate to reach out. Let\\'s start a conversation and see where it takes us!**\\n\\n---\\n\\nhttps://www.linkedin.com/in/cucerdariancatalin/\\nhttps://www.linkedin.com/in/cucerdariancatalin/\\nhttps://www.linkedin.com/in/cucerdariancatalin/\\n\\n---\\n(Note: This is part of a series of Leetcode solution explanations. If you like this solution or find it useful, ***please upvote*** this post.)\\n***Take care brother, peace, love!***\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 3.27MB*** (beats 99.04% / 90.42%).\\n* *** Java ***\\n\\n```\\n\\npublic ListNode mergeTwoLists(ListNode l1, ListNode l2){\\n\\t\\tif(l1 == null) return l2;\\n\\t\\tif(l2 == null) return l1;\\n\\t\\tif(l1.val < l2.val){\\n\\t\\t\\tl1.next = mergeTwoLists(l1.next, l2);\\n\\t\\t\\treturn l1;\\n\\t\\t} else{\\n\\t\\t\\tl2.next = mergeTwoLists(l1, l2.next);\\n\\t\\t\\treturn l2;\\n\\t\\t}\\n}\\n\\n```\\n\\n```\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    ListNode head = new ListNode(0);\\n        \\n        if(list1 == null && list2 == null) return null;  //null checking\\n        if(list1 == null) return list2;\\n        if(list2 == null) return list1;\\n        \\n        if(list1.val > list2.val) { //comparing and merging\\n            head = list2;\\n            list2 = list2.next;\\n        }\\n        else {\\n            head = list1;\\n            list1 = list1.next;\\n        }\\n        \\n        head.next = mergeTwoLists(list1, list2);\\n        return head;\\n    }\\n}\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 10MB*** (beats 100.00% / 95.49%).\\n* *** Python ***\\n\\n```\\n\\n# iteratively\\ndef mergeTwoLists1(self, l1, l2):\\n    dummy = cur = ListNode(0)\\n    while l1 and l2:\\n        if l1.val < l2.val:\\n            cur.next = l1\\n            l1 = l1.next\\n        else:\\n            cur.next = l2\\n            l2 = l2.next\\n        cur = cur.next\\n    cur.next = l1 or l2\\n    return dummy.next\\n    \\n# recursively    \\ndef mergeTwoLists2(self, l1, l2):\\n    if not l1 or not l2:\\n        return l1 or l2\\n    if l1.val < l2.val:\\n        l1.next = self.mergeTwoLists(l1.next, l2)\\n        return l1\\n    else:\\n        l2.next = self.mergeTwoLists(l1, l2.next)\\n        return l2\\n        \\n# in-place, iteratively        \\ndef mergeTwoLists(self, l1, l2):\\n    if None in (l1, l2):\\n        return l1 or l2\\n    dummy = cur = ListNode(0)\\n    dummy.next = l1\\n    while l1 and l2:\\n        if l1.val < l2.val:\\n            l1 = l1.next\\n        else:\\n            nxt = cur.next\\n            cur.next = l2\\n            tmp = l2.next\\n            l2.next = nxt\\n            l2 = tmp\\n        cur = cur.next\\n    cur.next = l1 or l2\\n    return dummy.next\\n\\n```\\n\\n```\\nclass Solution:\\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\\n\\n        head = sort_list = ListNode(0)\\n        \\n        while(l1 and l2):\\n            if (l1.val < l2.val):\\n                sort_list.next = l1\\n                l1 = l1.next\\n                sort_list = sort_list.next\\n                \\n            elif (l1.val >= l2.val):\\n                sort_list.next = l2\\n                l2 = l2.next\\n                sort_list = sort_list.next\\n\\n        sort_list.next = l1 or l2\\n        return head.next\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 23.7MB*** (beats 59.24% / 60.42%).\\n* *** C++ ***\\n\\n**RECURSIVE APPROACH**\\n```\\n\\nclass Solution {\\npublic:\\n\\tListNode* mergeTwoLists(ListNode* l1, ListNode* l2) \\n  {\\n\\t\\t// if list1 happen to be NULL\\n\\t\\t// we will simply return list2.\\n\\t\\tif(l1 == NULL)\\n        {\\n\\t\\t\\treturn l2;\\n\\t\\t}\\n\\t\\t\\n\\t\\t// if list2 happen to be NULL\\n\\t\\t// we will simply return list1.\\n\\t\\tif(l2 == NULL)\\n        {\\n\\t\\t\\treturn l1;\\n\\t\\t} \\n\\t\\t\\n\\t\\t// if value pointend by l1 pointer is less than equal to value pointed by l2 pointer\\n\\t\\t// we wall call recursively l1 -> next and whole l2 list.\\n\\t\\tif(l1 -> val <= l2 -> val)\\n        {\\n\\t\\t\\tl1 -> next = mergeTwoLists(l1 -> next, l2);\\n\\t\\t\\treturn l1;\\n\\t\\t}\\n\\t\\t// we will call recursive l1 whole list and l2 -> next\\n\\t\\telse\\n        {\\n\\t\\t\\tl2 -> next = mergeTwoLists(l1, l2 -> next);\\n\\t\\t\\treturn l2;            \\n\\t\\t}\\n\\t}\\n};\\t\\n\\n```\\n**ITERATIVE APPROACH**\\n```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n       \\n\\t    // if list1 happen to be NULL\\n\\t\\t// we will simply return list2.\\n        if(list1 == NULL)\\n            return list2;\\n\\t\\t\\n\\t\\t// if list2 happen to be NULL\\n\\t\\t// we will simply return list1.\\n        if(list2 == NULL)\\n            return list1;\\n        \\n        ListNode * ptr = list1;\\n        if(list1 -> val > list2 -> val)\\n        {\\n            ptr = list2;\\n            list2 = list2 -> next;\\n        }\\n        else\\n        {\\n            list1 = list1 -> next;\\n        }\\n        ListNode *curr = ptr;\\n        \\n\\t\\t// till one of the list doesn\\'t reaches NULL\\n        while(list1 &&  list2)\\n        {\\n            if(list1 -> val < list2 -> val){\\n                curr->next = list1;\\n                list1 = list1 -> next;\\n            }\\n            else{\\n                curr->next = list2;\\n                list2 = list2 -> next;\\n            }\\n            curr = curr -> next;\\n                \\n        }\\n\\t\\t\\n\\t\\t// adding remaining elements of bigger list.\\n        if(!list1)\\n            curr -> next = list2;\\n        else\\n            curr -> next = list1;\\n            \\n        return ptr;\\n       \\n    }\\n};\\n```\\n* Maintain a head and a tail pointer on the merged linked list.\\n\\n* Then choose the head of the merged linked list by comparing the first node of both linked lists.\\n\\n* For all subsequent nodes in both lists, you choose the smaller current node and link it to the tail of the merged list, and moving the current pointer of that list one step forward.\\n\\n* You keep doing this while there are some remaining elements in both the lists.\\n\\n* If there are still some elements in only one of the lists, you link this remaining list to the tail of the merged list.\\n\\n* Initially, the merged linked list is NULL.\\n\\n* Compare the value of the first two nodes and make the node with the smaller value the head node of the merged linked list.\\n\\n* Since it\\u2019s the first and only node in the merged list, it will also be the tail.\\n\\n* Then move head1 one step forward.\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 78MB*** (beats 100.00% / 100.00%).\\n* *** JavaScript ***\\n\\n\\n```\\n\\nvar mergeTwoLists = function(l1, l2) {\\n    var mergedHead = { val : -1, next : null },\\n        crt = mergedHead;\\n    while(l1 && l2) {\\n        if(l1.val > l2.val) {\\n            crt.next = l2;\\n            l2 = l2.next;\\n        } else {\\n            crt.next = l1;\\n            l1 = l1.next;\\n        }\\n        crt = crt.next;\\n    }\\n    crt.next = l1 || l2;\\n    \\n    return mergedHead.next;\\n};\\n\\n```\\n\\n```\\nvar mergeTwoLists = function(l1, l2) {\\n    if(!l1 || !l2) return l1 || l2\\n    if(l1.val < l2.val){\\n        l1.next = mergeTwoLists(l1.next, l2)\\n        return l1\\n    }\\n    l2.next = mergeTwoLists(l1, l2.next)\\n    return l2\\n        \\n};\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 15.23MB*** (beats 89.94% / 90.99%).\\n* *** Python3 ***\\n\\n\\n```\\n\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        cur = dummy = ListNode()\\n        while list1 and list2:               \\n            if list1.val < list2.val:\\n                cur.next = list1\\n                list1, cur = list1.next, list1\\n            else:\\n                cur.next = list2\\n                list2, cur = list2.next, list2\\n                \\n        if list1 or list2:\\n            cur.next = list1 if list1 else list2\\n            \\n        return dummy.next\\n\\n```\\n\\nFor simplicity, we create a dummy node to which we attach nodes from lists. We iterate over lists using two-pointers and build up a resulting list so that values are monotonically increased.\\n\\nTime: **O(n)**\\nSpace: **O(1)**\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 33.33MB*** (beats 99.00% / 60.12%).\\n* *** Kotlin ***\\n\\n**RECURSIVE**\\n```\\n\\nfun mergeTwoLists(l1: ListNode?, l2: ListNode?): ListNode? {\\n        if (l1 == null && l2 == null) {\\n            return null\\n        }\\n        if (l1 == null) {\\n            return l2\\n        }\\n        if (l2 == null) {\\n            return l1\\n        }\\n        if (l1.`val` < l2.`val`) {\\n            l1.next = mergeTwoLists(l1.next, l2)\\n            return l1\\n        }\\n        l2.next = mergeTwoLists(l2.next, l1)\\n        return l2\\n    }\\n\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 13.17MB*** (beats 79.34% / 99.92%).\\n* *** Swift ***\\n\\n\\n```\\n\\nclass Solution {\\n    func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        if l1 == nil || l2 == nil { return l1 == nil ? l2 : l1 }\\n        if l1!.val <= l2!.val {\\n            l1?.next = mergeTwoLists(l1?.next, l2)\\n            return l1\\n        } else {\\n            l2?.next = mergeTwoLists(l1, l2?.next)\\n            return l2\\n        }\\n    }\\n}\\n\\n```\\n\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public var val: Int\\n *     public var next: ListNode?\\n *     public init() { self.val = 0; self.next = nil; }\\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\\n * }\\n */\\nclass Solution {\\n    func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n\\t\\tif l1 == nil { return l2 }\\n\\t\\tif l2 == nil { return l1 }\\n        \\n\\t\\tif l1!.val < l2!.val \\n\\t\\t\\t { l1!.next = mergeTwoLists(l1!.next, l2); return l1 } \\n\\t\\telse { l2!.next = mergeTwoLists(l2!.next, l1); return l2 }\\n    }\\n\\n}\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 62.07MB*** (beats 99.99% / 99.99%).\\n* *** PHP ***\\n\\n\\n```\\n\\n/**\\n * Definition for a singly-linked list.\\n * class ListNode {\\n *     public $val = 0;\\n *     public $next = null;\\n *     function __construct($val = 0, $next = null) {\\n *         $this->val = $val;\\n *         $this->next = $next;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param ListNode $list1\\n     * @param ListNode $list2\\n     * @return ListNode\\n     */\\n    function mergeTwoLists($list1, $list2) {\\n        if($list1== null) return $list2;\\n        if($list2== null) return $list1;\\n      if($list1->val < $list2->val) {\\n            $list1->next = $this->mergeTwoLists($list1->next, $list2);\\n            return $list1;\\n        } else {\\n            $list2->next = $this->mergeTwoLists($list2->next, $list1);\\n            return $list2;\\n        }\\n}}\\n\\n```\\n\\n```\\n     * @param ListNode $list1\\n     * @param ListNode $list2\\n     * @return ListNode\\n     */\\n    function mergeTwoLists($list1, $list2) {\\n        $head = $list = new ListNode();\\n        \\n        do {\\n            if (!$list1 || ($list2 && $list1->val > $list2->val)) {\\n                $list->next = new ListNode($list2->val);\\n                $list2 = $list2->next;\\n            } else {\\n                $list->next = new ListNode($list1->val);\\n                $list1 = $list1->next;\\n            }\\n            $list = $list->next;\\n        } while ($list1 || $list2);\\n        \\n        return $head->next;\\n    }\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 1.17MB*** (beats 99.64% / 99.92%).\\n* *** C ***\\n\\n\\n```\\n\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\n\\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2)\\n{\\n    struct ListNode head;\\n    struct ListNode *h = &head;\\n    \\n    if (l1 == NULL && l2 == NULL)\\n        return NULL;\\n    \\n    while (l1 && l2) {\\n        if (l1->val < l2->val) {\\n            h->next = l1;\\n            l1 = l1->next;\\n            h = h->next;\\n        } else {\\n            h->next = l2;\\n            l2 = l2->next;\\n            h = h->next;\\n        }\\n    }\\n\\n    if (l1) {\\n        h->next = l1;\\n    }\\n    if (l2) {\\n        h->next = l2;\\n    }\\n  \\n    return head.next;\\n}\\n\\n```\\n\\n```\\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\\n    if (!l1) return l2;\\n    if (!l2) return l1;\\n    struct ListNode* head = l1->val <= l2->val? l1 : l2;\\n    head->next = l1->val <= l2->val ? mergeTwoLists(l1->next, l2) : mergeTwoLists(l1, l2->next);\\n    return head;\\n}\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\n***\"Open your eyes. Expect us.\" - \\uD835\\uDCD0\\uD835\\uDCF7\\uD835\\uDCF8\\uD835\\uDCF7\\uD835\\uDD02\\uD835\\uDCF6\\uD835\\uDCF8\\uD835\\uDCFE\\uD835\\uDCFC***\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3",
                    "C",
                    "JavaScript",
                    "Swift",
                    "Kotlin",
                    "PHP"
                ],
                "code": "```\\n```\n```\\n\\npublic ListNode mergeTwoLists(ListNode l1, ListNode l2){\\n\\t\\tif(l1 == null) return l2;\\n\\t\\tif(l2 == null) return l1;\\n\\t\\tif(l1.val < l2.val){\\n\\t\\t\\tl1.next = mergeTwoLists(l1.next, l2);\\n\\t\\t\\treturn l1;\\n\\t\\t} else{\\n\\t\\t\\tl2.next = mergeTwoLists(l1, l2.next);\\n\\t\\t\\treturn l2;\\n\\t\\t}\\n}\\n\\n```\n```\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    ListNode head = new ListNode(0);\\n        \\n        if(list1 == null && list2 == null) return null;  //null checking\\n        if(list1 == null) return list2;\\n        if(list2 == null) return list1;\\n        \\n        if(list1.val > list2.val) { //comparing and merging\\n            head = list2;\\n            list2 = list2.next;\\n        }\\n        else {\\n            head = list1;\\n            list1 = list1.next;\\n        }\\n        \\n        head.next = mergeTwoLists(list1, list2);\\n        return head;\\n    }\\n}\\n```\n```\\n```\n```\\n```\n```\\n\\n# iteratively\\ndef mergeTwoLists1(self, l1, l2):\\n    dummy = cur = ListNode(0)\\n    while l1 and l2:\\n        if l1.val < l2.val:\\n            cur.next = l1\\n            l1 = l1.next\\n        else:\\n            cur.next = l2\\n            l2 = l2.next\\n        cur = cur.next\\n    cur.next = l1 or l2\\n    return dummy.next\\n    \\n# recursively    \\ndef mergeTwoLists2(self, l1, l2):\\n    if not l1 or not l2:\\n        return l1 or l2\\n    if l1.val < l2.val:\\n        l1.next = self.mergeTwoLists(l1.next, l2)\\n        return l1\\n    else:\\n        l2.next = self.mergeTwoLists(l1, l2.next)\\n        return l2\\n        \\n# in-place, iteratively        \\ndef mergeTwoLists(self, l1, l2):\\n    if None in (l1, l2):\\n        return l1 or l2\\n    dummy = cur = ListNode(0)\\n    dummy.next = l1\\n    while l1 and l2:\\n        if l1.val < l2.val:\\n            l1 = l1.next\\n        else:\\n            nxt = cur.next\\n            cur.next = l2\\n            tmp = l2.next\\n            l2.next = nxt\\n            l2 = tmp\\n        cur = cur.next\\n    cur.next = l1 or l2\\n    return dummy.next\\n\\n```\n```\\nclass Solution:\\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\\n\\n        head = sort_list = ListNode(0)\\n        \\n        while(l1 and l2):\\n            if (l1.val < l2.val):\\n                sort_list.next = l1\\n                l1 = l1.next\\n                sort_list = sort_list.next\\n                \\n            elif (l1.val >= l2.val):\\n                sort_list.next = l2\\n                l2 = l2.next\\n                sort_list = sort_list.next\\n\\n        sort_list.next = l1 or l2\\n        return head.next\\n```\n```\\n```\n```\\n```\n```\\n\\nclass Solution {\\npublic:\\n\\tListNode* mergeTwoLists(ListNode* l1, ListNode* l2) \\n  {\\n\\t\\t// if list1 happen to be NULL\\n\\t\\t// we will simply return list2.\\n\\t\\tif(l1 == NULL)\\n        {\\n\\t\\t\\treturn l2;\\n\\t\\t}\\n\\t\\t\\n\\t\\t// if list2 happen to be NULL\\n\\t\\t// we will simply return list1.\\n\\t\\tif(l2 == NULL)\\n        {\\n\\t\\t\\treturn l1;\\n\\t\\t} \\n\\t\\t\\n\\t\\t// if value pointend by l1 pointer is less than equal to value pointed by l2 pointer\\n\\t\\t// we wall call recursively l1 -> next and whole l2 list.\\n\\t\\tif(l1 -> val <= l2 -> val)\\n        {\\n\\t\\t\\tl1 -> next = mergeTwoLists(l1 -> next, l2);\\n\\t\\t\\treturn l1;\\n\\t\\t}\\n\\t\\t// we will call recursive l1 whole list and l2 -> next\\n\\t\\telse\\n        {\\n\\t\\t\\tl2 -> next = mergeTwoLists(l1, l2 -> next);\\n\\t\\t\\treturn l2;            \\n\\t\\t}\\n\\t}\\n};\\t\\n\\n```\n```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n       \\n\\t    // if list1 happen to be NULL\\n\\t\\t// we will simply return list2.\\n        if(list1 == NULL)\\n            return list2;\\n\\t\\t\\n\\t\\t// if list2 happen to be NULL\\n\\t\\t// we will simply return list1.\\n        if(list2 == NULL)\\n            return list1;\\n        \\n        ListNode * ptr = list1;\\n        if(list1 -> val > list2 -> val)\\n        {\\n            ptr = list2;\\n            list2 = list2 -> next;\\n        }\\n        else\\n        {\\n            list1 = list1 -> next;\\n        }\\n        ListNode *curr = ptr;\\n        \\n\\t\\t// till one of the list doesn\\'t reaches NULL\\n        while(list1 &&  list2)\\n        {\\n            if(list1 -> val < list2 -> val){\\n                curr->next = list1;\\n                list1 = list1 -> next;\\n            }\\n            else{\\n                curr->next = list2;\\n                list2 = list2 -> next;\\n            }\\n            curr = curr -> next;\\n                \\n        }\\n\\t\\t\\n\\t\\t// adding remaining elements of bigger list.\\n        if(!list1)\\n            curr -> next = list2;\\n        else\\n            curr -> next = list1;\\n            \\n        return ptr;\\n       \\n    }\\n};\\n```\n```\\n```\n```\\n```\n```\\n\\nvar mergeTwoLists = function(l1, l2) {\\n    var mergedHead = { val : -1, next : null },\\n        crt = mergedHead;\\n    while(l1 && l2) {\\n        if(l1.val > l2.val) {\\n            crt.next = l2;\\n            l2 = l2.next;\\n        } else {\\n            crt.next = l1;\\n            l1 = l1.next;\\n        }\\n        crt = crt.next;\\n    }\\n    crt.next = l1 || l2;\\n    \\n    return mergedHead.next;\\n};\\n\\n```\n```\\nvar mergeTwoLists = function(l1, l2) {\\n    if(!l1 || !l2) return l1 || l2\\n    if(l1.val < l2.val){\\n        l1.next = mergeTwoLists(l1.next, l2)\\n        return l1\\n    }\\n    l2.next = mergeTwoLists(l1, l2.next)\\n    return l2\\n        \\n};\\n```\n```\\n```\n```\\n```\n```\\n\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        cur = dummy = ListNode()\\n        while list1 and list2:               \\n            if list1.val < list2.val:\\n                cur.next = list1\\n                list1, cur = list1.next, list1\\n            else:\\n                cur.next = list2\\n                list2, cur = list2.next, list2\\n                \\n        if list1 or list2:\\n            cur.next = list1 if list1 else list2\\n            \\n        return dummy.next\\n\\n```\n```\\n```\n```\\n```\n```\\n\\nfun mergeTwoLists(l1: ListNode?, l2: ListNode?): ListNode? {\\n        if (l1 == null && l2 == null) {\\n            return null\\n        }\\n        if (l1 == null) {\\n            return l2\\n        }\\n        if (l2 == null) {\\n            return l1\\n        }\\n        if (l1.`val` < l2.`val`) {\\n            l1.next = mergeTwoLists(l1.next, l2)\\n            return l1\\n        }\\n        l2.next = mergeTwoLists(l2.next, l1)\\n        return l2\\n    }\\n\\n```\n```\\n```\n```\\n```\n```\\n\\nclass Solution {\\n    func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        if l1 == nil || l2 == nil { return l1 == nil ? l2 : l1 }\\n        if l1!.val <= l2!.val {\\n            l1?.next = mergeTwoLists(l1?.next, l2)\\n            return l1\\n        } else {\\n            l2?.next = mergeTwoLists(l1, l2?.next)\\n            return l2\\n        }\\n    }\\n}\\n\\n```\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public var val: Int\\n *     public var next: ListNode?\\n *     public init() { self.val = 0; self.next = nil; }\\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\\n * }\\n */\\nclass Solution {\\n    func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n\\t\\tif l1 == nil { return l2 }\\n\\t\\tif l2 == nil { return l1 }\\n        \\n\\t\\tif l1!.val < l2!.val \\n\\t\\t\\t { l1!.next = mergeTwoLists(l1!.next, l2); return l1 } \\n\\t\\telse { l2!.next = mergeTwoLists(l2!.next, l1); return l2 }\\n    }\\n\\n}\\n```\n```\\n```\n```\\n```\n```\\n\\n/**\\n * Definition for a singly-linked list.\\n * class ListNode {\\n *     public $val = 0;\\n *     public $next = null;\\n *     function __construct($val = 0, $next = null) {\\n *         $this->val = $val;\\n *         $this->next = $next;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param ListNode $list1\\n     * @param ListNode $list2\\n     * @return ListNode\\n     */\\n    function mergeTwoLists($list1, $list2) {\\n        if($list1== null) return $list2;\\n        if($list2== null) return $list1;\\n      if($list1->val < $list2->val) {\\n            $list1->next = $this->mergeTwoLists($list1->next, $list2);\\n            return $list1;\\n        } else {\\n            $list2->next = $this->mergeTwoLists($list2->next, $list1);\\n            return $list2;\\n        }\\n}}\\n\\n```\n```\\n     * @param ListNode $list1\\n     * @param ListNode $list2\\n     * @return ListNode\\n     */\\n    function mergeTwoLists($list1, $list2) {\\n        $head = $list = new ListNode();\\n        \\n        do {\\n            if (!$list1 || ($list2 && $list1->val > $list2->val)) {\\n                $list->next = new ListNode($list2->val);\\n                $list2 = $list2->next;\\n            } else {\\n                $list->next = new ListNode($list1->val);\\n                $list1 = $list1->next;\\n            }\\n            $list = $list->next;\\n        } while ($list1 || $list2);\\n        \\n        return $head->next;\\n    }\\n```\n```\\n```\n```\\n```\n```\\n\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\n\\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2)\\n{\\n    struct ListNode head;\\n    struct ListNode *h = &head;\\n    \\n    if (l1 == NULL && l2 == NULL)\\n        return NULL;\\n    \\n    while (l1 && l2) {\\n        if (l1->val < l2->val) {\\n            h->next = l1;\\n            l1 = l1->next;\\n            h = h->next;\\n        } else {\\n            h->next = l2;\\n            l2 = l2->next;\\n            h = h->next;\\n        }\\n    }\\n\\n    if (l1) {\\n        h->next = l1;\\n    }\\n    if (l2) {\\n        h->next = l2;\\n    }\\n  \\n    return head.next;\\n}\\n\\n```\n```\\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\\n    if (!l1) return l2;\\n    if (!l2) return l1;\\n    struct ListNode* head = l1->val <= l2->val? l1 : l2;\\n    head->next = l1->val <= l2->val ? mergeTwoLists(l1->next, l2) : mergeTwoLists(l1, l2->next);\\n    return head;\\n}\\n```\n```\\n```\n```\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1890572,
                "title": "100-fastest-typescript-solution",
                "content": "```\\n/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction mergeTwoLists(l1: ListNode | null, l2: ListNode | null): ListNode | null {\\n  if (l1 === null) { return l2 }\\n  if (l2 === null) { return l1 }\\n\\n  if (l1.val < l2.val) \\n       { l1.next = mergeTwoLists(l1.next, l2); return l1 } \\n  else { l2.next = mergeTwoLists(l1, l2.next); return l2 }\\n}\\n```\\n\\nLet me know in comments if you have any doubts. I will be happy to answer.\\n\\nPlease upvote if you found the solution useful.",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction mergeTwoLists(l1: ListNode | null, l2: ListNode | null): ListNode | null {\\n  if (l1 === null) { return l2 }\\n  if (l2 === null) { return l1 }\\n\\n  if (l1.val < l2.val) \\n       { l1.next = mergeTwoLists(l1.next, l2); return l1 } \\n  else { l2.next = mergeTwoLists(l1, l2.next); return l2 }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 930625,
                "title": "rust-recursive-solution",
                "content": "Runtime: 0 ms, faster than 100.00% of Rust online submissions for Merge Two Sorted Lists.\\nMemory Usage: 2.2 MB, less than 100.00% of Rust online submissions for Merge Two Sorted Lists.\\n```\\n// Definition for singly-linked list.\\n// #[derive(PartialEq, Eq, Clone, Debug)]\\n// pub struct ListNode {\\n//   pub val: i32,\\n//   pub next: Option<Box<ListNode>>\\n// }\\n// \\n// impl ListNode {\\n//   #[inline]\\n//   fn new(val: i32) -> Self {\\n//     ListNode {\\n//       next: None,\\n//       val\\n//     }\\n//   }\\n// }\\nimpl Solution {\\n    pub fn merge_two_lists(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        match (l1, l2) {\\n            (None, None) => None,\\n            (Some(n), None) | (None, Some(n)) => Some(n),\\n            (Some(l1), Some(l2)) => {\\n                if l1.val >= l2.val {\\n                    Some(Box::new(ListNode {\\n                        val: l2.val,\\n                        next: Solution::merge_two_lists(Some(l1), l2.next)\\n                    }))\\n                } else {\\n                    Some(Box::new(ListNode {\\n                        val: l1.val,\\n                        next: Solution::merge_two_lists(l1.next, Some(l2))\\n                    }))\\n                }\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\n// Definition for singly-linked list.\\n// #[derive(PartialEq, Eq, Clone, Debug)]\\n// pub struct ListNode {\\n//   pub val: i32,\\n//   pub next: Option<Box<ListNode>>\\n// }\\n// \\n// impl ListNode {\\n//   #[inline]\\n//   fn new(val: i32) -> Self {\\n//     ListNode {\\n//       next: None,\\n//       val\\n//     }\\n//   }\\n// }\\nimpl Solution {\\n    pub fn merge_two_lists(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        match (l1, l2) {\\n            (None, None) => None,\\n            (Some(n), None) | (None, Some(n)) => Some(n),\\n            (Some(l1), Some(l2)) => {\\n                if l1.val >= l2.val {\\n                    Some(Box::new(ListNode {\\n                        val: l2.val,\\n                        next: Solution::merge_two_lists(Some(l1), l2.next)\\n                    }))\\n                } else {\\n                    Some(Box::new(ListNode {\\n                        val: l1.val,\\n                        next: Solution::merge_two_lists(l1.next, Some(l2))\\n                    }))\\n                }\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 9754,
                "title": "my-easy-python-solution",
                "content": "```\\nclass Solution(object):\\n    def mergeTwoLists(self, l1, l2):\\n        dummy = ListNode(0)  \\n        cur = dummy  \\n        while l1 and l2:  \\n            if l1.val <= l2.val:  \\n                cur.next = l1  \\n                l1 = l1.next  \\n            else:  \\n                cur.next = l2  \\n                l2 = l2.next  \\n            cur = cur.next  \\n        cur.next = l1 or l2  \\n  \\n        return dummy.next  \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def mergeTwoLists(self, l1, l2):\\n        dummy = ListNode(0)  \\n        cur = dummy  \\n        while l1 and l2:  \\n            if l1.val <= l2.val:  \\n                cur.next = l1  \\n                l1 = l1.next  \\n            else:  \\n                cur.next = l2  \\n                l2 = l2.next  \\n            cur = cur.next  \\n        cur.next = l1 or l2  \\n  \\n        return dummy.next  \\n```",
                "codeTag": "Java"
            },
            {
                "id": 9942,
                "title": "simple-recursive-java-solution",
                "content": "    public class Solution {\\n    \\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        if(l1 == null) return l2;\\n        if(l2 == null) return l1;\\n        \\n        if(l1.val < l2.val){\\n            l1.next = mergeTwoLists(l1.next, l2);\\n            return l1;\\n        }else{\\n            l2.next = mergeTwoLists(l1, l2.next);\\n            return l2;\\n        }\\n        \\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    \\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        if(l1 == null) return l2;\\n        if(l2 == null) return l1;\\n        \\n        if(l1.val < l2.val){\\n            l1.next = mergeTwoLists(l1.next, l2);\\n            return l1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1146380,
                "title": "simple-c-solution-using-recursion",
                "content": "In order to use recursion we will need \\n1.  A base case\\n2.  A subproblem\\n\\n* If l1 is NULL return l2 and vice-versa. This will become the base case.\\n* Then in recursive case we will compare the value of the nodes at l1 and l2. Res pointer will point to the node smaller in value. We will use recursion for repeating the same steps till any one of the list becomes NULL.\\n\\n**My Implementation :**\\n\\n```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        \\n        //base case\\n        if(l1 == NULL)\\n            return l2;\\n        if(l2 == NULL)\\n            return l1;\\n        \\n        //recursive case\\n        ListNode* res;\\n        if(l1 -> val <= l2 -> val){\\n            res = l1;\\n            res -> next = mergeTwoLists(l1->next,l2);\\n        }\\n        else{\\n            res = l2;\\n            res -> next = mergeTwoLists(l1,l2->next);\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Linked List",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        \\n        //base case\\n        if(l1 == NULL)\\n            return l2;\\n        if(l2 == NULL)\\n            return l1;\\n        \\n        //recursive case\\n        ListNode* res;\\n        if(l1 -> val <= l2 -> val){\\n            res = l1;\\n            res -> next = mergeTwoLists(l1->next,l2);\\n        }\\n        else{\\n            res = l2;\\n            res -> next = mergeTwoLists(l1,l2->next);\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1101331,
                "title": "python-recursion",
                "content": "Python Recursion\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        if not l1: return l2\\n        if not l2: return l1\\n        if l1.val < l2.val:\\n            l1.next = self.mergeTwoLists(l1.next, l2)\\n            return l1\\n        else:\\n            l2.next = self.mergeTwoLists(l1, l2.next)\\n            return l2\\n```",
                "solutionTags": [],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        if not l1: return l2\\n        if not l2: return l1\\n        if l1.val < l2.val:\\n            l1.next = self.mergeTwoLists(l1.next, l2)\\n            return l1\\n        else:\\n            l2.next = self.mergeTwoLists(l1, l2.next)\\n            return l2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 9973,
                "title": "my-ac-java-solution",
                "content": "     public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n            ListNode returnNode = new ListNode(-1);\\n            ListNode headNode = returnNode;\\n            while (l1 != null && l2 != null) {\\n                if (l1.val <= l2.val) {\\n                    returnNode.next = l1;\\n                    l1 = l1.next;\\n                } else {\\n                    returnNode.next = l2;\\n                    l2 = l2.next;\\n                }\\n                returnNode = returnNode.next;\\n            }\\n            if (l1 == null) {\\n                returnNode.next = l2;\\n            } else if (l2 == null) {\\n                returnNode.next = l1;\\n            }\\n            return headNode.next;\\n        }",
                "solutionTags": [],
                "code": "     public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n            ListNode returnNode = new ListNode(-1);\\n            ListNode headNode = returnNode;\\n            while (l1 != null && l2 != null) {\\n                if (l1.val <= l2.val) {\\n                    returnNode.next = l1;\\n                    l1 = l1.next;\\n                } else {\\n                    returnNode.next = l2;\\n                    l2 = l2.next;\\n                }\\n                returnNode = returnNode.next;\\n            }\\n            if (l1 == null) {\\n                returnNode.next = l2;\\n            } else if (l2 == null) {\\n                returnNode.next = l1;\\n            }\\n            return headNode.next;\\n        }",
                "codeTag": "Unknown"
            },
            {
                "id": 2947855,
                "title": "simple-and-efficient-rust-8-liner",
                "content": "# Summary\\n\\n* No recursion and therefore O(1) space complexity. \\n* No memory allocations --> Splicing as required by problem description\\n* Optimal run-time complexity O(n). \\n\\nThe code speaks for itself. \\n\\n# Code\\n```\\nimpl Solution {\\n    pub fn merge_two_lists(\\n        mut l1: Option<Box<ListNode>>,\\n        mut l2: Option<Box<ListNode>>,\\n    ) -> Option<Box<ListNode>> {\\n        let mut r = &mut l1;\\n        while l2.is_some() {\\n            if r.is_none() || l2.as_ref()?.val < r.as_ref()?.val {\\n                std::mem::swap(r, &mut l2);\\n            }\\n            r = &mut r.as_mut()?.next;\\n        }\\n        l1\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn merge_two_lists(\\n        mut l1: Option<Box<ListNode>>,\\n        mut l2: Option<Box<ListNode>>,\\n    ) -> Option<Box<ListNode>> {\\n        let mut r = &mut l1;\\n        while l2.is_some() {\\n            if r.is_none() || l2.as_ref()?.val < r.as_ref()?.val {\\n                std::mem::swap(r, &mut l2);\\n            }\\n            r = &mut r.as_mut()?.next;\\n        }\\n        l1\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1826705,
                "title": "python-without-recursion-or-dummy",
                "content": "**Solution:** Iterative (non-recursive) Python solution with O(n) time complexity and O(1) space complexity. Note that this solution does not rely on a dummy node.\\n\\n**Explanation:**\\nHandle empty list cases first.\\nSet `seek` and `head` to the head of the list with smaller `val` attribute and set `target` to the head of the other list.\\nWhile `seek` and `target` are both not `None`:\\n* Advance `seek` via its `next` attribute until `seek.next` overtakes `target.val` or reaches the end of the list.\\n* Change the `next` attribute of `seek` to equal `target`, to stitch them together in sorted order.\\n* Set `seek` to the previous value of `target` and set `target` to the previous value of `seek.next`.\\n\\nReturn `head`.\\n```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        if not list1 and not list2:\\n            return list1\\n        if not list1 or not list2:\\n            return list1 if not list2 else list2\\n        seek, target = (list1, list2) if list1.val < list2.val else (list2, list1)\\n        head = seek\\n        while seek and target:\\n            while seek.next and seek.next.val < target.val:\\n                seek = seek.next\\n            seek.next, target = target, seek.next\\n            seek = seek.next\\n        return head\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        if not list1 and not list2:\\n            return list1\\n        if not list1 or not list2:\\n            return list1 if not list2 else list2\\n        seek, target = (list1, list2) if list1.val < list2.val else (list2, list1)\\n        head = seek\\n        while seek and target:\\n            while seek.next and seek.next.val < target.val:\\n                seek = seek.next\\n            seek.next, target = target, seek.next\\n            seek = seek.next\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1767277,
                "title": "python-simple-python-solution-with-two-approach",
                "content": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 79 ms, faster than 22.13% of Python3 online submissions for Merge Two Sorted Lists.\\n# Memory Usage: 14 MB, less than 31.62% of Python3 online submissions for Merge Two Sorted Lists.\\n\\n# Approach 1 with Iteration : -\\n\\n\\tclass Solution:\\n\\t\\tdef mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\\n\\n\\t\\t\\tnewlist = ListNode(0)\\n\\t\\t\\tnewlistptr = newlist\\n\\n\\t\\t\\twhile l1 != None and l2 != None:\\n\\n\\t\\t\\t\\tif l1.val <= l2.val:\\n\\t\\t\\t\\t\\tnewlistptr.next = l1\\n\\t\\t\\t\\t\\tl1 = l1.next\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tnewlistptr.next = l2\\n\\t\\t\\t\\t\\tl2 = l2.next\\n\\n\\t\\t\\t\\tnewlistptr = newlistptr.next\\n\\n\\t\\t\\tif l1 != None:\\n\\t\\t\\t\\tnewlistptr.next = l1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tnewlistptr.next = l2\\n\\n\\t\\t\\treturn newlist.next\\n\\n# Approach 2 with Recursion : -\\n\\tclass Solution:\\n\\t\\tdef mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n\\n\\t\\t\\tNewList = ListNode()\\n\\n\\t\\t\\tdef Merge(NewList,node1,node2):\\n\\n\\t\\t\\t\\tif node1 == None and node2 == None:\\n\\t\\t\\t\\t\\treturn\\n\\n\\t\\t\\t\\tif node1 == None and node2 != None:\\n\\t\\t\\t\\t\\treturn node2\\n\\n\\t\\t\\t\\tif node2 == None and node1 != None:\\n\\t\\t\\t\\t\\treturn node1\\n\\n\\t\\t\\t\\tif node1.val <= node2.val:\\n\\t\\t\\t\\t\\tNewList = node1\\n\\t\\t\\t\\t\\tNewList.next = Merge(NewList, node1.next,node2)\\n\\n\\t\\t\\t\\tif node1.val > node2.val:\\n\\t\\t\\t\\t\\tNewList = node2\\n\\t\\t\\t\\t\\tNewList.next = Merge(NewList, node1,node2.next)\\n\\n\\t\\t\\t\\treturn NewList\\n\\n\\t\\t\\treturn Merge(NewList,list1,list2)\\n\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Recursion",
                    "Iterator"
                ],
                "code": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 79 ms, faster than 22.13% of Python3 online submissions for Merge Two Sorted Lists.\\n# Memory Usage: 14 MB, less than 31.62% of Python3 online submissions for Merge Two Sorted Lists.\\n\\n# Approach 1 with Iteration : -\\n\\n\\tclass Solution:\\n\\t\\tdef mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\\n\\n\\t\\t\\tnewlist = ListNode(0)\\n\\t\\t\\tnewlistptr = newlist\\n\\n\\t\\t\\twhile l1 != None and l2 != None:\\n\\n\\t\\t\\t\\tif l1.val <= l2.val:\\n\\t\\t\\t\\t\\tnewlistptr.next = l1\\n\\t\\t\\t\\t\\tl1 = l1.next\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tnewlistptr.next = l2\\n\\t\\t\\t\\t\\tl2 = l2.next\\n\\n\\t\\t\\t\\tnewlistptr = newlistptr.next\\n\\n\\t\\t\\tif l1 != None:\\n\\t\\t\\t\\tnewlistptr.next = l1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tnewlistptr.next = l2\\n\\n\\t\\t\\treturn newlist.next\\n\\n# Approach 2 with Recursion : -\\n\\tclass Solution:\\n\\t\\tdef mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n\\n\\t\\t\\tNewList = ListNode()\\n\\n\\t\\t\\tdef Merge(NewList,node1,node2):\\n\\n\\t\\t\\t\\tif node1 == None and node2 == None:\\n\\t\\t\\t\\t\\treturn\\n\\n\\t\\t\\t\\tif node1 == None and node2 != None:\\n\\t\\t\\t\\t\\treturn node2\\n\\n\\t\\t\\t\\tif node2 == None and node1 != None:\\n\\t\\t\\t\\t\\treturn node1\\n\\n\\t\\t\\t\\tif node1.val <= node2.val:\\n\\t\\t\\t\\t\\tNewList = node1\\n\\t\\t\\t\\t\\tNewList.next = Merge(NewList, node1.next,node2)\\n\\n\\t\\t\\t\\tif node1.val > node2.val:\\n\\t\\t\\t\\t\\tNewList = node2\\n\\t\\t\\t\\t\\tNewList.next = Merge(NewList, node1,node2.next)\\n\\n\\t\\t\\t\\treturn NewList\\n\\n\\t\\t\\treturn Merge(NewList,list1,list2)\\n\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "codeTag": "Java"
            },
            {
                "id": 1001311,
                "title": "python-simple-iterative-solution-explained",
                "content": "What we need to do in this problem is implement merge of two sorted list, such that final list is also sorted: this is classical step for example for well-known **merge sort**. To make our code more clean, we use dummy variable. Then we have main steps in our algorithm:\\n1. Compare values in `l1` and `l2` nodes of our lists: if first one is smaller, attach it to the end of new list and move it, if second one is smaller, do the same with it.\\n2. We use condition `while l1 and l2`, that is if one of the lists finished, we still have some ending of another list, which we need to attach to the end.\\n3. Finally, just return node next to dummy variable in our list.\\n\\n**Complexity**: time complexity is `O(n+m)`, where `n` and `m` are lengths of our lists: we traverse them only once. Space complexity is `O(1)`, because we do not create new objects and just reconnect already existing ones.\\n\\n```\\nclass Solution:\\n    def mergeTwoLists(self, l1, l2):\\n        head = tail = ListNode(-1)\\n        while l1 and l2:\\n            if l1.val > l2.val:\\n                tail.next = l2\\n                l2 = l2.next\\n            else:\\n                tail.next = l1\\n                l1 = l1.next\\n            tail = tail.next\\n        \\n        if l1: tail.next = l1\\n        if l2: tail.next = l2\\n        \\n        return head.next\\n```",
                "solutionTags": [
                    "Linked List"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTwoLists(self, l1, l2):\\n        head = tail = ListNode(-1)\\n        while l1 and l2:\\n            if l1.val > l2.val:\\n                tail.next = l2\\n                l2 = l2.next\\n            else:\\n                tail.next = l1\\n                l1 = l1.next\\n            tail = tail.next\\n        \\n        if l1: tail.next = l1\\n        if l2: tail.next = l2\\n        \\n        return head.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 608820,
                "title": "in-c",
                "content": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\n\\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2)\\n{\\n    struct ListNode head;\\n    struct ListNode *h = &head;\\n    \\n    if (l1 == NULL && l2 == NULL)\\n        return NULL;\\n    \\n    while (l1 && l2) {\\n        if (l1->val < l2->val) {\\n            h->next = l1;\\n            l1 = l1->next;\\n            h = h->next;\\n        } else {\\n            h->next = l2;\\n            l2 = l2->next;\\n            h = h->next;\\n        }\\n    }\\n\\n    if (l1) {\\n        h->next = l1;\\n    }\\n    if (l2) {\\n        h->next = l2;\\n    }\\n  \\n    return head.next;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\n\\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2)\\n{\\n    struct ListNode head;\\n    struct ListNode *h = &head;\\n    \\n    if (l1 == NULL && l2 == NULL)\\n        return NULL;\\n    \\n    while (l1 && l2) {\\n        if (l1->val < l2->val) {\\n            h->next = l1;\\n            l1 = l1->next;\\n            h = h->next;\\n        } else {\\n            h->next = l2;\\n            l2 = l2->next;\\n            h = h->next;\\n        }\\n    }\\n\\n    if (l1) {\\n        h->next = l1;\\n    }\\n    if (l2) {\\n        h->next = l2;\\n    }\\n  \\n    return head.next;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 275807,
                "title": "clean-and-fast-javascript",
                "content": "```\\nvar mergeTwoLists = function(l1, l2) {\\n    if(!l1 || !l2) return l1 || l2\\n    if(l1.val < l2.val){\\n        l1.next = mergeTwoLists(l1.next, l2)\\n        return l1\\n    }\\n    l2.next = mergeTwoLists(l1, l2.next)\\n    return l2\\n        \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar mergeTwoLists = function(l1, l2) {\\n    if(!l1 || !l2) return l1 || l2\\n    if(l1.val < l2.val){\\n        l1.next = mergeTwoLists(l1.next, l2)\\n        return l1\\n    }\\n    l2.next = mergeTwoLists(l1, l2.next)\\n    return l2\\n        \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1447438,
                "title": "python-merge-2-sorted-lists-clean-concise",
                "content": "```python\\nclass Solution:\\n    def mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        dummyHead = curHead = ListNode(0)\\n        while l1 != None and l2 != None:\\n            if l1.val <= l2.val:\\n                curHead.next = l1\\n                curHead = curHead.next\\n                l1 = l1.next\\n            else:\\n                curHead.next = l2\\n                curHead = curHead.next\\n                l2 = l2.next\\n                \\n        curHead.next = l1 or l2\\n        return dummyHead.next\\n```\\n**Complexity**\\n- Time: `O(M + N)`, where `M <= 50` is length of list1, `N <= 50` is length of list2.\\n- Space: `O(1)`",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```python\\nclass Solution:\\n    def mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        dummyHead = curHead = ListNode(0)\\n        while l1 != None and l2 != None:\\n            if l1.val <= l2.val:\\n                curHead.next = l1\\n                curHead = curHead.next\\n                l1 = l1.next\\n            else:\\n                curHead.next = l2\\n                curHead = curHead.next\\n                l2 = l2.next\\n                \\n        curHead.next = l1 or l2\\n        return dummyHead.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 9955,
                "title": "my-10-line-clean-c-code",
                "content": "The basic idea is to use a dummy node to track the new header and move the cur pointer forward along the list with a smaller node value; and switch two lists when the current list has a larger value than the other one \\n\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        ListNode dummy(0);\\n        dummy.next = l1;\\n        ListNode *cur = &dummy;\\n        \\n        while(l2)\\n        {\\n            while(cur->next && cur->next->val<=l2->val) cur = cur->next; // if the current list, l1, has a smaller value, then move cur forward\\n            l1 = cur->next; // otherwise, switch l1 and l2\\n            cur->next = l2;\\n            l2 = l1;\\n        }\\n        return dummy.next;\\n    }",
                "solutionTags": [],
                "code": "The basic idea is to use a dummy node to track the new header and move the cur pointer forward along the list with a smaller node value; and switch two lists when the current list has a larger value than the other one \\n\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        ListNode dummy(0);\\n        dummy.next = l1;\\n        ListNode *cur = &dummy;\\n        \\n        while(l2)\\n        {\\n            while(cur->next && cur->next->val<=l2->val) cur = cur->next; // if the current list, l1, has a smaller value, then move cur forward\\n            l1 = cur->next; // otherwise, switch l1 and l2\\n            cur->next = l2;\\n            l2 = l1;\\n        }\\n        return dummy.next;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 839266,
                "title": "c-solution-iterative-and-recursion",
                "content": "**Iteratively in-place substitution**\\n```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        ListNode dummy = ListNode(0);\\n        ListNode* ans = &dummy;\\n        \\n        while(l1 && l2){\\n            if(l1 -> val < l2 -> val){\\n                ans -> next = l1;\\n                l1 = l1 -> next;\\n            }\\n            else{\\n                ans -> next = l2;\\n                l2 = l2 -> next;\\n            }\\n            ans = ans -> next;\\n        }\\n        \\n        ans -> next = l1 ? l1 : l2;\\n        \\n        return dummy.next;\\n    }\\n};\\n```\\n\\n**Recursively**\\n```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if(l1 == NULL)\\n            return l2;\\n        if(l2 == NULL)\\n            return l1;\\n        \\n        if(l1->val < l2->val){\\n            l1->next = mergeTwoLists(l1->next, l2);\\n            return l1;\\n        }\\n        else{\\n            l2->next = mergeTwoLists(l1, l2->next);\\n            return l2;\\n        }\\n    }\\n};\\n```\\n\\n**Without recursion but same as above (Iterative)**\\n```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        ListNode* ans = new ListNode();\\n        ListNode* dummy = ans;\\n\\n        while(l1 && l2){\\n            if(l1->val <= l2->val){\\n                ans->next = new ListNode(l1->val);\\n                l1 = l1->next;\\n            }\\n            else{\\n                ans->next = new ListNode(l2->val);\\n                l2 = l2->next;\\n            }\\n            ans = ans->next;\\n        }\\n        \\n        while(l1){\\n            ans->next = new ListNode(l1->val);\\n            l1 = l1->next;\\n            ans = ans->next;\\n        }\\n        \\n        while(l2){\\n            ans->next = new ListNode(l2->val);\\n            l2 = l2->next;\\n            ans = ans->next;\\n        }\\n        return dummy->next;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        ListNode dummy = ListNode(0);\\n        ListNode* ans = &dummy;\\n        \\n        while(l1 && l2){\\n            if(l1 -> val < l2 -> val){\\n                ans -> next = l1;\\n                l1 = l1 -> next;\\n            }\\n            else{\\n                ans -> next = l2;\\n                l2 = l2 -> next;\\n            }\\n            ans = ans -> next;\\n        }\\n        \\n        ans -> next = l1 ? l1 : l2;\\n        \\n        return dummy.next;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if(l1 == NULL)\\n            return l2;\\n        if(l2 == NULL)\\n            return l1;\\n        \\n        if(l1->val < l2->val){\\n            l1->next = mergeTwoLists(l1->next, l2);\\n            return l1;\\n        }\\n        else{\\n            l2->next = mergeTwoLists(l1, l2->next);\\n            return l2;\\n        }\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        ListNode* ans = new ListNode();\\n        ListNode* dummy = ans;\\n\\n        while(l1 && l2){\\n            if(l1->val <= l2->val){\\n                ans->next = new ListNode(l1->val);\\n                l1 = l1->next;\\n            }\\n            else{\\n                ans->next = new ListNode(l2->val);\\n                l2 = l2->next;\\n            }\\n            ans = ans->next;\\n        }\\n        \\n        while(l1){\\n            ans->next = new ListNode(l1->val);\\n            l1 = l1->next;\\n            ans = ans->next;\\n        }\\n        \\n        while(l2){\\n            ans->next = new ListNode(l2->val);\\n            l2 = l2->next;\\n            ans = ans->next;\\n        }\\n        return dummy->next;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 9916,
                "title": "clean-recursive-python-solution",
                "content": "    def mergeTwoLists(self, l1, l2):\\n            \"\"\"\\n            :type l1: ListNode\\n            :type l2: ListNode\\n            :rtype: ListNode\\n            \"\"\"\\n            if not l1:\\n                return l2\\n            if not l2:\\n                return l1\\n            \\n            start = None    \\n            if l1.val < l2.val:\\n                start = l1;\\n                start.next = self.mergeTwoLists(l1.next, l2)\\n            else:\\n                start = l2;\\n                start.next = self.mergeTwoLists(l1, l2.next)\\n            \\n            return start",
                "solutionTags": [
                    "Python",
                    "Recursion"
                ],
                "code": "    def mergeTwoLists(self, l1, l2):\\n            \"\"\"\\n            :type l1: ListNode\\n            :type l2: ListNode\\n            :rtype: ListNode\\n            \"\"\"\\n            if not l1:\\n                return l2\\n            if not l2:\\n                return l1\\n            \\n            start = None    \\n            if l1.val < l2.val:\\n                start = l1;\\n                start.next = self.mergeTwoLists(l1.next, l2)\\n            else:\\n                start = l2;\\n                start.next = self.mergeTwoLists(l1, l2.next)\\n            \\n            return start",
                "codeTag": "Python3"
            },
            {
                "id": 1644556,
                "title": "java-easy-solution-0ms-100-faster-iterative-and-recursive",
                "content": "![image](https://assets.leetcode.com/users/images/f063c52d-8118-47df-9abf-728019774f07_1640339562.0414157.png)\\n\\n\\n**Iterative approach**\\n```java\\npublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n\\tListNode l3 = null;\\n\\tListNode p1 = l1, p2 = l2, p3 = l3;\\n\\n\\twhile(p1 != null && p2 != null) {\\n\\t\\tif(p1.val <= p2.val) {\\n\\t\\t\\tListNode newNode = new ListNode(p1.val);\\n\\t\\t\\tif(l3 == null) {\\n\\t\\t\\t\\tl3 = newNode;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tp3.next = newNode;\\n\\t\\t\\t}\\n\\t\\t\\tp3 = newNode;\\n\\t\\t\\tp1 = p1.next;\\n\\t\\t} else {\\n\\t\\t\\tListNode newNode = new ListNode(p2.val);\\n\\t\\t\\tif(l3 == null) {\\n\\t\\t\\t\\tl3 = newNode;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tp3.next = newNode;\\n\\t\\t\\t}\\n\\t\\t\\tp3 = newNode;\\n\\t\\t\\tp2 = p2.next;\\n\\t\\t}\\n\\t}\\n\\n\\twhile(p1 != null) {\\n\\t\\tListNode newNode = new ListNode(p1.val);\\n\\t\\tif(l3 == null) {\\n\\t\\t\\tl3 = newNode;\\n\\t\\t} else {\\n\\t\\t\\tp3.next = newNode;\\n\\t\\t}\\n\\t\\tp3 = newNode;\\n\\t\\tp1 = p1.next;\\n\\t}\\n\\n\\twhile(p2 != null) {\\n\\t\\tListNode newNode = new ListNode(p2.val);\\n\\t\\tif(l3 == null) {\\n\\t\\t\\tl3 = newNode;\\n\\t\\t} else {\\n\\t\\t\\tp3.next = newNode;\\n\\t\\t}\\n\\t\\tp3 = newNode;\\n\\t\\tp2 = p2.next;\\n\\t}\\n\\n\\treturn l3;\\n}\\n```\\n\\nNow let\\'s try recursion first from the code above\\n**Recursive Approach 1**\\n```java\\npublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n\\tif(l1 == null) return l2;\\n\\tif(l2 == null) return l1;\\n\\n\\tListNode l3 = null, p3 = l3;\\n\\n\\tif(l1.val <= l2.val) {\\n\\t\\tListNode p1 = mergeTwoLists(l1.next, l2);\\n\\t\\tListNode newNode = new ListNode(l1.val);\\n\\t\\tif(l3 == null) {\\n\\t\\t\\tl3 = newNode;\\n\\t\\t} else {\\n\\t\\t\\tp3.next = newNode;\\n\\t\\t}\\n\\t\\tp3 = newNode;\\n\\t\\tp3.next = p1;\\n\\t} else {\\n\\t\\tListNode p2 = mergeTwoLists(l1, l2.next);\\n\\t\\tListNode newNode = new ListNode(l2.val);\\n\\t\\tif(l3 == null) {\\n\\t\\t\\tl3 = newNode;\\n\\t\\t} else {\\n\\t\\t\\tp3.next = newNode;\\n\\t\\t}\\n\\t\\tp3 = newNode;\\n\\t\\tp3.next = p2;\\n\\t}\\n\\n\\treturn l3;\\n}\\n```\\n\\n**Optimal Recursive Solution**\\n```java\\npublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n\\tif(l1 == null) return l2;\\n\\tif(l2 == null) return l1;\\n\\n\\tif(l1.val <= l2.val) {\\n\\t\\tl1.next = mergeTwoLists(l1.next, l2);\\n\\t\\treturn l1;\\n\\t}\\n\\n\\tl2.next = mergeTwoLists(l1, l2.next);\\n\\treturn l2;\\n}\\n```\\n\\nI just gave all the approaches to show how to transition from iterative solution to recursive solution.\\n\\nHope it helps\\nThanks\\nDo upvote",
                "solutionTags": [
                    "Java",
                    "Recursion",
                    "Iterator"
                ],
                "code": "```java\\npublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n\\tListNode l3 = null;\\n\\tListNode p1 = l1, p2 = l2, p3 = l3;\\n\\n\\twhile(p1 != null && p2 != null) {\\n\\t\\tif(p1.val <= p2.val) {\\n\\t\\t\\tListNode newNode = new ListNode(p1.val);\\n\\t\\t\\tif(l3 == null) {\\n\\t\\t\\t\\tl3 = newNode;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tp3.next = newNode;\\n\\t\\t\\t}\\n\\t\\t\\tp3 = newNode;\\n\\t\\t\\tp1 = p1.next;\\n\\t\\t} else {\\n\\t\\t\\tListNode newNode = new ListNode(p2.val);\\n\\t\\t\\tif(l3 == null) {\\n\\t\\t\\t\\tl3 = newNode;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tp3.next = newNode;\\n\\t\\t\\t}\\n\\t\\t\\tp3 = newNode;\\n\\t\\t\\tp2 = p2.next;\\n\\t\\t}\\n\\t}\\n\\n\\twhile(p1 != null) {\\n\\t\\tListNode newNode = new ListNode(p1.val);\\n\\t\\tif(l3 == null) {\\n\\t\\t\\tl3 = newNode;\\n\\t\\t} else {\\n\\t\\t\\tp3.next = newNode;\\n\\t\\t}\\n\\t\\tp3 = newNode;\\n\\t\\tp1 = p1.next;\\n\\t}\\n\\n\\twhile(p2 != null) {\\n\\t\\tListNode newNode = new ListNode(p2.val);\\n\\t\\tif(l3 == null) {\\n\\t\\t\\tl3 = newNode;\\n\\t\\t} else {\\n\\t\\t\\tp3.next = newNode;\\n\\t\\t}\\n\\t\\tp3 = newNode;\\n\\t\\tp2 = p2.next;\\n\\t}\\n\\n\\treturn l3;\\n}\\n```\n```java\\npublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n\\tif(l1 == null) return l2;\\n\\tif(l2 == null) return l1;\\n\\n\\tListNode l3 = null, p3 = l3;\\n\\n\\tif(l1.val <= l2.val) {\\n\\t\\tListNode p1 = mergeTwoLists(l1.next, l2);\\n\\t\\tListNode newNode = new ListNode(l1.val);\\n\\t\\tif(l3 == null) {\\n\\t\\t\\tl3 = newNode;\\n\\t\\t} else {\\n\\t\\t\\tp3.next = newNode;\\n\\t\\t}\\n\\t\\tp3 = newNode;\\n\\t\\tp3.next = p1;\\n\\t} else {\\n\\t\\tListNode p2 = mergeTwoLists(l1, l2.next);\\n\\t\\tListNode newNode = new ListNode(l2.val);\\n\\t\\tif(l3 == null) {\\n\\t\\t\\tl3 = newNode;\\n\\t\\t} else {\\n\\t\\t\\tp3.next = newNode;\\n\\t\\t}\\n\\t\\tp3 = newNode;\\n\\t\\tp3.next = p2;\\n\\t}\\n\\n\\treturn l3;\\n}\\n```\n```java\\npublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n\\tif(l1 == null) return l2;\\n\\tif(l2 == null) return l1;\\n\\n\\tif(l1.val <= l2.val) {\\n\\t\\tl1.next = mergeTwoLists(l1.next, l2);\\n\\t\\treturn l1;\\n\\t}\\n\\n\\tl2.next = mergeTwoLists(l1, l2.next);\\n\\treturn l2;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1467899,
                "title": "c-recursive-optimized-97",
                "content": "Runtime: 84 ms, faster than 97.94% of C# online submissions for Merge Two Sorted Lists.\\nMemory Usage: 26.5 MB, less than 42.75% of C# online submissions for Merge Two Sorted Lists.\\n\\n```\\npublic class Solution {\\n    public ListNode MergeTwoLists(ListNode l1, ListNode l2)\\n        {  \\n            if (l1 == null)\\n                return l2;\\n            if (l2 == null)\\n                return l1;\\n\\n\\n            if (l2.val > l1.val)\\n            {\\n                l1.next = MergeTwoLists(l1.next, l2);\\n\\n                return l1;\\n            }\\n\\n            l2.next = MergeTwoLists(l1, l2.next);\\n            return l2;\\n                             \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public ListNode MergeTwoLists(ListNode l1, ListNode l2)\\n        {  \\n            if (l1 == null)\\n                return l2;\\n            if (l2 == null)\\n                return l1;\\n\\n\\n            if (l2.val > l1.val)\\n            {\\n                l1.next = MergeTwoLists(l1.next, l2);\\n\\n                return l1;\\n            }\\n\\n            l2.next = MergeTwoLists(l1, l2.next);\\n            return l2;\\n                             \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1405588,
                "title": "100-java-clear-code-explanation",
                "content": "\\tpublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        //  Base Case\\n        if(l1 == null) return l2;\\n        if(l2 == null) return l1;\\n        \\n        ListNode res;\\n        boolean l1_is_smaller = (l1.val<l2.val);\\n        \\n        if( l1_is_smaller ){\\n            res = l1;   \\n            res.next = mergeTwoLists(l1.next,l2);\\n        }\\n        else{ \\n            res = l2;   \\n            res.next = mergeTwoLists(l1,l2.next);\\n        }   \\n        \\n        return res;\\n        \\n    }\\n    \\n    //                                  *LOGIC*                                 \\n    //  We use a recurisve approach here, it requires us to make two decisions.  \\n    \\n    //                  1.  When will we stop our recursion?\\n    //\\n    //  If l1 is null? Well we just want to return the rest of l2.\\n    //  If l2 is null? Well we just want to return the rest of l1.\\n    \\n    //                  2.  When will we call our function again?\\n    //\\n    //  Assume \\'l1\\' is smaller between \\'l1\\' and \\'l2\\'\\n    //  We want to set our \\'res\\' to \\'l1\\' and now we want to \\n    //  find which is smaller between \\'l1.next\\' and \\'l2\\'\\n    //  So we call :   \\n    //                  res = l1;\\n    //                  res.next = mergeTwoLists(l1.next,l2);\\n    //  If \\'l1\\' is smaller.\\n    \\n    //  Similarly if \\'l2\\' is smaller \\n    //  We want to call : \\n    //                  res = l2;\\n    //                  res.next = mergeTwoLists(l1,l2.next);\\n    //  If \\'l2\\' is smaller.\\n   \\n    \\n    //  Eventually, l1 or l2 will be null, our base case will be true\\n    //  we will return back out of our recursion building res in the process.",
                "solutionTags": [
                    "Java"
                ],
                "code": "\\tpublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        //  Base Case\\n        if(l1 == null) return l2;\\n        if(l2 == null) return l1;\\n        \\n        ListNode res;\\n        boolean l1_is_smaller = (l1.val<l2.val);\\n        \\n        if( l1_is_smaller ){\\n            res = l1;   \\n            res.next = mergeTwoLists(l1.next,l2);\\n        }\\n        else{ \\n            res = l2;   \\n            res.next = mergeTwoLists(l1,l2.next);\\n        }   \\n        \\n        return res;\\n        \\n    }\\n    \\n    //                                  *LOGIC*                                 \\n    //  We use a recurisve approach here, it requires us to make two decisions.  \\n    \\n    //                  1.  When will we stop our recursion?\\n    //\\n    //  If l1 is null? Well we just want to return the rest of l2.\\n    //  If l2 is null? Well we just want to return the rest of l1.\\n    \\n    //                  2.  When will we call our function again?\\n    //\\n    //  Assume \\'l1\\' is smaller between \\'l1\\' and \\'l2\\'\\n    //  We want to set our \\'res\\' to \\'l1\\' and now we want to \\n    //  find which is smaller between \\'l1.next\\' and \\'l2\\'\\n    //  So we call :   \\n    //                  res = l1;\\n    //                  res.next = mergeTwoLists(l1.next,l2);\\n    //  If \\'l1\\' is smaller.\\n    \\n    //  Similarly if \\'l2\\' is smaller \\n    //  We want to call : \\n    //                  res = l2;\\n    //                  res.next = mergeTwoLists(l1,l2.next);\\n    //  If \\'l2\\' is smaller.\\n   \\n    \\n    //  Eventually, l1 or l2 will be null, our base case will be true\\n    //  we will return back out of our recursion building res in the process.",
                "codeTag": "Unknown"
            },
            {
                "id": 1001338,
                "title": "c-4ms-98-very-easy-in-place-iteratively-with-comments",
                "content": "```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n      ListNode *start = new ListNode();               //false head\\n      ListNode *tmp = start;                          //working node \\n      \\n      while(l1 && l2){                                //if we have two lists\\n        if(l1->val < l2->val){tmp->next = l1; l1 = l1->next;}\\n        else {tmp->next = l2; l2 = l2->next;}\\n        tmp = tmp->next;\\n      }\\n      if(l1) tmp->next = l1;                          //if we have only list1 or we have remain as list1\\n      if(l2) tmp->next = l2;                          //if we have only list2 or we have remain as list2\\n      return start->next;                             //return real head\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n      ListNode *start = new ListNode();               //false head\\n      ListNode *tmp = start;                          //working node \\n      \\n      while(l1 && l2){                                //if we have two lists\\n        if(l1->val < l2->val){tmp->next = l1; l1 = l1->next;}\\n        else {tmp->next = l2; l2 = l2->next;}\\n        tmp = tmp->next;\\n      }\\n      if(l1) tmp->next = l1;                          //if we have only list1 or we have remain as list1\\n      if(l2) tmp->next = l2;                          //if we have only list2 or we have remain as list2\\n      return start->next;                             //return real head\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 9828,
                "title": "javascript-6-lines-recursive",
                "content": "```\\nvar mergeTwoLists = function(h1, h2) {\\n    if (!h1 || !h2) // return the non-empty one\\n        return h1 || h2\\n\\n    if (h1.val>h2.val) // swap to make sure h1 is always smaller than h2\\n        [h1, h2] = [h2, h1]\\n    \\n    h1.next = mergeTwoLists(h1.next, h2)\\n    \\n    return h1;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar mergeTwoLists = function(h1, h2) {\\n    if (!h1 || !h2) // return the non-empty one\\n        return h1 || h2\\n\\n    if (h1.val>h2.val) // swap to make sure h1 is always smaller than h2\\n        [h1, h2] = [h2, h1]\\n    \\n    h1.next = mergeTwoLists(h1.next, h2)\\n    \\n    return h1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 9790,
                "title": "my-python-solution-using-a-guard-node",
                "content": "    def mergeTwoLists(self, l1, l2):\\n            if not l1 and not l2:\\n                return None\\n            \\n            node = guard_node = ListNode(0)\\n            \\n            while l1 and l2:\\n                if l1.val <= l2.val:\\n                    node.next = l1\\n                    l1 = l1.next\\n                else:\\n                    node.next = l2\\n                    l2 = l2.next\\n                node = node.next\\n            \\n            if l1 or l2:\\n                node.next = l1 or l2\\n            \\n            return guard_node.next",
                "solutionTags": [],
                "code": "    def mergeTwoLists(self, l1, l2):\\n            if not l1 and not l2:\\n                return None\\n            \\n            node = guard_node = ListNode(0)\\n            \\n            while l1 and l2:\\n                if l1.val <= l2.val:\\n                    node.next = l1\\n                    l1 = l1.next\\n                else:\\n                    node.next = l2\\n                    l2 = l2.next\\n                node = node.next\\n            \\n            if l1 or l2:\\n                node.next = l1 or l2\\n            \\n            return guard_node.next",
                "codeTag": "Python3"
            },
            {
                "id": 200801,
                "title": "python3-24ms-beats-100",
                "content": "\\n        if l1 is None: return l2\\n        if l2 is None: return l1\\n        if l1 is None and l2 is None: return None \\n        \\n        head = ListNode(0)\\n        cur = head\\n            \\n        while l1 and l2:\\n            \\n            if l1.val > l2.val:\\n                cur.next = l2\\n                l2 = l2.next\\n            \\n            else:\\n                cur.next = l1\\n                l1 = l1.next\\n                \\n            cur = cur.next\\n        \\n        cur.next = l1 or l2\\n            \\n        return head.next\\n\\t\\t",
                "solutionTags": [],
                "code": "\\n        if l1 is None: return l2\\n        if l2 is None: return l1\\n        if l1 is None and l2 is None: return None \\n        \\n        head = ListNode(0)\\n        cur = head\\n            \\n        while l1 and l2:\\n            \\n            if l1.val > l2.val:\\n                cur.next = l2\\n                l2 = l2.next\\n            \\n            else:\\n                cur.next = l1\\n                l1 = l1.next\\n                \\n            cur = cur.next\\n        \\n        cur.next = l1 or l2\\n            \\n        return head.next\\n\\t\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 1001274,
                "title": "c-c-super-simple-5-line-recursive-solution",
                "content": "```\\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\\n    if (!l1) return l2;\\n    if (!l2) return l1;\\n    struct ListNode* head = l1->val <= l2->val? l1 : l2;\\n    head->next = l1->val <= l2->val ? mergeTwoLists(l1->next, l2) : mergeTwoLists(l1, l2->next);\\n    return head;\\n}\\n```\\n**Like it? please upvote...**",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\\n    if (!l1) return l2;\\n    if (!l2) return l1;\\n    struct ListNode* head = l1->val <= l2->val? l1 : l2;\\n    head->next = l1->val <= l2->val ? mergeTwoLists(l1->next, l2) : mergeTwoLists(l1, l2->next);\\n    return head;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3353373,
                "title": "javascript-easy-explanation-100-for-loop",
                "content": "\\n# Approach\\n1. Create a new node called tempNode and set its value to 0 and its next pointer to null.\\n2. Set currentNode to tempNode.\\n3. While l1 and l2 are not null, compare the values of the nodes pointed to by l1 and l2. Add the smaller value node to currentNode and move the corresponding pointer to its next node.\\n4. Set the next pointer of currentNode to the remaining nodes of l1 or l2.\\n5. Return the merged list starting from the next node of tempNode, which is tempNode.next.\\n\\n# Complexity\\n\\nThe time complexity of the iterative approach is O(m + n), where m and n are the lengths of l1 and l2, respectively. This is because we iterate over both lists once and compare each node at most once.\\n\\nThe space complexity of the iterative approach is O(1), since we only create a constant number of new nodes (tempNode and currentNode) and modify the pointers of the input lists in place. Therefore, the space required is constant and does not depend on the length of the input lists.\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\n\\nvar mergeTwoLists = function(l1, l2) {\\n    let tempNode = new ListNode(0, null);\\n    let currentNode = tempNode;\\n    \\n    while (l1 && l2) {\\n        if(l1.val < l2.val) {\\n            currentNode.next = l1;\\n            l1 = l1.next\\n        } else {\\n            currentNode.next = l2;\\n            l2 = l2.next\\n        }\\n        currentNode = currentNode.next;\\n    }\\n    currentNode.next = l1 || l2;\\n    \\n    return tempNode.next;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\n\\nvar mergeTwoLists = function(l1, l2) {\\n    let tempNode = new ListNode(0, null);\\n    let currentNode = tempNode;\\n    \\n    while (l1 && l2) {\\n        if(l1.val < l2.val) {\\n            currentNode.next = l1;\\n            l1 = l1.next\\n        } else {\\n            currentNode.next = l2;\\n            l2 = l2.next\\n        }\\n        currentNode = currentNode.next;\\n    }\\n    currentNode.next = l1 || l2;\\n    \\n    return tempNode.next;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2655305,
                "title": "java-iterative-solution",
                "content": "1. Introduce a new node called head, which will show the head of our result list.\\n2. Introduce another variable called curr that which will help us iterate over the list and by doing this we won\\'t lose the head.\\n2. Iterate over list1 and list2. \\n3. Make curr.next shows which value is smaller in list1 and list2.\\n4. Stop the iteration when list1 or list2 is null (no more element to process in them)\\n5. Add rest of the values from the not null list to our result array.\\n6. Return head.next since head is the node we generated and head.next is the start of the linked list where values from list1 and list2 begin.\\n\\n```\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if(list1 == null) {\\n            return list2;\\n        }\\n        \\n        if(list2 == null) {\\n            return list1;\\n        }\\n                \\n        //Create a new list for the result list\\n        ListNode head = new ListNode(0);\\n        //We want to return the head so we should make it stay where it is\\n        //So introduce a new variable which will show head\\n        ListNode curr = head;\\n        \\n        while(list1!= null && list2 != null) {\\n            if(list1.val < list2.val) {\\n                curr.next = list1;\\n                list1 = list1.next;\\n            }else {\\n                curr.next = list2;\\n                list2 = list2.next;\\n            }\\n            curr = curr.next;\\n        }\\n        \\n        //Which one is not null add all of its left values.\\n        if(list1 != null) {\\n            curr.next = list1;\\n        } else {\\n            curr.next = list2;\\n        }\\n        return head.next;\\n        \\n    }\\n\\n```\\n\\n**Time Complexity:** O(N+M). Where N is the size of list1 and M is the size of list2. Since we iterated over list1 and list2 one pass it is O(N+M).\\n\\n**Space Complexity:** O(1) because we only introduced two new nodes(head and curr). We used already defined nodes in list1 and list2 and just changed their next pointers.\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if(list1 == null) {\\n            return list2;\\n        }\\n        \\n        if(list2 == null) {\\n            return list1;\\n        }\\n                \\n        //Create a new list for the result list\\n        ListNode head = new ListNode(0);\\n        //We want to return the head so we should make it stay where it is\\n        //So introduce a new variable which will show head\\n        ListNode curr = head;\\n        \\n        while(list1!= null && list2 != null) {\\n            if(list1.val < list2.val) {\\n                curr.next = list1;\\n                list1 = list1.next;\\n            }else {\\n                curr.next = list2;\\n                list2 = list2.next;\\n            }\\n            curr = curr.next;\\n        }\\n        \\n        //Which one is not null add all of its left values.\\n        if(list1 != null) {\\n            curr.next = list1;\\n        } else {\\n            curr.next = list2;\\n        }\\n        return head.next;\\n        \\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1768523,
                "title": "java-merge-sort-beats-100-full-explanation",
                "content": "## **Please upvote if you find it helpful**\\n```\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        \\n        //Define a new Node\\n        ListNode answer = new ListNode();\\n        ListNode newNode = answer;\\n        \\n        //If list1 has no element then add list2 to new node\\n        if (list1 == null)\\n           return newNode.next = list2;\\n        \\n        //If list2 has no element then add list1 to new node\\n        if (list2 == null)\\n            return newNode.next = list1;\\n        \\n        \\n        //Use Merge sort logic to merge nodes value\\n        while (list1 != null && list2 != null)\\n        {\\n            if (list1.val <= list2.val)\\n            {\\n                newNode.next = list1;\\n                list1 = list1.next;\\n            }\\n            else \\n            {\\n                newNode.next = list2;\\n                list2 = list2.next;\\n            }\\n            newNode = newNode.next;\\n        }\\n    \\n        //If any node left in list1\\n        if (list1 != null)\\n            newNode.next = list1;\\n     \\n        //If any node left in list2\\n        if (list2 != null)\\n            newNode.next = list2;\\n        \\n        return answer.next;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Merge Sort"
                ],
                "code": "```\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        \\n        //Define a new Node\\n        ListNode answer = new ListNode();\\n        ListNode newNode = answer;\\n        \\n        //If list1 has no element then add list2 to new node\\n        if (list1 == null)\\n           return newNode.next = list2;\\n        \\n        //If list2 has no element then add list1 to new node\\n        if (list2 == null)\\n            return newNode.next = list1;\\n        \\n        \\n        //Use Merge sort logic to merge nodes value\\n        while (list1 != null && list2 != null)\\n        {\\n            if (list1.val <= list2.val)\\n            {\\n                newNode.next = list1;\\n                list1 = list1.next;\\n            }\\n            else \\n            {\\n                newNode.next = list2;\\n                list2 = list2.next;\\n            }\\n            newNode = newNode.next;\\n        }\\n    \\n        //If any node left in list1\\n        if (list1 != null)\\n            newNode.next = list1;\\n     \\n        //If any node left in list2\\n        if (list2 != null)\\n            newNode.next = list2;\\n        \\n        return answer.next;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 524286,
                "title": "js-iterative-recursive",
                "content": "- Time complexity: **O(min(N,M))**\\n- Space complexity: **O(1)** `Its about extra space. It use N space for result itself`\\n```JavaScript\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nconst mergeTwoLists = function(l1, l2) {\\n    const head = new ListNode(null);\\n    let curr = head;\\n    while (l1 && l2) {\\n        if (l1.val < l2.val) {\\n            curr.next = l1;\\n            l1 = l1.next;\\n        } else {\\n            curr.next = l2;\\n            l2 = l2.next;\\n        }\\n        curr = curr.next;\\n    }\\n    curr.next = l1 || l2;\\n    return head.next;\\n    \\n};\\n```\\n- Time complexity: **O(min(N,M))**\\n- Space complexity: **O(min(N,M))**\\n```JavaScript\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(l1, l2) {\\n    if (!l1 || !l2) {\\n        return l1 || l2;\\n    }\\n    let node = null;\\n    if (l1.val < l2.val) {\\n        node = l1;\\n        node.next = mergeTwoLists(l1.next, l2);\\n    } else {\\n        node = l2;\\n        node.next = mergeTwoLists(l1, l2.next);\\n    }\\n    return node;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```JavaScript\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nconst mergeTwoLists = function(l1, l2) {\\n    const head = new ListNode(null);\\n    let curr = head;\\n    while (l1 && l2) {\\n        if (l1.val < l2.val) {\\n            curr.next = l1;\\n            l1 = l1.next;\\n        } else {\\n            curr.next = l2;\\n            l2 = l2.next;\\n        }\\n        curr = curr.next;\\n    }\\n    curr.next = l1 || l2;\\n    return head.next;\\n    \\n};\\n```\n```JavaScript\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(l1, l2) {\\n    if (!l1 || !l2) {\\n        return l1 || l2;\\n    }\\n    let node = null;\\n    if (l1.val < l2.val) {\\n        node = l1;\\n        node.next = mergeTwoLists(l1.next, l2);\\n    } else {\\n        node = l2;\\n        node.next = mergeTwoLists(l1, l2.next);\\n    }\\n    return node;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 221098,
                "title": "rust-solution-no-copy-0ms",
                "content": "```\\nuse std::mem;\\n\\nimpl Solution {\\n    #[allow(dead_code)]\\n    pub fn merge_two_lists(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        let mut result = l1;\\n        let mut l2 = l2;\\n        let mut lsmall = &mut result;\\n        let lbig = &mut l2;\\n        while lbig.is_some() {\\n            if lsmall.is_none() || lsmall.as_ref()?.val > lbig.as_ref()?.val {\\n                mem::swap(lsmall, lbig);\\n            }\\n            if lsmall.is_some() { lsmall = &mut lsmall.as_mut()?.next; }\\n        }\\n        result\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nuse std::mem;\\n\\nimpl Solution {\\n    #[allow(dead_code)]\\n    pub fn merge_two_lists(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        let mut result = l1;\\n        let mut l2 = l2;\\n        let mut lsmall = &mut result;\\n        let lbig = &mut l2;\\n        while lbig.is_some() {\\n            if lsmall.is_none() || lsmall.as_ref()?.val > lbig.as_ref()?.val {\\n                mem::swap(lsmall, lbig);\\n            }\\n            if lsmall.is_some() { lsmall = &mut lsmall.as_mut()?.next; }\\n        }\\n        result\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 188108,
                "title": "c-recursive-solution",
                "content": "It is an easy level linked list algorithm. I wrote a recursive solution. The problem statement is hard to tell that the value in the merged list should be in ascending order. \\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int x) { val = x; }\\n * }\\n */\\npublic class Solution {\\n    public ListNode MergeTwoLists(ListNode l1, ListNode l2)\\n        {            \\n            if (l1 == null)\\n                return l2;\\n            if (l2 == null)\\n                return l1;\\n\\n            var tmp1 = l1.next;\\n            var tmp2 = l2.next;\\n            if (l2.val > l1.val)\\n            {\\n                l1.next = MergeTwoLists(tmp1, l2);               \\n\\n                return l1; \\n            }\\n\\n            l2.next = MergeTwoLists(l1, tmp2);           \\n            return l2;                                    \\n    }\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int x) { val = x; }\\n * }\\n */\\npublic class Solution {\\n    public ListNode MergeTwoLists(ListNode l1, ListNode l2)\\n        {            \\n            if (l1 == null)\\n                return l2;\\n            if (l2 == null)\\n                return l1;\\n\\n            var tmp1 = l1.next;\\n            var tmp2 = l2.next;\\n            if (l2.val > l1.val)\\n            {\\n                l1.next = MergeTwoLists(tmp1, l2);               \\n\\n                return l1; \\n            }\\n\\n            l2.next = MergeTwoLists(l1, tmp2);           \\n            return l2;                                    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 167437,
                "title": "go-solution",
                "content": "```\\n/**\\n * Definition for singly-linked list.\\n * type ListNode struct {\\n *     Val int\\n *     Next *ListNode\\n * }\\n */\\nfunc mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {\\n    var newList  = &ListNode{}\\n    var out = newList\\n    for l1 != nil && l2 != nil {\\n        if l1.Val < l2.Val {\\n            newList.Next = l1\\n            l1 = l1.Next\\n            newList = newList.Next\\n        }else{\\n            newList.Next = l2\\n            l2 = l2.Next\\n            newList = newList.Next\\n        }\\n    }\\n    if l1 != nil {\\n        newList.Next = l1\\n    }else if l2 != nil {\\n        newList.Next = l2\\n    }\\n    \\n    return out.Next\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * type ListNode struct {\\n *     Val int\\n *     Next *ListNode\\n * }\\n */\\nfunc mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {\\n    var newList  = &ListNode{}\\n    var out = newList\\n    for l1 != nil && l2 != nil {\\n        if l1.Val < l2.Val {\\n            newList.Next = l1\\n            l1 = l1.Next\\n            newList = newList.Next\\n        }else{\\n            newList.Next = l2\\n            l2 = l2.Next\\n            newList = newList.Next\\n        }\\n    }\\n    if l1 != nil {\\n        newList.Next = l1\\n    }else if l2 != nil {\\n        newList.Next = l2\\n    }\\n    \\n    return out.Next\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2848488,
                "title": "beated-94-javascript-code-simple-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function (list1, list2) {\\n    let head = new ListNode, tail\\n    if (!list1 || !list2)\\n        return list2 || list1\\n\\n    if (list1.val < list2.val) {\\n        head = list1\\n        list1 = list1.next\\n    }\\n    else {\\n        head = list2\\n        list2 = list2.next\\n    }\\n    tail = head\\n    while (list1 && list2) {\\n        if (list1.val < list2.val) {\\n            tail.next = list1\\n            tail = tail.next\\n            list1 = list1.next\\n        } else {\\n            tail.next = list2\\n            tail = tail.next\\n            list2 = list2.next\\n        }\\n    }\\n     tail.next = list1 || list2\\n\\n\\n\\n\\n    return head\\n\\n};",
                "solutionTags": [
                    "JavaScript",
                    "Linked List"
                ],
                "code": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function (list1, list2) {\\n    let head = new ListNode, tail\\n    if (!list1 || !list2)\\n        return list2 || list1\\n\\n    if (list1.val < list2.val) {\\n        head = list1\\n        list1 = list1.next\\n    }\\n    else {\\n        head = list2\\n        list2 = list2.next\\n    }\\n    tail = head\\n    while (list1 && list2) {\\n        if (list1.val < list2.val) {\\n            tail.next = list1\\n            tail = tail.next\\n            list1 = list1.next\\n        } else {\\n            tail.next = list2\\n            tail = tail.next\\n            list2 = list2.next\\n        }\\n    }\\n     tail.next = list1 || list2\\n\\n\\n\\n\\n    return head\\n\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1705290,
                "title": "python-3-60ms-iterative-dummy-node-approach-easy-to-understand",
                "content": "```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        d=c=ListNode(0)\\n        while list1 and list2:\\n            if list1.val<list2.val:\\n                c.next=list1\\n                list1=list1.next\\n            else:\\n                c.next=list2\\n                list2=list2.next\\n            c=c.next\\n        c.next = list1 or list2\\n        return d.next\\n```",
                "solutionTags": [
                    "Python",
                    "Linked List",
                    "Iterator"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        d=c=ListNode(0)\\n        while list1 and list2:\\n            if list1.val<list2.val:\\n                c.next=list1\\n                list1=list1.next\\n            else:\\n                c.next=list2\\n                list2=list2.next\\n            c=c.next\\n        c.next = list1 or list2\\n        return d.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1511233,
                "title": "c-3-solutions-1-recursive-and-2-iterative-solutions",
                "content": "Recursive-\\n```\\nListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n    if(l1==NULL) return l2;\\n    if(l2==NULL) return l1;\\n    if(l1->val<=l2->val){\\n        l1->next=mergeTwoLists(l1->next,l2);\\n        return l1;\\n    }\\n    else{\\n        l2->next=mergeTwoLists(l2->next,l1);\\n        return l2;\\n    }\\n}\\n```\\nIterative O(n1+n2) space-\\n```\\nListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n    if(l1==NULL) return l2;\\n\\tif(l2==NULL) return l1;\\n\\tListNode* dummy=new ListNode();\\n\\tListNode* p=dummy;\\n\\twhile(l1!=NULL && l2!=NULL){\\n\\t\\tif(l1->val<=l2->val){\\n\\t\\t\\tp->next=new ListNode(l1->val);\\n\\t\\t\\tl1=l1->next;\\n\\t\\t}\\n\\t\\telse{\\n\\t\\t\\tp->next=new ListNode(l2->val);\\n\\t\\t\\tl2=l2->next;\\n\\t\\t}\\n\\t\\tp=p->next;\\n\\t}\\n\\tif(l1!=NULL){\\n\\t\\tp->next=l1;\\n\\t}\\n\\tif(l2!=NULL){\\n\\t\\tp->next=l2;\\n\\t}\\n\\treturn dummy->next;\\n}\\n```\\nIterative O(1) space-\\n```\\nListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n    if(l1==NULL) return l2;\\n    if(l2==NULL) return l1;\\n    ListNode* dummy=new ListNode();\\n    ListNode* p=dummy;\\n    while(l1!=NULL && l2!=NULL){\\n        if(l1->val<=l2->val){\\n            p->next=l1;\\n            l1=l1->next;\\n        }\\n        else{\\n            p->next=l2;\\n            l2=l2->next;\\n        }\\n        p=p->next;\\n    }\\n    p->next=(l1!=NULL) ? l1 : l2;\\n    return dummy->next;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion",
                    "Iterator"
                ],
                "code": "```\\nListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n    if(l1==NULL) return l2;\\n    if(l2==NULL) return l1;\\n    if(l1->val<=l2->val){\\n        l1->next=mergeTwoLists(l1->next,l2);\\n        return l1;\\n    }\\n    else{\\n        l2->next=mergeTwoLists(l2->next,l1);\\n        return l2;\\n    }\\n}\\n```\n```\\nListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n    if(l1==NULL) return l2;\\n\\tif(l2==NULL) return l1;\\n\\tListNode* dummy=new ListNode();\\n\\tListNode* p=dummy;\\n\\twhile(l1!=NULL && l2!=NULL){\\n\\t\\tif(l1->val<=l2->val){\\n\\t\\t\\tp->next=new ListNode(l1->val);\\n\\t\\t\\tl1=l1->next;\\n\\t\\t}\\n\\t\\telse{\\n\\t\\t\\tp->next=new ListNode(l2->val);\\n\\t\\t\\tl2=l2->next;\\n\\t\\t}\\n\\t\\tp=p->next;\\n\\t}\\n\\tif(l1!=NULL){\\n\\t\\tp->next=l1;\\n\\t}\\n\\tif(l2!=NULL){\\n\\t\\tp->next=l2;\\n\\t}\\n\\treturn dummy->next;\\n}\\n```\n```\\nListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n    if(l1==NULL) return l2;\\n    if(l2==NULL) return l1;\\n    ListNode* dummy=new ListNode();\\n    ListNode* p=dummy;\\n    while(l1!=NULL && l2!=NULL){\\n        if(l1->val<=l2->val){\\n            p->next=l1;\\n            l1=l1->next;\\n        }\\n        else{\\n            p->next=l2;\\n            l2=l2->next;\\n        }\\n        p=p->next;\\n    }\\n    p->next=(l1!=NULL) ? l1 : l2;\\n    return dummy->next;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 328547,
                "title": "elegant-short-scala-code",
                "content": "Despite of the definition of the Linked List (For more discussion about this: [here](https://leetcode.com/explore/learn/card/recursion-i/253/conclusion/2382/discuss/193543/Request-for-Functional-Data-structures/301293)), here\\'s a short Scala code. \\n\\n```\\n/**\\n * Definition for singly-linked list.\\n * class ListNode(var _x: Int = 0) {\\n *   var next: ListNode = null\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def mergeTwoLists(l1: ListNode, l2: ListNode): ListNode = (l1, l2) match {\\n        case (null, l2) => l2\\n        case (l1, null) => l1\\n        case (l1, l2) if (l1.x <= l2.x) => {\\n            l1.next = mergeTwoLists(l1.next, l2)\\n            l1\\n        }\\n        case (l1, l2) if (l1.x > l2.x) => {\\n            l2.next = mergeTwoLists(l1, l2.next)\\n            l2\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * class ListNode(var _x: Int = 0) {\\n *   var next: ListNode = null\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def mergeTwoLists(l1: ListNode, l2: ListNode): ListNode = (l1, l2) match {\\n        case (null, l2) => l2\\n        case (l1, null) => l1\\n        case (l1, l2) if (l1.x <= l2.x) => {\\n            l1.next = mergeTwoLists(l1.next, l2)\\n            l1\\n        }\\n        case (l1, l2) if (l1.x > l2.x) => {\\n            l2.next = mergeTwoLists(l1, l2.next)\\n            l2\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 137565,
                "title": "swift-solution",
                "content": "```\\nclass Solution {\\n    func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        if(l1 == nil) {return l2}\\n        if(l2 == nil) {return l1}\\n        var result:ListNode? = nil\\n        \\n        if(l1!.val <= l2!.val) {\\n            result = l1\\n            result!.next = mergeTwoLists(l1!.next,l2)\\n        }\\n        else {\\n            result = l2\\n            result!.next = mergeTwoLists(l1,l2!.next)\\n        }\\n        return result\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        if(l1 == nil) {return l2}\\n        if(l2 == nil) {return l1}\\n        var result:ListNode? = nil\\n        \\n        if(l1!.val <= l2!.val) {\\n            result = l1\\n            result!.next = mergeTwoLists(l1!.next,l2)\\n        }\\n        else {\\n            result = l2\\n            result!.next = mergeTwoLists(l1,l2!.next)\\n        }\\n        return result\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1938697,
                "title": "php-solution-with-recursion",
                "content": "```\\n/**\\n * Definition for a singly-linked list.\\n * class ListNode {\\n *     public $val = 0;\\n *     public $next = null;\\n *     function __construct($val = 0, $next = null) {\\n *         $this->val = $val;\\n *         $this->next = $next;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param ListNode $list1\\n     * @param ListNode $list2\\n     * @return ListNode\\n     */\\n    function mergeTwoLists($list1, $list2) {\\n        if($list1== null) return $list2;\\n        if($list2== null) return $list1;\\n      if($list1->val < $list2->val) {\\n            $list1->next = $this->mergeTwoLists($list1->next, $list2);\\n            return $list1;\\n        } else {\\n            $list2->next = $this->mergeTwoLists($list2->next, $list1);\\n            return $list2;\\n        }\\n}}\\n```\\nPlease upvote if you like the solution\\n",
                "solutionTags": [
                    "PHP"
                ],
                "code": "```\\n/**\\n * Definition for a singly-linked list.\\n * class ListNode {\\n *     public $val = 0;\\n *     public $next = null;\\n *     function __construct($val = 0, $next = null) {\\n *         $this->val = $val;\\n *         $this->next = $next;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param ListNode $list1\\n     * @param ListNode $list2\\n     * @return ListNode\\n     */\\n    function mergeTwoLists($list1, $list2) {\\n        if($list1== null) return $list2;\\n        if($list2== null) return $list1;\\n      if($list1->val < $list2->val) {\\n            $list1->next = $this->mergeTwoLists($list1->next, $list2);\\n            return $list1;\\n        } else {\\n            $list2->next = $this->mergeTwoLists($list2->next, $list1);\\n            return $list2;\\n        }\\n}}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1899630,
                "title": "100-fastest-swift-solution",
                "content": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public var val: Int\\n *     public var next: ListNode?\\n *     public init() { self.val = 0; self.next = nil; }\\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\\n * }\\n */\\nclass Solution {\\n    func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n\\t\\tif l1 == nil { return l2 }\\n\\t\\tif l2 == nil { return l1 }\\n        \\n\\t\\tif l1!.val < l2!.val \\n\\t\\t\\t { l1!.next = mergeTwoLists(l1!.next, l2); return l1 } \\n\\t\\telse { l2!.next = mergeTwoLists(l2!.next, l1); return l2 }\\n    }\\n\\n}\\n```\\n\\nLet me know in comments if you have any doubts. I will be happy to answer.\\n\\nPlease upvote if you found the solution useful.",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public var val: Int\\n *     public var next: ListNode?\\n *     public init() { self.val = 0; self.next = nil; }\\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\\n * }\\n */\\nclass Solution {\\n    func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n\\t\\tif l1 == nil { return l2 }\\n\\t\\tif l2 == nil { return l1 }\\n        \\n\\t\\tif l1!.val < l2!.val \\n\\t\\t\\t { l1!.next = mergeTwoLists(l1!.next, l2); return l1 } \\n\\t\\telse { l2!.next = mergeTwoLists(l2!.next, l1); return l2 }\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 682663,
                "title": "c-my-simple-and-easy-to-understand-code-with-detailed-comments",
                "content": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n \\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        // if \\'l1\\' & \\'l2\\' both are empty then return nullptr\\n        if (!l1 && !l2) return nullptr;\\n\\n        // if \\'l1\\' is empty then return \\'l2\\'\\n        if (!l1) return l2;\\n\\n        // if \\'l2\\' is empty then return \\'l1\\'\\n        if (!l2) return l1;\\n\\n        // creating a new ListNode \\'head\\'\\n        ListNode* head = new ListNode();\\n\\n        // creatting a new ListNode \\'curr\\' and pointing it to \\'head\\'\\n        ListNode* curr = head;\\n\\n        // loop through until ANYONE FROM \\'l1\\' AND \\'l2\\' points to nullptr\\n        while (l1 && l2) {\\n            int val1 = l1->val;\\n            int val2 = l2->val;\\n\\n            // if first Linked List has smaller value then point \\'curr\\' to \\'l1\\'\\n            if (val1 < val2) {\\n                curr->val = val1;\\n                l1 = l1->next;\\n            }\\n            // else point \\'curr\\' to \\'l2\\'\\n            else {\\n                curr->val = val2;\\n                l2 = l2->next;\\n            }\\n\\n            if (l1 && l2) {\\n                curr->next = new ListNode();\\n                curr = curr->next;\\n            }\\n        }\\n\\n        // if \\'l1\\' is empty then point \\'curr\\' to remaining \\'l2\\'\\n        if (!l1) curr->next = l2;\\n\\n        // if \\'l2\\' is empty then point \\'curr\\' to remaining \\'l1\\'\\n        if (!l2) curr->next = l1;\\n\\n        return head;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n \\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        // if \\'l1\\' & \\'l2\\' both are empty then return nullptr\\n        if (!l1 && !l2) return nullptr;\\n\\n        // if \\'l1\\' is empty then return \\'l2\\'\\n        if (!l1) return l2;\\n\\n        // if \\'l2\\' is empty then return \\'l1\\'\\n        if (!l2) return l1;\\n\\n        // creating a new ListNode \\'head\\'\\n        ListNode* head = new ListNode();\\n\\n        // creatting a new ListNode \\'curr\\' and pointing it to \\'head\\'\\n        ListNode* curr = head;\\n\\n        // loop through until ANYONE FROM \\'l1\\' AND \\'l2\\' points to nullptr\\n        while (l1 && l2) {\\n            int val1 = l1->val;\\n            int val2 = l2->val;\\n\\n            // if first Linked List has smaller value then point \\'curr\\' to \\'l1\\'\\n            if (val1 < val2) {\\n                curr->val = val1;\\n                l1 = l1->next;\\n            }\\n            // else point \\'curr\\' to \\'l2\\'\\n            else {\\n                curr->val = val2;\\n                l2 = l2->next;\\n            }\\n\\n            if (l1 && l2) {\\n                curr->next = new ListNode();\\n                curr = curr->next;\\n            }\\n        }\\n\\n        // if \\'l1\\' is empty then point \\'curr\\' to remaining \\'l2\\'\\n        if (!l1) curr->next = l2;\\n\\n        // if \\'l2\\' is empty then point \\'curr\\' to remaining \\'l1\\'\\n        if (!l2) curr->next = l1;\\n\\n        return head;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 341722,
                "title": "python3-clean-recursive-solution",
                "content": "```python\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        if l1 and l2:\\n\\t\\t\\t# keep l1 always point to the smallest node\\n            if l1.val > l2.val:\\n                l1, l2 = l2, l1\\n\\t\\t\\t# so each step, connect the current smallest node to the already linked list\\n            l1.next = self.mergeTwoLists(l1.next, l2)\\n\\t\\t# short-circuit evaluation, if l1 not None, return l1, else, return l2\\n        return l1 or l2\\n```",
                "solutionTags": [
                    "Python",
                    "Recursion"
                ],
                "code": "```python\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        if l1 and l2:\\n\\t\\t\\t# keep l1 always point to the smallest node\\n            if l1.val > l2.val:\\n                l1, l2 = l2, l1\\n\\t\\t\\t# so each step, connect the current smallest node to the already linked list\\n            l1.next = self.mergeTwoLists(l1.next, l2)\\n\\t\\t# short-circuit evaluation, if l1 not None, return l1, else, return l2\\n        return l1 or l2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 167585,
                "title": "javascript-clean-solution",
                "content": "```\\nvar mergeTwoLists = function(l1, l2) {\\n    let res = new ListNode();\\n    let cur = res;\\n    while(l1 && l2){\\n        if(l1.val <= l2.val){\\n            cur.next = new ListNode(l1.val);\\n            l1 = l1.next;\\n            cur = cur.next;\\n        }\\n        else {\\n            cur.next = new ListNode(l2.val);\\n            l2 = l2.next;\\n            cur = cur.next;\\n        }\\n    }\\n    cur.next = l1 || l2;\\n    return res.next;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar mergeTwoLists = function(l1, l2) {\\n    let res = new ListNode();\\n    let cur = res;\\n    while(l1 && l2){\\n        if(l1.val <= l2.val){\\n            cur.next = new ListNode(l1.val);\\n            l1 = l1.next;\\n            cur = cur.next;\\n        }\\n        else {\\n            cur.next = new ListNode(l2.val);\\n            l2 = l2.next;\\n            cur = cur.next;\\n        }\\n    }\\n    cur.next = l1 || l2;\\n    return res.next;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 9904,
                "title": "java-concise-iterative-and-recursive-solutions",
                "content": "        \\n    public ListNode mergeTwoLists1(ListNode l1, ListNode l2) {\\n        ListNode p, dummy = new ListNode(0);\\n        p = dummy;\\n        while (l1 != null && l2 != null) {\\n            if (l1.val < l2.val) {\\n                p.next = l1;\\n                l1 = l1.next;\\n            } else {\\n                p.next = l2;\\n                l2 = l2.next;\\n            }\\n            p = p.next;\\n        }\\n        p.next = (l1==null)?l2:l1;\\n        return dummy.next;\\n    }\\n    \\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        if (l1 == null || l2 == null) {\\n            return l1==null?l2:l1;\\n        }\\n        if (l1.val > l2.val) {\\n            return mergeTwoLists(l2, l1);\\n        }\\n        l1.next = mergeTwoLists(l1.next, l2);\\n        return l1;\\n    }",
                "solutionTags": [
                    "Java",
                    "Recursion",
                    "Iterator"
                ],
                "code": "        \\n    public ListNode mergeTwoLists1(ListNode l1, ListNode l2) {\\n        ListNode p, dummy = new ListNode(0);\\n        p = dummy;\\n        while (l1 != null && l2 != null) {\\n            if (l1.val < l2.val) {\\n                p.next = l1;\\n                l1 = l1.next;\\n            } else {\\n                p.next = l2;\\n                l2 = l2.next;\\n            }\\n            p = p.next;\\n        }\\n        p.next = (l1==null)?l2:l1;\\n        return dummy.next;\\n    }\\n    \\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        if (l1 == null || l2 == null) {\\n            return l1==null?l2:l1;\\n        }\\n        if (l1.val > l2.val) {\\n            return mergeTwoLists(l2, l1);\\n        }\\n        l1.next = mergeTwoLists(l1.next, l2);\\n        return l1;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3333201,
                "title": "awesome-trick-for-linked-list-python3",
                "content": "\\n\\n# Single Linked List----->Time : O(N)\\n```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        out=dummy=ListNode()\\n        while list1 and list2:\\n            if list1.val<list2.val:\\n                out.next=list1\\n                list1=list1.next\\n            else:\\n                out.next=list2\\n                list2=list2.next\\n            out=out.next\\n        if list1:\\n            out.next=list1\\n            list1=list1.next\\n        if list2:\\n            out.next=list2\\n            list2=list2.next\\n        return dummy.next\\n\\n```\\n# please upvote me it would encourage me alot\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        out=dummy=ListNode()\\n        while list1 and list2:\\n            if list1.val<list2.val:\\n                out.next=list1\\n                list1=list1.next\\n            else:\\n                out.next=list2\\n                list2=list2.next\\n            out=out.next\\n        if list1:\\n            out.next=list1\\n            list1=list1.next\\n        if list2:\\n            out.next=list2\\n            list2=list2.next\\n        return dummy.next\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2747669,
                "title": "python-solution",
                "content": "Please upvote :)\\n```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        newHead = dummyHead = ListNode()\\n        while list1 and list2:\\n            if list1.val < list2.val:\\n                dummyHead.next = list1\\n                list1 = list1.next\\n            else:\\n                dummyHead.next = list2\\n                list2 = list2.next\\n            dummyHead = dummyHead.next\\n        \\n        if list1:\\n            dummyHead.next = list1\\n        if list2:\\n            dummyHead.next = list2\\n        return newHead.next\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        newHead = dummyHead = ListNode()\\n        while list1 and list2:\\n            if list1.val < list2.val:\\n                dummyHead.next = list1\\n                list1 = list1.next\\n            else:\\n                dummyHead.next = list2\\n                list2 = list2.next\\n            dummyHead = dummyHead.next\\n        \\n        if list1:\\n            dummyHead.next = list1\\n        if list2:\\n            dummyHead.next = list2\\n        return newHead.next\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1166062,
                "title": "simple-python-sol-with-explanation",
                "content": "\\n        \\n\\t\\tSO THE BSIC IDEA IS THAT WE WILL COMPARING BOTH THE LIST AT EVERY INSTANCE IF ONE IS LESS THAN \\n        \\n        THAN THE OTHER THEN WE WILL INCREMENT THE THE COUNT OF THAT LIST AND ADD IT TO THE DUMMY NODE\\n        \\n     \\n        \\n        #creating a dummy node\\n        \\n        dummy = curr = ListNode(0) # curr is the curr pointer for our DUMMY\\n        \\n        while l1 and l2:\\n            if l1.val<l2.val:\\n                curr.next = l1\\n                l1 = l1.next\\n                \\n            else:\\n                curr.next = l2\\n                l2 = l2.next\\n                \\n            curr = curr.next\\n            \\n        # now we \\'ll see if there are still some elements left then we ll add them as well\\n        if l1: curr.next = l1\\n            \\n        if l2 : curr.next = l2\\n            \\n        return dummy.next\\t\\t\\n**IF YOU FIND IT HELPFUL PLEASE UPVOTE **\\n**IF YOU HAVE ANY QUERIES COMMENT DOWN **",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "\\n        \\n\\t\\tSO THE BSIC IDEA IS THAT WE WILL COMPARING BOTH THE LIST AT EVERY INSTANCE IF ONE IS LESS THAN \\n        \\n        THAN THE OTHER THEN WE WILL INCREMENT THE THE COUNT OF THAT LIST AND ADD IT TO THE DUMMY NODE\\n        \\n     \\n        \\n        #creating a dummy node\\n        \\n        dummy = curr = ListNode(0) # curr is the curr pointer for our DUMMY\\n        \\n        while l1 and l2:\\n            if l1.val<l2.val:\\n                curr.next = l1\\n                l1 = l1.next\\n                \\n            else:\\n                curr.next = l2\\n                l2 = l2.next\\n                \\n            curr = curr.next\\n            \\n        # now we \\'ll see if there are still some elements left then we ll add them as well\\n        if l1: curr.next = l1\\n            \\n        if l2 : curr.next = l2\\n            \\n        return dummy.next\\t\\t\\n**IF YOU FIND IT HELPFUL PLEASE UPVOTE **\\n**IF YOU HAVE ANY QUERIES COMMENT DOWN **",
                "codeTag": "Unknown"
            },
            {
                "id": 723383,
                "title": "c",
                "content": "```\\npublic class Solution {\\n    public ListNode MergeTwoLists(ListNode l1, ListNode l2) {\\n        if (l1 == null)\\n            return l2;\\n        else if (l2 == null)\\n            return l1;\\n        \\n        ListNode d = new ListNode(),\\n                 cur = d;\\n        \\n        while (l1 != null && l2 != null)\\n        {\\n            if (l1.val < l2.val)\\n            {\\n                cur.next = l1;\\n                l1 = l1.next;\\n            }\\n            else\\n            {\\n                cur.next = l2;\\n                l2 = l2.next;\\n            }\\n            \\n            cur = cur.next;\\n        }\\n        \\n        if (l1 != null)\\n            cur.next = l1;\\n        \\n        if (l2 != null)\\n            cur.next = l2;\\n        \\n        return d.next;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public ListNode MergeTwoLists(ListNode l1, ListNode l2) {\\n        if (l1 == null)\\n            return l2;\\n        else if (l2 == null)\\n            return l1;\\n        \\n        ListNode d = new ListNode(),\\n                 cur = d;\\n        \\n        while (l1 != null && l2 != null)\\n        {\\n            if (l1.val < l2.val)\\n            {\\n                cur.next = l1;\\n                l1 = l1.next;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 305686,
                "title": "swift-92ms",
                "content": "```\\nfunc mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        if(l1 == nil) {return l2}\\n        if(l2 == nil) {return l1}\\n        var result:ListNode? = nil\\n        \\n        if(l1!.val <= l2!.val) {\\n            result = l1\\n            result!.next = mergeTwoLists(l1!.next,l2)\\n        }\\n        else {\\n            result = l2\\n            result!.next = mergeTwoLists(l1,l2!.next)\\n        }\\n        return result\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nfunc mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        if(l1 == nil) {return l2}\\n        if(l2 == nil) {return l1}\\n        var result:ListNode? = nil\\n        \\n        if(l1!.val <= l2!.val) {\\n            result = l1\\n            result!.next = mergeTwoLists(l1!.next,l2)\\n        }\\n        else {\\n            result = l2\\n            result!.next = mergeTwoLists(l1,l2!.next)\\n        }\\n        return result\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 9891,
                "title": "my-java-recursive-solution",
                "content": "    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n            if (l1==null) {\\n    \\t\\t\\treturn l2;\\n    \\t\\t}\\n    \\t\\tif (l2==null) {\\n    \\t\\t\\treturn l1;\\n    \\t\\t}\\n    \\t\\tif (l1.val <= l2.val) {\\n    \\t\\t\\tl1.next = mergeTwoLists(l1.next, l2);\\n    \\t\\t\\treturn l1;\\n    \\t\\t}else {\\n    \\t\\t\\tl2.next = mergeTwoLists(l1, l2.next);\\n    \\t\\t\\treturn l2;\\n    \\t\\t\\t}\\n    \\t\\t}",
                "solutionTags": [
                    "Java"
                ],
                "code": "    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n            if (l1==null) {\\n    \\t\\t\\treturn l2;\\n    \\t\\t}\\n    \\t\\tif (l2==null) {\\n    \\t\\t\\treturn l1;\\n    \\t\\t}\\n    \\t\\tif (l1.val <= l2.val) {\\n    \\t\\t\\tl1.next = mergeTwoLists(l1.next, l2);\\n    \\t\\t\\treturn l1;\\n    \\t\\t}else {\\n    \\t\\t\\tl2.next = mergeTwoLists(l1, l2.next);\\n    \\t\\t\\treturn l2;\\n    \\t\\t\\t}\\n    \\t\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 3945501,
                "title": "java-runtime-0-ms-beats-100",
                "content": "# Intuition\\n\\nMerging two sorted linked lists involves comparing the values of nodes from both lists and creating a new merged list. We can iterate through the lists while comparing their values, appending the smaller value node to the merged list, and moving the corresponding pointer forward in that list. By repeating this process, we construct the merged list.\\n\\n# Approach\\nCreate a dummy node to serve as the starting point of the merged list.\\nInitialize a current pointer (head) to the dummy node.\\nUse a while loop to iterate while both list1 and list2 have nodes.\\nCompare the values of the current nodes in list1 and list2.\\nAppend the smaller value node to the head.next and move the corresponding pointer forward in that list.\\nContinue this process until one of the lists becomes empty.\\nAttach the remaining non-null list to the end of the merged list.\\nReturn dummy.next as the merged list, which is the actual starting node.\\n\\n# Complexity\\n- Time complexity:\\nO(m + n), where m and n are the lengths of list1 and list2 respectively, as we iterate through both lists once.\\n\\n- Space complexity:\\nO(1), as we are only using a constant amount of extra space for the dummy node and the head pointer.\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        \\n        ListNode temp = new ListNode(-5);\\n       \\n     \\n        ListNode head = temp;\\n\\n      \\n        while (list1 != null && list2 != null) {\\n         \\n            if (list1.val <= list2.val) {\\n             head.next = list1;\\n             \\n                list1 = list1.next;\\n            } else {\\n               \\n                head.next = list2;\\n              \\n                list2 = list2.next;\\n            }\\n          \\n            head = head.next;\\n        }\\n\\n      \\n        if (list1 != null) {\\n            head.next = list1;\\n        } else {\\n            head.next = list2;\\n        }\\n      \\n        \\n        return temp.next;\\n    }\\n}\\n\\n\\n\\n```\\n![c0504eaf-5fb8-4a1d-a769-833262d1b86e_1674433591.3836212.webp](https://assets.leetcode.com/users/images/8a3b41d1-f0ca-472f-a9f7-8346b34a824e_1693297402.2918687.webp)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        \\n        ListNode temp = new ListNode(-5);\\n       \\n     \\n        ListNode head = temp;\\n\\n      \\n        while (list1 != null && list2 != null) {\\n         \\n            if (list1.val <= list2.val) {\\n             head.next = list1;\\n             \\n                list1 = list1.next;\\n            } else {\\n               \\n                head.next = list2;\\n              \\n                list2 = list2.next;\\n            }\\n          \\n            head = head.next;\\n        }\\n\\n      \\n        if (list1 != null) {\\n            head.next = list1;\\n        } else {\\n            head.next = list2;\\n        }\\n      \\n        \\n        return temp.next;\\n    }\\n}\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2866594,
                "title": "rust-0ms",
                "content": "Rust Solution ([0ms](https://leetcode.com/submissions/detail/852877110/)):\\n```rust\\nimpl Solution {\\n    pub fn merge_two_lists(\\n        list1: Option<Box<ListNode>>,\\n        list2: Option<Box<ListNode>>,\\n    ) -> Option<Box<ListNode>> {\\n        match (list1, list2) {\\n            (Some(l1), None) => Some(l1),\\n            (None, Some(l2)) => Some(l2),\\n            (None, None)     => None,\\n            (Some(l1), Some(l2)) => match l1.val <= l2.val {\\n                true  => Some(Box::new(ListNode {\\n                    val: l1.val,\\n                    next: Self::merge_two_lists(l1.next, Some(l2)),\\n                })),\\n                false => Some(Box::new(ListNode {\\n                    val: l2.val,\\n                    next: Self::merge_two_lists(Some(l1), l2.next),\\n                })),\\n            },\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn merge_two_lists(\\n        list1: Option<Box<ListNode>>,\\n        list2: Option<Box<ListNode>>,\\n    ) -> Option<Box<ListNode>> {\\n        match (list1, list2) {\\n            (Some(l1), None) => Some(l1),\\n            (None, Some(l2)) => Some(l2),\\n            (None, None)     => None,\\n            (Some(l1), Some(l2)) => match l1.val <= l2.val {\\n                true  => Some(Box::new(ListNode {\\n                    val: l1.val,\\n                    next: Self::merge_two_lists(l1.next, Some(l2)),\\n                })),\\n                false => Some(Box::new(ListNode {\\n                    val: l2.val,\\n                    next: Self::merge_two_lists(Some(l1), l2.next),\\n                })),\\n            },\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2552255,
                "title": "python-simplest-iterative-solution-with-explanation-beg-to-adv-linked-list",
                "content": "```python\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        dummy = ListNode(0) # making a dummy node\\n        curr = dummy # creating a pointer pointing to the dummy node\\n        \\n        while list1 and list2: # we must be having both list to perform merge operation.\\n            if list1.val < list2.val: # in case list value is less then list2,\\n                curr.next = list1  # then we move our pointer ahead in list 1.\\n                list1 = list1.next # having value of next element of list2\\n            else:\\n                curr.next = list2 # in case list2 value is greaer then list 1 value.\\n                list2 = list2.next #having value of next element of list2\\n            curr = curr.next # moving our curr pointer\\n        \\n        # In case all the elements of any one of the list is travered. then we`ll move our pointer to the left over. \\n        # As lists are soted already, technically we could do that\\n        # Method : 1\\n#         if list1:\\n#             curr.next = list1\\n#         elif list2:\\n#             curr.next = list2\\n        \\n        # Method : 2\\n        curr.next = list1 or list2\\n        \\n        return dummy.next # return next bcz first node is dummy.          \\n```\\n***Found helpful, Do upvote !!***",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Linked List"
                ],
                "code": "```python\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        dummy = ListNode(0) # making a dummy node\\n        curr = dummy # creating a pointer pointing to the dummy node\\n        \\n        while list1 and list2: # we must be having both list to perform merge operation.\\n            if list1.val < list2.val: # in case list value is less then list2,\\n                curr.next = list1  # then we move our pointer ahead in list 1.\\n                list1 = list1.next # having value of next element of list2\\n            else:\\n                curr.next = list2 # in case list2 value is greaer then list 1 value.\\n                list2 = list2.next #having value of next element of list2\\n            curr = curr.next # moving our curr pointer\\n        \\n        # In case all the elements of any one of the list is travered. then we`ll move our pointer to the left over. \\n        # As lists are soted already, technically we could do that\\n        # Method : 1\\n#         if list1:\\n#             curr.next = list1\\n#         elif list2:\\n#             curr.next = list2\\n        \\n        # Method : 2\\n        curr.next = list1 or list2\\n        \\n        return dummy.next # return next bcz first node is dummy.          \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1827020,
                "title": "javascript-easy-to-understand-2-solutions-even-1-line",
                "content": "## Core Strategy\\n\\nSince the 2 linked lists are sorted already, so the core strategy is a simple merge sort. What we need to do is finding the small one at both start of linked list, then move the pointer to the next for the small one, until 1 linked list is ended.\\n\\n## Solution 1\\n\\nFor this solution, we choose to implement it via traversing. So we use a `while` loop until 1 linked list is ended.\\nHere\\'s a sample code from me:\\n\\n```js\\nconst mergeTwoLists = (l1, l2) => {\\n  const dummy = { next: null };\\n  let cur = dummy;\\n\\twhile (l1 && l2) {\\n\\t\\tl1.val < l2.val ? (cur.next = l1, l1 = l1.next) : (cur.next = l2, l2 = l2.next);\\n\\t\\tcur = cur.next;\\n\\t}\\n\\tcur.next = l1 || l2;\\n\\treturn dummy.next;\\n};\\n```\\n\\n## Solution 2\\n\\nFor this solution, we choose to implement it via recursion. So we need to deal with the end condition first, and then just deal with the current 2 start nodes and call the function itself recursively.\\nHere\\'s a sample code from me:\\n\\n```js\\nconst mergeTwoLists = (l1, l2) => {\\n\\tif (!l1) return l2;\\n\\tif (!l2) return l1;\\n\\tconst cur = l1.val < l2.val ? l1 : l2;\\n\\tif (l1.val < l2.val) {\\n\\t\\tl1.next = mergeTwoLists(l1.next, l2);\\n\\t} else {\\n\\t\\tl2.next = mergeTwoLists(l1, l2.next);\\n\\t}\\n\\treturn cur;\\n};\\n```\\n\\n## Make it 1 line\\n\\nIf you want a shorter code, let\\'s optimize the recursion solution with `,` operation first:\\n\\n```js\\nconst mergeTwoLists = (l1, l2) => {\\n  if (!l1) return l2;\\n  if (!l2) return l1;\\n  return l1.val < l2.val\\n    ? ((l1.next = mergeTwoLists(l1.next, l2)), l1)\\n    : ((l2.next = mergeTwoLists(l1, l2.next)), l2);\\n};\\n```\\n\\nAnd then using custom param to do pre-calculation to make it 1 line:\\n\\n```js\\nconst mergeTwoLists = (l1, l2, both = l1 && l2) => both ? (l1.val < l2.val ? ((l1.next = mergeTwoLists(l1.next, l2)), l1) : ((l2.next = mergeTwoLists(l1, l2.next)), l2)) : l1 || l2;\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\nconst mergeTwoLists = (l1, l2) => {\\n  const dummy = { next: null };\\n  let cur = dummy;\\n\\twhile (l1 && l2) {\\n\\t\\tl1.val < l2.val ? (cur.next = l1, l1 = l1.next) : (cur.next = l2, l2 = l2.next);\\n\\t\\tcur = cur.next;\\n\\t}\\n\\tcur.next = l1 || l2;\\n\\treturn dummy.next;\\n};\\n```\n```js\\nconst mergeTwoLists = (l1, l2) => {\\n\\tif (!l1) return l2;\\n\\tif (!l2) return l1;\\n\\tconst cur = l1.val < l2.val ? l1 : l2;\\n\\tif (l1.val < l2.val) {\\n\\t\\tl1.next = mergeTwoLists(l1.next, l2);\\n\\t} else {\\n\\t\\tl2.next = mergeTwoLists(l1, l2.next);\\n\\t}\\n\\treturn cur;\\n};\\n```\n```js\\nconst mergeTwoLists = (l1, l2) => {\\n  if (!l1) return l2;\\n  if (!l2) return l1;\\n  return l1.val < l2.val\\n    ? ((l1.next = mergeTwoLists(l1.next, l2)), l1)\\n    : ((l2.next = mergeTwoLists(l1, l2.next)), l2);\\n};\\n```\n```js\\nconst mergeTwoLists = (l1, l2, both = l1 && l2) => both ? (l1.val < l2.val ? ((l1.next = mergeTwoLists(l1.next, l2)), l1) : ((l2.next = mergeTwoLists(l1, l2.next)), l2)) : l1 || l2;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1826883,
                "title": "c-detailed-explanation-w-dry-run-full-commented-code",
                "content": "***Brief note about Question-***\\n* We are given the heads of two sorted linked lists list1 and list2 and we have to merge them and return the head of new merged list.\\n```\\nLet\\'s take an example not given in question -\\nSuppose our two linked list given to us as: list1 = [3,5,6,7], list2 = [8,9,16,34]\\n\\nSo, the final answer should look like [3,5,6,7,8,9,16,34]\\n```\\n___________________\\n***Solution - I (Accepted)-***\\n* Since we already know that both of the linked list is already sorted.\\n* So, we start our traversal by comparing the head of the linked list.\\n* And the list whose head value is less tahn the other we put that in our answer and move to the next node.\\n* See below dy run for better understanding.\\n```\\nSuppose our two linked list given to us as: list1 = [1,2,4], list2 = [1,3,4]\\n\\n                            \\u2193(head1)\\nso, list1 is represented as 1 --> 2 --> 4\\n\\nand list2 is represented as 1 --> 3 --> 4\\n                            \\u2191(head2)\\n\\narrows represent the intial symbol of heads,\\nnow we comapare both heads,\\n\\nso if(head1 <= head2) i.e (1 <= 1) \\ncondition true, so we put head1 in our answer and move forward our head1,\\n          so, our answer looks like ans[]: 1 --> \\n\\nnow, our linked list look like-\\n                                  \\u2193(head1)\\nso, list1 is represented as 1 --> 2 --> 4\\n\\nand list2 is represented as 1 --> 3 --> 4\\n                            \\u2191(head2)\\n\\nnow again we comapre if(head1 <= head2) i.e (2 <= 1)\\ncondition false, so we put head2 in our answer and move forward our head2,\\n          so, our answer looks like ans[]: 1 --> 1 -->\\n\\nnow, our linked list look like-\\n                                  \\u2193(head1)\\nso, list1 is represented as 1 --> 2 --> 4\\n\\nand list2 is represented as 1 --> 3 --> 4\\n                                  \\u2191(head2)\\n\\nnow again we comapre if(head1 <= head2) i.e (2 <= 3)\\ncondition true, so we put head1 in our answer and move forward our head1,\\n          so, our answer looks like ans[]: 1 --> 1 --> 2 -->\\n\\t\\t  \\nnow, our linked list look like-\\n                                        \\u2193(head1)\\nso, list1 is represented as 1 --> 2 --> 4\\n\\nand list2 is represented as 1 --> 3 --> 4\\n                                  \\u2191(head2)\\n\\t\\t\\t\\t\\t\\t\\t\\t  \\nnow again we comapre if(head1 <= head2) i.e (4 <= 3)\\ncondition false, so we put head2 in our answer and move forward our head2,\\n          so, our answer looks like ans[]: 1 --> 1 --> 2 --> 3 -->\\n\\t\\t  \\nnow, our linked list look like-\\n                                        \\u2193(head1)\\nso, list1 is represented as 1 --> 2 --> 4\\n\\nand list2 is represented as 1 --> 3 --> 4\\n                                        \\u2191(head2)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\nnow again we comapre if(head1 <= head2) i.e (4 <= 4)\\ncondition true, so we put head1 in our answer and move forward our head1,\\n          so, our answer looks like ans[]: 1 --> 1 --> 2 --> 3 --> 4 -->\\n\\t\\t  \\n\\t\\t  but now, we can\\'t move forward our head1 as it is already on NULL.\\n\\t\\t  so simply we just put our remaining head2 in our answer.\\n\\t\\t  \\n\\t\\t  Therefore, our answer looks like ans[]: 1 --> 1 --> 2 --> 3 --> 4 --> 4\\n\\t\\t  \\nI hope you will get the concept, now let\\'s move to the code area.\\n```\\n________\\n**Code (C++)**\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* merge(ListNode* head1, ListNode* head2)\\n    {\\n        if(head1 == NULL) // if head1 becomes null, means if it stands on last position\\n        {\\n            return head2; // from here simply return head2\\n        }\\n            \\n        if(head2 == NULL) // if head2 becomes null, means if it stands on last position\\n        {\\n            return head1; // from here simply return head1\\n        }\\n            \\n        ListNode* temp; // temp pointer to make links\\n        \\n            if(head1 -> val <= head2 -> val) // if head1 <= head2\\n            {\\n                temp = head1; // put head1 in our answer\\n                \\n                          // and now move our head1 \\n                temp -> next = merge(head1 -> next, head2);\\n                \\n            }\\n            else // else\\n            {\\n                temp = head2; // put head in our answer\\n                \\n                                  // and now move our head2\\n                temp -> next = merge(head1, head2 -> next);\\n            }\\n        \\n        return temp; // finally return temp\\n    }\\n    \\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if(l1 == NULL && l2 == NULL) // if both the list are NULL\\n        {\\n            return NULL;\\n        }\\n            \\n        if(l1 == NULL) // if l1 is NULL, then return l2\\n        {\\n            return l2;\\n        }\\n            \\n        if(l2 == NULL) // if l2 is NULL, then return l1\\n        {\\n            return l1;\\n        }\\n            \\n        // else, merge them and return final answer\\n        return merge(l1,l2);\\n    }\\n};\\n```\\n***`If u find this useful , please consider to give a upvote!!`***",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nLet\\'s take an example not given in question -\\nSuppose our two linked list given to us as: list1 = [3,5,6,7], list2 = [8,9,16,34]\\n\\nSo, the final answer should look like [3,5,6,7,8,9,16,34]\\n```\n```\\nSuppose our two linked list given to us as: list1 = [1,2,4], list2 = [1,3,4]\\n\\n                            \\u2193(head1)\\nso, list1 is represented as 1 --> 2 --> 4\\n\\nand list2 is represented as 1 --> 3 --> 4\\n                            \\u2191(head2)\\n\\narrows represent the intial symbol of heads,\\nnow we comapare both heads,\\n\\nso if(head1 <= head2) i.e (1 <= 1) \\ncondition true, so we put head1 in our answer and move forward our head1,\\n          so, our answer looks like ans[]: 1 --> \\n\\nnow, our linked list look like-\\n                                  \\u2193(head1)\\nso, list1 is represented as 1 --> 2 --> 4\\n\\nand list2 is represented as 1 --> 3 --> 4\\n                            \\u2191(head2)\\n\\nnow again we comapre if(head1 <= head2) i.e (2 <= 1)\\ncondition false, so we put head2 in our answer and move forward our head2,\\n          so, our answer looks like ans[]: 1 --> 1 -->\\n\\nnow, our linked list look like-\\n                                  \\u2193(head1)\\nso, list1 is represented as 1 --> 2 --> 4\\n\\nand list2 is represented as 1 --> 3 --> 4\\n                                  \\u2191(head2)\\n\\nnow again we comapre if(head1 <= head2) i.e (2 <= 3)\\ncondition true, so we put head1 in our answer and move forward our head1,\\n          so, our answer looks like ans[]: 1 --> 1 --> 2 -->\\n\\t\\t  \\nnow, our linked list look like-\\n                                        \\u2193(head1)\\nso, list1 is represented as 1 --> 2 --> 4\\n\\nand list2 is represented as 1 --> 3 --> 4\\n                                  \\u2191(head2)\\n\\t\\t\\t\\t\\t\\t\\t\\t  \\nnow again we comapre if(head1 <= head2) i.e (4 <= 3)\\ncondition false, so we put head2 in our answer and move forward our head2,\\n          so, our answer looks like ans[]: 1 --> 1 --> 2 --> 3 -->\\n\\t\\t  \\nnow, our linked list look like-\\n                                        \\u2193(head1)\\nso, list1 is represented as 1 --> 2 --> 4\\n\\nand list2 is represented as 1 --> 3 --> 4\\n                                        \\u2191(head2)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\nnow again we comapre if(head1 <= head2) i.e (4 <= 4)\\ncondition true, so we put head1 in our answer and move forward our head1,\\n          so, our answer looks like ans[]: 1 --> 1 --> 2 --> 3 --> 4 -->\\n\\t\\t  \\n\\t\\t  but now, we can\\'t move forward our head1 as it is already on NULL.\\n\\t\\t  so simply we just put our remaining head2 in our answer.\\n\\t\\t  \\n\\t\\t  Therefore, our answer looks like ans[]: 1 --> 1 --> 2 --> 3 --> 4 --> 4\\n\\t\\t  \\nI hope you will get the concept, now let\\'s move to the code area.\\n```\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* merge(ListNode* head1, ListNode* head2)\\n    {\\n        if(head1 == NULL) // if head1 becomes null, means if it stands on last position\\n        {\\n            return head2; // from here simply return head2\\n        }\\n            \\n        if(head2 == NULL) // if head2 becomes null, means if it stands on last position\\n        {\\n            return head1; // from here simply return head1\\n        }\\n            \\n        ListNode* temp; // temp pointer to make links\\n        \\n            if(head1 -> val <= head2 -> val) // if head1 <= head2\\n            {\\n                temp = head1; // put head1 in our answer\\n                \\n                          // and now move our head1 \\n                temp -> next = merge(head1 -> next, head2);\\n                \\n            }\\n            else // else\\n            {\\n                temp = head2; // put head in our answer\\n                \\n                                  // and now move our head2\\n                temp -> next = merge(head1, head2 -> next);\\n            }\\n        \\n        return temp; // finally return temp\\n    }\\n    \\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if(l1 == NULL && l2 == NULL) // if both the list are NULL\\n        {\\n            return NULL;\\n        }\\n            \\n        if(l1 == NULL) // if l1 is NULL, then return l2\\n        {\\n            return l2;\\n        }\\n            \\n        if(l2 == NULL) // if l2 is NULL, then return l1\\n        {\\n            return l1;\\n        }\\n            \\n        // else, merge them and return final answer\\n        return merge(l1,l2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1438504,
                "title": "c-solution-0ms",
                "content": "```\\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\\n    struct ListNode* res=NULL;\\n    if(l1==NULL)\\n        return l2;\\n    else if(l2==NULL)\\n        return l1;\\n    if(l1->val <= l2->val){\\n        res=l1;\\n        res->next = mergeTwoLists(l1->next,l2);\\n    }\\n    else{\\n        res=l2;\\n       res->next = mergeTwoLists(l1,l2->next);\\n    }\\n    return res;\\n        \\n    \\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\\n    struct ListNode* res=NULL;\\n    if(l1==NULL)\\n        return l2;\\n    else if(l2==NULL)\\n        return l1;\\n    if(l1->val <= l2->val){\\n        res=l1;\\n        res->next = mergeTwoLists(l1->next,l2);\\n    }\\n    else{\\n        res=l2;\\n       res->next = mergeTwoLists(l1,l2->next);\\n    }\\n    return res;\\n        \\n    \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1131818,
                "title": "javascript-faster-than-100",
                "content": "![image](https://assets.leetcode.com/users/images/06766533-6128-4583-a5bb-985f32d90a40_1616963517.9524837.png)\\n\\n```\\nvar mergeTwoLists = function(l1, l2) {\\n    let tempNode = new ListNode(0, null);\\n    let currentNode = tempNode;\\n    \\n    while (l1 && l2) {\\n        if(l1.val < l2.val) {\\n            currentNode.next = l1;\\n            l1 = l1.next\\n        } else {\\n            currentNode.next = l2;\\n            l2 = l2.next\\n        }\\n        currentNode = currentNode.next;\\n    }\\n    currentNode.next = l1 || l2;\\n    \\n    return tempNode.next;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar mergeTwoLists = function(l1, l2) {\\n    let tempNode = new ListNode(0, null);\\n    let currentNode = tempNode;\\n    \\n    while (l1 && l2) {\\n        if(l1.val < l2.val) {\\n            currentNode.next = l1;\\n            l1 = l1.next\\n        } else {\\n            currentNode.next = l2;\\n            l2 = l2.next\\n        }\\n        currentNode = currentNode.next;\\n    }\\n    currentNode.next = l1 || l2;\\n    \\n    return tempNode.next;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 803976,
                "title": "java-clean-and-concise",
                "content": "* **please UpvOte ifhelPFul!!**\\n\\n\\n```\\npublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n\\n        ListNode dummy = new ListNode(-10);\\n        ListNode head = dummy;\\n\\n        while (l1 != null && l2 != null) {\\n\\n            if (l1.val < l2.val) {\\n                head.next = l1;\\n                l1 = l1.next;\\n            } else {\\n                head.next = l2;\\n                l2 = l2.next;\\n            }\\n\\n            head = head.next;\\n\\n        }\\n\\n// this cases are present when the two lists are not equal there will be leftOver elements.\\n        if (l1 != null) {\\n            head.next = l1;\\n        }\\n\\n        if (l2 != null) {\\n            head.next = l2;\\n        }\\n\\n        return dummy.next;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n\\n        ListNode dummy = new ListNode(-10);\\n        ListNode head = dummy;\\n\\n        while (l1 != null && l2 != null) {\\n\\n            if (l1.val < l2.val) {\\n                head.next = l1;\\n                l1 = l1.next;\\n            } else {\\n                head.next = l2;\\n                l2 = l2.next;\\n            }\\n\\n            head = head.next;\\n\\n        }\\n\\n// this cases are present when the two lists are not equal there will be leftOver elements.\\n        if (l1 != null) {\\n            head.next = l1;\\n        }\\n\\n        if (l2 != null) {\\n            head.next = l2;\\n        }\\n\\n        return dummy.next;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 618937,
                "title": "ruby-beats-80-with-explanation-recursion",
                "content": "1. So if we think about this problem recursively, at each step, we can compare the fronts of the lists and figure out which should be in front.\\n2. We then know that whatever comes after that front node, is the rest of the list merged, so it\\'s time for our recursive call. \\n3. Each time, we append the call to end of that point and return that point, connecting to the previous\\n4. The base case is for when we eventually run out of comparisons\\n\\n```\\ndef merge_two_lists(l1, l2)\\n    return l2 if l1.nil? \\n    return l1 if l2.nil?\\n    if l1.val < l2.val\\n        l1.next = merge_two_lists(l1.next, l2)\\n        return l1\\n    else\\n        l2.next = merge_two_lists(l1, l2.next)\\n        return l2\\n    end\\nend\\n```",
                "solutionTags": [
                    "Ruby",
                    "Recursion"
                ],
                "code": "```\\ndef merge_two_lists(l1, l2)\\n    return l2 if l1.nil? \\n    return l1 if l2.nil?\\n    if l1.val < l2.val\\n        l1.next = merge_two_lists(l1.next, l2)\\n        return l1\\n    else\\n        l2.next = merge_two_lists(l1, l2.next)\\n        return l2\\n    end\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 594164,
                "title": "0-ms-faster-than-100-00",
                "content": "```\\npublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n    if(l1==null) return l2;\\n    if(l2==null) return l1;\\n\\n    if(l1.val<=l2.val){\\n        l1.next=mergeTwoLists(l1.next, l2);\\n        return l1;\\n    } else {\\n        l2.next=mergeTwoLists(l1, l2.next);\\n        return l2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Linked List",
                    "Recursion"
                ],
                "code": "```\\npublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n    if(l1==null) return l2;\\n    if(l2==null) return l1;\\n\\n    if(l1.val<=l2.val){\\n        l1.next=mergeTwoLists(l1.next, l2);\\n        return l1;\\n    } else {\\n        l2.next=mergeTwoLists(l1, l2.next);\\n        return l2;\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3501697,
                "title": "easy-recursive-solution",
                "content": "\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==NULL) return list2;\\n        if(list2==NULL) return list1;\\n\\n        if((list1->val)<(list2->val))\\n        {\\n            list1->next = mergeTwoLists(list1->next,list2);\\n            return list1;\\n        }\\n        else \\n        {\\n            list2->next = mergeTwoLists(list1,list2->next);\\n            return list2;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==NULL) return list2;\\n        if(list2==NULL) return list1;\\n\\n        if((list1->val)<(list2->val))\\n        {\\n            list1->next = mergeTwoLists(list1->next,list2);\\n            return list1;\\n        }\\n        else \\n        {\\n            list2->next = mergeTwoLists(list1,list2->next);\\n            return list2;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2715864,
                "title": "rust-no-allocations-annotated",
                "content": "Took me a while to understand [this brilliant solution](https://leetcode.com/problems/merge-two-sorted-lists/discuss/1185232/rust-no-allocations). I annotated it for future reference.\\n\\n```\\nimpl Solution {\\n   pub fn merge_two_lists(\\n        mut a_ptr: Option<Box<ListNode>>,\\n        mut b_ptr: Option<Box<ListNode>>,\\n    ) -> Option<Box<ListNode>> {\\n        use std::mem;\\n        \\n        // We create two vars which are pointing to the same place in memory. While `ptr` will be continuously updated, \\n        // `head` will not and will keep pointing to the location of the first node.\\n        let mut head = None;\\n        let mut ptr = &mut head;\\n\\n        while a_ptr.is_some() && b_ptr.is_some() {\\n            let ap = &mut a_ptr;\\n            let bp = &mut b_ptr;\\n            \\n            // We set `tmp` to point to the next target node we want to append.\\n            let mut tmp = if bp.as_ref().unwrap().val > ap.as_ref().unwrap().val { ap } else { bp };\\n\\n            // We swap the data in `ptr` (the currently built up list) and the data in `tmp` (the next target node), moving the \\n            // currently built up list to `tmp`. `ptr` now points to the next target node.\\n            mem::swap(ptr, &mut tmp);\\n            \\n            // We swap the data in `tmp` (the currently built up list) with the data of `ptr.next`, effectively clipping\\n            // off the target node\\'s tail. `tmp` now holds the tail, `ptr.next` now (only) holds the next target node.\\n            mem::swap(tmp, &mut ptr.as_mut().unwrap().next);\\n            \\n            // All the while, we only swapped what was held in memory, not what the variables were pointing to. We now move\\n            // the cursor along to its current `next`, the target node that we just appended.\\n            ptr = &mut ptr.as_mut().unwrap().next;\\n        }\\n\\n        mem::swap(ptr, if a_ptr.is_none() { &mut b_ptr } else { &mut a_ptr });\\n\\n        head\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n   pub fn merge_two_lists(\\n        mut a_ptr: Option<Box<ListNode>>,\\n        mut b_ptr: Option<Box<ListNode>>,\\n    ) -> Option<Box<ListNode>> {\\n        use std::mem;\\n        \\n        // We create two vars which are pointing to the same place in memory. While `ptr` will be continuously updated, \\n        // `head` will not and will keep pointing to the location of the first node.\\n        let mut head = None;\\n        let mut ptr = &mut head;\\n\\n        while a_ptr.is_some() && b_ptr.is_some() {\\n            let ap = &mut a_ptr;\\n            let bp = &mut b_ptr;\\n            \\n            // We set `tmp` to point to the next target node we want to append.\\n            let mut tmp = if bp.as_ref().unwrap().val > ap.as_ref().unwrap().val { ap } else { bp };\\n\\n            // We swap the data in `ptr` (the currently built up list) and the data in `tmp` (the next target node), moving the \\n            // currently built up list to `tmp`. `ptr` now points to the next target node.\\n            mem::swap(ptr, &mut tmp);\\n            \\n            // We swap the data in `tmp` (the currently built up list) with the data of `ptr.next`, effectively clipping\\n            // off the target node\\'s tail. `tmp` now holds the tail, `ptr.next` now (only) holds the next target node.\\n            mem::swap(tmp, &mut ptr.as_mut().unwrap().next);\\n            \\n            // All the while, we only swapped what was held in memory, not what the variables were pointing to. We now move\\n            // the cursor along to its current `next`, the target node that we just appended.\\n            ptr = &mut ptr.as_mut().unwrap().next;\\n        }\\n\\n        mem::swap(ptr, if a_ptr.is_none() { &mut b_ptr } else { &mut a_ptr });\\n\\n        head\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2260448,
                "title": "python-descriptive-solution",
                "content": "```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        \"\"\"\\n        :type list1: Optional[ListNode]\\n        :type list2: Optional[ListNode]\\n        :rtype: Optional[ListNode]\\n        \"\"\"\\n        # initiating empty linked list, notice if no arguments given to ListNode(), it starts a blank linked list with 0 value and next = None\\n        merged_list = ListNode()\\n        # referrencing the merged_list into res, so that we can book-keep the initiation pointer of linked list\\n        res = merged_list\\n        # we compare both linked list until one of them terminates\\n        while list1 and list2:\\n            \\n            # comparing the values of linked lists at current pointers\\n            if list1.val <= list2.val:\\n                # if list1 value is lower or equal, we referrence the list1 as merged_list next pointer.\\n                merged_list.next = list1\\n                # we transverse through list1 by 1 step to check the next element, just like an array\\n                list1 = list1.next\\n            else:\\n                # in else case, we referrence the list 2 as merged_list next pointer.\\n                merged_list.next = list2\\n                # transversing through list2 by 1 step to check the next element, like in if condition.\\n                list2 = list2.next\\n            # moving the merged_list to merged_list.next pointer, to add more elements subsequently.\\n            merged_list = merged_list.next\\n            \\n        # since we did the above till one of the linked list ends, we referrence the next head of other linked list as next pointer to merged_list.\\n        # Notice that we only need to do it once, because the linked list would transverse on itself, once given pointer.\\n        if list1 or list2:\\n            merged_list.next = list1 if list1 else list2\\n            \\n        # We\\'re returning the next pointer of res, notice that our actual head of res and merged_list was initiation node of value 0 and it\\'s next pointer is pointing to start of our merged linked list.\\n        return res.next\\n```",
                "solutionTags": [
                    "Python",
                    "Linked List"
                ],
                "code": "```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        \"\"\"\\n        :type list1: Optional[ListNode]\\n        :type list2: Optional[ListNode]\\n        :rtype: Optional[ListNode]\\n        \"\"\"\\n        # initiating empty linked list, notice if no arguments given to ListNode(), it starts a blank linked list with 0 value and next = None\\n        merged_list = ListNode()\\n        # referrencing the merged_list into res, so that we can book-keep the initiation pointer of linked list\\n        res = merged_list\\n        # we compare both linked list until one of them terminates\\n        while list1 and list2:\\n            \\n            # comparing the values of linked lists at current pointers\\n            if list1.val <= list2.val:\\n                # if list1 value is lower or equal, we referrence the list1 as merged_list next pointer.\\n                merged_list.next = list1\\n                # we transverse through list1 by 1 step to check the next element, just like an array\\n                list1 = list1.next\\n            else:\\n                # in else case, we referrence the list 2 as merged_list next pointer.\\n                merged_list.next = list2\\n                # transversing through list2 by 1 step to check the next element, like in if condition.\\n                list2 = list2.next\\n            # moving the merged_list to merged_list.next pointer, to add more elements subsequently.\\n            merged_list = merged_list.next\\n            \\n        # since we did the above till one of the linked list ends, we referrence the next head of other linked list as next pointer to merged_list.\\n        # Notice that we only need to do it once, because the linked list would transverse on itself, once given pointer.\\n        if list1 or list2:\\n            merged_list.next = list1 if list1 else list2\\n            \\n        # We\\'re returning the next pointer of res, notice that our actual head of res and merged_list was initiation node of value 0 and it\\'s next pointer is pointing to start of our merged linked list.\\n        return res.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1580865,
                "title": "simple-java-0ms-100-faster",
                "content": "```\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        ListNode node = new ListNode();\\n        ListNode head = node;\\n        while (l1!=null && l2!=null){\\n            if(l1.val<=l2.val){\\n                node.next = l1;\\n                l1 = l1.next;\\n            } else {\\n                node.next = l2;\\n                l2 = l2.next;\\n            }\\n            node = node.next;\\n        }\\n        \\n        if(l1 != null){\\n            node.next = l1;\\n        }\\n        if(l2 != null){\\n            node.next = l2;\\n        }\\n        return head.next;\\n    }\\n}\\n```\\n\\nUpvote if you understood!!\\nThanks in advance",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        ListNode node = new ListNode();\\n        ListNode head = node;\\n        while (l1!=null && l2!=null){\\n            if(l1.val<=l2.val){\\n                node.next = l1;\\n                l1 = l1.next;\\n            } else {\\n                node.next = l2;\\n                l2 = l2.next;\\n            }\\n            node = node.next;\\n        }\\n        \\n        if(l1 != null){\\n            node.next = l1;\\n        }\\n        if(l2 != null){\\n            node.next = l2;\\n        }\\n        return head.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1508717,
                "title": "python-8-lines-with-comments",
                "content": "```\\ndef mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        if not l1 and not l2:  # If both lists empty - return None\\n            return None\\n        if not l1 or not l2:  # If one of the lists empty - return the other list\\n            return l1 or l2\\n        if l1.val < l2.val:  # If first ll val is lower - return new Node with this value and recursively merge ll\\'s without first element in first ll \\n            return ListNode(val=l1.val, next=self.mergeTwoLists(l1.next, l2))\\n        else:  #  If second ll val lower or equal - same step as before, but without first element in second ll\\n            return ListNode(val=l2.val, next=self.mergeTwoLists(l1, l2.next))\\n```",
                "solutionTags": [
                    "Python",
                    "Recursion"
                ],
                "code": "```\\ndef mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        if not l1 and not l2:  # If both lists empty - return None\\n            return None\\n        if not l1 or not l2:  # If one of the lists empty - return the other list\\n            return l1 or l2\\n        if l1.val < l2.val:  # If first ll val is lower - return new Node with this value and recursively merge ll\\'s without first element in first ll \\n            return ListNode(val=l1.val, next=self.mergeTwoLists(l1.next, l2))\\n        else:  #  If second ll val lower or equal - same step as before, but without first element in second ll\\n            return ListNode(val=l2.val, next=self.mergeTwoLists(l1, l2.next))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1285353,
                "title": "simplest-c-solution-easy-to-understand",
                "content": "* **Recursive approach.**\\n```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2)\\n    {\\n        if(l1 == NULL)\\n        {\\n            return l2;\\n        }\\n        if(l2 == NULL)\\n        {\\n            return l1;\\n        }\\n        \\n        if(l1->val <= l2->val)\\n        {\\n            l1->next = mergeTwoLists(l1->next, l2);\\n            return l1;\\n        }\\n        else\\n        {\\n            l2->next = mergeTwoLists(l1, l2->next);\\n            return l2;\\n        }\\n    }\\n};\\n```\\n**Like the solution?\\nPlease upvote \\u30C4**\\n\\nIf you can\\'t understand any step/point, feel free to comment.\\nHappy to help.",
                "solutionTags": [
                    "C++",
                    "C",
                    "Linked List",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2)\\n    {\\n        if(l1 == NULL)\\n        {\\n            return l2;\\n        }\\n        if(l2 == NULL)\\n        {\\n            return l1;\\n        }\\n        \\n        if(l1->val <= l2->val)\\n        {\\n            l1->next = mergeTwoLists(l1->next, l2);\\n            return l1;\\n        }\\n        else\\n        {\\n            l2->next = mergeTwoLists(l1, l2->next);\\n            return l2;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 399328,
                "title": "rust-solution-use-iteration",
                "content": "I am new to the rust and this problem took me serveral hours to solve the ownership compile errors.\\nI looked some solutions using recursion to avoid ownership issues, the soltuion is very beatiful but rust does\\'t support tail call optimization until now. So I think iteration solution is also practical and useful.\\nBelow is my solution, it use iteration and is very much like other language solution:\\n```rust\\npub fn merge_two_lists(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        let mut result_head = Box::new(ListNode::new(0));\\n        let mut current_head = &mut result_head;\\n        let mut l1_current = l1;\\n        let mut l2_current = l2;\\n\\n\\n        while l1_current.is_some() && l2_current.is_some() {\\n            // tick here, take content and ownership from l1_current and l2_current, leave l1_current = None, l2_current = None,  l1_current and l2_current must be available after this while block\\n            let mut l1_d = l1_current.take();\\n            let mut l2_d = l2_current.take();\\n            if let (Some(mut l1_head), Some(mut l2_head)) = (l1_d, l2_d) {\\n                if l1_head.val <= l2_head.val {\\n                    l1_current = l1_head.next.take();\\n                    // reassign l2_current to get back it\\'s content\\n                    l2_current = Some(l2_head);\\n                    current_head = current_head.next.get_or_insert(l1_head);\\n                } else {\\n                    l2_current = l2_head.next.take();\\n                    l1_current = Some(l1_head);\\n                    current_head = current_head.next.get_or_insert(l2_head);\\n                }\\n            }\\n        }\\n        if l1_current.is_some() {\\n            current_head.next = l1_current;\\n        }\\n        if l2_current.is_some() {\\n            current_head.next = l2_current;\\n        }\\n\\n        return result_head.next;\\n    }\\n```",
                "solutionTags": [],
                "code": "```rust\\npub fn merge_two_lists(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        let mut result_head = Box::new(ListNode::new(0));\\n        let mut current_head = &mut result_head;\\n        let mut l1_current = l1;\\n        let mut l2_current = l2;\\n\\n\\n        while l1_current.is_some() && l2_current.is_some() {\\n            // tick here, take content and ownership from l1_current and l2_current, leave l1_current = None, l2_current = None,  l1_current and l2_current must be available after this while block\\n            let mut l1_d = l1_current.take();\\n            let mut l2_d = l2_current.take();\\n            if let (Some(mut l1_head), Some(mut l2_head)) = (l1_d, l2_d) {\\n                if l1_head.val <= l2_head.val {\\n                    l1_current = l1_head.next.take();\\n                    // reassign l2_current to get back it\\'s content\\n                    l2_current = Some(l2_head);\\n                    current_head = current_head.next.get_or_insert(l1_head);\\n                } else {\\n                    l2_current = l2_head.next.take();\\n                    l1_current = Some(l1_head);\\n                    current_head = current_head.next.get_or_insert(l2_head);\\n                }\\n            }\\n        }\\n        if l1_current.is_some() {\\n            current_head.next = l1_current;\\n        }\\n        if l2_current.is_some() {\\n            current_head.next = l2_current;\\n        }\\n\\n        return result_head.next;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 9882,
                "title": "simple-solution-yet-still-the-best-in-c-8ms",
                "content": "```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) \\n    {\\n        ListNode newHead(0), *t;\\n        t = &newHead;\\n        while(l1 || l2)\\n        {\\n            if(!l2) { t->next = l1; break; }\\n            else if(!l1) { t->next = l2; break; }\\n            else if(l1->val < l2->val) \\n            {\\n                t->next = l1;\\n                l1 = l1->next;\\n            }\\n            else\\n            {\\n                t->next = l2;\\n                l2 = l2->next;\\n            }\\n            t = t->next;\\n        }\\n        return newHead.next;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) \\n    {\\n        ListNode newHead(0), *t;\\n        t = &newHead;\\n        while(l1 || l2)\\n        {\\n            if(!l2) { t->next = l1; break; }\\n            else if(!l1) { t->next = l2; break; }\\n            else if(l1->val < l2->val) \\n            {\\n                t->next = l1;\\n                l1 = l1->next;\\n            }\\n            else\\n            {\\n                t->next = l2;\\n                l2 = l2->next;\\n            }\\n            t = t->next;\\n        }\\n        return newHead.next;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 9768,
                "title": "java-easy-to-understand-solution",
                "content": "    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        ListNode ans = new ListNode(0);\\n        ListNode prev = ans;\\n        while(l1 != null && l2 != null){\\n            if(l1.val > l2.val){\\n                prev.next = l2;\\n                l2 = l2.next;\\n            } else{\\n                prev.next = l1;\\n                l1 = l1.next;\\n            }\\n            prev = prev.next;\\n        }\\n        if(l2 == null){\\n            prev.next = l1;\\n        } else {\\n            prev.next = l2;\\n        }\\n        return ans.next;\\n    }",
                "solutionTags": [],
                "code": "    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        ListNode ans = new ListNode(0);\\n        ListNode prev = ans;\\n        while(l1 != null && l2 != null){\\n            if(l1.val > l2.val){\\n                prev.next = l2;\\n                l2 = l2.next;\\n            } else{\\n                prev.next = l1;\\n                l1 = l1.next;\\n            }\\n            prev = prev.next;\\n        }\\n        if(l2 == null){\\n            prev.next = l1;\\n        } else {\\n            prev.next = l2;\\n        }\\n        return ans.next;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 9918,
                "title": "recursive-java-solution-using-linkedlist",
                "content": "     public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n\\n        ListNode start;\\n        if(l1 == null)\\n        return l2;\\n        if(l2 == null)\\n        return l1;\\n        if(l1.val < l2.val){\\n            start = l1;\\n            start.next = mergeTwoLists(l1.next, l2);\\n        }\\n        else{\\n            start = l2;\\n            start.next = mergeTwoLists(l1, l2.next);\\n        }\\n        return start;\\n    }",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "     public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n\\n        ListNode start;\\n        if(l1 == null)\\n        return l2;\\n        if(l2 == null)\\n        return l1;\\n        if(l1.val < l2.val){\\n            start = l1;\\n            start.next = mergeTwoLists(l1.next, l2);\\n        }\\n        else{\\n            start = l2;\\n            start.next = mergeTwoLists(l1, l2.next);\\n        }\\n        return start;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 9969,
                "title": "5-lines-in-ruby",
                "content": "    def merge_two_lists(l1,l2)\\n      return l1 if not l2\\n      return l2 if not l1\\n      l1,l2 = l2, l1 if l1.val > l2.val  ## swap\\n      l1.next=merge_two_lists(l1.next,l2)\\n      l1\\n    end",
                "solutionTags": [],
                "code": "    def merge_two_lists(l1,l2)\\n      return l1 if not l2\\n      return l2 if not l1\\n      l1,l2 = l2, l1 if l1.val > l2.val  ## swap\\n      l1.next=merge_two_lists(l1.next,l2)\\n      l1\\n    end",
                "codeTag": "Python3"
            },
            {
                "id": 3170346,
                "title": "js-commented-code",
                "content": "# Intuition\\nCreate new linked list. Use a pointer for the new linked list, list1 head, and list2 head. Loop while both lists are not null (has not reached the end). On each iteration, find the lower value and set it to the next current node, increment that lower value list. increment the new linked list each iteration. See notes in the code for better way to visualize.\\n\\n# Complexity\\n- Time complexity:\\nO(min(m,n)) where m is the number of nodes in the first list and n the number of nodes in the second list. This is because we stop looping and attach remaining nodes to the end of the longer linked list to the end of the shorter linked list.\\n\\n- Space complexity:\\nO(m + n) the total number of nodes between the two linked lists, m and n.\\n\\n# Code\\n```\\nconst mergeTwoLists = (list1, list2) => {\\n    // initialize new linked list\\n    let head = new ListNode(null)\\n\\n    // new pointer\\n    let current = head\\n\\n    // loop while both lists are not null (did not reach end)\\n    while (list1 && list2) {\\n\\n        // check which val is lower and point current to it\\n        // move the pointer on the lower list \\n        if (list1.val <= list2.val){\\n            current.next = list1\\n            list1 = list1.next\\n        } else {\\n            current.next = list2\\n            list2 = list2.next\\n        }\\n\\n        // move the current pointer\\n        current = current.next\\n    }\\n\\n    // determine which node is not null\\n    let remaining = list1 || list2\\n\\n    // set current to the remaining list\\n    current.next = remaining\\n\\n\\n    // return next because head was initialized to null\\n    return head.next\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst mergeTwoLists = (list1, list2) => {\\n    // initialize new linked list\\n    let head = new ListNode(null)\\n\\n    // new pointer\\n    let current = head\\n\\n    // loop while both lists are not null (did not reach end)\\n    while (list1 && list2) {\\n\\n        // check which val is lower and point current to it\\n        // move the pointer on the lower list \\n        if (list1.val <= list2.val){\\n            current.next = list1\\n            list1 = list1.next\\n        } else {\\n            current.next = list2\\n            list2 = list2.next\\n        }\\n\\n        // move the current pointer\\n        current = current.next\\n    }\\n\\n    // determine which node is not null\\n    let remaining = list1 || list2\\n\\n    // set current to the remaining list\\n    current.next = remaining\\n\\n\\n    // return next because head was initialized to null\\n    return head.next\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3088798,
                "title": "java-c-100-solution-using-recursion-merge-two-sorted-lists",
                "content": "# Complexity\\n- Time complexity: $$O(n*m)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n*m)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```Java []\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if(list1!=null && list2!=null)\\n        {\\n            if(list1.val < list2.val)\\n            {\\n                list1.next =  mergeTwoLists(list1.next,list2);\\n                return list1;\\n            }\\n            else\\n            {\\n                list2.next = mergeTwoLists(list1,list2.next);\\n                return list2;\\n            }\\n        }\\n        if(list1 == null)\\n            return list2;\\n        return list1;   \\n    }\\n}\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1 && list2)\\n        {\\n            if(list1->val < list2->val)\\n            {\\n                list1->next =  mergeTwoLists(list1->next,list2);\\n                return list1;\\n            }\\n            else\\n            {\\n                list2->next = mergeTwoLists(list1,list2->next);\\n                return list2;\\n            }\\n        }\\n        if(list1 == NULL)\\n            return list2;\\n        return list1;        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Linked List",
                    "Recursion"
                ],
                "code": "```Java []\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if(list1!=null && list2!=null)\\n        {\\n            if(list1.val < list2.val)\\n            {\\n                list1.next =  mergeTwoLists(list1.next,list2);\\n                return list1;\\n            }\\n            else\\n            {\\n                list2.next = mergeTwoLists(list1,list2.next);\\n                return list2;\\n            }\\n        }\\n        if(list1 == null)\\n            return list2;\\n        return list1;   \\n    }\\n}\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1 && list2)\\n        {\\n            if(list1->val < list2->val)\\n            {\\n                list1->next =  mergeTwoLists(list1->next,list2);\\n                return list1;\\n            }\\n            else\\n            {\\n                list2->next = mergeTwoLists(list1,list2->next);\\n                return list2;\\n            }\\n        }\\n        if(list1 == NULL)\\n            return list2;\\n        return list1;        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2721588,
                "title": "diagram-with-explanation-very-easy-solution",
                "content": "**Explanation**\\nHere we initialise two Linked List, one cur and another result with 0.\\nWe use cur to connect all the nodes of two list in sorted way. The result is only use to remember the head of cur List.\\nCur list not just take one node, instead it simply merges the whole list l1 or l2 and then increase the pointer.\\n```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        # iteratively\\n        result = cur = ListNode(0)\\n        l1=list1\\n        l2=list2\\n        while l1 and l2:\\n            if l1.val < l2.val:\\n                cur.next = l1\\n                l1 = l1.next\\n            else:\\n                cur.next = l2\\n                l2 = l2.next\\n            cur = cur.next\\n        cur.next = l1 or l2\\n        return result.next\\n\\n```\\n![image](https://assets.leetcode.com/users/images/a82f8fdf-5a6e-4164-b31f-1e1fed4ba39b_1666175105.6723633.jpeg)\\n![image](https://assets.leetcode.com/users/images/74f032d2-a707-4289-ae01-d1b15e991409_1666175105.8362484.jpeg)\\n![image](https://assets.leetcode.com/users/images/798b6c94-bd92-4864-a8c9-6bc3223db4c6_1666175113.847507.jpeg)\\n![image](https://assets.leetcode.com/users/images/a471a6e2-7138-48cc-8423-29aa17dc480f_1666175125.083669.jpeg)\\n\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        # iteratively\\n        result = cur = ListNode(0)\\n        l1=list1\\n        l2=list2\\n        while l1 and l2:\\n            if l1.val < l2.val:\\n                cur.next = l1\\n                l1 = l1.next\\n            else:\\n                cur.next = l2\\n                l2 = l2.next\\n            cur = cur.next\\n        cur.next = l1 or l2\\n        return result.next\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1827029,
                "title": "java-most-easy-solution",
                "content": "\\n\\n    class Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n       if(list1 == null){\\n           return list2;\\n       }\\n        if(list2==null){\\n            return list1;\\n        }\\n        if(list1.val<list2.val){\\n            list1.next = mergeTwoLists(list1.next , list2);\\n            return list1;\\n        }\\n        else{\\n            list2.next = mergeTwoLists(list2.next , list1);\\n        }\\n          return list2;\\n      }\\n    }\\n",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "class Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n       if(list1 == null){\\n           return list2;\\n       }",
                "codeTag": "Java"
            },
            {
                "id": 1604256,
                "title": "python-solution-with-explanation",
                "content": "```\\n######################################################\\n\\n#   Runtime: 28ms   -   98.39%\\n#   Memory: 14.2MB  -   86.69%\\n\\n######################################################\\n\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        # Dummy node to point to the sorted list\\n        head = ListNode()\\n        # Temporary pointer which moves to next empty slot where we should add next\\n        # node\\n        pointer = head\\n        # While either of lists are not empty\\n        while list1 != None and list2 != None:\\n            # If list1.val < list2.val, we add list1 node to pointer.next and\\n            # we move list1 to next node\\n            if list1.val < list2.val: \\n                pointer.next = list1\\n                list1 = list1.next\\n            # If list2.val < list1.val, we add list2 node to pointer.next and\\n            # we move list2 to next node\\n            else:\\n                pointer.next = list2\\n                list2 = list2.next\\n            # Moving pointer to next node\\n            pointer = pointer.next\\n        \\n        # If there are still some nodes in list1, that means we break out of loop\\n        # because, list2 became empty, so we directly point pointer.next to list1\\n        # which is the first node of remaining elements of list1\\n        if list1 != None: pointer.next = list1\\n        # If there are still some nodes in list2, that means we break out of loop\\n        # because, list1 became empty, so we directly point pointer.next to list2\\n        # which is the first node of remaining elements of list2\\n        if list2 != None: pointer.next = list2\\n        \\n        # Since, head node is a dummy node which points to sorted list, we return\\n        # next node of head i.e; head.next  \\n        return head.next\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n######################################################\\n\\n#   Runtime: 28ms   -   98.39%\\n#   Memory: 14.2MB  -   86.69%\\n\\n######################################################\\n\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        # Dummy node to point to the sorted list\\n        head = ListNode()\\n        # Temporary pointer which moves to next empty slot where we should add next\\n        # node\\n        pointer = head\\n        # While either of lists are not empty\\n        while list1 != None and list2 != None:\\n            # If list1.val < list2.val, we add list1 node to pointer.next and\\n            # we move list1 to next node\\n            if list1.val < list2.val: \\n                pointer.next = list1\\n                list1 = list1.next\\n            # If list2.val < list1.val, we add list2 node to pointer.next and\\n            # we move list2 to next node\\n            else:\\n                pointer.next = list2\\n                list2 = list2.next\\n            # Moving pointer to next node\\n            pointer = pointer.next\\n        \\n        # If there are still some nodes in list1, that means we break out of loop\\n        # because, list2 became empty, so we directly point pointer.next to list1\\n        # which is the first node of remaining elements of list1\\n        if list1 != None: pointer.next = list1\\n        # If there are still some nodes in list2, that means we break out of loop\\n        # because, list1 became empty, so we directly point pointer.next to list2\\n        # which is the first node of remaining elements of list2\\n        if list2 != None: pointer.next = list2\\n        \\n        # Since, head node is a dummy node which points to sorted list, we return\\n        # next node of head i.e; head.next  \\n        return head.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1001708,
                "title": "python-go-java-js-c-o-m-n-simple-recursion-w-comment",
                "content": "[Tutorial video in Chinese [\\u4E2D\\u6587\\u89E3\\u984C\\u5F71\\u7247]](https://www.youtube.com/watch?v=yTxbH8q2c6Q)\\n\\nsimple recursion with definition\\n\\n---\\n**Implementation** in **python**\\n\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\n\\n\\nclass Solution:\\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        \\n        ## Base cases aka stop condition\\n        \\n        if not l1 and not l2:\\n            # both l1 and l2 are empty list\\n            return None\\n        \\n        elif not l1:\\n            # l1 is empty, directly return l2\\n            return l2\\n        \\n        elif not l2:\\n            # l2 is empty, directly return l1\\n            return l1\\n        \\n        \\n        ## General cases\\n        # Compare node value and merge\\n        \\n        if l1.val < l2.val:\\n            l1.next = self.mergeTwoLists(l1.next, l2)\\n            return l1\\n        \\n        else:\\n            l2.next = self.mergeTwoLists(l1, l2.next)\\n            return l2\\n```\\n\\n---\\n\\n**Implementation** in **Go**\\n\\n```\\n/**\\n * Definition for singly-linked list.\\n * type ListNode struct {\\n *     Val int\\n *     Next *ListNode\\n * }\\n */\\nfunc mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {\\n    \\n    // Base cases\\n    if (l1 == nil) && (l2 == nil){\\n        \\n        // Both l1 and l2 are empty\\n        return nil\\n\\t\\t\\n    } else if l1 == nil{\\n\\t\\n        // Only l1 is empty\\n        return l2\\n\\t\\t\\n    } else if l2 == nil{\\n\\t\\n        // Only l2 is empty\\n        return l1\\n    }\\n    \\n    \\n    // General cases\\n    if l1.Val < l2.Val{\\n        \\n        // l1 is smaller than l2\\n        l1.Next = mergeTwoLists(l1.Next, l2)\\n        return l1\\n        \\n    } else{\\n        \\n        // l2 is smaller than l1\\n        l2.Next = mergeTwoLists(l1, l2.Next)\\n        return l2\\n        \\n    }\\n    \\n}\\n```\\n\\n---\\n\\n**Implementation** by **Java**:\\n\\n```\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        \\n\\t\\t// Base cases aka stop condition\\n        if( list1 == null ){\\n\\t\\t\\t// l1 is empty, directly return l2\\n            return list2;\\n\\t\\t\\t\\n        }else if( list2 == null ){\\n\\t\\t\\t// l2 is empty, directly return l1\\n            return list1;\\n        }\\n        \\n\\t\\t// General cases\\n        if( list1.val < list2.val ){\\n\\t\\t\\n\\t\\t\\t// l1 is smaller than l2\\n            list1.next = mergeTwoLists( list1.next, list2 );\\n            return list1;\\n        }else{\\n\\t\\t\\n\\t\\t\\t// l2 is smaller than l1\\n            list2.next = mergeTwoLists( list1, list2.next );\\n            return list2;\\n        }\\n        \\n    }\\n}\\n```\\n\\n---\\n\\n**Javascript**:\\n\\n```\\nvar mergeTwoLists = function(list1, list2) {\\n    \\n    // Base cases aka stop condition\\n    if( list1 == null ){\\n        // l1 is empty, directly return l2\\n        return list2;\\n\\n    }else if( list2 == null ){\\n        // l2 is empty, directly return l1\\n        return list1;\\n    }\\n\\n    // General cases\\n    if( list1.val < list2.val ){\\n\\n        // l1 is smaller than l2\\n        list1.next = mergeTwoLists( list1.next, list2 );\\n        return list1;\\n    }else{\\n\\n        // l2 is smaller than l1\\n        list2.next = mergeTwoLists( list1, list2.next );\\n        return list2;\\n    }\\n};\\n```\\n\\n---\\n\\n**C++**:\\n\\n```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        \\n\\t\\t// Base cases aka stop condition\\n        if( list1 == nullptr ){\\n            return list2;\\n            \\n        }else if( list2 == nullptr ){\\n            return list1;\\n        }\\n        \\n\\t\\t//// General cases\\n        // Compare node value and merge\\n        if( list1->val < list2->val){\\n            list1->next = mergeTwoLists( list1->next, list2);\\n            return list1;\\n            \\n        }else{\\n            list2->next = mergeTwoLists( list1, list2->next);\\n            return list2;\\n        }\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3",
                    "C",
                    "JavaScript",
                    "Go",
                    "Recursion"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\n\\n\\nclass Solution:\\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        \\n        ## Base cases aka stop condition\\n        \\n        if not l1 and not l2:\\n            # both l1 and l2 are empty list\\n            return None\\n        \\n        elif not l1:\\n            # l1 is empty, directly return l2\\n            return l2\\n        \\n        elif not l2:\\n            # l2 is empty, directly return l1\\n            return l1\\n        \\n        \\n        ## General cases\\n        # Compare node value and merge\\n        \\n        if l1.val < l2.val:\\n            l1.next = self.mergeTwoLists(l1.next, l2)\\n            return l1\\n        \\n        else:\\n            l2.next = self.mergeTwoLists(l1, l2.next)\\n            return l2\\n```\n```\\n/**\\n * Definition for singly-linked list.\\n * type ListNode struct {\\n *     Val int\\n *     Next *ListNode\\n * }\\n */\\nfunc mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {\\n    \\n    // Base cases\\n    if (l1 == nil) && (l2 == nil){\\n        \\n        // Both l1 and l2 are empty\\n        return nil\\n\\t\\t\\n    } else if l1 == nil{\\n\\t\\n        // Only l1 is empty\\n        return l2\\n\\t\\t\\n    } else if l2 == nil{\\n\\t\\n        // Only l2 is empty\\n        return l1\\n    }\\n    \\n    \\n    // General cases\\n    if l1.Val < l2.Val{\\n        \\n        // l1 is smaller than l2\\n        l1.Next = mergeTwoLists(l1.Next, l2)\\n        return l1\\n        \\n    } else{\\n        \\n        // l2 is smaller than l1\\n        l2.Next = mergeTwoLists(l1, l2.Next)\\n        return l2\\n        \\n    }\\n    \\n}\\n```\n```\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        \\n\\t\\t// Base cases aka stop condition\\n        if( list1 == null ){\\n\\t\\t\\t// l1 is empty, directly return l2\\n            return list2;\\n\\t\\t\\t\\n        }else if( list2 == null ){\\n\\t\\t\\t// l2 is empty, directly return l1\\n            return list1;\\n        }\\n        \\n\\t\\t// General cases\\n        if( list1.val < list2.val ){\\n\\t\\t\\n\\t\\t\\t// l1 is smaller than l2\\n            list1.next = mergeTwoLists( list1.next, list2 );\\n            return list1;\\n        }else{\\n\\t\\t\\n\\t\\t\\t// l2 is smaller than l1\\n            list2.next = mergeTwoLists( list1, list2.next );\\n            return list2;\\n        }\\n        \\n    }\\n}\\n```\n```\\nvar mergeTwoLists = function(list1, list2) {\\n    \\n    // Base cases aka stop condition\\n    if( list1 == null ){\\n        // l1 is empty, directly return l2\\n        return list2;\\n\\n    }else if( list2 == null ){\\n        // l2 is empty, directly return l1\\n        return list1;\\n    }\\n\\n    // General cases\\n    if( list1.val < list2.val ){\\n\\n        // l1 is smaller than l2\\n        list1.next = mergeTwoLists( list1.next, list2 );\\n        return list1;\\n    }else{\\n\\n        // l2 is smaller than l1\\n        list2.next = mergeTwoLists( list1, list2.next );\\n        return list2;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        \\n\\t\\t// Base cases aka stop condition\\n        if( list1 == nullptr ){\\n            return list2;\\n            \\n        }else if( list2 == nullptr ){\\n            return list1;\\n        }\\n        \\n\\t\\t//// General cases\\n        // Compare node value and merge\\n        if( list1->val < list2->val){\\n            list1->next = mergeTwoLists( list1->next, list2);\\n            return list1;\\n            \\n        }else{\\n            list2->next = mergeTwoLists( list1, list2->next);\\n            return list2;\\n        }\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 924543,
                "title": "easy-js-solution",
                "content": "```\\nvar mergeTwoLists = function(l1, l2) {\\n    let head = new ListNode();\\n    let cur = head;\\n    let cur1 = l1, cur2 = l2;\\n    while (cur1 !== null && cur2 !== null) {\\n        if (cur1.val < cur2.val) {\\n            cur.next = cur1; // point new list to this node\\n            cur1 = cur1.next; // advance ptr of list 1\\n        } else {\\n            cur.next = cur2; // point new list to this node\\n            cur2 = cur2.next; // advance ptr of list 2\\n        }\\n        cur = cur.next; // advance ptr of new list\\n    }\\n    // in case the end of one list is reached earlier\\n    if (cur1 !== null) {\\n        cur.next = cur1;\\n    }\\n    if (cur2 !== null) {\\n        cur.next = cur2;\\n    }\\n    return head.next;\\n    // T.C: O(M + N), M = length of l1, N = length of l2\\n    // S.C: O(1), we simply rearrange pointers\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar mergeTwoLists = function(l1, l2) {\\n    let head = new ListNode();\\n    let cur = head;\\n    let cur1 = l1, cur2 = l2;\\n    while (cur1 !== null && cur2 !== null) {\\n        if (cur1.val < cur2.val) {\\n            cur.next = cur1; // point new list to this node\\n            cur1 = cur1.next; // advance ptr of list 1\\n        } else {\\n            cur.next = cur2; // point new list to this node\\n            cur2 = cur2.next; // advance ptr of list 2\\n        }\\n        cur = cur.next; // advance ptr of new list\\n    }\\n    // in case the end of one list is reached earlier\\n    if (cur1 !== null) {\\n        cur.next = cur1;\\n    }\\n    if (cur2 !== null) {\\n        cur.next = cur2;\\n    }\\n    return head.next;\\n    // T.C: O(M + N), M = length of l1, N = length of l2\\n    // S.C: O(1), we simply rearrange pointers\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 398633,
                "title": "0ms-c-solution",
                "content": "```\\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\\n    if(!l1)\\n        return l2;\\n    if(!l2)\\n        return l1;\\n    if(l1->val < l2->val) {\\n        l1->next = mergeTwoLists(l1->next, l2);\\n        return l1;\\n    } else {\\n        l2->next = mergeTwoLists(l1, l2->next);\\n        return l2;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\\n    if(!l1)\\n        return l2;\\n    if(!l2)\\n        return l1;\\n    if(l1->val < l2->val) {\\n        l1->next = mergeTwoLists(l1->next, l2);\\n        return l1;\\n    } else {\\n        l2->next = mergeTwoLists(l1, l2->next);\\n        return l2;\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3150957,
                "title": "simple-java-c-100-readable-data-structures-comments",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if(list1!=null && list2!=null)\\n        {\\n            if(list1.val < list2.val)\\n            {\\n                list1.next =  mergeTwoLists(list1.next,list2);\\n                return list1;\\n            }\\n            else\\n            {\\n                list2.next = mergeTwoLists(list1,list2.next);\\n                return list2;\\n            }\\n        }\\n        if(list1 == null)\\n            return list2;\\n        return list1;   \\n    }\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if(list1!=null && list2!=null)\\n        {\\n            if(list1.val < list2.val)\\n            {\\n                list1.next =  mergeTwoLists(list1.next,list2);\\n                return list1;\\n            }\\n            else\\n            {\\n                list2.next = mergeTwoLists(list1,list2.next);\\n                return list2;\\n            }\\n        }\\n        if(list1 == null)\\n            return list2;\\n        return list1;   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1871453,
                "title": "clean-scala-solution",
                "content": "```\\nobject Solution {\\n    def mergeTwoLists(list1: ListNode, list2: ListNode): ListNode = {\\n        (list1, list2) match {\\n          case (null, _) => list2\\n          case (_, null) => list1\\n          case (l1, l2) => {\\n            if (l1.x < l2.x) new ListNode(l1.x, mergeTwoLists(l1.next, l2))\\n            else new ListNode(l2.x, mergeTwoLists(l1, l2.next))\\n          }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\nobject Solution {\\n    def mergeTwoLists(list1: ListNode, list2: ListNode): ListNode = {\\n        (list1, list2) match {\\n          case (null, _) => list2\\n          case (_, null) => list1\\n          case (l1, l2) => {\\n            if (l1.x < l2.x) new ListNode(l1.x, mergeTwoLists(l1.next, l2))\\n            else new ListNode(l2.x, mergeTwoLists(l1, l2.next))\\n          }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1636717,
                "title": "python-98-faster-with-clear-comments",
                "content": "\\t# Definition for singly-linked list.\\n\\t# class ListNode:\\n\\t#     def __init__(self, val=0, next=None):\\n\\t#         self.val = val\\n\\t#         self.next = next\\n\\tclass Solution:\\n\\t\\tdef mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n\\t\\t\\t#create dummy node so we can compare the first node in each list\\n\\t\\t\\tdummy = ListNode()\\n\\n\\t\\t\\t#initialise current node pointer\\n\\t\\t\\tcurr = dummy\\n\\n\\t\\t\\t#while the lists are valid\\n\\t\\t\\twhile list1 and list2:\\n\\n\\t\\t\\t\\t#if the value is list1 is less than the value in list2\\n\\t\\t\\t\\tif list1.val < list2.val:\\n\\n\\t\\t\\t\\t\\t#the next node in the list will be the list1 node\\n\\t\\t\\t\\t\\tcurr.next = list1\\n\\t\\t\\t\\t\\tlist1 = list1.next\\n\\n\\t\\t\\t\\telse:\\n\\n\\t\\t\\t\\t\\t#if not then the next node in the list will be the list2 node\\n\\t\\t\\t\\t\\tcurr.next = list2\\n\\t\\t\\t\\t\\tlist2 = list2.next\\n\\n\\t\\t\\t\\t#increment node\\n\\t\\t\\t\\tcurr = curr.next\\n\\n\\t\\t\\t#if list1 node is valid but not list2 node add the rest of the nodes from list1\\n\\t\\t\\tif list1:\\n\\t\\t\\t\\tcurr.next = list1\\n\\n\\t\\t\\t#if list2 node is valid but not list1 node add the rest of the nodes from list2\\n\\t\\t\\telif list2:\\n\\t\\t\\t\\tcurr.next = list2\\n\\n\\t\\t\\t#return the head of the merged list\\n\\t\\t\\treturn dummy.next",
                "solutionTags": [
                    "Python"
                ],
                "code": "\\t# Definition for singly-linked list.\\n\\t# class ListNode:\\n\\t#     def __init__(self, val=0, next=None):\\n\\t#         self.val = val\\n\\t#         self.next = next\\n\\tclass Solution:\\n\\t\\tdef mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n\\t\\t\\t#create dummy node so we can compare the first node in each list\\n\\t\\t\\tdummy = ListNode()\\n\\n\\t\\t\\t#initialise current node pointer\\n\\t\\t\\tcurr = dummy\\n\\n\\t\\t\\t#while the lists are valid\\n\\t\\t\\twhile list1 and list2:\\n\\n\\t\\t\\t\\t#if the value is list1 is less than the value in list2\\n\\t\\t\\t\\tif list1.val < list2.val:\\n\\n\\t\\t\\t\\t\\t#the next node in the list will be the list1 node\\n\\t\\t\\t\\t\\tcurr.next = list1\\n\\t\\t\\t\\t\\tlist1 = list1.next\\n\\n\\t\\t\\t\\telse:\\n\\n\\t\\t\\t\\t\\t#if not then the next node in the list will be the list2 node\\n\\t\\t\\t\\t\\tcurr.next = list2\\n\\t\\t\\t\\t\\tlist2 = list2.next\\n\\n\\t\\t\\t\\t#increment node\\n\\t\\t\\t\\tcurr = curr.next\\n\\n\\t\\t\\t#if list1 node is valid but not list2 node add the rest of the nodes from list1\\n\\t\\t\\tif list1:\\n\\t\\t\\t\\tcurr.next = list1\\n\\n\\t\\t\\t#if list2 node is valid but not list1 node add the rest of the nodes from list2\\n\\t\\t\\telif list2:\\n\\t\\t\\t\\tcurr.next = list2\\n\\n\\t\\t\\t#return the head of the merged list\\n\\t\\t\\treturn dummy.next",
                "codeTag": "Java"
            },
            {
                "id": 1185232,
                "title": "rust-no-allocations",
                "content": "\\ni\\'m new to rust but i\\'ve learned a lot from reading the code on these forums\\n\\n```rust\\nuse std::mem;\\n\\nimpl Solution {\\n    pub fn merge_two_lists(\\n        mut l1: Option<Box<ListNode>>, mut l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        \\n        let mut dummy = None;\\n        let mut p_next = &mut dummy;\\n        \\n        while l1.is_some() && l2.is_some() {\\n            let lone = &mut l1;\\n            let ltwo = &mut l2;\\n            let l = if lone.as_ref().unwrap().val < ltwo.as_ref().unwrap().val {\\n                lone } else { ltwo };\\n            \\n            mem::swap(p_next, l);\\n            mem::swap(l, &mut p_next.as_mut().unwrap().next);\\n            p_next = &mut p_next.as_mut().unwrap().next;\\n        }\\n        \\n        mem::swap(p_next, if l1.is_none() { &mut l2 } else { &mut l1 });\\n        dummy\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```rust\\nuse std::mem;\\n\\nimpl Solution {\\n    pub fn merge_two_lists(\\n        mut l1: Option<Box<ListNode>>, mut l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        \\n        let mut dummy = None;\\n        let mut p_next = &mut dummy;\\n        \\n        while l1.is_some() && l2.is_some() {\\n            let lone = &mut l1;\\n            let ltwo = &mut l2;\\n            let l = if lone.as_ref().unwrap().val < ltwo.as_ref().unwrap().val {\\n                lone } else { ltwo };\\n            \\n            mem::swap(p_next, l);\\n            mem::swap(l, &mut p_next.as_mut().unwrap().next);\\n            p_next = &mut p_next.as_mut().unwrap().next;\\n        }\\n        \\n        mem::swap(p_next, if l1.is_none() { &mut l2 } else { &mut l1 });\\n        dummy\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1103702,
                "title": "typescript-solution",
                "content": "```\\nfunction mergeTwoLists(l1: ListNode | null, l2: ListNode | null): ListNode | null {\\n  const head: ListNode = new ListNode();\\n  let curr: ListNode = head;\\n  while (l1 && l2) {\\n    if (l1.val < l2.val) {\\n      curr.next = l1;\\n      l1 = l1.next;\\n    } else {\\n      curr.next = l2;\\n      l2 = l2.next;\\n    }\\n    curr = curr.next;\\n  }\\n  curr.next = l1 || l2;\\n  return head.next;\\n}\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction mergeTwoLists(l1: ListNode | null, l2: ListNode | null): ListNode | null {\\n  const head: ListNode = new ListNode();\\n  let curr: ListNode = head;\\n  while (l1 && l2) {\\n    if (l1.val < l2.val) {\\n      curr.next = l1;\\n      l1 = l1.next;\\n    } else {\\n      curr.next = l2;\\n      l2 = l2.next;\\n    }\\n    curr = curr.next;\\n  }\\n  curr.next = l1 || l2;\\n  return head.next;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 673463,
                "title": "python-line-by-line-explanation",
                "content": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n  def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\\n    # create a ListNode to store answer\\n    answer = ListNode()\\n    # set runner as answer, we need runner to iterate through\\n    runner = answer\\n    # while l1 and l2 are not empty\\n    while l1 and l2:\\n      # if value of l1\\'s node is more than l2\\'s node\\n      if l1.val > l2.val:\\n        # create a node as l2\\'s value and point runner to it\\n        runner.next = ListNode(l2.val)\\n        # then point next value in l2 as the new l2\\n        l2 = l2.next\\n      # otherwise, value of l2\\'s node must be equal or larger than l1\\'s node\\n      else:\\n        # create a node as l1\\'s value and point runner to it\\n        runner.next = ListNode(l1.val)\\n        # then point next value in l1 as the new l1\\n        l1 = l1.next\\n      # lastly, point runner\\'s last node to start of the runner itself\\n      # before starting the while loop again\\n      runner = runner.next\\n\\n    # points the last node in runner to l1 or l2 depends on whichever that is not empty\\n    runner.next = l1 or l2\\n    # answer points back to the start of the runner\\n    return answer.next\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n  def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\\n    # create a ListNode to store answer\\n    answer = ListNode()\\n    # set runner as answer, we need runner to iterate through\\n    runner = answer\\n    # while l1 and l2 are not empty\\n    while l1 and l2:\\n      # if value of l1\\'s node is more than l2\\'s node\\n      if l1.val > l2.val:\\n        # create a node as l2\\'s value and point runner to it\\n        runner.next = ListNode(l2.val)\\n        # then point next value in l2 as the new l2\\n        l2 = l2.next\\n      # otherwise, value of l2\\'s node must be equal or larger than l1\\'s node\\n      else:\\n        # create a node as l1\\'s value and point runner to it\\n        runner.next = ListNode(l1.val)\\n        # then point next value in l1 as the new l1\\n        l1 = l1.next\\n      # lastly, point runner\\'s last node to start of the runner itself\\n      # before starting the while loop again\\n      runner = runner.next\\n\\n    # points the last node in runner to l1 or l2 depends on whichever that is not empty\\n    runner.next = l1 or l2\\n    # answer points back to the start of the runner\\n    return answer.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 669122,
                "title": "python-simple-solutions-with-recursion-iteration",
                "content": "### Recursion\\n```\\nclass Solution:\\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\\n\\n        if not l1:\\n            return l2\\n        if not l2:\\n            return l1\\n\\n        if l1.val > l2.val:\\n            ans = ListNode(l2.val)\\n            ans.next = self.mergeTwoLists(l1, l2.next)\\n        else:\\n            ans = ListNode(l1.val)\\n            ans.next = self.mergeTwoLists(l1.next, l2)\\n        return ans\\n```\\n\\n### Iteration\\n```\\nclass Solution:\\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\\n\\n        ans = ListNode()\\n        runner = ans\\n\\n        while l1 and l2:\\n            if l1.val > l2.val:\\n                runner.next = ListNode(l2.val)\\n                l2 = l2.next\\n            else:\\n                runner.next = ListNode(l1.val)\\n                l1 = l1.next\\n            runner = runner.next\\n\\n        runner.next = l1 or l2\\n        return ans.next\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Recursion",
                    "Iterator"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\\n\\n        if not l1:\\n            return l2\\n        if not l2:\\n            return l1\\n\\n        if l1.val > l2.val:\\n            ans = ListNode(l2.val)\\n            ans.next = self.mergeTwoLists(l1, l2.next)\\n        else:\\n            ans = ListNode(l1.val)\\n            ans.next = self.mergeTwoLists(l1.next, l2)\\n        return ans\\n```\n```\\nclass Solution:\\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\\n\\n        ans = ListNode()\\n        runner = ans\\n\\n        while l1 and l2:\\n            if l1.val > l2.val:\\n                runner.next = ListNode(l2.val)\\n                l2 = l2.next\\n            else:\\n                runner.next = ListNode(l1.val)\\n                l1 = l1.next\\n            runner = runner.next\\n\\n        runner.next = l1 or l2\\n        return ans.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 644164,
                "title": "simple-clean-recursive-javascript-es6-solution-54ms-beats-95-o-n-m",
                "content": "```\\nconst mergeTwoLists = (l1, l2) => {\\n    if(!l1 || !l2) return l1 || l2\\n    if(l1.val < l2.val){\\n        l1.next = mergeTwoLists(l1.next, l2)\\n        return l1\\n    }\\n    else {\\n        l2.next = mergeTwoLists(l1, l2.next)\\n        return l2\\n    }\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst mergeTwoLists = (l1, l2) => {\\n    if(!l1 || !l2) return l1 || l2\\n    if(l1.val < l2.val){\\n        l1.next = mergeTwoLists(l1.next, l2)\\n        return l1\\n    }\\n    else {\\n        l2.next = mergeTwoLists(l1, l2.next)\\n        return l2\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 422458,
                "title": "python-3-solution",
                "content": "```\\nclass Solution:\\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        \\n        head = tail= ListNode(10) # any value could be used as the comparison is between l1 and l2\\n        \\n        while l1 and l2:\\n            if l1.val <= l2.val:\\n                tail.next = l1\\n                l1 = l1.next\\n            else:\\n                tail.next = l2\\n                l2 = l2.next\\n            tail = tail.next\\n            \\n        tail.next = l1 or l2\\n        return head.next  # here by using pointer to next you only pointing to the merged list after the initated random value of 10 that should be excluded\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\\n        \\n        head = tail= ListNode(10) # any value could be used as the comparison is between l1 and l2\\n        \\n        while l1 and l2:\\n            if l1.val <= l2.val:\\n                tail.next = l1\\n                l1 = l1.next\\n            else:\\n                tail.next = l2\\n                l2 = l2.next\\n            tail = tail.next\\n            \\n        tail.next = l1 or l2\\n        return head.next  # here by using pointer to next you only pointing to the merged list after the initated random value of 10 that should be excluded\\n```",
                "codeTag": "Java"
            },
            {
                "id": 400279,
                "title": "java-solution-faster-than-100",
                "content": "The key to solve this is recursion.\\nFirst of all, compare the head\\'s val of listNode1 with listNode2, while listNode1\\'s head val less than l2\\'s, listNode1\\'s head becomes head node of merged ListNode, named it mergedHead. Then , compare listNode1\\'s head next with listNode2\\'head, the larger node becomes the mergedHead\\'next.Keep comparing rest of those nodes\\' val.\\n\\n```\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        if(l1 == null) {\\n            return l2;\\n        } else if(l2 == null) {\\n            return l1;\\n        }\\n        \\n        ListNode mergedHead = null;\\n\\t\\t// the key to solve this is recursion \\n        if(l1.val < l2.val) {\\n            mergedHead = l1;\\n            mergedHead.next = mergeTwoLists(l1.next, l2);\\n        } else {\\n            mergedHead = l2;\\n            mergedHead.next = mergeTwoLists(l1, l2.next);\\n        }\\n        return mergedHead;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        if(l1 == null) {\\n            return l2;\\n        } else if(l2 == null) {\\n            return l1;\\n        }\\n        \\n        ListNode mergedHead = null;\\n\\t\\t// the key to solve this is recursion \\n        if(l1.val < l2.val) {\\n            mergedHead = l1;\\n            mergedHead.next = mergeTwoLists(l1.next, l2);\\n        } else {\\n            mergedHead = l2;\\n            mergedHead.next = mergeTwoLists(l1, l2.next);\\n        }\\n        return mergedHead;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 9799,
                "title": "golang-concise-solution",
                "content": "```\\nfunc mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {\\n\\tres := &ListNode{}\\n\\tcur := res\\n\\tfor l1 != nil || l2 != nil {\\n\\t\\tif l1 == nil {\\n\\t\\t\\tcur.Next = l2\\n\\t\\t\\tl2 = nil\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tif l2 == nil {\\n\\t\\t\\tcur.Next = l1\\n\\t\\t\\tl1 = nil\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\tif l1.Val > l2.Val {\\n\\t\\t\\tcur.Next = l2\\n\\t\\t\\tcur, l2 = cur.Next, l2.Next\\n\\t\\t} else {\\n\\t\\t\\tcur.Next = l1\\n\\t\\t\\tcur, l1 = cur.Next, l1.Next\\n\\t\\t}\\n\\t}\\n\\treturn res.Next\\n}\\n\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {\\n\\tres := &ListNode{}\\n\\tcur := res\\n\\tfor l1 != nil || l2 != nil {\\n\\t\\tif l1 == nil {\\n\\t\\t\\tcur.Next = l2\\n\\t\\t\\tl2 = nil\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tif l2 == nil {\\n\\t\\t\\tcur.Next = l1\\n\\t\\t\\tl1 = nil\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\tif l1.Val > l2.Val {\\n\\t\\t\\tcur.Next = l2\\n\\t\\t\\tcur, l2 = cur.Next, l2.Next\\n\\t\\t} else {\\n\\t\\t\\tcur.Next = l1\\n\\t\\t\\tcur, l1 = cur.Next, l1.Next\\n\\t\\t}\\n\\t}\\n\\treturn res.Next\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 9806,
                "title": "my-java-loop-solution",
                "content": "I know recursive is easy to understand, but I still try a clear loop method :)\\n\\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        ListNode fakeHead = new ListNode(0);\\n        ListNode current = fakeHead;\\n        while (l1 != null && l2 != null) {\\n            if (l1.val <= l2.val) {\\n                current.next = l1;\\n                l1 = l1.next;\\n            } else {\\n                current.next = l2;\\n                l2 = l2.next;\\n            }\\n            current = current.next;\\n        }\\n        if (l1 == null) current.next = l2;\\n        if (l2 == null) current.next = l1;\\n        return fakeHead.next;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "I know recursive is easy to understand, but I still try a clear loop method :)\\n\\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        ListNode fakeHead = new ListNode(0);\\n        ListNode current = fakeHead;\\n        while (l1 != null && l2 != null) {\\n            if (l1.val <= l2.val) {\\n                current.next = l1;\\n                l1 = l1.next;\\n            } else {\\n                current.next = l2;\\n                l2 = l2.next;\\n            }\\n            current = current.next;\\n        }\\n        if (l1 == null) current.next = l2;\\n        if (l2 == null) current.next = l1;\\n        return fakeHead.next;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 10041,
                "title": "non-recursive-no-extra-space-java",
                "content": "    public class Solution {\\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        if(l1 == null) return l2;\\n        if(l2 == null) return l1;\\n        ListNode t1 = l1;\\n        ListNode t2 = l2; \\n        \\n        //whichever list is starting with least, make it t1;\\n        if(t1.val > t2.val) {\\n            ListNode temp = t1;\\n            t1 = t2;\\n            t2 = temp;\\n        }\\n        l1 = t1; //this is what you return eventually\\n\\n        while(t1.next!=null && t2!=null) {\\n            if(t1.val <= t2.val && t1.next.val <= t2.val) {\\n                t1 = t1.next; // proceed if both are less.\\n            }else if (t1.val <= t2.val){\\n                // if t2.val comes in b/w, connect t2, \\n                // and make t1.next as t2.\\n                ListNode temp = t2;\\n                t2 = t1.next;\\n                t1.next = temp;\\n            }\\n        }\\n        //If the first list reaches end, just connect to second list.\\n        if(t1.next == null) {\\n            t1.next = t2;\\n        }\\n        return l1;\\n    }",
                "solutionTags": [
                    "Iterator"
                ],
                "code": "class Solution {\\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        if(l1 == null) return l2;\\n        if(l2 == null) return l1;\\n        ListNode t1 = l1;\\n        ListNode t2 = l2; \\n        \\n        //whichever list is starting with least, make it t1;\\n        if(t1.val > t2.val) {\\n            ListNode temp = t1;\\n            t1 = t2;\\n            t2 = temp;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 10050,
                "title": "javascript-input-output-samples",
                "content": "@admin - will you be able to provide few samples of input and output for a given problem. In general, it sounds like a good idea. For the same problem are following input and output correct. I'm more interested in the structure of input than solution hints.\\n\\n\\n\\n        \\n    /**\\n     * @input\\n     * [{\\n     *      val : 1,\\n     *      next : {\\n     *          val : 2,\\n     *          next : {\\n     *              val : 3,\\n     *              next : null\\n     *          }\\n     *      }\\n     *    },{\\n     *        val : 4,\\n     *        next : {\\n     *           val : 5,\\n     *           next : {\\n     *              val : 6,\\n     *              next : null\\n     *           }\\n     *      }\\n     *  }]\\n     *\\n     *  @output\\n     *  {\\n     *      val : 1,\\n     *      next : {\\n     *          val : 2,\\n     *          next : {\\n     *              val : 3,\\n     *              next : {\\n     *                val : 4,\\n     *                next : {\\n     *                    val : 5,\\n     *                    next : {\\n     *                        val : 6,\\n     *                        next : null\\n     *                    }\\n     *                }\\n     *            }\\n     *         }\\n     *      }     \\n     *   }\\n     */",
                "solutionTags": [],
                "code": "@admin - will you be able to provide few samples of input and output for a given problem. In general, it sounds like a good idea. For the same problem are following input and output correct. I'm more interested in the structure of input than solution hints.\\n\\n\\n\\n        \\n    /**\\n     * @input\\n     * [{\\n     *      val : 1,\\n     *      next : {\\n     *          val : 2,\\n     *          next : {\\n     *              val : 3,\\n     *              next : null\\n     *          }\\n     *      }\\n     *    },{\\n     *        val : 4,\\n     *        next : {\\n     *           val : 5,\\n     *           next : {\\n     *              val : 6,\\n     *              next : null\\n     *           }\\n     *      }\\n     *  }]\\n     *\\n     *  @output\\n     *  {\\n     *      val : 1,\\n     *      next : {\\n     *          val : 2,\\n     *          next : {\\n     *              val : 3,\\n     *              next : {\\n     *                val : 4,\\n     *                next : {\\n     *                    val : 5,\\n     *                    next : {\\n     *                        val : 6,\\n     *                        next : null\\n     *                    }\\n     *                }\\n     *            }\\n     *         }\\n     *      }     \\n     *   }\\n     */",
                "codeTag": "Unknown"
            },
            {
                "id": 3451874,
                "title": "easy-java-solution",
                "content": "# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        ListNode mergedList = new ListNode(0);\\n        ListNode result = mergedList;\\n\\n        while (list1 != null && list2 != null) {\\n            if (list1.val < list2.val) {\\n                mergedList.next = new ListNode(list1.val);\\n                list1 = list1.next;\\n            } else {\\n                mergedList.next = new ListNode(list2.val);\\n                list2 = list2.next;\\n            }\\n            mergedList = mergedList.next;\\n        }\\n\\n        if (list1 != null) {\\n            mergedList.next = list1;\\n        } else {\\n            mergedList.next = list2;\\n        }\\n\\n        return result.next;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        ListNode mergedList = new ListNode(0);\\n        ListNode result = mergedList;\\n\\n        while (list1 != null && list2 != null) {\\n            if (list1.val < list2.val) {\\n                mergedList.next = new ListNode(list1.val);\\n                list1 = list1.next;\\n            } else {\\n                mergedList.next = new ListNode(list2.val);\\n                list2 = list2.next;\\n            }\\n            mergedList = mergedList.next;\\n        }\\n\\n        if (list1 != null) {\\n            mergedList.next = list1;\\n        } else {\\n            mergedList.next = list2;\\n        }\\n\\n        return result.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3136734,
                "title": "c-iterative-beats-94-59",
                "content": "\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2)\\n    {\\n        var dummyNode = new ListNode();\\n        var tail = dummyNode;\\n\\n        var pointer1 = list1;\\n        var pointer2 = list2;\\n\\n        while (pointer1 != null && pointer2 != null)\\n        {\\n            if (pointer1.val < pointer2.val)\\n            {\\n                tail.next = pointer1;\\n                pointer1 = pointer1.next;\\n            }\\n            else\\n            {\\n                tail.next = pointer2;\\n                pointer2 = pointer2.next;\\n            }\\n\\n            tail = tail.next;\\n        }\\n\\n        tail.next = pointer1 ?? pointer2;\\n\\n        return dummyNode.next;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2)\\n    {\\n        var dummyNode = new ListNode();\\n        var tail = dummyNode;\\n\\n        var pointer1 = list1;\\n        var pointer2 = list2;\\n\\n        while (pointer1 != null && pointer2 != null)\\n        {\\n            if (pointer1.val < pointer2.val)\\n            {\\n                tail.next = pointer1;\\n                pointer1 = pointer1.next;\\n            }\\n            else\\n            {\\n                tail.next = pointer2;\\n                pointer2 = pointer2.next;\\n            }\\n\\n            tail = tail.next;\\n        }\\n\\n        tail.next = pointer1 ?? pointer2;\\n\\n        return dummyNode.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2403329,
                "title": "golang-100-fast",
                "content": "```\\n/**\\n * Definition for singly-linked list.\\n * type ListNode struct {\\n *     Val int\\n *     Next *ListNode\\n * }\\n */\\nfunc mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\\n    result := &ListNode{}\\n    current := result\\n    \\n    for list1 != nil && list2 != nil {\\n        if list1.Val < list2.Val {\\n            current.Next = list1\\n            list1 = list1.Next\\n        } else {\\n            current.Next = list2\\n            list2 = list2.Next\\n        }\\n        current = current.Next\\n    }\\n    \\n    if list1 == nil {\\n        current.Next = list2\\n    } else {\\n        current.Next = list1\\n    }\\n    \\n    return result.Next\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * type ListNode struct {\\n *     Val int\\n *     Next *ListNode\\n * }\\n */\\nfunc mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\\n    result := &ListNode{}\\n    current := result\\n    \\n    for list1 != nil && list2 != nil {\\n        if list1.Val < list2.Val {\\n            current.Next = list1\\n            list1 = list1.Next\\n        } else {\\n            current.Next = list2\\n            list2 = list2.Next\\n        }\\n        current = current.Next\\n    }\\n    \\n    if list1 == nil {\\n        current.Next = list2\\n    } else {\\n        current.Next = list1\\n    }\\n    \\n    return result.Next\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2343259,
                "title": "c-java-python3-solution-faster-than-95",
                "content": "**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-21-merge-two-sorted-lists-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-21-merge-two-sorted-lists-solution-and-explanation-en/)**\\n\\n\\n\\n**All the code have been tested, so you can be assured !**\\n## **C#**\\n![image](https://assets.leetcode.com/users/images/baf361f1-8860-4b7b-b9eb-7ad805e70009_1655735200.872112.png)\\n## **Java**\\n![image](https://assets.leetcode.com/users/images/084b2128-0278-4e06-ad09-9de67594b458_1655735232.545226.png)\\n## **Python3**\\n![image](https://assets.leetcode.com/users/images/d5eb43d4-2868-4607-9996-5035a87c7a40_1655735236.899716.png)\\n\\n\\n\\n\\n\\n**\\uD83E\\uDDE1See more LeetCode solution : [Zyrastory - LeetCode Solution](https://zyrastory.com/en/category/coding-en/leetcode-en/)**\\n\\nAny comments or suggestions are welcome ! Thanks !",
                "solutionTags": [
                    "Java",
                    "Python3"
                ],
                "code": "**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-21-merge-two-sorted-lists-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-21-merge-two-sorted-lists-solution-and-explanation-en/)**\\n\\n\\n\\n**All the code have been tested, so you can be assured !**\\n## **C#**\\n![image](https://assets.leetcode.com/users/images/baf361f1-8860-4b7b-b9eb-7ad805e70009_1655735200.872112.png)\\n## **Java**\\n![image](https://assets.leetcode.com/users/images/084b2128-0278-4e06-ad09-9de67594b458_1655735232.545226.png)\\n## **Python3**\\n![image](https://assets.leetcode.com/users/images/d5eb43d4-2868-4607-9996-5035a87c7a40_1655735236.899716.png)\\n\\n\\n\\n\\n\\n**\\uD83E\\uDDE1See more LeetCode solution : [Zyrastory - LeetCode Solution](https://zyrastory.com/en/category/coding-en/leetcode-en/)**\\n\\nAny comments or suggestions are welcome ! Thanks !",
                "codeTag": "Unknown"
            },
            {
                "id": 2340658,
                "title": "most-easy-solution-in-java",
                "content": "**Easy Solution for this problem**\\n```\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if(list1 == null) return list2;\\n        if(list2 == null) return list1;\\n        \\n        if(list1.val<list2.val){\\n            list1.next = mergeTwoLists(list1.next, list2);\\n            return list1;\\n        }else{\\n            list2.next = mergeTwoLists(list2.next, list1);\\n            return list2;\\n        }\\n    }\\n}\\n``\\n\\n",
                "solutionTags": [],
                "code": "class Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if(list1 == null) return list2;\\n        if(list2 == null) return list1;\\n        \\n        if(list1.val<list2.val){\\n            list1.next = mergeTwoLists(list1.next, list2);\\n            return list1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2250396,
                "title": "java-simple-solution",
                "content": "```\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if(list1 != null && list2 != null) {\\n            return list1.val > list2.val ? \\n                new ListNode(list2.val, mergeTwoLists(list1, list2.next)) :\\n                new ListNode(list1.val, mergeTwoLists(list1.next, list2));\\n        } else {\\n            return list1 == null ? list2 : list1;\\n        }\\n    }  \\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if(list1 != null && list2 != null) {\\n            return list1.val > list2.val ? \\n                new ListNode(list2.val, mergeTwoLists(list1, list2.next)) :\\n                new ListNode(list1.val, mergeTwoLists(list1.next, list2));\\n        } else {\\n            return list1 == null ? list2 : list1;\\n        }\\n    }  \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1644068,
                "title": "two-approaches-iterative-recursive-simple-easy-c",
                "content": "Implementation\\n\\n**Efficient Approach\\nIterative Approach\\nTime Complexity = O(max(M,N)), Space Complexity = O(1)**\\n```\\nclass Solution {\\n public:    \\n     ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n         ListNode *dummy = new ListNode(0);\\n         ListNode *res = dummy;\\n\\n         // moving both list1 & list2 until any one reaches null and\\n         // comparing values, bcased on that adding into dummy list\\n         while(list1 && list2){\\n             if(list1->val <= list2->val){\\n                 dummy->next = list1;\\n                 list1 = list1->next;\\n             }\\n             else{\\n                 dummy->next = list2;\\n                 list2 = list2->next;\\n             }\\n             dummy = dummy->next;\\n         }\\n\\n         // if list1 is not empty then simply adding list1, otherwise list2\\n         dummy->next = list1 ? list1 : list2;\\n\\n         // returning next, bcz res is pointing to 0\\n         return res->next;\\n     }\\n };\\n```\\n \\n \\n**Recursive Approach\\nNot an efficient approach\\nJust for knowledge purpose\\nTime Complexity = O(max(M,N)), Space Complexity = O(max(M,N)), bcz of Recursion Stack**\\n```\\nclass Solution {\\npublic:    \\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(!list1) return list2;\\n\\t\\tif(!list2) return list1;\\n\\t\\tif(list1->val < list2->val){\\n\\t\\t\\tlist1->next = mergeTwoLists(list1->next, list2);\\n            return list1;\\n\\t\\t} else{\\n\\t\\t\\tlist2->next = mergeTwoLists(list1, list2->next);\\n            return list2;\\n\\t\\t}\\n    }\\n};\\n```\\nIf you find any issue in understanding the solution then comment below, will try to help you.\\nIf you found my solution useful.\\nSo **please do upvote and encourage me** to document all leetcode problems\\uD83D\\uDE03\\nHappy Coding :)",
                "solutionTags": [
                    "C",
                    "Linked List"
                ],
                "code": "```\\nclass Solution {\\n public:    \\n     ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n         ListNode *dummy = new ListNode(0);\\n         ListNode *res = dummy;\\n\\n         // moving both list1 & list2 until any one reaches null and\\n         // comparing values, bcased on that adding into dummy list\\n         while(list1 && list2){\\n             if(list1->val <= list2->val){\\n                 dummy->next = list1;\\n                 list1 = list1->next;\\n             }\\n             else{\\n                 dummy->next = list2;\\n                 list2 = list2->next;\\n             }\\n             dummy = dummy->next;\\n         }\\n\\n         // if list1 is not empty then simply adding list1, otherwise list2\\n         dummy->next = list1 ? list1 : list2;\\n\\n         // returning next, bcz res is pointing to 0\\n         return res->next;\\n     }\\n };\\n```\n```\\nclass Solution {\\npublic:    \\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(!list1) return list2;\\n\\t\\tif(!list2) return list1;\\n\\t\\tif(list1->val < list2->val){\\n\\t\\t\\tlist1->next = mergeTwoLists(list1->next, list2);\\n            return list1;\\n\\t\\t} else{\\n\\t\\t\\tlist2->next = mergeTwoLists(list1, list2->next);\\n            return list2;\\n\\t\\t}\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1603473,
                "title": "rust-two-pointers-0ms-no-data-clone",
                "content": "**Update**:\\nI have though a new version without any data copy by using take(), code is updated with test cases to confirm that.\\n\\nIt might be an easy problem for other languages, but it\\'s not easy for Rust new leaners... Have spend a lot of time fighting with the borrow checker...\\nTried not to clone, but the `to_owned()` seems still clone the data.\\n\\n```\\nimpl Solution {\\n    pub fn merge_two_lists(\\n        list1: Option<Box<ListNode>>,\\n        list2: Option<Box<ListNode>>,\\n    ) -> Option<Box<ListNode>> {\\n        if list1.is_none() {\\n            return list2;\\n        }\\n        if list2.is_none() {\\n            return list1;\\n        }\\n\\n        let mut pre_head = ListNode::new(-1);\\n        let mut tail = &mut pre_head;\\n\\n        let mut list1 = list1;\\n        let mut list2 = list2;\\n\\n        while list1.is_some() && list2.is_some() {\\n            if list1.as_ref().unwrap().val <= list2.as_ref().unwrap().val {\\n                // old version: `to_owned()` will clone the data from borrowed data\\n                // let tmp = list1.as_ref().unwrap().next.to_owned();\\n                // tail.next = list1.take();\\n                // tail = tail.next.as_mut().unwrap();\\n                // list1 = tmp;\\n\\n                // better version: without data clone\\n                tail.next = list1.take();\\n                tail = tail.next.as_mut().unwrap();\\n                list1 = tail.next.take();\\n            } else {\\n                // old version: `to_owned()` will clone the data from borrowed data\\n                // let tmp = list2.as_ref().unwrap().next.to_owned();\\n                // tail.next = list2.take();\\n                // tail = tail.next.as_mut().unwrap();\\n                // list2 = tmp;\\n\\n                // better version: without data clone\\n                tail.next = list2.take();\\n                tail = tail.next.as_mut().unwrap();\\n                list2 = tail.next.take();\\n            }\\n        }\\n\\n        if list1.is_some() {\\n            tail.next = list1.take();\\n        }\\n        if list2.is_some() {\\n            tail.next = list2.take();\\n        }\\n\\n        pre_head.next\\n    }\\n}\\n\\n#[cfg(test)]\\nmod tests {\\n    use super::*;\\n\\n    #[test]\\n    fn test_merge() {\\n        let mut node1 = ListNode::new(1);\\n        println!(\"address of node1 on stack = {:p}\", &node1);\\n        let node2 = ListNode::new(2);\\n        println!(\"address of node2 on stack = {:p}\", &node2);\\n        node1.next = Some(Box::new(node2));\\n        let list1 = Some(Box::new(node1)); // 1 -> 2\\n\\n        let mut node3 = ListNode::new(1);\\n        println!(\"address of node3 on stack = {:p}\", &node3);\\n        let node4 = ListNode::new(4);\\n        println!(\"address of node4 on stack = {:p}\", &node4);\\n        node3.next = Some(Box::new(node4));\\n        let list2 = Some(Box::new(node3)); // 1 -> 4\\n\\n        println!(\\n            \"address of list1\\'s node1 on heap = {:p}\",\\n            &**list1.as_ref().unwrap()\\n        );\\n        println!(\\n            \"address of list1\\'s node2 on heap = {:p}\",\\n            &**list1.as_ref().unwrap().next.as_ref().unwrap()\\n        );\\n\\n        println!(\\n            \"address of list2\\'s node3 on heap = {:p}\",\\n            &**list2.as_ref().unwrap()\\n        );\\n        println!(\\n            \"address of list2\\'s node4 on heap = {:p}\",\\n            &**list2.as_ref().unwrap().next.as_ref().unwrap()\\n        );\\n\\n        // cargo test -- --show-output\\n        let mut result = Solution::merge_two_lists(list1, list2);\\n        println!(\"{:?}\", result); // 1 -> 1 -> 2 -> 4 node1 -> node3 -> node2 -> node4\\n\\n        // `to_owned()` will clone the data..\\n        // so except for node1 and node3 (the first node of the 2 lists),\\n        // all other nodes\\' addresses are changed.\\n        // With better version, addresses of all the nodes are unchanged!\\n\\n        let mut node = result.take().unwrap();\\n        println!(\"address of result\\'s node1 on heap = {:p}\", &*node);\\n        node = node.next.take().unwrap();\\n        println!(\"address of result\\'s node3 on heap = {:p}\", &*node);\\n        node = node.next.take().unwrap();\\n        println!(\"address of result\\'s node2 on heap = {:p}\", &*node);\\n        node = node.next.take().unwrap();\\n        println!(\"address of result\\'s node4 on heap = {:p}\", &*node);\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn merge_two_lists(\\n        list1: Option<Box<ListNode>>,\\n        list2: Option<Box<ListNode>>,\\n    ) -> Option<Box<ListNode>> {\\n        if list1.is_none() {\\n            return list2;\\n        }\\n        if list2.is_none() {\\n            return list1;\\n        }\\n\\n        let mut pre_head = ListNode::new(-1);\\n        let mut tail = &mut pre_head;\\n\\n        let mut list1 = list1;\\n        let mut list2 = list2;\\n\\n        while list1.is_some() && list2.is_some() {\\n            if list1.as_ref().unwrap().val <= list2.as_ref().unwrap().val {\\n                // old version: `to_owned()` will clone the data from borrowed data\\n                // let tmp = list1.as_ref().unwrap().next.to_owned();\\n                // tail.next = list1.take();\\n                // tail = tail.next.as_mut().unwrap();\\n                // list1 = tmp;\\n\\n                // better version: without data clone\\n                tail.next = list1.take();\\n                tail = tail.next.as_mut().unwrap();\\n                list1 = tail.next.take();\\n            } else {\\n                // old version: `to_owned()` will clone the data from borrowed data\\n                // let tmp = list2.as_ref().unwrap().next.to_owned();\\n                // tail.next = list2.take();\\n                // tail = tail.next.as_mut().unwrap();\\n                // list2 = tmp;\\n\\n                // better version: without data clone\\n                tail.next = list2.take();\\n                tail = tail.next.as_mut().unwrap();\\n                list2 = tail.next.take();\\n            }\\n        }\\n\\n        if list1.is_some() {\\n            tail.next = list1.take();\\n        }\\n        if list2.is_some() {\\n            tail.next = list2.take();\\n        }\\n\\n        pre_head.next\\n    }\\n}\\n\\n#[cfg(test)]\\nmod tests {\\n    use super::*;\\n\\n    #[test]\\n    fn test_merge() {\\n        let mut node1 = ListNode::new(1);\\n        println!(\"address of node1 on stack = {:p}\", &node1);\\n        let node2 = ListNode::new(2);\\n        println!(\"address of node2 on stack = {:p}\", &node2);\\n        node1.next = Some(Box::new(node2));\\n        let list1 = Some(Box::new(node1)); // 1 -> 2\\n\\n        let mut node3 = ListNode::new(1);\\n        println!(\"address of node3 on stack = {:p}\", &node3);\\n        let node4 = ListNode::new(4);\\n        println!(\"address of node4 on stack = {:p}\", &node4);\\n        node3.next = Some(Box::new(node4));\\n        let list2 = Some(Box::new(node3)); // 1 -> 4\\n\\n        println!(\\n            \"address of list1\\'s node1 on heap = {:p}\",\\n            &**list1.as_ref().unwrap()\\n        );\\n        println!(\\n            \"address of list1\\'s node2 on heap = {:p}\",\\n            &**list1.as_ref().unwrap().next.as_ref().unwrap()\\n        );\\n\\n        println!(\\n            \"address of list2\\'s node3 on heap = {:p}\",\\n            &**list2.as_ref().unwrap()\\n        );\\n        println!(\\n            \"address of list2\\'s node4 on heap = {:p}\",\\n            &**list2.as_ref().unwrap().next.as_ref().unwrap()\\n        );\\n\\n        // cargo test -- --show-output\\n        let mut result = Solution::merge_two_lists(list1, list2);\\n        println!(\"{:?}\", result); // 1 -> 1 -> 2 -> 4 node1 -> node3 -> node2 -> node4\\n\\n        // `to_owned()` will clone the data..\\n        // so except for node1 and node3 (the first node of the 2 lists),\\n        // all other nodes\\' addresses are changed.\\n        // With better version, addresses of all the nodes are unchanged!\\n\\n        let mut node = result.take().unwrap();\\n        println!(\"address of result\\'s node1 on heap = {:p}\", &*node);\\n        node = node.next.take().unwrap();\\n        println!(\"address of result\\'s node3 on heap = {:p}\", &*node);\\n        node = node.next.take().unwrap();\\n        println!(\"address of result\\'s node2 on heap = {:p}\", &*node);\\n        node = node.next.take().unwrap();\\n        println!(\"address of result\\'s node4 on heap = {:p}\", &*node);\\n    }\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1548107,
                "title": "easy-c-solution-5-ms",
                "content": "```\\n\\n```class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) \\n    {\\n        ListNode *p1=l1;\\n        ListNode *p2=l2;\\n        ListNode* dummy = new  ListNode(0);\\n        ListNode*p3=dummy;\\n        while(p1!=NULL && p2!=NULL)\\n        {\\n            if(p1->val<=p2->val)\\n            {\\n                p3->next=p1;\\n                p1=p1->next;\\n            }\\n            else\\n            {\\n                p3->next=p2;\\n                p2=p2->next;\\n           }\\n            p3=p3->next; \\n       }\\n        \\n    while(p1!=NULL)\\n    {\\n        p3->next=p1;\\n         p1=p1->next;\\n         p3=p3->next;  \\n    }\\n    while(p2!=NULL)\\n    {\\n        p3->next=p2;\\n         p2=p2->next;\\n         p3=p3->next;  \\n    }\\n        return dummy->next;\\n    }\\n    \\n};``",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1384311,
                "title": "very-simple-recursion-solution-100-work",
                "content": "public class Solution {\\npublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n    if(l1 == null){\\n\\treturn l2;}\\n    if(l2 == null){ \\n\\treturn l1;\\n\\t}\\n    \\n    if(l1.val < l2.val){\\n        l1.next = mergeTwoLists(l1.next, l2);\\n        return l1;\\n    }else{\\n        l2.next = mergeTwoLists(l1, l2.next);\\n        return l2;\\n    }\\n \\n}\\n}",
                "solutionTags": [],
                "code": "class Solution {\\npublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n    if(l1 == null){\\n\\treturn l2;}",
                "codeTag": "Java"
            },
            {
                "id": 1311657,
                "title": "c-9-lines-of-code-easy-to-remember",
                "content": "```\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {       \\n        if (!l1) return l2;\\n        if (!l2) return l1;\\n        if (l1->val < l2->val){\\n                l1->next = mergeTwoLists(l1->next, l2);    \\n                return l1;\\n            } else {\\n                l2->next = mergeTwoLists(l1, l2->next);\\n                return l2;    \\n        } \\n    }\\n",
                "solutionTags": [],
                "code": "```\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {       \\n        if (!l1) return l2;\\n        if (!l2) return l1;\\n        if (l1->val < l2->val){\\n                l1->next = mergeTwoLists(l1->next, l2);    \\n                return l1;\\n            } else {\\n                l2->next = mergeTwoLists(l1, l2->next);\\n                return l2;    \\n        } \\n    }\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1060946,
                "title": "javascript-solution-recursive-iterative-approaches",
                "content": "### Recursive\\n\\n```\\nvar mergeTwoLists = function(l1, l2) {\\n    if (l1 == null) return l2;\\n    if (l2 == null) return l1;\\n    \\n    if (l1.val <= l2.val) {\\n        l1.next = mergeTwoLists(l1.next, l2);\\n        return l1;\\n    }\\n    else {\\n        l2.next = mergeTwoLists(l1, l2.next);\\n        return l2;\\n    }\\n};\\n```\\n<br>\\n\\n---\\n\\n<br>\\n\\n### Iterative\\n\\n```\\nvar mergeTwoLists = function(l1, l2) {\\n    let dummyHead = new ListNode();\\n    \\n    let prev = dummyHead;\\n    \\n    while (l1 != null && l2 != null) {\\n        if (l1.val <= l2.val) {\\n            prev.next = l1;\\n            l1 = l1.next;\\n        }\\n        else if (l2.val < l1.val) {\\n            prev.next = l2;\\n            l2 = l2.next;\\n        }\\n        \\n        prev = prev.next;\\n    }\\n   \\n    if (l1 != null) prev.next = l1;\\n    else prev.next = l2;\\n    \\n    return dummyHead.next;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Recursion",
                    "Iterator"
                ],
                "code": "```\\nvar mergeTwoLists = function(l1, l2) {\\n    if (l1 == null) return l2;\\n    if (l2 == null) return l1;\\n    \\n    if (l1.val <= l2.val) {\\n        l1.next = mergeTwoLists(l1.next, l2);\\n        return l1;\\n    }\\n    else {\\n        l2.next = mergeTwoLists(l1, l2.next);\\n        return l2;\\n    }\\n};\\n```\n```\\nvar mergeTwoLists = function(l1, l2) {\\n    let dummyHead = new ListNode();\\n    \\n    let prev = dummyHead;\\n    \\n    while (l1 != null && l2 != null) {\\n        if (l1.val <= l2.val) {\\n            prev.next = l1;\\n            l1 = l1.next;\\n        }\\n        else if (l2.val < l1.val) {\\n            prev.next = l2;\\n            l2 = l2.next;\\n        }\\n        \\n        prev = prev.next;\\n    }\\n   \\n    if (l1 != null) prev.next = l1;\\n    else prev.next = l2;\\n    \\n    return dummyHead.next;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 836775,
                "title": "swift",
                "content": "```\\nclass Solution {\\n    func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        var dummy = ListNode(-1)\\n        var l1 = l1\\n        var l2 = l2\\n        \\n        var head = dummy\\n        \\n        while l1 != nil && l2 != nil {\\n            if l1!.val <= l2!.val {\\n                dummy.next = l1\\n                l1 = l1!.next\\n            } else {\\n                dummy.next = l2\\n                l2 = l2!.next\\n            }\\n            \\n            dummy = dummy.next!\\n        }\\n        \\n        dummy.next = (l1 == nil) ? l2 : l1\\n        \\n        return head.next\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        var dummy = ListNode(-1)\\n        var l1 = l1\\n        var l2 = l2\\n        \\n        var head = dummy\\n        \\n        while l1 != nil && l2 != nil {\\n            if l1!.val <= l2!.val {\\n                dummy.next = l1\\n                l1 = l1!.next\\n            } else {\\n                dummy.next = l2\\n                l2 = l2!.next\\n            }\\n            \\n            dummy = dummy.next!\\n        }\\n        \\n        dummy.next = (l1 == nil) ? l2 : l1\\n        \\n        return head.next\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 454584,
                "title": "javascript-awesome-swapping-in-place-trick",
                "content": "Just like in python, we can use destructoring to swap in place. \\n```\\nvar mergeTwoLists = function(l1, l2) {\\n    if (l1 === null) {\\n        return l2\\n    } else if (l2 === null) {\\n        return l1\\n    }\\n    \\n    if (l1.val > l2.val) {\\n        [l1, l2] = [l2, l1] // Swap in place\\n    }\\n    l1.next = mergeTwoLists(l1.next, l2)\\n    \\n    return l1 || l2\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar mergeTwoLists = function(l1, l2) {\\n    if (l1 === null) {\\n        return l2\\n    } else if (l2 === null) {\\n        return l1\\n    }\\n    \\n    if (l1.val > l2.val) {\\n        [l1, l2] = [l2, l1] // Swap in place\\n    }\\n    l1.next = mergeTwoLists(l1.next, l2)\\n    \\n    return l1 || l2\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 258099,
                "title": "golang",
                "content": "```\\nfunc mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {\\n\\tdummy := &ListNode{}\\n\\tprev := dummy\\n\\tfor l1 != nil || l2 != nil {\\n\\t\\tif l1 == nil {\\n\\t\\t\\tprev.Next = l2\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\n\\t\\tif l2 == nil {\\n\\t\\t\\tprev.Next = l1\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\n\\t\\tif l1.Val < l2.Val {\\n\\t\\t\\tprev.Next = l1\\n\\t\\t\\tl1 = l1.Next\\n\\t\\t} else {\\n\\t\\t\\tprev.Next = l2\\n\\t\\t\\tl2 = l2.Next\\n\\t\\t}\\n\\n\\t\\tprev = prev.Next\\n\\t}\\n\\n\\treturn dummy.Next\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nfunc mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {\\n\\tdummy := &ListNode{}\\n\\tprev := dummy\\n\\tfor l1 != nil || l2 != nil {\\n\\t\\tif l1 == nil {\\n\\t\\t\\tprev.Next = l2\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\n\\t\\tif l2 == nil {\\n\\t\\t\\tprev.Next = l1\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\n\\t\\tif l1.Val < l2.Val {\\n\\t\\t\\tprev.Next = l1\\n\\t\\t\\tl1 = l1.Next\\n\\t\\t} else {\\n\\t\\t\\tprev.Next = l2\\n\\t\\t\\tl2 = l2.Next\\n\\t\\t}\\n\\n\\t\\tprev = prev.Next\\n\\t}\\n\\n\\treturn dummy.Next\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 212315,
                "title": "rust-solution-why-it-s-so-damn-hard-to-implement",
                "content": "In Rust, an object must have exactly 1 owner (a variable). Other variables can borrow the object, but must return it back to the owner. It\\'s possible to change the owner of the object, but then previous owner won\\'t be able to access the object. \\n\\nIt creates interesting challenge implementing LinkedLists. There is even a book on how to implement different linked lists on Rust http://cglab.ca/~abeinges/blah/too-many-lists/book/README.html.\\n\\n```rust\\nimpl Solution {\\n    pub fn merge_two_lists(mut l1: Option<Box<ListNode>>, mut l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n\\t\\t// Move values of l1 and l2 to the match.\\n\\t\\t// From this point you won\\'t be able to access values of l1 and l2 using l1,l2 :).\\n        match (l1, l2) {\\n            (Some(v1), None) => Some(v1), // l2 is empty, just value of l1 option.\\n            (None, Some(v2)) => Some(v2), // l1 is empty, just value of l2 option.\\n            (Some(mut v1), Some(mut v2)) => {\\n                if v1.val < v2.val {\\n                    let n = v1.next.take(); // Get v1.next node and set the \"v1.next = None\".\\n                    v1.next = Solution::merge_two_lists(n, Some(v2));\\n                    Some(v1)\\n                } else {\\n                    let n = v2.next.take(); // Get v2.next node and set the \"v2.next = None\".\\n                    v2.next = Solution::merge_two_lists(Some(v1), n);\\n                    Some(v2)\\n                }\\n            },\\n            _ => None\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```rust\\nimpl Solution {\\n    pub fn merge_two_lists(mut l1: Option<Box<ListNode>>, mut l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n\\t\\t// Move values of l1 and l2 to the match.\\n\\t\\t// From this point you won\\'t be able to access values of l1 and l2 using l1,l2 :).\\n        match (l1, l2) {\\n            (Some(v1), None) => Some(v1), // l2 is empty, just value of l1 option.\\n            (None, Some(v2)) => Some(v2), // l1 is empty, just value of l2 option.\\n            (Some(mut v1), Some(mut v2)) => {\\n                if v1.val < v2.val {\\n                    let n = v1.next.take(); // Get v1.next node and set the \"v1.next = None\".\\n                    v1.next = Solution::merge_two_lists(n, Some(v2));\\n                    Some(v1)\\n                } else {\\n                    let n = v2.next.take(); // Get v2.next node and set the \"v2.next = None\".\\n                    v2.next = Solution::merge_two_lists(Some(v1), n);\\n                    Some(v2)\\n                }\\n            },\\n            _ => None\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 9875,
                "title": "two-ways-in-java-both-1ms",
                "content": "    //first\\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n\\t\\tif (l1 == null || l2 == null) {\\n\\t\\t\\treturn l1 == null ? l2 : l1;\\n\\t\\t}\\n\\t\\tListNode head = null;\\n\\t\\tif (l1.val < l2.val) {\\n\\t\\t\\thead = l1;\\n\\t\\t\\thead.next = mergeTwoLists(l1.next, l2);\\n\\t\\t} else {\\n\\t\\t\\thead = l2;\\n\\t\\t\\thead.next = mergeTwoLists(l1, l2.next);\\n\\t\\t}\\n\\t\\treturn head;\\n\\t}\\n\\n       //second\\n      public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n\\t\\tif (l1 == null || l2 == null) {\\n\\t\\t\\treturn l1 == null ? l2 : l1;\\n\\t\\t}\\n\\t\\tListNode head = null;\\n\\t\\tListNode node = null;\\n\\t\\tif (l1.val < l2.val) {\\n\\t\\t\\thead = l1;\\n\\t\\t\\tl1 = l1.next;\\n\\t\\t} else {\\n\\t\\t\\thead = l2;\\n\\t\\t\\tl2 = l2.next;\\n\\t\\t}\\n\\t\\tnode = head;\\n\\n\\t\\twhile (l1 != null && l2 != null) {\\n\\t\\t\\tif (l1.val < l2.val) {\\n\\t\\t\\t\\tnode.next = l1;\\n\\t\\t\\t\\tl1 = l1.next;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tnode.next = l2;\\n\\t\\t\\t\\tl2 = l2.next;\\n\\t\\t\\t}\\n\\t\\t\\tnode = node.next;\\n\\t\\t}\\n\\t\\tif (l1 == null) {\\n\\t\\t\\tnode.next = l2;\\n\\t\\t}\\n\\t\\tif (l2 == null) {\\n\\t\\t\\tnode.next = l1;\\n\\t\\t}\\n\\t\\treturn head;\\n\\t}",
                "solutionTags": [
                    "Java"
                ],
                "code": "    //first\\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n\\t\\tif (l1 == null || l2 == null) {\\n\\t\\t\\treturn l1 == null ? l2 : l1;\\n\\t\\t}\\n\\t\\tListNode head = null;\\n\\t\\tif (l1.val < l2.val) {\\n\\t\\t\\thead = l1;\\n\\t\\t\\thead.next = mergeTwoLists(l1.next, l2);\\n\\t\\t} else {\\n\\t\\t\\thead = l2;\\n\\t\\t\\thead.next = mergeTwoLists(l1, l2.next);\\n\\t\\t}\\n\\t\\treturn head;\\n\\t}\\n\\n       //second\\n      public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n\\t\\tif (l1 == null || l2 == null) {\\n\\t\\t\\treturn l1 == null ? l2 : l1;\\n\\t\\t}\\n\\t\\tListNode head = null;\\n\\t\\tListNode node = null;\\n\\t\\tif (l1.val < l2.val) {\\n\\t\\t\\thead = l1;\\n\\t\\t\\tl1 = l1.next;\\n\\t\\t} else {\\n\\t\\t\\thead = l2;\\n\\t\\t\\tl2 = l2.next;\\n\\t\\t}\\n\\t\\tnode = head;\\n\\n\\t\\twhile (l1 != null && l2 != null) {\\n\\t\\t\\tif (l1.val < l2.val) {\\n\\t\\t\\t\\tnode.next = l1;\\n\\t\\t\\t\\tl1 = l1.next;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tnode.next = l2;\\n\\t\\t\\t\\tl2 = l2.next;\\n\\t\\t\\t}\\n\\t\\t\\tnode = node.next;\\n\\t\\t}\\n\\t\\tif (l1 == null) {\\n\\t\\t\\tnode.next = l2;\\n\\t\\t}\\n\\t\\tif (l2 == null) {\\n\\t\\t\\tnode.next = l1;\\n\\t\\t}\\n\\t\\treturn head;\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 9995,
                "title": "8ms-c-simple-recursion",
                "content": "    class Solution {\\n    public:\\n        ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n            if (!l1) return l2;\\n            if (!l2) return l1;\\n            if (l1->val < l2->val) { l1 -> next = mergeTwoLists(l1->next,l2); return l1; }\\n            else { l2 -> next = mergeTwoLists(l2->next,l1); return l2; }\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n            if (!l1) return l2;\\n            if (!l2) return l1;\\n            if (l1->val < l2->val) { l1 -> next = mergeTwoLists(l1->next,l2); return l1; }",
                "codeTag": "Java"
            },
            {
                "id": 10025,
                "title": "java-solution-with-no-extra-list-o-1-space",
                "content": "    public class Solution {\\n        public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n            if(l1==null || l2==null) return l1==null? l2 : l1;\\n    \\t\\tListNode dummy = new ListNode(0);\\n    \\t\\tdummy.next = l1;\\n    \\t    ListNode p1 = dummy;\\n    \\t    ListNode p2 = l2; \\n    \\n    \\t\\twhile(p1.next!=null && p2!=null){\\n    \\t    \\tif(p2.val<p1.next.val){\\n    \\t    \\t\\tListNode t = p2;\\n    \\t    \\t\\tp2 = p2.next;\\n    \\t    \\t\\tt.next = p1.next;\\n    \\t    \\t\\tp1.next = t;\\n    \\t    \\t}\\n    \\t    \\tp1 = p1.next;\\n    \\t    }\\n    \\t    if(p1.next == null && p2!=null) p1.next = p2;\\n    \\t    return dummy.next;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n            if(l1==null || l2==null) return l1==null? l2 : l1;\\n    \\t\\tListNode dummy = new ListNode(0);\\n    \\t\\tdummy.next = l1;\\n    \\t    ListNode p1 = dummy;\\n    \\t    ListNode p2 = l2; \\n    \\n    \\t\\twhile(p1.next!=null && p2!=null){\\n    \\t    \\tif(p2.val<p1.next.val){\\n    \\t    \\t\\tListNode t = p2;\\n    \\t    \\t\\tp2 = p2.next;\\n    \\t    \\t\\tt.next = p1.next;\\n    \\t    \\t\\tp1.next = t;\\n    \\t    \\t}",
                "codeTag": "Java"
            },
            {
                "id": 3456549,
                "title": "beats-86-10-5-145-top-interview-question",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n*Since lists are sorted, put two pointers at the start of each list and  keep adding the smaller node to the dummy node.*\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\nThis is a Python solution to merge two sorted linked lists, where each node in the linked list is represented by a `ListNode` class with a value (`val`) and a pointer to the next node (`next`).\\n\\nThe function `mergeTwoLists` takes in two linked lists as input (`list1` and `list2`), and returns a merged sorted linked list.\\n\\nThe approach used here is to create a new linked list (`dummy`) with a `tail` pointer. Then, we traverse both `list1` and `list2` simultaneously, comparing the values of the nodes at each step, and appending the smaller value node to the `tail` of the new linked list. Once we reach the end of one of the linked lists, we append the remaining nodes of the other linked list to the end of the new linked list.\\n\\nFinally, we return the `next` pointer of the `dummy` node, which points to the first node of the merged linked list.\\n\\nOverall, this is an efficient approach with a time complexity of O(n+m), where n and m are the lengths of the input linked lists.\\n\\n# Complexity\\n- Time complexity:\\nO(n+m)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\nO(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe `time complexity` of the `mergeTwoLists` function is `O(n+m)`, where n and m are the lengths of the input linked lists. This is because we need to traverse both linked lists at least once, and the number of operations is proportional to the length of the merged list. Specifically, in the worst case scenario where both lists have the same length, we need to perform `n+m` comparisons and node assignments.\\n\\nThe `space complexity` of the function is `O(1)`, since we are only using a constant amount of extra space to store the `dummy` node and the `tail` pointer. We are not creating any additional data structures or arrays to store the nodes of the merged linked list.\\n\\n# Code\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n\\n        dummy = ListNode()\\n        tail = dummy\\n\\n        while list1 is not None and list2 is not None:\\n            if list1.val <= list2.val:\\n                tail.next = list1\\n                list1 = list1.next\\n            else:\\n                tail.next = list2\\n                list2 = list2.next\\n            \\n            tail= tail.next\\n\\n        tail.next = list2 if list1 is None else list1\\n        return dummy.next\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n\\n        dummy = ListNode()\\n        tail = dummy\\n\\n        while list1 is not None and list2 is not None:\\n            if list1.val <= list2.val:\\n                tail.next = list1\\n                list1 = list1.next\\n            else:\\n                tail.next = list2\\n                list2 = list2.next\\n            \\n            tail= tail.next\\n\\n        tail.next = list2 if list1 is None else list1\\n        return dummy.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2630303,
                "title": "fast-typescript-solution-75-ms-top-95-speed",
                "content": "### Solution:\\n```ts\\n/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction mergeTwoLists(list1: ListNode | null, list2: ListNode | null): ListNode | null {\\n    const mergedHead: ListNode = new ListNode(-1, null);\\n    let prev: ListNode = mergedHead;\\n    \\n    while (list1 && list2) {\\n        if (list1.val <= list2.val) {\\n            prev.next = list1;\\n            list1 = list1.next;\\n        } else {\\n            prev.next = list2;\\n            list2 = list2.next;\\n        }\\n        prev = prev.next;\\n    }\\n    prev.next = list1 ? list1 : list2;\\n\\n    return mergedHead.next;\\n};\\n```\\n\\n### LeetCode Output:\\nRuntime: **75 ms**, faster than **95.39%** of TypeScript online submissions for Merge Two Sorted Lists.\\nMemory Usage: **44.9 MB**, less than **67.05%** of TypeScript online submissions for Merge Two Sorted Lists.",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```ts\\n/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction mergeTwoLists(list1: ListNode | null, list2: ListNode | null): ListNode | null {\\n    const mergedHead: ListNode = new ListNode(-1, null);\\n    let prev: ListNode = mergedHead;\\n    \\n    while (list1 && list2) {\\n        if (list1.val <= list2.val) {\\n            prev.next = list1;\\n            list1 = list1.next;\\n        } else {\\n            prev.next = list2;\\n            list2 = list2.next;\\n        }\\n        prev = prev.next;\\n    }\\n    prev.next = list1 ? list1 : list2;\\n\\n    return mergedHead.next;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2349126,
                "title": "simple-small-recursive-0ms",
                "content": "```rust\\nimpl Solution {\\n    pub fn merge_two_lists(list1: Option<Box<ListNode>>, list2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        match (list1, list2) {\\n            (None, None) => None,\\n            (Some(x), None) | (None, Some(x)) => Some(x),\\n            (Some(mut x), Some(mut y)) => {\\n                if x.val >= y.val {\\n                    y.next = Solution::merge_two_lists(Some(x), y.next);\\n                    Some(y)\\n                } else {\\n                    x.next = Solution::merge_two_lists(Some(y), x.next);\\n                    Some(x)\\n                }\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn merge_two_lists(list1: Option<Box<ListNode>>, list2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        match (list1, list2) {\\n            (None, None) => None,\\n            (Some(x), None) | (None, Some(x)) => Some(x),\\n            (Some(mut x), Some(mut y)) => {\\n                if x.val >= y.val {\\n                    y.next = Solution::merge_two_lists(Some(x), y.next);\\n                    Some(y)\\n                } else {\\n                    x.next = Solution::merge_two_lists(Some(y), x.next);\\n                    Some(x)\\n                }\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1570446,
                "content": [
                    {
                        "username": "Norie",
                        "content": "WHY CANT WE USE CONCAT and SORT HERE, ANYbody?"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/\\n"
                    },
                    {
                        "username": "Aravind_VC",
                        "content": "given list is not array it is linked list sot sort work with array not with linked list"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Bro this question is of linked list "
                    },
                    {
                        "username": "dadiprasanth",
                        "content": "[@mokotozett](/mokotozett)  bro it is linked list we have to transverse using next key word and we can use val key to find the value "
                    },
                    {
                        "username": "mokotozett",
                        "content": "I had the same question.... list1 + list2... then sort().... \\nI keep looking at the problem. Makes sense to use nodes if the output order is important or special. But the problem says Output: [1,1,2,3,4,4] without any regard to placing. Since we are dealing with int, sort() will do. What am i missing? Im just moving on to another one lol. glhf"
                    },
                    {
                        "username": "1260",
                        "content": "[@LavajavaLux](/LavajavaLux) This is in O(N) space and in general bad for LinkedList problems which usually require O(1)."
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "I first added all values to an array then sorted it, then initialized ListNodes from the array"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "`Lists` are note `Arrays`."
                    },
                    {
                        "username": "MoSaleh8890",
                        "content": "[@andrewcleonard](/andrewcleonard) So informative. Thanks Andrew;"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "this is link list so u can\\'t use that function............"
                    },
                    {
                        "username": "valmiki20",
                        "content": "so you plan to implement CONCAT and SORT for ListNode class? then you are good."
                    },
                    {
                        "username": "gregory_solomon",
                        "content": "This are linked lists, so a bunch of pointers that point to things, not actual values, it is NOT an array."
                    },
                    {
                        "username": "andrewcleonard",
                        "content": "JavaScript response to your question:\\n\\n`list1` and `list2` are objects, **NOT** arrays. It confused me that the examples here show `list1` and `list2` as arrays. \\n\\nIf you `console.log(JSON.stringify(list1))`, you get:\\n\\n```\\nconst list1 = {\\n\\tval: 1,\\n\\tnext: {\\n\\t\\tval: 2,\\n\\t\\tnext: {\\n\\t\\t\\tval: 4,\\n\\t\\t\\tnext: null,\\n\\t\\t},\\n\\t},\\n};\\n```\\n\\nJavaScript has \"standard built-in objects.\" [Arrays are one of JavaScript\\'s built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\\n\\nOn the other hand, linked lists are not part of JavaScript. [Linked lists are a very common data structure used in many programming languages.](https://en.wikipedia.org/wiki/Linked_list) To use a linked list in JavaScript, you must build it yourself on top of vanilla JavaScript. Linked lists have advantages/disadvantages compared to arrays and other data structures:\\n\\nLooking at this specific example, my understanding is that the approach using the the `ListNode` function on line 3 is an older way of using JavaScript. With ES6, we will mostly use [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\\n\\nThis example would be clearer to me if they used this more modern object-oriented approach.\\n\\nI found this freeCodeCamp video and the codepen in the description to be most helpful:\\nhttps://www.youtube.com/watch?v=9YddVVsdG5A\\n\\n(data structures are new to me, so please fact-check me and let me know about any mistakes)"
                    },
                    {
                        "username": "Aryan_Arya",
                        "content": "That will increase the time complexity of the solution."
                    },
                    {
                        "username": "Prince_Vijay",
                        "content": "I didn\\'t understand the class given above. can anyone explain.\\n"
                    },
                    {
                        "username": "zhang2012",
                        "content": "The ListNode class shows you how the linked list is defined for your chosen language. Take Python3 as an example. To define a linked list [1, 2, 4], you write \"l1 = ListNode(1,ListNode(2, ListNode(3, None)))\". Hence, to get the first value (the head) of l1, we do \"l1.val\"; to get second value, we do \"l1.next.val\"; and to get the third value, we do \"l1.next.next.val\""
                    },
                    {
                        "username": "vikaslinux",
                        "content": "Please explain the meaning of splicing.Should I modify the two linked lists and make the new list from the existing nodes or should I create new nodes for the merged linkes list."
                    },
                    {
                        "username": "erenyeager1",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity  ,, no way you can solve it with o(1) time complexity , you have to run over the 2 lists so it would be at least o(n) time "
                    },
                    {
                        "username": "ronnyvega",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity, right?"
                    },
                    {
                        "username": "rohitk_chef15",
                        "content": "[@shibvarghab](/shibvarghab)  can you please explain more about it how to reduce time complexity ,\\nAs we have to traverse the list basically same we do in array how willl it be diff from array\\n please explain "
                    },
                    {
                        "username": "Ursae",
                        "content": "[@shibvarghab](/shibvarghab) How can it be solved in O(1) I wonder? You still have to traverse the lists, don\\'t you? And traversing is dependent on the length, that makes it O(N) at least"
                    },
                    {
                        "username": "mliubiva",
                        "content": "[@a_hend0](/a_hend0) the question is still actual for other people who have the same problem)"
                    },
                    {
                        "username": "a_hend0",
                        "content": "[@Last_CodeBender](/Last_CodeBender)  i dont think hes still looking for the answer \\n"
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "Interweaving the two link lists without creating new memory. "
                    },
                    {
                        "username": "shibvarghab",
                        "content": "You need to create links between two given linked lists. Your goal should be to not use any extra space to merge the linked list. This question should be solved in O(1) time complexity. And that is the benefit of merging two linked lists over merging two arrays. "
                    },
                    {
                        "username": "finelliott",
                        "content": "I am wondering something similar."
                    },
                    {
                        "username": "abdelshokair",
                        "content": "Am i the only one who thinks this is a very vague requirement? Merging doesn\\'t necessarily mean they have to be in increasing order, which it seems it\\'s supposed to be. Seriously, write this stuff in the notes, so we don\\'t waste time."
                    },
                    {
                        "username": "dluan3",
                        "content": "somebody dont know how to read"
                    },
                    {
                        "username": "mng48301",
                        "content": "[@chazwinter](/chazwinter) exactly"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It literally says the new list should be sorted. The word sorted is even in bold. "
                    },
                    {
                        "username": "zenverak",
                        "content": "The examples given clear it up."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "\"merge\" means to combine the lists, and there\\'s a clear implication that the sorted order should be maintained. If you didn\\'t have to do that, you could just append one list to the other and call it a day, but that\\'s not what\\'s meant by merging."
                    },
                    {
                        "username": "cocokaribou",
                        "content": "hi I just started learning algorithm and here\\'s my question:\\nI\\'m using IDE to write main and run my code but don\\'t know what to input in the solution\\n\\nthe parameter of `mergeTwoLists()` is `ListNode` but in the Leetcode console the input goes like [1,2,4] [1,3,4] which seems like Array of Int??\\n\\nif anyone can tell me what main function would look like it would be really helpful\\n"
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "For anyone that\\'s stuck on this, the provided inputs for JavaScript/TypeScript are wrong. If you want to solve this problem in JS, you\\'ll have to convert the provided inputs into a linked list first."
                    },
                    {
                        "username": "adrianroman",
                        "content": "you can create a method to convert the input array into a linked list, then you can easily test in your own IDE with the input from leetcode, you can reuse that method for each linked list problem"
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "\nlet node1 = ListNode(1)\nlet node2 = ListNode(2)\nlet node3 = ListNode(3)\n\nnode1.next = node2\nnode2.next = node3\n\nlike this for example"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The syntax used to show the lists in the examples does look like an array, so it\\'s a little confusing, but they just mean that those are the values in the list. It might\\'ve been better if they\\'d notated the list like:\\n1 -> 2 -> 4"
                    },
                    {
                        "username": "reducingcodex",
                        "content": "https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\\n\\nFor those confuseed about the question, its explained better here.\\n\\nThe question isn\\'t explained well at all here."
                    },
                    {
                        "username": "wolfpackfitdev",
                        "content": "does anyone else get a NullPointerException when trying to reference val?"
                    },
                    {
                        "username": "ClassPython",
                        "content": "I also get null.\\n\\nIf I type   --> list1.val.  I get a null error. Can also visualize this by typing console.log(\\nlist1.val)\\n\\nBut if one types --> if (list1 !== null {  list1.val }  you will get the value, with no error. You can put a console.log(list1.val) inside the if statement to visualize.  i.e. -->  if (list1 !== null {  console.log(list1.val) }\\n\\nI\\'m not sure why it works this way."
                    },
                    {
                        "username": "The_Winter_Soldier",
                        "content": "Yes me \\nHow to solve this;"
                    },
                    {
                        "username": "Msey",
                        "content": "its definitely a medium question"
                    },
                    {
                        "username": "prakhar32",
                        "content": "[@devesh_kumar_kushwaha](/devesh_kumar_kushwaha)  Every champion was once a beginner!"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "[@SuperDeepBoy](/SuperDeepBoy)  then what are you doing here at leet code first of all learn some dsa first"
                    },
                    {
                        "username": "SuperDeepBoy",
                        "content": "Yeah I had never even heard of linked lists."
                    },
                    {
                        "username": "newdive",
                        "content": "I know the expected result is sorted is ascending order.\\n\\nbut the problem never state it specificially.\\n\\nI my opinion, sorted could be ascending or descending order.\\n\\nWhen i came across the term 'sorted', the first thing came into my mind was 'sorted in which order??? Do i have to figure out the order by myself??? These two list are sorted in same order??? blablabla... '\\n\\nI guess most people would take it as ascending order,  and it works in this situation.\\n\\nBut I think we should not adopt this kind of habitual thinking in our solution, which in practice could be very harmful.\\n\\nSo I strongly recommend that the problem be more specifically stated ."
                    },
                    {
                        "username": "Szymon5922",
                        "content": "Always check constraints section to get sure what data u can expect. \"Both list1 and list2 are sorted in non-decreasing order.\""
                    },
                    {
                        "username": "mng48301",
                        "content": "The description of the problem is fine. You should just read carefully. "
                    },
                    {
                        "username": "abhay_mnit22",
                        "content": " read contraints  its already mentioned that sorted in non-decending order "
                    },
                    {
                        "username": "alamick",
                        "content": "I completely agree. I\\'m surprised that this question is so popular, since I knew at a first glance that it was poorly written/stated/explained. "
                    },
                    {
                        "username": "chazwinter",
                        "content": "The problem states that you are given two sorted lists, and you should create a sorted list. Sorted means sorted, so the nature of your sorted list should be the same as the given sorted lists. The directions then go on to state that the given lists are non-decreasing, meaning your merged should be the same, given that sorted means sorted."
                    },
                    {
                        "username": "alexsherbuck",
                        "content": "Based on the documentation in the code, the edge cases may be improperly documented.\\n\\nThis explicitly states that this function returns a `ListNode`. The definition of a `ListNode` shows that `val` is set to whatever is passed or `0`. \\n\\n ```\\n/** javascript\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {    \\n```\\n\\nThe second sample test case is:\\n```\\nlist1 = []\\nlist2 =[]\\nOutput\\n[0]\\nExpected\\n[]\\n```\\nIf you build the function to satisfy the documentation this test case will fail every time.\\n\\nTo me, this needs to change to `@return {ListNode | null } ` but because of the test environment, `null === []` for the purposes of the \\'Expected` block"
                    },
                    {
                        "username": "AlanOnym",
                        "content": "I did not know what to put as the default case, thanks for the clarification"
                    },
                    {
                        "username": "bolemax",
                        "content": "`list1 = []` denotes an empty linked list, i.e. one which has no nodes. It has nothing to do with the definition of the node. I think that's pretty clear."
                    },
                    {
                        "username": "p4stoboy",
                        "content": "Thank you."
                    },
                    {
                        "username": "itsindigo",
                        "content": "+1, was stuck for a while trying to get that test case to pass"
                    }
                ]
            },
            {
                "id": 1650754,
                "content": [
                    {
                        "username": "Norie",
                        "content": "WHY CANT WE USE CONCAT and SORT HERE, ANYbody?"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/\\n"
                    },
                    {
                        "username": "Aravind_VC",
                        "content": "given list is not array it is linked list sot sort work with array not with linked list"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Bro this question is of linked list "
                    },
                    {
                        "username": "dadiprasanth",
                        "content": "[@mokotozett](/mokotozett)  bro it is linked list we have to transverse using next key word and we can use val key to find the value "
                    },
                    {
                        "username": "mokotozett",
                        "content": "I had the same question.... list1 + list2... then sort().... \\nI keep looking at the problem. Makes sense to use nodes if the output order is important or special. But the problem says Output: [1,1,2,3,4,4] without any regard to placing. Since we are dealing with int, sort() will do. What am i missing? Im just moving on to another one lol. glhf"
                    },
                    {
                        "username": "1260",
                        "content": "[@LavajavaLux](/LavajavaLux) This is in O(N) space and in general bad for LinkedList problems which usually require O(1)."
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "I first added all values to an array then sorted it, then initialized ListNodes from the array"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "`Lists` are note `Arrays`."
                    },
                    {
                        "username": "MoSaleh8890",
                        "content": "[@andrewcleonard](/andrewcleonard) So informative. Thanks Andrew;"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "this is link list so u can\\'t use that function............"
                    },
                    {
                        "username": "valmiki20",
                        "content": "so you plan to implement CONCAT and SORT for ListNode class? then you are good."
                    },
                    {
                        "username": "gregory_solomon",
                        "content": "This are linked lists, so a bunch of pointers that point to things, not actual values, it is NOT an array."
                    },
                    {
                        "username": "andrewcleonard",
                        "content": "JavaScript response to your question:\\n\\n`list1` and `list2` are objects, **NOT** arrays. It confused me that the examples here show `list1` and `list2` as arrays. \\n\\nIf you `console.log(JSON.stringify(list1))`, you get:\\n\\n```\\nconst list1 = {\\n\\tval: 1,\\n\\tnext: {\\n\\t\\tval: 2,\\n\\t\\tnext: {\\n\\t\\t\\tval: 4,\\n\\t\\t\\tnext: null,\\n\\t\\t},\\n\\t},\\n};\\n```\\n\\nJavaScript has \"standard built-in objects.\" [Arrays are one of JavaScript\\'s built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\\n\\nOn the other hand, linked lists are not part of JavaScript. [Linked lists are a very common data structure used in many programming languages.](https://en.wikipedia.org/wiki/Linked_list) To use a linked list in JavaScript, you must build it yourself on top of vanilla JavaScript. Linked lists have advantages/disadvantages compared to arrays and other data structures:\\n\\nLooking at this specific example, my understanding is that the approach using the the `ListNode` function on line 3 is an older way of using JavaScript. With ES6, we will mostly use [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\\n\\nThis example would be clearer to me if they used this more modern object-oriented approach.\\n\\nI found this freeCodeCamp video and the codepen in the description to be most helpful:\\nhttps://www.youtube.com/watch?v=9YddVVsdG5A\\n\\n(data structures are new to me, so please fact-check me and let me know about any mistakes)"
                    },
                    {
                        "username": "Aryan_Arya",
                        "content": "That will increase the time complexity of the solution."
                    },
                    {
                        "username": "Prince_Vijay",
                        "content": "I didn\\'t understand the class given above. can anyone explain.\\n"
                    },
                    {
                        "username": "zhang2012",
                        "content": "The ListNode class shows you how the linked list is defined for your chosen language. Take Python3 as an example. To define a linked list [1, 2, 4], you write \"l1 = ListNode(1,ListNode(2, ListNode(3, None)))\". Hence, to get the first value (the head) of l1, we do \"l1.val\"; to get second value, we do \"l1.next.val\"; and to get the third value, we do \"l1.next.next.val\""
                    },
                    {
                        "username": "vikaslinux",
                        "content": "Please explain the meaning of splicing.Should I modify the two linked lists and make the new list from the existing nodes or should I create new nodes for the merged linkes list."
                    },
                    {
                        "username": "erenyeager1",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity  ,, no way you can solve it with o(1) time complexity , you have to run over the 2 lists so it would be at least o(n) time "
                    },
                    {
                        "username": "ronnyvega",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity, right?"
                    },
                    {
                        "username": "rohitk_chef15",
                        "content": "[@shibvarghab](/shibvarghab)  can you please explain more about it how to reduce time complexity ,\\nAs we have to traverse the list basically same we do in array how willl it be diff from array\\n please explain "
                    },
                    {
                        "username": "Ursae",
                        "content": "[@shibvarghab](/shibvarghab) How can it be solved in O(1) I wonder? You still have to traverse the lists, don\\'t you? And traversing is dependent on the length, that makes it O(N) at least"
                    },
                    {
                        "username": "mliubiva",
                        "content": "[@a_hend0](/a_hend0) the question is still actual for other people who have the same problem)"
                    },
                    {
                        "username": "a_hend0",
                        "content": "[@Last_CodeBender](/Last_CodeBender)  i dont think hes still looking for the answer \\n"
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "Interweaving the two link lists without creating new memory. "
                    },
                    {
                        "username": "shibvarghab",
                        "content": "You need to create links between two given linked lists. Your goal should be to not use any extra space to merge the linked list. This question should be solved in O(1) time complexity. And that is the benefit of merging two linked lists over merging two arrays. "
                    },
                    {
                        "username": "finelliott",
                        "content": "I am wondering something similar."
                    },
                    {
                        "username": "abdelshokair",
                        "content": "Am i the only one who thinks this is a very vague requirement? Merging doesn\\'t necessarily mean they have to be in increasing order, which it seems it\\'s supposed to be. Seriously, write this stuff in the notes, so we don\\'t waste time."
                    },
                    {
                        "username": "dluan3",
                        "content": "somebody dont know how to read"
                    },
                    {
                        "username": "mng48301",
                        "content": "[@chazwinter](/chazwinter) exactly"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It literally says the new list should be sorted. The word sorted is even in bold. "
                    },
                    {
                        "username": "zenverak",
                        "content": "The examples given clear it up."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "\"merge\" means to combine the lists, and there\\'s a clear implication that the sorted order should be maintained. If you didn\\'t have to do that, you could just append one list to the other and call it a day, but that\\'s not what\\'s meant by merging."
                    },
                    {
                        "username": "cocokaribou",
                        "content": "hi I just started learning algorithm and here\\'s my question:\\nI\\'m using IDE to write main and run my code but don\\'t know what to input in the solution\\n\\nthe parameter of `mergeTwoLists()` is `ListNode` but in the Leetcode console the input goes like [1,2,4] [1,3,4] which seems like Array of Int??\\n\\nif anyone can tell me what main function would look like it would be really helpful\\n"
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "For anyone that\\'s stuck on this, the provided inputs for JavaScript/TypeScript are wrong. If you want to solve this problem in JS, you\\'ll have to convert the provided inputs into a linked list first."
                    },
                    {
                        "username": "adrianroman",
                        "content": "you can create a method to convert the input array into a linked list, then you can easily test in your own IDE with the input from leetcode, you can reuse that method for each linked list problem"
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "\nlet node1 = ListNode(1)\nlet node2 = ListNode(2)\nlet node3 = ListNode(3)\n\nnode1.next = node2\nnode2.next = node3\n\nlike this for example"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The syntax used to show the lists in the examples does look like an array, so it\\'s a little confusing, but they just mean that those are the values in the list. It might\\'ve been better if they\\'d notated the list like:\\n1 -> 2 -> 4"
                    },
                    {
                        "username": "reducingcodex",
                        "content": "https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\\n\\nFor those confuseed about the question, its explained better here.\\n\\nThe question isn\\'t explained well at all here."
                    },
                    {
                        "username": "wolfpackfitdev",
                        "content": "does anyone else get a NullPointerException when trying to reference val?"
                    },
                    {
                        "username": "ClassPython",
                        "content": "I also get null.\\n\\nIf I type   --> list1.val.  I get a null error. Can also visualize this by typing console.log(\\nlist1.val)\\n\\nBut if one types --> if (list1 !== null {  list1.val }  you will get the value, with no error. You can put a console.log(list1.val) inside the if statement to visualize.  i.e. -->  if (list1 !== null {  console.log(list1.val) }\\n\\nI\\'m not sure why it works this way."
                    },
                    {
                        "username": "The_Winter_Soldier",
                        "content": "Yes me \\nHow to solve this;"
                    },
                    {
                        "username": "Msey",
                        "content": "its definitely a medium question"
                    },
                    {
                        "username": "prakhar32",
                        "content": "[@devesh_kumar_kushwaha](/devesh_kumar_kushwaha)  Every champion was once a beginner!"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "[@SuperDeepBoy](/SuperDeepBoy)  then what are you doing here at leet code first of all learn some dsa first"
                    },
                    {
                        "username": "SuperDeepBoy",
                        "content": "Yeah I had never even heard of linked lists."
                    },
                    {
                        "username": "newdive",
                        "content": "I know the expected result is sorted is ascending order.\\n\\nbut the problem never state it specificially.\\n\\nI my opinion, sorted could be ascending or descending order.\\n\\nWhen i came across the term 'sorted', the first thing came into my mind was 'sorted in which order??? Do i have to figure out the order by myself??? These two list are sorted in same order??? blablabla... '\\n\\nI guess most people would take it as ascending order,  and it works in this situation.\\n\\nBut I think we should not adopt this kind of habitual thinking in our solution, which in practice could be very harmful.\\n\\nSo I strongly recommend that the problem be more specifically stated ."
                    },
                    {
                        "username": "Szymon5922",
                        "content": "Always check constraints section to get sure what data u can expect. \"Both list1 and list2 are sorted in non-decreasing order.\""
                    },
                    {
                        "username": "mng48301",
                        "content": "The description of the problem is fine. You should just read carefully. "
                    },
                    {
                        "username": "abhay_mnit22",
                        "content": " read contraints  its already mentioned that sorted in non-decending order "
                    },
                    {
                        "username": "alamick",
                        "content": "I completely agree. I\\'m surprised that this question is so popular, since I knew at a first glance that it was poorly written/stated/explained. "
                    },
                    {
                        "username": "chazwinter",
                        "content": "The problem states that you are given two sorted lists, and you should create a sorted list. Sorted means sorted, so the nature of your sorted list should be the same as the given sorted lists. The directions then go on to state that the given lists are non-decreasing, meaning your merged should be the same, given that sorted means sorted."
                    },
                    {
                        "username": "alexsherbuck",
                        "content": "Based on the documentation in the code, the edge cases may be improperly documented.\\n\\nThis explicitly states that this function returns a `ListNode`. The definition of a `ListNode` shows that `val` is set to whatever is passed or `0`. \\n\\n ```\\n/** javascript\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {    \\n```\\n\\nThe second sample test case is:\\n```\\nlist1 = []\\nlist2 =[]\\nOutput\\n[0]\\nExpected\\n[]\\n```\\nIf you build the function to satisfy the documentation this test case will fail every time.\\n\\nTo me, this needs to change to `@return {ListNode | null } ` but because of the test environment, `null === []` for the purposes of the \\'Expected` block"
                    },
                    {
                        "username": "AlanOnym",
                        "content": "I did not know what to put as the default case, thanks for the clarification"
                    },
                    {
                        "username": "bolemax",
                        "content": "`list1 = []` denotes an empty linked list, i.e. one which has no nodes. It has nothing to do with the definition of the node. I think that's pretty clear."
                    },
                    {
                        "username": "p4stoboy",
                        "content": "Thank you."
                    },
                    {
                        "username": "itsindigo",
                        "content": "+1, was stuck for a while trying to get that test case to pass"
                    }
                ]
            },
            {
                "id": 1565937,
                "content": [
                    {
                        "username": "Norie",
                        "content": "WHY CANT WE USE CONCAT and SORT HERE, ANYbody?"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/\\n"
                    },
                    {
                        "username": "Aravind_VC",
                        "content": "given list is not array it is linked list sot sort work with array not with linked list"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Bro this question is of linked list "
                    },
                    {
                        "username": "dadiprasanth",
                        "content": "[@mokotozett](/mokotozett)  bro it is linked list we have to transverse using next key word and we can use val key to find the value "
                    },
                    {
                        "username": "mokotozett",
                        "content": "I had the same question.... list1 + list2... then sort().... \\nI keep looking at the problem. Makes sense to use nodes if the output order is important or special. But the problem says Output: [1,1,2,3,4,4] without any regard to placing. Since we are dealing with int, sort() will do. What am i missing? Im just moving on to another one lol. glhf"
                    },
                    {
                        "username": "1260",
                        "content": "[@LavajavaLux](/LavajavaLux) This is in O(N) space and in general bad for LinkedList problems which usually require O(1)."
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "I first added all values to an array then sorted it, then initialized ListNodes from the array"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "`Lists` are note `Arrays`."
                    },
                    {
                        "username": "MoSaleh8890",
                        "content": "[@andrewcleonard](/andrewcleonard) So informative. Thanks Andrew;"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "this is link list so u can\\'t use that function............"
                    },
                    {
                        "username": "valmiki20",
                        "content": "so you plan to implement CONCAT and SORT for ListNode class? then you are good."
                    },
                    {
                        "username": "gregory_solomon",
                        "content": "This are linked lists, so a bunch of pointers that point to things, not actual values, it is NOT an array."
                    },
                    {
                        "username": "andrewcleonard",
                        "content": "JavaScript response to your question:\\n\\n`list1` and `list2` are objects, **NOT** arrays. It confused me that the examples here show `list1` and `list2` as arrays. \\n\\nIf you `console.log(JSON.stringify(list1))`, you get:\\n\\n```\\nconst list1 = {\\n\\tval: 1,\\n\\tnext: {\\n\\t\\tval: 2,\\n\\t\\tnext: {\\n\\t\\t\\tval: 4,\\n\\t\\t\\tnext: null,\\n\\t\\t},\\n\\t},\\n};\\n```\\n\\nJavaScript has \"standard built-in objects.\" [Arrays are one of JavaScript\\'s built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\\n\\nOn the other hand, linked lists are not part of JavaScript. [Linked lists are a very common data structure used in many programming languages.](https://en.wikipedia.org/wiki/Linked_list) To use a linked list in JavaScript, you must build it yourself on top of vanilla JavaScript. Linked lists have advantages/disadvantages compared to arrays and other data structures:\\n\\nLooking at this specific example, my understanding is that the approach using the the `ListNode` function on line 3 is an older way of using JavaScript. With ES6, we will mostly use [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\\n\\nThis example would be clearer to me if they used this more modern object-oriented approach.\\n\\nI found this freeCodeCamp video and the codepen in the description to be most helpful:\\nhttps://www.youtube.com/watch?v=9YddVVsdG5A\\n\\n(data structures are new to me, so please fact-check me and let me know about any mistakes)"
                    },
                    {
                        "username": "Aryan_Arya",
                        "content": "That will increase the time complexity of the solution."
                    },
                    {
                        "username": "Prince_Vijay",
                        "content": "I didn\\'t understand the class given above. can anyone explain.\\n"
                    },
                    {
                        "username": "zhang2012",
                        "content": "The ListNode class shows you how the linked list is defined for your chosen language. Take Python3 as an example. To define a linked list [1, 2, 4], you write \"l1 = ListNode(1,ListNode(2, ListNode(3, None)))\". Hence, to get the first value (the head) of l1, we do \"l1.val\"; to get second value, we do \"l1.next.val\"; and to get the third value, we do \"l1.next.next.val\""
                    },
                    {
                        "username": "vikaslinux",
                        "content": "Please explain the meaning of splicing.Should I modify the two linked lists and make the new list from the existing nodes or should I create new nodes for the merged linkes list."
                    },
                    {
                        "username": "erenyeager1",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity  ,, no way you can solve it with o(1) time complexity , you have to run over the 2 lists so it would be at least o(n) time "
                    },
                    {
                        "username": "ronnyvega",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity, right?"
                    },
                    {
                        "username": "rohitk_chef15",
                        "content": "[@shibvarghab](/shibvarghab)  can you please explain more about it how to reduce time complexity ,\\nAs we have to traverse the list basically same we do in array how willl it be diff from array\\n please explain "
                    },
                    {
                        "username": "Ursae",
                        "content": "[@shibvarghab](/shibvarghab) How can it be solved in O(1) I wonder? You still have to traverse the lists, don\\'t you? And traversing is dependent on the length, that makes it O(N) at least"
                    },
                    {
                        "username": "mliubiva",
                        "content": "[@a_hend0](/a_hend0) the question is still actual for other people who have the same problem)"
                    },
                    {
                        "username": "a_hend0",
                        "content": "[@Last_CodeBender](/Last_CodeBender)  i dont think hes still looking for the answer \\n"
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "Interweaving the two link lists without creating new memory. "
                    },
                    {
                        "username": "shibvarghab",
                        "content": "You need to create links between two given linked lists. Your goal should be to not use any extra space to merge the linked list. This question should be solved in O(1) time complexity. And that is the benefit of merging two linked lists over merging two arrays. "
                    },
                    {
                        "username": "finelliott",
                        "content": "I am wondering something similar."
                    },
                    {
                        "username": "abdelshokair",
                        "content": "Am i the only one who thinks this is a very vague requirement? Merging doesn\\'t necessarily mean they have to be in increasing order, which it seems it\\'s supposed to be. Seriously, write this stuff in the notes, so we don\\'t waste time."
                    },
                    {
                        "username": "dluan3",
                        "content": "somebody dont know how to read"
                    },
                    {
                        "username": "mng48301",
                        "content": "[@chazwinter](/chazwinter) exactly"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It literally says the new list should be sorted. The word sorted is even in bold. "
                    },
                    {
                        "username": "zenverak",
                        "content": "The examples given clear it up."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "\"merge\" means to combine the lists, and there\\'s a clear implication that the sorted order should be maintained. If you didn\\'t have to do that, you could just append one list to the other and call it a day, but that\\'s not what\\'s meant by merging."
                    },
                    {
                        "username": "cocokaribou",
                        "content": "hi I just started learning algorithm and here\\'s my question:\\nI\\'m using IDE to write main and run my code but don\\'t know what to input in the solution\\n\\nthe parameter of `mergeTwoLists()` is `ListNode` but in the Leetcode console the input goes like [1,2,4] [1,3,4] which seems like Array of Int??\\n\\nif anyone can tell me what main function would look like it would be really helpful\\n"
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "For anyone that\\'s stuck on this, the provided inputs for JavaScript/TypeScript are wrong. If you want to solve this problem in JS, you\\'ll have to convert the provided inputs into a linked list first."
                    },
                    {
                        "username": "adrianroman",
                        "content": "you can create a method to convert the input array into a linked list, then you can easily test in your own IDE with the input from leetcode, you can reuse that method for each linked list problem"
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "\nlet node1 = ListNode(1)\nlet node2 = ListNode(2)\nlet node3 = ListNode(3)\n\nnode1.next = node2\nnode2.next = node3\n\nlike this for example"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The syntax used to show the lists in the examples does look like an array, so it\\'s a little confusing, but they just mean that those are the values in the list. It might\\'ve been better if they\\'d notated the list like:\\n1 -> 2 -> 4"
                    },
                    {
                        "username": "reducingcodex",
                        "content": "https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\\n\\nFor those confuseed about the question, its explained better here.\\n\\nThe question isn\\'t explained well at all here."
                    },
                    {
                        "username": "wolfpackfitdev",
                        "content": "does anyone else get a NullPointerException when trying to reference val?"
                    },
                    {
                        "username": "ClassPython",
                        "content": "I also get null.\\n\\nIf I type   --> list1.val.  I get a null error. Can also visualize this by typing console.log(\\nlist1.val)\\n\\nBut if one types --> if (list1 !== null {  list1.val }  you will get the value, with no error. You can put a console.log(list1.val) inside the if statement to visualize.  i.e. -->  if (list1 !== null {  console.log(list1.val) }\\n\\nI\\'m not sure why it works this way."
                    },
                    {
                        "username": "The_Winter_Soldier",
                        "content": "Yes me \\nHow to solve this;"
                    },
                    {
                        "username": "Msey",
                        "content": "its definitely a medium question"
                    },
                    {
                        "username": "prakhar32",
                        "content": "[@devesh_kumar_kushwaha](/devesh_kumar_kushwaha)  Every champion was once a beginner!"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "[@SuperDeepBoy](/SuperDeepBoy)  then what are you doing here at leet code first of all learn some dsa first"
                    },
                    {
                        "username": "SuperDeepBoy",
                        "content": "Yeah I had never even heard of linked lists."
                    },
                    {
                        "username": "newdive",
                        "content": "I know the expected result is sorted is ascending order.\\n\\nbut the problem never state it specificially.\\n\\nI my opinion, sorted could be ascending or descending order.\\n\\nWhen i came across the term 'sorted', the first thing came into my mind was 'sorted in which order??? Do i have to figure out the order by myself??? These two list are sorted in same order??? blablabla... '\\n\\nI guess most people would take it as ascending order,  and it works in this situation.\\n\\nBut I think we should not adopt this kind of habitual thinking in our solution, which in practice could be very harmful.\\n\\nSo I strongly recommend that the problem be more specifically stated ."
                    },
                    {
                        "username": "Szymon5922",
                        "content": "Always check constraints section to get sure what data u can expect. \"Both list1 and list2 are sorted in non-decreasing order.\""
                    },
                    {
                        "username": "mng48301",
                        "content": "The description of the problem is fine. You should just read carefully. "
                    },
                    {
                        "username": "abhay_mnit22",
                        "content": " read contraints  its already mentioned that sorted in non-decending order "
                    },
                    {
                        "username": "alamick",
                        "content": "I completely agree. I\\'m surprised that this question is so popular, since I knew at a first glance that it was poorly written/stated/explained. "
                    },
                    {
                        "username": "chazwinter",
                        "content": "The problem states that you are given two sorted lists, and you should create a sorted list. Sorted means sorted, so the nature of your sorted list should be the same as the given sorted lists. The directions then go on to state that the given lists are non-decreasing, meaning your merged should be the same, given that sorted means sorted."
                    },
                    {
                        "username": "alexsherbuck",
                        "content": "Based on the documentation in the code, the edge cases may be improperly documented.\\n\\nThis explicitly states that this function returns a `ListNode`. The definition of a `ListNode` shows that `val` is set to whatever is passed or `0`. \\n\\n ```\\n/** javascript\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {    \\n```\\n\\nThe second sample test case is:\\n```\\nlist1 = []\\nlist2 =[]\\nOutput\\n[0]\\nExpected\\n[]\\n```\\nIf you build the function to satisfy the documentation this test case will fail every time.\\n\\nTo me, this needs to change to `@return {ListNode | null } ` but because of the test environment, `null === []` for the purposes of the \\'Expected` block"
                    },
                    {
                        "username": "AlanOnym",
                        "content": "I did not know what to put as the default case, thanks for the clarification"
                    },
                    {
                        "username": "bolemax",
                        "content": "`list1 = []` denotes an empty linked list, i.e. one which has no nodes. It has nothing to do with the definition of the node. I think that's pretty clear."
                    },
                    {
                        "username": "p4stoboy",
                        "content": "Thank you."
                    },
                    {
                        "username": "itsindigo",
                        "content": "+1, was stuck for a while trying to get that test case to pass"
                    }
                ]
            },
            {
                "id": 1566326,
                "content": [
                    {
                        "username": "Norie",
                        "content": "WHY CANT WE USE CONCAT and SORT HERE, ANYbody?"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/\\n"
                    },
                    {
                        "username": "Aravind_VC",
                        "content": "given list is not array it is linked list sot sort work with array not with linked list"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Bro this question is of linked list "
                    },
                    {
                        "username": "dadiprasanth",
                        "content": "[@mokotozett](/mokotozett)  bro it is linked list we have to transverse using next key word and we can use val key to find the value "
                    },
                    {
                        "username": "mokotozett",
                        "content": "I had the same question.... list1 + list2... then sort().... \\nI keep looking at the problem. Makes sense to use nodes if the output order is important or special. But the problem says Output: [1,1,2,3,4,4] without any regard to placing. Since we are dealing with int, sort() will do. What am i missing? Im just moving on to another one lol. glhf"
                    },
                    {
                        "username": "1260",
                        "content": "[@LavajavaLux](/LavajavaLux) This is in O(N) space and in general bad for LinkedList problems which usually require O(1)."
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "I first added all values to an array then sorted it, then initialized ListNodes from the array"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "`Lists` are note `Arrays`."
                    },
                    {
                        "username": "MoSaleh8890",
                        "content": "[@andrewcleonard](/andrewcleonard) So informative. Thanks Andrew;"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "this is link list so u can\\'t use that function............"
                    },
                    {
                        "username": "valmiki20",
                        "content": "so you plan to implement CONCAT and SORT for ListNode class? then you are good."
                    },
                    {
                        "username": "gregory_solomon",
                        "content": "This are linked lists, so a bunch of pointers that point to things, not actual values, it is NOT an array."
                    },
                    {
                        "username": "andrewcleonard",
                        "content": "JavaScript response to your question:\\n\\n`list1` and `list2` are objects, **NOT** arrays. It confused me that the examples here show `list1` and `list2` as arrays. \\n\\nIf you `console.log(JSON.stringify(list1))`, you get:\\n\\n```\\nconst list1 = {\\n\\tval: 1,\\n\\tnext: {\\n\\t\\tval: 2,\\n\\t\\tnext: {\\n\\t\\t\\tval: 4,\\n\\t\\t\\tnext: null,\\n\\t\\t},\\n\\t},\\n};\\n```\\n\\nJavaScript has \"standard built-in objects.\" [Arrays are one of JavaScript\\'s built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\\n\\nOn the other hand, linked lists are not part of JavaScript. [Linked lists are a very common data structure used in many programming languages.](https://en.wikipedia.org/wiki/Linked_list) To use a linked list in JavaScript, you must build it yourself on top of vanilla JavaScript. Linked lists have advantages/disadvantages compared to arrays and other data structures:\\n\\nLooking at this specific example, my understanding is that the approach using the the `ListNode` function on line 3 is an older way of using JavaScript. With ES6, we will mostly use [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\\n\\nThis example would be clearer to me if they used this more modern object-oriented approach.\\n\\nI found this freeCodeCamp video and the codepen in the description to be most helpful:\\nhttps://www.youtube.com/watch?v=9YddVVsdG5A\\n\\n(data structures are new to me, so please fact-check me and let me know about any mistakes)"
                    },
                    {
                        "username": "Aryan_Arya",
                        "content": "That will increase the time complexity of the solution."
                    },
                    {
                        "username": "Prince_Vijay",
                        "content": "I didn\\'t understand the class given above. can anyone explain.\\n"
                    },
                    {
                        "username": "zhang2012",
                        "content": "The ListNode class shows you how the linked list is defined for your chosen language. Take Python3 as an example. To define a linked list [1, 2, 4], you write \"l1 = ListNode(1,ListNode(2, ListNode(3, None)))\". Hence, to get the first value (the head) of l1, we do \"l1.val\"; to get second value, we do \"l1.next.val\"; and to get the third value, we do \"l1.next.next.val\""
                    },
                    {
                        "username": "vikaslinux",
                        "content": "Please explain the meaning of splicing.Should I modify the two linked lists and make the new list from the existing nodes or should I create new nodes for the merged linkes list."
                    },
                    {
                        "username": "erenyeager1",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity  ,, no way you can solve it with o(1) time complexity , you have to run over the 2 lists so it would be at least o(n) time "
                    },
                    {
                        "username": "ronnyvega",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity, right?"
                    },
                    {
                        "username": "rohitk_chef15",
                        "content": "[@shibvarghab](/shibvarghab)  can you please explain more about it how to reduce time complexity ,\\nAs we have to traverse the list basically same we do in array how willl it be diff from array\\n please explain "
                    },
                    {
                        "username": "Ursae",
                        "content": "[@shibvarghab](/shibvarghab) How can it be solved in O(1) I wonder? You still have to traverse the lists, don\\'t you? And traversing is dependent on the length, that makes it O(N) at least"
                    },
                    {
                        "username": "mliubiva",
                        "content": "[@a_hend0](/a_hend0) the question is still actual for other people who have the same problem)"
                    },
                    {
                        "username": "a_hend0",
                        "content": "[@Last_CodeBender](/Last_CodeBender)  i dont think hes still looking for the answer \\n"
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "Interweaving the two link lists without creating new memory. "
                    },
                    {
                        "username": "shibvarghab",
                        "content": "You need to create links between two given linked lists. Your goal should be to not use any extra space to merge the linked list. This question should be solved in O(1) time complexity. And that is the benefit of merging two linked lists over merging two arrays. "
                    },
                    {
                        "username": "finelliott",
                        "content": "I am wondering something similar."
                    },
                    {
                        "username": "abdelshokair",
                        "content": "Am i the only one who thinks this is a very vague requirement? Merging doesn\\'t necessarily mean they have to be in increasing order, which it seems it\\'s supposed to be. Seriously, write this stuff in the notes, so we don\\'t waste time."
                    },
                    {
                        "username": "dluan3",
                        "content": "somebody dont know how to read"
                    },
                    {
                        "username": "mng48301",
                        "content": "[@chazwinter](/chazwinter) exactly"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It literally says the new list should be sorted. The word sorted is even in bold. "
                    },
                    {
                        "username": "zenverak",
                        "content": "The examples given clear it up."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "\"merge\" means to combine the lists, and there\\'s a clear implication that the sorted order should be maintained. If you didn\\'t have to do that, you could just append one list to the other and call it a day, but that\\'s not what\\'s meant by merging."
                    },
                    {
                        "username": "cocokaribou",
                        "content": "hi I just started learning algorithm and here\\'s my question:\\nI\\'m using IDE to write main and run my code but don\\'t know what to input in the solution\\n\\nthe parameter of `mergeTwoLists()` is `ListNode` but in the Leetcode console the input goes like [1,2,4] [1,3,4] which seems like Array of Int??\\n\\nif anyone can tell me what main function would look like it would be really helpful\\n"
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "For anyone that\\'s stuck on this, the provided inputs for JavaScript/TypeScript are wrong. If you want to solve this problem in JS, you\\'ll have to convert the provided inputs into a linked list first."
                    },
                    {
                        "username": "adrianroman",
                        "content": "you can create a method to convert the input array into a linked list, then you can easily test in your own IDE with the input from leetcode, you can reuse that method for each linked list problem"
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "\nlet node1 = ListNode(1)\nlet node2 = ListNode(2)\nlet node3 = ListNode(3)\n\nnode1.next = node2\nnode2.next = node3\n\nlike this for example"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The syntax used to show the lists in the examples does look like an array, so it\\'s a little confusing, but they just mean that those are the values in the list. It might\\'ve been better if they\\'d notated the list like:\\n1 -> 2 -> 4"
                    },
                    {
                        "username": "reducingcodex",
                        "content": "https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\\n\\nFor those confuseed about the question, its explained better here.\\n\\nThe question isn\\'t explained well at all here."
                    },
                    {
                        "username": "wolfpackfitdev",
                        "content": "does anyone else get a NullPointerException when trying to reference val?"
                    },
                    {
                        "username": "ClassPython",
                        "content": "I also get null.\\n\\nIf I type   --> list1.val.  I get a null error. Can also visualize this by typing console.log(\\nlist1.val)\\n\\nBut if one types --> if (list1 !== null {  list1.val }  you will get the value, with no error. You can put a console.log(list1.val) inside the if statement to visualize.  i.e. -->  if (list1 !== null {  console.log(list1.val) }\\n\\nI\\'m not sure why it works this way."
                    },
                    {
                        "username": "The_Winter_Soldier",
                        "content": "Yes me \\nHow to solve this;"
                    },
                    {
                        "username": "Msey",
                        "content": "its definitely a medium question"
                    },
                    {
                        "username": "prakhar32",
                        "content": "[@devesh_kumar_kushwaha](/devesh_kumar_kushwaha)  Every champion was once a beginner!"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "[@SuperDeepBoy](/SuperDeepBoy)  then what are you doing here at leet code first of all learn some dsa first"
                    },
                    {
                        "username": "SuperDeepBoy",
                        "content": "Yeah I had never even heard of linked lists."
                    },
                    {
                        "username": "newdive",
                        "content": "I know the expected result is sorted is ascending order.\\n\\nbut the problem never state it specificially.\\n\\nI my opinion, sorted could be ascending or descending order.\\n\\nWhen i came across the term 'sorted', the first thing came into my mind was 'sorted in which order??? Do i have to figure out the order by myself??? These two list are sorted in same order??? blablabla... '\\n\\nI guess most people would take it as ascending order,  and it works in this situation.\\n\\nBut I think we should not adopt this kind of habitual thinking in our solution, which in practice could be very harmful.\\n\\nSo I strongly recommend that the problem be more specifically stated ."
                    },
                    {
                        "username": "Szymon5922",
                        "content": "Always check constraints section to get sure what data u can expect. \"Both list1 and list2 are sorted in non-decreasing order.\""
                    },
                    {
                        "username": "mng48301",
                        "content": "The description of the problem is fine. You should just read carefully. "
                    },
                    {
                        "username": "abhay_mnit22",
                        "content": " read contraints  its already mentioned that sorted in non-decending order "
                    },
                    {
                        "username": "alamick",
                        "content": "I completely agree. I\\'m surprised that this question is so popular, since I knew at a first glance that it was poorly written/stated/explained. "
                    },
                    {
                        "username": "chazwinter",
                        "content": "The problem states that you are given two sorted lists, and you should create a sorted list. Sorted means sorted, so the nature of your sorted list should be the same as the given sorted lists. The directions then go on to state that the given lists are non-decreasing, meaning your merged should be the same, given that sorted means sorted."
                    },
                    {
                        "username": "alexsherbuck",
                        "content": "Based on the documentation in the code, the edge cases may be improperly documented.\\n\\nThis explicitly states that this function returns a `ListNode`. The definition of a `ListNode` shows that `val` is set to whatever is passed or `0`. \\n\\n ```\\n/** javascript\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {    \\n```\\n\\nThe second sample test case is:\\n```\\nlist1 = []\\nlist2 =[]\\nOutput\\n[0]\\nExpected\\n[]\\n```\\nIf you build the function to satisfy the documentation this test case will fail every time.\\n\\nTo me, this needs to change to `@return {ListNode | null } ` but because of the test environment, `null === []` for the purposes of the \\'Expected` block"
                    },
                    {
                        "username": "AlanOnym",
                        "content": "I did not know what to put as the default case, thanks for the clarification"
                    },
                    {
                        "username": "bolemax",
                        "content": "`list1 = []` denotes an empty linked list, i.e. one which has no nodes. It has nothing to do with the definition of the node. I think that's pretty clear."
                    },
                    {
                        "username": "p4stoboy",
                        "content": "Thank you."
                    },
                    {
                        "username": "itsindigo",
                        "content": "+1, was stuck for a while trying to get that test case to pass"
                    }
                ]
            },
            {
                "id": 1575919,
                "content": [
                    {
                        "username": "Norie",
                        "content": "WHY CANT WE USE CONCAT and SORT HERE, ANYbody?"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/\\n"
                    },
                    {
                        "username": "Aravind_VC",
                        "content": "given list is not array it is linked list sot sort work with array not with linked list"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Bro this question is of linked list "
                    },
                    {
                        "username": "dadiprasanth",
                        "content": "[@mokotozett](/mokotozett)  bro it is linked list we have to transverse using next key word and we can use val key to find the value "
                    },
                    {
                        "username": "mokotozett",
                        "content": "I had the same question.... list1 + list2... then sort().... \\nI keep looking at the problem. Makes sense to use nodes if the output order is important or special. But the problem says Output: [1,1,2,3,4,4] without any regard to placing. Since we are dealing with int, sort() will do. What am i missing? Im just moving on to another one lol. glhf"
                    },
                    {
                        "username": "1260",
                        "content": "[@LavajavaLux](/LavajavaLux) This is in O(N) space and in general bad for LinkedList problems which usually require O(1)."
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "I first added all values to an array then sorted it, then initialized ListNodes from the array"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "`Lists` are note `Arrays`."
                    },
                    {
                        "username": "MoSaleh8890",
                        "content": "[@andrewcleonard](/andrewcleonard) So informative. Thanks Andrew;"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "this is link list so u can\\'t use that function............"
                    },
                    {
                        "username": "valmiki20",
                        "content": "so you plan to implement CONCAT and SORT for ListNode class? then you are good."
                    },
                    {
                        "username": "gregory_solomon",
                        "content": "This are linked lists, so a bunch of pointers that point to things, not actual values, it is NOT an array."
                    },
                    {
                        "username": "andrewcleonard",
                        "content": "JavaScript response to your question:\\n\\n`list1` and `list2` are objects, **NOT** arrays. It confused me that the examples here show `list1` and `list2` as arrays. \\n\\nIf you `console.log(JSON.stringify(list1))`, you get:\\n\\n```\\nconst list1 = {\\n\\tval: 1,\\n\\tnext: {\\n\\t\\tval: 2,\\n\\t\\tnext: {\\n\\t\\t\\tval: 4,\\n\\t\\t\\tnext: null,\\n\\t\\t},\\n\\t},\\n};\\n```\\n\\nJavaScript has \"standard built-in objects.\" [Arrays are one of JavaScript\\'s built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\\n\\nOn the other hand, linked lists are not part of JavaScript. [Linked lists are a very common data structure used in many programming languages.](https://en.wikipedia.org/wiki/Linked_list) To use a linked list in JavaScript, you must build it yourself on top of vanilla JavaScript. Linked lists have advantages/disadvantages compared to arrays and other data structures:\\n\\nLooking at this specific example, my understanding is that the approach using the the `ListNode` function on line 3 is an older way of using JavaScript. With ES6, we will mostly use [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\\n\\nThis example would be clearer to me if they used this more modern object-oriented approach.\\n\\nI found this freeCodeCamp video and the codepen in the description to be most helpful:\\nhttps://www.youtube.com/watch?v=9YddVVsdG5A\\n\\n(data structures are new to me, so please fact-check me and let me know about any mistakes)"
                    },
                    {
                        "username": "Aryan_Arya",
                        "content": "That will increase the time complexity of the solution."
                    },
                    {
                        "username": "Prince_Vijay",
                        "content": "I didn\\'t understand the class given above. can anyone explain.\\n"
                    },
                    {
                        "username": "zhang2012",
                        "content": "The ListNode class shows you how the linked list is defined for your chosen language. Take Python3 as an example. To define a linked list [1, 2, 4], you write \"l1 = ListNode(1,ListNode(2, ListNode(3, None)))\". Hence, to get the first value (the head) of l1, we do \"l1.val\"; to get second value, we do \"l1.next.val\"; and to get the third value, we do \"l1.next.next.val\""
                    },
                    {
                        "username": "vikaslinux",
                        "content": "Please explain the meaning of splicing.Should I modify the two linked lists and make the new list from the existing nodes or should I create new nodes for the merged linkes list."
                    },
                    {
                        "username": "erenyeager1",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity  ,, no way you can solve it with o(1) time complexity , you have to run over the 2 lists so it would be at least o(n) time "
                    },
                    {
                        "username": "ronnyvega",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity, right?"
                    },
                    {
                        "username": "rohitk_chef15",
                        "content": "[@shibvarghab](/shibvarghab)  can you please explain more about it how to reduce time complexity ,\\nAs we have to traverse the list basically same we do in array how willl it be diff from array\\n please explain "
                    },
                    {
                        "username": "Ursae",
                        "content": "[@shibvarghab](/shibvarghab) How can it be solved in O(1) I wonder? You still have to traverse the lists, don\\'t you? And traversing is dependent on the length, that makes it O(N) at least"
                    },
                    {
                        "username": "mliubiva",
                        "content": "[@a_hend0](/a_hend0) the question is still actual for other people who have the same problem)"
                    },
                    {
                        "username": "a_hend0",
                        "content": "[@Last_CodeBender](/Last_CodeBender)  i dont think hes still looking for the answer \\n"
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "Interweaving the two link lists without creating new memory. "
                    },
                    {
                        "username": "shibvarghab",
                        "content": "You need to create links between two given linked lists. Your goal should be to not use any extra space to merge the linked list. This question should be solved in O(1) time complexity. And that is the benefit of merging two linked lists over merging two arrays. "
                    },
                    {
                        "username": "finelliott",
                        "content": "I am wondering something similar."
                    },
                    {
                        "username": "abdelshokair",
                        "content": "Am i the only one who thinks this is a very vague requirement? Merging doesn\\'t necessarily mean they have to be in increasing order, which it seems it\\'s supposed to be. Seriously, write this stuff in the notes, so we don\\'t waste time."
                    },
                    {
                        "username": "dluan3",
                        "content": "somebody dont know how to read"
                    },
                    {
                        "username": "mng48301",
                        "content": "[@chazwinter](/chazwinter) exactly"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It literally says the new list should be sorted. The word sorted is even in bold. "
                    },
                    {
                        "username": "zenverak",
                        "content": "The examples given clear it up."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "\"merge\" means to combine the lists, and there\\'s a clear implication that the sorted order should be maintained. If you didn\\'t have to do that, you could just append one list to the other and call it a day, but that\\'s not what\\'s meant by merging."
                    },
                    {
                        "username": "cocokaribou",
                        "content": "hi I just started learning algorithm and here\\'s my question:\\nI\\'m using IDE to write main and run my code but don\\'t know what to input in the solution\\n\\nthe parameter of `mergeTwoLists()` is `ListNode` but in the Leetcode console the input goes like [1,2,4] [1,3,4] which seems like Array of Int??\\n\\nif anyone can tell me what main function would look like it would be really helpful\\n"
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "For anyone that\\'s stuck on this, the provided inputs for JavaScript/TypeScript are wrong. If you want to solve this problem in JS, you\\'ll have to convert the provided inputs into a linked list first."
                    },
                    {
                        "username": "adrianroman",
                        "content": "you can create a method to convert the input array into a linked list, then you can easily test in your own IDE with the input from leetcode, you can reuse that method for each linked list problem"
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "\nlet node1 = ListNode(1)\nlet node2 = ListNode(2)\nlet node3 = ListNode(3)\n\nnode1.next = node2\nnode2.next = node3\n\nlike this for example"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The syntax used to show the lists in the examples does look like an array, so it\\'s a little confusing, but they just mean that those are the values in the list. It might\\'ve been better if they\\'d notated the list like:\\n1 -> 2 -> 4"
                    },
                    {
                        "username": "reducingcodex",
                        "content": "https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\\n\\nFor those confuseed about the question, its explained better here.\\n\\nThe question isn\\'t explained well at all here."
                    },
                    {
                        "username": "wolfpackfitdev",
                        "content": "does anyone else get a NullPointerException when trying to reference val?"
                    },
                    {
                        "username": "ClassPython",
                        "content": "I also get null.\\n\\nIf I type   --> list1.val.  I get a null error. Can also visualize this by typing console.log(\\nlist1.val)\\n\\nBut if one types --> if (list1 !== null {  list1.val }  you will get the value, with no error. You can put a console.log(list1.val) inside the if statement to visualize.  i.e. -->  if (list1 !== null {  console.log(list1.val) }\\n\\nI\\'m not sure why it works this way."
                    },
                    {
                        "username": "The_Winter_Soldier",
                        "content": "Yes me \\nHow to solve this;"
                    },
                    {
                        "username": "Msey",
                        "content": "its definitely a medium question"
                    },
                    {
                        "username": "prakhar32",
                        "content": "[@devesh_kumar_kushwaha](/devesh_kumar_kushwaha)  Every champion was once a beginner!"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "[@SuperDeepBoy](/SuperDeepBoy)  then what are you doing here at leet code first of all learn some dsa first"
                    },
                    {
                        "username": "SuperDeepBoy",
                        "content": "Yeah I had never even heard of linked lists."
                    },
                    {
                        "username": "newdive",
                        "content": "I know the expected result is sorted is ascending order.\\n\\nbut the problem never state it specificially.\\n\\nI my opinion, sorted could be ascending or descending order.\\n\\nWhen i came across the term 'sorted', the first thing came into my mind was 'sorted in which order??? Do i have to figure out the order by myself??? These two list are sorted in same order??? blablabla... '\\n\\nI guess most people would take it as ascending order,  and it works in this situation.\\n\\nBut I think we should not adopt this kind of habitual thinking in our solution, which in practice could be very harmful.\\n\\nSo I strongly recommend that the problem be more specifically stated ."
                    },
                    {
                        "username": "Szymon5922",
                        "content": "Always check constraints section to get sure what data u can expect. \"Both list1 and list2 are sorted in non-decreasing order.\""
                    },
                    {
                        "username": "mng48301",
                        "content": "The description of the problem is fine. You should just read carefully. "
                    },
                    {
                        "username": "abhay_mnit22",
                        "content": " read contraints  its already mentioned that sorted in non-decending order "
                    },
                    {
                        "username": "alamick",
                        "content": "I completely agree. I\\'m surprised that this question is so popular, since I knew at a first glance that it was poorly written/stated/explained. "
                    },
                    {
                        "username": "chazwinter",
                        "content": "The problem states that you are given two sorted lists, and you should create a sorted list. Sorted means sorted, so the nature of your sorted list should be the same as the given sorted lists. The directions then go on to state that the given lists are non-decreasing, meaning your merged should be the same, given that sorted means sorted."
                    },
                    {
                        "username": "alexsherbuck",
                        "content": "Based on the documentation in the code, the edge cases may be improperly documented.\\n\\nThis explicitly states that this function returns a `ListNode`. The definition of a `ListNode` shows that `val` is set to whatever is passed or `0`. \\n\\n ```\\n/** javascript\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {    \\n```\\n\\nThe second sample test case is:\\n```\\nlist1 = []\\nlist2 =[]\\nOutput\\n[0]\\nExpected\\n[]\\n```\\nIf you build the function to satisfy the documentation this test case will fail every time.\\n\\nTo me, this needs to change to `@return {ListNode | null } ` but because of the test environment, `null === []` for the purposes of the \\'Expected` block"
                    },
                    {
                        "username": "AlanOnym",
                        "content": "I did not know what to put as the default case, thanks for the clarification"
                    },
                    {
                        "username": "bolemax",
                        "content": "`list1 = []` denotes an empty linked list, i.e. one which has no nodes. It has nothing to do with the definition of the node. I think that's pretty clear."
                    },
                    {
                        "username": "p4stoboy",
                        "content": "Thank you."
                    },
                    {
                        "username": "itsindigo",
                        "content": "+1, was stuck for a while trying to get that test case to pass"
                    }
                ]
            },
            {
                "id": 1569308,
                "content": [
                    {
                        "username": "Norie",
                        "content": "WHY CANT WE USE CONCAT and SORT HERE, ANYbody?"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/\\n"
                    },
                    {
                        "username": "Aravind_VC",
                        "content": "given list is not array it is linked list sot sort work with array not with linked list"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Bro this question is of linked list "
                    },
                    {
                        "username": "dadiprasanth",
                        "content": "[@mokotozett](/mokotozett)  bro it is linked list we have to transverse using next key word and we can use val key to find the value "
                    },
                    {
                        "username": "mokotozett",
                        "content": "I had the same question.... list1 + list2... then sort().... \\nI keep looking at the problem. Makes sense to use nodes if the output order is important or special. But the problem says Output: [1,1,2,3,4,4] without any regard to placing. Since we are dealing with int, sort() will do. What am i missing? Im just moving on to another one lol. glhf"
                    },
                    {
                        "username": "1260",
                        "content": "[@LavajavaLux](/LavajavaLux) This is in O(N) space and in general bad for LinkedList problems which usually require O(1)."
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "I first added all values to an array then sorted it, then initialized ListNodes from the array"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "`Lists` are note `Arrays`."
                    },
                    {
                        "username": "MoSaleh8890",
                        "content": "[@andrewcleonard](/andrewcleonard) So informative. Thanks Andrew;"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "this is link list so u can\\'t use that function............"
                    },
                    {
                        "username": "valmiki20",
                        "content": "so you plan to implement CONCAT and SORT for ListNode class? then you are good."
                    },
                    {
                        "username": "gregory_solomon",
                        "content": "This are linked lists, so a bunch of pointers that point to things, not actual values, it is NOT an array."
                    },
                    {
                        "username": "andrewcleonard",
                        "content": "JavaScript response to your question:\\n\\n`list1` and `list2` are objects, **NOT** arrays. It confused me that the examples here show `list1` and `list2` as arrays. \\n\\nIf you `console.log(JSON.stringify(list1))`, you get:\\n\\n```\\nconst list1 = {\\n\\tval: 1,\\n\\tnext: {\\n\\t\\tval: 2,\\n\\t\\tnext: {\\n\\t\\t\\tval: 4,\\n\\t\\t\\tnext: null,\\n\\t\\t},\\n\\t},\\n};\\n```\\n\\nJavaScript has \"standard built-in objects.\" [Arrays are one of JavaScript\\'s built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\\n\\nOn the other hand, linked lists are not part of JavaScript. [Linked lists are a very common data structure used in many programming languages.](https://en.wikipedia.org/wiki/Linked_list) To use a linked list in JavaScript, you must build it yourself on top of vanilla JavaScript. Linked lists have advantages/disadvantages compared to arrays and other data structures:\\n\\nLooking at this specific example, my understanding is that the approach using the the `ListNode` function on line 3 is an older way of using JavaScript. With ES6, we will mostly use [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\\n\\nThis example would be clearer to me if they used this more modern object-oriented approach.\\n\\nI found this freeCodeCamp video and the codepen in the description to be most helpful:\\nhttps://www.youtube.com/watch?v=9YddVVsdG5A\\n\\n(data structures are new to me, so please fact-check me and let me know about any mistakes)"
                    },
                    {
                        "username": "Aryan_Arya",
                        "content": "That will increase the time complexity of the solution."
                    },
                    {
                        "username": "Prince_Vijay",
                        "content": "I didn\\'t understand the class given above. can anyone explain.\\n"
                    },
                    {
                        "username": "zhang2012",
                        "content": "The ListNode class shows you how the linked list is defined for your chosen language. Take Python3 as an example. To define a linked list [1, 2, 4], you write \"l1 = ListNode(1,ListNode(2, ListNode(3, None)))\". Hence, to get the first value (the head) of l1, we do \"l1.val\"; to get second value, we do \"l1.next.val\"; and to get the third value, we do \"l1.next.next.val\""
                    },
                    {
                        "username": "vikaslinux",
                        "content": "Please explain the meaning of splicing.Should I modify the two linked lists and make the new list from the existing nodes or should I create new nodes for the merged linkes list."
                    },
                    {
                        "username": "erenyeager1",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity  ,, no way you can solve it with o(1) time complexity , you have to run over the 2 lists so it would be at least o(n) time "
                    },
                    {
                        "username": "ronnyvega",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity, right?"
                    },
                    {
                        "username": "rohitk_chef15",
                        "content": "[@shibvarghab](/shibvarghab)  can you please explain more about it how to reduce time complexity ,\\nAs we have to traverse the list basically same we do in array how willl it be diff from array\\n please explain "
                    },
                    {
                        "username": "Ursae",
                        "content": "[@shibvarghab](/shibvarghab) How can it be solved in O(1) I wonder? You still have to traverse the lists, don\\'t you? And traversing is dependent on the length, that makes it O(N) at least"
                    },
                    {
                        "username": "mliubiva",
                        "content": "[@a_hend0](/a_hend0) the question is still actual for other people who have the same problem)"
                    },
                    {
                        "username": "a_hend0",
                        "content": "[@Last_CodeBender](/Last_CodeBender)  i dont think hes still looking for the answer \\n"
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "Interweaving the two link lists without creating new memory. "
                    },
                    {
                        "username": "shibvarghab",
                        "content": "You need to create links between two given linked lists. Your goal should be to not use any extra space to merge the linked list. This question should be solved in O(1) time complexity. And that is the benefit of merging two linked lists over merging two arrays. "
                    },
                    {
                        "username": "finelliott",
                        "content": "I am wondering something similar."
                    },
                    {
                        "username": "abdelshokair",
                        "content": "Am i the only one who thinks this is a very vague requirement? Merging doesn\\'t necessarily mean they have to be in increasing order, which it seems it\\'s supposed to be. Seriously, write this stuff in the notes, so we don\\'t waste time."
                    },
                    {
                        "username": "dluan3",
                        "content": "somebody dont know how to read"
                    },
                    {
                        "username": "mng48301",
                        "content": "[@chazwinter](/chazwinter) exactly"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It literally says the new list should be sorted. The word sorted is even in bold. "
                    },
                    {
                        "username": "zenverak",
                        "content": "The examples given clear it up."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "\"merge\" means to combine the lists, and there\\'s a clear implication that the sorted order should be maintained. If you didn\\'t have to do that, you could just append one list to the other and call it a day, but that\\'s not what\\'s meant by merging."
                    },
                    {
                        "username": "cocokaribou",
                        "content": "hi I just started learning algorithm and here\\'s my question:\\nI\\'m using IDE to write main and run my code but don\\'t know what to input in the solution\\n\\nthe parameter of `mergeTwoLists()` is `ListNode` but in the Leetcode console the input goes like [1,2,4] [1,3,4] which seems like Array of Int??\\n\\nif anyone can tell me what main function would look like it would be really helpful\\n"
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "For anyone that\\'s stuck on this, the provided inputs for JavaScript/TypeScript are wrong. If you want to solve this problem in JS, you\\'ll have to convert the provided inputs into a linked list first."
                    },
                    {
                        "username": "adrianroman",
                        "content": "you can create a method to convert the input array into a linked list, then you can easily test in your own IDE with the input from leetcode, you can reuse that method for each linked list problem"
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "\nlet node1 = ListNode(1)\nlet node2 = ListNode(2)\nlet node3 = ListNode(3)\n\nnode1.next = node2\nnode2.next = node3\n\nlike this for example"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The syntax used to show the lists in the examples does look like an array, so it\\'s a little confusing, but they just mean that those are the values in the list. It might\\'ve been better if they\\'d notated the list like:\\n1 -> 2 -> 4"
                    },
                    {
                        "username": "reducingcodex",
                        "content": "https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\\n\\nFor those confuseed about the question, its explained better here.\\n\\nThe question isn\\'t explained well at all here."
                    },
                    {
                        "username": "wolfpackfitdev",
                        "content": "does anyone else get a NullPointerException when trying to reference val?"
                    },
                    {
                        "username": "ClassPython",
                        "content": "I also get null.\\n\\nIf I type   --> list1.val.  I get a null error. Can also visualize this by typing console.log(\\nlist1.val)\\n\\nBut if one types --> if (list1 !== null {  list1.val }  you will get the value, with no error. You can put a console.log(list1.val) inside the if statement to visualize.  i.e. -->  if (list1 !== null {  console.log(list1.val) }\\n\\nI\\'m not sure why it works this way."
                    },
                    {
                        "username": "The_Winter_Soldier",
                        "content": "Yes me \\nHow to solve this;"
                    },
                    {
                        "username": "Msey",
                        "content": "its definitely a medium question"
                    },
                    {
                        "username": "prakhar32",
                        "content": "[@devesh_kumar_kushwaha](/devesh_kumar_kushwaha)  Every champion was once a beginner!"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "[@SuperDeepBoy](/SuperDeepBoy)  then what are you doing here at leet code first of all learn some dsa first"
                    },
                    {
                        "username": "SuperDeepBoy",
                        "content": "Yeah I had never even heard of linked lists."
                    },
                    {
                        "username": "newdive",
                        "content": "I know the expected result is sorted is ascending order.\\n\\nbut the problem never state it specificially.\\n\\nI my opinion, sorted could be ascending or descending order.\\n\\nWhen i came across the term 'sorted', the first thing came into my mind was 'sorted in which order??? Do i have to figure out the order by myself??? These two list are sorted in same order??? blablabla... '\\n\\nI guess most people would take it as ascending order,  and it works in this situation.\\n\\nBut I think we should not adopt this kind of habitual thinking in our solution, which in practice could be very harmful.\\n\\nSo I strongly recommend that the problem be more specifically stated ."
                    },
                    {
                        "username": "Szymon5922",
                        "content": "Always check constraints section to get sure what data u can expect. \"Both list1 and list2 are sorted in non-decreasing order.\""
                    },
                    {
                        "username": "mng48301",
                        "content": "The description of the problem is fine. You should just read carefully. "
                    },
                    {
                        "username": "abhay_mnit22",
                        "content": " read contraints  its already mentioned that sorted in non-decending order "
                    },
                    {
                        "username": "alamick",
                        "content": "I completely agree. I\\'m surprised that this question is so popular, since I knew at a first glance that it was poorly written/stated/explained. "
                    },
                    {
                        "username": "chazwinter",
                        "content": "The problem states that you are given two sorted lists, and you should create a sorted list. Sorted means sorted, so the nature of your sorted list should be the same as the given sorted lists. The directions then go on to state that the given lists are non-decreasing, meaning your merged should be the same, given that sorted means sorted."
                    },
                    {
                        "username": "alexsherbuck",
                        "content": "Based on the documentation in the code, the edge cases may be improperly documented.\\n\\nThis explicitly states that this function returns a `ListNode`. The definition of a `ListNode` shows that `val` is set to whatever is passed or `0`. \\n\\n ```\\n/** javascript\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {    \\n```\\n\\nThe second sample test case is:\\n```\\nlist1 = []\\nlist2 =[]\\nOutput\\n[0]\\nExpected\\n[]\\n```\\nIf you build the function to satisfy the documentation this test case will fail every time.\\n\\nTo me, this needs to change to `@return {ListNode | null } ` but because of the test environment, `null === []` for the purposes of the \\'Expected` block"
                    },
                    {
                        "username": "AlanOnym",
                        "content": "I did not know what to put as the default case, thanks for the clarification"
                    },
                    {
                        "username": "bolemax",
                        "content": "`list1 = []` denotes an empty linked list, i.e. one which has no nodes. It has nothing to do with the definition of the node. I think that's pretty clear."
                    },
                    {
                        "username": "p4stoboy",
                        "content": "Thank you."
                    },
                    {
                        "username": "itsindigo",
                        "content": "+1, was stuck for a while trying to get that test case to pass"
                    }
                ]
            },
            {
                "id": 1715387,
                "content": [
                    {
                        "username": "Norie",
                        "content": "WHY CANT WE USE CONCAT and SORT HERE, ANYbody?"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/\\n"
                    },
                    {
                        "username": "Aravind_VC",
                        "content": "given list is not array it is linked list sot sort work with array not with linked list"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Bro this question is of linked list "
                    },
                    {
                        "username": "dadiprasanth",
                        "content": "[@mokotozett](/mokotozett)  bro it is linked list we have to transverse using next key word and we can use val key to find the value "
                    },
                    {
                        "username": "mokotozett",
                        "content": "I had the same question.... list1 + list2... then sort().... \\nI keep looking at the problem. Makes sense to use nodes if the output order is important or special. But the problem says Output: [1,1,2,3,4,4] without any regard to placing. Since we are dealing with int, sort() will do. What am i missing? Im just moving on to another one lol. glhf"
                    },
                    {
                        "username": "1260",
                        "content": "[@LavajavaLux](/LavajavaLux) This is in O(N) space and in general bad for LinkedList problems which usually require O(1)."
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "I first added all values to an array then sorted it, then initialized ListNodes from the array"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "`Lists` are note `Arrays`."
                    },
                    {
                        "username": "MoSaleh8890",
                        "content": "[@andrewcleonard](/andrewcleonard) So informative. Thanks Andrew;"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "this is link list so u can\\'t use that function............"
                    },
                    {
                        "username": "valmiki20",
                        "content": "so you plan to implement CONCAT and SORT for ListNode class? then you are good."
                    },
                    {
                        "username": "gregory_solomon",
                        "content": "This are linked lists, so a bunch of pointers that point to things, not actual values, it is NOT an array."
                    },
                    {
                        "username": "andrewcleonard",
                        "content": "JavaScript response to your question:\\n\\n`list1` and `list2` are objects, **NOT** arrays. It confused me that the examples here show `list1` and `list2` as arrays. \\n\\nIf you `console.log(JSON.stringify(list1))`, you get:\\n\\n```\\nconst list1 = {\\n\\tval: 1,\\n\\tnext: {\\n\\t\\tval: 2,\\n\\t\\tnext: {\\n\\t\\t\\tval: 4,\\n\\t\\t\\tnext: null,\\n\\t\\t},\\n\\t},\\n};\\n```\\n\\nJavaScript has \"standard built-in objects.\" [Arrays are one of JavaScript\\'s built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\\n\\nOn the other hand, linked lists are not part of JavaScript. [Linked lists are a very common data structure used in many programming languages.](https://en.wikipedia.org/wiki/Linked_list) To use a linked list in JavaScript, you must build it yourself on top of vanilla JavaScript. Linked lists have advantages/disadvantages compared to arrays and other data structures:\\n\\nLooking at this specific example, my understanding is that the approach using the the `ListNode` function on line 3 is an older way of using JavaScript. With ES6, we will mostly use [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\\n\\nThis example would be clearer to me if they used this more modern object-oriented approach.\\n\\nI found this freeCodeCamp video and the codepen in the description to be most helpful:\\nhttps://www.youtube.com/watch?v=9YddVVsdG5A\\n\\n(data structures are new to me, so please fact-check me and let me know about any mistakes)"
                    },
                    {
                        "username": "Aryan_Arya",
                        "content": "That will increase the time complexity of the solution."
                    },
                    {
                        "username": "Prince_Vijay",
                        "content": "I didn\\'t understand the class given above. can anyone explain.\\n"
                    },
                    {
                        "username": "zhang2012",
                        "content": "The ListNode class shows you how the linked list is defined for your chosen language. Take Python3 as an example. To define a linked list [1, 2, 4], you write \"l1 = ListNode(1,ListNode(2, ListNode(3, None)))\". Hence, to get the first value (the head) of l1, we do \"l1.val\"; to get second value, we do \"l1.next.val\"; and to get the third value, we do \"l1.next.next.val\""
                    },
                    {
                        "username": "vikaslinux",
                        "content": "Please explain the meaning of splicing.Should I modify the two linked lists and make the new list from the existing nodes or should I create new nodes for the merged linkes list."
                    },
                    {
                        "username": "erenyeager1",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity  ,, no way you can solve it with o(1) time complexity , you have to run over the 2 lists so it would be at least o(n) time "
                    },
                    {
                        "username": "ronnyvega",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity, right?"
                    },
                    {
                        "username": "rohitk_chef15",
                        "content": "[@shibvarghab](/shibvarghab)  can you please explain more about it how to reduce time complexity ,\\nAs we have to traverse the list basically same we do in array how willl it be diff from array\\n please explain "
                    },
                    {
                        "username": "Ursae",
                        "content": "[@shibvarghab](/shibvarghab) How can it be solved in O(1) I wonder? You still have to traverse the lists, don\\'t you? And traversing is dependent on the length, that makes it O(N) at least"
                    },
                    {
                        "username": "mliubiva",
                        "content": "[@a_hend0](/a_hend0) the question is still actual for other people who have the same problem)"
                    },
                    {
                        "username": "a_hend0",
                        "content": "[@Last_CodeBender](/Last_CodeBender)  i dont think hes still looking for the answer \\n"
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "Interweaving the two link lists without creating new memory. "
                    },
                    {
                        "username": "shibvarghab",
                        "content": "You need to create links between two given linked lists. Your goal should be to not use any extra space to merge the linked list. This question should be solved in O(1) time complexity. And that is the benefit of merging two linked lists over merging two arrays. "
                    },
                    {
                        "username": "finelliott",
                        "content": "I am wondering something similar."
                    },
                    {
                        "username": "abdelshokair",
                        "content": "Am i the only one who thinks this is a very vague requirement? Merging doesn\\'t necessarily mean they have to be in increasing order, which it seems it\\'s supposed to be. Seriously, write this stuff in the notes, so we don\\'t waste time."
                    },
                    {
                        "username": "dluan3",
                        "content": "somebody dont know how to read"
                    },
                    {
                        "username": "mng48301",
                        "content": "[@chazwinter](/chazwinter) exactly"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It literally says the new list should be sorted. The word sorted is even in bold. "
                    },
                    {
                        "username": "zenverak",
                        "content": "The examples given clear it up."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "\"merge\" means to combine the lists, and there\\'s a clear implication that the sorted order should be maintained. If you didn\\'t have to do that, you could just append one list to the other and call it a day, but that\\'s not what\\'s meant by merging."
                    },
                    {
                        "username": "cocokaribou",
                        "content": "hi I just started learning algorithm and here\\'s my question:\\nI\\'m using IDE to write main and run my code but don\\'t know what to input in the solution\\n\\nthe parameter of `mergeTwoLists()` is `ListNode` but in the Leetcode console the input goes like [1,2,4] [1,3,4] which seems like Array of Int??\\n\\nif anyone can tell me what main function would look like it would be really helpful\\n"
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "For anyone that\\'s stuck on this, the provided inputs for JavaScript/TypeScript are wrong. If you want to solve this problem in JS, you\\'ll have to convert the provided inputs into a linked list first."
                    },
                    {
                        "username": "adrianroman",
                        "content": "you can create a method to convert the input array into a linked list, then you can easily test in your own IDE with the input from leetcode, you can reuse that method for each linked list problem"
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "\nlet node1 = ListNode(1)\nlet node2 = ListNode(2)\nlet node3 = ListNode(3)\n\nnode1.next = node2\nnode2.next = node3\n\nlike this for example"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The syntax used to show the lists in the examples does look like an array, so it\\'s a little confusing, but they just mean that those are the values in the list. It might\\'ve been better if they\\'d notated the list like:\\n1 -> 2 -> 4"
                    },
                    {
                        "username": "reducingcodex",
                        "content": "https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\\n\\nFor those confuseed about the question, its explained better here.\\n\\nThe question isn\\'t explained well at all here."
                    },
                    {
                        "username": "wolfpackfitdev",
                        "content": "does anyone else get a NullPointerException when trying to reference val?"
                    },
                    {
                        "username": "ClassPython",
                        "content": "I also get null.\\n\\nIf I type   --> list1.val.  I get a null error. Can also visualize this by typing console.log(\\nlist1.val)\\n\\nBut if one types --> if (list1 !== null {  list1.val }  you will get the value, with no error. You can put a console.log(list1.val) inside the if statement to visualize.  i.e. -->  if (list1 !== null {  console.log(list1.val) }\\n\\nI\\'m not sure why it works this way."
                    },
                    {
                        "username": "The_Winter_Soldier",
                        "content": "Yes me \\nHow to solve this;"
                    },
                    {
                        "username": "Msey",
                        "content": "its definitely a medium question"
                    },
                    {
                        "username": "prakhar32",
                        "content": "[@devesh_kumar_kushwaha](/devesh_kumar_kushwaha)  Every champion was once a beginner!"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "[@SuperDeepBoy](/SuperDeepBoy)  then what are you doing here at leet code first of all learn some dsa first"
                    },
                    {
                        "username": "SuperDeepBoy",
                        "content": "Yeah I had never even heard of linked lists."
                    },
                    {
                        "username": "newdive",
                        "content": "I know the expected result is sorted is ascending order.\\n\\nbut the problem never state it specificially.\\n\\nI my opinion, sorted could be ascending or descending order.\\n\\nWhen i came across the term 'sorted', the first thing came into my mind was 'sorted in which order??? Do i have to figure out the order by myself??? These two list are sorted in same order??? blablabla... '\\n\\nI guess most people would take it as ascending order,  and it works in this situation.\\n\\nBut I think we should not adopt this kind of habitual thinking in our solution, which in practice could be very harmful.\\n\\nSo I strongly recommend that the problem be more specifically stated ."
                    },
                    {
                        "username": "Szymon5922",
                        "content": "Always check constraints section to get sure what data u can expect. \"Both list1 and list2 are sorted in non-decreasing order.\""
                    },
                    {
                        "username": "mng48301",
                        "content": "The description of the problem is fine. You should just read carefully. "
                    },
                    {
                        "username": "abhay_mnit22",
                        "content": " read contraints  its already mentioned that sorted in non-decending order "
                    },
                    {
                        "username": "alamick",
                        "content": "I completely agree. I\\'m surprised that this question is so popular, since I knew at a first glance that it was poorly written/stated/explained. "
                    },
                    {
                        "username": "chazwinter",
                        "content": "The problem states that you are given two sorted lists, and you should create a sorted list. Sorted means sorted, so the nature of your sorted list should be the same as the given sorted lists. The directions then go on to state that the given lists are non-decreasing, meaning your merged should be the same, given that sorted means sorted."
                    },
                    {
                        "username": "alexsherbuck",
                        "content": "Based on the documentation in the code, the edge cases may be improperly documented.\\n\\nThis explicitly states that this function returns a `ListNode`. The definition of a `ListNode` shows that `val` is set to whatever is passed or `0`. \\n\\n ```\\n/** javascript\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {    \\n```\\n\\nThe second sample test case is:\\n```\\nlist1 = []\\nlist2 =[]\\nOutput\\n[0]\\nExpected\\n[]\\n```\\nIf you build the function to satisfy the documentation this test case will fail every time.\\n\\nTo me, this needs to change to `@return {ListNode | null } ` but because of the test environment, `null === []` for the purposes of the \\'Expected` block"
                    },
                    {
                        "username": "AlanOnym",
                        "content": "I did not know what to put as the default case, thanks for the clarification"
                    },
                    {
                        "username": "bolemax",
                        "content": "`list1 = []` denotes an empty linked list, i.e. one which has no nodes. It has nothing to do with the definition of the node. I think that's pretty clear."
                    },
                    {
                        "username": "p4stoboy",
                        "content": "Thank you."
                    },
                    {
                        "username": "itsindigo",
                        "content": "+1, was stuck for a while trying to get that test case to pass"
                    }
                ]
            },
            {
                "id": 1830577,
                "content": [
                    {
                        "username": "Norie",
                        "content": "WHY CANT WE USE CONCAT and SORT HERE, ANYbody?"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/\\n"
                    },
                    {
                        "username": "Aravind_VC",
                        "content": "given list is not array it is linked list sot sort work with array not with linked list"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Bro this question is of linked list "
                    },
                    {
                        "username": "dadiprasanth",
                        "content": "[@mokotozett](/mokotozett)  bro it is linked list we have to transverse using next key word and we can use val key to find the value "
                    },
                    {
                        "username": "mokotozett",
                        "content": "I had the same question.... list1 + list2... then sort().... \\nI keep looking at the problem. Makes sense to use nodes if the output order is important or special. But the problem says Output: [1,1,2,3,4,4] without any regard to placing. Since we are dealing with int, sort() will do. What am i missing? Im just moving on to another one lol. glhf"
                    },
                    {
                        "username": "1260",
                        "content": "[@LavajavaLux](/LavajavaLux) This is in O(N) space and in general bad for LinkedList problems which usually require O(1)."
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "I first added all values to an array then sorted it, then initialized ListNodes from the array"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "`Lists` are note `Arrays`."
                    },
                    {
                        "username": "MoSaleh8890",
                        "content": "[@andrewcleonard](/andrewcleonard) So informative. Thanks Andrew;"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "this is link list so u can\\'t use that function............"
                    },
                    {
                        "username": "valmiki20",
                        "content": "so you plan to implement CONCAT and SORT for ListNode class? then you are good."
                    },
                    {
                        "username": "gregory_solomon",
                        "content": "This are linked lists, so a bunch of pointers that point to things, not actual values, it is NOT an array."
                    },
                    {
                        "username": "andrewcleonard",
                        "content": "JavaScript response to your question:\\n\\n`list1` and `list2` are objects, **NOT** arrays. It confused me that the examples here show `list1` and `list2` as arrays. \\n\\nIf you `console.log(JSON.stringify(list1))`, you get:\\n\\n```\\nconst list1 = {\\n\\tval: 1,\\n\\tnext: {\\n\\t\\tval: 2,\\n\\t\\tnext: {\\n\\t\\t\\tval: 4,\\n\\t\\t\\tnext: null,\\n\\t\\t},\\n\\t},\\n};\\n```\\n\\nJavaScript has \"standard built-in objects.\" [Arrays are one of JavaScript\\'s built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\\n\\nOn the other hand, linked lists are not part of JavaScript. [Linked lists are a very common data structure used in many programming languages.](https://en.wikipedia.org/wiki/Linked_list) To use a linked list in JavaScript, you must build it yourself on top of vanilla JavaScript. Linked lists have advantages/disadvantages compared to arrays and other data structures:\\n\\nLooking at this specific example, my understanding is that the approach using the the `ListNode` function on line 3 is an older way of using JavaScript. With ES6, we will mostly use [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\\n\\nThis example would be clearer to me if they used this more modern object-oriented approach.\\n\\nI found this freeCodeCamp video and the codepen in the description to be most helpful:\\nhttps://www.youtube.com/watch?v=9YddVVsdG5A\\n\\n(data structures are new to me, so please fact-check me and let me know about any mistakes)"
                    },
                    {
                        "username": "Aryan_Arya",
                        "content": "That will increase the time complexity of the solution."
                    },
                    {
                        "username": "Prince_Vijay",
                        "content": "I didn\\'t understand the class given above. can anyone explain.\\n"
                    },
                    {
                        "username": "zhang2012",
                        "content": "The ListNode class shows you how the linked list is defined for your chosen language. Take Python3 as an example. To define a linked list [1, 2, 4], you write \"l1 = ListNode(1,ListNode(2, ListNode(3, None)))\". Hence, to get the first value (the head) of l1, we do \"l1.val\"; to get second value, we do \"l1.next.val\"; and to get the third value, we do \"l1.next.next.val\""
                    },
                    {
                        "username": "vikaslinux",
                        "content": "Please explain the meaning of splicing.Should I modify the two linked lists and make the new list from the existing nodes or should I create new nodes for the merged linkes list."
                    },
                    {
                        "username": "erenyeager1",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity  ,, no way you can solve it with o(1) time complexity , you have to run over the 2 lists so it would be at least o(n) time "
                    },
                    {
                        "username": "ronnyvega",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity, right?"
                    },
                    {
                        "username": "rohitk_chef15",
                        "content": "[@shibvarghab](/shibvarghab)  can you please explain more about it how to reduce time complexity ,\\nAs we have to traverse the list basically same we do in array how willl it be diff from array\\n please explain "
                    },
                    {
                        "username": "Ursae",
                        "content": "[@shibvarghab](/shibvarghab) How can it be solved in O(1) I wonder? You still have to traverse the lists, don\\'t you? And traversing is dependent on the length, that makes it O(N) at least"
                    },
                    {
                        "username": "mliubiva",
                        "content": "[@a_hend0](/a_hend0) the question is still actual for other people who have the same problem)"
                    },
                    {
                        "username": "a_hend0",
                        "content": "[@Last_CodeBender](/Last_CodeBender)  i dont think hes still looking for the answer \\n"
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "Interweaving the two link lists without creating new memory. "
                    },
                    {
                        "username": "shibvarghab",
                        "content": "You need to create links between two given linked lists. Your goal should be to not use any extra space to merge the linked list. This question should be solved in O(1) time complexity. And that is the benefit of merging two linked lists over merging two arrays. "
                    },
                    {
                        "username": "finelliott",
                        "content": "I am wondering something similar."
                    },
                    {
                        "username": "abdelshokair",
                        "content": "Am i the only one who thinks this is a very vague requirement? Merging doesn\\'t necessarily mean they have to be in increasing order, which it seems it\\'s supposed to be. Seriously, write this stuff in the notes, so we don\\'t waste time."
                    },
                    {
                        "username": "dluan3",
                        "content": "somebody dont know how to read"
                    },
                    {
                        "username": "mng48301",
                        "content": "[@chazwinter](/chazwinter) exactly"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It literally says the new list should be sorted. The word sorted is even in bold. "
                    },
                    {
                        "username": "zenverak",
                        "content": "The examples given clear it up."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "\"merge\" means to combine the lists, and there\\'s a clear implication that the sorted order should be maintained. If you didn\\'t have to do that, you could just append one list to the other and call it a day, but that\\'s not what\\'s meant by merging."
                    },
                    {
                        "username": "cocokaribou",
                        "content": "hi I just started learning algorithm and here\\'s my question:\\nI\\'m using IDE to write main and run my code but don\\'t know what to input in the solution\\n\\nthe parameter of `mergeTwoLists()` is `ListNode` but in the Leetcode console the input goes like [1,2,4] [1,3,4] which seems like Array of Int??\\n\\nif anyone can tell me what main function would look like it would be really helpful\\n"
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "For anyone that\\'s stuck on this, the provided inputs for JavaScript/TypeScript are wrong. If you want to solve this problem in JS, you\\'ll have to convert the provided inputs into a linked list first."
                    },
                    {
                        "username": "adrianroman",
                        "content": "you can create a method to convert the input array into a linked list, then you can easily test in your own IDE with the input from leetcode, you can reuse that method for each linked list problem"
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "\nlet node1 = ListNode(1)\nlet node2 = ListNode(2)\nlet node3 = ListNode(3)\n\nnode1.next = node2\nnode2.next = node3\n\nlike this for example"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The syntax used to show the lists in the examples does look like an array, so it\\'s a little confusing, but they just mean that those are the values in the list. It might\\'ve been better if they\\'d notated the list like:\\n1 -> 2 -> 4"
                    },
                    {
                        "username": "reducingcodex",
                        "content": "https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\\n\\nFor those confuseed about the question, its explained better here.\\n\\nThe question isn\\'t explained well at all here."
                    },
                    {
                        "username": "wolfpackfitdev",
                        "content": "does anyone else get a NullPointerException when trying to reference val?"
                    },
                    {
                        "username": "ClassPython",
                        "content": "I also get null.\\n\\nIf I type   --> list1.val.  I get a null error. Can also visualize this by typing console.log(\\nlist1.val)\\n\\nBut if one types --> if (list1 !== null {  list1.val }  you will get the value, with no error. You can put a console.log(list1.val) inside the if statement to visualize.  i.e. -->  if (list1 !== null {  console.log(list1.val) }\\n\\nI\\'m not sure why it works this way."
                    },
                    {
                        "username": "The_Winter_Soldier",
                        "content": "Yes me \\nHow to solve this;"
                    },
                    {
                        "username": "Msey",
                        "content": "its definitely a medium question"
                    },
                    {
                        "username": "prakhar32",
                        "content": "[@devesh_kumar_kushwaha](/devesh_kumar_kushwaha)  Every champion was once a beginner!"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "[@SuperDeepBoy](/SuperDeepBoy)  then what are you doing here at leet code first of all learn some dsa first"
                    },
                    {
                        "username": "SuperDeepBoy",
                        "content": "Yeah I had never even heard of linked lists."
                    },
                    {
                        "username": "newdive",
                        "content": "I know the expected result is sorted is ascending order.\\n\\nbut the problem never state it specificially.\\n\\nI my opinion, sorted could be ascending or descending order.\\n\\nWhen i came across the term 'sorted', the first thing came into my mind was 'sorted in which order??? Do i have to figure out the order by myself??? These two list are sorted in same order??? blablabla... '\\n\\nI guess most people would take it as ascending order,  and it works in this situation.\\n\\nBut I think we should not adopt this kind of habitual thinking in our solution, which in practice could be very harmful.\\n\\nSo I strongly recommend that the problem be more specifically stated ."
                    },
                    {
                        "username": "Szymon5922",
                        "content": "Always check constraints section to get sure what data u can expect. \"Both list1 and list2 are sorted in non-decreasing order.\""
                    },
                    {
                        "username": "mng48301",
                        "content": "The description of the problem is fine. You should just read carefully. "
                    },
                    {
                        "username": "abhay_mnit22",
                        "content": " read contraints  its already mentioned that sorted in non-decending order "
                    },
                    {
                        "username": "alamick",
                        "content": "I completely agree. I\\'m surprised that this question is so popular, since I knew at a first glance that it was poorly written/stated/explained. "
                    },
                    {
                        "username": "chazwinter",
                        "content": "The problem states that you are given two sorted lists, and you should create a sorted list. Sorted means sorted, so the nature of your sorted list should be the same as the given sorted lists. The directions then go on to state that the given lists are non-decreasing, meaning your merged should be the same, given that sorted means sorted."
                    },
                    {
                        "username": "alexsherbuck",
                        "content": "Based on the documentation in the code, the edge cases may be improperly documented.\\n\\nThis explicitly states that this function returns a `ListNode`. The definition of a `ListNode` shows that `val` is set to whatever is passed or `0`. \\n\\n ```\\n/** javascript\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {    \\n```\\n\\nThe second sample test case is:\\n```\\nlist1 = []\\nlist2 =[]\\nOutput\\n[0]\\nExpected\\n[]\\n```\\nIf you build the function to satisfy the documentation this test case will fail every time.\\n\\nTo me, this needs to change to `@return {ListNode | null } ` but because of the test environment, `null === []` for the purposes of the \\'Expected` block"
                    },
                    {
                        "username": "AlanOnym",
                        "content": "I did not know what to put as the default case, thanks for the clarification"
                    },
                    {
                        "username": "bolemax",
                        "content": "`list1 = []` denotes an empty linked list, i.e. one which has no nodes. It has nothing to do with the definition of the node. I think that's pretty clear."
                    },
                    {
                        "username": "p4stoboy",
                        "content": "Thank you."
                    },
                    {
                        "username": "itsindigo",
                        "content": "+1, was stuck for a while trying to get that test case to pass"
                    }
                ]
            },
            {
                "id": 1566234,
                "content": [
                    {
                        "username": "Norie",
                        "content": "WHY CANT WE USE CONCAT and SORT HERE, ANYbody?"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/\\n"
                    },
                    {
                        "username": "Aravind_VC",
                        "content": "given list is not array it is linked list sot sort work with array not with linked list"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Bro this question is of linked list "
                    },
                    {
                        "username": "dadiprasanth",
                        "content": "[@mokotozett](/mokotozett)  bro it is linked list we have to transverse using next key word and we can use val key to find the value "
                    },
                    {
                        "username": "mokotozett",
                        "content": "I had the same question.... list1 + list2... then sort().... \\nI keep looking at the problem. Makes sense to use nodes if the output order is important or special. But the problem says Output: [1,1,2,3,4,4] without any regard to placing. Since we are dealing with int, sort() will do. What am i missing? Im just moving on to another one lol. glhf"
                    },
                    {
                        "username": "1260",
                        "content": "[@LavajavaLux](/LavajavaLux) This is in O(N) space and in general bad for LinkedList problems which usually require O(1)."
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "I first added all values to an array then sorted it, then initialized ListNodes from the array"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "`Lists` are note `Arrays`."
                    },
                    {
                        "username": "MoSaleh8890",
                        "content": "[@andrewcleonard](/andrewcleonard) So informative. Thanks Andrew;"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "this is link list so u can\\'t use that function............"
                    },
                    {
                        "username": "valmiki20",
                        "content": "so you plan to implement CONCAT and SORT for ListNode class? then you are good."
                    },
                    {
                        "username": "gregory_solomon",
                        "content": "This are linked lists, so a bunch of pointers that point to things, not actual values, it is NOT an array."
                    },
                    {
                        "username": "andrewcleonard",
                        "content": "JavaScript response to your question:\\n\\n`list1` and `list2` are objects, **NOT** arrays. It confused me that the examples here show `list1` and `list2` as arrays. \\n\\nIf you `console.log(JSON.stringify(list1))`, you get:\\n\\n```\\nconst list1 = {\\n\\tval: 1,\\n\\tnext: {\\n\\t\\tval: 2,\\n\\t\\tnext: {\\n\\t\\t\\tval: 4,\\n\\t\\t\\tnext: null,\\n\\t\\t},\\n\\t},\\n};\\n```\\n\\nJavaScript has \"standard built-in objects.\" [Arrays are one of JavaScript\\'s built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\\n\\nOn the other hand, linked lists are not part of JavaScript. [Linked lists are a very common data structure used in many programming languages.](https://en.wikipedia.org/wiki/Linked_list) To use a linked list in JavaScript, you must build it yourself on top of vanilla JavaScript. Linked lists have advantages/disadvantages compared to arrays and other data structures:\\n\\nLooking at this specific example, my understanding is that the approach using the the `ListNode` function on line 3 is an older way of using JavaScript. With ES6, we will mostly use [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\\n\\nThis example would be clearer to me if they used this more modern object-oriented approach.\\n\\nI found this freeCodeCamp video and the codepen in the description to be most helpful:\\nhttps://www.youtube.com/watch?v=9YddVVsdG5A\\n\\n(data structures are new to me, so please fact-check me and let me know about any mistakes)"
                    },
                    {
                        "username": "Aryan_Arya",
                        "content": "That will increase the time complexity of the solution."
                    },
                    {
                        "username": "Prince_Vijay",
                        "content": "I didn\\'t understand the class given above. can anyone explain.\\n"
                    },
                    {
                        "username": "zhang2012",
                        "content": "The ListNode class shows you how the linked list is defined for your chosen language. Take Python3 as an example. To define a linked list [1, 2, 4], you write \"l1 = ListNode(1,ListNode(2, ListNode(3, None)))\". Hence, to get the first value (the head) of l1, we do \"l1.val\"; to get second value, we do \"l1.next.val\"; and to get the third value, we do \"l1.next.next.val\""
                    },
                    {
                        "username": "vikaslinux",
                        "content": "Please explain the meaning of splicing.Should I modify the two linked lists and make the new list from the existing nodes or should I create new nodes for the merged linkes list."
                    },
                    {
                        "username": "erenyeager1",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity  ,, no way you can solve it with o(1) time complexity , you have to run over the 2 lists so it would be at least o(n) time "
                    },
                    {
                        "username": "ronnyvega",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity, right?"
                    },
                    {
                        "username": "rohitk_chef15",
                        "content": "[@shibvarghab](/shibvarghab)  can you please explain more about it how to reduce time complexity ,\\nAs we have to traverse the list basically same we do in array how willl it be diff from array\\n please explain "
                    },
                    {
                        "username": "Ursae",
                        "content": "[@shibvarghab](/shibvarghab) How can it be solved in O(1) I wonder? You still have to traverse the lists, don\\'t you? And traversing is dependent on the length, that makes it O(N) at least"
                    },
                    {
                        "username": "mliubiva",
                        "content": "[@a_hend0](/a_hend0) the question is still actual for other people who have the same problem)"
                    },
                    {
                        "username": "a_hend0",
                        "content": "[@Last_CodeBender](/Last_CodeBender)  i dont think hes still looking for the answer \\n"
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "Interweaving the two link lists without creating new memory. "
                    },
                    {
                        "username": "shibvarghab",
                        "content": "You need to create links between two given linked lists. Your goal should be to not use any extra space to merge the linked list. This question should be solved in O(1) time complexity. And that is the benefit of merging two linked lists over merging two arrays. "
                    },
                    {
                        "username": "finelliott",
                        "content": "I am wondering something similar."
                    },
                    {
                        "username": "abdelshokair",
                        "content": "Am i the only one who thinks this is a very vague requirement? Merging doesn\\'t necessarily mean they have to be in increasing order, which it seems it\\'s supposed to be. Seriously, write this stuff in the notes, so we don\\'t waste time."
                    },
                    {
                        "username": "dluan3",
                        "content": "somebody dont know how to read"
                    },
                    {
                        "username": "mng48301",
                        "content": "[@chazwinter](/chazwinter) exactly"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It literally says the new list should be sorted. The word sorted is even in bold. "
                    },
                    {
                        "username": "zenverak",
                        "content": "The examples given clear it up."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "\"merge\" means to combine the lists, and there\\'s a clear implication that the sorted order should be maintained. If you didn\\'t have to do that, you could just append one list to the other and call it a day, but that\\'s not what\\'s meant by merging."
                    },
                    {
                        "username": "cocokaribou",
                        "content": "hi I just started learning algorithm and here\\'s my question:\\nI\\'m using IDE to write main and run my code but don\\'t know what to input in the solution\\n\\nthe parameter of `mergeTwoLists()` is `ListNode` but in the Leetcode console the input goes like [1,2,4] [1,3,4] which seems like Array of Int??\\n\\nif anyone can tell me what main function would look like it would be really helpful\\n"
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "For anyone that\\'s stuck on this, the provided inputs for JavaScript/TypeScript are wrong. If you want to solve this problem in JS, you\\'ll have to convert the provided inputs into a linked list first."
                    },
                    {
                        "username": "adrianroman",
                        "content": "you can create a method to convert the input array into a linked list, then you can easily test in your own IDE with the input from leetcode, you can reuse that method for each linked list problem"
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "\nlet node1 = ListNode(1)\nlet node2 = ListNode(2)\nlet node3 = ListNode(3)\n\nnode1.next = node2\nnode2.next = node3\n\nlike this for example"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The syntax used to show the lists in the examples does look like an array, so it\\'s a little confusing, but they just mean that those are the values in the list. It might\\'ve been better if they\\'d notated the list like:\\n1 -> 2 -> 4"
                    },
                    {
                        "username": "reducingcodex",
                        "content": "https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\\n\\nFor those confuseed about the question, its explained better here.\\n\\nThe question isn\\'t explained well at all here."
                    },
                    {
                        "username": "wolfpackfitdev",
                        "content": "does anyone else get a NullPointerException when trying to reference val?"
                    },
                    {
                        "username": "ClassPython",
                        "content": "I also get null.\\n\\nIf I type   --> list1.val.  I get a null error. Can also visualize this by typing console.log(\\nlist1.val)\\n\\nBut if one types --> if (list1 !== null {  list1.val }  you will get the value, with no error. You can put a console.log(list1.val) inside the if statement to visualize.  i.e. -->  if (list1 !== null {  console.log(list1.val) }\\n\\nI\\'m not sure why it works this way."
                    },
                    {
                        "username": "The_Winter_Soldier",
                        "content": "Yes me \\nHow to solve this;"
                    },
                    {
                        "username": "Msey",
                        "content": "its definitely a medium question"
                    },
                    {
                        "username": "prakhar32",
                        "content": "[@devesh_kumar_kushwaha](/devesh_kumar_kushwaha)  Every champion was once a beginner!"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "[@SuperDeepBoy](/SuperDeepBoy)  then what are you doing here at leet code first of all learn some dsa first"
                    },
                    {
                        "username": "SuperDeepBoy",
                        "content": "Yeah I had never even heard of linked lists."
                    },
                    {
                        "username": "newdive",
                        "content": "I know the expected result is sorted is ascending order.\\n\\nbut the problem never state it specificially.\\n\\nI my opinion, sorted could be ascending or descending order.\\n\\nWhen i came across the term 'sorted', the first thing came into my mind was 'sorted in which order??? Do i have to figure out the order by myself??? These two list are sorted in same order??? blablabla... '\\n\\nI guess most people would take it as ascending order,  and it works in this situation.\\n\\nBut I think we should not adopt this kind of habitual thinking in our solution, which in practice could be very harmful.\\n\\nSo I strongly recommend that the problem be more specifically stated ."
                    },
                    {
                        "username": "Szymon5922",
                        "content": "Always check constraints section to get sure what data u can expect. \"Both list1 and list2 are sorted in non-decreasing order.\""
                    },
                    {
                        "username": "mng48301",
                        "content": "The description of the problem is fine. You should just read carefully. "
                    },
                    {
                        "username": "abhay_mnit22",
                        "content": " read contraints  its already mentioned that sorted in non-decending order "
                    },
                    {
                        "username": "alamick",
                        "content": "I completely agree. I\\'m surprised that this question is so popular, since I knew at a first glance that it was poorly written/stated/explained. "
                    },
                    {
                        "username": "chazwinter",
                        "content": "The problem states that you are given two sorted lists, and you should create a sorted list. Sorted means sorted, so the nature of your sorted list should be the same as the given sorted lists. The directions then go on to state that the given lists are non-decreasing, meaning your merged should be the same, given that sorted means sorted."
                    },
                    {
                        "username": "alexsherbuck",
                        "content": "Based on the documentation in the code, the edge cases may be improperly documented.\\n\\nThis explicitly states that this function returns a `ListNode`. The definition of a `ListNode` shows that `val` is set to whatever is passed or `0`. \\n\\n ```\\n/** javascript\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {    \\n```\\n\\nThe second sample test case is:\\n```\\nlist1 = []\\nlist2 =[]\\nOutput\\n[0]\\nExpected\\n[]\\n```\\nIf you build the function to satisfy the documentation this test case will fail every time.\\n\\nTo me, this needs to change to `@return {ListNode | null } ` but because of the test environment, `null === []` for the purposes of the \\'Expected` block"
                    },
                    {
                        "username": "AlanOnym",
                        "content": "I did not know what to put as the default case, thanks for the clarification"
                    },
                    {
                        "username": "bolemax",
                        "content": "`list1 = []` denotes an empty linked list, i.e. one which has no nodes. It has nothing to do with the definition of the node. I think that's pretty clear."
                    },
                    {
                        "username": "p4stoboy",
                        "content": "Thank you."
                    },
                    {
                        "username": "itsindigo",
                        "content": "+1, was stuck for a while trying to get that test case to pass"
                    }
                ]
            },
            {
                "id": 1771683,
                "content": [
                    {
                        "username": "Norie",
                        "content": "WHY CANT WE USE CONCAT and SORT HERE, ANYbody?"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/\\n"
                    },
                    {
                        "username": "Aravind_VC",
                        "content": "given list is not array it is linked list sot sort work with array not with linked list"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Bro this question is of linked list "
                    },
                    {
                        "username": "dadiprasanth",
                        "content": "[@mokotozett](/mokotozett)  bro it is linked list we have to transverse using next key word and we can use val key to find the value "
                    },
                    {
                        "username": "mokotozett",
                        "content": "I had the same question.... list1 + list2... then sort().... \\nI keep looking at the problem. Makes sense to use nodes if the output order is important or special. But the problem says Output: [1,1,2,3,4,4] without any regard to placing. Since we are dealing with int, sort() will do. What am i missing? Im just moving on to another one lol. glhf"
                    },
                    {
                        "username": "1260",
                        "content": "[@LavajavaLux](/LavajavaLux) This is in O(N) space and in general bad for LinkedList problems which usually require O(1)."
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "I first added all values to an array then sorted it, then initialized ListNodes from the array"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "`Lists` are note `Arrays`."
                    },
                    {
                        "username": "MoSaleh8890",
                        "content": "[@andrewcleonard](/andrewcleonard) So informative. Thanks Andrew;"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "this is link list so u can\\'t use that function............"
                    },
                    {
                        "username": "valmiki20",
                        "content": "so you plan to implement CONCAT and SORT for ListNode class? then you are good."
                    },
                    {
                        "username": "gregory_solomon",
                        "content": "This are linked lists, so a bunch of pointers that point to things, not actual values, it is NOT an array."
                    },
                    {
                        "username": "andrewcleonard",
                        "content": "JavaScript response to your question:\\n\\n`list1` and `list2` are objects, **NOT** arrays. It confused me that the examples here show `list1` and `list2` as arrays. \\n\\nIf you `console.log(JSON.stringify(list1))`, you get:\\n\\n```\\nconst list1 = {\\n\\tval: 1,\\n\\tnext: {\\n\\t\\tval: 2,\\n\\t\\tnext: {\\n\\t\\t\\tval: 4,\\n\\t\\t\\tnext: null,\\n\\t\\t},\\n\\t},\\n};\\n```\\n\\nJavaScript has \"standard built-in objects.\" [Arrays are one of JavaScript\\'s built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\\n\\nOn the other hand, linked lists are not part of JavaScript. [Linked lists are a very common data structure used in many programming languages.](https://en.wikipedia.org/wiki/Linked_list) To use a linked list in JavaScript, you must build it yourself on top of vanilla JavaScript. Linked lists have advantages/disadvantages compared to arrays and other data structures:\\n\\nLooking at this specific example, my understanding is that the approach using the the `ListNode` function on line 3 is an older way of using JavaScript. With ES6, we will mostly use [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\\n\\nThis example would be clearer to me if they used this more modern object-oriented approach.\\n\\nI found this freeCodeCamp video and the codepen in the description to be most helpful:\\nhttps://www.youtube.com/watch?v=9YddVVsdG5A\\n\\n(data structures are new to me, so please fact-check me and let me know about any mistakes)"
                    },
                    {
                        "username": "Aryan_Arya",
                        "content": "That will increase the time complexity of the solution."
                    },
                    {
                        "username": "Prince_Vijay",
                        "content": "I didn\\'t understand the class given above. can anyone explain.\\n"
                    },
                    {
                        "username": "zhang2012",
                        "content": "The ListNode class shows you how the linked list is defined for your chosen language. Take Python3 as an example. To define a linked list [1, 2, 4], you write \"l1 = ListNode(1,ListNode(2, ListNode(3, None)))\". Hence, to get the first value (the head) of l1, we do \"l1.val\"; to get second value, we do \"l1.next.val\"; and to get the third value, we do \"l1.next.next.val\""
                    },
                    {
                        "username": "vikaslinux",
                        "content": "Please explain the meaning of splicing.Should I modify the two linked lists and make the new list from the existing nodes or should I create new nodes for the merged linkes list."
                    },
                    {
                        "username": "erenyeager1",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity  ,, no way you can solve it with o(1) time complexity , you have to run over the 2 lists so it would be at least o(n) time "
                    },
                    {
                        "username": "ronnyvega",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity, right?"
                    },
                    {
                        "username": "rohitk_chef15",
                        "content": "[@shibvarghab](/shibvarghab)  can you please explain more about it how to reduce time complexity ,\\nAs we have to traverse the list basically same we do in array how willl it be diff from array\\n please explain "
                    },
                    {
                        "username": "Ursae",
                        "content": "[@shibvarghab](/shibvarghab) How can it be solved in O(1) I wonder? You still have to traverse the lists, don\\'t you? And traversing is dependent on the length, that makes it O(N) at least"
                    },
                    {
                        "username": "mliubiva",
                        "content": "[@a_hend0](/a_hend0) the question is still actual for other people who have the same problem)"
                    },
                    {
                        "username": "a_hend0",
                        "content": "[@Last_CodeBender](/Last_CodeBender)  i dont think hes still looking for the answer \\n"
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "Interweaving the two link lists without creating new memory. "
                    },
                    {
                        "username": "shibvarghab",
                        "content": "You need to create links between two given linked lists. Your goal should be to not use any extra space to merge the linked list. This question should be solved in O(1) time complexity. And that is the benefit of merging two linked lists over merging two arrays. "
                    },
                    {
                        "username": "finelliott",
                        "content": "I am wondering something similar."
                    },
                    {
                        "username": "abdelshokair",
                        "content": "Am i the only one who thinks this is a very vague requirement? Merging doesn\\'t necessarily mean they have to be in increasing order, which it seems it\\'s supposed to be. Seriously, write this stuff in the notes, so we don\\'t waste time."
                    },
                    {
                        "username": "dluan3",
                        "content": "somebody dont know how to read"
                    },
                    {
                        "username": "mng48301",
                        "content": "[@chazwinter](/chazwinter) exactly"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It literally says the new list should be sorted. The word sorted is even in bold. "
                    },
                    {
                        "username": "zenverak",
                        "content": "The examples given clear it up."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "\"merge\" means to combine the lists, and there\\'s a clear implication that the sorted order should be maintained. If you didn\\'t have to do that, you could just append one list to the other and call it a day, but that\\'s not what\\'s meant by merging."
                    },
                    {
                        "username": "cocokaribou",
                        "content": "hi I just started learning algorithm and here\\'s my question:\\nI\\'m using IDE to write main and run my code but don\\'t know what to input in the solution\\n\\nthe parameter of `mergeTwoLists()` is `ListNode` but in the Leetcode console the input goes like [1,2,4] [1,3,4] which seems like Array of Int??\\n\\nif anyone can tell me what main function would look like it would be really helpful\\n"
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "For anyone that\\'s stuck on this, the provided inputs for JavaScript/TypeScript are wrong. If you want to solve this problem in JS, you\\'ll have to convert the provided inputs into a linked list first."
                    },
                    {
                        "username": "adrianroman",
                        "content": "you can create a method to convert the input array into a linked list, then you can easily test in your own IDE with the input from leetcode, you can reuse that method for each linked list problem"
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "\nlet node1 = ListNode(1)\nlet node2 = ListNode(2)\nlet node3 = ListNode(3)\n\nnode1.next = node2\nnode2.next = node3\n\nlike this for example"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The syntax used to show the lists in the examples does look like an array, so it\\'s a little confusing, but they just mean that those are the values in the list. It might\\'ve been better if they\\'d notated the list like:\\n1 -> 2 -> 4"
                    },
                    {
                        "username": "reducingcodex",
                        "content": "https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\\n\\nFor those confuseed about the question, its explained better here.\\n\\nThe question isn\\'t explained well at all here."
                    },
                    {
                        "username": "wolfpackfitdev",
                        "content": "does anyone else get a NullPointerException when trying to reference val?"
                    },
                    {
                        "username": "ClassPython",
                        "content": "I also get null.\\n\\nIf I type   --> list1.val.  I get a null error. Can also visualize this by typing console.log(\\nlist1.val)\\n\\nBut if one types --> if (list1 !== null {  list1.val }  you will get the value, with no error. You can put a console.log(list1.val) inside the if statement to visualize.  i.e. -->  if (list1 !== null {  console.log(list1.val) }\\n\\nI\\'m not sure why it works this way."
                    },
                    {
                        "username": "The_Winter_Soldier",
                        "content": "Yes me \\nHow to solve this;"
                    },
                    {
                        "username": "Msey",
                        "content": "its definitely a medium question"
                    },
                    {
                        "username": "prakhar32",
                        "content": "[@devesh_kumar_kushwaha](/devesh_kumar_kushwaha)  Every champion was once a beginner!"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "[@SuperDeepBoy](/SuperDeepBoy)  then what are you doing here at leet code first of all learn some dsa first"
                    },
                    {
                        "username": "SuperDeepBoy",
                        "content": "Yeah I had never even heard of linked lists."
                    },
                    {
                        "username": "newdive",
                        "content": "I know the expected result is sorted is ascending order.\\n\\nbut the problem never state it specificially.\\n\\nI my opinion, sorted could be ascending or descending order.\\n\\nWhen i came across the term 'sorted', the first thing came into my mind was 'sorted in which order??? Do i have to figure out the order by myself??? These two list are sorted in same order??? blablabla... '\\n\\nI guess most people would take it as ascending order,  and it works in this situation.\\n\\nBut I think we should not adopt this kind of habitual thinking in our solution, which in practice could be very harmful.\\n\\nSo I strongly recommend that the problem be more specifically stated ."
                    },
                    {
                        "username": "Szymon5922",
                        "content": "Always check constraints section to get sure what data u can expect. \"Both list1 and list2 are sorted in non-decreasing order.\""
                    },
                    {
                        "username": "mng48301",
                        "content": "The description of the problem is fine. You should just read carefully. "
                    },
                    {
                        "username": "abhay_mnit22",
                        "content": " read contraints  its already mentioned that sorted in non-decending order "
                    },
                    {
                        "username": "alamick",
                        "content": "I completely agree. I\\'m surprised that this question is so popular, since I knew at a first glance that it was poorly written/stated/explained. "
                    },
                    {
                        "username": "chazwinter",
                        "content": "The problem states that you are given two sorted lists, and you should create a sorted list. Sorted means sorted, so the nature of your sorted list should be the same as the given sorted lists. The directions then go on to state that the given lists are non-decreasing, meaning your merged should be the same, given that sorted means sorted."
                    },
                    {
                        "username": "alexsherbuck",
                        "content": "Based on the documentation in the code, the edge cases may be improperly documented.\\n\\nThis explicitly states that this function returns a `ListNode`. The definition of a `ListNode` shows that `val` is set to whatever is passed or `0`. \\n\\n ```\\n/** javascript\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {    \\n```\\n\\nThe second sample test case is:\\n```\\nlist1 = []\\nlist2 =[]\\nOutput\\n[0]\\nExpected\\n[]\\n```\\nIf you build the function to satisfy the documentation this test case will fail every time.\\n\\nTo me, this needs to change to `@return {ListNode | null } ` but because of the test environment, `null === []` for the purposes of the \\'Expected` block"
                    },
                    {
                        "username": "AlanOnym",
                        "content": "I did not know what to put as the default case, thanks for the clarification"
                    },
                    {
                        "username": "bolemax",
                        "content": "`list1 = []` denotes an empty linked list, i.e. one which has no nodes. It has nothing to do with the definition of the node. I think that's pretty clear."
                    },
                    {
                        "username": "p4stoboy",
                        "content": "Thank you."
                    },
                    {
                        "username": "itsindigo",
                        "content": "+1, was stuck for a while trying to get that test case to pass"
                    }
                ]
            },
            {
                "id": 1570446,
                "content": [
                    {
                        "username": "Norie",
                        "content": "WHY CANT WE USE CONCAT and SORT HERE, ANYbody?"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/\\n"
                    },
                    {
                        "username": "Aravind_VC",
                        "content": "given list is not array it is linked list sot sort work with array not with linked list"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Bro this question is of linked list "
                    },
                    {
                        "username": "dadiprasanth",
                        "content": "[@mokotozett](/mokotozett)  bro it is linked list we have to transverse using next key word and we can use val key to find the value "
                    },
                    {
                        "username": "mokotozett",
                        "content": "I had the same question.... list1 + list2... then sort().... \\nI keep looking at the problem. Makes sense to use nodes if the output order is important or special. But the problem says Output: [1,1,2,3,4,4] without any regard to placing. Since we are dealing with int, sort() will do. What am i missing? Im just moving on to another one lol. glhf"
                    },
                    {
                        "username": "1260",
                        "content": "[@LavajavaLux](/LavajavaLux) This is in O(N) space and in general bad for LinkedList problems which usually require O(1)."
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "I first added all values to an array then sorted it, then initialized ListNodes from the array"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "`Lists` are note `Arrays`."
                    },
                    {
                        "username": "MoSaleh8890",
                        "content": "[@andrewcleonard](/andrewcleonard) So informative. Thanks Andrew;"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "this is link list so u can\\'t use that function............"
                    },
                    {
                        "username": "valmiki20",
                        "content": "so you plan to implement CONCAT and SORT for ListNode class? then you are good."
                    },
                    {
                        "username": "gregory_solomon",
                        "content": "This are linked lists, so a bunch of pointers that point to things, not actual values, it is NOT an array."
                    },
                    {
                        "username": "andrewcleonard",
                        "content": "JavaScript response to your question:\\n\\n`list1` and `list2` are objects, **NOT** arrays. It confused me that the examples here show `list1` and `list2` as arrays. \\n\\nIf you `console.log(JSON.stringify(list1))`, you get:\\n\\n```\\nconst list1 = {\\n\\tval: 1,\\n\\tnext: {\\n\\t\\tval: 2,\\n\\t\\tnext: {\\n\\t\\t\\tval: 4,\\n\\t\\t\\tnext: null,\\n\\t\\t},\\n\\t},\\n};\\n```\\n\\nJavaScript has \"standard built-in objects.\" [Arrays are one of JavaScript\\'s built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\\n\\nOn the other hand, linked lists are not part of JavaScript. [Linked lists are a very common data structure used in many programming languages.](https://en.wikipedia.org/wiki/Linked_list) To use a linked list in JavaScript, you must build it yourself on top of vanilla JavaScript. Linked lists have advantages/disadvantages compared to arrays and other data structures:\\n\\nLooking at this specific example, my understanding is that the approach using the the `ListNode` function on line 3 is an older way of using JavaScript. With ES6, we will mostly use [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\\n\\nThis example would be clearer to me if they used this more modern object-oriented approach.\\n\\nI found this freeCodeCamp video and the codepen in the description to be most helpful:\\nhttps://www.youtube.com/watch?v=9YddVVsdG5A\\n\\n(data structures are new to me, so please fact-check me and let me know about any mistakes)"
                    },
                    {
                        "username": "Aryan_Arya",
                        "content": "That will increase the time complexity of the solution."
                    },
                    {
                        "username": "Prince_Vijay",
                        "content": "I didn\\'t understand the class given above. can anyone explain.\\n"
                    },
                    {
                        "username": "zhang2012",
                        "content": "The ListNode class shows you how the linked list is defined for your chosen language. Take Python3 as an example. To define a linked list [1, 2, 4], you write \"l1 = ListNode(1,ListNode(2, ListNode(3, None)))\". Hence, to get the first value (the head) of l1, we do \"l1.val\"; to get second value, we do \"l1.next.val\"; and to get the third value, we do \"l1.next.next.val\""
                    },
                    {
                        "username": "vikaslinux",
                        "content": "Please explain the meaning of splicing.Should I modify the two linked lists and make the new list from the existing nodes or should I create new nodes for the merged linkes list."
                    },
                    {
                        "username": "erenyeager1",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity  ,, no way you can solve it with o(1) time complexity , you have to run over the 2 lists so it would be at least o(n) time "
                    },
                    {
                        "username": "ronnyvega",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity, right?"
                    },
                    {
                        "username": "rohitk_chef15",
                        "content": "[@shibvarghab](/shibvarghab)  can you please explain more about it how to reduce time complexity ,\\nAs we have to traverse the list basically same we do in array how willl it be diff from array\\n please explain "
                    },
                    {
                        "username": "Ursae",
                        "content": "[@shibvarghab](/shibvarghab) How can it be solved in O(1) I wonder? You still have to traverse the lists, don\\'t you? And traversing is dependent on the length, that makes it O(N) at least"
                    },
                    {
                        "username": "mliubiva",
                        "content": "[@a_hend0](/a_hend0) the question is still actual for other people who have the same problem)"
                    },
                    {
                        "username": "a_hend0",
                        "content": "[@Last_CodeBender](/Last_CodeBender)  i dont think hes still looking for the answer \\n"
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "Interweaving the two link lists without creating new memory. "
                    },
                    {
                        "username": "shibvarghab",
                        "content": "You need to create links between two given linked lists. Your goal should be to not use any extra space to merge the linked list. This question should be solved in O(1) time complexity. And that is the benefit of merging two linked lists over merging two arrays. "
                    },
                    {
                        "username": "finelliott",
                        "content": "I am wondering something similar."
                    },
                    {
                        "username": "abdelshokair",
                        "content": "Am i the only one who thinks this is a very vague requirement? Merging doesn\\'t necessarily mean they have to be in increasing order, which it seems it\\'s supposed to be. Seriously, write this stuff in the notes, so we don\\'t waste time."
                    },
                    {
                        "username": "dluan3",
                        "content": "somebody dont know how to read"
                    },
                    {
                        "username": "mng48301",
                        "content": "[@chazwinter](/chazwinter) exactly"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It literally says the new list should be sorted. The word sorted is even in bold. "
                    },
                    {
                        "username": "zenverak",
                        "content": "The examples given clear it up."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "\"merge\" means to combine the lists, and there\\'s a clear implication that the sorted order should be maintained. If you didn\\'t have to do that, you could just append one list to the other and call it a day, but that\\'s not what\\'s meant by merging."
                    },
                    {
                        "username": "cocokaribou",
                        "content": "hi I just started learning algorithm and here\\'s my question:\\nI\\'m using IDE to write main and run my code but don\\'t know what to input in the solution\\n\\nthe parameter of `mergeTwoLists()` is `ListNode` but in the Leetcode console the input goes like [1,2,4] [1,3,4] which seems like Array of Int??\\n\\nif anyone can tell me what main function would look like it would be really helpful\\n"
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "For anyone that\\'s stuck on this, the provided inputs for JavaScript/TypeScript are wrong. If you want to solve this problem in JS, you\\'ll have to convert the provided inputs into a linked list first."
                    },
                    {
                        "username": "adrianroman",
                        "content": "you can create a method to convert the input array into a linked list, then you can easily test in your own IDE with the input from leetcode, you can reuse that method for each linked list problem"
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "\nlet node1 = ListNode(1)\nlet node2 = ListNode(2)\nlet node3 = ListNode(3)\n\nnode1.next = node2\nnode2.next = node3\n\nlike this for example"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The syntax used to show the lists in the examples does look like an array, so it\\'s a little confusing, but they just mean that those are the values in the list. It might\\'ve been better if they\\'d notated the list like:\\n1 -> 2 -> 4"
                    },
                    {
                        "username": "reducingcodex",
                        "content": "https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\\n\\nFor those confuseed about the question, its explained better here.\\n\\nThe question isn\\'t explained well at all here."
                    },
                    {
                        "username": "wolfpackfitdev",
                        "content": "does anyone else get a NullPointerException when trying to reference val?"
                    },
                    {
                        "username": "ClassPython",
                        "content": "I also get null.\\n\\nIf I type   --> list1.val.  I get a null error. Can also visualize this by typing console.log(\\nlist1.val)\\n\\nBut if one types --> if (list1 !== null {  list1.val }  you will get the value, with no error. You can put a console.log(list1.val) inside the if statement to visualize.  i.e. -->  if (list1 !== null {  console.log(list1.val) }\\n\\nI\\'m not sure why it works this way."
                    },
                    {
                        "username": "The_Winter_Soldier",
                        "content": "Yes me \\nHow to solve this;"
                    },
                    {
                        "username": "Msey",
                        "content": "its definitely a medium question"
                    },
                    {
                        "username": "prakhar32",
                        "content": "[@devesh_kumar_kushwaha](/devesh_kumar_kushwaha)  Every champion was once a beginner!"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "[@SuperDeepBoy](/SuperDeepBoy)  then what are you doing here at leet code first of all learn some dsa first"
                    },
                    {
                        "username": "SuperDeepBoy",
                        "content": "Yeah I had never even heard of linked lists."
                    },
                    {
                        "username": "newdive",
                        "content": "I know the expected result is sorted is ascending order.\\n\\nbut the problem never state it specificially.\\n\\nI my opinion, sorted could be ascending or descending order.\\n\\nWhen i came across the term 'sorted', the first thing came into my mind was 'sorted in which order??? Do i have to figure out the order by myself??? These two list are sorted in same order??? blablabla... '\\n\\nI guess most people would take it as ascending order,  and it works in this situation.\\n\\nBut I think we should not adopt this kind of habitual thinking in our solution, which in practice could be very harmful.\\n\\nSo I strongly recommend that the problem be more specifically stated ."
                    },
                    {
                        "username": "Szymon5922",
                        "content": "Always check constraints section to get sure what data u can expect. \"Both list1 and list2 are sorted in non-decreasing order.\""
                    },
                    {
                        "username": "mng48301",
                        "content": "The description of the problem is fine. You should just read carefully. "
                    },
                    {
                        "username": "abhay_mnit22",
                        "content": " read contraints  its already mentioned that sorted in non-decending order "
                    },
                    {
                        "username": "alamick",
                        "content": "I completely agree. I\\'m surprised that this question is so popular, since I knew at a first glance that it was poorly written/stated/explained. "
                    },
                    {
                        "username": "chazwinter",
                        "content": "The problem states that you are given two sorted lists, and you should create a sorted list. Sorted means sorted, so the nature of your sorted list should be the same as the given sorted lists. The directions then go on to state that the given lists are non-decreasing, meaning your merged should be the same, given that sorted means sorted."
                    },
                    {
                        "username": "alexsherbuck",
                        "content": "Based on the documentation in the code, the edge cases may be improperly documented.\\n\\nThis explicitly states that this function returns a `ListNode`. The definition of a `ListNode` shows that `val` is set to whatever is passed or `0`. \\n\\n ```\\n/** javascript\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {    \\n```\\n\\nThe second sample test case is:\\n```\\nlist1 = []\\nlist2 =[]\\nOutput\\n[0]\\nExpected\\n[]\\n```\\nIf you build the function to satisfy the documentation this test case will fail every time.\\n\\nTo me, this needs to change to `@return {ListNode | null } ` but because of the test environment, `null === []` for the purposes of the \\'Expected` block"
                    },
                    {
                        "username": "AlanOnym",
                        "content": "I did not know what to put as the default case, thanks for the clarification"
                    },
                    {
                        "username": "bolemax",
                        "content": "`list1 = []` denotes an empty linked list, i.e. one which has no nodes. It has nothing to do with the definition of the node. I think that's pretty clear."
                    },
                    {
                        "username": "p4stoboy",
                        "content": "Thank you."
                    },
                    {
                        "username": "itsindigo",
                        "content": "+1, was stuck for a while trying to get that test case to pass"
                    }
                ]
            },
            {
                "id": 1650754,
                "content": [
                    {
                        "username": "Norie",
                        "content": "WHY CANT WE USE CONCAT and SORT HERE, ANYbody?"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/\\n"
                    },
                    {
                        "username": "Aravind_VC",
                        "content": "given list is not array it is linked list sot sort work with array not with linked list"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Bro this question is of linked list "
                    },
                    {
                        "username": "dadiprasanth",
                        "content": "[@mokotozett](/mokotozett)  bro it is linked list we have to transverse using next key word and we can use val key to find the value "
                    },
                    {
                        "username": "mokotozett",
                        "content": "I had the same question.... list1 + list2... then sort().... \\nI keep looking at the problem. Makes sense to use nodes if the output order is important or special. But the problem says Output: [1,1,2,3,4,4] without any regard to placing. Since we are dealing with int, sort() will do. What am i missing? Im just moving on to another one lol. glhf"
                    },
                    {
                        "username": "1260",
                        "content": "[@LavajavaLux](/LavajavaLux) This is in O(N) space and in general bad for LinkedList problems which usually require O(1)."
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "I first added all values to an array then sorted it, then initialized ListNodes from the array"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "`Lists` are note `Arrays`."
                    },
                    {
                        "username": "MoSaleh8890",
                        "content": "[@andrewcleonard](/andrewcleonard) So informative. Thanks Andrew;"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "this is link list so u can\\'t use that function............"
                    },
                    {
                        "username": "valmiki20",
                        "content": "so you plan to implement CONCAT and SORT for ListNode class? then you are good."
                    },
                    {
                        "username": "gregory_solomon",
                        "content": "This are linked lists, so a bunch of pointers that point to things, not actual values, it is NOT an array."
                    },
                    {
                        "username": "andrewcleonard",
                        "content": "JavaScript response to your question:\\n\\n`list1` and `list2` are objects, **NOT** arrays. It confused me that the examples here show `list1` and `list2` as arrays. \\n\\nIf you `console.log(JSON.stringify(list1))`, you get:\\n\\n```\\nconst list1 = {\\n\\tval: 1,\\n\\tnext: {\\n\\t\\tval: 2,\\n\\t\\tnext: {\\n\\t\\t\\tval: 4,\\n\\t\\t\\tnext: null,\\n\\t\\t},\\n\\t},\\n};\\n```\\n\\nJavaScript has \"standard built-in objects.\" [Arrays are one of JavaScript\\'s built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\\n\\nOn the other hand, linked lists are not part of JavaScript. [Linked lists are a very common data structure used in many programming languages.](https://en.wikipedia.org/wiki/Linked_list) To use a linked list in JavaScript, you must build it yourself on top of vanilla JavaScript. Linked lists have advantages/disadvantages compared to arrays and other data structures:\\n\\nLooking at this specific example, my understanding is that the approach using the the `ListNode` function on line 3 is an older way of using JavaScript. With ES6, we will mostly use [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\\n\\nThis example would be clearer to me if they used this more modern object-oriented approach.\\n\\nI found this freeCodeCamp video and the codepen in the description to be most helpful:\\nhttps://www.youtube.com/watch?v=9YddVVsdG5A\\n\\n(data structures are new to me, so please fact-check me and let me know about any mistakes)"
                    },
                    {
                        "username": "Aryan_Arya",
                        "content": "That will increase the time complexity of the solution."
                    },
                    {
                        "username": "Prince_Vijay",
                        "content": "I didn\\'t understand the class given above. can anyone explain.\\n"
                    },
                    {
                        "username": "zhang2012",
                        "content": "The ListNode class shows you how the linked list is defined for your chosen language. Take Python3 as an example. To define a linked list [1, 2, 4], you write \"l1 = ListNode(1,ListNode(2, ListNode(3, None)))\". Hence, to get the first value (the head) of l1, we do \"l1.val\"; to get second value, we do \"l1.next.val\"; and to get the third value, we do \"l1.next.next.val\""
                    },
                    {
                        "username": "vikaslinux",
                        "content": "Please explain the meaning of splicing.Should I modify the two linked lists and make the new list from the existing nodes or should I create new nodes for the merged linkes list."
                    },
                    {
                        "username": "erenyeager1",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity  ,, no way you can solve it with o(1) time complexity , you have to run over the 2 lists so it would be at least o(n) time "
                    },
                    {
                        "username": "ronnyvega",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity, right?"
                    },
                    {
                        "username": "rohitk_chef15",
                        "content": "[@shibvarghab](/shibvarghab)  can you please explain more about it how to reduce time complexity ,\\nAs we have to traverse the list basically same we do in array how willl it be diff from array\\n please explain "
                    },
                    {
                        "username": "Ursae",
                        "content": "[@shibvarghab](/shibvarghab) How can it be solved in O(1) I wonder? You still have to traverse the lists, don\\'t you? And traversing is dependent on the length, that makes it O(N) at least"
                    },
                    {
                        "username": "mliubiva",
                        "content": "[@a_hend0](/a_hend0) the question is still actual for other people who have the same problem)"
                    },
                    {
                        "username": "a_hend0",
                        "content": "[@Last_CodeBender](/Last_CodeBender)  i dont think hes still looking for the answer \\n"
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "Interweaving the two link lists without creating new memory. "
                    },
                    {
                        "username": "shibvarghab",
                        "content": "You need to create links between two given linked lists. Your goal should be to not use any extra space to merge the linked list. This question should be solved in O(1) time complexity. And that is the benefit of merging two linked lists over merging two arrays. "
                    },
                    {
                        "username": "finelliott",
                        "content": "I am wondering something similar."
                    },
                    {
                        "username": "abdelshokair",
                        "content": "Am i the only one who thinks this is a very vague requirement? Merging doesn\\'t necessarily mean they have to be in increasing order, which it seems it\\'s supposed to be. Seriously, write this stuff in the notes, so we don\\'t waste time."
                    },
                    {
                        "username": "dluan3",
                        "content": "somebody dont know how to read"
                    },
                    {
                        "username": "mng48301",
                        "content": "[@chazwinter](/chazwinter) exactly"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It literally says the new list should be sorted. The word sorted is even in bold. "
                    },
                    {
                        "username": "zenverak",
                        "content": "The examples given clear it up."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "\"merge\" means to combine the lists, and there\\'s a clear implication that the sorted order should be maintained. If you didn\\'t have to do that, you could just append one list to the other and call it a day, but that\\'s not what\\'s meant by merging."
                    },
                    {
                        "username": "cocokaribou",
                        "content": "hi I just started learning algorithm and here\\'s my question:\\nI\\'m using IDE to write main and run my code but don\\'t know what to input in the solution\\n\\nthe parameter of `mergeTwoLists()` is `ListNode` but in the Leetcode console the input goes like [1,2,4] [1,3,4] which seems like Array of Int??\\n\\nif anyone can tell me what main function would look like it would be really helpful\\n"
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "For anyone that\\'s stuck on this, the provided inputs for JavaScript/TypeScript are wrong. If you want to solve this problem in JS, you\\'ll have to convert the provided inputs into a linked list first."
                    },
                    {
                        "username": "adrianroman",
                        "content": "you can create a method to convert the input array into a linked list, then you can easily test in your own IDE with the input from leetcode, you can reuse that method for each linked list problem"
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "\nlet node1 = ListNode(1)\nlet node2 = ListNode(2)\nlet node3 = ListNode(3)\n\nnode1.next = node2\nnode2.next = node3\n\nlike this for example"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The syntax used to show the lists in the examples does look like an array, so it\\'s a little confusing, but they just mean that those are the values in the list. It might\\'ve been better if they\\'d notated the list like:\\n1 -> 2 -> 4"
                    },
                    {
                        "username": "reducingcodex",
                        "content": "https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\\n\\nFor those confuseed about the question, its explained better here.\\n\\nThe question isn\\'t explained well at all here."
                    },
                    {
                        "username": "wolfpackfitdev",
                        "content": "does anyone else get a NullPointerException when trying to reference val?"
                    },
                    {
                        "username": "ClassPython",
                        "content": "I also get null.\\n\\nIf I type   --> list1.val.  I get a null error. Can also visualize this by typing console.log(\\nlist1.val)\\n\\nBut if one types --> if (list1 !== null {  list1.val }  you will get the value, with no error. You can put a console.log(list1.val) inside the if statement to visualize.  i.e. -->  if (list1 !== null {  console.log(list1.val) }\\n\\nI\\'m not sure why it works this way."
                    },
                    {
                        "username": "The_Winter_Soldier",
                        "content": "Yes me \\nHow to solve this;"
                    },
                    {
                        "username": "Msey",
                        "content": "its definitely a medium question"
                    },
                    {
                        "username": "prakhar32",
                        "content": "[@devesh_kumar_kushwaha](/devesh_kumar_kushwaha)  Every champion was once a beginner!"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "[@SuperDeepBoy](/SuperDeepBoy)  then what are you doing here at leet code first of all learn some dsa first"
                    },
                    {
                        "username": "SuperDeepBoy",
                        "content": "Yeah I had never even heard of linked lists."
                    },
                    {
                        "username": "newdive",
                        "content": "I know the expected result is sorted is ascending order.\\n\\nbut the problem never state it specificially.\\n\\nI my opinion, sorted could be ascending or descending order.\\n\\nWhen i came across the term 'sorted', the first thing came into my mind was 'sorted in which order??? Do i have to figure out the order by myself??? These two list are sorted in same order??? blablabla... '\\n\\nI guess most people would take it as ascending order,  and it works in this situation.\\n\\nBut I think we should not adopt this kind of habitual thinking in our solution, which in practice could be very harmful.\\n\\nSo I strongly recommend that the problem be more specifically stated ."
                    },
                    {
                        "username": "Szymon5922",
                        "content": "Always check constraints section to get sure what data u can expect. \"Both list1 and list2 are sorted in non-decreasing order.\""
                    },
                    {
                        "username": "mng48301",
                        "content": "The description of the problem is fine. You should just read carefully. "
                    },
                    {
                        "username": "abhay_mnit22",
                        "content": " read contraints  its already mentioned that sorted in non-decending order "
                    },
                    {
                        "username": "alamick",
                        "content": "I completely agree. I\\'m surprised that this question is so popular, since I knew at a first glance that it was poorly written/stated/explained. "
                    },
                    {
                        "username": "chazwinter",
                        "content": "The problem states that you are given two sorted lists, and you should create a sorted list. Sorted means sorted, so the nature of your sorted list should be the same as the given sorted lists. The directions then go on to state that the given lists are non-decreasing, meaning your merged should be the same, given that sorted means sorted."
                    },
                    {
                        "username": "alexsherbuck",
                        "content": "Based on the documentation in the code, the edge cases may be improperly documented.\\n\\nThis explicitly states that this function returns a `ListNode`. The definition of a `ListNode` shows that `val` is set to whatever is passed or `0`. \\n\\n ```\\n/** javascript\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {    \\n```\\n\\nThe second sample test case is:\\n```\\nlist1 = []\\nlist2 =[]\\nOutput\\n[0]\\nExpected\\n[]\\n```\\nIf you build the function to satisfy the documentation this test case will fail every time.\\n\\nTo me, this needs to change to `@return {ListNode | null } ` but because of the test environment, `null === []` for the purposes of the \\'Expected` block"
                    },
                    {
                        "username": "AlanOnym",
                        "content": "I did not know what to put as the default case, thanks for the clarification"
                    },
                    {
                        "username": "bolemax",
                        "content": "`list1 = []` denotes an empty linked list, i.e. one which has no nodes. It has nothing to do with the definition of the node. I think that's pretty clear."
                    },
                    {
                        "username": "p4stoboy",
                        "content": "Thank you."
                    },
                    {
                        "username": "itsindigo",
                        "content": "+1, was stuck for a while trying to get that test case to pass"
                    }
                ]
            },
            {
                "id": 1565937,
                "content": [
                    {
                        "username": "Norie",
                        "content": "WHY CANT WE USE CONCAT and SORT HERE, ANYbody?"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/\\n"
                    },
                    {
                        "username": "Aravind_VC",
                        "content": "given list is not array it is linked list sot sort work with array not with linked list"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Bro this question is of linked list "
                    },
                    {
                        "username": "dadiprasanth",
                        "content": "[@mokotozett](/mokotozett)  bro it is linked list we have to transverse using next key word and we can use val key to find the value "
                    },
                    {
                        "username": "mokotozett",
                        "content": "I had the same question.... list1 + list2... then sort().... \\nI keep looking at the problem. Makes sense to use nodes if the output order is important or special. But the problem says Output: [1,1,2,3,4,4] without any regard to placing. Since we are dealing with int, sort() will do. What am i missing? Im just moving on to another one lol. glhf"
                    },
                    {
                        "username": "1260",
                        "content": "[@LavajavaLux](/LavajavaLux) This is in O(N) space and in general bad for LinkedList problems which usually require O(1)."
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "I first added all values to an array then sorted it, then initialized ListNodes from the array"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "`Lists` are note `Arrays`."
                    },
                    {
                        "username": "MoSaleh8890",
                        "content": "[@andrewcleonard](/andrewcleonard) So informative. Thanks Andrew;"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "this is link list so u can\\'t use that function............"
                    },
                    {
                        "username": "valmiki20",
                        "content": "so you plan to implement CONCAT and SORT for ListNode class? then you are good."
                    },
                    {
                        "username": "gregory_solomon",
                        "content": "This are linked lists, so a bunch of pointers that point to things, not actual values, it is NOT an array."
                    },
                    {
                        "username": "andrewcleonard",
                        "content": "JavaScript response to your question:\\n\\n`list1` and `list2` are objects, **NOT** arrays. It confused me that the examples here show `list1` and `list2` as arrays. \\n\\nIf you `console.log(JSON.stringify(list1))`, you get:\\n\\n```\\nconst list1 = {\\n\\tval: 1,\\n\\tnext: {\\n\\t\\tval: 2,\\n\\t\\tnext: {\\n\\t\\t\\tval: 4,\\n\\t\\t\\tnext: null,\\n\\t\\t},\\n\\t},\\n};\\n```\\n\\nJavaScript has \"standard built-in objects.\" [Arrays are one of JavaScript\\'s built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\\n\\nOn the other hand, linked lists are not part of JavaScript. [Linked lists are a very common data structure used in many programming languages.](https://en.wikipedia.org/wiki/Linked_list) To use a linked list in JavaScript, you must build it yourself on top of vanilla JavaScript. Linked lists have advantages/disadvantages compared to arrays and other data structures:\\n\\nLooking at this specific example, my understanding is that the approach using the the `ListNode` function on line 3 is an older way of using JavaScript. With ES6, we will mostly use [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\\n\\nThis example would be clearer to me if they used this more modern object-oriented approach.\\n\\nI found this freeCodeCamp video and the codepen in the description to be most helpful:\\nhttps://www.youtube.com/watch?v=9YddVVsdG5A\\n\\n(data structures are new to me, so please fact-check me and let me know about any mistakes)"
                    },
                    {
                        "username": "Aryan_Arya",
                        "content": "That will increase the time complexity of the solution."
                    },
                    {
                        "username": "Prince_Vijay",
                        "content": "I didn\\'t understand the class given above. can anyone explain.\\n"
                    },
                    {
                        "username": "zhang2012",
                        "content": "The ListNode class shows you how the linked list is defined for your chosen language. Take Python3 as an example. To define a linked list [1, 2, 4], you write \"l1 = ListNode(1,ListNode(2, ListNode(3, None)))\". Hence, to get the first value (the head) of l1, we do \"l1.val\"; to get second value, we do \"l1.next.val\"; and to get the third value, we do \"l1.next.next.val\""
                    },
                    {
                        "username": "vikaslinux",
                        "content": "Please explain the meaning of splicing.Should I modify the two linked lists and make the new list from the existing nodes or should I create new nodes for the merged linkes list."
                    },
                    {
                        "username": "erenyeager1",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity  ,, no way you can solve it with o(1) time complexity , you have to run over the 2 lists so it would be at least o(n) time "
                    },
                    {
                        "username": "ronnyvega",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity, right?"
                    },
                    {
                        "username": "rohitk_chef15",
                        "content": "[@shibvarghab](/shibvarghab)  can you please explain more about it how to reduce time complexity ,\\nAs we have to traverse the list basically same we do in array how willl it be diff from array\\n please explain "
                    },
                    {
                        "username": "Ursae",
                        "content": "[@shibvarghab](/shibvarghab) How can it be solved in O(1) I wonder? You still have to traverse the lists, don\\'t you? And traversing is dependent on the length, that makes it O(N) at least"
                    },
                    {
                        "username": "mliubiva",
                        "content": "[@a_hend0](/a_hend0) the question is still actual for other people who have the same problem)"
                    },
                    {
                        "username": "a_hend0",
                        "content": "[@Last_CodeBender](/Last_CodeBender)  i dont think hes still looking for the answer \\n"
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "Interweaving the two link lists without creating new memory. "
                    },
                    {
                        "username": "shibvarghab",
                        "content": "You need to create links between two given linked lists. Your goal should be to not use any extra space to merge the linked list. This question should be solved in O(1) time complexity. And that is the benefit of merging two linked lists over merging two arrays. "
                    },
                    {
                        "username": "finelliott",
                        "content": "I am wondering something similar."
                    },
                    {
                        "username": "abdelshokair",
                        "content": "Am i the only one who thinks this is a very vague requirement? Merging doesn\\'t necessarily mean they have to be in increasing order, which it seems it\\'s supposed to be. Seriously, write this stuff in the notes, so we don\\'t waste time."
                    },
                    {
                        "username": "dluan3",
                        "content": "somebody dont know how to read"
                    },
                    {
                        "username": "mng48301",
                        "content": "[@chazwinter](/chazwinter) exactly"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It literally says the new list should be sorted. The word sorted is even in bold. "
                    },
                    {
                        "username": "zenverak",
                        "content": "The examples given clear it up."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "\"merge\" means to combine the lists, and there\\'s a clear implication that the sorted order should be maintained. If you didn\\'t have to do that, you could just append one list to the other and call it a day, but that\\'s not what\\'s meant by merging."
                    },
                    {
                        "username": "cocokaribou",
                        "content": "hi I just started learning algorithm and here\\'s my question:\\nI\\'m using IDE to write main and run my code but don\\'t know what to input in the solution\\n\\nthe parameter of `mergeTwoLists()` is `ListNode` but in the Leetcode console the input goes like [1,2,4] [1,3,4] which seems like Array of Int??\\n\\nif anyone can tell me what main function would look like it would be really helpful\\n"
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "For anyone that\\'s stuck on this, the provided inputs for JavaScript/TypeScript are wrong. If you want to solve this problem in JS, you\\'ll have to convert the provided inputs into a linked list first."
                    },
                    {
                        "username": "adrianroman",
                        "content": "you can create a method to convert the input array into a linked list, then you can easily test in your own IDE with the input from leetcode, you can reuse that method for each linked list problem"
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "\nlet node1 = ListNode(1)\nlet node2 = ListNode(2)\nlet node3 = ListNode(3)\n\nnode1.next = node2\nnode2.next = node3\n\nlike this for example"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The syntax used to show the lists in the examples does look like an array, so it\\'s a little confusing, but they just mean that those are the values in the list. It might\\'ve been better if they\\'d notated the list like:\\n1 -> 2 -> 4"
                    },
                    {
                        "username": "reducingcodex",
                        "content": "https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\\n\\nFor those confuseed about the question, its explained better here.\\n\\nThe question isn\\'t explained well at all here."
                    },
                    {
                        "username": "wolfpackfitdev",
                        "content": "does anyone else get a NullPointerException when trying to reference val?"
                    },
                    {
                        "username": "ClassPython",
                        "content": "I also get null.\\n\\nIf I type   --> list1.val.  I get a null error. Can also visualize this by typing console.log(\\nlist1.val)\\n\\nBut if one types --> if (list1 !== null {  list1.val }  you will get the value, with no error. You can put a console.log(list1.val) inside the if statement to visualize.  i.e. -->  if (list1 !== null {  console.log(list1.val) }\\n\\nI\\'m not sure why it works this way."
                    },
                    {
                        "username": "The_Winter_Soldier",
                        "content": "Yes me \\nHow to solve this;"
                    },
                    {
                        "username": "Msey",
                        "content": "its definitely a medium question"
                    },
                    {
                        "username": "prakhar32",
                        "content": "[@devesh_kumar_kushwaha](/devesh_kumar_kushwaha)  Every champion was once a beginner!"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "[@SuperDeepBoy](/SuperDeepBoy)  then what are you doing here at leet code first of all learn some dsa first"
                    },
                    {
                        "username": "SuperDeepBoy",
                        "content": "Yeah I had never even heard of linked lists."
                    },
                    {
                        "username": "newdive",
                        "content": "I know the expected result is sorted is ascending order.\\n\\nbut the problem never state it specificially.\\n\\nI my opinion, sorted could be ascending or descending order.\\n\\nWhen i came across the term 'sorted', the first thing came into my mind was 'sorted in which order??? Do i have to figure out the order by myself??? These two list are sorted in same order??? blablabla... '\\n\\nI guess most people would take it as ascending order,  and it works in this situation.\\n\\nBut I think we should not adopt this kind of habitual thinking in our solution, which in practice could be very harmful.\\n\\nSo I strongly recommend that the problem be more specifically stated ."
                    },
                    {
                        "username": "Szymon5922",
                        "content": "Always check constraints section to get sure what data u can expect. \"Both list1 and list2 are sorted in non-decreasing order.\""
                    },
                    {
                        "username": "mng48301",
                        "content": "The description of the problem is fine. You should just read carefully. "
                    },
                    {
                        "username": "abhay_mnit22",
                        "content": " read contraints  its already mentioned that sorted in non-decending order "
                    },
                    {
                        "username": "alamick",
                        "content": "I completely agree. I\\'m surprised that this question is so popular, since I knew at a first glance that it was poorly written/stated/explained. "
                    },
                    {
                        "username": "chazwinter",
                        "content": "The problem states that you are given two sorted lists, and you should create a sorted list. Sorted means sorted, so the nature of your sorted list should be the same as the given sorted lists. The directions then go on to state that the given lists are non-decreasing, meaning your merged should be the same, given that sorted means sorted."
                    },
                    {
                        "username": "alexsherbuck",
                        "content": "Based on the documentation in the code, the edge cases may be improperly documented.\\n\\nThis explicitly states that this function returns a `ListNode`. The definition of a `ListNode` shows that `val` is set to whatever is passed or `0`. \\n\\n ```\\n/** javascript\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {    \\n```\\n\\nThe second sample test case is:\\n```\\nlist1 = []\\nlist2 =[]\\nOutput\\n[0]\\nExpected\\n[]\\n```\\nIf you build the function to satisfy the documentation this test case will fail every time.\\n\\nTo me, this needs to change to `@return {ListNode | null } ` but because of the test environment, `null === []` for the purposes of the \\'Expected` block"
                    },
                    {
                        "username": "AlanOnym",
                        "content": "I did not know what to put as the default case, thanks for the clarification"
                    },
                    {
                        "username": "bolemax",
                        "content": "`list1 = []` denotes an empty linked list, i.e. one which has no nodes. It has nothing to do with the definition of the node. I think that's pretty clear."
                    },
                    {
                        "username": "p4stoboy",
                        "content": "Thank you."
                    },
                    {
                        "username": "itsindigo",
                        "content": "+1, was stuck for a while trying to get that test case to pass"
                    }
                ]
            },
            {
                "id": 1566326,
                "content": [
                    {
                        "username": "Norie",
                        "content": "WHY CANT WE USE CONCAT and SORT HERE, ANYbody?"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/\\n"
                    },
                    {
                        "username": "Aravind_VC",
                        "content": "given list is not array it is linked list sot sort work with array not with linked list"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Bro this question is of linked list "
                    },
                    {
                        "username": "dadiprasanth",
                        "content": "[@mokotozett](/mokotozett)  bro it is linked list we have to transverse using next key word and we can use val key to find the value "
                    },
                    {
                        "username": "mokotozett",
                        "content": "I had the same question.... list1 + list2... then sort().... \\nI keep looking at the problem. Makes sense to use nodes if the output order is important or special. But the problem says Output: [1,1,2,3,4,4] without any regard to placing. Since we are dealing with int, sort() will do. What am i missing? Im just moving on to another one lol. glhf"
                    },
                    {
                        "username": "1260",
                        "content": "[@LavajavaLux](/LavajavaLux) This is in O(N) space and in general bad for LinkedList problems which usually require O(1)."
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "I first added all values to an array then sorted it, then initialized ListNodes from the array"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "`Lists` are note `Arrays`."
                    },
                    {
                        "username": "MoSaleh8890",
                        "content": "[@andrewcleonard](/andrewcleonard) So informative. Thanks Andrew;"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "this is link list so u can\\'t use that function............"
                    },
                    {
                        "username": "valmiki20",
                        "content": "so you plan to implement CONCAT and SORT for ListNode class? then you are good."
                    },
                    {
                        "username": "gregory_solomon",
                        "content": "This are linked lists, so a bunch of pointers that point to things, not actual values, it is NOT an array."
                    },
                    {
                        "username": "andrewcleonard",
                        "content": "JavaScript response to your question:\\n\\n`list1` and `list2` are objects, **NOT** arrays. It confused me that the examples here show `list1` and `list2` as arrays. \\n\\nIf you `console.log(JSON.stringify(list1))`, you get:\\n\\n```\\nconst list1 = {\\n\\tval: 1,\\n\\tnext: {\\n\\t\\tval: 2,\\n\\t\\tnext: {\\n\\t\\t\\tval: 4,\\n\\t\\t\\tnext: null,\\n\\t\\t},\\n\\t},\\n};\\n```\\n\\nJavaScript has \"standard built-in objects.\" [Arrays are one of JavaScript\\'s built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\\n\\nOn the other hand, linked lists are not part of JavaScript. [Linked lists are a very common data structure used in many programming languages.](https://en.wikipedia.org/wiki/Linked_list) To use a linked list in JavaScript, you must build it yourself on top of vanilla JavaScript. Linked lists have advantages/disadvantages compared to arrays and other data structures:\\n\\nLooking at this specific example, my understanding is that the approach using the the `ListNode` function on line 3 is an older way of using JavaScript. With ES6, we will mostly use [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\\n\\nThis example would be clearer to me if they used this more modern object-oriented approach.\\n\\nI found this freeCodeCamp video and the codepen in the description to be most helpful:\\nhttps://www.youtube.com/watch?v=9YddVVsdG5A\\n\\n(data structures are new to me, so please fact-check me and let me know about any mistakes)"
                    },
                    {
                        "username": "Aryan_Arya",
                        "content": "That will increase the time complexity of the solution."
                    },
                    {
                        "username": "Prince_Vijay",
                        "content": "I didn\\'t understand the class given above. can anyone explain.\\n"
                    },
                    {
                        "username": "zhang2012",
                        "content": "The ListNode class shows you how the linked list is defined for your chosen language. Take Python3 as an example. To define a linked list [1, 2, 4], you write \"l1 = ListNode(1,ListNode(2, ListNode(3, None)))\". Hence, to get the first value (the head) of l1, we do \"l1.val\"; to get second value, we do \"l1.next.val\"; and to get the third value, we do \"l1.next.next.val\""
                    },
                    {
                        "username": "vikaslinux",
                        "content": "Please explain the meaning of splicing.Should I modify the two linked lists and make the new list from the existing nodes or should I create new nodes for the merged linkes list."
                    },
                    {
                        "username": "erenyeager1",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity  ,, no way you can solve it with o(1) time complexity , you have to run over the 2 lists so it would be at least o(n) time "
                    },
                    {
                        "username": "ronnyvega",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity, right?"
                    },
                    {
                        "username": "rohitk_chef15",
                        "content": "[@shibvarghab](/shibvarghab)  can you please explain more about it how to reduce time complexity ,\\nAs we have to traverse the list basically same we do in array how willl it be diff from array\\n please explain "
                    },
                    {
                        "username": "Ursae",
                        "content": "[@shibvarghab](/shibvarghab) How can it be solved in O(1) I wonder? You still have to traverse the lists, don\\'t you? And traversing is dependent on the length, that makes it O(N) at least"
                    },
                    {
                        "username": "mliubiva",
                        "content": "[@a_hend0](/a_hend0) the question is still actual for other people who have the same problem)"
                    },
                    {
                        "username": "a_hend0",
                        "content": "[@Last_CodeBender](/Last_CodeBender)  i dont think hes still looking for the answer \\n"
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "Interweaving the two link lists without creating new memory. "
                    },
                    {
                        "username": "shibvarghab",
                        "content": "You need to create links between two given linked lists. Your goal should be to not use any extra space to merge the linked list. This question should be solved in O(1) time complexity. And that is the benefit of merging two linked lists over merging two arrays. "
                    },
                    {
                        "username": "finelliott",
                        "content": "I am wondering something similar."
                    },
                    {
                        "username": "abdelshokair",
                        "content": "Am i the only one who thinks this is a very vague requirement? Merging doesn\\'t necessarily mean they have to be in increasing order, which it seems it\\'s supposed to be. Seriously, write this stuff in the notes, so we don\\'t waste time."
                    },
                    {
                        "username": "dluan3",
                        "content": "somebody dont know how to read"
                    },
                    {
                        "username": "mng48301",
                        "content": "[@chazwinter](/chazwinter) exactly"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It literally says the new list should be sorted. The word sorted is even in bold. "
                    },
                    {
                        "username": "zenverak",
                        "content": "The examples given clear it up."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "\"merge\" means to combine the lists, and there\\'s a clear implication that the sorted order should be maintained. If you didn\\'t have to do that, you could just append one list to the other and call it a day, but that\\'s not what\\'s meant by merging."
                    },
                    {
                        "username": "cocokaribou",
                        "content": "hi I just started learning algorithm and here\\'s my question:\\nI\\'m using IDE to write main and run my code but don\\'t know what to input in the solution\\n\\nthe parameter of `mergeTwoLists()` is `ListNode` but in the Leetcode console the input goes like [1,2,4] [1,3,4] which seems like Array of Int??\\n\\nif anyone can tell me what main function would look like it would be really helpful\\n"
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "For anyone that\\'s stuck on this, the provided inputs for JavaScript/TypeScript are wrong. If you want to solve this problem in JS, you\\'ll have to convert the provided inputs into a linked list first."
                    },
                    {
                        "username": "adrianroman",
                        "content": "you can create a method to convert the input array into a linked list, then you can easily test in your own IDE with the input from leetcode, you can reuse that method for each linked list problem"
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "\nlet node1 = ListNode(1)\nlet node2 = ListNode(2)\nlet node3 = ListNode(3)\n\nnode1.next = node2\nnode2.next = node3\n\nlike this for example"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The syntax used to show the lists in the examples does look like an array, so it\\'s a little confusing, but they just mean that those are the values in the list. It might\\'ve been better if they\\'d notated the list like:\\n1 -> 2 -> 4"
                    },
                    {
                        "username": "reducingcodex",
                        "content": "https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\\n\\nFor those confuseed about the question, its explained better here.\\n\\nThe question isn\\'t explained well at all here."
                    },
                    {
                        "username": "wolfpackfitdev",
                        "content": "does anyone else get a NullPointerException when trying to reference val?"
                    },
                    {
                        "username": "ClassPython",
                        "content": "I also get null.\\n\\nIf I type   --> list1.val.  I get a null error. Can also visualize this by typing console.log(\\nlist1.val)\\n\\nBut if one types --> if (list1 !== null {  list1.val }  you will get the value, with no error. You can put a console.log(list1.val) inside the if statement to visualize.  i.e. -->  if (list1 !== null {  console.log(list1.val) }\\n\\nI\\'m not sure why it works this way."
                    },
                    {
                        "username": "The_Winter_Soldier",
                        "content": "Yes me \\nHow to solve this;"
                    },
                    {
                        "username": "Msey",
                        "content": "its definitely a medium question"
                    },
                    {
                        "username": "prakhar32",
                        "content": "[@devesh_kumar_kushwaha](/devesh_kumar_kushwaha)  Every champion was once a beginner!"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "[@SuperDeepBoy](/SuperDeepBoy)  then what are you doing here at leet code first of all learn some dsa first"
                    },
                    {
                        "username": "SuperDeepBoy",
                        "content": "Yeah I had never even heard of linked lists."
                    },
                    {
                        "username": "newdive",
                        "content": "I know the expected result is sorted is ascending order.\\n\\nbut the problem never state it specificially.\\n\\nI my opinion, sorted could be ascending or descending order.\\n\\nWhen i came across the term 'sorted', the first thing came into my mind was 'sorted in which order??? Do i have to figure out the order by myself??? These two list are sorted in same order??? blablabla... '\\n\\nI guess most people would take it as ascending order,  and it works in this situation.\\n\\nBut I think we should not adopt this kind of habitual thinking in our solution, which in practice could be very harmful.\\n\\nSo I strongly recommend that the problem be more specifically stated ."
                    },
                    {
                        "username": "Szymon5922",
                        "content": "Always check constraints section to get sure what data u can expect. \"Both list1 and list2 are sorted in non-decreasing order.\""
                    },
                    {
                        "username": "mng48301",
                        "content": "The description of the problem is fine. You should just read carefully. "
                    },
                    {
                        "username": "abhay_mnit22",
                        "content": " read contraints  its already mentioned that sorted in non-decending order "
                    },
                    {
                        "username": "alamick",
                        "content": "I completely agree. I\\'m surprised that this question is so popular, since I knew at a first glance that it was poorly written/stated/explained. "
                    },
                    {
                        "username": "chazwinter",
                        "content": "The problem states that you are given two sorted lists, and you should create a sorted list. Sorted means sorted, so the nature of your sorted list should be the same as the given sorted lists. The directions then go on to state that the given lists are non-decreasing, meaning your merged should be the same, given that sorted means sorted."
                    },
                    {
                        "username": "alexsherbuck",
                        "content": "Based on the documentation in the code, the edge cases may be improperly documented.\\n\\nThis explicitly states that this function returns a `ListNode`. The definition of a `ListNode` shows that `val` is set to whatever is passed or `0`. \\n\\n ```\\n/** javascript\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {    \\n```\\n\\nThe second sample test case is:\\n```\\nlist1 = []\\nlist2 =[]\\nOutput\\n[0]\\nExpected\\n[]\\n```\\nIf you build the function to satisfy the documentation this test case will fail every time.\\n\\nTo me, this needs to change to `@return {ListNode | null } ` but because of the test environment, `null === []` for the purposes of the \\'Expected` block"
                    },
                    {
                        "username": "AlanOnym",
                        "content": "I did not know what to put as the default case, thanks for the clarification"
                    },
                    {
                        "username": "bolemax",
                        "content": "`list1 = []` denotes an empty linked list, i.e. one which has no nodes. It has nothing to do with the definition of the node. I think that's pretty clear."
                    },
                    {
                        "username": "p4stoboy",
                        "content": "Thank you."
                    },
                    {
                        "username": "itsindigo",
                        "content": "+1, was stuck for a while trying to get that test case to pass"
                    }
                ]
            },
            {
                "id": 1575919,
                "content": [
                    {
                        "username": "Norie",
                        "content": "WHY CANT WE USE CONCAT and SORT HERE, ANYbody?"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/\\n"
                    },
                    {
                        "username": "Aravind_VC",
                        "content": "given list is not array it is linked list sot sort work with array not with linked list"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Bro this question is of linked list "
                    },
                    {
                        "username": "dadiprasanth",
                        "content": "[@mokotozett](/mokotozett)  bro it is linked list we have to transverse using next key word and we can use val key to find the value "
                    },
                    {
                        "username": "mokotozett",
                        "content": "I had the same question.... list1 + list2... then sort().... \\nI keep looking at the problem. Makes sense to use nodes if the output order is important or special. But the problem says Output: [1,1,2,3,4,4] without any regard to placing. Since we are dealing with int, sort() will do. What am i missing? Im just moving on to another one lol. glhf"
                    },
                    {
                        "username": "1260",
                        "content": "[@LavajavaLux](/LavajavaLux) This is in O(N) space and in general bad for LinkedList problems which usually require O(1)."
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "I first added all values to an array then sorted it, then initialized ListNodes from the array"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "`Lists` are note `Arrays`."
                    },
                    {
                        "username": "MoSaleh8890",
                        "content": "[@andrewcleonard](/andrewcleonard) So informative. Thanks Andrew;"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "this is link list so u can\\'t use that function............"
                    },
                    {
                        "username": "valmiki20",
                        "content": "so you plan to implement CONCAT and SORT for ListNode class? then you are good."
                    },
                    {
                        "username": "gregory_solomon",
                        "content": "This are linked lists, so a bunch of pointers that point to things, not actual values, it is NOT an array."
                    },
                    {
                        "username": "andrewcleonard",
                        "content": "JavaScript response to your question:\\n\\n`list1` and `list2` are objects, **NOT** arrays. It confused me that the examples here show `list1` and `list2` as arrays. \\n\\nIf you `console.log(JSON.stringify(list1))`, you get:\\n\\n```\\nconst list1 = {\\n\\tval: 1,\\n\\tnext: {\\n\\t\\tval: 2,\\n\\t\\tnext: {\\n\\t\\t\\tval: 4,\\n\\t\\t\\tnext: null,\\n\\t\\t},\\n\\t},\\n};\\n```\\n\\nJavaScript has \"standard built-in objects.\" [Arrays are one of JavaScript\\'s built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\\n\\nOn the other hand, linked lists are not part of JavaScript. [Linked lists are a very common data structure used in many programming languages.](https://en.wikipedia.org/wiki/Linked_list) To use a linked list in JavaScript, you must build it yourself on top of vanilla JavaScript. Linked lists have advantages/disadvantages compared to arrays and other data structures:\\n\\nLooking at this specific example, my understanding is that the approach using the the `ListNode` function on line 3 is an older way of using JavaScript. With ES6, we will mostly use [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\\n\\nThis example would be clearer to me if they used this more modern object-oriented approach.\\n\\nI found this freeCodeCamp video and the codepen in the description to be most helpful:\\nhttps://www.youtube.com/watch?v=9YddVVsdG5A\\n\\n(data structures are new to me, so please fact-check me and let me know about any mistakes)"
                    },
                    {
                        "username": "Aryan_Arya",
                        "content": "That will increase the time complexity of the solution."
                    },
                    {
                        "username": "Prince_Vijay",
                        "content": "I didn\\'t understand the class given above. can anyone explain.\\n"
                    },
                    {
                        "username": "zhang2012",
                        "content": "The ListNode class shows you how the linked list is defined for your chosen language. Take Python3 as an example. To define a linked list [1, 2, 4], you write \"l1 = ListNode(1,ListNode(2, ListNode(3, None)))\". Hence, to get the first value (the head) of l1, we do \"l1.val\"; to get second value, we do \"l1.next.val\"; and to get the third value, we do \"l1.next.next.val\""
                    },
                    {
                        "username": "vikaslinux",
                        "content": "Please explain the meaning of splicing.Should I modify the two linked lists and make the new list from the existing nodes or should I create new nodes for the merged linkes list."
                    },
                    {
                        "username": "erenyeager1",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity  ,, no way you can solve it with o(1) time complexity , you have to run over the 2 lists so it would be at least o(n) time "
                    },
                    {
                        "username": "ronnyvega",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity, right?"
                    },
                    {
                        "username": "rohitk_chef15",
                        "content": "[@shibvarghab](/shibvarghab)  can you please explain more about it how to reduce time complexity ,\\nAs we have to traverse the list basically same we do in array how willl it be diff from array\\n please explain "
                    },
                    {
                        "username": "Ursae",
                        "content": "[@shibvarghab](/shibvarghab) How can it be solved in O(1) I wonder? You still have to traverse the lists, don\\'t you? And traversing is dependent on the length, that makes it O(N) at least"
                    },
                    {
                        "username": "mliubiva",
                        "content": "[@a_hend0](/a_hend0) the question is still actual for other people who have the same problem)"
                    },
                    {
                        "username": "a_hend0",
                        "content": "[@Last_CodeBender](/Last_CodeBender)  i dont think hes still looking for the answer \\n"
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "Interweaving the two link lists without creating new memory. "
                    },
                    {
                        "username": "shibvarghab",
                        "content": "You need to create links between two given linked lists. Your goal should be to not use any extra space to merge the linked list. This question should be solved in O(1) time complexity. And that is the benefit of merging two linked lists over merging two arrays. "
                    },
                    {
                        "username": "finelliott",
                        "content": "I am wondering something similar."
                    },
                    {
                        "username": "abdelshokair",
                        "content": "Am i the only one who thinks this is a very vague requirement? Merging doesn\\'t necessarily mean they have to be in increasing order, which it seems it\\'s supposed to be. Seriously, write this stuff in the notes, so we don\\'t waste time."
                    },
                    {
                        "username": "dluan3",
                        "content": "somebody dont know how to read"
                    },
                    {
                        "username": "mng48301",
                        "content": "[@chazwinter](/chazwinter) exactly"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It literally says the new list should be sorted. The word sorted is even in bold. "
                    },
                    {
                        "username": "zenverak",
                        "content": "The examples given clear it up."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "\"merge\" means to combine the lists, and there\\'s a clear implication that the sorted order should be maintained. If you didn\\'t have to do that, you could just append one list to the other and call it a day, but that\\'s not what\\'s meant by merging."
                    },
                    {
                        "username": "cocokaribou",
                        "content": "hi I just started learning algorithm and here\\'s my question:\\nI\\'m using IDE to write main and run my code but don\\'t know what to input in the solution\\n\\nthe parameter of `mergeTwoLists()` is `ListNode` but in the Leetcode console the input goes like [1,2,4] [1,3,4] which seems like Array of Int??\\n\\nif anyone can tell me what main function would look like it would be really helpful\\n"
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "For anyone that\\'s stuck on this, the provided inputs for JavaScript/TypeScript are wrong. If you want to solve this problem in JS, you\\'ll have to convert the provided inputs into a linked list first."
                    },
                    {
                        "username": "adrianroman",
                        "content": "you can create a method to convert the input array into a linked list, then you can easily test in your own IDE with the input from leetcode, you can reuse that method for each linked list problem"
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "\nlet node1 = ListNode(1)\nlet node2 = ListNode(2)\nlet node3 = ListNode(3)\n\nnode1.next = node2\nnode2.next = node3\n\nlike this for example"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The syntax used to show the lists in the examples does look like an array, so it\\'s a little confusing, but they just mean that those are the values in the list. It might\\'ve been better if they\\'d notated the list like:\\n1 -> 2 -> 4"
                    },
                    {
                        "username": "reducingcodex",
                        "content": "https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\\n\\nFor those confuseed about the question, its explained better here.\\n\\nThe question isn\\'t explained well at all here."
                    },
                    {
                        "username": "wolfpackfitdev",
                        "content": "does anyone else get a NullPointerException when trying to reference val?"
                    },
                    {
                        "username": "ClassPython",
                        "content": "I also get null.\\n\\nIf I type   --> list1.val.  I get a null error. Can also visualize this by typing console.log(\\nlist1.val)\\n\\nBut if one types --> if (list1 !== null {  list1.val }  you will get the value, with no error. You can put a console.log(list1.val) inside the if statement to visualize.  i.e. -->  if (list1 !== null {  console.log(list1.val) }\\n\\nI\\'m not sure why it works this way."
                    },
                    {
                        "username": "The_Winter_Soldier",
                        "content": "Yes me \\nHow to solve this;"
                    },
                    {
                        "username": "Msey",
                        "content": "its definitely a medium question"
                    },
                    {
                        "username": "prakhar32",
                        "content": "[@devesh_kumar_kushwaha](/devesh_kumar_kushwaha)  Every champion was once a beginner!"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "[@SuperDeepBoy](/SuperDeepBoy)  then what are you doing here at leet code first of all learn some dsa first"
                    },
                    {
                        "username": "SuperDeepBoy",
                        "content": "Yeah I had never even heard of linked lists."
                    },
                    {
                        "username": "newdive",
                        "content": "I know the expected result is sorted is ascending order.\\n\\nbut the problem never state it specificially.\\n\\nI my opinion, sorted could be ascending or descending order.\\n\\nWhen i came across the term 'sorted', the first thing came into my mind was 'sorted in which order??? Do i have to figure out the order by myself??? These two list are sorted in same order??? blablabla... '\\n\\nI guess most people would take it as ascending order,  and it works in this situation.\\n\\nBut I think we should not adopt this kind of habitual thinking in our solution, which in practice could be very harmful.\\n\\nSo I strongly recommend that the problem be more specifically stated ."
                    },
                    {
                        "username": "Szymon5922",
                        "content": "Always check constraints section to get sure what data u can expect. \"Both list1 and list2 are sorted in non-decreasing order.\""
                    },
                    {
                        "username": "mng48301",
                        "content": "The description of the problem is fine. You should just read carefully. "
                    },
                    {
                        "username": "abhay_mnit22",
                        "content": " read contraints  its already mentioned that sorted in non-decending order "
                    },
                    {
                        "username": "alamick",
                        "content": "I completely agree. I\\'m surprised that this question is so popular, since I knew at a first glance that it was poorly written/stated/explained. "
                    },
                    {
                        "username": "chazwinter",
                        "content": "The problem states that you are given two sorted lists, and you should create a sorted list. Sorted means sorted, so the nature of your sorted list should be the same as the given sorted lists. The directions then go on to state that the given lists are non-decreasing, meaning your merged should be the same, given that sorted means sorted."
                    },
                    {
                        "username": "alexsherbuck",
                        "content": "Based on the documentation in the code, the edge cases may be improperly documented.\\n\\nThis explicitly states that this function returns a `ListNode`. The definition of a `ListNode` shows that `val` is set to whatever is passed or `0`. \\n\\n ```\\n/** javascript\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {    \\n```\\n\\nThe second sample test case is:\\n```\\nlist1 = []\\nlist2 =[]\\nOutput\\n[0]\\nExpected\\n[]\\n```\\nIf you build the function to satisfy the documentation this test case will fail every time.\\n\\nTo me, this needs to change to `@return {ListNode | null } ` but because of the test environment, `null === []` for the purposes of the \\'Expected` block"
                    },
                    {
                        "username": "AlanOnym",
                        "content": "I did not know what to put as the default case, thanks for the clarification"
                    },
                    {
                        "username": "bolemax",
                        "content": "`list1 = []` denotes an empty linked list, i.e. one which has no nodes. It has nothing to do with the definition of the node. I think that's pretty clear."
                    },
                    {
                        "username": "p4stoboy",
                        "content": "Thank you."
                    },
                    {
                        "username": "itsindigo",
                        "content": "+1, was stuck for a while trying to get that test case to pass"
                    }
                ]
            },
            {
                "id": 1569308,
                "content": [
                    {
                        "username": "Norie",
                        "content": "WHY CANT WE USE CONCAT and SORT HERE, ANYbody?"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/\\n"
                    },
                    {
                        "username": "Aravind_VC",
                        "content": "given list is not array it is linked list sot sort work with array not with linked list"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Bro this question is of linked list "
                    },
                    {
                        "username": "dadiprasanth",
                        "content": "[@mokotozett](/mokotozett)  bro it is linked list we have to transverse using next key word and we can use val key to find the value "
                    },
                    {
                        "username": "mokotozett",
                        "content": "I had the same question.... list1 + list2... then sort().... \\nI keep looking at the problem. Makes sense to use nodes if the output order is important or special. But the problem says Output: [1,1,2,3,4,4] without any regard to placing. Since we are dealing with int, sort() will do. What am i missing? Im just moving on to another one lol. glhf"
                    },
                    {
                        "username": "1260",
                        "content": "[@LavajavaLux](/LavajavaLux) This is in O(N) space and in general bad for LinkedList problems which usually require O(1)."
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "I first added all values to an array then sorted it, then initialized ListNodes from the array"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "`Lists` are note `Arrays`."
                    },
                    {
                        "username": "MoSaleh8890",
                        "content": "[@andrewcleonard](/andrewcleonard) So informative. Thanks Andrew;"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "this is link list so u can\\'t use that function............"
                    },
                    {
                        "username": "valmiki20",
                        "content": "so you plan to implement CONCAT and SORT for ListNode class? then you are good."
                    },
                    {
                        "username": "gregory_solomon",
                        "content": "This are linked lists, so a bunch of pointers that point to things, not actual values, it is NOT an array."
                    },
                    {
                        "username": "andrewcleonard",
                        "content": "JavaScript response to your question:\\n\\n`list1` and `list2` are objects, **NOT** arrays. It confused me that the examples here show `list1` and `list2` as arrays. \\n\\nIf you `console.log(JSON.stringify(list1))`, you get:\\n\\n```\\nconst list1 = {\\n\\tval: 1,\\n\\tnext: {\\n\\t\\tval: 2,\\n\\t\\tnext: {\\n\\t\\t\\tval: 4,\\n\\t\\t\\tnext: null,\\n\\t\\t},\\n\\t},\\n};\\n```\\n\\nJavaScript has \"standard built-in objects.\" [Arrays are one of JavaScript\\'s built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\\n\\nOn the other hand, linked lists are not part of JavaScript. [Linked lists are a very common data structure used in many programming languages.](https://en.wikipedia.org/wiki/Linked_list) To use a linked list in JavaScript, you must build it yourself on top of vanilla JavaScript. Linked lists have advantages/disadvantages compared to arrays and other data structures:\\n\\nLooking at this specific example, my understanding is that the approach using the the `ListNode` function on line 3 is an older way of using JavaScript. With ES6, we will mostly use [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\\n\\nThis example would be clearer to me if they used this more modern object-oriented approach.\\n\\nI found this freeCodeCamp video and the codepen in the description to be most helpful:\\nhttps://www.youtube.com/watch?v=9YddVVsdG5A\\n\\n(data structures are new to me, so please fact-check me and let me know about any mistakes)"
                    },
                    {
                        "username": "Aryan_Arya",
                        "content": "That will increase the time complexity of the solution."
                    },
                    {
                        "username": "Prince_Vijay",
                        "content": "I didn\\'t understand the class given above. can anyone explain.\\n"
                    },
                    {
                        "username": "zhang2012",
                        "content": "The ListNode class shows you how the linked list is defined for your chosen language. Take Python3 as an example. To define a linked list [1, 2, 4], you write \"l1 = ListNode(1,ListNode(2, ListNode(3, None)))\". Hence, to get the first value (the head) of l1, we do \"l1.val\"; to get second value, we do \"l1.next.val\"; and to get the third value, we do \"l1.next.next.val\""
                    },
                    {
                        "username": "vikaslinux",
                        "content": "Please explain the meaning of splicing.Should I modify the two linked lists and make the new list from the existing nodes or should I create new nodes for the merged linkes list."
                    },
                    {
                        "username": "erenyeager1",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity  ,, no way you can solve it with o(1) time complexity , you have to run over the 2 lists so it would be at least o(n) time "
                    },
                    {
                        "username": "ronnyvega",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity, right?"
                    },
                    {
                        "username": "rohitk_chef15",
                        "content": "[@shibvarghab](/shibvarghab)  can you please explain more about it how to reduce time complexity ,\\nAs we have to traverse the list basically same we do in array how willl it be diff from array\\n please explain "
                    },
                    {
                        "username": "Ursae",
                        "content": "[@shibvarghab](/shibvarghab) How can it be solved in O(1) I wonder? You still have to traverse the lists, don\\'t you? And traversing is dependent on the length, that makes it O(N) at least"
                    },
                    {
                        "username": "mliubiva",
                        "content": "[@a_hend0](/a_hend0) the question is still actual for other people who have the same problem)"
                    },
                    {
                        "username": "a_hend0",
                        "content": "[@Last_CodeBender](/Last_CodeBender)  i dont think hes still looking for the answer \\n"
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "Interweaving the two link lists without creating new memory. "
                    },
                    {
                        "username": "shibvarghab",
                        "content": "You need to create links between two given linked lists. Your goal should be to not use any extra space to merge the linked list. This question should be solved in O(1) time complexity. And that is the benefit of merging two linked lists over merging two arrays. "
                    },
                    {
                        "username": "finelliott",
                        "content": "I am wondering something similar."
                    },
                    {
                        "username": "abdelshokair",
                        "content": "Am i the only one who thinks this is a very vague requirement? Merging doesn\\'t necessarily mean they have to be in increasing order, which it seems it\\'s supposed to be. Seriously, write this stuff in the notes, so we don\\'t waste time."
                    },
                    {
                        "username": "dluan3",
                        "content": "somebody dont know how to read"
                    },
                    {
                        "username": "mng48301",
                        "content": "[@chazwinter](/chazwinter) exactly"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It literally says the new list should be sorted. The word sorted is even in bold. "
                    },
                    {
                        "username": "zenverak",
                        "content": "The examples given clear it up."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "\"merge\" means to combine the lists, and there\\'s a clear implication that the sorted order should be maintained. If you didn\\'t have to do that, you could just append one list to the other and call it a day, but that\\'s not what\\'s meant by merging."
                    },
                    {
                        "username": "cocokaribou",
                        "content": "hi I just started learning algorithm and here\\'s my question:\\nI\\'m using IDE to write main and run my code but don\\'t know what to input in the solution\\n\\nthe parameter of `mergeTwoLists()` is `ListNode` but in the Leetcode console the input goes like [1,2,4] [1,3,4] which seems like Array of Int??\\n\\nif anyone can tell me what main function would look like it would be really helpful\\n"
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "For anyone that\\'s stuck on this, the provided inputs for JavaScript/TypeScript are wrong. If you want to solve this problem in JS, you\\'ll have to convert the provided inputs into a linked list first."
                    },
                    {
                        "username": "adrianroman",
                        "content": "you can create a method to convert the input array into a linked list, then you can easily test in your own IDE with the input from leetcode, you can reuse that method for each linked list problem"
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "\nlet node1 = ListNode(1)\nlet node2 = ListNode(2)\nlet node3 = ListNode(3)\n\nnode1.next = node2\nnode2.next = node3\n\nlike this for example"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The syntax used to show the lists in the examples does look like an array, so it\\'s a little confusing, but they just mean that those are the values in the list. It might\\'ve been better if they\\'d notated the list like:\\n1 -> 2 -> 4"
                    },
                    {
                        "username": "reducingcodex",
                        "content": "https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\\n\\nFor those confuseed about the question, its explained better here.\\n\\nThe question isn\\'t explained well at all here."
                    },
                    {
                        "username": "wolfpackfitdev",
                        "content": "does anyone else get a NullPointerException when trying to reference val?"
                    },
                    {
                        "username": "ClassPython",
                        "content": "I also get null.\\n\\nIf I type   --> list1.val.  I get a null error. Can also visualize this by typing console.log(\\nlist1.val)\\n\\nBut if one types --> if (list1 !== null {  list1.val }  you will get the value, with no error. You can put a console.log(list1.val) inside the if statement to visualize.  i.e. -->  if (list1 !== null {  console.log(list1.val) }\\n\\nI\\'m not sure why it works this way."
                    },
                    {
                        "username": "The_Winter_Soldier",
                        "content": "Yes me \\nHow to solve this;"
                    },
                    {
                        "username": "Msey",
                        "content": "its definitely a medium question"
                    },
                    {
                        "username": "prakhar32",
                        "content": "[@devesh_kumar_kushwaha](/devesh_kumar_kushwaha)  Every champion was once a beginner!"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "[@SuperDeepBoy](/SuperDeepBoy)  then what are you doing here at leet code first of all learn some dsa first"
                    },
                    {
                        "username": "SuperDeepBoy",
                        "content": "Yeah I had never even heard of linked lists."
                    },
                    {
                        "username": "newdive",
                        "content": "I know the expected result is sorted is ascending order.\\n\\nbut the problem never state it specificially.\\n\\nI my opinion, sorted could be ascending or descending order.\\n\\nWhen i came across the term 'sorted', the first thing came into my mind was 'sorted in which order??? Do i have to figure out the order by myself??? These two list are sorted in same order??? blablabla... '\\n\\nI guess most people would take it as ascending order,  and it works in this situation.\\n\\nBut I think we should not adopt this kind of habitual thinking in our solution, which in practice could be very harmful.\\n\\nSo I strongly recommend that the problem be more specifically stated ."
                    },
                    {
                        "username": "Szymon5922",
                        "content": "Always check constraints section to get sure what data u can expect. \"Both list1 and list2 are sorted in non-decreasing order.\""
                    },
                    {
                        "username": "mng48301",
                        "content": "The description of the problem is fine. You should just read carefully. "
                    },
                    {
                        "username": "abhay_mnit22",
                        "content": " read contraints  its already mentioned that sorted in non-decending order "
                    },
                    {
                        "username": "alamick",
                        "content": "I completely agree. I\\'m surprised that this question is so popular, since I knew at a first glance that it was poorly written/stated/explained. "
                    },
                    {
                        "username": "chazwinter",
                        "content": "The problem states that you are given two sorted lists, and you should create a sorted list. Sorted means sorted, so the nature of your sorted list should be the same as the given sorted lists. The directions then go on to state that the given lists are non-decreasing, meaning your merged should be the same, given that sorted means sorted."
                    },
                    {
                        "username": "alexsherbuck",
                        "content": "Based on the documentation in the code, the edge cases may be improperly documented.\\n\\nThis explicitly states that this function returns a `ListNode`. The definition of a `ListNode` shows that `val` is set to whatever is passed or `0`. \\n\\n ```\\n/** javascript\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {    \\n```\\n\\nThe second sample test case is:\\n```\\nlist1 = []\\nlist2 =[]\\nOutput\\n[0]\\nExpected\\n[]\\n```\\nIf you build the function to satisfy the documentation this test case will fail every time.\\n\\nTo me, this needs to change to `@return {ListNode | null } ` but because of the test environment, `null === []` for the purposes of the \\'Expected` block"
                    },
                    {
                        "username": "AlanOnym",
                        "content": "I did not know what to put as the default case, thanks for the clarification"
                    },
                    {
                        "username": "bolemax",
                        "content": "`list1 = []` denotes an empty linked list, i.e. one which has no nodes. It has nothing to do with the definition of the node. I think that's pretty clear."
                    },
                    {
                        "username": "p4stoboy",
                        "content": "Thank you."
                    },
                    {
                        "username": "itsindigo",
                        "content": "+1, was stuck for a while trying to get that test case to pass"
                    }
                ]
            },
            {
                "id": 1715387,
                "content": [
                    {
                        "username": "Norie",
                        "content": "WHY CANT WE USE CONCAT and SORT HERE, ANYbody?"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/\\n"
                    },
                    {
                        "username": "Aravind_VC",
                        "content": "given list is not array it is linked list sot sort work with array not with linked list"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Bro this question is of linked list "
                    },
                    {
                        "username": "dadiprasanth",
                        "content": "[@mokotozett](/mokotozett)  bro it is linked list we have to transverse using next key word and we can use val key to find the value "
                    },
                    {
                        "username": "mokotozett",
                        "content": "I had the same question.... list1 + list2... then sort().... \\nI keep looking at the problem. Makes sense to use nodes if the output order is important or special. But the problem says Output: [1,1,2,3,4,4] without any regard to placing. Since we are dealing with int, sort() will do. What am i missing? Im just moving on to another one lol. glhf"
                    },
                    {
                        "username": "1260",
                        "content": "[@LavajavaLux](/LavajavaLux) This is in O(N) space and in general bad for LinkedList problems which usually require O(1)."
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "I first added all values to an array then sorted it, then initialized ListNodes from the array"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "`Lists` are note `Arrays`."
                    },
                    {
                        "username": "MoSaleh8890",
                        "content": "[@andrewcleonard](/andrewcleonard) So informative. Thanks Andrew;"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "this is link list so u can\\'t use that function............"
                    },
                    {
                        "username": "valmiki20",
                        "content": "so you plan to implement CONCAT and SORT for ListNode class? then you are good."
                    },
                    {
                        "username": "gregory_solomon",
                        "content": "This are linked lists, so a bunch of pointers that point to things, not actual values, it is NOT an array."
                    },
                    {
                        "username": "andrewcleonard",
                        "content": "JavaScript response to your question:\\n\\n`list1` and `list2` are objects, **NOT** arrays. It confused me that the examples here show `list1` and `list2` as arrays. \\n\\nIf you `console.log(JSON.stringify(list1))`, you get:\\n\\n```\\nconst list1 = {\\n\\tval: 1,\\n\\tnext: {\\n\\t\\tval: 2,\\n\\t\\tnext: {\\n\\t\\t\\tval: 4,\\n\\t\\t\\tnext: null,\\n\\t\\t},\\n\\t},\\n};\\n```\\n\\nJavaScript has \"standard built-in objects.\" [Arrays are one of JavaScript\\'s built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\\n\\nOn the other hand, linked lists are not part of JavaScript. [Linked lists are a very common data structure used in many programming languages.](https://en.wikipedia.org/wiki/Linked_list) To use a linked list in JavaScript, you must build it yourself on top of vanilla JavaScript. Linked lists have advantages/disadvantages compared to arrays and other data structures:\\n\\nLooking at this specific example, my understanding is that the approach using the the `ListNode` function on line 3 is an older way of using JavaScript. With ES6, we will mostly use [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\\n\\nThis example would be clearer to me if they used this more modern object-oriented approach.\\n\\nI found this freeCodeCamp video and the codepen in the description to be most helpful:\\nhttps://www.youtube.com/watch?v=9YddVVsdG5A\\n\\n(data structures are new to me, so please fact-check me and let me know about any mistakes)"
                    },
                    {
                        "username": "Aryan_Arya",
                        "content": "That will increase the time complexity of the solution."
                    },
                    {
                        "username": "Prince_Vijay",
                        "content": "I didn\\'t understand the class given above. can anyone explain.\\n"
                    },
                    {
                        "username": "zhang2012",
                        "content": "The ListNode class shows you how the linked list is defined for your chosen language. Take Python3 as an example. To define a linked list [1, 2, 4], you write \"l1 = ListNode(1,ListNode(2, ListNode(3, None)))\". Hence, to get the first value (the head) of l1, we do \"l1.val\"; to get second value, we do \"l1.next.val\"; and to get the third value, we do \"l1.next.next.val\""
                    },
                    {
                        "username": "vikaslinux",
                        "content": "Please explain the meaning of splicing.Should I modify the two linked lists and make the new list from the existing nodes or should I create new nodes for the merged linkes list."
                    },
                    {
                        "username": "erenyeager1",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity  ,, no way you can solve it with o(1) time complexity , you have to run over the 2 lists so it would be at least o(n) time "
                    },
                    {
                        "username": "ronnyvega",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity, right?"
                    },
                    {
                        "username": "rohitk_chef15",
                        "content": "[@shibvarghab](/shibvarghab)  can you please explain more about it how to reduce time complexity ,\\nAs we have to traverse the list basically same we do in array how willl it be diff from array\\n please explain "
                    },
                    {
                        "username": "Ursae",
                        "content": "[@shibvarghab](/shibvarghab) How can it be solved in O(1) I wonder? You still have to traverse the lists, don\\'t you? And traversing is dependent on the length, that makes it O(N) at least"
                    },
                    {
                        "username": "mliubiva",
                        "content": "[@a_hend0](/a_hend0) the question is still actual for other people who have the same problem)"
                    },
                    {
                        "username": "a_hend0",
                        "content": "[@Last_CodeBender](/Last_CodeBender)  i dont think hes still looking for the answer \\n"
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "Interweaving the two link lists without creating new memory. "
                    },
                    {
                        "username": "shibvarghab",
                        "content": "You need to create links between two given linked lists. Your goal should be to not use any extra space to merge the linked list. This question should be solved in O(1) time complexity. And that is the benefit of merging two linked lists over merging two arrays. "
                    },
                    {
                        "username": "finelliott",
                        "content": "I am wondering something similar."
                    },
                    {
                        "username": "abdelshokair",
                        "content": "Am i the only one who thinks this is a very vague requirement? Merging doesn\\'t necessarily mean they have to be in increasing order, which it seems it\\'s supposed to be. Seriously, write this stuff in the notes, so we don\\'t waste time."
                    },
                    {
                        "username": "dluan3",
                        "content": "somebody dont know how to read"
                    },
                    {
                        "username": "mng48301",
                        "content": "[@chazwinter](/chazwinter) exactly"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It literally says the new list should be sorted. The word sorted is even in bold. "
                    },
                    {
                        "username": "zenverak",
                        "content": "The examples given clear it up."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "\"merge\" means to combine the lists, and there\\'s a clear implication that the sorted order should be maintained. If you didn\\'t have to do that, you could just append one list to the other and call it a day, but that\\'s not what\\'s meant by merging."
                    },
                    {
                        "username": "cocokaribou",
                        "content": "hi I just started learning algorithm and here\\'s my question:\\nI\\'m using IDE to write main and run my code but don\\'t know what to input in the solution\\n\\nthe parameter of `mergeTwoLists()` is `ListNode` but in the Leetcode console the input goes like [1,2,4] [1,3,4] which seems like Array of Int??\\n\\nif anyone can tell me what main function would look like it would be really helpful\\n"
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "For anyone that\\'s stuck on this, the provided inputs for JavaScript/TypeScript are wrong. If you want to solve this problem in JS, you\\'ll have to convert the provided inputs into a linked list first."
                    },
                    {
                        "username": "adrianroman",
                        "content": "you can create a method to convert the input array into a linked list, then you can easily test in your own IDE with the input from leetcode, you can reuse that method for each linked list problem"
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "\nlet node1 = ListNode(1)\nlet node2 = ListNode(2)\nlet node3 = ListNode(3)\n\nnode1.next = node2\nnode2.next = node3\n\nlike this for example"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The syntax used to show the lists in the examples does look like an array, so it\\'s a little confusing, but they just mean that those are the values in the list. It might\\'ve been better if they\\'d notated the list like:\\n1 -> 2 -> 4"
                    },
                    {
                        "username": "reducingcodex",
                        "content": "https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\\n\\nFor those confuseed about the question, its explained better here.\\n\\nThe question isn\\'t explained well at all here."
                    },
                    {
                        "username": "wolfpackfitdev",
                        "content": "does anyone else get a NullPointerException when trying to reference val?"
                    },
                    {
                        "username": "ClassPython",
                        "content": "I also get null.\\n\\nIf I type   --> list1.val.  I get a null error. Can also visualize this by typing console.log(\\nlist1.val)\\n\\nBut if one types --> if (list1 !== null {  list1.val }  you will get the value, with no error. You can put a console.log(list1.val) inside the if statement to visualize.  i.e. -->  if (list1 !== null {  console.log(list1.val) }\\n\\nI\\'m not sure why it works this way."
                    },
                    {
                        "username": "The_Winter_Soldier",
                        "content": "Yes me \\nHow to solve this;"
                    },
                    {
                        "username": "Msey",
                        "content": "its definitely a medium question"
                    },
                    {
                        "username": "prakhar32",
                        "content": "[@devesh_kumar_kushwaha](/devesh_kumar_kushwaha)  Every champion was once a beginner!"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "[@SuperDeepBoy](/SuperDeepBoy)  then what are you doing here at leet code first of all learn some dsa first"
                    },
                    {
                        "username": "SuperDeepBoy",
                        "content": "Yeah I had never even heard of linked lists."
                    },
                    {
                        "username": "newdive",
                        "content": "I know the expected result is sorted is ascending order.\\n\\nbut the problem never state it specificially.\\n\\nI my opinion, sorted could be ascending or descending order.\\n\\nWhen i came across the term 'sorted', the first thing came into my mind was 'sorted in which order??? Do i have to figure out the order by myself??? These two list are sorted in same order??? blablabla... '\\n\\nI guess most people would take it as ascending order,  and it works in this situation.\\n\\nBut I think we should not adopt this kind of habitual thinking in our solution, which in practice could be very harmful.\\n\\nSo I strongly recommend that the problem be more specifically stated ."
                    },
                    {
                        "username": "Szymon5922",
                        "content": "Always check constraints section to get sure what data u can expect. \"Both list1 and list2 are sorted in non-decreasing order.\""
                    },
                    {
                        "username": "mng48301",
                        "content": "The description of the problem is fine. You should just read carefully. "
                    },
                    {
                        "username": "abhay_mnit22",
                        "content": " read contraints  its already mentioned that sorted in non-decending order "
                    },
                    {
                        "username": "alamick",
                        "content": "I completely agree. I\\'m surprised that this question is so popular, since I knew at a first glance that it was poorly written/stated/explained. "
                    },
                    {
                        "username": "chazwinter",
                        "content": "The problem states that you are given two sorted lists, and you should create a sorted list. Sorted means sorted, so the nature of your sorted list should be the same as the given sorted lists. The directions then go on to state that the given lists are non-decreasing, meaning your merged should be the same, given that sorted means sorted."
                    },
                    {
                        "username": "alexsherbuck",
                        "content": "Based on the documentation in the code, the edge cases may be improperly documented.\\n\\nThis explicitly states that this function returns a `ListNode`. The definition of a `ListNode` shows that `val` is set to whatever is passed or `0`. \\n\\n ```\\n/** javascript\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {    \\n```\\n\\nThe second sample test case is:\\n```\\nlist1 = []\\nlist2 =[]\\nOutput\\n[0]\\nExpected\\n[]\\n```\\nIf you build the function to satisfy the documentation this test case will fail every time.\\n\\nTo me, this needs to change to `@return {ListNode | null } ` but because of the test environment, `null === []` for the purposes of the \\'Expected` block"
                    },
                    {
                        "username": "AlanOnym",
                        "content": "I did not know what to put as the default case, thanks for the clarification"
                    },
                    {
                        "username": "bolemax",
                        "content": "`list1 = []` denotes an empty linked list, i.e. one which has no nodes. It has nothing to do with the definition of the node. I think that's pretty clear."
                    },
                    {
                        "username": "p4stoboy",
                        "content": "Thank you."
                    },
                    {
                        "username": "itsindigo",
                        "content": "+1, was stuck for a while trying to get that test case to pass"
                    }
                ]
            },
            {
                "id": 1830577,
                "content": [
                    {
                        "username": "Norie",
                        "content": "WHY CANT WE USE CONCAT and SORT HERE, ANYbody?"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/\\n"
                    },
                    {
                        "username": "Aravind_VC",
                        "content": "given list is not array it is linked list sot sort work with array not with linked list"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Bro this question is of linked list "
                    },
                    {
                        "username": "dadiprasanth",
                        "content": "[@mokotozett](/mokotozett)  bro it is linked list we have to transverse using next key word and we can use val key to find the value "
                    },
                    {
                        "username": "mokotozett",
                        "content": "I had the same question.... list1 + list2... then sort().... \\nI keep looking at the problem. Makes sense to use nodes if the output order is important or special. But the problem says Output: [1,1,2,3,4,4] without any regard to placing. Since we are dealing with int, sort() will do. What am i missing? Im just moving on to another one lol. glhf"
                    },
                    {
                        "username": "1260",
                        "content": "[@LavajavaLux](/LavajavaLux) This is in O(N) space and in general bad for LinkedList problems which usually require O(1)."
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "I first added all values to an array then sorted it, then initialized ListNodes from the array"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "`Lists` are note `Arrays`."
                    },
                    {
                        "username": "MoSaleh8890",
                        "content": "[@andrewcleonard](/andrewcleonard) So informative. Thanks Andrew;"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "this is link list so u can\\'t use that function............"
                    },
                    {
                        "username": "valmiki20",
                        "content": "so you plan to implement CONCAT and SORT for ListNode class? then you are good."
                    },
                    {
                        "username": "gregory_solomon",
                        "content": "This are linked lists, so a bunch of pointers that point to things, not actual values, it is NOT an array."
                    },
                    {
                        "username": "andrewcleonard",
                        "content": "JavaScript response to your question:\\n\\n`list1` and `list2` are objects, **NOT** arrays. It confused me that the examples here show `list1` and `list2` as arrays. \\n\\nIf you `console.log(JSON.stringify(list1))`, you get:\\n\\n```\\nconst list1 = {\\n\\tval: 1,\\n\\tnext: {\\n\\t\\tval: 2,\\n\\t\\tnext: {\\n\\t\\t\\tval: 4,\\n\\t\\t\\tnext: null,\\n\\t\\t},\\n\\t},\\n};\\n```\\n\\nJavaScript has \"standard built-in objects.\" [Arrays are one of JavaScript\\'s built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\\n\\nOn the other hand, linked lists are not part of JavaScript. [Linked lists are a very common data structure used in many programming languages.](https://en.wikipedia.org/wiki/Linked_list) To use a linked list in JavaScript, you must build it yourself on top of vanilla JavaScript. Linked lists have advantages/disadvantages compared to arrays and other data structures:\\n\\nLooking at this specific example, my understanding is that the approach using the the `ListNode` function on line 3 is an older way of using JavaScript. With ES6, we will mostly use [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\\n\\nThis example would be clearer to me if they used this more modern object-oriented approach.\\n\\nI found this freeCodeCamp video and the codepen in the description to be most helpful:\\nhttps://www.youtube.com/watch?v=9YddVVsdG5A\\n\\n(data structures are new to me, so please fact-check me and let me know about any mistakes)"
                    },
                    {
                        "username": "Aryan_Arya",
                        "content": "That will increase the time complexity of the solution."
                    },
                    {
                        "username": "Prince_Vijay",
                        "content": "I didn\\'t understand the class given above. can anyone explain.\\n"
                    },
                    {
                        "username": "zhang2012",
                        "content": "The ListNode class shows you how the linked list is defined for your chosen language. Take Python3 as an example. To define a linked list [1, 2, 4], you write \"l1 = ListNode(1,ListNode(2, ListNode(3, None)))\". Hence, to get the first value (the head) of l1, we do \"l1.val\"; to get second value, we do \"l1.next.val\"; and to get the third value, we do \"l1.next.next.val\""
                    },
                    {
                        "username": "vikaslinux",
                        "content": "Please explain the meaning of splicing.Should I modify the two linked lists and make the new list from the existing nodes or should I create new nodes for the merged linkes list."
                    },
                    {
                        "username": "erenyeager1",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity  ,, no way you can solve it with o(1) time complexity , you have to run over the 2 lists so it would be at least o(n) time "
                    },
                    {
                        "username": "ronnyvega",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity, right?"
                    },
                    {
                        "username": "rohitk_chef15",
                        "content": "[@shibvarghab](/shibvarghab)  can you please explain more about it how to reduce time complexity ,\\nAs we have to traverse the list basically same we do in array how willl it be diff from array\\n please explain "
                    },
                    {
                        "username": "Ursae",
                        "content": "[@shibvarghab](/shibvarghab) How can it be solved in O(1) I wonder? You still have to traverse the lists, don\\'t you? And traversing is dependent on the length, that makes it O(N) at least"
                    },
                    {
                        "username": "mliubiva",
                        "content": "[@a_hend0](/a_hend0) the question is still actual for other people who have the same problem)"
                    },
                    {
                        "username": "a_hend0",
                        "content": "[@Last_CodeBender](/Last_CodeBender)  i dont think hes still looking for the answer \\n"
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "Interweaving the two link lists without creating new memory. "
                    },
                    {
                        "username": "shibvarghab",
                        "content": "You need to create links between two given linked lists. Your goal should be to not use any extra space to merge the linked list. This question should be solved in O(1) time complexity. And that is the benefit of merging two linked lists over merging two arrays. "
                    },
                    {
                        "username": "finelliott",
                        "content": "I am wondering something similar."
                    },
                    {
                        "username": "abdelshokair",
                        "content": "Am i the only one who thinks this is a very vague requirement? Merging doesn\\'t necessarily mean they have to be in increasing order, which it seems it\\'s supposed to be. Seriously, write this stuff in the notes, so we don\\'t waste time."
                    },
                    {
                        "username": "dluan3",
                        "content": "somebody dont know how to read"
                    },
                    {
                        "username": "mng48301",
                        "content": "[@chazwinter](/chazwinter) exactly"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It literally says the new list should be sorted. The word sorted is even in bold. "
                    },
                    {
                        "username": "zenverak",
                        "content": "The examples given clear it up."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "\"merge\" means to combine the lists, and there\\'s a clear implication that the sorted order should be maintained. If you didn\\'t have to do that, you could just append one list to the other and call it a day, but that\\'s not what\\'s meant by merging."
                    },
                    {
                        "username": "cocokaribou",
                        "content": "hi I just started learning algorithm and here\\'s my question:\\nI\\'m using IDE to write main and run my code but don\\'t know what to input in the solution\\n\\nthe parameter of `mergeTwoLists()` is `ListNode` but in the Leetcode console the input goes like [1,2,4] [1,3,4] which seems like Array of Int??\\n\\nif anyone can tell me what main function would look like it would be really helpful\\n"
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "For anyone that\\'s stuck on this, the provided inputs for JavaScript/TypeScript are wrong. If you want to solve this problem in JS, you\\'ll have to convert the provided inputs into a linked list first."
                    },
                    {
                        "username": "adrianroman",
                        "content": "you can create a method to convert the input array into a linked list, then you can easily test in your own IDE with the input from leetcode, you can reuse that method for each linked list problem"
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "\nlet node1 = ListNode(1)\nlet node2 = ListNode(2)\nlet node3 = ListNode(3)\n\nnode1.next = node2\nnode2.next = node3\n\nlike this for example"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The syntax used to show the lists in the examples does look like an array, so it\\'s a little confusing, but they just mean that those are the values in the list. It might\\'ve been better if they\\'d notated the list like:\\n1 -> 2 -> 4"
                    },
                    {
                        "username": "reducingcodex",
                        "content": "https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\\n\\nFor those confuseed about the question, its explained better here.\\n\\nThe question isn\\'t explained well at all here."
                    },
                    {
                        "username": "wolfpackfitdev",
                        "content": "does anyone else get a NullPointerException when trying to reference val?"
                    },
                    {
                        "username": "ClassPython",
                        "content": "I also get null.\\n\\nIf I type   --> list1.val.  I get a null error. Can also visualize this by typing console.log(\\nlist1.val)\\n\\nBut if one types --> if (list1 !== null {  list1.val }  you will get the value, with no error. You can put a console.log(list1.val) inside the if statement to visualize.  i.e. -->  if (list1 !== null {  console.log(list1.val) }\\n\\nI\\'m not sure why it works this way."
                    },
                    {
                        "username": "The_Winter_Soldier",
                        "content": "Yes me \\nHow to solve this;"
                    },
                    {
                        "username": "Msey",
                        "content": "its definitely a medium question"
                    },
                    {
                        "username": "prakhar32",
                        "content": "[@devesh_kumar_kushwaha](/devesh_kumar_kushwaha)  Every champion was once a beginner!"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "[@SuperDeepBoy](/SuperDeepBoy)  then what are you doing here at leet code first of all learn some dsa first"
                    },
                    {
                        "username": "SuperDeepBoy",
                        "content": "Yeah I had never even heard of linked lists."
                    },
                    {
                        "username": "newdive",
                        "content": "I know the expected result is sorted is ascending order.\\n\\nbut the problem never state it specificially.\\n\\nI my opinion, sorted could be ascending or descending order.\\n\\nWhen i came across the term 'sorted', the first thing came into my mind was 'sorted in which order??? Do i have to figure out the order by myself??? These two list are sorted in same order??? blablabla... '\\n\\nI guess most people would take it as ascending order,  and it works in this situation.\\n\\nBut I think we should not adopt this kind of habitual thinking in our solution, which in practice could be very harmful.\\n\\nSo I strongly recommend that the problem be more specifically stated ."
                    },
                    {
                        "username": "Szymon5922",
                        "content": "Always check constraints section to get sure what data u can expect. \"Both list1 and list2 are sorted in non-decreasing order.\""
                    },
                    {
                        "username": "mng48301",
                        "content": "The description of the problem is fine. You should just read carefully. "
                    },
                    {
                        "username": "abhay_mnit22",
                        "content": " read contraints  its already mentioned that sorted in non-decending order "
                    },
                    {
                        "username": "alamick",
                        "content": "I completely agree. I\\'m surprised that this question is so popular, since I knew at a first glance that it was poorly written/stated/explained. "
                    },
                    {
                        "username": "chazwinter",
                        "content": "The problem states that you are given two sorted lists, and you should create a sorted list. Sorted means sorted, so the nature of your sorted list should be the same as the given sorted lists. The directions then go on to state that the given lists are non-decreasing, meaning your merged should be the same, given that sorted means sorted."
                    },
                    {
                        "username": "alexsherbuck",
                        "content": "Based on the documentation in the code, the edge cases may be improperly documented.\\n\\nThis explicitly states that this function returns a `ListNode`. The definition of a `ListNode` shows that `val` is set to whatever is passed or `0`. \\n\\n ```\\n/** javascript\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {    \\n```\\n\\nThe second sample test case is:\\n```\\nlist1 = []\\nlist2 =[]\\nOutput\\n[0]\\nExpected\\n[]\\n```\\nIf you build the function to satisfy the documentation this test case will fail every time.\\n\\nTo me, this needs to change to `@return {ListNode | null } ` but because of the test environment, `null === []` for the purposes of the \\'Expected` block"
                    },
                    {
                        "username": "AlanOnym",
                        "content": "I did not know what to put as the default case, thanks for the clarification"
                    },
                    {
                        "username": "bolemax",
                        "content": "`list1 = []` denotes an empty linked list, i.e. one which has no nodes. It has nothing to do with the definition of the node. I think that's pretty clear."
                    },
                    {
                        "username": "p4stoboy",
                        "content": "Thank you."
                    },
                    {
                        "username": "itsindigo",
                        "content": "+1, was stuck for a while trying to get that test case to pass"
                    }
                ]
            },
            {
                "id": 1566234,
                "content": [
                    {
                        "username": "Norie",
                        "content": "WHY CANT WE USE CONCAT and SORT HERE, ANYbody?"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/\\n"
                    },
                    {
                        "username": "Aravind_VC",
                        "content": "given list is not array it is linked list sot sort work with array not with linked list"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Bro this question is of linked list "
                    },
                    {
                        "username": "dadiprasanth",
                        "content": "[@mokotozett](/mokotozett)  bro it is linked list we have to transverse using next key word and we can use val key to find the value "
                    },
                    {
                        "username": "mokotozett",
                        "content": "I had the same question.... list1 + list2... then sort().... \\nI keep looking at the problem. Makes sense to use nodes if the output order is important or special. But the problem says Output: [1,1,2,3,4,4] without any regard to placing. Since we are dealing with int, sort() will do. What am i missing? Im just moving on to another one lol. glhf"
                    },
                    {
                        "username": "1260",
                        "content": "[@LavajavaLux](/LavajavaLux) This is in O(N) space and in general bad for LinkedList problems which usually require O(1)."
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "I first added all values to an array then sorted it, then initialized ListNodes from the array"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "`Lists` are note `Arrays`."
                    },
                    {
                        "username": "MoSaleh8890",
                        "content": "[@andrewcleonard](/andrewcleonard) So informative. Thanks Andrew;"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "this is link list so u can\\'t use that function............"
                    },
                    {
                        "username": "valmiki20",
                        "content": "so you plan to implement CONCAT and SORT for ListNode class? then you are good."
                    },
                    {
                        "username": "gregory_solomon",
                        "content": "This are linked lists, so a bunch of pointers that point to things, not actual values, it is NOT an array."
                    },
                    {
                        "username": "andrewcleonard",
                        "content": "JavaScript response to your question:\\n\\n`list1` and `list2` are objects, **NOT** arrays. It confused me that the examples here show `list1` and `list2` as arrays. \\n\\nIf you `console.log(JSON.stringify(list1))`, you get:\\n\\n```\\nconst list1 = {\\n\\tval: 1,\\n\\tnext: {\\n\\t\\tval: 2,\\n\\t\\tnext: {\\n\\t\\t\\tval: 4,\\n\\t\\t\\tnext: null,\\n\\t\\t},\\n\\t},\\n};\\n```\\n\\nJavaScript has \"standard built-in objects.\" [Arrays are one of JavaScript\\'s built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\\n\\nOn the other hand, linked lists are not part of JavaScript. [Linked lists are a very common data structure used in many programming languages.](https://en.wikipedia.org/wiki/Linked_list) To use a linked list in JavaScript, you must build it yourself on top of vanilla JavaScript. Linked lists have advantages/disadvantages compared to arrays and other data structures:\\n\\nLooking at this specific example, my understanding is that the approach using the the `ListNode` function on line 3 is an older way of using JavaScript. With ES6, we will mostly use [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\\n\\nThis example would be clearer to me if they used this more modern object-oriented approach.\\n\\nI found this freeCodeCamp video and the codepen in the description to be most helpful:\\nhttps://www.youtube.com/watch?v=9YddVVsdG5A\\n\\n(data structures are new to me, so please fact-check me and let me know about any mistakes)"
                    },
                    {
                        "username": "Aryan_Arya",
                        "content": "That will increase the time complexity of the solution."
                    },
                    {
                        "username": "Prince_Vijay",
                        "content": "I didn\\'t understand the class given above. can anyone explain.\\n"
                    },
                    {
                        "username": "zhang2012",
                        "content": "The ListNode class shows you how the linked list is defined for your chosen language. Take Python3 as an example. To define a linked list [1, 2, 4], you write \"l1 = ListNode(1,ListNode(2, ListNode(3, None)))\". Hence, to get the first value (the head) of l1, we do \"l1.val\"; to get second value, we do \"l1.next.val\"; and to get the third value, we do \"l1.next.next.val\""
                    },
                    {
                        "username": "vikaslinux",
                        "content": "Please explain the meaning of splicing.Should I modify the two linked lists and make the new list from the existing nodes or should I create new nodes for the merged linkes list."
                    },
                    {
                        "username": "erenyeager1",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity  ,, no way you can solve it with o(1) time complexity , you have to run over the 2 lists so it would be at least o(n) time "
                    },
                    {
                        "username": "ronnyvega",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity, right?"
                    },
                    {
                        "username": "rohitk_chef15",
                        "content": "[@shibvarghab](/shibvarghab)  can you please explain more about it how to reduce time complexity ,\\nAs we have to traverse the list basically same we do in array how willl it be diff from array\\n please explain "
                    },
                    {
                        "username": "Ursae",
                        "content": "[@shibvarghab](/shibvarghab) How can it be solved in O(1) I wonder? You still have to traverse the lists, don\\'t you? And traversing is dependent on the length, that makes it O(N) at least"
                    },
                    {
                        "username": "mliubiva",
                        "content": "[@a_hend0](/a_hend0) the question is still actual for other people who have the same problem)"
                    },
                    {
                        "username": "a_hend0",
                        "content": "[@Last_CodeBender](/Last_CodeBender)  i dont think hes still looking for the answer \\n"
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "Interweaving the two link lists without creating new memory. "
                    },
                    {
                        "username": "shibvarghab",
                        "content": "You need to create links between two given linked lists. Your goal should be to not use any extra space to merge the linked list. This question should be solved in O(1) time complexity. And that is the benefit of merging two linked lists over merging two arrays. "
                    },
                    {
                        "username": "finelliott",
                        "content": "I am wondering something similar."
                    },
                    {
                        "username": "abdelshokair",
                        "content": "Am i the only one who thinks this is a very vague requirement? Merging doesn\\'t necessarily mean they have to be in increasing order, which it seems it\\'s supposed to be. Seriously, write this stuff in the notes, so we don\\'t waste time."
                    },
                    {
                        "username": "dluan3",
                        "content": "somebody dont know how to read"
                    },
                    {
                        "username": "mng48301",
                        "content": "[@chazwinter](/chazwinter) exactly"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It literally says the new list should be sorted. The word sorted is even in bold. "
                    },
                    {
                        "username": "zenverak",
                        "content": "The examples given clear it up."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "\"merge\" means to combine the lists, and there\\'s a clear implication that the sorted order should be maintained. If you didn\\'t have to do that, you could just append one list to the other and call it a day, but that\\'s not what\\'s meant by merging."
                    },
                    {
                        "username": "cocokaribou",
                        "content": "hi I just started learning algorithm and here\\'s my question:\\nI\\'m using IDE to write main and run my code but don\\'t know what to input in the solution\\n\\nthe parameter of `mergeTwoLists()` is `ListNode` but in the Leetcode console the input goes like [1,2,4] [1,3,4] which seems like Array of Int??\\n\\nif anyone can tell me what main function would look like it would be really helpful\\n"
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "For anyone that\\'s stuck on this, the provided inputs for JavaScript/TypeScript are wrong. If you want to solve this problem in JS, you\\'ll have to convert the provided inputs into a linked list first."
                    },
                    {
                        "username": "adrianroman",
                        "content": "you can create a method to convert the input array into a linked list, then you can easily test in your own IDE with the input from leetcode, you can reuse that method for each linked list problem"
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "\nlet node1 = ListNode(1)\nlet node2 = ListNode(2)\nlet node3 = ListNode(3)\n\nnode1.next = node2\nnode2.next = node3\n\nlike this for example"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The syntax used to show the lists in the examples does look like an array, so it\\'s a little confusing, but they just mean that those are the values in the list. It might\\'ve been better if they\\'d notated the list like:\\n1 -> 2 -> 4"
                    },
                    {
                        "username": "reducingcodex",
                        "content": "https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\\n\\nFor those confuseed about the question, its explained better here.\\n\\nThe question isn\\'t explained well at all here."
                    },
                    {
                        "username": "wolfpackfitdev",
                        "content": "does anyone else get a NullPointerException when trying to reference val?"
                    },
                    {
                        "username": "ClassPython",
                        "content": "I also get null.\\n\\nIf I type   --> list1.val.  I get a null error. Can also visualize this by typing console.log(\\nlist1.val)\\n\\nBut if one types --> if (list1 !== null {  list1.val }  you will get the value, with no error. You can put a console.log(list1.val) inside the if statement to visualize.  i.e. -->  if (list1 !== null {  console.log(list1.val) }\\n\\nI\\'m not sure why it works this way."
                    },
                    {
                        "username": "The_Winter_Soldier",
                        "content": "Yes me \\nHow to solve this;"
                    },
                    {
                        "username": "Msey",
                        "content": "its definitely a medium question"
                    },
                    {
                        "username": "prakhar32",
                        "content": "[@devesh_kumar_kushwaha](/devesh_kumar_kushwaha)  Every champion was once a beginner!"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "[@SuperDeepBoy](/SuperDeepBoy)  then what are you doing here at leet code first of all learn some dsa first"
                    },
                    {
                        "username": "SuperDeepBoy",
                        "content": "Yeah I had never even heard of linked lists."
                    },
                    {
                        "username": "newdive",
                        "content": "I know the expected result is sorted is ascending order.\\n\\nbut the problem never state it specificially.\\n\\nI my opinion, sorted could be ascending or descending order.\\n\\nWhen i came across the term 'sorted', the first thing came into my mind was 'sorted in which order??? Do i have to figure out the order by myself??? These two list are sorted in same order??? blablabla... '\\n\\nI guess most people would take it as ascending order,  and it works in this situation.\\n\\nBut I think we should not adopt this kind of habitual thinking in our solution, which in practice could be very harmful.\\n\\nSo I strongly recommend that the problem be more specifically stated ."
                    },
                    {
                        "username": "Szymon5922",
                        "content": "Always check constraints section to get sure what data u can expect. \"Both list1 and list2 are sorted in non-decreasing order.\""
                    },
                    {
                        "username": "mng48301",
                        "content": "The description of the problem is fine. You should just read carefully. "
                    },
                    {
                        "username": "abhay_mnit22",
                        "content": " read contraints  its already mentioned that sorted in non-decending order "
                    },
                    {
                        "username": "alamick",
                        "content": "I completely agree. I\\'m surprised that this question is so popular, since I knew at a first glance that it was poorly written/stated/explained. "
                    },
                    {
                        "username": "chazwinter",
                        "content": "The problem states that you are given two sorted lists, and you should create a sorted list. Sorted means sorted, so the nature of your sorted list should be the same as the given sorted lists. The directions then go on to state that the given lists are non-decreasing, meaning your merged should be the same, given that sorted means sorted."
                    },
                    {
                        "username": "alexsherbuck",
                        "content": "Based on the documentation in the code, the edge cases may be improperly documented.\\n\\nThis explicitly states that this function returns a `ListNode`. The definition of a `ListNode` shows that `val` is set to whatever is passed or `0`. \\n\\n ```\\n/** javascript\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {    \\n```\\n\\nThe second sample test case is:\\n```\\nlist1 = []\\nlist2 =[]\\nOutput\\n[0]\\nExpected\\n[]\\n```\\nIf you build the function to satisfy the documentation this test case will fail every time.\\n\\nTo me, this needs to change to `@return {ListNode | null } ` but because of the test environment, `null === []` for the purposes of the \\'Expected` block"
                    },
                    {
                        "username": "AlanOnym",
                        "content": "I did not know what to put as the default case, thanks for the clarification"
                    },
                    {
                        "username": "bolemax",
                        "content": "`list1 = []` denotes an empty linked list, i.e. one which has no nodes. It has nothing to do with the definition of the node. I think that's pretty clear."
                    },
                    {
                        "username": "p4stoboy",
                        "content": "Thank you."
                    },
                    {
                        "username": "itsindigo",
                        "content": "+1, was stuck for a while trying to get that test case to pass"
                    }
                ]
            },
            {
                "id": 1771683,
                "content": [
                    {
                        "username": "Norie",
                        "content": "WHY CANT WE USE CONCAT and SORT HERE, ANYbody?"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/\\n"
                    },
                    {
                        "username": "Aravind_VC",
                        "content": "given list is not array it is linked list sot sort work with array not with linked list"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Bro this question is of linked list "
                    },
                    {
                        "username": "dadiprasanth",
                        "content": "[@mokotozett](/mokotozett)  bro it is linked list we have to transverse using next key word and we can use val key to find the value "
                    },
                    {
                        "username": "mokotozett",
                        "content": "I had the same question.... list1 + list2... then sort().... \\nI keep looking at the problem. Makes sense to use nodes if the output order is important or special. But the problem says Output: [1,1,2,3,4,4] without any regard to placing. Since we are dealing with int, sort() will do. What am i missing? Im just moving on to another one lol. glhf"
                    },
                    {
                        "username": "1260",
                        "content": "[@LavajavaLux](/LavajavaLux) This is in O(N) space and in general bad for LinkedList problems which usually require O(1)."
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "I first added all values to an array then sorted it, then initialized ListNodes from the array"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "`Lists` are note `Arrays`."
                    },
                    {
                        "username": "MoSaleh8890",
                        "content": "[@andrewcleonard](/andrewcleonard) So informative. Thanks Andrew;"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "this is link list so u can\\'t use that function............"
                    },
                    {
                        "username": "valmiki20",
                        "content": "so you plan to implement CONCAT and SORT for ListNode class? then you are good."
                    },
                    {
                        "username": "gregory_solomon",
                        "content": "This are linked lists, so a bunch of pointers that point to things, not actual values, it is NOT an array."
                    },
                    {
                        "username": "andrewcleonard",
                        "content": "JavaScript response to your question:\\n\\n`list1` and `list2` are objects, **NOT** arrays. It confused me that the examples here show `list1` and `list2` as arrays. \\n\\nIf you `console.log(JSON.stringify(list1))`, you get:\\n\\n```\\nconst list1 = {\\n\\tval: 1,\\n\\tnext: {\\n\\t\\tval: 2,\\n\\t\\tnext: {\\n\\t\\t\\tval: 4,\\n\\t\\t\\tnext: null,\\n\\t\\t},\\n\\t},\\n};\\n```\\n\\nJavaScript has \"standard built-in objects.\" [Arrays are one of JavaScript\\'s built-in objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\\n\\nOn the other hand, linked lists are not part of JavaScript. [Linked lists are a very common data structure used in many programming languages.](https://en.wikipedia.org/wiki/Linked_list) To use a linked list in JavaScript, you must build it yourself on top of vanilla JavaScript. Linked lists have advantages/disadvantages compared to arrays and other data structures:\\n\\nLooking at this specific example, my understanding is that the approach using the the `ListNode` function on line 3 is an older way of using JavaScript. With ES6, we will mostly use [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\\n\\nThis example would be clearer to me if they used this more modern object-oriented approach.\\n\\nI found this freeCodeCamp video and the codepen in the description to be most helpful:\\nhttps://www.youtube.com/watch?v=9YddVVsdG5A\\n\\n(data structures are new to me, so please fact-check me and let me know about any mistakes)"
                    },
                    {
                        "username": "Aryan_Arya",
                        "content": "That will increase the time complexity of the solution."
                    },
                    {
                        "username": "Prince_Vijay",
                        "content": "I didn\\'t understand the class given above. can anyone explain.\\n"
                    },
                    {
                        "username": "zhang2012",
                        "content": "The ListNode class shows you how the linked list is defined for your chosen language. Take Python3 as an example. To define a linked list [1, 2, 4], you write \"l1 = ListNode(1,ListNode(2, ListNode(3, None)))\". Hence, to get the first value (the head) of l1, we do \"l1.val\"; to get second value, we do \"l1.next.val\"; and to get the third value, we do \"l1.next.next.val\""
                    },
                    {
                        "username": "vikaslinux",
                        "content": "Please explain the meaning of splicing.Should I modify the two linked lists and make the new list from the existing nodes or should I create new nodes for the merged linkes list."
                    },
                    {
                        "username": "erenyeager1",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity  ,, no way you can solve it with o(1) time complexity , you have to run over the 2 lists so it would be at least o(n) time "
                    },
                    {
                        "username": "ronnyvega",
                        "content": "[@shibvarghab](/shibvarghab) you mean O(1) space complexity, right?"
                    },
                    {
                        "username": "rohitk_chef15",
                        "content": "[@shibvarghab](/shibvarghab)  can you please explain more about it how to reduce time complexity ,\\nAs we have to traverse the list basically same we do in array how willl it be diff from array\\n please explain "
                    },
                    {
                        "username": "Ursae",
                        "content": "[@shibvarghab](/shibvarghab) How can it be solved in O(1) I wonder? You still have to traverse the lists, don\\'t you? And traversing is dependent on the length, that makes it O(N) at least"
                    },
                    {
                        "username": "mliubiva",
                        "content": "[@a_hend0](/a_hend0) the question is still actual for other people who have the same problem)"
                    },
                    {
                        "username": "a_hend0",
                        "content": "[@Last_CodeBender](/Last_CodeBender)  i dont think hes still looking for the answer \\n"
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "Interweaving the two link lists without creating new memory. "
                    },
                    {
                        "username": "shibvarghab",
                        "content": "You need to create links between two given linked lists. Your goal should be to not use any extra space to merge the linked list. This question should be solved in O(1) time complexity. And that is the benefit of merging two linked lists over merging two arrays. "
                    },
                    {
                        "username": "finelliott",
                        "content": "I am wondering something similar."
                    },
                    {
                        "username": "abdelshokair",
                        "content": "Am i the only one who thinks this is a very vague requirement? Merging doesn\\'t necessarily mean they have to be in increasing order, which it seems it\\'s supposed to be. Seriously, write this stuff in the notes, so we don\\'t waste time."
                    },
                    {
                        "username": "dluan3",
                        "content": "somebody dont know how to read"
                    },
                    {
                        "username": "mng48301",
                        "content": "[@chazwinter](/chazwinter) exactly"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It literally says the new list should be sorted. The word sorted is even in bold. "
                    },
                    {
                        "username": "zenverak",
                        "content": "The examples given clear it up."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "\"merge\" means to combine the lists, and there\\'s a clear implication that the sorted order should be maintained. If you didn\\'t have to do that, you could just append one list to the other and call it a day, but that\\'s not what\\'s meant by merging."
                    },
                    {
                        "username": "cocokaribou",
                        "content": "hi I just started learning algorithm and here\\'s my question:\\nI\\'m using IDE to write main and run my code but don\\'t know what to input in the solution\\n\\nthe parameter of `mergeTwoLists()` is `ListNode` but in the Leetcode console the input goes like [1,2,4] [1,3,4] which seems like Array of Int??\\n\\nif anyone can tell me what main function would look like it would be really helpful\\n"
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "For anyone that\\'s stuck on this, the provided inputs for JavaScript/TypeScript are wrong. If you want to solve this problem in JS, you\\'ll have to convert the provided inputs into a linked list first."
                    },
                    {
                        "username": "adrianroman",
                        "content": "you can create a method to convert the input array into a linked list, then you can easily test in your own IDE with the input from leetcode, you can reuse that method for each linked list problem"
                    },
                    {
                        "username": "LavajavaLux",
                        "content": "\nlet node1 = ListNode(1)\nlet node2 = ListNode(2)\nlet node3 = ListNode(3)\n\nnode1.next = node2\nnode2.next = node3\n\nlike this for example"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The syntax used to show the lists in the examples does look like an array, so it\\'s a little confusing, but they just mean that those are the values in the list. It might\\'ve been better if they\\'d notated the list like:\\n1 -> 2 -> 4"
                    },
                    {
                        "username": "reducingcodex",
                        "content": "https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\\n\\nFor those confuseed about the question, its explained better here.\\n\\nThe question isn\\'t explained well at all here."
                    },
                    {
                        "username": "wolfpackfitdev",
                        "content": "does anyone else get a NullPointerException when trying to reference val?"
                    },
                    {
                        "username": "ClassPython",
                        "content": "I also get null.\\n\\nIf I type   --> list1.val.  I get a null error. Can also visualize this by typing console.log(\\nlist1.val)\\n\\nBut if one types --> if (list1 !== null {  list1.val }  you will get the value, with no error. You can put a console.log(list1.val) inside the if statement to visualize.  i.e. -->  if (list1 !== null {  console.log(list1.val) }\\n\\nI\\'m not sure why it works this way."
                    },
                    {
                        "username": "The_Winter_Soldier",
                        "content": "Yes me \\nHow to solve this;"
                    },
                    {
                        "username": "Msey",
                        "content": "its definitely a medium question"
                    },
                    {
                        "username": "prakhar32",
                        "content": "[@devesh_kumar_kushwaha](/devesh_kumar_kushwaha)  Every champion was once a beginner!"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "[@SuperDeepBoy](/SuperDeepBoy)  then what are you doing here at leet code first of all learn some dsa first"
                    },
                    {
                        "username": "SuperDeepBoy",
                        "content": "Yeah I had never even heard of linked lists."
                    },
                    {
                        "username": "newdive",
                        "content": "I know the expected result is sorted is ascending order.\\n\\nbut the problem never state it specificially.\\n\\nI my opinion, sorted could be ascending or descending order.\\n\\nWhen i came across the term 'sorted', the first thing came into my mind was 'sorted in which order??? Do i have to figure out the order by myself??? These two list are sorted in same order??? blablabla... '\\n\\nI guess most people would take it as ascending order,  and it works in this situation.\\n\\nBut I think we should not adopt this kind of habitual thinking in our solution, which in practice could be very harmful.\\n\\nSo I strongly recommend that the problem be more specifically stated ."
                    },
                    {
                        "username": "Szymon5922",
                        "content": "Always check constraints section to get sure what data u can expect. \"Both list1 and list2 are sorted in non-decreasing order.\""
                    },
                    {
                        "username": "mng48301",
                        "content": "The description of the problem is fine. You should just read carefully. "
                    },
                    {
                        "username": "abhay_mnit22",
                        "content": " read contraints  its already mentioned that sorted in non-decending order "
                    },
                    {
                        "username": "alamick",
                        "content": "I completely agree. I\\'m surprised that this question is so popular, since I knew at a first glance that it was poorly written/stated/explained. "
                    },
                    {
                        "username": "chazwinter",
                        "content": "The problem states that you are given two sorted lists, and you should create a sorted list. Sorted means sorted, so the nature of your sorted list should be the same as the given sorted lists. The directions then go on to state that the given lists are non-decreasing, meaning your merged should be the same, given that sorted means sorted."
                    },
                    {
                        "username": "alexsherbuck",
                        "content": "Based on the documentation in the code, the edge cases may be improperly documented.\\n\\nThis explicitly states that this function returns a `ListNode`. The definition of a `ListNode` shows that `val` is set to whatever is passed or `0`. \\n\\n ```\\n/** javascript\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} list1\\n * @param {ListNode} list2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(list1, list2) {    \\n```\\n\\nThe second sample test case is:\\n```\\nlist1 = []\\nlist2 =[]\\nOutput\\n[0]\\nExpected\\n[]\\n```\\nIf you build the function to satisfy the documentation this test case will fail every time.\\n\\nTo me, this needs to change to `@return {ListNode | null } ` but because of the test environment, `null === []` for the purposes of the \\'Expected` block"
                    },
                    {
                        "username": "AlanOnym",
                        "content": "I did not know what to put as the default case, thanks for the clarification"
                    },
                    {
                        "username": "bolemax",
                        "content": "`list1 = []` denotes an empty linked list, i.e. one which has no nodes. It has nothing to do with the definition of the node. I think that's pretty clear."
                    },
                    {
                        "username": "p4stoboy",
                        "content": "Thank you."
                    },
                    {
                        "username": "itsindigo",
                        "content": "+1, was stuck for a while trying to get that test case to pass"
                    }
                ]
            },
            {
                "id": 1870917,
                "content": [
                    {
                        "username": "sourabhbawage",
                        "content": "I think this should be a Medium problem."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/merge-two-sorted-lists/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Recursion\n\n  \n**Approach 2:** Iteration\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nikhilag84",
                        "content": "problem should be medium\\n"
                    },
                    {
                        "username": "abhi893198",
                        "content": "not really\\n"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/d68e3d2a-3f61-41be-8de3-a4d0850c46e2_1597575123.546476.png)\\n\\n![image](https://assets.leetcode.com/users/images/d77fdb1e-3f7e-45eb-a2d7-ed2deae3a107_1597575181.6477325.png)\\n"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/710accf5-513a-4d33-8d1d-48ca36f74567_1629735080.0351825.png)\\n"
                    },
                    {
                        "username": "CrypticParadigm",
                        "content": "[@mvivirito](/mvivirito) lol\\n"
                    },
                    {
                        "username": "mvivirito",
                        "content": "so in this answer we just converted to arrays. Sorted the arrays and converted back to a ListNode. neat. "
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Video visualizing how pointers are manipulated to merge the linked lists:\n\nhttps://www.youtube.com/watch?v=E5XXiY6QnAs"
                    },
                    {
                        "username": "Chappydev",
                        "content": "The question is not working for me (I\\'m using javascript). If I log the lists, it seems to be working properly but anytime I try to access \\'val\\' or \\'next\\', I\\'m getting an error: TypeError: Cannot read properties of null (reading \\'next\\'). I did another linked list question just now and it worked fine, so this is kind of strange. Anyone else have the same issue? "
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "Yes, the inputs for JS/TS seem to be wrong. Instead of passing in list nodes, it\\'s passing in arrays with the list\\'s node values."
                    },
                    {
                        "username": "greenchalk",
                        "content": "Yes!"
                    },
                    {
                        "username": "Makrojo",
                        "content": "can I ask why when I am doing the code, if I use a line such as:\\nif list1.val < list2.val:\\nthe terminal returns:  AttributeError: \\'NoneType\\' object has no attribute \\'something\\'?\\nI want to know why I don\\'t need to call .val to see the value of the list node. Thanks"
                    },
                    {
                        "username": "rawatpriyanshu",
                        "content": "Firstly list1 and list2 are pointers so you have to use -> to access its members. And before accessing its member you have to check if that node exists or not.\\nlike this:\\nif (list1 && list2) {\\n      list1->val < list2->val\\n}"
                    },
                    {
                        "username": "greenchalk",
                        "content": "[@kofzor](/kofzor) But how can the lists be empty? If you console log the list you get the leet code input. "
                    },
                    {
                        "username": "kofzor",
                        "content": "because if the list is empty then..."
                    },
                    {
                        "username": "danielptm",
                        "content": "On this problem. What does an empty array mean for the inputs? I assumed it meant null is passed in but my tests arent passing when I do this. I thought that maybe this meant that a ListNode is passed in but having val = null. But this would be impossible with an int as the type for val because it will defult to 0. My solution seems to work for the majority of the test cases but these test cases are failing and it\\'s in part because I dont know what an empty array means in the context of ListNode"
                    },
                    {
                        "username": "garyfu",
                        "content": "I am also running into this issue - I am coding in Swift. Maybe this issue is lanuage(s)-specific?"
                    },
                    {
                        "username": "paarthlakhani",
                        "content": "In the question, what does it mean by:\\n\\'The new list should be made by splicing together the nodes of the first two lists\\' ?"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "It means that you combine the input lists such that the result is also sorted."
                    }
                ]
            },
            {
                "id": 1566706,
                "content": [
                    {
                        "username": "sourabhbawage",
                        "content": "I think this should be a Medium problem."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/merge-two-sorted-lists/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Recursion\n\n  \n**Approach 2:** Iteration\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nikhilag84",
                        "content": "problem should be medium\\n"
                    },
                    {
                        "username": "abhi893198",
                        "content": "not really\\n"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/d68e3d2a-3f61-41be-8de3-a4d0850c46e2_1597575123.546476.png)\\n\\n![image](https://assets.leetcode.com/users/images/d77fdb1e-3f7e-45eb-a2d7-ed2deae3a107_1597575181.6477325.png)\\n"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/710accf5-513a-4d33-8d1d-48ca36f74567_1629735080.0351825.png)\\n"
                    },
                    {
                        "username": "CrypticParadigm",
                        "content": "[@mvivirito](/mvivirito) lol\\n"
                    },
                    {
                        "username": "mvivirito",
                        "content": "so in this answer we just converted to arrays. Sorted the arrays and converted back to a ListNode. neat. "
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Video visualizing how pointers are manipulated to merge the linked lists:\n\nhttps://www.youtube.com/watch?v=E5XXiY6QnAs"
                    },
                    {
                        "username": "Chappydev",
                        "content": "The question is not working for me (I\\'m using javascript). If I log the lists, it seems to be working properly but anytime I try to access \\'val\\' or \\'next\\', I\\'m getting an error: TypeError: Cannot read properties of null (reading \\'next\\'). I did another linked list question just now and it worked fine, so this is kind of strange. Anyone else have the same issue? "
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "Yes, the inputs for JS/TS seem to be wrong. Instead of passing in list nodes, it\\'s passing in arrays with the list\\'s node values."
                    },
                    {
                        "username": "greenchalk",
                        "content": "Yes!"
                    },
                    {
                        "username": "Makrojo",
                        "content": "can I ask why when I am doing the code, if I use a line such as:\\nif list1.val < list2.val:\\nthe terminal returns:  AttributeError: \\'NoneType\\' object has no attribute \\'something\\'?\\nI want to know why I don\\'t need to call .val to see the value of the list node. Thanks"
                    },
                    {
                        "username": "rawatpriyanshu",
                        "content": "Firstly list1 and list2 are pointers so you have to use -> to access its members. And before accessing its member you have to check if that node exists or not.\\nlike this:\\nif (list1 && list2) {\\n      list1->val < list2->val\\n}"
                    },
                    {
                        "username": "greenchalk",
                        "content": "[@kofzor](/kofzor) But how can the lists be empty? If you console log the list you get the leet code input. "
                    },
                    {
                        "username": "kofzor",
                        "content": "because if the list is empty then..."
                    },
                    {
                        "username": "danielptm",
                        "content": "On this problem. What does an empty array mean for the inputs? I assumed it meant null is passed in but my tests arent passing when I do this. I thought that maybe this meant that a ListNode is passed in but having val = null. But this would be impossible with an int as the type for val because it will defult to 0. My solution seems to work for the majority of the test cases but these test cases are failing and it\\'s in part because I dont know what an empty array means in the context of ListNode"
                    },
                    {
                        "username": "garyfu",
                        "content": "I am also running into this issue - I am coding in Swift. Maybe this issue is lanuage(s)-specific?"
                    },
                    {
                        "username": "paarthlakhani",
                        "content": "In the question, what does it mean by:\\n\\'The new list should be made by splicing together the nodes of the first two lists\\' ?"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "It means that you combine the input lists such that the result is also sorted."
                    }
                ]
            },
            {
                "id": 1930353,
                "content": [
                    {
                        "username": "sourabhbawage",
                        "content": "I think this should be a Medium problem."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/merge-two-sorted-lists/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Recursion\n\n  \n**Approach 2:** Iteration\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nikhilag84",
                        "content": "problem should be medium\\n"
                    },
                    {
                        "username": "abhi893198",
                        "content": "not really\\n"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/d68e3d2a-3f61-41be-8de3-a4d0850c46e2_1597575123.546476.png)\\n\\n![image](https://assets.leetcode.com/users/images/d77fdb1e-3f7e-45eb-a2d7-ed2deae3a107_1597575181.6477325.png)\\n"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/710accf5-513a-4d33-8d1d-48ca36f74567_1629735080.0351825.png)\\n"
                    },
                    {
                        "username": "CrypticParadigm",
                        "content": "[@mvivirito](/mvivirito) lol\\n"
                    },
                    {
                        "username": "mvivirito",
                        "content": "so in this answer we just converted to arrays. Sorted the arrays and converted back to a ListNode. neat. "
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Video visualizing how pointers are manipulated to merge the linked lists:\n\nhttps://www.youtube.com/watch?v=E5XXiY6QnAs"
                    },
                    {
                        "username": "Chappydev",
                        "content": "The question is not working for me (I\\'m using javascript). If I log the lists, it seems to be working properly but anytime I try to access \\'val\\' or \\'next\\', I\\'m getting an error: TypeError: Cannot read properties of null (reading \\'next\\'). I did another linked list question just now and it worked fine, so this is kind of strange. Anyone else have the same issue? "
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "Yes, the inputs for JS/TS seem to be wrong. Instead of passing in list nodes, it\\'s passing in arrays with the list\\'s node values."
                    },
                    {
                        "username": "greenchalk",
                        "content": "Yes!"
                    },
                    {
                        "username": "Makrojo",
                        "content": "can I ask why when I am doing the code, if I use a line such as:\\nif list1.val < list2.val:\\nthe terminal returns:  AttributeError: \\'NoneType\\' object has no attribute \\'something\\'?\\nI want to know why I don\\'t need to call .val to see the value of the list node. Thanks"
                    },
                    {
                        "username": "rawatpriyanshu",
                        "content": "Firstly list1 and list2 are pointers so you have to use -> to access its members. And before accessing its member you have to check if that node exists or not.\\nlike this:\\nif (list1 && list2) {\\n      list1->val < list2->val\\n}"
                    },
                    {
                        "username": "greenchalk",
                        "content": "[@kofzor](/kofzor) But how can the lists be empty? If you console log the list you get the leet code input. "
                    },
                    {
                        "username": "kofzor",
                        "content": "because if the list is empty then..."
                    },
                    {
                        "username": "danielptm",
                        "content": "On this problem. What does an empty array mean for the inputs? I assumed it meant null is passed in but my tests arent passing when I do this. I thought that maybe this meant that a ListNode is passed in but having val = null. But this would be impossible with an int as the type for val because it will defult to 0. My solution seems to work for the majority of the test cases but these test cases are failing and it\\'s in part because I dont know what an empty array means in the context of ListNode"
                    },
                    {
                        "username": "garyfu",
                        "content": "I am also running into this issue - I am coding in Swift. Maybe this issue is lanuage(s)-specific?"
                    },
                    {
                        "username": "paarthlakhani",
                        "content": "In the question, what does it mean by:\\n\\'The new list should be made by splicing together the nodes of the first two lists\\' ?"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "It means that you combine the input lists such that the result is also sorted."
                    }
                ]
            },
            {
                "id": 1574224,
                "content": [
                    {
                        "username": "sourabhbawage",
                        "content": "I think this should be a Medium problem."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/merge-two-sorted-lists/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Recursion\n\n  \n**Approach 2:** Iteration\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nikhilag84",
                        "content": "problem should be medium\\n"
                    },
                    {
                        "username": "abhi893198",
                        "content": "not really\\n"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/d68e3d2a-3f61-41be-8de3-a4d0850c46e2_1597575123.546476.png)\\n\\n![image](https://assets.leetcode.com/users/images/d77fdb1e-3f7e-45eb-a2d7-ed2deae3a107_1597575181.6477325.png)\\n"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/710accf5-513a-4d33-8d1d-48ca36f74567_1629735080.0351825.png)\\n"
                    },
                    {
                        "username": "CrypticParadigm",
                        "content": "[@mvivirito](/mvivirito) lol\\n"
                    },
                    {
                        "username": "mvivirito",
                        "content": "so in this answer we just converted to arrays. Sorted the arrays and converted back to a ListNode. neat. "
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Video visualizing how pointers are manipulated to merge the linked lists:\n\nhttps://www.youtube.com/watch?v=E5XXiY6QnAs"
                    },
                    {
                        "username": "Chappydev",
                        "content": "The question is not working for me (I\\'m using javascript). If I log the lists, it seems to be working properly but anytime I try to access \\'val\\' or \\'next\\', I\\'m getting an error: TypeError: Cannot read properties of null (reading \\'next\\'). I did another linked list question just now and it worked fine, so this is kind of strange. Anyone else have the same issue? "
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "Yes, the inputs for JS/TS seem to be wrong. Instead of passing in list nodes, it\\'s passing in arrays with the list\\'s node values."
                    },
                    {
                        "username": "greenchalk",
                        "content": "Yes!"
                    },
                    {
                        "username": "Makrojo",
                        "content": "can I ask why when I am doing the code, if I use a line such as:\\nif list1.val < list2.val:\\nthe terminal returns:  AttributeError: \\'NoneType\\' object has no attribute \\'something\\'?\\nI want to know why I don\\'t need to call .val to see the value of the list node. Thanks"
                    },
                    {
                        "username": "rawatpriyanshu",
                        "content": "Firstly list1 and list2 are pointers so you have to use -> to access its members. And before accessing its member you have to check if that node exists or not.\\nlike this:\\nif (list1 && list2) {\\n      list1->val < list2->val\\n}"
                    },
                    {
                        "username": "greenchalk",
                        "content": "[@kofzor](/kofzor) But how can the lists be empty? If you console log the list you get the leet code input. "
                    },
                    {
                        "username": "kofzor",
                        "content": "because if the list is empty then..."
                    },
                    {
                        "username": "danielptm",
                        "content": "On this problem. What does an empty array mean for the inputs? I assumed it meant null is passed in but my tests arent passing when I do this. I thought that maybe this meant that a ListNode is passed in but having val = null. But this would be impossible with an int as the type for val because it will defult to 0. My solution seems to work for the majority of the test cases but these test cases are failing and it\\'s in part because I dont know what an empty array means in the context of ListNode"
                    },
                    {
                        "username": "garyfu",
                        "content": "I am also running into this issue - I am coding in Swift. Maybe this issue is lanuage(s)-specific?"
                    },
                    {
                        "username": "paarthlakhani",
                        "content": "In the question, what does it mean by:\\n\\'The new list should be made by splicing together the nodes of the first two lists\\' ?"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "It means that you combine the input lists such that the result is also sorted."
                    }
                ]
            },
            {
                "id": 1564971,
                "content": [
                    {
                        "username": "sourabhbawage",
                        "content": "I think this should be a Medium problem."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/merge-two-sorted-lists/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Recursion\n\n  \n**Approach 2:** Iteration\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nikhilag84",
                        "content": "problem should be medium\\n"
                    },
                    {
                        "username": "abhi893198",
                        "content": "not really\\n"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/d68e3d2a-3f61-41be-8de3-a4d0850c46e2_1597575123.546476.png)\\n\\n![image](https://assets.leetcode.com/users/images/d77fdb1e-3f7e-45eb-a2d7-ed2deae3a107_1597575181.6477325.png)\\n"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/710accf5-513a-4d33-8d1d-48ca36f74567_1629735080.0351825.png)\\n"
                    },
                    {
                        "username": "CrypticParadigm",
                        "content": "[@mvivirito](/mvivirito) lol\\n"
                    },
                    {
                        "username": "mvivirito",
                        "content": "so in this answer we just converted to arrays. Sorted the arrays and converted back to a ListNode. neat. "
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Video visualizing how pointers are manipulated to merge the linked lists:\n\nhttps://www.youtube.com/watch?v=E5XXiY6QnAs"
                    },
                    {
                        "username": "Chappydev",
                        "content": "The question is not working for me (I\\'m using javascript). If I log the lists, it seems to be working properly but anytime I try to access \\'val\\' or \\'next\\', I\\'m getting an error: TypeError: Cannot read properties of null (reading \\'next\\'). I did another linked list question just now and it worked fine, so this is kind of strange. Anyone else have the same issue? "
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "Yes, the inputs for JS/TS seem to be wrong. Instead of passing in list nodes, it\\'s passing in arrays with the list\\'s node values."
                    },
                    {
                        "username": "greenchalk",
                        "content": "Yes!"
                    },
                    {
                        "username": "Makrojo",
                        "content": "can I ask why when I am doing the code, if I use a line such as:\\nif list1.val < list2.val:\\nthe terminal returns:  AttributeError: \\'NoneType\\' object has no attribute \\'something\\'?\\nI want to know why I don\\'t need to call .val to see the value of the list node. Thanks"
                    },
                    {
                        "username": "rawatpriyanshu",
                        "content": "Firstly list1 and list2 are pointers so you have to use -> to access its members. And before accessing its member you have to check if that node exists or not.\\nlike this:\\nif (list1 && list2) {\\n      list1->val < list2->val\\n}"
                    },
                    {
                        "username": "greenchalk",
                        "content": "[@kofzor](/kofzor) But how can the lists be empty? If you console log the list you get the leet code input. "
                    },
                    {
                        "username": "kofzor",
                        "content": "because if the list is empty then..."
                    },
                    {
                        "username": "danielptm",
                        "content": "On this problem. What does an empty array mean for the inputs? I assumed it meant null is passed in but my tests arent passing when I do this. I thought that maybe this meant that a ListNode is passed in but having val = null. But this would be impossible with an int as the type for val because it will defult to 0. My solution seems to work for the majority of the test cases but these test cases are failing and it\\'s in part because I dont know what an empty array means in the context of ListNode"
                    },
                    {
                        "username": "garyfu",
                        "content": "I am also running into this issue - I am coding in Swift. Maybe this issue is lanuage(s)-specific?"
                    },
                    {
                        "username": "paarthlakhani",
                        "content": "In the question, what does it mean by:\\n\\'The new list should be made by splicing together the nodes of the first two lists\\' ?"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "It means that you combine the input lists such that the result is also sorted."
                    }
                ]
            },
            {
                "id": 1881577,
                "content": [
                    {
                        "username": "sourabhbawage",
                        "content": "I think this should be a Medium problem."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/merge-two-sorted-lists/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Recursion\n\n  \n**Approach 2:** Iteration\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nikhilag84",
                        "content": "problem should be medium\\n"
                    },
                    {
                        "username": "abhi893198",
                        "content": "not really\\n"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/d68e3d2a-3f61-41be-8de3-a4d0850c46e2_1597575123.546476.png)\\n\\n![image](https://assets.leetcode.com/users/images/d77fdb1e-3f7e-45eb-a2d7-ed2deae3a107_1597575181.6477325.png)\\n"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/710accf5-513a-4d33-8d1d-48ca36f74567_1629735080.0351825.png)\\n"
                    },
                    {
                        "username": "CrypticParadigm",
                        "content": "[@mvivirito](/mvivirito) lol\\n"
                    },
                    {
                        "username": "mvivirito",
                        "content": "so in this answer we just converted to arrays. Sorted the arrays and converted back to a ListNode. neat. "
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Video visualizing how pointers are manipulated to merge the linked lists:\n\nhttps://www.youtube.com/watch?v=E5XXiY6QnAs"
                    },
                    {
                        "username": "Chappydev",
                        "content": "The question is not working for me (I\\'m using javascript). If I log the lists, it seems to be working properly but anytime I try to access \\'val\\' or \\'next\\', I\\'m getting an error: TypeError: Cannot read properties of null (reading \\'next\\'). I did another linked list question just now and it worked fine, so this is kind of strange. Anyone else have the same issue? "
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "Yes, the inputs for JS/TS seem to be wrong. Instead of passing in list nodes, it\\'s passing in arrays with the list\\'s node values."
                    },
                    {
                        "username": "greenchalk",
                        "content": "Yes!"
                    },
                    {
                        "username": "Makrojo",
                        "content": "can I ask why when I am doing the code, if I use a line such as:\\nif list1.val < list2.val:\\nthe terminal returns:  AttributeError: \\'NoneType\\' object has no attribute \\'something\\'?\\nI want to know why I don\\'t need to call .val to see the value of the list node. Thanks"
                    },
                    {
                        "username": "rawatpriyanshu",
                        "content": "Firstly list1 and list2 are pointers so you have to use -> to access its members. And before accessing its member you have to check if that node exists or not.\\nlike this:\\nif (list1 && list2) {\\n      list1->val < list2->val\\n}"
                    },
                    {
                        "username": "greenchalk",
                        "content": "[@kofzor](/kofzor) But how can the lists be empty? If you console log the list you get the leet code input. "
                    },
                    {
                        "username": "kofzor",
                        "content": "because if the list is empty then..."
                    },
                    {
                        "username": "danielptm",
                        "content": "On this problem. What does an empty array mean for the inputs? I assumed it meant null is passed in but my tests arent passing when I do this. I thought that maybe this meant that a ListNode is passed in but having val = null. But this would be impossible with an int as the type for val because it will defult to 0. My solution seems to work for the majority of the test cases but these test cases are failing and it\\'s in part because I dont know what an empty array means in the context of ListNode"
                    },
                    {
                        "username": "garyfu",
                        "content": "I am also running into this issue - I am coding in Swift. Maybe this issue is lanuage(s)-specific?"
                    },
                    {
                        "username": "paarthlakhani",
                        "content": "In the question, what does it mean by:\\n\\'The new list should be made by splicing together the nodes of the first two lists\\' ?"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "It means that you combine the input lists such that the result is also sorted."
                    }
                ]
            },
            {
                "id": 1807948,
                "content": [
                    {
                        "username": "sourabhbawage",
                        "content": "I think this should be a Medium problem."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/merge-two-sorted-lists/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Recursion\n\n  \n**Approach 2:** Iteration\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nikhilag84",
                        "content": "problem should be medium\\n"
                    },
                    {
                        "username": "abhi893198",
                        "content": "not really\\n"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/d68e3d2a-3f61-41be-8de3-a4d0850c46e2_1597575123.546476.png)\\n\\n![image](https://assets.leetcode.com/users/images/d77fdb1e-3f7e-45eb-a2d7-ed2deae3a107_1597575181.6477325.png)\\n"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/710accf5-513a-4d33-8d1d-48ca36f74567_1629735080.0351825.png)\\n"
                    },
                    {
                        "username": "CrypticParadigm",
                        "content": "[@mvivirito](/mvivirito) lol\\n"
                    },
                    {
                        "username": "mvivirito",
                        "content": "so in this answer we just converted to arrays. Sorted the arrays and converted back to a ListNode. neat. "
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Video visualizing how pointers are manipulated to merge the linked lists:\n\nhttps://www.youtube.com/watch?v=E5XXiY6QnAs"
                    },
                    {
                        "username": "Chappydev",
                        "content": "The question is not working for me (I\\'m using javascript). If I log the lists, it seems to be working properly but anytime I try to access \\'val\\' or \\'next\\', I\\'m getting an error: TypeError: Cannot read properties of null (reading \\'next\\'). I did another linked list question just now and it worked fine, so this is kind of strange. Anyone else have the same issue? "
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "Yes, the inputs for JS/TS seem to be wrong. Instead of passing in list nodes, it\\'s passing in arrays with the list\\'s node values."
                    },
                    {
                        "username": "greenchalk",
                        "content": "Yes!"
                    },
                    {
                        "username": "Makrojo",
                        "content": "can I ask why when I am doing the code, if I use a line such as:\\nif list1.val < list2.val:\\nthe terminal returns:  AttributeError: \\'NoneType\\' object has no attribute \\'something\\'?\\nI want to know why I don\\'t need to call .val to see the value of the list node. Thanks"
                    },
                    {
                        "username": "rawatpriyanshu",
                        "content": "Firstly list1 and list2 are pointers so you have to use -> to access its members. And before accessing its member you have to check if that node exists or not.\\nlike this:\\nif (list1 && list2) {\\n      list1->val < list2->val\\n}"
                    },
                    {
                        "username": "greenchalk",
                        "content": "[@kofzor](/kofzor) But how can the lists be empty? If you console log the list you get the leet code input. "
                    },
                    {
                        "username": "kofzor",
                        "content": "because if the list is empty then..."
                    },
                    {
                        "username": "danielptm",
                        "content": "On this problem. What does an empty array mean for the inputs? I assumed it meant null is passed in but my tests arent passing when I do this. I thought that maybe this meant that a ListNode is passed in but having val = null. But this would be impossible with an int as the type for val because it will defult to 0. My solution seems to work for the majority of the test cases but these test cases are failing and it\\'s in part because I dont know what an empty array means in the context of ListNode"
                    },
                    {
                        "username": "garyfu",
                        "content": "I am also running into this issue - I am coding in Swift. Maybe this issue is lanuage(s)-specific?"
                    },
                    {
                        "username": "paarthlakhani",
                        "content": "In the question, what does it mean by:\\n\\'The new list should be made by splicing together the nodes of the first two lists\\' ?"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "It means that you combine the input lists such that the result is also sorted."
                    }
                ]
            },
            {
                "id": 1646614,
                "content": [
                    {
                        "username": "sourabhbawage",
                        "content": "I think this should be a Medium problem."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/merge-two-sorted-lists/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Recursion\n\n  \n**Approach 2:** Iteration\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nikhilag84",
                        "content": "problem should be medium\\n"
                    },
                    {
                        "username": "abhi893198",
                        "content": "not really\\n"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/d68e3d2a-3f61-41be-8de3-a4d0850c46e2_1597575123.546476.png)\\n\\n![image](https://assets.leetcode.com/users/images/d77fdb1e-3f7e-45eb-a2d7-ed2deae3a107_1597575181.6477325.png)\\n"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/710accf5-513a-4d33-8d1d-48ca36f74567_1629735080.0351825.png)\\n"
                    },
                    {
                        "username": "CrypticParadigm",
                        "content": "[@mvivirito](/mvivirito) lol\\n"
                    },
                    {
                        "username": "mvivirito",
                        "content": "so in this answer we just converted to arrays. Sorted the arrays and converted back to a ListNode. neat. "
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Video visualizing how pointers are manipulated to merge the linked lists:\n\nhttps://www.youtube.com/watch?v=E5XXiY6QnAs"
                    },
                    {
                        "username": "Chappydev",
                        "content": "The question is not working for me (I\\'m using javascript). If I log the lists, it seems to be working properly but anytime I try to access \\'val\\' or \\'next\\', I\\'m getting an error: TypeError: Cannot read properties of null (reading \\'next\\'). I did another linked list question just now and it worked fine, so this is kind of strange. Anyone else have the same issue? "
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "Yes, the inputs for JS/TS seem to be wrong. Instead of passing in list nodes, it\\'s passing in arrays with the list\\'s node values."
                    },
                    {
                        "username": "greenchalk",
                        "content": "Yes!"
                    },
                    {
                        "username": "Makrojo",
                        "content": "can I ask why when I am doing the code, if I use a line such as:\\nif list1.val < list2.val:\\nthe terminal returns:  AttributeError: \\'NoneType\\' object has no attribute \\'something\\'?\\nI want to know why I don\\'t need to call .val to see the value of the list node. Thanks"
                    },
                    {
                        "username": "rawatpriyanshu",
                        "content": "Firstly list1 and list2 are pointers so you have to use -> to access its members. And before accessing its member you have to check if that node exists or not.\\nlike this:\\nif (list1 && list2) {\\n      list1->val < list2->val\\n}"
                    },
                    {
                        "username": "greenchalk",
                        "content": "[@kofzor](/kofzor) But how can the lists be empty? If you console log the list you get the leet code input. "
                    },
                    {
                        "username": "kofzor",
                        "content": "because if the list is empty then..."
                    },
                    {
                        "username": "danielptm",
                        "content": "On this problem. What does an empty array mean for the inputs? I assumed it meant null is passed in but my tests arent passing when I do this. I thought that maybe this meant that a ListNode is passed in but having val = null. But this would be impossible with an int as the type for val because it will defult to 0. My solution seems to work for the majority of the test cases but these test cases are failing and it\\'s in part because I dont know what an empty array means in the context of ListNode"
                    },
                    {
                        "username": "garyfu",
                        "content": "I am also running into this issue - I am coding in Swift. Maybe this issue is lanuage(s)-specific?"
                    },
                    {
                        "username": "paarthlakhani",
                        "content": "In the question, what does it mean by:\\n\\'The new list should be made by splicing together the nodes of the first two lists\\' ?"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "It means that you combine the input lists such that the result is also sorted."
                    }
                ]
            },
            {
                "id": 1576162,
                "content": [
                    {
                        "username": "sourabhbawage",
                        "content": "I think this should be a Medium problem."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/merge-two-sorted-lists/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Recursion\n\n  \n**Approach 2:** Iteration\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nikhilag84",
                        "content": "problem should be medium\\n"
                    },
                    {
                        "username": "abhi893198",
                        "content": "not really\\n"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/d68e3d2a-3f61-41be-8de3-a4d0850c46e2_1597575123.546476.png)\\n\\n![image](https://assets.leetcode.com/users/images/d77fdb1e-3f7e-45eb-a2d7-ed2deae3a107_1597575181.6477325.png)\\n"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/710accf5-513a-4d33-8d1d-48ca36f74567_1629735080.0351825.png)\\n"
                    },
                    {
                        "username": "CrypticParadigm",
                        "content": "[@mvivirito](/mvivirito) lol\\n"
                    },
                    {
                        "username": "mvivirito",
                        "content": "so in this answer we just converted to arrays. Sorted the arrays and converted back to a ListNode. neat. "
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Video visualizing how pointers are manipulated to merge the linked lists:\n\nhttps://www.youtube.com/watch?v=E5XXiY6QnAs"
                    },
                    {
                        "username": "Chappydev",
                        "content": "The question is not working for me (I\\'m using javascript). If I log the lists, it seems to be working properly but anytime I try to access \\'val\\' or \\'next\\', I\\'m getting an error: TypeError: Cannot read properties of null (reading \\'next\\'). I did another linked list question just now and it worked fine, so this is kind of strange. Anyone else have the same issue? "
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "Yes, the inputs for JS/TS seem to be wrong. Instead of passing in list nodes, it\\'s passing in arrays with the list\\'s node values."
                    },
                    {
                        "username": "greenchalk",
                        "content": "Yes!"
                    },
                    {
                        "username": "Makrojo",
                        "content": "can I ask why when I am doing the code, if I use a line such as:\\nif list1.val < list2.val:\\nthe terminal returns:  AttributeError: \\'NoneType\\' object has no attribute \\'something\\'?\\nI want to know why I don\\'t need to call .val to see the value of the list node. Thanks"
                    },
                    {
                        "username": "rawatpriyanshu",
                        "content": "Firstly list1 and list2 are pointers so you have to use -> to access its members. And before accessing its member you have to check if that node exists or not.\\nlike this:\\nif (list1 && list2) {\\n      list1->val < list2->val\\n}"
                    },
                    {
                        "username": "greenchalk",
                        "content": "[@kofzor](/kofzor) But how can the lists be empty? If you console log the list you get the leet code input. "
                    },
                    {
                        "username": "kofzor",
                        "content": "because if the list is empty then..."
                    },
                    {
                        "username": "danielptm",
                        "content": "On this problem. What does an empty array mean for the inputs? I assumed it meant null is passed in but my tests arent passing when I do this. I thought that maybe this meant that a ListNode is passed in but having val = null. But this would be impossible with an int as the type for val because it will defult to 0. My solution seems to work for the majority of the test cases but these test cases are failing and it\\'s in part because I dont know what an empty array means in the context of ListNode"
                    },
                    {
                        "username": "garyfu",
                        "content": "I am also running into this issue - I am coding in Swift. Maybe this issue is lanuage(s)-specific?"
                    },
                    {
                        "username": "paarthlakhani",
                        "content": "In the question, what does it mean by:\\n\\'The new list should be made by splicing together the nodes of the first two lists\\' ?"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "It means that you combine the input lists such that the result is also sorted."
                    }
                ]
            },
            {
                "id": 1570062,
                "content": [
                    {
                        "username": "sourabhbawage",
                        "content": "I think this should be a Medium problem."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 7.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/merge-two-sorted-lists/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Recursion\n\n  \n**Approach 2:** Iteration\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "nikhilag84",
                        "content": "problem should be medium\\n"
                    },
                    {
                        "username": "abhi893198",
                        "content": "not really\\n"
                    },
                    {
                        "username": "WilmerKrisp",
                        "content": "![image](https://assets.leetcode.com/users/images/d68e3d2a-3f61-41be-8de3-a4d0850c46e2_1597575123.546476.png)\\n\\n![image](https://assets.leetcode.com/users/images/d77fdb1e-3f7e-45eb-a2d7-ed2deae3a107_1597575181.6477325.png)\\n"
                    },
                    {
                        "username": "namaaa",
                        "content": "![image](https://assets.leetcode.com/users/images/710accf5-513a-4d33-8d1d-48ca36f74567_1629735080.0351825.png)\\n"
                    },
                    {
                        "username": "CrypticParadigm",
                        "content": "[@mvivirito](/mvivirito) lol\\n"
                    },
                    {
                        "username": "mvivirito",
                        "content": "so in this answer we just converted to arrays. Sorted the arrays and converted back to a ListNode. neat. "
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Video visualizing how pointers are manipulated to merge the linked lists:\n\nhttps://www.youtube.com/watch?v=E5XXiY6QnAs"
                    },
                    {
                        "username": "Chappydev",
                        "content": "The question is not working for me (I\\'m using javascript). If I log the lists, it seems to be working properly but anytime I try to access \\'val\\' or \\'next\\', I\\'m getting an error: TypeError: Cannot read properties of null (reading \\'next\\'). I did another linked list question just now and it worked fine, so this is kind of strange. Anyone else have the same issue? "
                    },
                    {
                        "username": "Joshua_desjones",
                        "content": "Yes, the inputs for JS/TS seem to be wrong. Instead of passing in list nodes, it\\'s passing in arrays with the list\\'s node values."
                    },
                    {
                        "username": "greenchalk",
                        "content": "Yes!"
                    },
                    {
                        "username": "Makrojo",
                        "content": "can I ask why when I am doing the code, if I use a line such as:\\nif list1.val < list2.val:\\nthe terminal returns:  AttributeError: \\'NoneType\\' object has no attribute \\'something\\'?\\nI want to know why I don\\'t need to call .val to see the value of the list node. Thanks"
                    },
                    {
                        "username": "rawatpriyanshu",
                        "content": "Firstly list1 and list2 are pointers so you have to use -> to access its members. And before accessing its member you have to check if that node exists or not.\\nlike this:\\nif (list1 && list2) {\\n      list1->val < list2->val\\n}"
                    },
                    {
                        "username": "greenchalk",
                        "content": "[@kofzor](/kofzor) But how can the lists be empty? If you console log the list you get the leet code input. "
                    },
                    {
                        "username": "kofzor",
                        "content": "because if the list is empty then..."
                    },
                    {
                        "username": "danielptm",
                        "content": "On this problem. What does an empty array mean for the inputs? I assumed it meant null is passed in but my tests arent passing when I do this. I thought that maybe this meant that a ListNode is passed in but having val = null. But this would be impossible with an int as the type for val because it will defult to 0. My solution seems to work for the majority of the test cases but these test cases are failing and it\\'s in part because I dont know what an empty array means in the context of ListNode"
                    },
                    {
                        "username": "garyfu",
                        "content": "I am also running into this issue - I am coding in Swift. Maybe this issue is lanuage(s)-specific?"
                    },
                    {
                        "username": "paarthlakhani",
                        "content": "In the question, what does it mean by:\\n\\'The new list should be made by splicing together the nodes of the first two lists\\' ?"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "It means that you combine the input lists such that the result is also sorted."
                    }
                ]
            },
            {
                "id": 1568040,
                "content": [
                    {
                        "username": "icaliman",
                        "content": "Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\\n\\nWhere is the requirement that the resulting list needs to be sorted ??\\nThe example can be interpretted as index merge 1, 1, 2, 2, 3, 3, ..."
                    },
                    {
                        "username": "jingweih",
                        "content": "descending order and ascending order should have different solutions right, so the default order is ascending ?"
                    },
                    {
                        "username": "valmiki20",
                        "content": "sort any order, all it needs is reverse uno"
                    },
                    {
                        "username": "Subhammodi",
                        "content": "\"The new list should be made by splicing together the nodes of the first two lists.\"\\nWhat does it mean?\\n\\n 1. The output list should also be a sorted one.\\n\\n 2. Output list should be of the form l1 concatenate l2, i.e. all elements of l1 followed by elements of l2.\\n\\n 3. Neither of these.\\n\\nThanks for any help in advance."
                    },
                    {
                        "username": "alok056",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */"
                    },
                    {
                        "username": "Ludacris2G",
                        "content": "Why list1.val or list1.next returns undefined I just can\\'t figure this out to save my life man what the."
                    },
                    {
                        "username": "PBK320",
                        "content": "The problem states that we should \\'Return the head of the merged linked list.\\' Wouldn\\'t this be the first element of the sequence? However the output that is shown in the three examples is all of the elements from both lists sorted. The first problem is the best example. The output is 1,1,2,3,4,4. I would think that the head node would be 1. Can someone please explain?\\n\\nOn another note, I\\'m using python. With the exception of an academic exercise, when would I ever use linked lists in python? With all of the functions that exist in the standard python library, I can basically solve this in a few lines of code (maybe even 1). What is the actual purpose of this?\\n\\nThanks in advance."
                    },
                    {
                        "username": "user0291CQ",
                        "content": "I think with the head, since it is a listnode, it will also link to the next one in the list. So on the back end, in the test cases, they would be able to get the head, and get all the following values for each node. \\n\\nAs far as why this is necessary, I\\'m not sure. I have never used a listnode at work, and I\\'m tired of trying to figure out how to make one myself, or get one from a linkedlist, or however I\\'m supposed to do it. The problem itself isn\\'t difficult, but trying to get the answer into the right return type with no information on google is difficult. I\\'m skipping this one. It was disappointing for me."
                    },
                    {
                        "username": "The_White_Fox",
                        "content": "I have the feeling that Leetcode just makes up blaberish assignments, there is no such datatype as a ListNode nor linked list or whatever they call it,  in python 3 and up. That means that this assignment is a waste of time. ---->Bucket"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@zenverak](/zenverak) I\\'ve tried googling ListNode, and got nothing. Only when I googled linkedlist and listnode together did I get a familiar result. I\\'ve worked as a developer for a few years, and have never seen it come up. I\\'ve used linkedlists however, and I guess if you want to learn more about linkedlists this is valuable. I\\'ll do this one because I\\'m curious about it, but this doesn\\'t seem necessary. For the rare interviews that use it, I would just not do the interview."
                    },
                    {
                        "username": "zenverak",
                        "content": "These are very very very common Data Structures used in a lot of things. I would suggest googling them to kind of a get a clue as it helped me understand the linked list and how to traverse it a bit more."
                    },
                    {
                        "username": "PythonAkoto",
                        "content": "Thank you because i was thinking what the hell is a ListNode i haven\\'t heard of this before lol ..i was thinking the simplest solution would be to create an empty list then iterate through the `list1` & `list2` and then append it to the empty list.  Once you have that then you can sort the values and return the sorted list.  Apparently this is incorrect but on my device the same test works"
                    },
                    {
                        "username": "dshinnn",
                        "content": "I\\'m getting this error when I am simply printing out the first value of list1.  Anyone know why?  I\\'ve tried resetting the code to default, but it doesn\\'t work.  When I try copying and pasting someone else\\'s solution though, it works so I\\'m confused.\\n\\nAttributeError: \\'NoneType\\' object has no attribute \\'val\\'\\n    print(list1.val)\\nLine 8 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 32 in _driver (Solution.py)\\n    _driver()\\nLine 42 in <module> (Solution.py)\\n\\n```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        print(list1.val)\\n```"
                    },
                    {
                        "username": "JustAW",
                        "content": "same here. i also tried at first time. "
                    },
                    {
                        "username": "randomfun",
                        "content": "[@zenverak](/zenverak) Why it is \\'empty\\' ? list1 passed as parameter."
                    },
                    {
                        "username": "zenverak",
                        "content": "If its \\'emtpy\\' its just None, which None doesn\\'t have an attribute val. So you would need to take care of that before you try and grab the val."
                    },
                    {
                        "username": "yinggu",
                        "content": "I was creating a dummy variable as the header of new LinkNode l3, and refer the value of dummy to l3.  but I was wondering why finally return the dummy.next not l3.next?"
                    },
                    {
                        "username": "prince4332",
                        "content": "It works perfectly but if I test the is a runtime error"
                    }
                ]
            },
            {
                "id": 1567167,
                "content": [
                    {
                        "username": "icaliman",
                        "content": "Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\\n\\nWhere is the requirement that the resulting list needs to be sorted ??\\nThe example can be interpretted as index merge 1, 1, 2, 2, 3, 3, ..."
                    },
                    {
                        "username": "jingweih",
                        "content": "descending order and ascending order should have different solutions right, so the default order is ascending ?"
                    },
                    {
                        "username": "valmiki20",
                        "content": "sort any order, all it needs is reverse uno"
                    },
                    {
                        "username": "Subhammodi",
                        "content": "\"The new list should be made by splicing together the nodes of the first two lists.\"\\nWhat does it mean?\\n\\n 1. The output list should also be a sorted one.\\n\\n 2. Output list should be of the form l1 concatenate l2, i.e. all elements of l1 followed by elements of l2.\\n\\n 3. Neither of these.\\n\\nThanks for any help in advance."
                    },
                    {
                        "username": "alok056",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */"
                    },
                    {
                        "username": "Ludacris2G",
                        "content": "Why list1.val or list1.next returns undefined I just can\\'t figure this out to save my life man what the."
                    },
                    {
                        "username": "PBK320",
                        "content": "The problem states that we should \\'Return the head of the merged linked list.\\' Wouldn\\'t this be the first element of the sequence? However the output that is shown in the three examples is all of the elements from both lists sorted. The first problem is the best example. The output is 1,1,2,3,4,4. I would think that the head node would be 1. Can someone please explain?\\n\\nOn another note, I\\'m using python. With the exception of an academic exercise, when would I ever use linked lists in python? With all of the functions that exist in the standard python library, I can basically solve this in a few lines of code (maybe even 1). What is the actual purpose of this?\\n\\nThanks in advance."
                    },
                    {
                        "username": "user0291CQ",
                        "content": "I think with the head, since it is a listnode, it will also link to the next one in the list. So on the back end, in the test cases, they would be able to get the head, and get all the following values for each node. \\n\\nAs far as why this is necessary, I\\'m not sure. I have never used a listnode at work, and I\\'m tired of trying to figure out how to make one myself, or get one from a linkedlist, or however I\\'m supposed to do it. The problem itself isn\\'t difficult, but trying to get the answer into the right return type with no information on google is difficult. I\\'m skipping this one. It was disappointing for me."
                    },
                    {
                        "username": "The_White_Fox",
                        "content": "I have the feeling that Leetcode just makes up blaberish assignments, there is no such datatype as a ListNode nor linked list or whatever they call it,  in python 3 and up. That means that this assignment is a waste of time. ---->Bucket"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@zenverak](/zenverak) I\\'ve tried googling ListNode, and got nothing. Only when I googled linkedlist and listnode together did I get a familiar result. I\\'ve worked as a developer for a few years, and have never seen it come up. I\\'ve used linkedlists however, and I guess if you want to learn more about linkedlists this is valuable. I\\'ll do this one because I\\'m curious about it, but this doesn\\'t seem necessary. For the rare interviews that use it, I would just not do the interview."
                    },
                    {
                        "username": "zenverak",
                        "content": "These are very very very common Data Structures used in a lot of things. I would suggest googling them to kind of a get a clue as it helped me understand the linked list and how to traverse it a bit more."
                    },
                    {
                        "username": "PythonAkoto",
                        "content": "Thank you because i was thinking what the hell is a ListNode i haven\\'t heard of this before lol ..i was thinking the simplest solution would be to create an empty list then iterate through the `list1` & `list2` and then append it to the empty list.  Once you have that then you can sort the values and return the sorted list.  Apparently this is incorrect but on my device the same test works"
                    },
                    {
                        "username": "dshinnn",
                        "content": "I\\'m getting this error when I am simply printing out the first value of list1.  Anyone know why?  I\\'ve tried resetting the code to default, but it doesn\\'t work.  When I try copying and pasting someone else\\'s solution though, it works so I\\'m confused.\\n\\nAttributeError: \\'NoneType\\' object has no attribute \\'val\\'\\n    print(list1.val)\\nLine 8 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 32 in _driver (Solution.py)\\n    _driver()\\nLine 42 in <module> (Solution.py)\\n\\n```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        print(list1.val)\\n```"
                    },
                    {
                        "username": "JustAW",
                        "content": "same here. i also tried at first time. "
                    },
                    {
                        "username": "randomfun",
                        "content": "[@zenverak](/zenverak) Why it is \\'empty\\' ? list1 passed as parameter."
                    },
                    {
                        "username": "zenverak",
                        "content": "If its \\'emtpy\\' its just None, which None doesn\\'t have an attribute val. So you would need to take care of that before you try and grab the val."
                    },
                    {
                        "username": "yinggu",
                        "content": "I was creating a dummy variable as the header of new LinkNode l3, and refer the value of dummy to l3.  but I was wondering why finally return the dummy.next not l3.next?"
                    },
                    {
                        "username": "prince4332",
                        "content": "It works perfectly but if I test the is a runtime error"
                    }
                ]
            },
            {
                "id": 1567811,
                "content": [
                    {
                        "username": "icaliman",
                        "content": "Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\\n\\nWhere is the requirement that the resulting list needs to be sorted ??\\nThe example can be interpretted as index merge 1, 1, 2, 2, 3, 3, ..."
                    },
                    {
                        "username": "jingweih",
                        "content": "descending order and ascending order should have different solutions right, so the default order is ascending ?"
                    },
                    {
                        "username": "valmiki20",
                        "content": "sort any order, all it needs is reverse uno"
                    },
                    {
                        "username": "Subhammodi",
                        "content": "\"The new list should be made by splicing together the nodes of the first two lists.\"\\nWhat does it mean?\\n\\n 1. The output list should also be a sorted one.\\n\\n 2. Output list should be of the form l1 concatenate l2, i.e. all elements of l1 followed by elements of l2.\\n\\n 3. Neither of these.\\n\\nThanks for any help in advance."
                    },
                    {
                        "username": "alok056",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */"
                    },
                    {
                        "username": "Ludacris2G",
                        "content": "Why list1.val or list1.next returns undefined I just can\\'t figure this out to save my life man what the."
                    },
                    {
                        "username": "PBK320",
                        "content": "The problem states that we should \\'Return the head of the merged linked list.\\' Wouldn\\'t this be the first element of the sequence? However the output that is shown in the three examples is all of the elements from both lists sorted. The first problem is the best example. The output is 1,1,2,3,4,4. I would think that the head node would be 1. Can someone please explain?\\n\\nOn another note, I\\'m using python. With the exception of an academic exercise, when would I ever use linked lists in python? With all of the functions that exist in the standard python library, I can basically solve this in a few lines of code (maybe even 1). What is the actual purpose of this?\\n\\nThanks in advance."
                    },
                    {
                        "username": "user0291CQ",
                        "content": "I think with the head, since it is a listnode, it will also link to the next one in the list. So on the back end, in the test cases, they would be able to get the head, and get all the following values for each node. \\n\\nAs far as why this is necessary, I\\'m not sure. I have never used a listnode at work, and I\\'m tired of trying to figure out how to make one myself, or get one from a linkedlist, or however I\\'m supposed to do it. The problem itself isn\\'t difficult, but trying to get the answer into the right return type with no information on google is difficult. I\\'m skipping this one. It was disappointing for me."
                    },
                    {
                        "username": "The_White_Fox",
                        "content": "I have the feeling that Leetcode just makes up blaberish assignments, there is no such datatype as a ListNode nor linked list or whatever they call it,  in python 3 and up. That means that this assignment is a waste of time. ---->Bucket"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@zenverak](/zenverak) I\\'ve tried googling ListNode, and got nothing. Only when I googled linkedlist and listnode together did I get a familiar result. I\\'ve worked as a developer for a few years, and have never seen it come up. I\\'ve used linkedlists however, and I guess if you want to learn more about linkedlists this is valuable. I\\'ll do this one because I\\'m curious about it, but this doesn\\'t seem necessary. For the rare interviews that use it, I would just not do the interview."
                    },
                    {
                        "username": "zenverak",
                        "content": "These are very very very common Data Structures used in a lot of things. I would suggest googling them to kind of a get a clue as it helped me understand the linked list and how to traverse it a bit more."
                    },
                    {
                        "username": "PythonAkoto",
                        "content": "Thank you because i was thinking what the hell is a ListNode i haven\\'t heard of this before lol ..i was thinking the simplest solution would be to create an empty list then iterate through the `list1` & `list2` and then append it to the empty list.  Once you have that then you can sort the values and return the sorted list.  Apparently this is incorrect but on my device the same test works"
                    },
                    {
                        "username": "dshinnn",
                        "content": "I\\'m getting this error when I am simply printing out the first value of list1.  Anyone know why?  I\\'ve tried resetting the code to default, but it doesn\\'t work.  When I try copying and pasting someone else\\'s solution though, it works so I\\'m confused.\\n\\nAttributeError: \\'NoneType\\' object has no attribute \\'val\\'\\n    print(list1.val)\\nLine 8 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 32 in _driver (Solution.py)\\n    _driver()\\nLine 42 in <module> (Solution.py)\\n\\n```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        print(list1.val)\\n```"
                    },
                    {
                        "username": "JustAW",
                        "content": "same here. i also tried at first time. "
                    },
                    {
                        "username": "randomfun",
                        "content": "[@zenverak](/zenverak) Why it is \\'empty\\' ? list1 passed as parameter."
                    },
                    {
                        "username": "zenverak",
                        "content": "If its \\'emtpy\\' its just None, which None doesn\\'t have an attribute val. So you would need to take care of that before you try and grab the val."
                    },
                    {
                        "username": "yinggu",
                        "content": "I was creating a dummy variable as the header of new LinkNode l3, and refer the value of dummy to l3.  but I was wondering why finally return the dummy.next not l3.next?"
                    },
                    {
                        "username": "prince4332",
                        "content": "It works perfectly but if I test the is a runtime error"
                    }
                ]
            },
            {
                "id": 1567168,
                "content": [
                    {
                        "username": "icaliman",
                        "content": "Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\\n\\nWhere is the requirement that the resulting list needs to be sorted ??\\nThe example can be interpretted as index merge 1, 1, 2, 2, 3, 3, ..."
                    },
                    {
                        "username": "jingweih",
                        "content": "descending order and ascending order should have different solutions right, so the default order is ascending ?"
                    },
                    {
                        "username": "valmiki20",
                        "content": "sort any order, all it needs is reverse uno"
                    },
                    {
                        "username": "Subhammodi",
                        "content": "\"The new list should be made by splicing together the nodes of the first two lists.\"\\nWhat does it mean?\\n\\n 1. The output list should also be a sorted one.\\n\\n 2. Output list should be of the form l1 concatenate l2, i.e. all elements of l1 followed by elements of l2.\\n\\n 3. Neither of these.\\n\\nThanks for any help in advance."
                    },
                    {
                        "username": "alok056",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */"
                    },
                    {
                        "username": "Ludacris2G",
                        "content": "Why list1.val or list1.next returns undefined I just can\\'t figure this out to save my life man what the."
                    },
                    {
                        "username": "PBK320",
                        "content": "The problem states that we should \\'Return the head of the merged linked list.\\' Wouldn\\'t this be the first element of the sequence? However the output that is shown in the three examples is all of the elements from both lists sorted. The first problem is the best example. The output is 1,1,2,3,4,4. I would think that the head node would be 1. Can someone please explain?\\n\\nOn another note, I\\'m using python. With the exception of an academic exercise, when would I ever use linked lists in python? With all of the functions that exist in the standard python library, I can basically solve this in a few lines of code (maybe even 1). What is the actual purpose of this?\\n\\nThanks in advance."
                    },
                    {
                        "username": "user0291CQ",
                        "content": "I think with the head, since it is a listnode, it will also link to the next one in the list. So on the back end, in the test cases, they would be able to get the head, and get all the following values for each node. \\n\\nAs far as why this is necessary, I\\'m not sure. I have never used a listnode at work, and I\\'m tired of trying to figure out how to make one myself, or get one from a linkedlist, or however I\\'m supposed to do it. The problem itself isn\\'t difficult, but trying to get the answer into the right return type with no information on google is difficult. I\\'m skipping this one. It was disappointing for me."
                    },
                    {
                        "username": "The_White_Fox",
                        "content": "I have the feeling that Leetcode just makes up blaberish assignments, there is no such datatype as a ListNode nor linked list or whatever they call it,  in python 3 and up. That means that this assignment is a waste of time. ---->Bucket"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@zenverak](/zenverak) I\\'ve tried googling ListNode, and got nothing. Only when I googled linkedlist and listnode together did I get a familiar result. I\\'ve worked as a developer for a few years, and have never seen it come up. I\\'ve used linkedlists however, and I guess if you want to learn more about linkedlists this is valuable. I\\'ll do this one because I\\'m curious about it, but this doesn\\'t seem necessary. For the rare interviews that use it, I would just not do the interview."
                    },
                    {
                        "username": "zenverak",
                        "content": "These are very very very common Data Structures used in a lot of things. I would suggest googling them to kind of a get a clue as it helped me understand the linked list and how to traverse it a bit more."
                    },
                    {
                        "username": "PythonAkoto",
                        "content": "Thank you because i was thinking what the hell is a ListNode i haven\\'t heard of this before lol ..i was thinking the simplest solution would be to create an empty list then iterate through the `list1` & `list2` and then append it to the empty list.  Once you have that then you can sort the values and return the sorted list.  Apparently this is incorrect but on my device the same test works"
                    },
                    {
                        "username": "dshinnn",
                        "content": "I\\'m getting this error when I am simply printing out the first value of list1.  Anyone know why?  I\\'ve tried resetting the code to default, but it doesn\\'t work.  When I try copying and pasting someone else\\'s solution though, it works so I\\'m confused.\\n\\nAttributeError: \\'NoneType\\' object has no attribute \\'val\\'\\n    print(list1.val)\\nLine 8 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 32 in _driver (Solution.py)\\n    _driver()\\nLine 42 in <module> (Solution.py)\\n\\n```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        print(list1.val)\\n```"
                    },
                    {
                        "username": "JustAW",
                        "content": "same here. i also tried at first time. "
                    },
                    {
                        "username": "randomfun",
                        "content": "[@zenverak](/zenverak) Why it is \\'empty\\' ? list1 passed as parameter."
                    },
                    {
                        "username": "zenverak",
                        "content": "If its \\'emtpy\\' its just None, which None doesn\\'t have an attribute val. So you would need to take care of that before you try and grab the val."
                    },
                    {
                        "username": "yinggu",
                        "content": "I was creating a dummy variable as the header of new LinkNode l3, and refer the value of dummy to l3.  but I was wondering why finally return the dummy.next not l3.next?"
                    },
                    {
                        "username": "prince4332",
                        "content": "It works perfectly but if I test the is a runtime error"
                    }
                ]
            },
            {
                "id": 1805700,
                "content": [
                    {
                        "username": "icaliman",
                        "content": "Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\\n\\nWhere is the requirement that the resulting list needs to be sorted ??\\nThe example can be interpretted as index merge 1, 1, 2, 2, 3, 3, ..."
                    },
                    {
                        "username": "jingweih",
                        "content": "descending order and ascending order should have different solutions right, so the default order is ascending ?"
                    },
                    {
                        "username": "valmiki20",
                        "content": "sort any order, all it needs is reverse uno"
                    },
                    {
                        "username": "Subhammodi",
                        "content": "\"The new list should be made by splicing together the nodes of the first two lists.\"\\nWhat does it mean?\\n\\n 1. The output list should also be a sorted one.\\n\\n 2. Output list should be of the form l1 concatenate l2, i.e. all elements of l1 followed by elements of l2.\\n\\n 3. Neither of these.\\n\\nThanks for any help in advance."
                    },
                    {
                        "username": "alok056",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */"
                    },
                    {
                        "username": "Ludacris2G",
                        "content": "Why list1.val or list1.next returns undefined I just can\\'t figure this out to save my life man what the."
                    },
                    {
                        "username": "PBK320",
                        "content": "The problem states that we should \\'Return the head of the merged linked list.\\' Wouldn\\'t this be the first element of the sequence? However the output that is shown in the three examples is all of the elements from both lists sorted. The first problem is the best example. The output is 1,1,2,3,4,4. I would think that the head node would be 1. Can someone please explain?\\n\\nOn another note, I\\'m using python. With the exception of an academic exercise, when would I ever use linked lists in python? With all of the functions that exist in the standard python library, I can basically solve this in a few lines of code (maybe even 1). What is the actual purpose of this?\\n\\nThanks in advance."
                    },
                    {
                        "username": "user0291CQ",
                        "content": "I think with the head, since it is a listnode, it will also link to the next one in the list. So on the back end, in the test cases, they would be able to get the head, and get all the following values for each node. \\n\\nAs far as why this is necessary, I\\'m not sure. I have never used a listnode at work, and I\\'m tired of trying to figure out how to make one myself, or get one from a linkedlist, or however I\\'m supposed to do it. The problem itself isn\\'t difficult, but trying to get the answer into the right return type with no information on google is difficult. I\\'m skipping this one. It was disappointing for me."
                    },
                    {
                        "username": "The_White_Fox",
                        "content": "I have the feeling that Leetcode just makes up blaberish assignments, there is no such datatype as a ListNode nor linked list or whatever they call it,  in python 3 and up. That means that this assignment is a waste of time. ---->Bucket"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@zenverak](/zenverak) I\\'ve tried googling ListNode, and got nothing. Only when I googled linkedlist and listnode together did I get a familiar result. I\\'ve worked as a developer for a few years, and have never seen it come up. I\\'ve used linkedlists however, and I guess if you want to learn more about linkedlists this is valuable. I\\'ll do this one because I\\'m curious about it, but this doesn\\'t seem necessary. For the rare interviews that use it, I would just not do the interview."
                    },
                    {
                        "username": "zenverak",
                        "content": "These are very very very common Data Structures used in a lot of things. I would suggest googling them to kind of a get a clue as it helped me understand the linked list and how to traverse it a bit more."
                    },
                    {
                        "username": "PythonAkoto",
                        "content": "Thank you because i was thinking what the hell is a ListNode i haven\\'t heard of this before lol ..i was thinking the simplest solution would be to create an empty list then iterate through the `list1` & `list2` and then append it to the empty list.  Once you have that then you can sort the values and return the sorted list.  Apparently this is incorrect but on my device the same test works"
                    },
                    {
                        "username": "dshinnn",
                        "content": "I\\'m getting this error when I am simply printing out the first value of list1.  Anyone know why?  I\\'ve tried resetting the code to default, but it doesn\\'t work.  When I try copying and pasting someone else\\'s solution though, it works so I\\'m confused.\\n\\nAttributeError: \\'NoneType\\' object has no attribute \\'val\\'\\n    print(list1.val)\\nLine 8 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 32 in _driver (Solution.py)\\n    _driver()\\nLine 42 in <module> (Solution.py)\\n\\n```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        print(list1.val)\\n```"
                    },
                    {
                        "username": "JustAW",
                        "content": "same here. i also tried at first time. "
                    },
                    {
                        "username": "randomfun",
                        "content": "[@zenverak](/zenverak) Why it is \\'empty\\' ? list1 passed as parameter."
                    },
                    {
                        "username": "zenverak",
                        "content": "If its \\'emtpy\\' its just None, which None doesn\\'t have an attribute val. So you would need to take care of that before you try and grab the val."
                    },
                    {
                        "username": "yinggu",
                        "content": "I was creating a dummy variable as the header of new LinkNode l3, and refer the value of dummy to l3.  but I was wondering why finally return the dummy.next not l3.next?"
                    },
                    {
                        "username": "prince4332",
                        "content": "It works perfectly but if I test the is a runtime error"
                    }
                ]
            },
            {
                "id": 1799807,
                "content": [
                    {
                        "username": "icaliman",
                        "content": "Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\\n\\nWhere is the requirement that the resulting list needs to be sorted ??\\nThe example can be interpretted as index merge 1, 1, 2, 2, 3, 3, ..."
                    },
                    {
                        "username": "jingweih",
                        "content": "descending order and ascending order should have different solutions right, so the default order is ascending ?"
                    },
                    {
                        "username": "valmiki20",
                        "content": "sort any order, all it needs is reverse uno"
                    },
                    {
                        "username": "Subhammodi",
                        "content": "\"The new list should be made by splicing together the nodes of the first two lists.\"\\nWhat does it mean?\\n\\n 1. The output list should also be a sorted one.\\n\\n 2. Output list should be of the form l1 concatenate l2, i.e. all elements of l1 followed by elements of l2.\\n\\n 3. Neither of these.\\n\\nThanks for any help in advance."
                    },
                    {
                        "username": "alok056",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */"
                    },
                    {
                        "username": "Ludacris2G",
                        "content": "Why list1.val or list1.next returns undefined I just can\\'t figure this out to save my life man what the."
                    },
                    {
                        "username": "PBK320",
                        "content": "The problem states that we should \\'Return the head of the merged linked list.\\' Wouldn\\'t this be the first element of the sequence? However the output that is shown in the three examples is all of the elements from both lists sorted. The first problem is the best example. The output is 1,1,2,3,4,4. I would think that the head node would be 1. Can someone please explain?\\n\\nOn another note, I\\'m using python. With the exception of an academic exercise, when would I ever use linked lists in python? With all of the functions that exist in the standard python library, I can basically solve this in a few lines of code (maybe even 1). What is the actual purpose of this?\\n\\nThanks in advance."
                    },
                    {
                        "username": "user0291CQ",
                        "content": "I think with the head, since it is a listnode, it will also link to the next one in the list. So on the back end, in the test cases, they would be able to get the head, and get all the following values for each node. \\n\\nAs far as why this is necessary, I\\'m not sure. I have never used a listnode at work, and I\\'m tired of trying to figure out how to make one myself, or get one from a linkedlist, or however I\\'m supposed to do it. The problem itself isn\\'t difficult, but trying to get the answer into the right return type with no information on google is difficult. I\\'m skipping this one. It was disappointing for me."
                    },
                    {
                        "username": "The_White_Fox",
                        "content": "I have the feeling that Leetcode just makes up blaberish assignments, there is no such datatype as a ListNode nor linked list or whatever they call it,  in python 3 and up. That means that this assignment is a waste of time. ---->Bucket"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@zenverak](/zenverak) I\\'ve tried googling ListNode, and got nothing. Only when I googled linkedlist and listnode together did I get a familiar result. I\\'ve worked as a developer for a few years, and have never seen it come up. I\\'ve used linkedlists however, and I guess if you want to learn more about linkedlists this is valuable. I\\'ll do this one because I\\'m curious about it, but this doesn\\'t seem necessary. For the rare interviews that use it, I would just not do the interview."
                    },
                    {
                        "username": "zenverak",
                        "content": "These are very very very common Data Structures used in a lot of things. I would suggest googling them to kind of a get a clue as it helped me understand the linked list and how to traverse it a bit more."
                    },
                    {
                        "username": "PythonAkoto",
                        "content": "Thank you because i was thinking what the hell is a ListNode i haven\\'t heard of this before lol ..i was thinking the simplest solution would be to create an empty list then iterate through the `list1` & `list2` and then append it to the empty list.  Once you have that then you can sort the values and return the sorted list.  Apparently this is incorrect but on my device the same test works"
                    },
                    {
                        "username": "dshinnn",
                        "content": "I\\'m getting this error when I am simply printing out the first value of list1.  Anyone know why?  I\\'ve tried resetting the code to default, but it doesn\\'t work.  When I try copying and pasting someone else\\'s solution though, it works so I\\'m confused.\\n\\nAttributeError: \\'NoneType\\' object has no attribute \\'val\\'\\n    print(list1.val)\\nLine 8 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 32 in _driver (Solution.py)\\n    _driver()\\nLine 42 in <module> (Solution.py)\\n\\n```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        print(list1.val)\\n```"
                    },
                    {
                        "username": "JustAW",
                        "content": "same here. i also tried at first time. "
                    },
                    {
                        "username": "randomfun",
                        "content": "[@zenverak](/zenverak) Why it is \\'empty\\' ? list1 passed as parameter."
                    },
                    {
                        "username": "zenverak",
                        "content": "If its \\'emtpy\\' its just None, which None doesn\\'t have an attribute val. So you would need to take care of that before you try and grab the val."
                    },
                    {
                        "username": "yinggu",
                        "content": "I was creating a dummy variable as the header of new LinkNode l3, and refer the value of dummy to l3.  but I was wondering why finally return the dummy.next not l3.next?"
                    },
                    {
                        "username": "prince4332",
                        "content": "It works perfectly but if I test the is a runtime error"
                    }
                ]
            },
            {
                "id": 1774582,
                "content": [
                    {
                        "username": "icaliman",
                        "content": "Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\\n\\nWhere is the requirement that the resulting list needs to be sorted ??\\nThe example can be interpretted as index merge 1, 1, 2, 2, 3, 3, ..."
                    },
                    {
                        "username": "jingweih",
                        "content": "descending order and ascending order should have different solutions right, so the default order is ascending ?"
                    },
                    {
                        "username": "valmiki20",
                        "content": "sort any order, all it needs is reverse uno"
                    },
                    {
                        "username": "Subhammodi",
                        "content": "\"The new list should be made by splicing together the nodes of the first two lists.\"\\nWhat does it mean?\\n\\n 1. The output list should also be a sorted one.\\n\\n 2. Output list should be of the form l1 concatenate l2, i.e. all elements of l1 followed by elements of l2.\\n\\n 3. Neither of these.\\n\\nThanks for any help in advance."
                    },
                    {
                        "username": "alok056",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */"
                    },
                    {
                        "username": "Ludacris2G",
                        "content": "Why list1.val or list1.next returns undefined I just can\\'t figure this out to save my life man what the."
                    },
                    {
                        "username": "PBK320",
                        "content": "The problem states that we should \\'Return the head of the merged linked list.\\' Wouldn\\'t this be the first element of the sequence? However the output that is shown in the three examples is all of the elements from both lists sorted. The first problem is the best example. The output is 1,1,2,3,4,4. I would think that the head node would be 1. Can someone please explain?\\n\\nOn another note, I\\'m using python. With the exception of an academic exercise, when would I ever use linked lists in python? With all of the functions that exist in the standard python library, I can basically solve this in a few lines of code (maybe even 1). What is the actual purpose of this?\\n\\nThanks in advance."
                    },
                    {
                        "username": "user0291CQ",
                        "content": "I think with the head, since it is a listnode, it will also link to the next one in the list. So on the back end, in the test cases, they would be able to get the head, and get all the following values for each node. \\n\\nAs far as why this is necessary, I\\'m not sure. I have never used a listnode at work, and I\\'m tired of trying to figure out how to make one myself, or get one from a linkedlist, or however I\\'m supposed to do it. The problem itself isn\\'t difficult, but trying to get the answer into the right return type with no information on google is difficult. I\\'m skipping this one. It was disappointing for me."
                    },
                    {
                        "username": "The_White_Fox",
                        "content": "I have the feeling that Leetcode just makes up blaberish assignments, there is no such datatype as a ListNode nor linked list or whatever they call it,  in python 3 and up. That means that this assignment is a waste of time. ---->Bucket"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@zenverak](/zenverak) I\\'ve tried googling ListNode, and got nothing. Only when I googled linkedlist and listnode together did I get a familiar result. I\\'ve worked as a developer for a few years, and have never seen it come up. I\\'ve used linkedlists however, and I guess if you want to learn more about linkedlists this is valuable. I\\'ll do this one because I\\'m curious about it, but this doesn\\'t seem necessary. For the rare interviews that use it, I would just not do the interview."
                    },
                    {
                        "username": "zenverak",
                        "content": "These are very very very common Data Structures used in a lot of things. I would suggest googling them to kind of a get a clue as it helped me understand the linked list and how to traverse it a bit more."
                    },
                    {
                        "username": "PythonAkoto",
                        "content": "Thank you because i was thinking what the hell is a ListNode i haven\\'t heard of this before lol ..i was thinking the simplest solution would be to create an empty list then iterate through the `list1` & `list2` and then append it to the empty list.  Once you have that then you can sort the values and return the sorted list.  Apparently this is incorrect but on my device the same test works"
                    },
                    {
                        "username": "dshinnn",
                        "content": "I\\'m getting this error when I am simply printing out the first value of list1.  Anyone know why?  I\\'ve tried resetting the code to default, but it doesn\\'t work.  When I try copying and pasting someone else\\'s solution though, it works so I\\'m confused.\\n\\nAttributeError: \\'NoneType\\' object has no attribute \\'val\\'\\n    print(list1.val)\\nLine 8 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 32 in _driver (Solution.py)\\n    _driver()\\nLine 42 in <module> (Solution.py)\\n\\n```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        print(list1.val)\\n```"
                    },
                    {
                        "username": "JustAW",
                        "content": "same here. i also tried at first time. "
                    },
                    {
                        "username": "randomfun",
                        "content": "[@zenverak](/zenverak) Why it is \\'empty\\' ? list1 passed as parameter."
                    },
                    {
                        "username": "zenverak",
                        "content": "If its \\'emtpy\\' its just None, which None doesn\\'t have an attribute val. So you would need to take care of that before you try and grab the val."
                    },
                    {
                        "username": "yinggu",
                        "content": "I was creating a dummy variable as the header of new LinkNode l3, and refer the value of dummy to l3.  but I was wondering why finally return the dummy.next not l3.next?"
                    },
                    {
                        "username": "prince4332",
                        "content": "It works perfectly but if I test the is a runtime error"
                    }
                ]
            },
            {
                "id": 1763952,
                "content": [
                    {
                        "username": "icaliman",
                        "content": "Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\\n\\nWhere is the requirement that the resulting list needs to be sorted ??\\nThe example can be interpretted as index merge 1, 1, 2, 2, 3, 3, ..."
                    },
                    {
                        "username": "jingweih",
                        "content": "descending order and ascending order should have different solutions right, so the default order is ascending ?"
                    },
                    {
                        "username": "valmiki20",
                        "content": "sort any order, all it needs is reverse uno"
                    },
                    {
                        "username": "Subhammodi",
                        "content": "\"The new list should be made by splicing together the nodes of the first two lists.\"\\nWhat does it mean?\\n\\n 1. The output list should also be a sorted one.\\n\\n 2. Output list should be of the form l1 concatenate l2, i.e. all elements of l1 followed by elements of l2.\\n\\n 3. Neither of these.\\n\\nThanks for any help in advance."
                    },
                    {
                        "username": "alok056",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */"
                    },
                    {
                        "username": "Ludacris2G",
                        "content": "Why list1.val or list1.next returns undefined I just can\\'t figure this out to save my life man what the."
                    },
                    {
                        "username": "PBK320",
                        "content": "The problem states that we should \\'Return the head of the merged linked list.\\' Wouldn\\'t this be the first element of the sequence? However the output that is shown in the three examples is all of the elements from both lists sorted. The first problem is the best example. The output is 1,1,2,3,4,4. I would think that the head node would be 1. Can someone please explain?\\n\\nOn another note, I\\'m using python. With the exception of an academic exercise, when would I ever use linked lists in python? With all of the functions that exist in the standard python library, I can basically solve this in a few lines of code (maybe even 1). What is the actual purpose of this?\\n\\nThanks in advance."
                    },
                    {
                        "username": "user0291CQ",
                        "content": "I think with the head, since it is a listnode, it will also link to the next one in the list. So on the back end, in the test cases, they would be able to get the head, and get all the following values for each node. \\n\\nAs far as why this is necessary, I\\'m not sure. I have never used a listnode at work, and I\\'m tired of trying to figure out how to make one myself, or get one from a linkedlist, or however I\\'m supposed to do it. The problem itself isn\\'t difficult, but trying to get the answer into the right return type with no information on google is difficult. I\\'m skipping this one. It was disappointing for me."
                    },
                    {
                        "username": "The_White_Fox",
                        "content": "I have the feeling that Leetcode just makes up blaberish assignments, there is no such datatype as a ListNode nor linked list or whatever they call it,  in python 3 and up. That means that this assignment is a waste of time. ---->Bucket"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@zenverak](/zenverak) I\\'ve tried googling ListNode, and got nothing. Only when I googled linkedlist and listnode together did I get a familiar result. I\\'ve worked as a developer for a few years, and have never seen it come up. I\\'ve used linkedlists however, and I guess if you want to learn more about linkedlists this is valuable. I\\'ll do this one because I\\'m curious about it, but this doesn\\'t seem necessary. For the rare interviews that use it, I would just not do the interview."
                    },
                    {
                        "username": "zenverak",
                        "content": "These are very very very common Data Structures used in a lot of things. I would suggest googling them to kind of a get a clue as it helped me understand the linked list and how to traverse it a bit more."
                    },
                    {
                        "username": "PythonAkoto",
                        "content": "Thank you because i was thinking what the hell is a ListNode i haven\\'t heard of this before lol ..i was thinking the simplest solution would be to create an empty list then iterate through the `list1` & `list2` and then append it to the empty list.  Once you have that then you can sort the values and return the sorted list.  Apparently this is incorrect but on my device the same test works"
                    },
                    {
                        "username": "dshinnn",
                        "content": "I\\'m getting this error when I am simply printing out the first value of list1.  Anyone know why?  I\\'ve tried resetting the code to default, but it doesn\\'t work.  When I try copying and pasting someone else\\'s solution though, it works so I\\'m confused.\\n\\nAttributeError: \\'NoneType\\' object has no attribute \\'val\\'\\n    print(list1.val)\\nLine 8 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 32 in _driver (Solution.py)\\n    _driver()\\nLine 42 in <module> (Solution.py)\\n\\n```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        print(list1.val)\\n```"
                    },
                    {
                        "username": "JustAW",
                        "content": "same here. i also tried at first time. "
                    },
                    {
                        "username": "randomfun",
                        "content": "[@zenverak](/zenverak) Why it is \\'empty\\' ? list1 passed as parameter."
                    },
                    {
                        "username": "zenverak",
                        "content": "If its \\'emtpy\\' its just None, which None doesn\\'t have an attribute val. So you would need to take care of that before you try and grab the val."
                    },
                    {
                        "username": "yinggu",
                        "content": "I was creating a dummy variable as the header of new LinkNode l3, and refer the value of dummy to l3.  but I was wondering why finally return the dummy.next not l3.next?"
                    },
                    {
                        "username": "prince4332",
                        "content": "It works perfectly but if I test the is a runtime error"
                    }
                ]
            },
            {
                "id": 1567432,
                "content": [
                    {
                        "username": "icaliman",
                        "content": "Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\\n\\nWhere is the requirement that the resulting list needs to be sorted ??\\nThe example can be interpretted as index merge 1, 1, 2, 2, 3, 3, ..."
                    },
                    {
                        "username": "jingweih",
                        "content": "descending order and ascending order should have different solutions right, so the default order is ascending ?"
                    },
                    {
                        "username": "valmiki20",
                        "content": "sort any order, all it needs is reverse uno"
                    },
                    {
                        "username": "Subhammodi",
                        "content": "\"The new list should be made by splicing together the nodes of the first two lists.\"\\nWhat does it mean?\\n\\n 1. The output list should also be a sorted one.\\n\\n 2. Output list should be of the form l1 concatenate l2, i.e. all elements of l1 followed by elements of l2.\\n\\n 3. Neither of these.\\n\\nThanks for any help in advance."
                    },
                    {
                        "username": "alok056",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */"
                    },
                    {
                        "username": "Ludacris2G",
                        "content": "Why list1.val or list1.next returns undefined I just can\\'t figure this out to save my life man what the."
                    },
                    {
                        "username": "PBK320",
                        "content": "The problem states that we should \\'Return the head of the merged linked list.\\' Wouldn\\'t this be the first element of the sequence? However the output that is shown in the three examples is all of the elements from both lists sorted. The first problem is the best example. The output is 1,1,2,3,4,4. I would think that the head node would be 1. Can someone please explain?\\n\\nOn another note, I\\'m using python. With the exception of an academic exercise, when would I ever use linked lists in python? With all of the functions that exist in the standard python library, I can basically solve this in a few lines of code (maybe even 1). What is the actual purpose of this?\\n\\nThanks in advance."
                    },
                    {
                        "username": "user0291CQ",
                        "content": "I think with the head, since it is a listnode, it will also link to the next one in the list. So on the back end, in the test cases, they would be able to get the head, and get all the following values for each node. \\n\\nAs far as why this is necessary, I\\'m not sure. I have never used a listnode at work, and I\\'m tired of trying to figure out how to make one myself, or get one from a linkedlist, or however I\\'m supposed to do it. The problem itself isn\\'t difficult, but trying to get the answer into the right return type with no information on google is difficult. I\\'m skipping this one. It was disappointing for me."
                    },
                    {
                        "username": "The_White_Fox",
                        "content": "I have the feeling that Leetcode just makes up blaberish assignments, there is no such datatype as a ListNode nor linked list or whatever they call it,  in python 3 and up. That means that this assignment is a waste of time. ---->Bucket"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@zenverak](/zenverak) I\\'ve tried googling ListNode, and got nothing. Only when I googled linkedlist and listnode together did I get a familiar result. I\\'ve worked as a developer for a few years, and have never seen it come up. I\\'ve used linkedlists however, and I guess if you want to learn more about linkedlists this is valuable. I\\'ll do this one because I\\'m curious about it, but this doesn\\'t seem necessary. For the rare interviews that use it, I would just not do the interview."
                    },
                    {
                        "username": "zenverak",
                        "content": "These are very very very common Data Structures used in a lot of things. I would suggest googling them to kind of a get a clue as it helped me understand the linked list and how to traverse it a bit more."
                    },
                    {
                        "username": "PythonAkoto",
                        "content": "Thank you because i was thinking what the hell is a ListNode i haven\\'t heard of this before lol ..i was thinking the simplest solution would be to create an empty list then iterate through the `list1` & `list2` and then append it to the empty list.  Once you have that then you can sort the values and return the sorted list.  Apparently this is incorrect but on my device the same test works"
                    },
                    {
                        "username": "dshinnn",
                        "content": "I\\'m getting this error when I am simply printing out the first value of list1.  Anyone know why?  I\\'ve tried resetting the code to default, but it doesn\\'t work.  When I try copying and pasting someone else\\'s solution though, it works so I\\'m confused.\\n\\nAttributeError: \\'NoneType\\' object has no attribute \\'val\\'\\n    print(list1.val)\\nLine 8 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 32 in _driver (Solution.py)\\n    _driver()\\nLine 42 in <module> (Solution.py)\\n\\n```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        print(list1.val)\\n```"
                    },
                    {
                        "username": "JustAW",
                        "content": "same here. i also tried at first time. "
                    },
                    {
                        "username": "randomfun",
                        "content": "[@zenverak](/zenverak) Why it is \\'empty\\' ? list1 passed as parameter."
                    },
                    {
                        "username": "zenverak",
                        "content": "If its \\'emtpy\\' its just None, which None doesn\\'t have an attribute val. So you would need to take care of that before you try and grab the val."
                    },
                    {
                        "username": "yinggu",
                        "content": "I was creating a dummy variable as the header of new LinkNode l3, and refer the value of dummy to l3.  but I was wondering why finally return the dummy.next not l3.next?"
                    },
                    {
                        "username": "prince4332",
                        "content": "It works perfectly but if I test the is a runtime error"
                    }
                ]
            },
            {
                "id": 1795667,
                "content": [
                    {
                        "username": "icaliman",
                        "content": "Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\\n\\nWhere is the requirement that the resulting list needs to be sorted ??\\nThe example can be interpretted as index merge 1, 1, 2, 2, 3, 3, ..."
                    },
                    {
                        "username": "jingweih",
                        "content": "descending order and ascending order should have different solutions right, so the default order is ascending ?"
                    },
                    {
                        "username": "valmiki20",
                        "content": "sort any order, all it needs is reverse uno"
                    },
                    {
                        "username": "Subhammodi",
                        "content": "\"The new list should be made by splicing together the nodes of the first two lists.\"\\nWhat does it mean?\\n\\n 1. The output list should also be a sorted one.\\n\\n 2. Output list should be of the form l1 concatenate l2, i.e. all elements of l1 followed by elements of l2.\\n\\n 3. Neither of these.\\n\\nThanks for any help in advance."
                    },
                    {
                        "username": "alok056",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */"
                    },
                    {
                        "username": "Ludacris2G",
                        "content": "Why list1.val or list1.next returns undefined I just can\\'t figure this out to save my life man what the."
                    },
                    {
                        "username": "PBK320",
                        "content": "The problem states that we should \\'Return the head of the merged linked list.\\' Wouldn\\'t this be the first element of the sequence? However the output that is shown in the three examples is all of the elements from both lists sorted. The first problem is the best example. The output is 1,1,2,3,4,4. I would think that the head node would be 1. Can someone please explain?\\n\\nOn another note, I\\'m using python. With the exception of an academic exercise, when would I ever use linked lists in python? With all of the functions that exist in the standard python library, I can basically solve this in a few lines of code (maybe even 1). What is the actual purpose of this?\\n\\nThanks in advance."
                    },
                    {
                        "username": "user0291CQ",
                        "content": "I think with the head, since it is a listnode, it will also link to the next one in the list. So on the back end, in the test cases, they would be able to get the head, and get all the following values for each node. \\n\\nAs far as why this is necessary, I\\'m not sure. I have never used a listnode at work, and I\\'m tired of trying to figure out how to make one myself, or get one from a linkedlist, or however I\\'m supposed to do it. The problem itself isn\\'t difficult, but trying to get the answer into the right return type with no information on google is difficult. I\\'m skipping this one. It was disappointing for me."
                    },
                    {
                        "username": "The_White_Fox",
                        "content": "I have the feeling that Leetcode just makes up blaberish assignments, there is no such datatype as a ListNode nor linked list or whatever they call it,  in python 3 and up. That means that this assignment is a waste of time. ---->Bucket"
                    },
                    {
                        "username": "user0291CQ",
                        "content": "[@zenverak](/zenverak) I\\'ve tried googling ListNode, and got nothing. Only when I googled linkedlist and listnode together did I get a familiar result. I\\'ve worked as a developer for a few years, and have never seen it come up. I\\'ve used linkedlists however, and I guess if you want to learn more about linkedlists this is valuable. I\\'ll do this one because I\\'m curious about it, but this doesn\\'t seem necessary. For the rare interviews that use it, I would just not do the interview."
                    },
                    {
                        "username": "zenverak",
                        "content": "These are very very very common Data Structures used in a lot of things. I would suggest googling them to kind of a get a clue as it helped me understand the linked list and how to traverse it a bit more."
                    },
                    {
                        "username": "PythonAkoto",
                        "content": "Thank you because i was thinking what the hell is a ListNode i haven\\'t heard of this before lol ..i was thinking the simplest solution would be to create an empty list then iterate through the `list1` & `list2` and then append it to the empty list.  Once you have that then you can sort the values and return the sorted list.  Apparently this is incorrect but on my device the same test works"
                    },
                    {
                        "username": "dshinnn",
                        "content": "I\\'m getting this error when I am simply printing out the first value of list1.  Anyone know why?  I\\'ve tried resetting the code to default, but it doesn\\'t work.  When I try copying and pasting someone else\\'s solution though, it works so I\\'m confused.\\n\\nAttributeError: \\'NoneType\\' object has no attribute \\'val\\'\\n    print(list1.val)\\nLine 8 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 32 in _driver (Solution.py)\\n    _driver()\\nLine 42 in <module> (Solution.py)\\n\\n```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        print(list1.val)\\n```"
                    },
                    {
                        "username": "JustAW",
                        "content": "same here. i also tried at first time. "
                    },
                    {
                        "username": "randomfun",
                        "content": "[@zenverak](/zenverak) Why it is \\'empty\\' ? list1 passed as parameter."
                    },
                    {
                        "username": "zenverak",
                        "content": "If its \\'emtpy\\' its just None, which None doesn\\'t have an attribute val. So you would need to take care of that before you try and grab the val."
                    },
                    {
                        "username": "yinggu",
                        "content": "I was creating a dummy variable as the header of new LinkNode l3, and refer the value of dummy to l3.  but I was wondering why finally return the dummy.next not l3.next?"
                    },
                    {
                        "username": "prince4332",
                        "content": "It works perfectly but if I test the is a runtime error"
                    }
                ]
            },
            {
                "id": 1793869,
                "content": [
                    {
                        "username": "Erikos",
                        "content": "Does anyone have the same issue as I am? It just won't run the code, when I try to access any of the list1 or list2 values via \"list1.val\".  I also can not add images here.. The error is in java and states:\n\n `java.lang.NullPointerException: Cannot read field \"val\" because \"<parameter1>\" is null`\n ` at line 13, Solution.mergeTwoLists`\n ` at line 54, __DriverSolution__.__helper__`\n ` at line 87, __Driver__.main`\n\nThe code in question:\n`class Solution {`\n`    public ListNode mergeTwoLists(ListNode l1, ListNode list2) {`\n`       if(l1.val == 1){`\n`           System.out.println(\"list1\");`\n`        }`\n`        System.out.println(l1);`\n\n\nSolution:\nThe error was caused due to me trying to access the val variable even though in testcases 2 and 3 the list1 is empty.."
                    },
                    {
                        "username": "nihalgupta1688",
                        "content": "is this really an easy question? :3"
                    },
                    {
                        "username": "user0646fR",
                        "content": "javascript question\\n\\nwhy does list1 print to the console as [1,2,4] instead of \\n\\n    Node: {\\n        val: 1, \\n        next: Node {\\n            val: 2,\\n            next: Node {\\n            val: 4,\\n            next: null\\n        }\\n        }\\n};\\n\\nwhen it\\'s an object with properties? arrays don\\'t have dot properties. it doesnt make sense to do [1,2].next"
                    },
                    {
                        "username": "shiyisrsly",
                        "content": "class Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        p1 = list1\\n        p2 = list2\\n        dummy = ListNode(-1)\\n        p = dummy\\n        p2\\n        \\n\\n        while p1 != None and p2 != None:\\n\\n            if  p1.val < p2.val:\\n                p.next = p1\\n                p1 = p1.next\\n            else:\\n                p.next = p2\\n                p2 = p2.next\\n            p = p.next\\n\\n        if p1 != None:\\n            p.next = p1\\n        \\n        if p2 != None:\\n            p.next = p2\\n        return dummy.next"
                    },
                    {
                        "username": "joachim_dorel",
                        "content": "Hi,\\n\\nIf the input is an empty array, and I return the same input, why does the solution does not work? Do I need to initialize the array?"
                    },
                    {
                        "username": "zenverak",
                        "content": "You\\'re dealing with Linked list ( and the node of the list). The array they show is to visualize the order the nodes show up in."
                    },
                    {
                        "username": "RJB_425",
                        "content": "In Java, while accessing values inside the method by line list1.val, I am getting below error. Does anybody know why this might be happening?\\n\\njava.lang.NullPointerException: Cannot read field \"val\" because \"<parameter1>\" is null"
                    },
                    {
                        "username": "ahsamkk12",
                        "content": "have the same question"
                    },
                    {
                        "username": "and86804",
                        "content": "I have a question that when I use \"print(list.val)\" to check the item in the list1, it would report \"AttributeError: \\'NoneType\\' object has no attribute \\'val\\'\".\\nBut if I add an if statement like: \"if list1 is not None: print(list1.val)\", then no error occurs.....\\nDoes anyone know what\\'s the reason for this?"
                    },
                    {
                        "username": "abhishekspawar2003",
                        "content": "How should I return NULL value when both lists are NULL."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You return a null pointer."
                    },
                    {
                        "username": "user9322HQ",
                        "content": "same question"
                    },
                    {
                        "username": "wanderingcatto",
                        "content": "What even is a linked list? I never heard of it until this question. And why do we even need linked list when we have...just normal lists?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Good question. You can easily add and remove nodes. But arrays are faster on todays computers."
                    },
                    {
                        "username": "harshitj1611",
                        "content": " struct ListNode* ans;\\n\\nLine 24: Char 22: runtime error: member access within misaligned address 0x000000000001 for type \\'struct ListNode\\', which requires 8 byte alignment (solution.cpp)\\n0x000000000001: note: pointer points here\\n<memory cannot be printed>\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:33:22\\n\\nI have tried allocating memory using malloc, still getting same error. Can someone please help? What\\'s wrong in here?"
                    },
                    {
                        "username": "StrawhatLuffy2502",
                        "content": "Remove struct and try"
                    }
                ]
            },
            {
                "id": 1759046,
                "content": [
                    {
                        "username": "Erikos",
                        "content": "Does anyone have the same issue as I am? It just won't run the code, when I try to access any of the list1 or list2 values via \"list1.val\".  I also can not add images here.. The error is in java and states:\n\n `java.lang.NullPointerException: Cannot read field \"val\" because \"<parameter1>\" is null`\n ` at line 13, Solution.mergeTwoLists`\n ` at line 54, __DriverSolution__.__helper__`\n ` at line 87, __Driver__.main`\n\nThe code in question:\n`class Solution {`\n`    public ListNode mergeTwoLists(ListNode l1, ListNode list2) {`\n`       if(l1.val == 1){`\n`           System.out.println(\"list1\");`\n`        }`\n`        System.out.println(l1);`\n\n\nSolution:\nThe error was caused due to me trying to access the val variable even though in testcases 2 and 3 the list1 is empty.."
                    },
                    {
                        "username": "nihalgupta1688",
                        "content": "is this really an easy question? :3"
                    },
                    {
                        "username": "user0646fR",
                        "content": "javascript question\\n\\nwhy does list1 print to the console as [1,2,4] instead of \\n\\n    Node: {\\n        val: 1, \\n        next: Node {\\n            val: 2,\\n            next: Node {\\n            val: 4,\\n            next: null\\n        }\\n        }\\n};\\n\\nwhen it\\'s an object with properties? arrays don\\'t have dot properties. it doesnt make sense to do [1,2].next"
                    },
                    {
                        "username": "shiyisrsly",
                        "content": "class Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        p1 = list1\\n        p2 = list2\\n        dummy = ListNode(-1)\\n        p = dummy\\n        p2\\n        \\n\\n        while p1 != None and p2 != None:\\n\\n            if  p1.val < p2.val:\\n                p.next = p1\\n                p1 = p1.next\\n            else:\\n                p.next = p2\\n                p2 = p2.next\\n            p = p.next\\n\\n        if p1 != None:\\n            p.next = p1\\n        \\n        if p2 != None:\\n            p.next = p2\\n        return dummy.next"
                    },
                    {
                        "username": "joachim_dorel",
                        "content": "Hi,\\n\\nIf the input is an empty array, and I return the same input, why does the solution does not work? Do I need to initialize the array?"
                    },
                    {
                        "username": "zenverak",
                        "content": "You\\'re dealing with Linked list ( and the node of the list). The array they show is to visualize the order the nodes show up in."
                    },
                    {
                        "username": "RJB_425",
                        "content": "In Java, while accessing values inside the method by line list1.val, I am getting below error. Does anybody know why this might be happening?\\n\\njava.lang.NullPointerException: Cannot read field \"val\" because \"<parameter1>\" is null"
                    },
                    {
                        "username": "ahsamkk12",
                        "content": "have the same question"
                    },
                    {
                        "username": "and86804",
                        "content": "I have a question that when I use \"print(list.val)\" to check the item in the list1, it would report \"AttributeError: \\'NoneType\\' object has no attribute \\'val\\'\".\\nBut if I add an if statement like: \"if list1 is not None: print(list1.val)\", then no error occurs.....\\nDoes anyone know what\\'s the reason for this?"
                    },
                    {
                        "username": "abhishekspawar2003",
                        "content": "How should I return NULL value when both lists are NULL."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You return a null pointer."
                    },
                    {
                        "username": "user9322HQ",
                        "content": "same question"
                    },
                    {
                        "username": "wanderingcatto",
                        "content": "What even is a linked list? I never heard of it until this question. And why do we even need linked list when we have...just normal lists?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Good question. You can easily add and remove nodes. But arrays are faster on todays computers."
                    },
                    {
                        "username": "harshitj1611",
                        "content": " struct ListNode* ans;\\n\\nLine 24: Char 22: runtime error: member access within misaligned address 0x000000000001 for type \\'struct ListNode\\', which requires 8 byte alignment (solution.cpp)\\n0x000000000001: note: pointer points here\\n<memory cannot be printed>\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:33:22\\n\\nI have tried allocating memory using malloc, still getting same error. Can someone please help? What\\'s wrong in here?"
                    },
                    {
                        "username": "StrawhatLuffy2502",
                        "content": "Remove struct and try"
                    }
                ]
            },
            {
                "id": 1693522,
                "content": [
                    {
                        "username": "Erikos",
                        "content": "Does anyone have the same issue as I am? It just won't run the code, when I try to access any of the list1 or list2 values via \"list1.val\".  I also can not add images here.. The error is in java and states:\n\n `java.lang.NullPointerException: Cannot read field \"val\" because \"<parameter1>\" is null`\n ` at line 13, Solution.mergeTwoLists`\n ` at line 54, __DriverSolution__.__helper__`\n ` at line 87, __Driver__.main`\n\nThe code in question:\n`class Solution {`\n`    public ListNode mergeTwoLists(ListNode l1, ListNode list2) {`\n`       if(l1.val == 1){`\n`           System.out.println(\"list1\");`\n`        }`\n`        System.out.println(l1);`\n\n\nSolution:\nThe error was caused due to me trying to access the val variable even though in testcases 2 and 3 the list1 is empty.."
                    },
                    {
                        "username": "nihalgupta1688",
                        "content": "is this really an easy question? :3"
                    },
                    {
                        "username": "user0646fR",
                        "content": "javascript question\\n\\nwhy does list1 print to the console as [1,2,4] instead of \\n\\n    Node: {\\n        val: 1, \\n        next: Node {\\n            val: 2,\\n            next: Node {\\n            val: 4,\\n            next: null\\n        }\\n        }\\n};\\n\\nwhen it\\'s an object with properties? arrays don\\'t have dot properties. it doesnt make sense to do [1,2].next"
                    },
                    {
                        "username": "shiyisrsly",
                        "content": "class Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        p1 = list1\\n        p2 = list2\\n        dummy = ListNode(-1)\\n        p = dummy\\n        p2\\n        \\n\\n        while p1 != None and p2 != None:\\n\\n            if  p1.val < p2.val:\\n                p.next = p1\\n                p1 = p1.next\\n            else:\\n                p.next = p2\\n                p2 = p2.next\\n            p = p.next\\n\\n        if p1 != None:\\n            p.next = p1\\n        \\n        if p2 != None:\\n            p.next = p2\\n        return dummy.next"
                    },
                    {
                        "username": "joachim_dorel",
                        "content": "Hi,\\n\\nIf the input is an empty array, and I return the same input, why does the solution does not work? Do I need to initialize the array?"
                    },
                    {
                        "username": "zenverak",
                        "content": "You\\'re dealing with Linked list ( and the node of the list). The array they show is to visualize the order the nodes show up in."
                    },
                    {
                        "username": "RJB_425",
                        "content": "In Java, while accessing values inside the method by line list1.val, I am getting below error. Does anybody know why this might be happening?\\n\\njava.lang.NullPointerException: Cannot read field \"val\" because \"<parameter1>\" is null"
                    },
                    {
                        "username": "ahsamkk12",
                        "content": "have the same question"
                    },
                    {
                        "username": "and86804",
                        "content": "I have a question that when I use \"print(list.val)\" to check the item in the list1, it would report \"AttributeError: \\'NoneType\\' object has no attribute \\'val\\'\".\\nBut if I add an if statement like: \"if list1 is not None: print(list1.val)\", then no error occurs.....\\nDoes anyone know what\\'s the reason for this?"
                    },
                    {
                        "username": "abhishekspawar2003",
                        "content": "How should I return NULL value when both lists are NULL."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You return a null pointer."
                    },
                    {
                        "username": "user9322HQ",
                        "content": "same question"
                    },
                    {
                        "username": "wanderingcatto",
                        "content": "What even is a linked list? I never heard of it until this question. And why do we even need linked list when we have...just normal lists?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Good question. You can easily add and remove nodes. But arrays are faster on todays computers."
                    },
                    {
                        "username": "harshitj1611",
                        "content": " struct ListNode* ans;\\n\\nLine 24: Char 22: runtime error: member access within misaligned address 0x000000000001 for type \\'struct ListNode\\', which requires 8 byte alignment (solution.cpp)\\n0x000000000001: note: pointer points here\\n<memory cannot be printed>\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:33:22\\n\\nI have tried allocating memory using malloc, still getting same error. Can someone please help? What\\'s wrong in here?"
                    },
                    {
                        "username": "StrawhatLuffy2502",
                        "content": "Remove struct and try"
                    }
                ]
            },
            {
                "id": 1641118,
                "content": [
                    {
                        "username": "Erikos",
                        "content": "Does anyone have the same issue as I am? It just won't run the code, when I try to access any of the list1 or list2 values via \"list1.val\".  I also can not add images here.. The error is in java and states:\n\n `java.lang.NullPointerException: Cannot read field \"val\" because \"<parameter1>\" is null`\n ` at line 13, Solution.mergeTwoLists`\n ` at line 54, __DriverSolution__.__helper__`\n ` at line 87, __Driver__.main`\n\nThe code in question:\n`class Solution {`\n`    public ListNode mergeTwoLists(ListNode l1, ListNode list2) {`\n`       if(l1.val == 1){`\n`           System.out.println(\"list1\");`\n`        }`\n`        System.out.println(l1);`\n\n\nSolution:\nThe error was caused due to me trying to access the val variable even though in testcases 2 and 3 the list1 is empty.."
                    },
                    {
                        "username": "nihalgupta1688",
                        "content": "is this really an easy question? :3"
                    },
                    {
                        "username": "user0646fR",
                        "content": "javascript question\\n\\nwhy does list1 print to the console as [1,2,4] instead of \\n\\n    Node: {\\n        val: 1, \\n        next: Node {\\n            val: 2,\\n            next: Node {\\n            val: 4,\\n            next: null\\n        }\\n        }\\n};\\n\\nwhen it\\'s an object with properties? arrays don\\'t have dot properties. it doesnt make sense to do [1,2].next"
                    },
                    {
                        "username": "shiyisrsly",
                        "content": "class Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        p1 = list1\\n        p2 = list2\\n        dummy = ListNode(-1)\\n        p = dummy\\n        p2\\n        \\n\\n        while p1 != None and p2 != None:\\n\\n            if  p1.val < p2.val:\\n                p.next = p1\\n                p1 = p1.next\\n            else:\\n                p.next = p2\\n                p2 = p2.next\\n            p = p.next\\n\\n        if p1 != None:\\n            p.next = p1\\n        \\n        if p2 != None:\\n            p.next = p2\\n        return dummy.next"
                    },
                    {
                        "username": "joachim_dorel",
                        "content": "Hi,\\n\\nIf the input is an empty array, and I return the same input, why does the solution does not work? Do I need to initialize the array?"
                    },
                    {
                        "username": "zenverak",
                        "content": "You\\'re dealing with Linked list ( and the node of the list). The array they show is to visualize the order the nodes show up in."
                    },
                    {
                        "username": "RJB_425",
                        "content": "In Java, while accessing values inside the method by line list1.val, I am getting below error. Does anybody know why this might be happening?\\n\\njava.lang.NullPointerException: Cannot read field \"val\" because \"<parameter1>\" is null"
                    },
                    {
                        "username": "ahsamkk12",
                        "content": "have the same question"
                    },
                    {
                        "username": "and86804",
                        "content": "I have a question that when I use \"print(list.val)\" to check the item in the list1, it would report \"AttributeError: \\'NoneType\\' object has no attribute \\'val\\'\".\\nBut if I add an if statement like: \"if list1 is not None: print(list1.val)\", then no error occurs.....\\nDoes anyone know what\\'s the reason for this?"
                    },
                    {
                        "username": "abhishekspawar2003",
                        "content": "How should I return NULL value when both lists are NULL."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You return a null pointer."
                    },
                    {
                        "username": "user9322HQ",
                        "content": "same question"
                    },
                    {
                        "username": "wanderingcatto",
                        "content": "What even is a linked list? I never heard of it until this question. And why do we even need linked list when we have...just normal lists?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Good question. You can easily add and remove nodes. But arrays are faster on todays computers."
                    },
                    {
                        "username": "harshitj1611",
                        "content": " struct ListNode* ans;\\n\\nLine 24: Char 22: runtime error: member access within misaligned address 0x000000000001 for type \\'struct ListNode\\', which requires 8 byte alignment (solution.cpp)\\n0x000000000001: note: pointer points here\\n<memory cannot be printed>\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:33:22\\n\\nI have tried allocating memory using malloc, still getting same error. Can someone please help? What\\'s wrong in here?"
                    },
                    {
                        "username": "StrawhatLuffy2502",
                        "content": "Remove struct and try"
                    }
                ]
            },
            {
                "id": 1573364,
                "content": [
                    {
                        "username": "Erikos",
                        "content": "Does anyone have the same issue as I am? It just won't run the code, when I try to access any of the list1 or list2 values via \"list1.val\".  I also can not add images here.. The error is in java and states:\n\n `java.lang.NullPointerException: Cannot read field \"val\" because \"<parameter1>\" is null`\n ` at line 13, Solution.mergeTwoLists`\n ` at line 54, __DriverSolution__.__helper__`\n ` at line 87, __Driver__.main`\n\nThe code in question:\n`class Solution {`\n`    public ListNode mergeTwoLists(ListNode l1, ListNode list2) {`\n`       if(l1.val == 1){`\n`           System.out.println(\"list1\");`\n`        }`\n`        System.out.println(l1);`\n\n\nSolution:\nThe error was caused due to me trying to access the val variable even though in testcases 2 and 3 the list1 is empty.."
                    },
                    {
                        "username": "nihalgupta1688",
                        "content": "is this really an easy question? :3"
                    },
                    {
                        "username": "user0646fR",
                        "content": "javascript question\\n\\nwhy does list1 print to the console as [1,2,4] instead of \\n\\n    Node: {\\n        val: 1, \\n        next: Node {\\n            val: 2,\\n            next: Node {\\n            val: 4,\\n            next: null\\n        }\\n        }\\n};\\n\\nwhen it\\'s an object with properties? arrays don\\'t have dot properties. it doesnt make sense to do [1,2].next"
                    },
                    {
                        "username": "shiyisrsly",
                        "content": "class Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        p1 = list1\\n        p2 = list2\\n        dummy = ListNode(-1)\\n        p = dummy\\n        p2\\n        \\n\\n        while p1 != None and p2 != None:\\n\\n            if  p1.val < p2.val:\\n                p.next = p1\\n                p1 = p1.next\\n            else:\\n                p.next = p2\\n                p2 = p2.next\\n            p = p.next\\n\\n        if p1 != None:\\n            p.next = p1\\n        \\n        if p2 != None:\\n            p.next = p2\\n        return dummy.next"
                    },
                    {
                        "username": "joachim_dorel",
                        "content": "Hi,\\n\\nIf the input is an empty array, and I return the same input, why does the solution does not work? Do I need to initialize the array?"
                    },
                    {
                        "username": "zenverak",
                        "content": "You\\'re dealing with Linked list ( and the node of the list). The array they show is to visualize the order the nodes show up in."
                    },
                    {
                        "username": "RJB_425",
                        "content": "In Java, while accessing values inside the method by line list1.val, I am getting below error. Does anybody know why this might be happening?\\n\\njava.lang.NullPointerException: Cannot read field \"val\" because \"<parameter1>\" is null"
                    },
                    {
                        "username": "ahsamkk12",
                        "content": "have the same question"
                    },
                    {
                        "username": "and86804",
                        "content": "I have a question that when I use \"print(list.val)\" to check the item in the list1, it would report \"AttributeError: \\'NoneType\\' object has no attribute \\'val\\'\".\\nBut if I add an if statement like: \"if list1 is not None: print(list1.val)\", then no error occurs.....\\nDoes anyone know what\\'s the reason for this?"
                    },
                    {
                        "username": "abhishekspawar2003",
                        "content": "How should I return NULL value when both lists are NULL."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You return a null pointer."
                    },
                    {
                        "username": "user9322HQ",
                        "content": "same question"
                    },
                    {
                        "username": "wanderingcatto",
                        "content": "What even is a linked list? I never heard of it until this question. And why do we even need linked list when we have...just normal lists?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Good question. You can easily add and remove nodes. But arrays are faster on todays computers."
                    },
                    {
                        "username": "harshitj1611",
                        "content": " struct ListNode* ans;\\n\\nLine 24: Char 22: runtime error: member access within misaligned address 0x000000000001 for type \\'struct ListNode\\', which requires 8 byte alignment (solution.cpp)\\n0x000000000001: note: pointer points here\\n<memory cannot be printed>\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:33:22\\n\\nI have tried allocating memory using malloc, still getting same error. Can someone please help? What\\'s wrong in here?"
                    },
                    {
                        "username": "StrawhatLuffy2502",
                        "content": "Remove struct and try"
                    }
                ]
            },
            {
                "id": 2028009,
                "content": [
                    {
                        "username": "Erikos",
                        "content": "Does anyone have the same issue as I am? It just won't run the code, when I try to access any of the list1 or list2 values via \"list1.val\".  I also can not add images here.. The error is in java and states:\n\n `java.lang.NullPointerException: Cannot read field \"val\" because \"<parameter1>\" is null`\n ` at line 13, Solution.mergeTwoLists`\n ` at line 54, __DriverSolution__.__helper__`\n ` at line 87, __Driver__.main`\n\nThe code in question:\n`class Solution {`\n`    public ListNode mergeTwoLists(ListNode l1, ListNode list2) {`\n`       if(l1.val == 1){`\n`           System.out.println(\"list1\");`\n`        }`\n`        System.out.println(l1);`\n\n\nSolution:\nThe error was caused due to me trying to access the val variable even though in testcases 2 and 3 the list1 is empty.."
                    },
                    {
                        "username": "nihalgupta1688",
                        "content": "is this really an easy question? :3"
                    },
                    {
                        "username": "user0646fR",
                        "content": "javascript question\\n\\nwhy does list1 print to the console as [1,2,4] instead of \\n\\n    Node: {\\n        val: 1, \\n        next: Node {\\n            val: 2,\\n            next: Node {\\n            val: 4,\\n            next: null\\n        }\\n        }\\n};\\n\\nwhen it\\'s an object with properties? arrays don\\'t have dot properties. it doesnt make sense to do [1,2].next"
                    },
                    {
                        "username": "shiyisrsly",
                        "content": "class Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        p1 = list1\\n        p2 = list2\\n        dummy = ListNode(-1)\\n        p = dummy\\n        p2\\n        \\n\\n        while p1 != None and p2 != None:\\n\\n            if  p1.val < p2.val:\\n                p.next = p1\\n                p1 = p1.next\\n            else:\\n                p.next = p2\\n                p2 = p2.next\\n            p = p.next\\n\\n        if p1 != None:\\n            p.next = p1\\n        \\n        if p2 != None:\\n            p.next = p2\\n        return dummy.next"
                    },
                    {
                        "username": "joachim_dorel",
                        "content": "Hi,\\n\\nIf the input is an empty array, and I return the same input, why does the solution does not work? Do I need to initialize the array?"
                    },
                    {
                        "username": "zenverak",
                        "content": "You\\'re dealing with Linked list ( and the node of the list). The array they show is to visualize the order the nodes show up in."
                    },
                    {
                        "username": "RJB_425",
                        "content": "In Java, while accessing values inside the method by line list1.val, I am getting below error. Does anybody know why this might be happening?\\n\\njava.lang.NullPointerException: Cannot read field \"val\" because \"<parameter1>\" is null"
                    },
                    {
                        "username": "ahsamkk12",
                        "content": "have the same question"
                    },
                    {
                        "username": "and86804",
                        "content": "I have a question that when I use \"print(list.val)\" to check the item in the list1, it would report \"AttributeError: \\'NoneType\\' object has no attribute \\'val\\'\".\\nBut if I add an if statement like: \"if list1 is not None: print(list1.val)\", then no error occurs.....\\nDoes anyone know what\\'s the reason for this?"
                    },
                    {
                        "username": "abhishekspawar2003",
                        "content": "How should I return NULL value when both lists are NULL."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You return a null pointer."
                    },
                    {
                        "username": "user9322HQ",
                        "content": "same question"
                    },
                    {
                        "username": "wanderingcatto",
                        "content": "What even is a linked list? I never heard of it until this question. And why do we even need linked list when we have...just normal lists?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Good question. You can easily add and remove nodes. But arrays are faster on todays computers."
                    },
                    {
                        "username": "harshitj1611",
                        "content": " struct ListNode* ans;\\n\\nLine 24: Char 22: runtime error: member access within misaligned address 0x000000000001 for type \\'struct ListNode\\', which requires 8 byte alignment (solution.cpp)\\n0x000000000001: note: pointer points here\\n<memory cannot be printed>\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:33:22\\n\\nI have tried allocating memory using malloc, still getting same error. Can someone please help? What\\'s wrong in here?"
                    },
                    {
                        "username": "StrawhatLuffy2502",
                        "content": "Remove struct and try"
                    }
                ]
            },
            {
                "id": 2009194,
                "content": [
                    {
                        "username": "Erikos",
                        "content": "Does anyone have the same issue as I am? It just won't run the code, when I try to access any of the list1 or list2 values via \"list1.val\".  I also can not add images here.. The error is in java and states:\n\n `java.lang.NullPointerException: Cannot read field \"val\" because \"<parameter1>\" is null`\n ` at line 13, Solution.mergeTwoLists`\n ` at line 54, __DriverSolution__.__helper__`\n ` at line 87, __Driver__.main`\n\nThe code in question:\n`class Solution {`\n`    public ListNode mergeTwoLists(ListNode l1, ListNode list2) {`\n`       if(l1.val == 1){`\n`           System.out.println(\"list1\");`\n`        }`\n`        System.out.println(l1);`\n\n\nSolution:\nThe error was caused due to me trying to access the val variable even though in testcases 2 and 3 the list1 is empty.."
                    },
                    {
                        "username": "nihalgupta1688",
                        "content": "is this really an easy question? :3"
                    },
                    {
                        "username": "user0646fR",
                        "content": "javascript question\\n\\nwhy does list1 print to the console as [1,2,4] instead of \\n\\n    Node: {\\n        val: 1, \\n        next: Node {\\n            val: 2,\\n            next: Node {\\n            val: 4,\\n            next: null\\n        }\\n        }\\n};\\n\\nwhen it\\'s an object with properties? arrays don\\'t have dot properties. it doesnt make sense to do [1,2].next"
                    },
                    {
                        "username": "shiyisrsly",
                        "content": "class Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        p1 = list1\\n        p2 = list2\\n        dummy = ListNode(-1)\\n        p = dummy\\n        p2\\n        \\n\\n        while p1 != None and p2 != None:\\n\\n            if  p1.val < p2.val:\\n                p.next = p1\\n                p1 = p1.next\\n            else:\\n                p.next = p2\\n                p2 = p2.next\\n            p = p.next\\n\\n        if p1 != None:\\n            p.next = p1\\n        \\n        if p2 != None:\\n            p.next = p2\\n        return dummy.next"
                    },
                    {
                        "username": "joachim_dorel",
                        "content": "Hi,\\n\\nIf the input is an empty array, and I return the same input, why does the solution does not work? Do I need to initialize the array?"
                    },
                    {
                        "username": "zenverak",
                        "content": "You\\'re dealing with Linked list ( and the node of the list). The array they show is to visualize the order the nodes show up in."
                    },
                    {
                        "username": "RJB_425",
                        "content": "In Java, while accessing values inside the method by line list1.val, I am getting below error. Does anybody know why this might be happening?\\n\\njava.lang.NullPointerException: Cannot read field \"val\" because \"<parameter1>\" is null"
                    },
                    {
                        "username": "ahsamkk12",
                        "content": "have the same question"
                    },
                    {
                        "username": "and86804",
                        "content": "I have a question that when I use \"print(list.val)\" to check the item in the list1, it would report \"AttributeError: \\'NoneType\\' object has no attribute \\'val\\'\".\\nBut if I add an if statement like: \"if list1 is not None: print(list1.val)\", then no error occurs.....\\nDoes anyone know what\\'s the reason for this?"
                    },
                    {
                        "username": "abhishekspawar2003",
                        "content": "How should I return NULL value when both lists are NULL."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You return a null pointer."
                    },
                    {
                        "username": "user9322HQ",
                        "content": "same question"
                    },
                    {
                        "username": "wanderingcatto",
                        "content": "What even is a linked list? I never heard of it until this question. And why do we even need linked list when we have...just normal lists?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Good question. You can easily add and remove nodes. But arrays are faster on todays computers."
                    },
                    {
                        "username": "harshitj1611",
                        "content": " struct ListNode* ans;\\n\\nLine 24: Char 22: runtime error: member access within misaligned address 0x000000000001 for type \\'struct ListNode\\', which requires 8 byte alignment (solution.cpp)\\n0x000000000001: note: pointer points here\\n<memory cannot be printed>\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:33:22\\n\\nI have tried allocating memory using malloc, still getting same error. Can someone please help? What\\'s wrong in here?"
                    },
                    {
                        "username": "StrawhatLuffy2502",
                        "content": "Remove struct and try"
                    }
                ]
            },
            {
                "id": 1990302,
                "content": [
                    {
                        "username": "Erikos",
                        "content": "Does anyone have the same issue as I am? It just won't run the code, when I try to access any of the list1 or list2 values via \"list1.val\".  I also can not add images here.. The error is in java and states:\n\n `java.lang.NullPointerException: Cannot read field \"val\" because \"<parameter1>\" is null`\n ` at line 13, Solution.mergeTwoLists`\n ` at line 54, __DriverSolution__.__helper__`\n ` at line 87, __Driver__.main`\n\nThe code in question:\n`class Solution {`\n`    public ListNode mergeTwoLists(ListNode l1, ListNode list2) {`\n`       if(l1.val == 1){`\n`           System.out.println(\"list1\");`\n`        }`\n`        System.out.println(l1);`\n\n\nSolution:\nThe error was caused due to me trying to access the val variable even though in testcases 2 and 3 the list1 is empty.."
                    },
                    {
                        "username": "nihalgupta1688",
                        "content": "is this really an easy question? :3"
                    },
                    {
                        "username": "user0646fR",
                        "content": "javascript question\\n\\nwhy does list1 print to the console as [1,2,4] instead of \\n\\n    Node: {\\n        val: 1, \\n        next: Node {\\n            val: 2,\\n            next: Node {\\n            val: 4,\\n            next: null\\n        }\\n        }\\n};\\n\\nwhen it\\'s an object with properties? arrays don\\'t have dot properties. it doesnt make sense to do [1,2].next"
                    },
                    {
                        "username": "shiyisrsly",
                        "content": "class Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        p1 = list1\\n        p2 = list2\\n        dummy = ListNode(-1)\\n        p = dummy\\n        p2\\n        \\n\\n        while p1 != None and p2 != None:\\n\\n            if  p1.val < p2.val:\\n                p.next = p1\\n                p1 = p1.next\\n            else:\\n                p.next = p2\\n                p2 = p2.next\\n            p = p.next\\n\\n        if p1 != None:\\n            p.next = p1\\n        \\n        if p2 != None:\\n            p.next = p2\\n        return dummy.next"
                    },
                    {
                        "username": "joachim_dorel",
                        "content": "Hi,\\n\\nIf the input is an empty array, and I return the same input, why does the solution does not work? Do I need to initialize the array?"
                    },
                    {
                        "username": "zenverak",
                        "content": "You\\'re dealing with Linked list ( and the node of the list). The array they show is to visualize the order the nodes show up in."
                    },
                    {
                        "username": "RJB_425",
                        "content": "In Java, while accessing values inside the method by line list1.val, I am getting below error. Does anybody know why this might be happening?\\n\\njava.lang.NullPointerException: Cannot read field \"val\" because \"<parameter1>\" is null"
                    },
                    {
                        "username": "ahsamkk12",
                        "content": "have the same question"
                    },
                    {
                        "username": "and86804",
                        "content": "I have a question that when I use \"print(list.val)\" to check the item in the list1, it would report \"AttributeError: \\'NoneType\\' object has no attribute \\'val\\'\".\\nBut if I add an if statement like: \"if list1 is not None: print(list1.val)\", then no error occurs.....\\nDoes anyone know what\\'s the reason for this?"
                    },
                    {
                        "username": "abhishekspawar2003",
                        "content": "How should I return NULL value when both lists are NULL."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You return a null pointer."
                    },
                    {
                        "username": "user9322HQ",
                        "content": "same question"
                    },
                    {
                        "username": "wanderingcatto",
                        "content": "What even is a linked list? I never heard of it until this question. And why do we even need linked list when we have...just normal lists?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Good question. You can easily add and remove nodes. But arrays are faster on todays computers."
                    },
                    {
                        "username": "harshitj1611",
                        "content": " struct ListNode* ans;\\n\\nLine 24: Char 22: runtime error: member access within misaligned address 0x000000000001 for type \\'struct ListNode\\', which requires 8 byte alignment (solution.cpp)\\n0x000000000001: note: pointer points here\\n<memory cannot be printed>\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:33:22\\n\\nI have tried allocating memory using malloc, still getting same error. Can someone please help? What\\'s wrong in here?"
                    },
                    {
                        "username": "StrawhatLuffy2502",
                        "content": "Remove struct and try"
                    }
                ]
            },
            {
                "id": 1919030,
                "content": [
                    {
                        "username": "Erikos",
                        "content": "Does anyone have the same issue as I am? It just won't run the code, when I try to access any of the list1 or list2 values via \"list1.val\".  I also can not add images here.. The error is in java and states:\n\n `java.lang.NullPointerException: Cannot read field \"val\" because \"<parameter1>\" is null`\n ` at line 13, Solution.mergeTwoLists`\n ` at line 54, __DriverSolution__.__helper__`\n ` at line 87, __Driver__.main`\n\nThe code in question:\n`class Solution {`\n`    public ListNode mergeTwoLists(ListNode l1, ListNode list2) {`\n`       if(l1.val == 1){`\n`           System.out.println(\"list1\");`\n`        }`\n`        System.out.println(l1);`\n\n\nSolution:\nThe error was caused due to me trying to access the val variable even though in testcases 2 and 3 the list1 is empty.."
                    },
                    {
                        "username": "nihalgupta1688",
                        "content": "is this really an easy question? :3"
                    },
                    {
                        "username": "user0646fR",
                        "content": "javascript question\\n\\nwhy does list1 print to the console as [1,2,4] instead of \\n\\n    Node: {\\n        val: 1, \\n        next: Node {\\n            val: 2,\\n            next: Node {\\n            val: 4,\\n            next: null\\n        }\\n        }\\n};\\n\\nwhen it\\'s an object with properties? arrays don\\'t have dot properties. it doesnt make sense to do [1,2].next"
                    },
                    {
                        "username": "shiyisrsly",
                        "content": "class Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        p1 = list1\\n        p2 = list2\\n        dummy = ListNode(-1)\\n        p = dummy\\n        p2\\n        \\n\\n        while p1 != None and p2 != None:\\n\\n            if  p1.val < p2.val:\\n                p.next = p1\\n                p1 = p1.next\\n            else:\\n                p.next = p2\\n                p2 = p2.next\\n            p = p.next\\n\\n        if p1 != None:\\n            p.next = p1\\n        \\n        if p2 != None:\\n            p.next = p2\\n        return dummy.next"
                    },
                    {
                        "username": "joachim_dorel",
                        "content": "Hi,\\n\\nIf the input is an empty array, and I return the same input, why does the solution does not work? Do I need to initialize the array?"
                    },
                    {
                        "username": "zenverak",
                        "content": "You\\'re dealing with Linked list ( and the node of the list). The array they show is to visualize the order the nodes show up in."
                    },
                    {
                        "username": "RJB_425",
                        "content": "In Java, while accessing values inside the method by line list1.val, I am getting below error. Does anybody know why this might be happening?\\n\\njava.lang.NullPointerException: Cannot read field \"val\" because \"<parameter1>\" is null"
                    },
                    {
                        "username": "ahsamkk12",
                        "content": "have the same question"
                    },
                    {
                        "username": "and86804",
                        "content": "I have a question that when I use \"print(list.val)\" to check the item in the list1, it would report \"AttributeError: \\'NoneType\\' object has no attribute \\'val\\'\".\\nBut if I add an if statement like: \"if list1 is not None: print(list1.val)\", then no error occurs.....\\nDoes anyone know what\\'s the reason for this?"
                    },
                    {
                        "username": "abhishekspawar2003",
                        "content": "How should I return NULL value when both lists are NULL."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You return a null pointer."
                    },
                    {
                        "username": "user9322HQ",
                        "content": "same question"
                    },
                    {
                        "username": "wanderingcatto",
                        "content": "What even is a linked list? I never heard of it until this question. And why do we even need linked list when we have...just normal lists?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Good question. You can easily add and remove nodes. But arrays are faster on todays computers."
                    },
                    {
                        "username": "harshitj1611",
                        "content": " struct ListNode* ans;\\n\\nLine 24: Char 22: runtime error: member access within misaligned address 0x000000000001 for type \\'struct ListNode\\', which requires 8 byte alignment (solution.cpp)\\n0x000000000001: note: pointer points here\\n<memory cannot be printed>\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:33:22\\n\\nI have tried allocating memory using malloc, still getting same error. Can someone please help? What\\'s wrong in here?"
                    },
                    {
                        "username": "StrawhatLuffy2502",
                        "content": "Remove struct and try"
                    }
                ]
            },
            {
                "id": 1898708,
                "content": [
                    {
                        "username": "Erikos",
                        "content": "Does anyone have the same issue as I am? It just won't run the code, when I try to access any of the list1 or list2 values via \"list1.val\".  I also can not add images here.. The error is in java and states:\n\n `java.lang.NullPointerException: Cannot read field \"val\" because \"<parameter1>\" is null`\n ` at line 13, Solution.mergeTwoLists`\n ` at line 54, __DriverSolution__.__helper__`\n ` at line 87, __Driver__.main`\n\nThe code in question:\n`class Solution {`\n`    public ListNode mergeTwoLists(ListNode l1, ListNode list2) {`\n`       if(l1.val == 1){`\n`           System.out.println(\"list1\");`\n`        }`\n`        System.out.println(l1);`\n\n\nSolution:\nThe error was caused due to me trying to access the val variable even though in testcases 2 and 3 the list1 is empty.."
                    },
                    {
                        "username": "nihalgupta1688",
                        "content": "is this really an easy question? :3"
                    },
                    {
                        "username": "user0646fR",
                        "content": "javascript question\\n\\nwhy does list1 print to the console as [1,2,4] instead of \\n\\n    Node: {\\n        val: 1, \\n        next: Node {\\n            val: 2,\\n            next: Node {\\n            val: 4,\\n            next: null\\n        }\\n        }\\n};\\n\\nwhen it\\'s an object with properties? arrays don\\'t have dot properties. it doesnt make sense to do [1,2].next"
                    },
                    {
                        "username": "shiyisrsly",
                        "content": "class Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        p1 = list1\\n        p2 = list2\\n        dummy = ListNode(-1)\\n        p = dummy\\n        p2\\n        \\n\\n        while p1 != None and p2 != None:\\n\\n            if  p1.val < p2.val:\\n                p.next = p1\\n                p1 = p1.next\\n            else:\\n                p.next = p2\\n                p2 = p2.next\\n            p = p.next\\n\\n        if p1 != None:\\n            p.next = p1\\n        \\n        if p2 != None:\\n            p.next = p2\\n        return dummy.next"
                    },
                    {
                        "username": "joachim_dorel",
                        "content": "Hi,\\n\\nIf the input is an empty array, and I return the same input, why does the solution does not work? Do I need to initialize the array?"
                    },
                    {
                        "username": "zenverak",
                        "content": "You\\'re dealing with Linked list ( and the node of the list). The array they show is to visualize the order the nodes show up in."
                    },
                    {
                        "username": "RJB_425",
                        "content": "In Java, while accessing values inside the method by line list1.val, I am getting below error. Does anybody know why this might be happening?\\n\\njava.lang.NullPointerException: Cannot read field \"val\" because \"<parameter1>\" is null"
                    },
                    {
                        "username": "ahsamkk12",
                        "content": "have the same question"
                    },
                    {
                        "username": "and86804",
                        "content": "I have a question that when I use \"print(list.val)\" to check the item in the list1, it would report \"AttributeError: \\'NoneType\\' object has no attribute \\'val\\'\".\\nBut if I add an if statement like: \"if list1 is not None: print(list1.val)\", then no error occurs.....\\nDoes anyone know what\\'s the reason for this?"
                    },
                    {
                        "username": "abhishekspawar2003",
                        "content": "How should I return NULL value when both lists are NULL."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You return a null pointer."
                    },
                    {
                        "username": "user9322HQ",
                        "content": "same question"
                    },
                    {
                        "username": "wanderingcatto",
                        "content": "What even is a linked list? I never heard of it until this question. And why do we even need linked list when we have...just normal lists?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Good question. You can easily add and remove nodes. But arrays are faster on todays computers."
                    },
                    {
                        "username": "harshitj1611",
                        "content": " struct ListNode* ans;\\n\\nLine 24: Char 22: runtime error: member access within misaligned address 0x000000000001 for type \\'struct ListNode\\', which requires 8 byte alignment (solution.cpp)\\n0x000000000001: note: pointer points here\\n<memory cannot be printed>\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:33:22\\n\\nI have tried allocating memory using malloc, still getting same error. Can someone please help? What\\'s wrong in here?"
                    },
                    {
                        "username": "StrawhatLuffy2502",
                        "content": "Remove struct and try"
                    }
                ]
            },
            {
                "id": 1881711,
                "content": [
                    {
                        "username": "leetyo32",
                        "content": "> Both list1 and list2 are sorted in non-decreasing order.\\n\\nYou mean ascending?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "There are duplicates, which are not ascending."
                    },
                    {
                        "username": "roumor",
                        "content": "this one is annoying. just calling list1[i] or list1.val causes your js script to exit with error."
                    },
                    {
                        "username": "trumankckwong",
                        "content": "I\\'m using JavaScript, why does console.log(list1.val) throw an error TypeError: Cannot read properties of null (reading \\'val\\')"
                    },
                    {
                        "username": "randomfun",
                        "content": "Can someone explain this error?\nAttributeError: 'NoneType' object has no attribute 'next'\n    list1 = list1.next\nLine 8 in mergeTwoLists (Solution.py)\n    ret = Solution().mergeTwoLists(param_1, param_2)\nLine 55 in _driver (Solution.py)\n    _driver()\nLine 66 in <module> (Solution.py)\n\nAnd why if statemant solve this error?"
                    },
                    {
                        "username": "greenchalk",
                        "content": "Same"
                    },
                    {
                        "username": "2old4this",
                        "content": "I am a bit lost here...\nI am using Javascript and the description says that list1 and list2 are nodes at the head of a list. When I print them out they are printed as arrays, but don't have any of the functionality of an array. Ok That's fine, however, when I try to access the nodes using .val and .next I get a TypeError: cannot read properties of null.\n\nDO I need to recreate the list as a node list or is this a glitch? because I can still print the value of list1.val and it gives me the first node value. Any insight on this would be appreciated. "
                    },
                    {
                        "username": "Ruildo",
                        "content": "that type error is just a bug, as u noted it still returns a value so .val and .next still works."
                    },
                    {
                        "username": "dwrz",
                        "content": "\"Both list1 and list2 are sorted in non-decreasing order.\"\\n\\nPlease just say \"increasing\" instead of \"non-decreasing\" order. "
                    },
                    {
                        "username": "user5267Xl",
                        "content": "In an increasing list, each value is strictly greater than the previous value. In a non-decreasing list, each value is equal to or greater than the previous node. It\\'s a subtle but important difference. [1,1,1] is a non-decreasing list, but not an increasing list. It\\'s rather like saying \"non-negative\" instead of \"positive\" when you want to include 0."
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "Actually these things are actually different. Increasing means (in this case) that for each next node that the value grows, at least by 1 in the case of integers. Non-decreasing means that the next node could have the same value as the previous node. So, 1->2->4 is an increasing list, and 1->1->2->4 is a non-decreasing list, since we never decrease the value from any previous nodes, but we can also have the same number as before. Non-decreasing is a fancy way of saying \"increasing or staying the same\". So they are different terms, sorry to burst your bubble, but I have also had this same thought before but it can be very important in certain problems."
                    },
                    {
                        "username": "int-h",
                        "content": "Hi, I\\'m having difficulty with how to start with the problem on python, in particular with how to handle the test-cases coming into the function. For example I thought list1 was the header of the first list so printing list.val should print 1, which it does but it throws the below error\\nCan somoene help me with just getting started please? Thanks. \\n\\n```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        print(list1.val)\\n\\n```\\n\\n\\n```\\nAttributeError: \\'NoneType\\' object has no attribute \\'next\\'\\n    print(list1.next.val)\\nLine 10 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 35 in _driver (Solution.py)\\n    _driver()\\nLine 46 in <module> (Solution.py)\\n```"
                    },
                    {
                        "username": "int-h",
                        "content": "[@msauer22](/msauer22) Thanks for this. definitely getting a better understanding now \\nAm able to iterate through the linked lists like this now:\\n```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        while list1 and list2:\\n            print(list1.val)\\n            print(list2.val)\\n            list1 = list1.next\\n            list2 = list2.next\\n            \\n```"
                    },
                    {
                        "username": "msauer22",
                        "content": "The problem states that the number of nodes is in range [0, 50]. Therefore list1.next and even list1 can be Null.\nSo list1.next.val (your error) might not be defined, depending on test case\n\nHint: You can first check if list1 (list2) is actually Null or not defined. If thats true, then just return list2 (list1) because that will be the equivalent to the merged and sorted list."
                    },
                    {
                        "username": "denkochev",
                        "content": "Can you recommend me some materials related to this topic please? "
                    },
                    {
                        "username": "sommcoder",
                        "content": "I do not understand the JavaScript solutions that include new ListNode() such as the one below. What is this syntax? I get that curr.next is being assigned in the first IF block however I don\\'t see where this solution is declaring l1.val or l2.val, they are first mentioned in an expression which I would have thought would evaluate to \\'undefined\\'.\\n\\nI see NodeList in the JS MDN docs but not ListNode which leads me to believe this might be a Class or something? Could someone help explain to me how this code even works? Are there inherent properties within this ListNode object? Is there some documentation on this?\\n\\n` let curr = new ListNode();\\n  const dummy = curr;\\n  console.log(curr);\\n  // while l1 and l2 have value perform the following:\\n  while (l1 && l2) {\\n    // if l1 is less than l2\\n    if (l1.val < l2.val) {\\n      curr.next = l1;\\n      l1 = l1.next;\\n    } else {\\n      curr.next = l2;\\n      l2 = l2.next;\\n    }\\n    curr = curr.next;\\n  }\\n  //\\n  if (l1) curr.next = l1;\\n  if (l2) curr.next = l2;\\n  return dummy.next;\\n};`\\n\\n"
                    },
                    {
                        "username": "mazenadel19",
                        "content": "I found some explanation for list node here https://erikmartinjordan.com/listNode-javascript\nhowever I think something might be wrong with this problem for javascript, I can't return list1.val, I can't return Object.keys(list1), or list1[0] ... All of them give me an error. By this point I don't know what kind of data is this ListNode, I hope someone would come a long and clarify it a little"
                    },
                    {
                        "username": "MasonEG",
                        "content": "title; this problem can lead to different coding styles"
                    }
                ]
            },
            {
                "id": 1877883,
                "content": [
                    {
                        "username": "leetyo32",
                        "content": "> Both list1 and list2 are sorted in non-decreasing order.\\n\\nYou mean ascending?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "There are duplicates, which are not ascending."
                    },
                    {
                        "username": "roumor",
                        "content": "this one is annoying. just calling list1[i] or list1.val causes your js script to exit with error."
                    },
                    {
                        "username": "trumankckwong",
                        "content": "I\\'m using JavaScript, why does console.log(list1.val) throw an error TypeError: Cannot read properties of null (reading \\'val\\')"
                    },
                    {
                        "username": "randomfun",
                        "content": "Can someone explain this error?\nAttributeError: 'NoneType' object has no attribute 'next'\n    list1 = list1.next\nLine 8 in mergeTwoLists (Solution.py)\n    ret = Solution().mergeTwoLists(param_1, param_2)\nLine 55 in _driver (Solution.py)\n    _driver()\nLine 66 in <module> (Solution.py)\n\nAnd why if statemant solve this error?"
                    },
                    {
                        "username": "greenchalk",
                        "content": "Same"
                    },
                    {
                        "username": "2old4this",
                        "content": "I am a bit lost here...\nI am using Javascript and the description says that list1 and list2 are nodes at the head of a list. When I print them out they are printed as arrays, but don't have any of the functionality of an array. Ok That's fine, however, when I try to access the nodes using .val and .next I get a TypeError: cannot read properties of null.\n\nDO I need to recreate the list as a node list or is this a glitch? because I can still print the value of list1.val and it gives me the first node value. Any insight on this would be appreciated. "
                    },
                    {
                        "username": "Ruildo",
                        "content": "that type error is just a bug, as u noted it still returns a value so .val and .next still works."
                    },
                    {
                        "username": "dwrz",
                        "content": "\"Both list1 and list2 are sorted in non-decreasing order.\"\\n\\nPlease just say \"increasing\" instead of \"non-decreasing\" order. "
                    },
                    {
                        "username": "user5267Xl",
                        "content": "In an increasing list, each value is strictly greater than the previous value. In a non-decreasing list, each value is equal to or greater than the previous node. It\\'s a subtle but important difference. [1,1,1] is a non-decreasing list, but not an increasing list. It\\'s rather like saying \"non-negative\" instead of \"positive\" when you want to include 0."
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "Actually these things are actually different. Increasing means (in this case) that for each next node that the value grows, at least by 1 in the case of integers. Non-decreasing means that the next node could have the same value as the previous node. So, 1->2->4 is an increasing list, and 1->1->2->4 is a non-decreasing list, since we never decrease the value from any previous nodes, but we can also have the same number as before. Non-decreasing is a fancy way of saying \"increasing or staying the same\". So they are different terms, sorry to burst your bubble, but I have also had this same thought before but it can be very important in certain problems."
                    },
                    {
                        "username": "int-h",
                        "content": "Hi, I\\'m having difficulty with how to start with the problem on python, in particular with how to handle the test-cases coming into the function. For example I thought list1 was the header of the first list so printing list.val should print 1, which it does but it throws the below error\\nCan somoene help me with just getting started please? Thanks. \\n\\n```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        print(list1.val)\\n\\n```\\n\\n\\n```\\nAttributeError: \\'NoneType\\' object has no attribute \\'next\\'\\n    print(list1.next.val)\\nLine 10 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 35 in _driver (Solution.py)\\n    _driver()\\nLine 46 in <module> (Solution.py)\\n```"
                    },
                    {
                        "username": "int-h",
                        "content": "[@msauer22](/msauer22) Thanks for this. definitely getting a better understanding now \\nAm able to iterate through the linked lists like this now:\\n```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        while list1 and list2:\\n            print(list1.val)\\n            print(list2.val)\\n            list1 = list1.next\\n            list2 = list2.next\\n            \\n```"
                    },
                    {
                        "username": "msauer22",
                        "content": "The problem states that the number of nodes is in range [0, 50]. Therefore list1.next and even list1 can be Null.\nSo list1.next.val (your error) might not be defined, depending on test case\n\nHint: You can first check if list1 (list2) is actually Null or not defined. If thats true, then just return list2 (list1) because that will be the equivalent to the merged and sorted list."
                    },
                    {
                        "username": "denkochev",
                        "content": "Can you recommend me some materials related to this topic please? "
                    },
                    {
                        "username": "sommcoder",
                        "content": "I do not understand the JavaScript solutions that include new ListNode() such as the one below. What is this syntax? I get that curr.next is being assigned in the first IF block however I don\\'t see where this solution is declaring l1.val or l2.val, they are first mentioned in an expression which I would have thought would evaluate to \\'undefined\\'.\\n\\nI see NodeList in the JS MDN docs but not ListNode which leads me to believe this might be a Class or something? Could someone help explain to me how this code even works? Are there inherent properties within this ListNode object? Is there some documentation on this?\\n\\n` let curr = new ListNode();\\n  const dummy = curr;\\n  console.log(curr);\\n  // while l1 and l2 have value perform the following:\\n  while (l1 && l2) {\\n    // if l1 is less than l2\\n    if (l1.val < l2.val) {\\n      curr.next = l1;\\n      l1 = l1.next;\\n    } else {\\n      curr.next = l2;\\n      l2 = l2.next;\\n    }\\n    curr = curr.next;\\n  }\\n  //\\n  if (l1) curr.next = l1;\\n  if (l2) curr.next = l2;\\n  return dummy.next;\\n};`\\n\\n"
                    },
                    {
                        "username": "mazenadel19",
                        "content": "I found some explanation for list node here https://erikmartinjordan.com/listNode-javascript\nhowever I think something might be wrong with this problem for javascript, I can't return list1.val, I can't return Object.keys(list1), or list1[0] ... All of them give me an error. By this point I don't know what kind of data is this ListNode, I hope someone would come a long and clarify it a little"
                    },
                    {
                        "username": "MasonEG",
                        "content": "title; this problem can lead to different coding styles"
                    }
                ]
            },
            {
                "id": 1867010,
                "content": [
                    {
                        "username": "leetyo32",
                        "content": "> Both list1 and list2 are sorted in non-decreasing order.\\n\\nYou mean ascending?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "There are duplicates, which are not ascending."
                    },
                    {
                        "username": "roumor",
                        "content": "this one is annoying. just calling list1[i] or list1.val causes your js script to exit with error."
                    },
                    {
                        "username": "trumankckwong",
                        "content": "I\\'m using JavaScript, why does console.log(list1.val) throw an error TypeError: Cannot read properties of null (reading \\'val\\')"
                    },
                    {
                        "username": "randomfun",
                        "content": "Can someone explain this error?\nAttributeError: 'NoneType' object has no attribute 'next'\n    list1 = list1.next\nLine 8 in mergeTwoLists (Solution.py)\n    ret = Solution().mergeTwoLists(param_1, param_2)\nLine 55 in _driver (Solution.py)\n    _driver()\nLine 66 in <module> (Solution.py)\n\nAnd why if statemant solve this error?"
                    },
                    {
                        "username": "greenchalk",
                        "content": "Same"
                    },
                    {
                        "username": "2old4this",
                        "content": "I am a bit lost here...\nI am using Javascript and the description says that list1 and list2 are nodes at the head of a list. When I print them out they are printed as arrays, but don't have any of the functionality of an array. Ok That's fine, however, when I try to access the nodes using .val and .next I get a TypeError: cannot read properties of null.\n\nDO I need to recreate the list as a node list or is this a glitch? because I can still print the value of list1.val and it gives me the first node value. Any insight on this would be appreciated. "
                    },
                    {
                        "username": "Ruildo",
                        "content": "that type error is just a bug, as u noted it still returns a value so .val and .next still works."
                    },
                    {
                        "username": "dwrz",
                        "content": "\"Both list1 and list2 are sorted in non-decreasing order.\"\\n\\nPlease just say \"increasing\" instead of \"non-decreasing\" order. "
                    },
                    {
                        "username": "user5267Xl",
                        "content": "In an increasing list, each value is strictly greater than the previous value. In a non-decreasing list, each value is equal to or greater than the previous node. It\\'s a subtle but important difference. [1,1,1] is a non-decreasing list, but not an increasing list. It\\'s rather like saying \"non-negative\" instead of \"positive\" when you want to include 0."
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "Actually these things are actually different. Increasing means (in this case) that for each next node that the value grows, at least by 1 in the case of integers. Non-decreasing means that the next node could have the same value as the previous node. So, 1->2->4 is an increasing list, and 1->1->2->4 is a non-decreasing list, since we never decrease the value from any previous nodes, but we can also have the same number as before. Non-decreasing is a fancy way of saying \"increasing or staying the same\". So they are different terms, sorry to burst your bubble, but I have also had this same thought before but it can be very important in certain problems."
                    },
                    {
                        "username": "int-h",
                        "content": "Hi, I\\'m having difficulty with how to start with the problem on python, in particular with how to handle the test-cases coming into the function. For example I thought list1 was the header of the first list so printing list.val should print 1, which it does but it throws the below error\\nCan somoene help me with just getting started please? Thanks. \\n\\n```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        print(list1.val)\\n\\n```\\n\\n\\n```\\nAttributeError: \\'NoneType\\' object has no attribute \\'next\\'\\n    print(list1.next.val)\\nLine 10 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 35 in _driver (Solution.py)\\n    _driver()\\nLine 46 in <module> (Solution.py)\\n```"
                    },
                    {
                        "username": "int-h",
                        "content": "[@msauer22](/msauer22) Thanks for this. definitely getting a better understanding now \\nAm able to iterate through the linked lists like this now:\\n```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        while list1 and list2:\\n            print(list1.val)\\n            print(list2.val)\\n            list1 = list1.next\\n            list2 = list2.next\\n            \\n```"
                    },
                    {
                        "username": "msauer22",
                        "content": "The problem states that the number of nodes is in range [0, 50]. Therefore list1.next and even list1 can be Null.\nSo list1.next.val (your error) might not be defined, depending on test case\n\nHint: You can first check if list1 (list2) is actually Null or not defined. If thats true, then just return list2 (list1) because that will be the equivalent to the merged and sorted list."
                    },
                    {
                        "username": "denkochev",
                        "content": "Can you recommend me some materials related to this topic please? "
                    },
                    {
                        "username": "sommcoder",
                        "content": "I do not understand the JavaScript solutions that include new ListNode() such as the one below. What is this syntax? I get that curr.next is being assigned in the first IF block however I don\\'t see where this solution is declaring l1.val or l2.val, they are first mentioned in an expression which I would have thought would evaluate to \\'undefined\\'.\\n\\nI see NodeList in the JS MDN docs but not ListNode which leads me to believe this might be a Class or something? Could someone help explain to me how this code even works? Are there inherent properties within this ListNode object? Is there some documentation on this?\\n\\n` let curr = new ListNode();\\n  const dummy = curr;\\n  console.log(curr);\\n  // while l1 and l2 have value perform the following:\\n  while (l1 && l2) {\\n    // if l1 is less than l2\\n    if (l1.val < l2.val) {\\n      curr.next = l1;\\n      l1 = l1.next;\\n    } else {\\n      curr.next = l2;\\n      l2 = l2.next;\\n    }\\n    curr = curr.next;\\n  }\\n  //\\n  if (l1) curr.next = l1;\\n  if (l2) curr.next = l2;\\n  return dummy.next;\\n};`\\n\\n"
                    },
                    {
                        "username": "mazenadel19",
                        "content": "I found some explanation for list node here https://erikmartinjordan.com/listNode-javascript\nhowever I think something might be wrong with this problem for javascript, I can't return list1.val, I can't return Object.keys(list1), or list1[0] ... All of them give me an error. By this point I don't know what kind of data is this ListNode, I hope someone would come a long and clarify it a little"
                    },
                    {
                        "username": "MasonEG",
                        "content": "title; this problem can lead to different coding styles"
                    }
                ]
            },
            {
                "id": 1802162,
                "content": [
                    {
                        "username": "leetyo32",
                        "content": "> Both list1 and list2 are sorted in non-decreasing order.\\n\\nYou mean ascending?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "There are duplicates, which are not ascending."
                    },
                    {
                        "username": "roumor",
                        "content": "this one is annoying. just calling list1[i] or list1.val causes your js script to exit with error."
                    },
                    {
                        "username": "trumankckwong",
                        "content": "I\\'m using JavaScript, why does console.log(list1.val) throw an error TypeError: Cannot read properties of null (reading \\'val\\')"
                    },
                    {
                        "username": "randomfun",
                        "content": "Can someone explain this error?\nAttributeError: 'NoneType' object has no attribute 'next'\n    list1 = list1.next\nLine 8 in mergeTwoLists (Solution.py)\n    ret = Solution().mergeTwoLists(param_1, param_2)\nLine 55 in _driver (Solution.py)\n    _driver()\nLine 66 in <module> (Solution.py)\n\nAnd why if statemant solve this error?"
                    },
                    {
                        "username": "greenchalk",
                        "content": "Same"
                    },
                    {
                        "username": "2old4this",
                        "content": "I am a bit lost here...\nI am using Javascript and the description says that list1 and list2 are nodes at the head of a list. When I print them out they are printed as arrays, but don't have any of the functionality of an array. Ok That's fine, however, when I try to access the nodes using .val and .next I get a TypeError: cannot read properties of null.\n\nDO I need to recreate the list as a node list or is this a glitch? because I can still print the value of list1.val and it gives me the first node value. Any insight on this would be appreciated. "
                    },
                    {
                        "username": "Ruildo",
                        "content": "that type error is just a bug, as u noted it still returns a value so .val and .next still works."
                    },
                    {
                        "username": "dwrz",
                        "content": "\"Both list1 and list2 are sorted in non-decreasing order.\"\\n\\nPlease just say \"increasing\" instead of \"non-decreasing\" order. "
                    },
                    {
                        "username": "user5267Xl",
                        "content": "In an increasing list, each value is strictly greater than the previous value. In a non-decreasing list, each value is equal to or greater than the previous node. It\\'s a subtle but important difference. [1,1,1] is a non-decreasing list, but not an increasing list. It\\'s rather like saying \"non-negative\" instead of \"positive\" when you want to include 0."
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "Actually these things are actually different. Increasing means (in this case) that for each next node that the value grows, at least by 1 in the case of integers. Non-decreasing means that the next node could have the same value as the previous node. So, 1->2->4 is an increasing list, and 1->1->2->4 is a non-decreasing list, since we never decrease the value from any previous nodes, but we can also have the same number as before. Non-decreasing is a fancy way of saying \"increasing or staying the same\". So they are different terms, sorry to burst your bubble, but I have also had this same thought before but it can be very important in certain problems."
                    },
                    {
                        "username": "int-h",
                        "content": "Hi, I\\'m having difficulty with how to start with the problem on python, in particular with how to handle the test-cases coming into the function. For example I thought list1 was the header of the first list so printing list.val should print 1, which it does but it throws the below error\\nCan somoene help me with just getting started please? Thanks. \\n\\n```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        print(list1.val)\\n\\n```\\n\\n\\n```\\nAttributeError: \\'NoneType\\' object has no attribute \\'next\\'\\n    print(list1.next.val)\\nLine 10 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 35 in _driver (Solution.py)\\n    _driver()\\nLine 46 in <module> (Solution.py)\\n```"
                    },
                    {
                        "username": "int-h",
                        "content": "[@msauer22](/msauer22) Thanks for this. definitely getting a better understanding now \\nAm able to iterate through the linked lists like this now:\\n```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        while list1 and list2:\\n            print(list1.val)\\n            print(list2.val)\\n            list1 = list1.next\\n            list2 = list2.next\\n            \\n```"
                    },
                    {
                        "username": "msauer22",
                        "content": "The problem states that the number of nodes is in range [0, 50]. Therefore list1.next and even list1 can be Null.\nSo list1.next.val (your error) might not be defined, depending on test case\n\nHint: You can first check if list1 (list2) is actually Null or not defined. If thats true, then just return list2 (list1) because that will be the equivalent to the merged and sorted list."
                    },
                    {
                        "username": "denkochev",
                        "content": "Can you recommend me some materials related to this topic please? "
                    },
                    {
                        "username": "sommcoder",
                        "content": "I do not understand the JavaScript solutions that include new ListNode() such as the one below. What is this syntax? I get that curr.next is being assigned in the first IF block however I don\\'t see where this solution is declaring l1.val or l2.val, they are first mentioned in an expression which I would have thought would evaluate to \\'undefined\\'.\\n\\nI see NodeList in the JS MDN docs but not ListNode which leads me to believe this might be a Class or something? Could someone help explain to me how this code even works? Are there inherent properties within this ListNode object? Is there some documentation on this?\\n\\n` let curr = new ListNode();\\n  const dummy = curr;\\n  console.log(curr);\\n  // while l1 and l2 have value perform the following:\\n  while (l1 && l2) {\\n    // if l1 is less than l2\\n    if (l1.val < l2.val) {\\n      curr.next = l1;\\n      l1 = l1.next;\\n    } else {\\n      curr.next = l2;\\n      l2 = l2.next;\\n    }\\n    curr = curr.next;\\n  }\\n  //\\n  if (l1) curr.next = l1;\\n  if (l2) curr.next = l2;\\n  return dummy.next;\\n};`\\n\\n"
                    },
                    {
                        "username": "mazenadel19",
                        "content": "I found some explanation for list node here https://erikmartinjordan.com/listNode-javascript\nhowever I think something might be wrong with this problem for javascript, I can't return list1.val, I can't return Object.keys(list1), or list1[0] ... All of them give me an error. By this point I don't know what kind of data is this ListNode, I hope someone would come a long and clarify it a little"
                    },
                    {
                        "username": "MasonEG",
                        "content": "title; this problem can lead to different coding styles"
                    }
                ]
            },
            {
                "id": 1780644,
                "content": [
                    {
                        "username": "leetyo32",
                        "content": "> Both list1 and list2 are sorted in non-decreasing order.\\n\\nYou mean ascending?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "There are duplicates, which are not ascending."
                    },
                    {
                        "username": "roumor",
                        "content": "this one is annoying. just calling list1[i] or list1.val causes your js script to exit with error."
                    },
                    {
                        "username": "trumankckwong",
                        "content": "I\\'m using JavaScript, why does console.log(list1.val) throw an error TypeError: Cannot read properties of null (reading \\'val\\')"
                    },
                    {
                        "username": "randomfun",
                        "content": "Can someone explain this error?\nAttributeError: 'NoneType' object has no attribute 'next'\n    list1 = list1.next\nLine 8 in mergeTwoLists (Solution.py)\n    ret = Solution().mergeTwoLists(param_1, param_2)\nLine 55 in _driver (Solution.py)\n    _driver()\nLine 66 in <module> (Solution.py)\n\nAnd why if statemant solve this error?"
                    },
                    {
                        "username": "greenchalk",
                        "content": "Same"
                    },
                    {
                        "username": "2old4this",
                        "content": "I am a bit lost here...\nI am using Javascript and the description says that list1 and list2 are nodes at the head of a list. When I print them out they are printed as arrays, but don't have any of the functionality of an array. Ok That's fine, however, when I try to access the nodes using .val and .next I get a TypeError: cannot read properties of null.\n\nDO I need to recreate the list as a node list or is this a glitch? because I can still print the value of list1.val and it gives me the first node value. Any insight on this would be appreciated. "
                    },
                    {
                        "username": "Ruildo",
                        "content": "that type error is just a bug, as u noted it still returns a value so .val and .next still works."
                    },
                    {
                        "username": "dwrz",
                        "content": "\"Both list1 and list2 are sorted in non-decreasing order.\"\\n\\nPlease just say \"increasing\" instead of \"non-decreasing\" order. "
                    },
                    {
                        "username": "user5267Xl",
                        "content": "In an increasing list, each value is strictly greater than the previous value. In a non-decreasing list, each value is equal to or greater than the previous node. It\\'s a subtle but important difference. [1,1,1] is a non-decreasing list, but not an increasing list. It\\'s rather like saying \"non-negative\" instead of \"positive\" when you want to include 0."
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "Actually these things are actually different. Increasing means (in this case) that for each next node that the value grows, at least by 1 in the case of integers. Non-decreasing means that the next node could have the same value as the previous node. So, 1->2->4 is an increasing list, and 1->1->2->4 is a non-decreasing list, since we never decrease the value from any previous nodes, but we can also have the same number as before. Non-decreasing is a fancy way of saying \"increasing or staying the same\". So they are different terms, sorry to burst your bubble, but I have also had this same thought before but it can be very important in certain problems."
                    },
                    {
                        "username": "int-h",
                        "content": "Hi, I\\'m having difficulty with how to start with the problem on python, in particular with how to handle the test-cases coming into the function. For example I thought list1 was the header of the first list so printing list.val should print 1, which it does but it throws the below error\\nCan somoene help me with just getting started please? Thanks. \\n\\n```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        print(list1.val)\\n\\n```\\n\\n\\n```\\nAttributeError: \\'NoneType\\' object has no attribute \\'next\\'\\n    print(list1.next.val)\\nLine 10 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 35 in _driver (Solution.py)\\n    _driver()\\nLine 46 in <module> (Solution.py)\\n```"
                    },
                    {
                        "username": "int-h",
                        "content": "[@msauer22](/msauer22) Thanks for this. definitely getting a better understanding now \\nAm able to iterate through the linked lists like this now:\\n```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        while list1 and list2:\\n            print(list1.val)\\n            print(list2.val)\\n            list1 = list1.next\\n            list2 = list2.next\\n            \\n```"
                    },
                    {
                        "username": "msauer22",
                        "content": "The problem states that the number of nodes is in range [0, 50]. Therefore list1.next and even list1 can be Null.\nSo list1.next.val (your error) might not be defined, depending on test case\n\nHint: You can first check if list1 (list2) is actually Null or not defined. If thats true, then just return list2 (list1) because that will be the equivalent to the merged and sorted list."
                    },
                    {
                        "username": "denkochev",
                        "content": "Can you recommend me some materials related to this topic please? "
                    },
                    {
                        "username": "sommcoder",
                        "content": "I do not understand the JavaScript solutions that include new ListNode() such as the one below. What is this syntax? I get that curr.next is being assigned in the first IF block however I don\\'t see where this solution is declaring l1.val or l2.val, they are first mentioned in an expression which I would have thought would evaluate to \\'undefined\\'.\\n\\nI see NodeList in the JS MDN docs but not ListNode which leads me to believe this might be a Class or something? Could someone help explain to me how this code even works? Are there inherent properties within this ListNode object? Is there some documentation on this?\\n\\n` let curr = new ListNode();\\n  const dummy = curr;\\n  console.log(curr);\\n  // while l1 and l2 have value perform the following:\\n  while (l1 && l2) {\\n    // if l1 is less than l2\\n    if (l1.val < l2.val) {\\n      curr.next = l1;\\n      l1 = l1.next;\\n    } else {\\n      curr.next = l2;\\n      l2 = l2.next;\\n    }\\n    curr = curr.next;\\n  }\\n  //\\n  if (l1) curr.next = l1;\\n  if (l2) curr.next = l2;\\n  return dummy.next;\\n};`\\n\\n"
                    },
                    {
                        "username": "mazenadel19",
                        "content": "I found some explanation for list node here https://erikmartinjordan.com/listNode-javascript\nhowever I think something might be wrong with this problem for javascript, I can't return list1.val, I can't return Object.keys(list1), or list1[0] ... All of them give me an error. By this point I don't know what kind of data is this ListNode, I hope someone would come a long and clarify it a little"
                    },
                    {
                        "username": "MasonEG",
                        "content": "title; this problem can lead to different coding styles"
                    }
                ]
            },
            {
                "id": 1732949,
                "content": [
                    {
                        "username": "leetyo32",
                        "content": "> Both list1 and list2 are sorted in non-decreasing order.\\n\\nYou mean ascending?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "There are duplicates, which are not ascending."
                    },
                    {
                        "username": "roumor",
                        "content": "this one is annoying. just calling list1[i] or list1.val causes your js script to exit with error."
                    },
                    {
                        "username": "trumankckwong",
                        "content": "I\\'m using JavaScript, why does console.log(list1.val) throw an error TypeError: Cannot read properties of null (reading \\'val\\')"
                    },
                    {
                        "username": "randomfun",
                        "content": "Can someone explain this error?\nAttributeError: 'NoneType' object has no attribute 'next'\n    list1 = list1.next\nLine 8 in mergeTwoLists (Solution.py)\n    ret = Solution().mergeTwoLists(param_1, param_2)\nLine 55 in _driver (Solution.py)\n    _driver()\nLine 66 in <module> (Solution.py)\n\nAnd why if statemant solve this error?"
                    },
                    {
                        "username": "greenchalk",
                        "content": "Same"
                    },
                    {
                        "username": "2old4this",
                        "content": "I am a bit lost here...\nI am using Javascript and the description says that list1 and list2 are nodes at the head of a list. When I print them out they are printed as arrays, but don't have any of the functionality of an array. Ok That's fine, however, when I try to access the nodes using .val and .next I get a TypeError: cannot read properties of null.\n\nDO I need to recreate the list as a node list or is this a glitch? because I can still print the value of list1.val and it gives me the first node value. Any insight on this would be appreciated. "
                    },
                    {
                        "username": "Ruildo",
                        "content": "that type error is just a bug, as u noted it still returns a value so .val and .next still works."
                    },
                    {
                        "username": "dwrz",
                        "content": "\"Both list1 and list2 are sorted in non-decreasing order.\"\\n\\nPlease just say \"increasing\" instead of \"non-decreasing\" order. "
                    },
                    {
                        "username": "user5267Xl",
                        "content": "In an increasing list, each value is strictly greater than the previous value. In a non-decreasing list, each value is equal to or greater than the previous node. It\\'s a subtle but important difference. [1,1,1] is a non-decreasing list, but not an increasing list. It\\'s rather like saying \"non-negative\" instead of \"positive\" when you want to include 0."
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "Actually these things are actually different. Increasing means (in this case) that for each next node that the value grows, at least by 1 in the case of integers. Non-decreasing means that the next node could have the same value as the previous node. So, 1->2->4 is an increasing list, and 1->1->2->4 is a non-decreasing list, since we never decrease the value from any previous nodes, but we can also have the same number as before. Non-decreasing is a fancy way of saying \"increasing or staying the same\". So they are different terms, sorry to burst your bubble, but I have also had this same thought before but it can be very important in certain problems."
                    },
                    {
                        "username": "int-h",
                        "content": "Hi, I\\'m having difficulty with how to start with the problem on python, in particular with how to handle the test-cases coming into the function. For example I thought list1 was the header of the first list so printing list.val should print 1, which it does but it throws the below error\\nCan somoene help me with just getting started please? Thanks. \\n\\n```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        print(list1.val)\\n\\n```\\n\\n\\n```\\nAttributeError: \\'NoneType\\' object has no attribute \\'next\\'\\n    print(list1.next.val)\\nLine 10 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 35 in _driver (Solution.py)\\n    _driver()\\nLine 46 in <module> (Solution.py)\\n```"
                    },
                    {
                        "username": "int-h",
                        "content": "[@msauer22](/msauer22) Thanks for this. definitely getting a better understanding now \\nAm able to iterate through the linked lists like this now:\\n```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        while list1 and list2:\\n            print(list1.val)\\n            print(list2.val)\\n            list1 = list1.next\\n            list2 = list2.next\\n            \\n```"
                    },
                    {
                        "username": "msauer22",
                        "content": "The problem states that the number of nodes is in range [0, 50]. Therefore list1.next and even list1 can be Null.\nSo list1.next.val (your error) might not be defined, depending on test case\n\nHint: You can first check if list1 (list2) is actually Null or not defined. If thats true, then just return list2 (list1) because that will be the equivalent to the merged and sorted list."
                    },
                    {
                        "username": "denkochev",
                        "content": "Can you recommend me some materials related to this topic please? "
                    },
                    {
                        "username": "sommcoder",
                        "content": "I do not understand the JavaScript solutions that include new ListNode() such as the one below. What is this syntax? I get that curr.next is being assigned in the first IF block however I don\\'t see where this solution is declaring l1.val or l2.val, they are first mentioned in an expression which I would have thought would evaluate to \\'undefined\\'.\\n\\nI see NodeList in the JS MDN docs but not ListNode which leads me to believe this might be a Class or something? Could someone help explain to me how this code even works? Are there inherent properties within this ListNode object? Is there some documentation on this?\\n\\n` let curr = new ListNode();\\n  const dummy = curr;\\n  console.log(curr);\\n  // while l1 and l2 have value perform the following:\\n  while (l1 && l2) {\\n    // if l1 is less than l2\\n    if (l1.val < l2.val) {\\n      curr.next = l1;\\n      l1 = l1.next;\\n    } else {\\n      curr.next = l2;\\n      l2 = l2.next;\\n    }\\n    curr = curr.next;\\n  }\\n  //\\n  if (l1) curr.next = l1;\\n  if (l2) curr.next = l2;\\n  return dummy.next;\\n};`\\n\\n"
                    },
                    {
                        "username": "mazenadel19",
                        "content": "I found some explanation for list node here https://erikmartinjordan.com/listNode-javascript\nhowever I think something might be wrong with this problem for javascript, I can't return list1.val, I can't return Object.keys(list1), or list1[0] ... All of them give me an error. By this point I don't know what kind of data is this ListNode, I hope someone would come a long and clarify it a little"
                    },
                    {
                        "username": "MasonEG",
                        "content": "title; this problem can lead to different coding styles"
                    }
                ]
            },
            {
                "id": 1701392,
                "content": [
                    {
                        "username": "leetyo32",
                        "content": "> Both list1 and list2 are sorted in non-decreasing order.\\n\\nYou mean ascending?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "There are duplicates, which are not ascending."
                    },
                    {
                        "username": "roumor",
                        "content": "this one is annoying. just calling list1[i] or list1.val causes your js script to exit with error."
                    },
                    {
                        "username": "trumankckwong",
                        "content": "I\\'m using JavaScript, why does console.log(list1.val) throw an error TypeError: Cannot read properties of null (reading \\'val\\')"
                    },
                    {
                        "username": "randomfun",
                        "content": "Can someone explain this error?\nAttributeError: 'NoneType' object has no attribute 'next'\n    list1 = list1.next\nLine 8 in mergeTwoLists (Solution.py)\n    ret = Solution().mergeTwoLists(param_1, param_2)\nLine 55 in _driver (Solution.py)\n    _driver()\nLine 66 in <module> (Solution.py)\n\nAnd why if statemant solve this error?"
                    },
                    {
                        "username": "greenchalk",
                        "content": "Same"
                    },
                    {
                        "username": "2old4this",
                        "content": "I am a bit lost here...\nI am using Javascript and the description says that list1 and list2 are nodes at the head of a list. When I print them out they are printed as arrays, but don't have any of the functionality of an array. Ok That's fine, however, when I try to access the nodes using .val and .next I get a TypeError: cannot read properties of null.\n\nDO I need to recreate the list as a node list or is this a glitch? because I can still print the value of list1.val and it gives me the first node value. Any insight on this would be appreciated. "
                    },
                    {
                        "username": "Ruildo",
                        "content": "that type error is just a bug, as u noted it still returns a value so .val and .next still works."
                    },
                    {
                        "username": "dwrz",
                        "content": "\"Both list1 and list2 are sorted in non-decreasing order.\"\\n\\nPlease just say \"increasing\" instead of \"non-decreasing\" order. "
                    },
                    {
                        "username": "user5267Xl",
                        "content": "In an increasing list, each value is strictly greater than the previous value. In a non-decreasing list, each value is equal to or greater than the previous node. It\\'s a subtle but important difference. [1,1,1] is a non-decreasing list, but not an increasing list. It\\'s rather like saying \"non-negative\" instead of \"positive\" when you want to include 0."
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "Actually these things are actually different. Increasing means (in this case) that for each next node that the value grows, at least by 1 in the case of integers. Non-decreasing means that the next node could have the same value as the previous node. So, 1->2->4 is an increasing list, and 1->1->2->4 is a non-decreasing list, since we never decrease the value from any previous nodes, but we can also have the same number as before. Non-decreasing is a fancy way of saying \"increasing or staying the same\". So they are different terms, sorry to burst your bubble, but I have also had this same thought before but it can be very important in certain problems."
                    },
                    {
                        "username": "int-h",
                        "content": "Hi, I\\'m having difficulty with how to start with the problem on python, in particular with how to handle the test-cases coming into the function. For example I thought list1 was the header of the first list so printing list.val should print 1, which it does but it throws the below error\\nCan somoene help me with just getting started please? Thanks. \\n\\n```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        print(list1.val)\\n\\n```\\n\\n\\n```\\nAttributeError: \\'NoneType\\' object has no attribute \\'next\\'\\n    print(list1.next.val)\\nLine 10 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 35 in _driver (Solution.py)\\n    _driver()\\nLine 46 in <module> (Solution.py)\\n```"
                    },
                    {
                        "username": "int-h",
                        "content": "[@msauer22](/msauer22) Thanks for this. definitely getting a better understanding now \\nAm able to iterate through the linked lists like this now:\\n```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        while list1 and list2:\\n            print(list1.val)\\n            print(list2.val)\\n            list1 = list1.next\\n            list2 = list2.next\\n            \\n```"
                    },
                    {
                        "username": "msauer22",
                        "content": "The problem states that the number of nodes is in range [0, 50]. Therefore list1.next and even list1 can be Null.\nSo list1.next.val (your error) might not be defined, depending on test case\n\nHint: You can first check if list1 (list2) is actually Null or not defined. If thats true, then just return list2 (list1) because that will be the equivalent to the merged and sorted list."
                    },
                    {
                        "username": "denkochev",
                        "content": "Can you recommend me some materials related to this topic please? "
                    },
                    {
                        "username": "sommcoder",
                        "content": "I do not understand the JavaScript solutions that include new ListNode() such as the one below. What is this syntax? I get that curr.next is being assigned in the first IF block however I don\\'t see where this solution is declaring l1.val or l2.val, they are first mentioned in an expression which I would have thought would evaluate to \\'undefined\\'.\\n\\nI see NodeList in the JS MDN docs but not ListNode which leads me to believe this might be a Class or something? Could someone help explain to me how this code even works? Are there inherent properties within this ListNode object? Is there some documentation on this?\\n\\n` let curr = new ListNode();\\n  const dummy = curr;\\n  console.log(curr);\\n  // while l1 and l2 have value perform the following:\\n  while (l1 && l2) {\\n    // if l1 is less than l2\\n    if (l1.val < l2.val) {\\n      curr.next = l1;\\n      l1 = l1.next;\\n    } else {\\n      curr.next = l2;\\n      l2 = l2.next;\\n    }\\n    curr = curr.next;\\n  }\\n  //\\n  if (l1) curr.next = l1;\\n  if (l2) curr.next = l2;\\n  return dummy.next;\\n};`\\n\\n"
                    },
                    {
                        "username": "mazenadel19",
                        "content": "I found some explanation for list node here https://erikmartinjordan.com/listNode-javascript\nhowever I think something might be wrong with this problem for javascript, I can't return list1.val, I can't return Object.keys(list1), or list1[0] ... All of them give me an error. By this point I don't know what kind of data is this ListNode, I hope someone would come a long and clarify it a little"
                    },
                    {
                        "username": "MasonEG",
                        "content": "title; this problem can lead to different coding styles"
                    }
                ]
            },
            {
                "id": 1689781,
                "content": [
                    {
                        "username": "leetyo32",
                        "content": "> Both list1 and list2 are sorted in non-decreasing order.\\n\\nYou mean ascending?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "There are duplicates, which are not ascending."
                    },
                    {
                        "username": "roumor",
                        "content": "this one is annoying. just calling list1[i] or list1.val causes your js script to exit with error."
                    },
                    {
                        "username": "trumankckwong",
                        "content": "I\\'m using JavaScript, why does console.log(list1.val) throw an error TypeError: Cannot read properties of null (reading \\'val\\')"
                    },
                    {
                        "username": "randomfun",
                        "content": "Can someone explain this error?\nAttributeError: 'NoneType' object has no attribute 'next'\n    list1 = list1.next\nLine 8 in mergeTwoLists (Solution.py)\n    ret = Solution().mergeTwoLists(param_1, param_2)\nLine 55 in _driver (Solution.py)\n    _driver()\nLine 66 in <module> (Solution.py)\n\nAnd why if statemant solve this error?"
                    },
                    {
                        "username": "greenchalk",
                        "content": "Same"
                    },
                    {
                        "username": "2old4this",
                        "content": "I am a bit lost here...\nI am using Javascript and the description says that list1 and list2 are nodes at the head of a list. When I print them out they are printed as arrays, but don't have any of the functionality of an array. Ok That's fine, however, when I try to access the nodes using .val and .next I get a TypeError: cannot read properties of null.\n\nDO I need to recreate the list as a node list or is this a glitch? because I can still print the value of list1.val and it gives me the first node value. Any insight on this would be appreciated. "
                    },
                    {
                        "username": "Ruildo",
                        "content": "that type error is just a bug, as u noted it still returns a value so .val and .next still works."
                    },
                    {
                        "username": "dwrz",
                        "content": "\"Both list1 and list2 are sorted in non-decreasing order.\"\\n\\nPlease just say \"increasing\" instead of \"non-decreasing\" order. "
                    },
                    {
                        "username": "user5267Xl",
                        "content": "In an increasing list, each value is strictly greater than the previous value. In a non-decreasing list, each value is equal to or greater than the previous node. It\\'s a subtle but important difference. [1,1,1] is a non-decreasing list, but not an increasing list. It\\'s rather like saying \"non-negative\" instead of \"positive\" when you want to include 0."
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "Actually these things are actually different. Increasing means (in this case) that for each next node that the value grows, at least by 1 in the case of integers. Non-decreasing means that the next node could have the same value as the previous node. So, 1->2->4 is an increasing list, and 1->1->2->4 is a non-decreasing list, since we never decrease the value from any previous nodes, but we can also have the same number as before. Non-decreasing is a fancy way of saying \"increasing or staying the same\". So they are different terms, sorry to burst your bubble, but I have also had this same thought before but it can be very important in certain problems."
                    },
                    {
                        "username": "int-h",
                        "content": "Hi, I\\'m having difficulty with how to start with the problem on python, in particular with how to handle the test-cases coming into the function. For example I thought list1 was the header of the first list so printing list.val should print 1, which it does but it throws the below error\\nCan somoene help me with just getting started please? Thanks. \\n\\n```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        print(list1.val)\\n\\n```\\n\\n\\n```\\nAttributeError: \\'NoneType\\' object has no attribute \\'next\\'\\n    print(list1.next.val)\\nLine 10 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 35 in _driver (Solution.py)\\n    _driver()\\nLine 46 in <module> (Solution.py)\\n```"
                    },
                    {
                        "username": "int-h",
                        "content": "[@msauer22](/msauer22) Thanks for this. definitely getting a better understanding now \\nAm able to iterate through the linked lists like this now:\\n```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        while list1 and list2:\\n            print(list1.val)\\n            print(list2.val)\\n            list1 = list1.next\\n            list2 = list2.next\\n            \\n```"
                    },
                    {
                        "username": "msauer22",
                        "content": "The problem states that the number of nodes is in range [0, 50]. Therefore list1.next and even list1 can be Null.\nSo list1.next.val (your error) might not be defined, depending on test case\n\nHint: You can first check if list1 (list2) is actually Null or not defined. If thats true, then just return list2 (list1) because that will be the equivalent to the merged and sorted list."
                    },
                    {
                        "username": "denkochev",
                        "content": "Can you recommend me some materials related to this topic please? "
                    },
                    {
                        "username": "sommcoder",
                        "content": "I do not understand the JavaScript solutions that include new ListNode() such as the one below. What is this syntax? I get that curr.next is being assigned in the first IF block however I don\\'t see where this solution is declaring l1.val or l2.val, they are first mentioned in an expression which I would have thought would evaluate to \\'undefined\\'.\\n\\nI see NodeList in the JS MDN docs but not ListNode which leads me to believe this might be a Class or something? Could someone help explain to me how this code even works? Are there inherent properties within this ListNode object? Is there some documentation on this?\\n\\n` let curr = new ListNode();\\n  const dummy = curr;\\n  console.log(curr);\\n  // while l1 and l2 have value perform the following:\\n  while (l1 && l2) {\\n    // if l1 is less than l2\\n    if (l1.val < l2.val) {\\n      curr.next = l1;\\n      l1 = l1.next;\\n    } else {\\n      curr.next = l2;\\n      l2 = l2.next;\\n    }\\n    curr = curr.next;\\n  }\\n  //\\n  if (l1) curr.next = l1;\\n  if (l2) curr.next = l2;\\n  return dummy.next;\\n};`\\n\\n"
                    },
                    {
                        "username": "mazenadel19",
                        "content": "I found some explanation for list node here https://erikmartinjordan.com/listNode-javascript\nhowever I think something might be wrong with this problem for javascript, I can't return list1.val, I can't return Object.keys(list1), or list1[0] ... All of them give me an error. By this point I don't know what kind of data is this ListNode, I hope someone would come a long and clarify it a little"
                    },
                    {
                        "username": "MasonEG",
                        "content": "title; this problem can lead to different coding styles"
                    }
                ]
            },
            {
                "id": 1632204,
                "content": [
                    {
                        "username": "leetyo32",
                        "content": "> Both list1 and list2 are sorted in non-decreasing order.\\n\\nYou mean ascending?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "There are duplicates, which are not ascending."
                    },
                    {
                        "username": "roumor",
                        "content": "this one is annoying. just calling list1[i] or list1.val causes your js script to exit with error."
                    },
                    {
                        "username": "trumankckwong",
                        "content": "I\\'m using JavaScript, why does console.log(list1.val) throw an error TypeError: Cannot read properties of null (reading \\'val\\')"
                    },
                    {
                        "username": "randomfun",
                        "content": "Can someone explain this error?\nAttributeError: 'NoneType' object has no attribute 'next'\n    list1 = list1.next\nLine 8 in mergeTwoLists (Solution.py)\n    ret = Solution().mergeTwoLists(param_1, param_2)\nLine 55 in _driver (Solution.py)\n    _driver()\nLine 66 in <module> (Solution.py)\n\nAnd why if statemant solve this error?"
                    },
                    {
                        "username": "greenchalk",
                        "content": "Same"
                    },
                    {
                        "username": "2old4this",
                        "content": "I am a bit lost here...\nI am using Javascript and the description says that list1 and list2 are nodes at the head of a list. When I print them out they are printed as arrays, but don't have any of the functionality of an array. Ok That's fine, however, when I try to access the nodes using .val and .next I get a TypeError: cannot read properties of null.\n\nDO I need to recreate the list as a node list or is this a glitch? because I can still print the value of list1.val and it gives me the first node value. Any insight on this would be appreciated. "
                    },
                    {
                        "username": "Ruildo",
                        "content": "that type error is just a bug, as u noted it still returns a value so .val and .next still works."
                    },
                    {
                        "username": "dwrz",
                        "content": "\"Both list1 and list2 are sorted in non-decreasing order.\"\\n\\nPlease just say \"increasing\" instead of \"non-decreasing\" order. "
                    },
                    {
                        "username": "user5267Xl",
                        "content": "In an increasing list, each value is strictly greater than the previous value. In a non-decreasing list, each value is equal to or greater than the previous node. It\\'s a subtle but important difference. [1,1,1] is a non-decreasing list, but not an increasing list. It\\'s rather like saying \"non-negative\" instead of \"positive\" when you want to include 0."
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "Actually these things are actually different. Increasing means (in this case) that for each next node that the value grows, at least by 1 in the case of integers. Non-decreasing means that the next node could have the same value as the previous node. So, 1->2->4 is an increasing list, and 1->1->2->4 is a non-decreasing list, since we never decrease the value from any previous nodes, but we can also have the same number as before. Non-decreasing is a fancy way of saying \"increasing or staying the same\". So they are different terms, sorry to burst your bubble, but I have also had this same thought before but it can be very important in certain problems."
                    },
                    {
                        "username": "int-h",
                        "content": "Hi, I\\'m having difficulty with how to start with the problem on python, in particular with how to handle the test-cases coming into the function. For example I thought list1 was the header of the first list so printing list.val should print 1, which it does but it throws the below error\\nCan somoene help me with just getting started please? Thanks. \\n\\n```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        print(list1.val)\\n\\n```\\n\\n\\n```\\nAttributeError: \\'NoneType\\' object has no attribute \\'next\\'\\n    print(list1.next.val)\\nLine 10 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 35 in _driver (Solution.py)\\n    _driver()\\nLine 46 in <module> (Solution.py)\\n```"
                    },
                    {
                        "username": "int-h",
                        "content": "[@msauer22](/msauer22) Thanks for this. definitely getting a better understanding now \\nAm able to iterate through the linked lists like this now:\\n```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        while list1 and list2:\\n            print(list1.val)\\n            print(list2.val)\\n            list1 = list1.next\\n            list2 = list2.next\\n            \\n```"
                    },
                    {
                        "username": "msauer22",
                        "content": "The problem states that the number of nodes is in range [0, 50]. Therefore list1.next and even list1 can be Null.\nSo list1.next.val (your error) might not be defined, depending on test case\n\nHint: You can first check if list1 (list2) is actually Null or not defined. If thats true, then just return list2 (list1) because that will be the equivalent to the merged and sorted list."
                    },
                    {
                        "username": "denkochev",
                        "content": "Can you recommend me some materials related to this topic please? "
                    },
                    {
                        "username": "sommcoder",
                        "content": "I do not understand the JavaScript solutions that include new ListNode() such as the one below. What is this syntax? I get that curr.next is being assigned in the first IF block however I don\\'t see where this solution is declaring l1.val or l2.val, they are first mentioned in an expression which I would have thought would evaluate to \\'undefined\\'.\\n\\nI see NodeList in the JS MDN docs but not ListNode which leads me to believe this might be a Class or something? Could someone help explain to me how this code even works? Are there inherent properties within this ListNode object? Is there some documentation on this?\\n\\n` let curr = new ListNode();\\n  const dummy = curr;\\n  console.log(curr);\\n  // while l1 and l2 have value perform the following:\\n  while (l1 && l2) {\\n    // if l1 is less than l2\\n    if (l1.val < l2.val) {\\n      curr.next = l1;\\n      l1 = l1.next;\\n    } else {\\n      curr.next = l2;\\n      l2 = l2.next;\\n    }\\n    curr = curr.next;\\n  }\\n  //\\n  if (l1) curr.next = l1;\\n  if (l2) curr.next = l2;\\n  return dummy.next;\\n};`\\n\\n"
                    },
                    {
                        "username": "mazenadel19",
                        "content": "I found some explanation for list node here https://erikmartinjordan.com/listNode-javascript\nhowever I think something might be wrong with this problem for javascript, I can't return list1.val, I can't return Object.keys(list1), or list1[0] ... All of them give me an error. By this point I don't know what kind of data is this ListNode, I hope someone would come a long and clarify it a little"
                    },
                    {
                        "username": "MasonEG",
                        "content": "title; this problem can lead to different coding styles"
                    }
                ]
            },
            {
                "id": 1572895,
                "content": [
                    {
                        "username": "leetyo32",
                        "content": "> Both list1 and list2 are sorted in non-decreasing order.\\n\\nYou mean ascending?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "There are duplicates, which are not ascending."
                    },
                    {
                        "username": "roumor",
                        "content": "this one is annoying. just calling list1[i] or list1.val causes your js script to exit with error."
                    },
                    {
                        "username": "trumankckwong",
                        "content": "I\\'m using JavaScript, why does console.log(list1.val) throw an error TypeError: Cannot read properties of null (reading \\'val\\')"
                    },
                    {
                        "username": "randomfun",
                        "content": "Can someone explain this error?\nAttributeError: 'NoneType' object has no attribute 'next'\n    list1 = list1.next\nLine 8 in mergeTwoLists (Solution.py)\n    ret = Solution().mergeTwoLists(param_1, param_2)\nLine 55 in _driver (Solution.py)\n    _driver()\nLine 66 in <module> (Solution.py)\n\nAnd why if statemant solve this error?"
                    },
                    {
                        "username": "greenchalk",
                        "content": "Same"
                    },
                    {
                        "username": "2old4this",
                        "content": "I am a bit lost here...\nI am using Javascript and the description says that list1 and list2 are nodes at the head of a list. When I print them out they are printed as arrays, but don't have any of the functionality of an array. Ok That's fine, however, when I try to access the nodes using .val and .next I get a TypeError: cannot read properties of null.\n\nDO I need to recreate the list as a node list or is this a glitch? because I can still print the value of list1.val and it gives me the first node value. Any insight on this would be appreciated. "
                    },
                    {
                        "username": "Ruildo",
                        "content": "that type error is just a bug, as u noted it still returns a value so .val and .next still works."
                    },
                    {
                        "username": "dwrz",
                        "content": "\"Both list1 and list2 are sorted in non-decreasing order.\"\\n\\nPlease just say \"increasing\" instead of \"non-decreasing\" order. "
                    },
                    {
                        "username": "user5267Xl",
                        "content": "In an increasing list, each value is strictly greater than the previous value. In a non-decreasing list, each value is equal to or greater than the previous node. It\\'s a subtle but important difference. [1,1,1] is a non-decreasing list, but not an increasing list. It\\'s rather like saying \"non-negative\" instead of \"positive\" when you want to include 0."
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "Actually these things are actually different. Increasing means (in this case) that for each next node that the value grows, at least by 1 in the case of integers. Non-decreasing means that the next node could have the same value as the previous node. So, 1->2->4 is an increasing list, and 1->1->2->4 is a non-decreasing list, since we never decrease the value from any previous nodes, but we can also have the same number as before. Non-decreasing is a fancy way of saying \"increasing or staying the same\". So they are different terms, sorry to burst your bubble, but I have also had this same thought before but it can be very important in certain problems."
                    },
                    {
                        "username": "int-h",
                        "content": "Hi, I\\'m having difficulty with how to start with the problem on python, in particular with how to handle the test-cases coming into the function. For example I thought list1 was the header of the first list so printing list.val should print 1, which it does but it throws the below error\\nCan somoene help me with just getting started please? Thanks. \\n\\n```\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        print(list1.val)\\n\\n```\\n\\n\\n```\\nAttributeError: \\'NoneType\\' object has no attribute \\'next\\'\\n    print(list1.next.val)\\nLine 10 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 35 in _driver (Solution.py)\\n    _driver()\\nLine 46 in <module> (Solution.py)\\n```"
                    },
                    {
                        "username": "int-h",
                        "content": "[@msauer22](/msauer22) Thanks for this. definitely getting a better understanding now \\nAm able to iterate through the linked lists like this now:\\n```\\nclass Solution:\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n        while list1 and list2:\\n            print(list1.val)\\n            print(list2.val)\\n            list1 = list1.next\\n            list2 = list2.next\\n            \\n```"
                    },
                    {
                        "username": "msauer22",
                        "content": "The problem states that the number of nodes is in range [0, 50]. Therefore list1.next and even list1 can be Null.\nSo list1.next.val (your error) might not be defined, depending on test case\n\nHint: You can first check if list1 (list2) is actually Null or not defined. If thats true, then just return list2 (list1) because that will be the equivalent to the merged and sorted list."
                    },
                    {
                        "username": "denkochev",
                        "content": "Can you recommend me some materials related to this topic please? "
                    },
                    {
                        "username": "sommcoder",
                        "content": "I do not understand the JavaScript solutions that include new ListNode() such as the one below. What is this syntax? I get that curr.next is being assigned in the first IF block however I don\\'t see where this solution is declaring l1.val or l2.val, they are first mentioned in an expression which I would have thought would evaluate to \\'undefined\\'.\\n\\nI see NodeList in the JS MDN docs but not ListNode which leads me to believe this might be a Class or something? Could someone help explain to me how this code even works? Are there inherent properties within this ListNode object? Is there some documentation on this?\\n\\n` let curr = new ListNode();\\n  const dummy = curr;\\n  console.log(curr);\\n  // while l1 and l2 have value perform the following:\\n  while (l1 && l2) {\\n    // if l1 is less than l2\\n    if (l1.val < l2.val) {\\n      curr.next = l1;\\n      l1 = l1.next;\\n    } else {\\n      curr.next = l2;\\n      l2 = l2.next;\\n    }\\n    curr = curr.next;\\n  }\\n  //\\n  if (l1) curr.next = l1;\\n  if (l2) curr.next = l2;\\n  return dummy.next;\\n};`\\n\\n"
                    },
                    {
                        "username": "mazenadel19",
                        "content": "I found some explanation for list node here https://erikmartinjordan.com/listNode-javascript\nhowever I think something might be wrong with this problem for javascript, I can't return list1.val, I can't return Object.keys(list1), or list1[0] ... All of them give me an error. By this point I don't know what kind of data is this ListNode, I hope someone would come a long and clarify it a little"
                    },
                    {
                        "username": "MasonEG",
                        "content": "title; this problem can lead to different coding styles"
                    }
                ]
            },
            {
                "id": 1571054,
                "content": [
                    {
                        "username": "pipijiang",
                        "content": "before merge these two list we need to know those two list are increasing or decreasing.\\nfor example when the input are [2,1] and [3,1] the result should be [3,2,1,1]"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The instructions say that the lists are sorted in \"non-decreasing\" order. I take that to mean ascending, but there may be more than one copy of a given value. E.g.: [1,1,2,2,3,4,5...]"
                    },
                    {
                        "username": "avoylol",
                        "content": "it seems that we should give an ascending result,such as : input [2,1] [2,1] and the output must be [1,1,2,2].\\nbut when you give [2,1][1,2] ,the standard answer requires [1,2,2,1]. Is the order of the result necessary or not?"
                    },
                    {
                        "username": "yashpatels",
                        "content": "While creating new LinkedList for storing new values. I am either adding 0 in the front or in the end. I am able to solve the problem. But seems like I am doing something wrong all the time? \\nCan anyone help?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You don\\'t need to store new values. Link the original lists together."
                    },
                    {
                        "username": "The_Aj-25",
                        "content": "Why I am getting this error ?\\n\\nLine 31: Char 19: runtime error: member access within null pointer of type \\'ListNode\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:40:19\\n\\n\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if (l1 == nullptr) return l2;\\n        if (l2 == nullptr) return l1;\\n\\n        if (l1->val < l2->val) {\\n            swap(l1, l2);\\n        }\\n        \\n        ListNode *res = l1;\\n\\n        while (l1 != nullptr && l2 != nullptr) {\\n            ListNode *temp = nullptr;\\n\\n            while (l1 != nullptr && l1->val <= l2->val) {\\n                temp = l1;\\n                l1 = l1->next;\\n            }\\n\\n            temp->next = l2;\\n            swap(l1, l2);\\n        }\\n\\n        return res;\\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "smash424",
                        "content": "i am not seeing the ListNode class where is the place it get defined?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "[@smash424](/smash424) \n\nIt is in the comment above the solution.\nThere is an int val and a next pointer in the node.\nThis is the Java code:\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n\n"
                    },
                    {
                        "username": "smash424",
                        "content": "[@Tom_Dev](/Tom_Dev)  thanks but where is it actually defined i can\\'t find it"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "In the code that checks your solution."
                    },
                    {
                        "username": "JAYASURYA_E",
                        "content": "we asign cur =dummy at beiginning only and dummy is not used through out the code but we return dummy.next idk how it printed correct answer. Can anyone explain?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The dummy makes the code more easy. You can do without it. You don't have to handle the insertion of the first node separately with the guard node."
                    },
                    {
                        "username": "tairyoku",
                        "content": "why can\\'t i use len()?\\n"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Because it is a linked list."
                    },
                    {
                        "username": "leastsquared_",
                        "content": "Why we cant just append the lists and use sorted(concated_list) ?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "That is not the task. You should learn how to handle the linked nodes."
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/"
                    }
                ]
            },
            {
                "id": 1571055,
                "content": [
                    {
                        "username": "pipijiang",
                        "content": "before merge these two list we need to know those two list are increasing or decreasing.\\nfor example when the input are [2,1] and [3,1] the result should be [3,2,1,1]"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The instructions say that the lists are sorted in \"non-decreasing\" order. I take that to mean ascending, but there may be more than one copy of a given value. E.g.: [1,1,2,2,3,4,5...]"
                    },
                    {
                        "username": "avoylol",
                        "content": "it seems that we should give an ascending result,such as : input [2,1] [2,1] and the output must be [1,1,2,2].\\nbut when you give [2,1][1,2] ,the standard answer requires [1,2,2,1]. Is the order of the result necessary or not?"
                    },
                    {
                        "username": "yashpatels",
                        "content": "While creating new LinkedList for storing new values. I am either adding 0 in the front or in the end. I am able to solve the problem. But seems like I am doing something wrong all the time? \\nCan anyone help?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You don\\'t need to store new values. Link the original lists together."
                    },
                    {
                        "username": "The_Aj-25",
                        "content": "Why I am getting this error ?\\n\\nLine 31: Char 19: runtime error: member access within null pointer of type \\'ListNode\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:40:19\\n\\n\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if (l1 == nullptr) return l2;\\n        if (l2 == nullptr) return l1;\\n\\n        if (l1->val < l2->val) {\\n            swap(l1, l2);\\n        }\\n        \\n        ListNode *res = l1;\\n\\n        while (l1 != nullptr && l2 != nullptr) {\\n            ListNode *temp = nullptr;\\n\\n            while (l1 != nullptr && l1->val <= l2->val) {\\n                temp = l1;\\n                l1 = l1->next;\\n            }\\n\\n            temp->next = l2;\\n            swap(l1, l2);\\n        }\\n\\n        return res;\\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "smash424",
                        "content": "i am not seeing the ListNode class where is the place it get defined?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "[@smash424](/smash424) \n\nIt is in the comment above the solution.\nThere is an int val and a next pointer in the node.\nThis is the Java code:\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n\n"
                    },
                    {
                        "username": "smash424",
                        "content": "[@Tom_Dev](/Tom_Dev)  thanks but where is it actually defined i can\\'t find it"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "In the code that checks your solution."
                    },
                    {
                        "username": "JAYASURYA_E",
                        "content": "we asign cur =dummy at beiginning only and dummy is not used through out the code but we return dummy.next idk how it printed correct answer. Can anyone explain?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The dummy makes the code more easy. You can do without it. You don't have to handle the insertion of the first node separately with the guard node."
                    },
                    {
                        "username": "tairyoku",
                        "content": "why can\\'t i use len()?\\n"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Because it is a linked list."
                    },
                    {
                        "username": "leastsquared_",
                        "content": "Why we cant just append the lists and use sorted(concated_list) ?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "That is not the task. You should learn how to handle the linked nodes."
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/"
                    }
                ]
            },
            {
                "id": 2076368,
                "content": [
                    {
                        "username": "pipijiang",
                        "content": "before merge these two list we need to know those two list are increasing or decreasing.\\nfor example when the input are [2,1] and [3,1] the result should be [3,2,1,1]"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The instructions say that the lists are sorted in \"non-decreasing\" order. I take that to mean ascending, but there may be more than one copy of a given value. E.g.: [1,1,2,2,3,4,5...]"
                    },
                    {
                        "username": "avoylol",
                        "content": "it seems that we should give an ascending result,such as : input [2,1] [2,1] and the output must be [1,1,2,2].\\nbut when you give [2,1][1,2] ,the standard answer requires [1,2,2,1]. Is the order of the result necessary or not?"
                    },
                    {
                        "username": "yashpatels",
                        "content": "While creating new LinkedList for storing new values. I am either adding 0 in the front or in the end. I am able to solve the problem. But seems like I am doing something wrong all the time? \\nCan anyone help?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You don\\'t need to store new values. Link the original lists together."
                    },
                    {
                        "username": "The_Aj-25",
                        "content": "Why I am getting this error ?\\n\\nLine 31: Char 19: runtime error: member access within null pointer of type \\'ListNode\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:40:19\\n\\n\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if (l1 == nullptr) return l2;\\n        if (l2 == nullptr) return l1;\\n\\n        if (l1->val < l2->val) {\\n            swap(l1, l2);\\n        }\\n        \\n        ListNode *res = l1;\\n\\n        while (l1 != nullptr && l2 != nullptr) {\\n            ListNode *temp = nullptr;\\n\\n            while (l1 != nullptr && l1->val <= l2->val) {\\n                temp = l1;\\n                l1 = l1->next;\\n            }\\n\\n            temp->next = l2;\\n            swap(l1, l2);\\n        }\\n\\n        return res;\\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "smash424",
                        "content": "i am not seeing the ListNode class where is the place it get defined?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "[@smash424](/smash424) \n\nIt is in the comment above the solution.\nThere is an int val and a next pointer in the node.\nThis is the Java code:\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n\n"
                    },
                    {
                        "username": "smash424",
                        "content": "[@Tom_Dev](/Tom_Dev)  thanks but where is it actually defined i can\\'t find it"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "In the code that checks your solution."
                    },
                    {
                        "username": "JAYASURYA_E",
                        "content": "we asign cur =dummy at beiginning only and dummy is not used through out the code but we return dummy.next idk how it printed correct answer. Can anyone explain?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The dummy makes the code more easy. You can do without it. You don't have to handle the insertion of the first node separately with the guard node."
                    },
                    {
                        "username": "tairyoku",
                        "content": "why can\\'t i use len()?\\n"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Because it is a linked list."
                    },
                    {
                        "username": "leastsquared_",
                        "content": "Why we cant just append the lists and use sorted(concated_list) ?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "That is not the task. You should learn how to handle the linked nodes."
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/"
                    }
                ]
            },
            {
                "id": 2066630,
                "content": [
                    {
                        "username": "pipijiang",
                        "content": "before merge these two list we need to know those two list are increasing or decreasing.\\nfor example when the input are [2,1] and [3,1] the result should be [3,2,1,1]"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The instructions say that the lists are sorted in \"non-decreasing\" order. I take that to mean ascending, but there may be more than one copy of a given value. E.g.: [1,1,2,2,3,4,5...]"
                    },
                    {
                        "username": "avoylol",
                        "content": "it seems that we should give an ascending result,such as : input [2,1] [2,1] and the output must be [1,1,2,2].\\nbut when you give [2,1][1,2] ,the standard answer requires [1,2,2,1]. Is the order of the result necessary or not?"
                    },
                    {
                        "username": "yashpatels",
                        "content": "While creating new LinkedList for storing new values. I am either adding 0 in the front or in the end. I am able to solve the problem. But seems like I am doing something wrong all the time? \\nCan anyone help?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You don\\'t need to store new values. Link the original lists together."
                    },
                    {
                        "username": "The_Aj-25",
                        "content": "Why I am getting this error ?\\n\\nLine 31: Char 19: runtime error: member access within null pointer of type \\'ListNode\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:40:19\\n\\n\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if (l1 == nullptr) return l2;\\n        if (l2 == nullptr) return l1;\\n\\n        if (l1->val < l2->val) {\\n            swap(l1, l2);\\n        }\\n        \\n        ListNode *res = l1;\\n\\n        while (l1 != nullptr && l2 != nullptr) {\\n            ListNode *temp = nullptr;\\n\\n            while (l1 != nullptr && l1->val <= l2->val) {\\n                temp = l1;\\n                l1 = l1->next;\\n            }\\n\\n            temp->next = l2;\\n            swap(l1, l2);\\n        }\\n\\n        return res;\\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "smash424",
                        "content": "i am not seeing the ListNode class where is the place it get defined?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "[@smash424](/smash424) \n\nIt is in the comment above the solution.\nThere is an int val and a next pointer in the node.\nThis is the Java code:\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n\n"
                    },
                    {
                        "username": "smash424",
                        "content": "[@Tom_Dev](/Tom_Dev)  thanks but where is it actually defined i can\\'t find it"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "In the code that checks your solution."
                    },
                    {
                        "username": "JAYASURYA_E",
                        "content": "we asign cur =dummy at beiginning only and dummy is not used through out the code but we return dummy.next idk how it printed correct answer. Can anyone explain?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The dummy makes the code more easy. You can do without it. You don't have to handle the insertion of the first node separately with the guard node."
                    },
                    {
                        "username": "tairyoku",
                        "content": "why can\\'t i use len()?\\n"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Because it is a linked list."
                    },
                    {
                        "username": "leastsquared_",
                        "content": "Why we cant just append the lists and use sorted(concated_list) ?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "That is not the task. You should learn how to handle the linked nodes."
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/"
                    }
                ]
            },
            {
                "id": 2065439,
                "content": [
                    {
                        "username": "pipijiang",
                        "content": "before merge these two list we need to know those two list are increasing or decreasing.\\nfor example when the input are [2,1] and [3,1] the result should be [3,2,1,1]"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The instructions say that the lists are sorted in \"non-decreasing\" order. I take that to mean ascending, but there may be more than one copy of a given value. E.g.: [1,1,2,2,3,4,5...]"
                    },
                    {
                        "username": "avoylol",
                        "content": "it seems that we should give an ascending result,such as : input [2,1] [2,1] and the output must be [1,1,2,2].\\nbut when you give [2,1][1,2] ,the standard answer requires [1,2,2,1]. Is the order of the result necessary or not?"
                    },
                    {
                        "username": "yashpatels",
                        "content": "While creating new LinkedList for storing new values. I am either adding 0 in the front or in the end. I am able to solve the problem. But seems like I am doing something wrong all the time? \\nCan anyone help?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You don\\'t need to store new values. Link the original lists together."
                    },
                    {
                        "username": "The_Aj-25",
                        "content": "Why I am getting this error ?\\n\\nLine 31: Char 19: runtime error: member access within null pointer of type \\'ListNode\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:40:19\\n\\n\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if (l1 == nullptr) return l2;\\n        if (l2 == nullptr) return l1;\\n\\n        if (l1->val < l2->val) {\\n            swap(l1, l2);\\n        }\\n        \\n        ListNode *res = l1;\\n\\n        while (l1 != nullptr && l2 != nullptr) {\\n            ListNode *temp = nullptr;\\n\\n            while (l1 != nullptr && l1->val <= l2->val) {\\n                temp = l1;\\n                l1 = l1->next;\\n            }\\n\\n            temp->next = l2;\\n            swap(l1, l2);\\n        }\\n\\n        return res;\\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "smash424",
                        "content": "i am not seeing the ListNode class where is the place it get defined?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "[@smash424](/smash424) \n\nIt is in the comment above the solution.\nThere is an int val and a next pointer in the node.\nThis is the Java code:\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n\n"
                    },
                    {
                        "username": "smash424",
                        "content": "[@Tom_Dev](/Tom_Dev)  thanks but where is it actually defined i can\\'t find it"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "In the code that checks your solution."
                    },
                    {
                        "username": "JAYASURYA_E",
                        "content": "we asign cur =dummy at beiginning only and dummy is not used through out the code but we return dummy.next idk how it printed correct answer. Can anyone explain?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The dummy makes the code more easy. You can do without it. You don't have to handle the insertion of the first node separately with the guard node."
                    },
                    {
                        "username": "tairyoku",
                        "content": "why can\\'t i use len()?\\n"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Because it is a linked list."
                    },
                    {
                        "username": "leastsquared_",
                        "content": "Why we cant just append the lists and use sorted(concated_list) ?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "That is not the task. You should learn how to handle the linked nodes."
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/"
                    }
                ]
            },
            {
                "id": 2059035,
                "content": [
                    {
                        "username": "pipijiang",
                        "content": "before merge these two list we need to know those two list are increasing or decreasing.\\nfor example when the input are [2,1] and [3,1] the result should be [3,2,1,1]"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The instructions say that the lists are sorted in \"non-decreasing\" order. I take that to mean ascending, but there may be more than one copy of a given value. E.g.: [1,1,2,2,3,4,5...]"
                    },
                    {
                        "username": "avoylol",
                        "content": "it seems that we should give an ascending result,such as : input [2,1] [2,1] and the output must be [1,1,2,2].\\nbut when you give [2,1][1,2] ,the standard answer requires [1,2,2,1]. Is the order of the result necessary or not?"
                    },
                    {
                        "username": "yashpatels",
                        "content": "While creating new LinkedList for storing new values. I am either adding 0 in the front or in the end. I am able to solve the problem. But seems like I am doing something wrong all the time? \\nCan anyone help?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You don\\'t need to store new values. Link the original lists together."
                    },
                    {
                        "username": "The_Aj-25",
                        "content": "Why I am getting this error ?\\n\\nLine 31: Char 19: runtime error: member access within null pointer of type \\'ListNode\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:40:19\\n\\n\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if (l1 == nullptr) return l2;\\n        if (l2 == nullptr) return l1;\\n\\n        if (l1->val < l2->val) {\\n            swap(l1, l2);\\n        }\\n        \\n        ListNode *res = l1;\\n\\n        while (l1 != nullptr && l2 != nullptr) {\\n            ListNode *temp = nullptr;\\n\\n            while (l1 != nullptr && l1->val <= l2->val) {\\n                temp = l1;\\n                l1 = l1->next;\\n            }\\n\\n            temp->next = l2;\\n            swap(l1, l2);\\n        }\\n\\n        return res;\\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "smash424",
                        "content": "i am not seeing the ListNode class where is the place it get defined?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "[@smash424](/smash424) \n\nIt is in the comment above the solution.\nThere is an int val and a next pointer in the node.\nThis is the Java code:\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n\n"
                    },
                    {
                        "username": "smash424",
                        "content": "[@Tom_Dev](/Tom_Dev)  thanks but where is it actually defined i can\\'t find it"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "In the code that checks your solution."
                    },
                    {
                        "username": "JAYASURYA_E",
                        "content": "we asign cur =dummy at beiginning only and dummy is not used through out the code but we return dummy.next idk how it printed correct answer. Can anyone explain?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The dummy makes the code more easy. You can do without it. You don't have to handle the insertion of the first node separately with the guard node."
                    },
                    {
                        "username": "tairyoku",
                        "content": "why can\\'t i use len()?\\n"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Because it is a linked list."
                    },
                    {
                        "username": "leastsquared_",
                        "content": "Why we cant just append the lists and use sorted(concated_list) ?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "That is not the task. You should learn how to handle the linked nodes."
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/"
                    }
                ]
            },
            {
                "id": 2057872,
                "content": [
                    {
                        "username": "pipijiang",
                        "content": "before merge these two list we need to know those two list are increasing or decreasing.\\nfor example when the input are [2,1] and [3,1] the result should be [3,2,1,1]"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The instructions say that the lists are sorted in \"non-decreasing\" order. I take that to mean ascending, but there may be more than one copy of a given value. E.g.: [1,1,2,2,3,4,5...]"
                    },
                    {
                        "username": "avoylol",
                        "content": "it seems that we should give an ascending result,such as : input [2,1] [2,1] and the output must be [1,1,2,2].\\nbut when you give [2,1][1,2] ,the standard answer requires [1,2,2,1]. Is the order of the result necessary or not?"
                    },
                    {
                        "username": "yashpatels",
                        "content": "While creating new LinkedList for storing new values. I am either adding 0 in the front or in the end. I am able to solve the problem. But seems like I am doing something wrong all the time? \\nCan anyone help?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You don\\'t need to store new values. Link the original lists together."
                    },
                    {
                        "username": "The_Aj-25",
                        "content": "Why I am getting this error ?\\n\\nLine 31: Char 19: runtime error: member access within null pointer of type \\'ListNode\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:40:19\\n\\n\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if (l1 == nullptr) return l2;\\n        if (l2 == nullptr) return l1;\\n\\n        if (l1->val < l2->val) {\\n            swap(l1, l2);\\n        }\\n        \\n        ListNode *res = l1;\\n\\n        while (l1 != nullptr && l2 != nullptr) {\\n            ListNode *temp = nullptr;\\n\\n            while (l1 != nullptr && l1->val <= l2->val) {\\n                temp = l1;\\n                l1 = l1->next;\\n            }\\n\\n            temp->next = l2;\\n            swap(l1, l2);\\n        }\\n\\n        return res;\\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "smash424",
                        "content": "i am not seeing the ListNode class where is the place it get defined?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "[@smash424](/smash424) \n\nIt is in the comment above the solution.\nThere is an int val and a next pointer in the node.\nThis is the Java code:\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n\n"
                    },
                    {
                        "username": "smash424",
                        "content": "[@Tom_Dev](/Tom_Dev)  thanks but where is it actually defined i can\\'t find it"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "In the code that checks your solution."
                    },
                    {
                        "username": "JAYASURYA_E",
                        "content": "we asign cur =dummy at beiginning only and dummy is not used through out the code but we return dummy.next idk how it printed correct answer. Can anyone explain?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The dummy makes the code more easy. You can do without it. You don't have to handle the insertion of the first node separately with the guard node."
                    },
                    {
                        "username": "tairyoku",
                        "content": "why can\\'t i use len()?\\n"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Because it is a linked list."
                    },
                    {
                        "username": "leastsquared_",
                        "content": "Why we cant just append the lists and use sorted(concated_list) ?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "That is not the task. You should learn how to handle the linked nodes."
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/"
                    }
                ]
            },
            {
                "id": 2056568,
                "content": [
                    {
                        "username": "pipijiang",
                        "content": "before merge these two list we need to know those two list are increasing or decreasing.\\nfor example when the input are [2,1] and [3,1] the result should be [3,2,1,1]"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The instructions say that the lists are sorted in \"non-decreasing\" order. I take that to mean ascending, but there may be more than one copy of a given value. E.g.: [1,1,2,2,3,4,5...]"
                    },
                    {
                        "username": "avoylol",
                        "content": "it seems that we should give an ascending result,such as : input [2,1] [2,1] and the output must be [1,1,2,2].\\nbut when you give [2,1][1,2] ,the standard answer requires [1,2,2,1]. Is the order of the result necessary or not?"
                    },
                    {
                        "username": "yashpatels",
                        "content": "While creating new LinkedList for storing new values. I am either adding 0 in the front or in the end. I am able to solve the problem. But seems like I am doing something wrong all the time? \\nCan anyone help?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You don\\'t need to store new values. Link the original lists together."
                    },
                    {
                        "username": "The_Aj-25",
                        "content": "Why I am getting this error ?\\n\\nLine 31: Char 19: runtime error: member access within null pointer of type \\'ListNode\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:40:19\\n\\n\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if (l1 == nullptr) return l2;\\n        if (l2 == nullptr) return l1;\\n\\n        if (l1->val < l2->val) {\\n            swap(l1, l2);\\n        }\\n        \\n        ListNode *res = l1;\\n\\n        while (l1 != nullptr && l2 != nullptr) {\\n            ListNode *temp = nullptr;\\n\\n            while (l1 != nullptr && l1->val <= l2->val) {\\n                temp = l1;\\n                l1 = l1->next;\\n            }\\n\\n            temp->next = l2;\\n            swap(l1, l2);\\n        }\\n\\n        return res;\\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "smash424",
                        "content": "i am not seeing the ListNode class where is the place it get defined?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "[@smash424](/smash424) \n\nIt is in the comment above the solution.\nThere is an int val and a next pointer in the node.\nThis is the Java code:\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n\n"
                    },
                    {
                        "username": "smash424",
                        "content": "[@Tom_Dev](/Tom_Dev)  thanks but where is it actually defined i can\\'t find it"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "In the code that checks your solution."
                    },
                    {
                        "username": "JAYASURYA_E",
                        "content": "we asign cur =dummy at beiginning only and dummy is not used through out the code but we return dummy.next idk how it printed correct answer. Can anyone explain?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The dummy makes the code more easy. You can do without it. You don't have to handle the insertion of the first node separately with the guard node."
                    },
                    {
                        "username": "tairyoku",
                        "content": "why can\\'t i use len()?\\n"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Because it is a linked list."
                    },
                    {
                        "username": "leastsquared_",
                        "content": "Why we cant just append the lists and use sorted(concated_list) ?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "That is not the task. You should learn how to handle the linked nodes."
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/"
                    }
                ]
            },
            {
                "id": 2054173,
                "content": [
                    {
                        "username": "pipijiang",
                        "content": "before merge these two list we need to know those two list are increasing or decreasing.\\nfor example when the input are [2,1] and [3,1] the result should be [3,2,1,1]"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The instructions say that the lists are sorted in \"non-decreasing\" order. I take that to mean ascending, but there may be more than one copy of a given value. E.g.: [1,1,2,2,3,4,5...]"
                    },
                    {
                        "username": "avoylol",
                        "content": "it seems that we should give an ascending result,such as : input [2,1] [2,1] and the output must be [1,1,2,2].\\nbut when you give [2,1][1,2] ,the standard answer requires [1,2,2,1]. Is the order of the result necessary or not?"
                    },
                    {
                        "username": "yashpatels",
                        "content": "While creating new LinkedList for storing new values. I am either adding 0 in the front or in the end. I am able to solve the problem. But seems like I am doing something wrong all the time? \\nCan anyone help?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You don\\'t need to store new values. Link the original lists together."
                    },
                    {
                        "username": "The_Aj-25",
                        "content": "Why I am getting this error ?\\n\\nLine 31: Char 19: runtime error: member access within null pointer of type \\'ListNode\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:40:19\\n\\n\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if (l1 == nullptr) return l2;\\n        if (l2 == nullptr) return l1;\\n\\n        if (l1->val < l2->val) {\\n            swap(l1, l2);\\n        }\\n        \\n        ListNode *res = l1;\\n\\n        while (l1 != nullptr && l2 != nullptr) {\\n            ListNode *temp = nullptr;\\n\\n            while (l1 != nullptr && l1->val <= l2->val) {\\n                temp = l1;\\n                l1 = l1->next;\\n            }\\n\\n            temp->next = l2;\\n            swap(l1, l2);\\n        }\\n\\n        return res;\\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "smash424",
                        "content": "i am not seeing the ListNode class where is the place it get defined?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "[@smash424](/smash424) \n\nIt is in the comment above the solution.\nThere is an int val and a next pointer in the node.\nThis is the Java code:\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n\n"
                    },
                    {
                        "username": "smash424",
                        "content": "[@Tom_Dev](/Tom_Dev)  thanks but where is it actually defined i can\\'t find it"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "In the code that checks your solution."
                    },
                    {
                        "username": "JAYASURYA_E",
                        "content": "we asign cur =dummy at beiginning only and dummy is not used through out the code but we return dummy.next idk how it printed correct answer. Can anyone explain?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The dummy makes the code more easy. You can do without it. You don't have to handle the insertion of the first node separately with the guard node."
                    },
                    {
                        "username": "tairyoku",
                        "content": "why can\\'t i use len()?\\n"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Because it is a linked list."
                    },
                    {
                        "username": "leastsquared_",
                        "content": "Why we cant just append the lists and use sorted(concated_list) ?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "That is not the task. You should learn how to handle the linked nodes."
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/"
                    }
                ]
            },
            {
                "id": 2054171,
                "content": [
                    {
                        "username": "pipijiang",
                        "content": "before merge these two list we need to know those two list are increasing or decreasing.\\nfor example when the input are [2,1] and [3,1] the result should be [3,2,1,1]"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The instructions say that the lists are sorted in \"non-decreasing\" order. I take that to mean ascending, but there may be more than one copy of a given value. E.g.: [1,1,2,2,3,4,5...]"
                    },
                    {
                        "username": "avoylol",
                        "content": "it seems that we should give an ascending result,such as : input [2,1] [2,1] and the output must be [1,1,2,2].\\nbut when you give [2,1][1,2] ,the standard answer requires [1,2,2,1]. Is the order of the result necessary or not?"
                    },
                    {
                        "username": "yashpatels",
                        "content": "While creating new LinkedList for storing new values. I am either adding 0 in the front or in the end. I am able to solve the problem. But seems like I am doing something wrong all the time? \\nCan anyone help?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You don\\'t need to store new values. Link the original lists together."
                    },
                    {
                        "username": "The_Aj-25",
                        "content": "Why I am getting this error ?\\n\\nLine 31: Char 19: runtime error: member access within null pointer of type \\'ListNode\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:40:19\\n\\n\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if (l1 == nullptr) return l2;\\n        if (l2 == nullptr) return l1;\\n\\n        if (l1->val < l2->val) {\\n            swap(l1, l2);\\n        }\\n        \\n        ListNode *res = l1;\\n\\n        while (l1 != nullptr && l2 != nullptr) {\\n            ListNode *temp = nullptr;\\n\\n            while (l1 != nullptr && l1->val <= l2->val) {\\n                temp = l1;\\n                l1 = l1->next;\\n            }\\n\\n            temp->next = l2;\\n            swap(l1, l2);\\n        }\\n\\n        return res;\\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "smash424",
                        "content": "i am not seeing the ListNode class where is the place it get defined?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "[@smash424](/smash424) \n\nIt is in the comment above the solution.\nThere is an int val and a next pointer in the node.\nThis is the Java code:\n\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n\n"
                    },
                    {
                        "username": "smash424",
                        "content": "[@Tom_Dev](/Tom_Dev)  thanks but where is it actually defined i can\\'t find it"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "In the code that checks your solution."
                    },
                    {
                        "username": "JAYASURYA_E",
                        "content": "we asign cur =dummy at beiginning only and dummy is not used through out the code but we return dummy.next idk how it printed correct answer. Can anyone explain?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The dummy makes the code more easy. You can do without it. You don't have to handle the insertion of the first node separately with the guard node."
                    },
                    {
                        "username": "tairyoku",
                        "content": "why can\\'t i use len()?\\n"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Because it is a linked list."
                    },
                    {
                        "username": "leastsquared_",
                        "content": "Why we cant just append the lists and use sorted(concated_list) ?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "That is not the task. You should learn how to handle the linked nodes."
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/"
                    },
                    {
                        "username": "muhammedirshadismail0722",
                        "content": "\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25O(n) and O(1) space complexity Solution || Biggner friendly || line by line explanation \\n\\n\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/4033675/o-n-and-o-1-space-complexity-solution-biggner-friendly-line-by-line-explanation/"
                    }
                ]
            },
            {
                "id": 2051041,
                "content": [
                    {
                        "username": "squidify",
                        "content": "Why on earth do we have to do this with a linked list and not just a list? Linked lists are way more inconvenient and dare-I-say uncommon than lists in merge sorts."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You mean an array?"
                    },
                    {
                        "username": "xr738wxhr63634hrh7337",
                        "content": "how to f*cking tets and debug this"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "With a premium subscription."
                    },
                    {
                        "username": "AaronColdbrew",
                        "content": "Huh. It specifies using list nodes and then... asks for just an array as the returned value? Wouldn\\'t it just want the head of the newly sorted singly linked list returned? Weird."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The return value is a ListNode*"
                    },
                    {
                        "username": "Darshan119",
                        "content": "Can Anyone tell what is wrong is this code . use of an extra space . It is not passing all  the test cases ?\\n ` \\nif(list1) return list2; ``\\n        \\n        if(list2) return list1;\\n        \\n        ListNode* ans;\\n        \\n        while(list2 && list1){\\n            if(list1->val >= list2->val){\\n                ans = ans->next;\\n                ans->val = list2->val;\\n                list2 = list2->next;\\n            }\\n            else{\\n                ans->val = list1->val;\\n                ans = ans->next;\\n                list1 = list1->next;\\n            }\\n        }\\n\\n        while(list2){\\n            ans = ans->next;\\n            ans->val = list2->val;\\n            list2 = list2->next;\\n        }\\n        while(list1){\\n            ans = ans->next;\\n            ans->val = list1->val;\\n            list1 = list1->next;\\n        }\\n        return ans;\\n`\\n \\'"
                    },
                    {
                        "username": "ahrix268",
                        "content": "there're 3 problems in your code:\n\n* first: `if(list1) return list2;` and `if(list2) return list1;`. these checks are wrong. it should be `if(!list1) return list2;` or `if(list1 == null) return list2;`. btw, no need to check this edge case\n\n* 2nd: if you want to append `list1` to your answer `ans`, it will be `ans->next =  list1`. hence, the first loop shall look like:\n```\n    while(list1 && list2){\n        if(list1->val > list2->val){\n            ans->next = list2;\n            list2 = list2->next;\n        }\n        else{\n            ans->next = list1;\n            list1 = list1->next;\n        }\n        ans = ans->next;\n    }\n```\n\n* 3rd - the most important thing: you're only tracking the *tail* of the list, which is `ans` as your code. then when you return `ans` it's probably `null`. so, declare another node to keep the *fake head* of the answer, like this:\n```\n   ListNode* fakeHead = new ListNode(0);\n   ListNode* ans = fakeHead;\n\n   // ... your code\n\n   return fakeHead->next;\n```"
                    },
                    {
                        "username": "fxio",
                        "content": "Why can\\'t you say increasing order? non-decreasing seems unnecessarily complex"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Because there are duplicates."
                    },
                    {
                        "username": "run727",
                        "content": "The question is asking to return the head of the merged linked list, but why the output for example one is a whole linked list? "
                    },
                    {
                        "username": "Amar___",
                        "content": "since the head node is linked with the network once called, will run till the next pointer encounters NULL value. that\\'s why we are witnessing entire list"
                    },
                    {
                        "username": "user7110L",
                        "content": "\\nWhy do I push all of them into an array and sort the array doesn\\'t work?"
                    },
                    {
                        "username": "JaVlasov",
                        "content": "Hello everyone! \\nWhat is diffrenet between next java code:\\nListNode l1 = new ListNode();\\nListNode l2 = new ListNode(0);\\n\\nI think, it will be like: l1.val = null, l2.val = 0;\\nBut if we see in class ListLode, we will see integer, and integer by default is 0, not null;\\n\\nHow can i complete example 3 and example 2? I think in Java it\\'t the same."
                    },
                    {
                        "username": "ahrix268",
                        "content": "there's no difference at all\n\nprimitive data type `int` in Java has default value is `0`.\nwhen you declare `ListNode l1 = new ListNode();`, field `val` inside `l1` will take its default value is `0`. hence, it is same as `ListNode l1 = new ListNode(0);`\n\nbtw, the non-primitive type of integer is `Integer`. which is `null` when you declare but not assign it a value `Integer a;` (now, a is null)\n\nfor two examples above:\nexample 2: `list1 = null`, `list2 = null`\nexample 3: `list1 = null`, `list2 = {val = 0, next = null}`\nif you try `list2.val` or `list2.next` from example 2, it throws NullPointerException, because list2 is null. \nin example 3, you can do `list.val` or `list.next` because list2 is not null and you can get its fields\nso, they are not the same"
                    },
                    {
                        "username": "JaVlasov",
                        "content": "This q is not actuallity; list1 = [] in java means list1 = null;"
                    },
                    {
                        "username": "himanshuone",
                        "content": "Don\\'t Copy Just try to Understand or Ask CHATGPT to Describe:\\n\\n\\n`class Solution:\\n\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n\\n        dummy=ListNode()\\n\\n        tail=dummy\\n\\n        while list1 and list2:\\n            if list1.val<list2.val:\\n                tail.next=list1\\n                list1=list1.next\\n            else:\\n                tail.next=list2\\n                list2=list2.next\\n            tail=tail.next\\n\\n        if list1:\\n                tail.next=list1\\n        else:\\n                tail.next=list2\\n        return dummy.next`"
                    },
                    {
                        "username": "ahrix268",
                        "content": "don\\'t post any solution here, which is probably you\\'re not able to describe because you copy it from ChatGPT"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "kgyanender4",
                        "content": "def mergeTwoarray(list1,list2):\\n    for nums in list1:\\n        list2.append(nums)\\n    new_list=sorted(list2)\\n    return new_list\\n    \\nlist1=[1,2,4]\\nlist2=[1,3,4]\\nresult=mergeTwoarray(list1,list2)\\nprint(result)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 2045661,
                "content": [
                    {
                        "username": "squidify",
                        "content": "Why on earth do we have to do this with a linked list and not just a list? Linked lists are way more inconvenient and dare-I-say uncommon than lists in merge sorts."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You mean an array?"
                    },
                    {
                        "username": "xr738wxhr63634hrh7337",
                        "content": "how to f*cking tets and debug this"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "With a premium subscription."
                    },
                    {
                        "username": "AaronColdbrew",
                        "content": "Huh. It specifies using list nodes and then... asks for just an array as the returned value? Wouldn\\'t it just want the head of the newly sorted singly linked list returned? Weird."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The return value is a ListNode*"
                    },
                    {
                        "username": "Darshan119",
                        "content": "Can Anyone tell what is wrong is this code . use of an extra space . It is not passing all  the test cases ?\\n ` \\nif(list1) return list2; ``\\n        \\n        if(list2) return list1;\\n        \\n        ListNode* ans;\\n        \\n        while(list2 && list1){\\n            if(list1->val >= list2->val){\\n                ans = ans->next;\\n                ans->val = list2->val;\\n                list2 = list2->next;\\n            }\\n            else{\\n                ans->val = list1->val;\\n                ans = ans->next;\\n                list1 = list1->next;\\n            }\\n        }\\n\\n        while(list2){\\n            ans = ans->next;\\n            ans->val = list2->val;\\n            list2 = list2->next;\\n        }\\n        while(list1){\\n            ans = ans->next;\\n            ans->val = list1->val;\\n            list1 = list1->next;\\n        }\\n        return ans;\\n`\\n \\'"
                    },
                    {
                        "username": "ahrix268",
                        "content": "there're 3 problems in your code:\n\n* first: `if(list1) return list2;` and `if(list2) return list1;`. these checks are wrong. it should be `if(!list1) return list2;` or `if(list1 == null) return list2;`. btw, no need to check this edge case\n\n* 2nd: if you want to append `list1` to your answer `ans`, it will be `ans->next =  list1`. hence, the first loop shall look like:\n```\n    while(list1 && list2){\n        if(list1->val > list2->val){\n            ans->next = list2;\n            list2 = list2->next;\n        }\n        else{\n            ans->next = list1;\n            list1 = list1->next;\n        }\n        ans = ans->next;\n    }\n```\n\n* 3rd - the most important thing: you're only tracking the *tail* of the list, which is `ans` as your code. then when you return `ans` it's probably `null`. so, declare another node to keep the *fake head* of the answer, like this:\n```\n   ListNode* fakeHead = new ListNode(0);\n   ListNode* ans = fakeHead;\n\n   // ... your code\n\n   return fakeHead->next;\n```"
                    },
                    {
                        "username": "fxio",
                        "content": "Why can\\'t you say increasing order? non-decreasing seems unnecessarily complex"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Because there are duplicates."
                    },
                    {
                        "username": "run727",
                        "content": "The question is asking to return the head of the merged linked list, but why the output for example one is a whole linked list? "
                    },
                    {
                        "username": "Amar___",
                        "content": "since the head node is linked with the network once called, will run till the next pointer encounters NULL value. that\\'s why we are witnessing entire list"
                    },
                    {
                        "username": "user7110L",
                        "content": "\\nWhy do I push all of them into an array and sort the array doesn\\'t work?"
                    },
                    {
                        "username": "JaVlasov",
                        "content": "Hello everyone! \\nWhat is diffrenet between next java code:\\nListNode l1 = new ListNode();\\nListNode l2 = new ListNode(0);\\n\\nI think, it will be like: l1.val = null, l2.val = 0;\\nBut if we see in class ListLode, we will see integer, and integer by default is 0, not null;\\n\\nHow can i complete example 3 and example 2? I think in Java it\\'t the same."
                    },
                    {
                        "username": "ahrix268",
                        "content": "there's no difference at all\n\nprimitive data type `int` in Java has default value is `0`.\nwhen you declare `ListNode l1 = new ListNode();`, field `val` inside `l1` will take its default value is `0`. hence, it is same as `ListNode l1 = new ListNode(0);`\n\nbtw, the non-primitive type of integer is `Integer`. which is `null` when you declare but not assign it a value `Integer a;` (now, a is null)\n\nfor two examples above:\nexample 2: `list1 = null`, `list2 = null`\nexample 3: `list1 = null`, `list2 = {val = 0, next = null}`\nif you try `list2.val` or `list2.next` from example 2, it throws NullPointerException, because list2 is null. \nin example 3, you can do `list.val` or `list.next` because list2 is not null and you can get its fields\nso, they are not the same"
                    },
                    {
                        "username": "JaVlasov",
                        "content": "This q is not actuallity; list1 = [] in java means list1 = null;"
                    },
                    {
                        "username": "himanshuone",
                        "content": "Don\\'t Copy Just try to Understand or Ask CHATGPT to Describe:\\n\\n\\n`class Solution:\\n\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n\\n        dummy=ListNode()\\n\\n        tail=dummy\\n\\n        while list1 and list2:\\n            if list1.val<list2.val:\\n                tail.next=list1\\n                list1=list1.next\\n            else:\\n                tail.next=list2\\n                list2=list2.next\\n            tail=tail.next\\n\\n        if list1:\\n                tail.next=list1\\n        else:\\n                tail.next=list2\\n        return dummy.next`"
                    },
                    {
                        "username": "ahrix268",
                        "content": "don\\'t post any solution here, which is probably you\\'re not able to describe because you copy it from ChatGPT"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "kgyanender4",
                        "content": "def mergeTwoarray(list1,list2):\\n    for nums in list1:\\n        list2.append(nums)\\n    new_list=sorted(list2)\\n    return new_list\\n    \\nlist1=[1,2,4]\\nlist2=[1,3,4]\\nresult=mergeTwoarray(list1,list2)\\nprint(result)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 2027670,
                "content": [
                    {
                        "username": "squidify",
                        "content": "Why on earth do we have to do this with a linked list and not just a list? Linked lists are way more inconvenient and dare-I-say uncommon than lists in merge sorts."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You mean an array?"
                    },
                    {
                        "username": "xr738wxhr63634hrh7337",
                        "content": "how to f*cking tets and debug this"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "With a premium subscription."
                    },
                    {
                        "username": "AaronColdbrew",
                        "content": "Huh. It specifies using list nodes and then... asks for just an array as the returned value? Wouldn\\'t it just want the head of the newly sorted singly linked list returned? Weird."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The return value is a ListNode*"
                    },
                    {
                        "username": "Darshan119",
                        "content": "Can Anyone tell what is wrong is this code . use of an extra space . It is not passing all  the test cases ?\\n ` \\nif(list1) return list2; ``\\n        \\n        if(list2) return list1;\\n        \\n        ListNode* ans;\\n        \\n        while(list2 && list1){\\n            if(list1->val >= list2->val){\\n                ans = ans->next;\\n                ans->val = list2->val;\\n                list2 = list2->next;\\n            }\\n            else{\\n                ans->val = list1->val;\\n                ans = ans->next;\\n                list1 = list1->next;\\n            }\\n        }\\n\\n        while(list2){\\n            ans = ans->next;\\n            ans->val = list2->val;\\n            list2 = list2->next;\\n        }\\n        while(list1){\\n            ans = ans->next;\\n            ans->val = list1->val;\\n            list1 = list1->next;\\n        }\\n        return ans;\\n`\\n \\'"
                    },
                    {
                        "username": "ahrix268",
                        "content": "there're 3 problems in your code:\n\n* first: `if(list1) return list2;` and `if(list2) return list1;`. these checks are wrong. it should be `if(!list1) return list2;` or `if(list1 == null) return list2;`. btw, no need to check this edge case\n\n* 2nd: if you want to append `list1` to your answer `ans`, it will be `ans->next =  list1`. hence, the first loop shall look like:\n```\n    while(list1 && list2){\n        if(list1->val > list2->val){\n            ans->next = list2;\n            list2 = list2->next;\n        }\n        else{\n            ans->next = list1;\n            list1 = list1->next;\n        }\n        ans = ans->next;\n    }\n```\n\n* 3rd - the most important thing: you're only tracking the *tail* of the list, which is `ans` as your code. then when you return `ans` it's probably `null`. so, declare another node to keep the *fake head* of the answer, like this:\n```\n   ListNode* fakeHead = new ListNode(0);\n   ListNode* ans = fakeHead;\n\n   // ... your code\n\n   return fakeHead->next;\n```"
                    },
                    {
                        "username": "fxio",
                        "content": "Why can\\'t you say increasing order? non-decreasing seems unnecessarily complex"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Because there are duplicates."
                    },
                    {
                        "username": "run727",
                        "content": "The question is asking to return the head of the merged linked list, but why the output for example one is a whole linked list? "
                    },
                    {
                        "username": "Amar___",
                        "content": "since the head node is linked with the network once called, will run till the next pointer encounters NULL value. that\\'s why we are witnessing entire list"
                    },
                    {
                        "username": "user7110L",
                        "content": "\\nWhy do I push all of them into an array and sort the array doesn\\'t work?"
                    },
                    {
                        "username": "JaVlasov",
                        "content": "Hello everyone! \\nWhat is diffrenet between next java code:\\nListNode l1 = new ListNode();\\nListNode l2 = new ListNode(0);\\n\\nI think, it will be like: l1.val = null, l2.val = 0;\\nBut if we see in class ListLode, we will see integer, and integer by default is 0, not null;\\n\\nHow can i complete example 3 and example 2? I think in Java it\\'t the same."
                    },
                    {
                        "username": "ahrix268",
                        "content": "there's no difference at all\n\nprimitive data type `int` in Java has default value is `0`.\nwhen you declare `ListNode l1 = new ListNode();`, field `val` inside `l1` will take its default value is `0`. hence, it is same as `ListNode l1 = new ListNode(0);`\n\nbtw, the non-primitive type of integer is `Integer`. which is `null` when you declare but not assign it a value `Integer a;` (now, a is null)\n\nfor two examples above:\nexample 2: `list1 = null`, `list2 = null`\nexample 3: `list1 = null`, `list2 = {val = 0, next = null}`\nif you try `list2.val` or `list2.next` from example 2, it throws NullPointerException, because list2 is null. \nin example 3, you can do `list.val` or `list.next` because list2 is not null and you can get its fields\nso, they are not the same"
                    },
                    {
                        "username": "JaVlasov",
                        "content": "This q is not actuallity; list1 = [] in java means list1 = null;"
                    },
                    {
                        "username": "himanshuone",
                        "content": "Don\\'t Copy Just try to Understand or Ask CHATGPT to Describe:\\n\\n\\n`class Solution:\\n\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n\\n        dummy=ListNode()\\n\\n        tail=dummy\\n\\n        while list1 and list2:\\n            if list1.val<list2.val:\\n                tail.next=list1\\n                list1=list1.next\\n            else:\\n                tail.next=list2\\n                list2=list2.next\\n            tail=tail.next\\n\\n        if list1:\\n                tail.next=list1\\n        else:\\n                tail.next=list2\\n        return dummy.next`"
                    },
                    {
                        "username": "ahrix268",
                        "content": "don\\'t post any solution here, which is probably you\\'re not able to describe because you copy it from ChatGPT"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "kgyanender4",
                        "content": "def mergeTwoarray(list1,list2):\\n    for nums in list1:\\n        list2.append(nums)\\n    new_list=sorted(list2)\\n    return new_list\\n    \\nlist1=[1,2,4]\\nlist2=[1,3,4]\\nresult=mergeTwoarray(list1,list2)\\nprint(result)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 2022301,
                "content": [
                    {
                        "username": "squidify",
                        "content": "Why on earth do we have to do this with a linked list and not just a list? Linked lists are way more inconvenient and dare-I-say uncommon than lists in merge sorts."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You mean an array?"
                    },
                    {
                        "username": "xr738wxhr63634hrh7337",
                        "content": "how to f*cking tets and debug this"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "With a premium subscription."
                    },
                    {
                        "username": "AaronColdbrew",
                        "content": "Huh. It specifies using list nodes and then... asks for just an array as the returned value? Wouldn\\'t it just want the head of the newly sorted singly linked list returned? Weird."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The return value is a ListNode*"
                    },
                    {
                        "username": "Darshan119",
                        "content": "Can Anyone tell what is wrong is this code . use of an extra space . It is not passing all  the test cases ?\\n ` \\nif(list1) return list2; ``\\n        \\n        if(list2) return list1;\\n        \\n        ListNode* ans;\\n        \\n        while(list2 && list1){\\n            if(list1->val >= list2->val){\\n                ans = ans->next;\\n                ans->val = list2->val;\\n                list2 = list2->next;\\n            }\\n            else{\\n                ans->val = list1->val;\\n                ans = ans->next;\\n                list1 = list1->next;\\n            }\\n        }\\n\\n        while(list2){\\n            ans = ans->next;\\n            ans->val = list2->val;\\n            list2 = list2->next;\\n        }\\n        while(list1){\\n            ans = ans->next;\\n            ans->val = list1->val;\\n            list1 = list1->next;\\n        }\\n        return ans;\\n`\\n \\'"
                    },
                    {
                        "username": "ahrix268",
                        "content": "there're 3 problems in your code:\n\n* first: `if(list1) return list2;` and `if(list2) return list1;`. these checks are wrong. it should be `if(!list1) return list2;` or `if(list1 == null) return list2;`. btw, no need to check this edge case\n\n* 2nd: if you want to append `list1` to your answer `ans`, it will be `ans->next =  list1`. hence, the first loop shall look like:\n```\n    while(list1 && list2){\n        if(list1->val > list2->val){\n            ans->next = list2;\n            list2 = list2->next;\n        }\n        else{\n            ans->next = list1;\n            list1 = list1->next;\n        }\n        ans = ans->next;\n    }\n```\n\n* 3rd - the most important thing: you're only tracking the *tail* of the list, which is `ans` as your code. then when you return `ans` it's probably `null`. so, declare another node to keep the *fake head* of the answer, like this:\n```\n   ListNode* fakeHead = new ListNode(0);\n   ListNode* ans = fakeHead;\n\n   // ... your code\n\n   return fakeHead->next;\n```"
                    },
                    {
                        "username": "fxio",
                        "content": "Why can\\'t you say increasing order? non-decreasing seems unnecessarily complex"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Because there are duplicates."
                    },
                    {
                        "username": "run727",
                        "content": "The question is asking to return the head of the merged linked list, but why the output for example one is a whole linked list? "
                    },
                    {
                        "username": "Amar___",
                        "content": "since the head node is linked with the network once called, will run till the next pointer encounters NULL value. that\\'s why we are witnessing entire list"
                    },
                    {
                        "username": "user7110L",
                        "content": "\\nWhy do I push all of them into an array and sort the array doesn\\'t work?"
                    },
                    {
                        "username": "JaVlasov",
                        "content": "Hello everyone! \\nWhat is diffrenet between next java code:\\nListNode l1 = new ListNode();\\nListNode l2 = new ListNode(0);\\n\\nI think, it will be like: l1.val = null, l2.val = 0;\\nBut if we see in class ListLode, we will see integer, and integer by default is 0, not null;\\n\\nHow can i complete example 3 and example 2? I think in Java it\\'t the same."
                    },
                    {
                        "username": "ahrix268",
                        "content": "there's no difference at all\n\nprimitive data type `int` in Java has default value is `0`.\nwhen you declare `ListNode l1 = new ListNode();`, field `val` inside `l1` will take its default value is `0`. hence, it is same as `ListNode l1 = new ListNode(0);`\n\nbtw, the non-primitive type of integer is `Integer`. which is `null` when you declare but not assign it a value `Integer a;` (now, a is null)\n\nfor two examples above:\nexample 2: `list1 = null`, `list2 = null`\nexample 3: `list1 = null`, `list2 = {val = 0, next = null}`\nif you try `list2.val` or `list2.next` from example 2, it throws NullPointerException, because list2 is null. \nin example 3, you can do `list.val` or `list.next` because list2 is not null and you can get its fields\nso, they are not the same"
                    },
                    {
                        "username": "JaVlasov",
                        "content": "This q is not actuallity; list1 = [] in java means list1 = null;"
                    },
                    {
                        "username": "himanshuone",
                        "content": "Don\\'t Copy Just try to Understand or Ask CHATGPT to Describe:\\n\\n\\n`class Solution:\\n\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n\\n        dummy=ListNode()\\n\\n        tail=dummy\\n\\n        while list1 and list2:\\n            if list1.val<list2.val:\\n                tail.next=list1\\n                list1=list1.next\\n            else:\\n                tail.next=list2\\n                list2=list2.next\\n            tail=tail.next\\n\\n        if list1:\\n                tail.next=list1\\n        else:\\n                tail.next=list2\\n        return dummy.next`"
                    },
                    {
                        "username": "ahrix268",
                        "content": "don\\'t post any solution here, which is probably you\\'re not able to describe because you copy it from ChatGPT"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "kgyanender4",
                        "content": "def mergeTwoarray(list1,list2):\\n    for nums in list1:\\n        list2.append(nums)\\n    new_list=sorted(list2)\\n    return new_list\\n    \\nlist1=[1,2,4]\\nlist2=[1,3,4]\\nresult=mergeTwoarray(list1,list2)\\nprint(result)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 2021446,
                "content": [
                    {
                        "username": "squidify",
                        "content": "Why on earth do we have to do this with a linked list and not just a list? Linked lists are way more inconvenient and dare-I-say uncommon than lists in merge sorts."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You mean an array?"
                    },
                    {
                        "username": "xr738wxhr63634hrh7337",
                        "content": "how to f*cking tets and debug this"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "With a premium subscription."
                    },
                    {
                        "username": "AaronColdbrew",
                        "content": "Huh. It specifies using list nodes and then... asks for just an array as the returned value? Wouldn\\'t it just want the head of the newly sorted singly linked list returned? Weird."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The return value is a ListNode*"
                    },
                    {
                        "username": "Darshan119",
                        "content": "Can Anyone tell what is wrong is this code . use of an extra space . It is not passing all  the test cases ?\\n ` \\nif(list1) return list2; ``\\n        \\n        if(list2) return list1;\\n        \\n        ListNode* ans;\\n        \\n        while(list2 && list1){\\n            if(list1->val >= list2->val){\\n                ans = ans->next;\\n                ans->val = list2->val;\\n                list2 = list2->next;\\n            }\\n            else{\\n                ans->val = list1->val;\\n                ans = ans->next;\\n                list1 = list1->next;\\n            }\\n        }\\n\\n        while(list2){\\n            ans = ans->next;\\n            ans->val = list2->val;\\n            list2 = list2->next;\\n        }\\n        while(list1){\\n            ans = ans->next;\\n            ans->val = list1->val;\\n            list1 = list1->next;\\n        }\\n        return ans;\\n`\\n \\'"
                    },
                    {
                        "username": "ahrix268",
                        "content": "there're 3 problems in your code:\n\n* first: `if(list1) return list2;` and `if(list2) return list1;`. these checks are wrong. it should be `if(!list1) return list2;` or `if(list1 == null) return list2;`. btw, no need to check this edge case\n\n* 2nd: if you want to append `list1` to your answer `ans`, it will be `ans->next =  list1`. hence, the first loop shall look like:\n```\n    while(list1 && list2){\n        if(list1->val > list2->val){\n            ans->next = list2;\n            list2 = list2->next;\n        }\n        else{\n            ans->next = list1;\n            list1 = list1->next;\n        }\n        ans = ans->next;\n    }\n```\n\n* 3rd - the most important thing: you're only tracking the *tail* of the list, which is `ans` as your code. then when you return `ans` it's probably `null`. so, declare another node to keep the *fake head* of the answer, like this:\n```\n   ListNode* fakeHead = new ListNode(0);\n   ListNode* ans = fakeHead;\n\n   // ... your code\n\n   return fakeHead->next;\n```"
                    },
                    {
                        "username": "fxio",
                        "content": "Why can\\'t you say increasing order? non-decreasing seems unnecessarily complex"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Because there are duplicates."
                    },
                    {
                        "username": "run727",
                        "content": "The question is asking to return the head of the merged linked list, but why the output for example one is a whole linked list? "
                    },
                    {
                        "username": "Amar___",
                        "content": "since the head node is linked with the network once called, will run till the next pointer encounters NULL value. that\\'s why we are witnessing entire list"
                    },
                    {
                        "username": "user7110L",
                        "content": "\\nWhy do I push all of them into an array and sort the array doesn\\'t work?"
                    },
                    {
                        "username": "JaVlasov",
                        "content": "Hello everyone! \\nWhat is diffrenet between next java code:\\nListNode l1 = new ListNode();\\nListNode l2 = new ListNode(0);\\n\\nI think, it will be like: l1.val = null, l2.val = 0;\\nBut if we see in class ListLode, we will see integer, and integer by default is 0, not null;\\n\\nHow can i complete example 3 and example 2? I think in Java it\\'t the same."
                    },
                    {
                        "username": "ahrix268",
                        "content": "there's no difference at all\n\nprimitive data type `int` in Java has default value is `0`.\nwhen you declare `ListNode l1 = new ListNode();`, field `val` inside `l1` will take its default value is `0`. hence, it is same as `ListNode l1 = new ListNode(0);`\n\nbtw, the non-primitive type of integer is `Integer`. which is `null` when you declare but not assign it a value `Integer a;` (now, a is null)\n\nfor two examples above:\nexample 2: `list1 = null`, `list2 = null`\nexample 3: `list1 = null`, `list2 = {val = 0, next = null}`\nif you try `list2.val` or `list2.next` from example 2, it throws NullPointerException, because list2 is null. \nin example 3, you can do `list.val` or `list.next` because list2 is not null and you can get its fields\nso, they are not the same"
                    },
                    {
                        "username": "JaVlasov",
                        "content": "This q is not actuallity; list1 = [] in java means list1 = null;"
                    },
                    {
                        "username": "himanshuone",
                        "content": "Don\\'t Copy Just try to Understand or Ask CHATGPT to Describe:\\n\\n\\n`class Solution:\\n\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n\\n        dummy=ListNode()\\n\\n        tail=dummy\\n\\n        while list1 and list2:\\n            if list1.val<list2.val:\\n                tail.next=list1\\n                list1=list1.next\\n            else:\\n                tail.next=list2\\n                list2=list2.next\\n            tail=tail.next\\n\\n        if list1:\\n                tail.next=list1\\n        else:\\n                tail.next=list2\\n        return dummy.next`"
                    },
                    {
                        "username": "ahrix268",
                        "content": "don\\'t post any solution here, which is probably you\\'re not able to describe because you copy it from ChatGPT"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "kgyanender4",
                        "content": "def mergeTwoarray(list1,list2):\\n    for nums in list1:\\n        list2.append(nums)\\n    new_list=sorted(list2)\\n    return new_list\\n    \\nlist1=[1,2,4]\\nlist2=[1,3,4]\\nresult=mergeTwoarray(list1,list2)\\nprint(result)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 2017409,
                "content": [
                    {
                        "username": "squidify",
                        "content": "Why on earth do we have to do this with a linked list and not just a list? Linked lists are way more inconvenient and dare-I-say uncommon than lists in merge sorts."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You mean an array?"
                    },
                    {
                        "username": "xr738wxhr63634hrh7337",
                        "content": "how to f*cking tets and debug this"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "With a premium subscription."
                    },
                    {
                        "username": "AaronColdbrew",
                        "content": "Huh. It specifies using list nodes and then... asks for just an array as the returned value? Wouldn\\'t it just want the head of the newly sorted singly linked list returned? Weird."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The return value is a ListNode*"
                    },
                    {
                        "username": "Darshan119",
                        "content": "Can Anyone tell what is wrong is this code . use of an extra space . It is not passing all  the test cases ?\\n ` \\nif(list1) return list2; ``\\n        \\n        if(list2) return list1;\\n        \\n        ListNode* ans;\\n        \\n        while(list2 && list1){\\n            if(list1->val >= list2->val){\\n                ans = ans->next;\\n                ans->val = list2->val;\\n                list2 = list2->next;\\n            }\\n            else{\\n                ans->val = list1->val;\\n                ans = ans->next;\\n                list1 = list1->next;\\n            }\\n        }\\n\\n        while(list2){\\n            ans = ans->next;\\n            ans->val = list2->val;\\n            list2 = list2->next;\\n        }\\n        while(list1){\\n            ans = ans->next;\\n            ans->val = list1->val;\\n            list1 = list1->next;\\n        }\\n        return ans;\\n`\\n \\'"
                    },
                    {
                        "username": "ahrix268",
                        "content": "there're 3 problems in your code:\n\n* first: `if(list1) return list2;` and `if(list2) return list1;`. these checks are wrong. it should be `if(!list1) return list2;` or `if(list1 == null) return list2;`. btw, no need to check this edge case\n\n* 2nd: if you want to append `list1` to your answer `ans`, it will be `ans->next =  list1`. hence, the first loop shall look like:\n```\n    while(list1 && list2){\n        if(list1->val > list2->val){\n            ans->next = list2;\n            list2 = list2->next;\n        }\n        else{\n            ans->next = list1;\n            list1 = list1->next;\n        }\n        ans = ans->next;\n    }\n```\n\n* 3rd - the most important thing: you're only tracking the *tail* of the list, which is `ans` as your code. then when you return `ans` it's probably `null`. so, declare another node to keep the *fake head* of the answer, like this:\n```\n   ListNode* fakeHead = new ListNode(0);\n   ListNode* ans = fakeHead;\n\n   // ... your code\n\n   return fakeHead->next;\n```"
                    },
                    {
                        "username": "fxio",
                        "content": "Why can\\'t you say increasing order? non-decreasing seems unnecessarily complex"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Because there are duplicates."
                    },
                    {
                        "username": "run727",
                        "content": "The question is asking to return the head of the merged linked list, but why the output for example one is a whole linked list? "
                    },
                    {
                        "username": "Amar___",
                        "content": "since the head node is linked with the network once called, will run till the next pointer encounters NULL value. that\\'s why we are witnessing entire list"
                    },
                    {
                        "username": "user7110L",
                        "content": "\\nWhy do I push all of them into an array and sort the array doesn\\'t work?"
                    },
                    {
                        "username": "JaVlasov",
                        "content": "Hello everyone! \\nWhat is diffrenet between next java code:\\nListNode l1 = new ListNode();\\nListNode l2 = new ListNode(0);\\n\\nI think, it will be like: l1.val = null, l2.val = 0;\\nBut if we see in class ListLode, we will see integer, and integer by default is 0, not null;\\n\\nHow can i complete example 3 and example 2? I think in Java it\\'t the same."
                    },
                    {
                        "username": "ahrix268",
                        "content": "there's no difference at all\n\nprimitive data type `int` in Java has default value is `0`.\nwhen you declare `ListNode l1 = new ListNode();`, field `val` inside `l1` will take its default value is `0`. hence, it is same as `ListNode l1 = new ListNode(0);`\n\nbtw, the non-primitive type of integer is `Integer`. which is `null` when you declare but not assign it a value `Integer a;` (now, a is null)\n\nfor two examples above:\nexample 2: `list1 = null`, `list2 = null`\nexample 3: `list1 = null`, `list2 = {val = 0, next = null}`\nif you try `list2.val` or `list2.next` from example 2, it throws NullPointerException, because list2 is null. \nin example 3, you can do `list.val` or `list.next` because list2 is not null and you can get its fields\nso, they are not the same"
                    },
                    {
                        "username": "JaVlasov",
                        "content": "This q is not actuallity; list1 = [] in java means list1 = null;"
                    },
                    {
                        "username": "himanshuone",
                        "content": "Don\\'t Copy Just try to Understand or Ask CHATGPT to Describe:\\n\\n\\n`class Solution:\\n\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n\\n        dummy=ListNode()\\n\\n        tail=dummy\\n\\n        while list1 and list2:\\n            if list1.val<list2.val:\\n                tail.next=list1\\n                list1=list1.next\\n            else:\\n                tail.next=list2\\n                list2=list2.next\\n            tail=tail.next\\n\\n        if list1:\\n                tail.next=list1\\n        else:\\n                tail.next=list2\\n        return dummy.next`"
                    },
                    {
                        "username": "ahrix268",
                        "content": "don\\'t post any solution here, which is probably you\\'re not able to describe because you copy it from ChatGPT"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "kgyanender4",
                        "content": "def mergeTwoarray(list1,list2):\\n    for nums in list1:\\n        list2.append(nums)\\n    new_list=sorted(list2)\\n    return new_list\\n    \\nlist1=[1,2,4]\\nlist2=[1,3,4]\\nresult=mergeTwoarray(list1,list2)\\nprint(result)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 2006793,
                "content": [
                    {
                        "username": "squidify",
                        "content": "Why on earth do we have to do this with a linked list and not just a list? Linked lists are way more inconvenient and dare-I-say uncommon than lists in merge sorts."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You mean an array?"
                    },
                    {
                        "username": "xr738wxhr63634hrh7337",
                        "content": "how to f*cking tets and debug this"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "With a premium subscription."
                    },
                    {
                        "username": "AaronColdbrew",
                        "content": "Huh. It specifies using list nodes and then... asks for just an array as the returned value? Wouldn\\'t it just want the head of the newly sorted singly linked list returned? Weird."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The return value is a ListNode*"
                    },
                    {
                        "username": "Darshan119",
                        "content": "Can Anyone tell what is wrong is this code . use of an extra space . It is not passing all  the test cases ?\\n ` \\nif(list1) return list2; ``\\n        \\n        if(list2) return list1;\\n        \\n        ListNode* ans;\\n        \\n        while(list2 && list1){\\n            if(list1->val >= list2->val){\\n                ans = ans->next;\\n                ans->val = list2->val;\\n                list2 = list2->next;\\n            }\\n            else{\\n                ans->val = list1->val;\\n                ans = ans->next;\\n                list1 = list1->next;\\n            }\\n        }\\n\\n        while(list2){\\n            ans = ans->next;\\n            ans->val = list2->val;\\n            list2 = list2->next;\\n        }\\n        while(list1){\\n            ans = ans->next;\\n            ans->val = list1->val;\\n            list1 = list1->next;\\n        }\\n        return ans;\\n`\\n \\'"
                    },
                    {
                        "username": "ahrix268",
                        "content": "there're 3 problems in your code:\n\n* first: `if(list1) return list2;` and `if(list2) return list1;`. these checks are wrong. it should be `if(!list1) return list2;` or `if(list1 == null) return list2;`. btw, no need to check this edge case\n\n* 2nd: if you want to append `list1` to your answer `ans`, it will be `ans->next =  list1`. hence, the first loop shall look like:\n```\n    while(list1 && list2){\n        if(list1->val > list2->val){\n            ans->next = list2;\n            list2 = list2->next;\n        }\n        else{\n            ans->next = list1;\n            list1 = list1->next;\n        }\n        ans = ans->next;\n    }\n```\n\n* 3rd - the most important thing: you're only tracking the *tail* of the list, which is `ans` as your code. then when you return `ans` it's probably `null`. so, declare another node to keep the *fake head* of the answer, like this:\n```\n   ListNode* fakeHead = new ListNode(0);\n   ListNode* ans = fakeHead;\n\n   // ... your code\n\n   return fakeHead->next;\n```"
                    },
                    {
                        "username": "fxio",
                        "content": "Why can\\'t you say increasing order? non-decreasing seems unnecessarily complex"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Because there are duplicates."
                    },
                    {
                        "username": "run727",
                        "content": "The question is asking to return the head of the merged linked list, but why the output for example one is a whole linked list? "
                    },
                    {
                        "username": "Amar___",
                        "content": "since the head node is linked with the network once called, will run till the next pointer encounters NULL value. that\\'s why we are witnessing entire list"
                    },
                    {
                        "username": "user7110L",
                        "content": "\\nWhy do I push all of them into an array and sort the array doesn\\'t work?"
                    },
                    {
                        "username": "JaVlasov",
                        "content": "Hello everyone! \\nWhat is diffrenet between next java code:\\nListNode l1 = new ListNode();\\nListNode l2 = new ListNode(0);\\n\\nI think, it will be like: l1.val = null, l2.val = 0;\\nBut if we see in class ListLode, we will see integer, and integer by default is 0, not null;\\n\\nHow can i complete example 3 and example 2? I think in Java it\\'t the same."
                    },
                    {
                        "username": "ahrix268",
                        "content": "there's no difference at all\n\nprimitive data type `int` in Java has default value is `0`.\nwhen you declare `ListNode l1 = new ListNode();`, field `val` inside `l1` will take its default value is `0`. hence, it is same as `ListNode l1 = new ListNode(0);`\n\nbtw, the non-primitive type of integer is `Integer`. which is `null` when you declare but not assign it a value `Integer a;` (now, a is null)\n\nfor two examples above:\nexample 2: `list1 = null`, `list2 = null`\nexample 3: `list1 = null`, `list2 = {val = 0, next = null}`\nif you try `list2.val` or `list2.next` from example 2, it throws NullPointerException, because list2 is null. \nin example 3, you can do `list.val` or `list.next` because list2 is not null and you can get its fields\nso, they are not the same"
                    },
                    {
                        "username": "JaVlasov",
                        "content": "This q is not actuallity; list1 = [] in java means list1 = null;"
                    },
                    {
                        "username": "himanshuone",
                        "content": "Don\\'t Copy Just try to Understand or Ask CHATGPT to Describe:\\n\\n\\n`class Solution:\\n\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n\\n        dummy=ListNode()\\n\\n        tail=dummy\\n\\n        while list1 and list2:\\n            if list1.val<list2.val:\\n                tail.next=list1\\n                list1=list1.next\\n            else:\\n                tail.next=list2\\n                list2=list2.next\\n            tail=tail.next\\n\\n        if list1:\\n                tail.next=list1\\n        else:\\n                tail.next=list2\\n        return dummy.next`"
                    },
                    {
                        "username": "ahrix268",
                        "content": "don\\'t post any solution here, which is probably you\\'re not able to describe because you copy it from ChatGPT"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "kgyanender4",
                        "content": "def mergeTwoarray(list1,list2):\\n    for nums in list1:\\n        list2.append(nums)\\n    new_list=sorted(list2)\\n    return new_list\\n    \\nlist1=[1,2,4]\\nlist2=[1,3,4]\\nresult=mergeTwoarray(list1,list2)\\nprint(result)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 2005962,
                "content": [
                    {
                        "username": "squidify",
                        "content": "Why on earth do we have to do this with a linked list and not just a list? Linked lists are way more inconvenient and dare-I-say uncommon than lists in merge sorts."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You mean an array?"
                    },
                    {
                        "username": "xr738wxhr63634hrh7337",
                        "content": "how to f*cking tets and debug this"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "With a premium subscription."
                    },
                    {
                        "username": "AaronColdbrew",
                        "content": "Huh. It specifies using list nodes and then... asks for just an array as the returned value? Wouldn\\'t it just want the head of the newly sorted singly linked list returned? Weird."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The return value is a ListNode*"
                    },
                    {
                        "username": "Darshan119",
                        "content": "Can Anyone tell what is wrong is this code . use of an extra space . It is not passing all  the test cases ?\\n ` \\nif(list1) return list2; ``\\n        \\n        if(list2) return list1;\\n        \\n        ListNode* ans;\\n        \\n        while(list2 && list1){\\n            if(list1->val >= list2->val){\\n                ans = ans->next;\\n                ans->val = list2->val;\\n                list2 = list2->next;\\n            }\\n            else{\\n                ans->val = list1->val;\\n                ans = ans->next;\\n                list1 = list1->next;\\n            }\\n        }\\n\\n        while(list2){\\n            ans = ans->next;\\n            ans->val = list2->val;\\n            list2 = list2->next;\\n        }\\n        while(list1){\\n            ans = ans->next;\\n            ans->val = list1->val;\\n            list1 = list1->next;\\n        }\\n        return ans;\\n`\\n \\'"
                    },
                    {
                        "username": "ahrix268",
                        "content": "there're 3 problems in your code:\n\n* first: `if(list1) return list2;` and `if(list2) return list1;`. these checks are wrong. it should be `if(!list1) return list2;` or `if(list1 == null) return list2;`. btw, no need to check this edge case\n\n* 2nd: if you want to append `list1` to your answer `ans`, it will be `ans->next =  list1`. hence, the first loop shall look like:\n```\n    while(list1 && list2){\n        if(list1->val > list2->val){\n            ans->next = list2;\n            list2 = list2->next;\n        }\n        else{\n            ans->next = list1;\n            list1 = list1->next;\n        }\n        ans = ans->next;\n    }\n```\n\n* 3rd - the most important thing: you're only tracking the *tail* of the list, which is `ans` as your code. then when you return `ans` it's probably `null`. so, declare another node to keep the *fake head* of the answer, like this:\n```\n   ListNode* fakeHead = new ListNode(0);\n   ListNode* ans = fakeHead;\n\n   // ... your code\n\n   return fakeHead->next;\n```"
                    },
                    {
                        "username": "fxio",
                        "content": "Why can\\'t you say increasing order? non-decreasing seems unnecessarily complex"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Because there are duplicates."
                    },
                    {
                        "username": "run727",
                        "content": "The question is asking to return the head of the merged linked list, but why the output for example one is a whole linked list? "
                    },
                    {
                        "username": "Amar___",
                        "content": "since the head node is linked with the network once called, will run till the next pointer encounters NULL value. that\\'s why we are witnessing entire list"
                    },
                    {
                        "username": "user7110L",
                        "content": "\\nWhy do I push all of them into an array and sort the array doesn\\'t work?"
                    },
                    {
                        "username": "JaVlasov",
                        "content": "Hello everyone! \\nWhat is diffrenet between next java code:\\nListNode l1 = new ListNode();\\nListNode l2 = new ListNode(0);\\n\\nI think, it will be like: l1.val = null, l2.val = 0;\\nBut if we see in class ListLode, we will see integer, and integer by default is 0, not null;\\n\\nHow can i complete example 3 and example 2? I think in Java it\\'t the same."
                    },
                    {
                        "username": "ahrix268",
                        "content": "there's no difference at all\n\nprimitive data type `int` in Java has default value is `0`.\nwhen you declare `ListNode l1 = new ListNode();`, field `val` inside `l1` will take its default value is `0`. hence, it is same as `ListNode l1 = new ListNode(0);`\n\nbtw, the non-primitive type of integer is `Integer`. which is `null` when you declare but not assign it a value `Integer a;` (now, a is null)\n\nfor two examples above:\nexample 2: `list1 = null`, `list2 = null`\nexample 3: `list1 = null`, `list2 = {val = 0, next = null}`\nif you try `list2.val` or `list2.next` from example 2, it throws NullPointerException, because list2 is null. \nin example 3, you can do `list.val` or `list.next` because list2 is not null and you can get its fields\nso, they are not the same"
                    },
                    {
                        "username": "JaVlasov",
                        "content": "This q is not actuallity; list1 = [] in java means list1 = null;"
                    },
                    {
                        "username": "himanshuone",
                        "content": "Don\\'t Copy Just try to Understand or Ask CHATGPT to Describe:\\n\\n\\n`class Solution:\\n\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n\\n        dummy=ListNode()\\n\\n        tail=dummy\\n\\n        while list1 and list2:\\n            if list1.val<list2.val:\\n                tail.next=list1\\n                list1=list1.next\\n            else:\\n                tail.next=list2\\n                list2=list2.next\\n            tail=tail.next\\n\\n        if list1:\\n                tail.next=list1\\n        else:\\n                tail.next=list2\\n        return dummy.next`"
                    },
                    {
                        "username": "ahrix268",
                        "content": "don\\'t post any solution here, which is probably you\\'re not able to describe because you copy it from ChatGPT"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "kgyanender4",
                        "content": "def mergeTwoarray(list1,list2):\\n    for nums in list1:\\n        list2.append(nums)\\n    new_list=sorted(list2)\\n    return new_list\\n    \\nlist1=[1,2,4]\\nlist2=[1,3,4]\\nresult=mergeTwoarray(list1,list2)\\nprint(result)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 2004596,
                "content": [
                    {
                        "username": "squidify",
                        "content": "Why on earth do we have to do this with a linked list and not just a list? Linked lists are way more inconvenient and dare-I-say uncommon than lists in merge sorts."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You mean an array?"
                    },
                    {
                        "username": "xr738wxhr63634hrh7337",
                        "content": "how to f*cking tets and debug this"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "With a premium subscription."
                    },
                    {
                        "username": "AaronColdbrew",
                        "content": "Huh. It specifies using list nodes and then... asks for just an array as the returned value? Wouldn\\'t it just want the head of the newly sorted singly linked list returned? Weird."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The return value is a ListNode*"
                    },
                    {
                        "username": "Darshan119",
                        "content": "Can Anyone tell what is wrong is this code . use of an extra space . It is not passing all  the test cases ?\\n ` \\nif(list1) return list2; ``\\n        \\n        if(list2) return list1;\\n        \\n        ListNode* ans;\\n        \\n        while(list2 && list1){\\n            if(list1->val >= list2->val){\\n                ans = ans->next;\\n                ans->val = list2->val;\\n                list2 = list2->next;\\n            }\\n            else{\\n                ans->val = list1->val;\\n                ans = ans->next;\\n                list1 = list1->next;\\n            }\\n        }\\n\\n        while(list2){\\n            ans = ans->next;\\n            ans->val = list2->val;\\n            list2 = list2->next;\\n        }\\n        while(list1){\\n            ans = ans->next;\\n            ans->val = list1->val;\\n            list1 = list1->next;\\n        }\\n        return ans;\\n`\\n \\'"
                    },
                    {
                        "username": "ahrix268",
                        "content": "there're 3 problems in your code:\n\n* first: `if(list1) return list2;` and `if(list2) return list1;`. these checks are wrong. it should be `if(!list1) return list2;` or `if(list1 == null) return list2;`. btw, no need to check this edge case\n\n* 2nd: if you want to append `list1` to your answer `ans`, it will be `ans->next =  list1`. hence, the first loop shall look like:\n```\n    while(list1 && list2){\n        if(list1->val > list2->val){\n            ans->next = list2;\n            list2 = list2->next;\n        }\n        else{\n            ans->next = list1;\n            list1 = list1->next;\n        }\n        ans = ans->next;\n    }\n```\n\n* 3rd - the most important thing: you're only tracking the *tail* of the list, which is `ans` as your code. then when you return `ans` it's probably `null`. so, declare another node to keep the *fake head* of the answer, like this:\n```\n   ListNode* fakeHead = new ListNode(0);\n   ListNode* ans = fakeHead;\n\n   // ... your code\n\n   return fakeHead->next;\n```"
                    },
                    {
                        "username": "fxio",
                        "content": "Why can\\'t you say increasing order? non-decreasing seems unnecessarily complex"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Because there are duplicates."
                    },
                    {
                        "username": "run727",
                        "content": "The question is asking to return the head of the merged linked list, but why the output for example one is a whole linked list? "
                    },
                    {
                        "username": "Amar___",
                        "content": "since the head node is linked with the network once called, will run till the next pointer encounters NULL value. that\\'s why we are witnessing entire list"
                    },
                    {
                        "username": "user7110L",
                        "content": "\\nWhy do I push all of them into an array and sort the array doesn\\'t work?"
                    },
                    {
                        "username": "JaVlasov",
                        "content": "Hello everyone! \\nWhat is diffrenet between next java code:\\nListNode l1 = new ListNode();\\nListNode l2 = new ListNode(0);\\n\\nI think, it will be like: l1.val = null, l2.val = 0;\\nBut if we see in class ListLode, we will see integer, and integer by default is 0, not null;\\n\\nHow can i complete example 3 and example 2? I think in Java it\\'t the same."
                    },
                    {
                        "username": "ahrix268",
                        "content": "there's no difference at all\n\nprimitive data type `int` in Java has default value is `0`.\nwhen you declare `ListNode l1 = new ListNode();`, field `val` inside `l1` will take its default value is `0`. hence, it is same as `ListNode l1 = new ListNode(0);`\n\nbtw, the non-primitive type of integer is `Integer`. which is `null` when you declare but not assign it a value `Integer a;` (now, a is null)\n\nfor two examples above:\nexample 2: `list1 = null`, `list2 = null`\nexample 3: `list1 = null`, `list2 = {val = 0, next = null}`\nif you try `list2.val` or `list2.next` from example 2, it throws NullPointerException, because list2 is null. \nin example 3, you can do `list.val` or `list.next` because list2 is not null and you can get its fields\nso, they are not the same"
                    },
                    {
                        "username": "JaVlasov",
                        "content": "This q is not actuallity; list1 = [] in java means list1 = null;"
                    },
                    {
                        "username": "himanshuone",
                        "content": "Don\\'t Copy Just try to Understand or Ask CHATGPT to Describe:\\n\\n\\n`class Solution:\\n\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n\\n        dummy=ListNode()\\n\\n        tail=dummy\\n\\n        while list1 and list2:\\n            if list1.val<list2.val:\\n                tail.next=list1\\n                list1=list1.next\\n            else:\\n                tail.next=list2\\n                list2=list2.next\\n            tail=tail.next\\n\\n        if list1:\\n                tail.next=list1\\n        else:\\n                tail.next=list2\\n        return dummy.next`"
                    },
                    {
                        "username": "ahrix268",
                        "content": "don\\'t post any solution here, which is probably you\\'re not able to describe because you copy it from ChatGPT"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "kgyanender4",
                        "content": "def mergeTwoarray(list1,list2):\\n    for nums in list1:\\n        list2.append(nums)\\n    new_list=sorted(list2)\\n    return new_list\\n    \\nlist1=[1,2,4]\\nlist2=[1,3,4]\\nresult=mergeTwoarray(list1,list2)\\nprint(result)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1991979,
                "content": [
                    {
                        "username": "squidify",
                        "content": "Why on earth do we have to do this with a linked list and not just a list? Linked lists are way more inconvenient and dare-I-say uncommon than lists in merge sorts."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You mean an array?"
                    },
                    {
                        "username": "xr738wxhr63634hrh7337",
                        "content": "how to f*cking tets and debug this"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "With a premium subscription."
                    },
                    {
                        "username": "AaronColdbrew",
                        "content": "Huh. It specifies using list nodes and then... asks for just an array as the returned value? Wouldn\\'t it just want the head of the newly sorted singly linked list returned? Weird."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The return value is a ListNode*"
                    },
                    {
                        "username": "Darshan119",
                        "content": "Can Anyone tell what is wrong is this code . use of an extra space . It is not passing all  the test cases ?\\n ` \\nif(list1) return list2; ``\\n        \\n        if(list2) return list1;\\n        \\n        ListNode* ans;\\n        \\n        while(list2 && list1){\\n            if(list1->val >= list2->val){\\n                ans = ans->next;\\n                ans->val = list2->val;\\n                list2 = list2->next;\\n            }\\n            else{\\n                ans->val = list1->val;\\n                ans = ans->next;\\n                list1 = list1->next;\\n            }\\n        }\\n\\n        while(list2){\\n            ans = ans->next;\\n            ans->val = list2->val;\\n            list2 = list2->next;\\n        }\\n        while(list1){\\n            ans = ans->next;\\n            ans->val = list1->val;\\n            list1 = list1->next;\\n        }\\n        return ans;\\n`\\n \\'"
                    },
                    {
                        "username": "ahrix268",
                        "content": "there're 3 problems in your code:\n\n* first: `if(list1) return list2;` and `if(list2) return list1;`. these checks are wrong. it should be `if(!list1) return list2;` or `if(list1 == null) return list2;`. btw, no need to check this edge case\n\n* 2nd: if you want to append `list1` to your answer `ans`, it will be `ans->next =  list1`. hence, the first loop shall look like:\n```\n    while(list1 && list2){\n        if(list1->val > list2->val){\n            ans->next = list2;\n            list2 = list2->next;\n        }\n        else{\n            ans->next = list1;\n            list1 = list1->next;\n        }\n        ans = ans->next;\n    }\n```\n\n* 3rd - the most important thing: you're only tracking the *tail* of the list, which is `ans` as your code. then when you return `ans` it's probably `null`. so, declare another node to keep the *fake head* of the answer, like this:\n```\n   ListNode* fakeHead = new ListNode(0);\n   ListNode* ans = fakeHead;\n\n   // ... your code\n\n   return fakeHead->next;\n```"
                    },
                    {
                        "username": "fxio",
                        "content": "Why can\\'t you say increasing order? non-decreasing seems unnecessarily complex"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Because there are duplicates."
                    },
                    {
                        "username": "run727",
                        "content": "The question is asking to return the head of the merged linked list, but why the output for example one is a whole linked list? "
                    },
                    {
                        "username": "Amar___",
                        "content": "since the head node is linked with the network once called, will run till the next pointer encounters NULL value. that\\'s why we are witnessing entire list"
                    },
                    {
                        "username": "user7110L",
                        "content": "\\nWhy do I push all of them into an array and sort the array doesn\\'t work?"
                    },
                    {
                        "username": "JaVlasov",
                        "content": "Hello everyone! \\nWhat is diffrenet between next java code:\\nListNode l1 = new ListNode();\\nListNode l2 = new ListNode(0);\\n\\nI think, it will be like: l1.val = null, l2.val = 0;\\nBut if we see in class ListLode, we will see integer, and integer by default is 0, not null;\\n\\nHow can i complete example 3 and example 2? I think in Java it\\'t the same."
                    },
                    {
                        "username": "ahrix268",
                        "content": "there's no difference at all\n\nprimitive data type `int` in Java has default value is `0`.\nwhen you declare `ListNode l1 = new ListNode();`, field `val` inside `l1` will take its default value is `0`. hence, it is same as `ListNode l1 = new ListNode(0);`\n\nbtw, the non-primitive type of integer is `Integer`. which is `null` when you declare but not assign it a value `Integer a;` (now, a is null)\n\nfor two examples above:\nexample 2: `list1 = null`, `list2 = null`\nexample 3: `list1 = null`, `list2 = {val = 0, next = null}`\nif you try `list2.val` or `list2.next` from example 2, it throws NullPointerException, because list2 is null. \nin example 3, you can do `list.val` or `list.next` because list2 is not null and you can get its fields\nso, they are not the same"
                    },
                    {
                        "username": "JaVlasov",
                        "content": "This q is not actuallity; list1 = [] in java means list1 = null;"
                    },
                    {
                        "username": "himanshuone",
                        "content": "Don\\'t Copy Just try to Understand or Ask CHATGPT to Describe:\\n\\n\\n`class Solution:\\n\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\\n\\n        dummy=ListNode()\\n\\n        tail=dummy\\n\\n        while list1 and list2:\\n            if list1.val<list2.val:\\n                tail.next=list1\\n                list1=list1.next\\n            else:\\n                tail.next=list2\\n                list2=list2.next\\n            tail=tail.next\\n\\n        if list1:\\n                tail.next=list1\\n        else:\\n                tail.next=list2\\n        return dummy.next`"
                    },
                    {
                        "username": "ahrix268",
                        "content": "don\\'t post any solution here, which is probably you\\'re not able to describe because you copy it from ChatGPT"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "kgyanender4",
                        "content": "def mergeTwoarray(list1,list2):\\n    for nums in list1:\\n        list2.append(nums)\\n    new_list=sorted(list2)\\n    return new_list\\n    \\nlist1=[1,2,4]\\nlist2=[1,3,4]\\nresult=mergeTwoarray(list1,list2)\\nprint(result)\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1977719,
                "content": [
                    {
                        "username": "mafras85",
                        "content": "I don\\'t understand why these question cannot be solved using ordinary lists. I am not that experienced with linked lists and the solutions would be totally different, not even close in logic. As a result, I have to skip all the questions that are based on linked lists. I just had this question in an interview with ordinary normal lists. And I was not able to answer that fully because I skipped this here because it\\'s based on linked lists. It\\'s so frustrating! "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Learn what a linked list is."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "here we are not taking the value of the head or traversing node of the linked list we are simply doing  \\n                                                            tail.next = list1;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "ivstefanov",
                        "content": "#include <iostream>\\n#include <list>\\n#include <string>\\n\\nint main(){\\n    std::string sCommand(\"\");\\n    std::list<int> nList_1;\\n    std::list<int> nList_2;\\n    int nCounter=0;\\n    \\n    std::cout << \"\\\\n---Insert elements into LIST 1---\" << std::endl;\\n    std::cout << \"---Type \\'End\\' to stop insertion---\" << std::endl;\\n    while(true){\\n        std::cout<< \"Element[\" << nCounter << \"]: \";\\n        std::cin >> sCommand;\\n        \\n        if(sCommand!=\"End\"){\\n            nList_1.push_back(std::stoi(sCommand));\\n        }else{\\n            break;\\n        }\\n        nCounter++;\\n    }\\n    \\n    std::cout << std::endl;\\n    sCommand = \"\";\\n    nCounter = 0;\\n\\n    std::cout << \"---Insert elements into LIST 2---\" << std::endl;\\n    std::cout << \"---Type \\'End\\' to stop insertion---\" << std::endl;\\n    while(true){\\n        std::cout<< \"Element[\" << nCounter << \"]: \";\\n        std::cin >> sCommand;\\n        if(sCommand!=\"End\"){\\n            nList_2.push_back(std::stoi(sCommand));\\n        }else{\\n            break;\\n        }\\n        nCounter++;\\n    }\\n    \\n    nList_1.sort();\\n    nList_2.sort();\\n\\n    std::cout << \"\\\\n---After sorting---\" << std::endl;\\n    std::cout << \"[List 1]: \";\\n    for (int element : nList_1) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << \"\\\\n[List 2]: \";\\n    for (int element : nList_2) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << std::endl;\\n    \\n    std::cout << \"\\\\n---Merge lists---\";\\n    nList_1.merge(nList_2);\\n    nList_1.sort();\\n    std::cout << \"\\\\n[Merged List]: \";\\n    for (int element : nList_1) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << std::endl;\\n\\n\\n    return 0;\\n}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Dhirojkumarsahu",
                        "content": "how to approach this problem"
                    },
                    {
                        "username": "StrawhatLuffy2502",
                        "content": "Try to merge the linked lists like how u merge two subarrays in merge sort."
                    },
                    {
                        "username": "dipesh1203",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public static ListNode merge(ListNode list1, ListNode list2,ListNode finalList){\\n        if(list1==null){\\n            while(list2!=null){\\n                finalList.next=list2;\\n                list2=list2.next;\\n            }\\n            return finalList;\\n        }\\n        else if(list2==null){\\n            finalList.next=list1;\\n            while(list1!=null){\\n                finalList.next=list1;\\n                list1=list1.next;\\n            }\\n            return finalList;\\n        }\\n        if(list1.val<=list2.val){\\n            finalList.next=list1;\\n            merge(list1.next,list2,finalList.next);\\n        }else{\\n            finalList.next=list2;\\n            merge(list1,list2.next,finalList.next);\\n        }\\n        return finalList;\\n        \\n    }\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        int value=0;\\n        if (list1 == null) {\\n            return list2;\\n        }\\n        if (list2 == null) {\\n            return list1;\\n        }\\n        if(list1.val<=list2.val){\\n            value = list1.val;\\n            list1=list1.next;\\n        }else{\\n            value = list2.val;\\n            list2=list2.next;\\n        }\\n        ListNode finalList=new ListNode(value);\\n        return merge(list1,list2,finalList);\\n        \\n    }\\n}\\nthis above code not working for test case\\nlist1=[-9,3]\\nlist2=[5,7]\\nplease anyone can help me where is error in above code"
                    },
                    {
                        "username": "rohithvarma1510",
                        "content": "Do we need to learn linked lists to attempt this cant we solve it without it \\n"
                    },
                    {
                        "username": "dipesh1203",
                        "content": "Yes yout need to study linkedlist  before attempting this question"
                    },
                    {
                        "username": "Amit18755",
                        "content": "should i merged these two lists into another list or merged them into existing list.\\nAnyone ??"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You link the nodes of the two lists in the desired order. You don\\'t need to copy them."
                    },
                    {
                        "username": "dipesh1203",
                        "content": "You should merge into new list by 2 counter approach"
                    },
                    {
                        "username": "JekoAZE",
                        "content": "var mergeTwoLists = function(list1, list2) {\\n    const output = [];\\n    let i = 0;\\n    let j = 0;\\n    const length1 = list1.length;\\n    const length2 = list2.length;\\n  \\n    for (; i < length1 && j < length2; ) {\\n      if (list1[i] < list2[j]) {\\n        output.push(list1[i]);                     \\n        i++;\\n      } else {\\n        output.push(list2[j]);\\n        j++;\\n      }\\n    }\\n  \\n    for (; i < length1; i++) {\\n      output.push(list1[i]);\\n    }\\n  \\n    for (; j < length2; j++) {\\n      output.push(list2[j]);\\n    }\\n  \\n    return output;\\n  };\\n  \\n  const list1 = [1, 2, 4];\\n  const list2 = [1, 3, 4];\\n  const result = mergeTwoLists(list1, list2);\\n  \\n  console.log(result);\\n  // output = [1, 1, 2, 3, 4, 4]\\n\\nI think everything i wrote ok. But i cant write to solution section. They gives me some issues\\n  "
                    },
                    {
                        "username": "a098707730135",
                        "content": "I am a newer of Python. Could anyone answer this basic problem? I\\'ve been stuck with Leetcode which always gave me a lot of problems that were able to be run on my computer cmd. Like this one: \\n `list1 = input()\\nlist2 = input()\\nres = Solution()\\nroot = Node(None)\\nroot = res.mergeTwoLists(str(list1), str(list2))`\\n\\n `class Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        list1 = [list1[i] for i in range(len(list1)) if list1[i] != \",\" and list1[i] != \" \"]\\n        list2 = [list2[i] for i in range(len(list2)) if list2[i] != \",\" and list2[i] != \" \"]`\\n\\nBut I finally got the error:\\n `TypeError: object of type \\'NoneType\\' has no len()\\n    list1 = [list1[i] for i in range(len(list1)) if list1[i] != \",\" and list1[i] != \" \"]`\\n\\nWhy? Wasn\\'t Len() called to calculate the length of String? That will be great if anyone could answer that!  "
                    }
                ]
            },
            {
                "id": 1976326,
                "content": [
                    {
                        "username": "mafras85",
                        "content": "I don\\'t understand why these question cannot be solved using ordinary lists. I am not that experienced with linked lists and the solutions would be totally different, not even close in logic. As a result, I have to skip all the questions that are based on linked lists. I just had this question in an interview with ordinary normal lists. And I was not able to answer that fully because I skipped this here because it\\'s based on linked lists. It\\'s so frustrating! "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Learn what a linked list is."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "here we are not taking the value of the head or traversing node of the linked list we are simply doing  \\n                                                            tail.next = list1;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "ivstefanov",
                        "content": "#include <iostream>\\n#include <list>\\n#include <string>\\n\\nint main(){\\n    std::string sCommand(\"\");\\n    std::list<int> nList_1;\\n    std::list<int> nList_2;\\n    int nCounter=0;\\n    \\n    std::cout << \"\\\\n---Insert elements into LIST 1---\" << std::endl;\\n    std::cout << \"---Type \\'End\\' to stop insertion---\" << std::endl;\\n    while(true){\\n        std::cout<< \"Element[\" << nCounter << \"]: \";\\n        std::cin >> sCommand;\\n        \\n        if(sCommand!=\"End\"){\\n            nList_1.push_back(std::stoi(sCommand));\\n        }else{\\n            break;\\n        }\\n        nCounter++;\\n    }\\n    \\n    std::cout << std::endl;\\n    sCommand = \"\";\\n    nCounter = 0;\\n\\n    std::cout << \"---Insert elements into LIST 2---\" << std::endl;\\n    std::cout << \"---Type \\'End\\' to stop insertion---\" << std::endl;\\n    while(true){\\n        std::cout<< \"Element[\" << nCounter << \"]: \";\\n        std::cin >> sCommand;\\n        if(sCommand!=\"End\"){\\n            nList_2.push_back(std::stoi(sCommand));\\n        }else{\\n            break;\\n        }\\n        nCounter++;\\n    }\\n    \\n    nList_1.sort();\\n    nList_2.sort();\\n\\n    std::cout << \"\\\\n---After sorting---\" << std::endl;\\n    std::cout << \"[List 1]: \";\\n    for (int element : nList_1) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << \"\\\\n[List 2]: \";\\n    for (int element : nList_2) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << std::endl;\\n    \\n    std::cout << \"\\\\n---Merge lists---\";\\n    nList_1.merge(nList_2);\\n    nList_1.sort();\\n    std::cout << \"\\\\n[Merged List]: \";\\n    for (int element : nList_1) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << std::endl;\\n\\n\\n    return 0;\\n}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Dhirojkumarsahu",
                        "content": "how to approach this problem"
                    },
                    {
                        "username": "StrawhatLuffy2502",
                        "content": "Try to merge the linked lists like how u merge two subarrays in merge sort."
                    },
                    {
                        "username": "dipesh1203",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public static ListNode merge(ListNode list1, ListNode list2,ListNode finalList){\\n        if(list1==null){\\n            while(list2!=null){\\n                finalList.next=list2;\\n                list2=list2.next;\\n            }\\n            return finalList;\\n        }\\n        else if(list2==null){\\n            finalList.next=list1;\\n            while(list1!=null){\\n                finalList.next=list1;\\n                list1=list1.next;\\n            }\\n            return finalList;\\n        }\\n        if(list1.val<=list2.val){\\n            finalList.next=list1;\\n            merge(list1.next,list2,finalList.next);\\n        }else{\\n            finalList.next=list2;\\n            merge(list1,list2.next,finalList.next);\\n        }\\n        return finalList;\\n        \\n    }\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        int value=0;\\n        if (list1 == null) {\\n            return list2;\\n        }\\n        if (list2 == null) {\\n            return list1;\\n        }\\n        if(list1.val<=list2.val){\\n            value = list1.val;\\n            list1=list1.next;\\n        }else{\\n            value = list2.val;\\n            list2=list2.next;\\n        }\\n        ListNode finalList=new ListNode(value);\\n        return merge(list1,list2,finalList);\\n        \\n    }\\n}\\nthis above code not working for test case\\nlist1=[-9,3]\\nlist2=[5,7]\\nplease anyone can help me where is error in above code"
                    },
                    {
                        "username": "rohithvarma1510",
                        "content": "Do we need to learn linked lists to attempt this cant we solve it without it \\n"
                    },
                    {
                        "username": "dipesh1203",
                        "content": "Yes yout need to study linkedlist  before attempting this question"
                    },
                    {
                        "username": "Amit18755",
                        "content": "should i merged these two lists into another list or merged them into existing list.\\nAnyone ??"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You link the nodes of the two lists in the desired order. You don\\'t need to copy them."
                    },
                    {
                        "username": "dipesh1203",
                        "content": "You should merge into new list by 2 counter approach"
                    },
                    {
                        "username": "JekoAZE",
                        "content": "var mergeTwoLists = function(list1, list2) {\\n    const output = [];\\n    let i = 0;\\n    let j = 0;\\n    const length1 = list1.length;\\n    const length2 = list2.length;\\n  \\n    for (; i < length1 && j < length2; ) {\\n      if (list1[i] < list2[j]) {\\n        output.push(list1[i]);                     \\n        i++;\\n      } else {\\n        output.push(list2[j]);\\n        j++;\\n      }\\n    }\\n  \\n    for (; i < length1; i++) {\\n      output.push(list1[i]);\\n    }\\n  \\n    for (; j < length2; j++) {\\n      output.push(list2[j]);\\n    }\\n  \\n    return output;\\n  };\\n  \\n  const list1 = [1, 2, 4];\\n  const list2 = [1, 3, 4];\\n  const result = mergeTwoLists(list1, list2);\\n  \\n  console.log(result);\\n  // output = [1, 1, 2, 3, 4, 4]\\n\\nI think everything i wrote ok. But i cant write to solution section. They gives me some issues\\n  "
                    },
                    {
                        "username": "a098707730135",
                        "content": "I am a newer of Python. Could anyone answer this basic problem? I\\'ve been stuck with Leetcode which always gave me a lot of problems that were able to be run on my computer cmd. Like this one: \\n `list1 = input()\\nlist2 = input()\\nres = Solution()\\nroot = Node(None)\\nroot = res.mergeTwoLists(str(list1), str(list2))`\\n\\n `class Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        list1 = [list1[i] for i in range(len(list1)) if list1[i] != \",\" and list1[i] != \" \"]\\n        list2 = [list2[i] for i in range(len(list2)) if list2[i] != \",\" and list2[i] != \" \"]`\\n\\nBut I finally got the error:\\n `TypeError: object of type \\'NoneType\\' has no len()\\n    list1 = [list1[i] for i in range(len(list1)) if list1[i] != \",\" and list1[i] != \" \"]`\\n\\nWhy? Wasn\\'t Len() called to calculate the length of String? That will be great if anyone could answer that!  "
                    }
                ]
            },
            {
                "id": 1975231,
                "content": [
                    {
                        "username": "mafras85",
                        "content": "I don\\'t understand why these question cannot be solved using ordinary lists. I am not that experienced with linked lists and the solutions would be totally different, not even close in logic. As a result, I have to skip all the questions that are based on linked lists. I just had this question in an interview with ordinary normal lists. And I was not able to answer that fully because I skipped this here because it\\'s based on linked lists. It\\'s so frustrating! "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Learn what a linked list is."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "here we are not taking the value of the head or traversing node of the linked list we are simply doing  \\n                                                            tail.next = list1;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "ivstefanov",
                        "content": "#include <iostream>\\n#include <list>\\n#include <string>\\n\\nint main(){\\n    std::string sCommand(\"\");\\n    std::list<int> nList_1;\\n    std::list<int> nList_2;\\n    int nCounter=0;\\n    \\n    std::cout << \"\\\\n---Insert elements into LIST 1---\" << std::endl;\\n    std::cout << \"---Type \\'End\\' to stop insertion---\" << std::endl;\\n    while(true){\\n        std::cout<< \"Element[\" << nCounter << \"]: \";\\n        std::cin >> sCommand;\\n        \\n        if(sCommand!=\"End\"){\\n            nList_1.push_back(std::stoi(sCommand));\\n        }else{\\n            break;\\n        }\\n        nCounter++;\\n    }\\n    \\n    std::cout << std::endl;\\n    sCommand = \"\";\\n    nCounter = 0;\\n\\n    std::cout << \"---Insert elements into LIST 2---\" << std::endl;\\n    std::cout << \"---Type \\'End\\' to stop insertion---\" << std::endl;\\n    while(true){\\n        std::cout<< \"Element[\" << nCounter << \"]: \";\\n        std::cin >> sCommand;\\n        if(sCommand!=\"End\"){\\n            nList_2.push_back(std::stoi(sCommand));\\n        }else{\\n            break;\\n        }\\n        nCounter++;\\n    }\\n    \\n    nList_1.sort();\\n    nList_2.sort();\\n\\n    std::cout << \"\\\\n---After sorting---\" << std::endl;\\n    std::cout << \"[List 1]: \";\\n    for (int element : nList_1) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << \"\\\\n[List 2]: \";\\n    for (int element : nList_2) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << std::endl;\\n    \\n    std::cout << \"\\\\n---Merge lists---\";\\n    nList_1.merge(nList_2);\\n    nList_1.sort();\\n    std::cout << \"\\\\n[Merged List]: \";\\n    for (int element : nList_1) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << std::endl;\\n\\n\\n    return 0;\\n}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Dhirojkumarsahu",
                        "content": "how to approach this problem"
                    },
                    {
                        "username": "StrawhatLuffy2502",
                        "content": "Try to merge the linked lists like how u merge two subarrays in merge sort."
                    },
                    {
                        "username": "dipesh1203",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public static ListNode merge(ListNode list1, ListNode list2,ListNode finalList){\\n        if(list1==null){\\n            while(list2!=null){\\n                finalList.next=list2;\\n                list2=list2.next;\\n            }\\n            return finalList;\\n        }\\n        else if(list2==null){\\n            finalList.next=list1;\\n            while(list1!=null){\\n                finalList.next=list1;\\n                list1=list1.next;\\n            }\\n            return finalList;\\n        }\\n        if(list1.val<=list2.val){\\n            finalList.next=list1;\\n            merge(list1.next,list2,finalList.next);\\n        }else{\\n            finalList.next=list2;\\n            merge(list1,list2.next,finalList.next);\\n        }\\n        return finalList;\\n        \\n    }\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        int value=0;\\n        if (list1 == null) {\\n            return list2;\\n        }\\n        if (list2 == null) {\\n            return list1;\\n        }\\n        if(list1.val<=list2.val){\\n            value = list1.val;\\n            list1=list1.next;\\n        }else{\\n            value = list2.val;\\n            list2=list2.next;\\n        }\\n        ListNode finalList=new ListNode(value);\\n        return merge(list1,list2,finalList);\\n        \\n    }\\n}\\nthis above code not working for test case\\nlist1=[-9,3]\\nlist2=[5,7]\\nplease anyone can help me where is error in above code"
                    },
                    {
                        "username": "rohithvarma1510",
                        "content": "Do we need to learn linked lists to attempt this cant we solve it without it \\n"
                    },
                    {
                        "username": "dipesh1203",
                        "content": "Yes yout need to study linkedlist  before attempting this question"
                    },
                    {
                        "username": "Amit18755",
                        "content": "should i merged these two lists into another list or merged them into existing list.\\nAnyone ??"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You link the nodes of the two lists in the desired order. You don\\'t need to copy them."
                    },
                    {
                        "username": "dipesh1203",
                        "content": "You should merge into new list by 2 counter approach"
                    },
                    {
                        "username": "JekoAZE",
                        "content": "var mergeTwoLists = function(list1, list2) {\\n    const output = [];\\n    let i = 0;\\n    let j = 0;\\n    const length1 = list1.length;\\n    const length2 = list2.length;\\n  \\n    for (; i < length1 && j < length2; ) {\\n      if (list1[i] < list2[j]) {\\n        output.push(list1[i]);                     \\n        i++;\\n      } else {\\n        output.push(list2[j]);\\n        j++;\\n      }\\n    }\\n  \\n    for (; i < length1; i++) {\\n      output.push(list1[i]);\\n    }\\n  \\n    for (; j < length2; j++) {\\n      output.push(list2[j]);\\n    }\\n  \\n    return output;\\n  };\\n  \\n  const list1 = [1, 2, 4];\\n  const list2 = [1, 3, 4];\\n  const result = mergeTwoLists(list1, list2);\\n  \\n  console.log(result);\\n  // output = [1, 1, 2, 3, 4, 4]\\n\\nI think everything i wrote ok. But i cant write to solution section. They gives me some issues\\n  "
                    },
                    {
                        "username": "a098707730135",
                        "content": "I am a newer of Python. Could anyone answer this basic problem? I\\'ve been stuck with Leetcode which always gave me a lot of problems that were able to be run on my computer cmd. Like this one: \\n `list1 = input()\\nlist2 = input()\\nres = Solution()\\nroot = Node(None)\\nroot = res.mergeTwoLists(str(list1), str(list2))`\\n\\n `class Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        list1 = [list1[i] for i in range(len(list1)) if list1[i] != \",\" and list1[i] != \" \"]\\n        list2 = [list2[i] for i in range(len(list2)) if list2[i] != \",\" and list2[i] != \" \"]`\\n\\nBut I finally got the error:\\n `TypeError: object of type \\'NoneType\\' has no len()\\n    list1 = [list1[i] for i in range(len(list1)) if list1[i] != \",\" and list1[i] != \" \"]`\\n\\nWhy? Wasn\\'t Len() called to calculate the length of String? That will be great if anyone could answer that!  "
                    }
                ]
            },
            {
                "id": 1964397,
                "content": [
                    {
                        "username": "mafras85",
                        "content": "I don\\'t understand why these question cannot be solved using ordinary lists. I am not that experienced with linked lists and the solutions would be totally different, not even close in logic. As a result, I have to skip all the questions that are based on linked lists. I just had this question in an interview with ordinary normal lists. And I was not able to answer that fully because I skipped this here because it\\'s based on linked lists. It\\'s so frustrating! "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Learn what a linked list is."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "here we are not taking the value of the head or traversing node of the linked list we are simply doing  \\n                                                            tail.next = list1;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "ivstefanov",
                        "content": "#include <iostream>\\n#include <list>\\n#include <string>\\n\\nint main(){\\n    std::string sCommand(\"\");\\n    std::list<int> nList_1;\\n    std::list<int> nList_2;\\n    int nCounter=0;\\n    \\n    std::cout << \"\\\\n---Insert elements into LIST 1---\" << std::endl;\\n    std::cout << \"---Type \\'End\\' to stop insertion---\" << std::endl;\\n    while(true){\\n        std::cout<< \"Element[\" << nCounter << \"]: \";\\n        std::cin >> sCommand;\\n        \\n        if(sCommand!=\"End\"){\\n            nList_1.push_back(std::stoi(sCommand));\\n        }else{\\n            break;\\n        }\\n        nCounter++;\\n    }\\n    \\n    std::cout << std::endl;\\n    sCommand = \"\";\\n    nCounter = 0;\\n\\n    std::cout << \"---Insert elements into LIST 2---\" << std::endl;\\n    std::cout << \"---Type \\'End\\' to stop insertion---\" << std::endl;\\n    while(true){\\n        std::cout<< \"Element[\" << nCounter << \"]: \";\\n        std::cin >> sCommand;\\n        if(sCommand!=\"End\"){\\n            nList_2.push_back(std::stoi(sCommand));\\n        }else{\\n            break;\\n        }\\n        nCounter++;\\n    }\\n    \\n    nList_1.sort();\\n    nList_2.sort();\\n\\n    std::cout << \"\\\\n---After sorting---\" << std::endl;\\n    std::cout << \"[List 1]: \";\\n    for (int element : nList_1) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << \"\\\\n[List 2]: \";\\n    for (int element : nList_2) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << std::endl;\\n    \\n    std::cout << \"\\\\n---Merge lists---\";\\n    nList_1.merge(nList_2);\\n    nList_1.sort();\\n    std::cout << \"\\\\n[Merged List]: \";\\n    for (int element : nList_1) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << std::endl;\\n\\n\\n    return 0;\\n}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Dhirojkumarsahu",
                        "content": "how to approach this problem"
                    },
                    {
                        "username": "StrawhatLuffy2502",
                        "content": "Try to merge the linked lists like how u merge two subarrays in merge sort."
                    },
                    {
                        "username": "dipesh1203",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public static ListNode merge(ListNode list1, ListNode list2,ListNode finalList){\\n        if(list1==null){\\n            while(list2!=null){\\n                finalList.next=list2;\\n                list2=list2.next;\\n            }\\n            return finalList;\\n        }\\n        else if(list2==null){\\n            finalList.next=list1;\\n            while(list1!=null){\\n                finalList.next=list1;\\n                list1=list1.next;\\n            }\\n            return finalList;\\n        }\\n        if(list1.val<=list2.val){\\n            finalList.next=list1;\\n            merge(list1.next,list2,finalList.next);\\n        }else{\\n            finalList.next=list2;\\n            merge(list1,list2.next,finalList.next);\\n        }\\n        return finalList;\\n        \\n    }\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        int value=0;\\n        if (list1 == null) {\\n            return list2;\\n        }\\n        if (list2 == null) {\\n            return list1;\\n        }\\n        if(list1.val<=list2.val){\\n            value = list1.val;\\n            list1=list1.next;\\n        }else{\\n            value = list2.val;\\n            list2=list2.next;\\n        }\\n        ListNode finalList=new ListNode(value);\\n        return merge(list1,list2,finalList);\\n        \\n    }\\n}\\nthis above code not working for test case\\nlist1=[-9,3]\\nlist2=[5,7]\\nplease anyone can help me where is error in above code"
                    },
                    {
                        "username": "rohithvarma1510",
                        "content": "Do we need to learn linked lists to attempt this cant we solve it without it \\n"
                    },
                    {
                        "username": "dipesh1203",
                        "content": "Yes yout need to study linkedlist  before attempting this question"
                    },
                    {
                        "username": "Amit18755",
                        "content": "should i merged these two lists into another list or merged them into existing list.\\nAnyone ??"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You link the nodes of the two lists in the desired order. You don\\'t need to copy them."
                    },
                    {
                        "username": "dipesh1203",
                        "content": "You should merge into new list by 2 counter approach"
                    },
                    {
                        "username": "JekoAZE",
                        "content": "var mergeTwoLists = function(list1, list2) {\\n    const output = [];\\n    let i = 0;\\n    let j = 0;\\n    const length1 = list1.length;\\n    const length2 = list2.length;\\n  \\n    for (; i < length1 && j < length2; ) {\\n      if (list1[i] < list2[j]) {\\n        output.push(list1[i]);                     \\n        i++;\\n      } else {\\n        output.push(list2[j]);\\n        j++;\\n      }\\n    }\\n  \\n    for (; i < length1; i++) {\\n      output.push(list1[i]);\\n    }\\n  \\n    for (; j < length2; j++) {\\n      output.push(list2[j]);\\n    }\\n  \\n    return output;\\n  };\\n  \\n  const list1 = [1, 2, 4];\\n  const list2 = [1, 3, 4];\\n  const result = mergeTwoLists(list1, list2);\\n  \\n  console.log(result);\\n  // output = [1, 1, 2, 3, 4, 4]\\n\\nI think everything i wrote ok. But i cant write to solution section. They gives me some issues\\n  "
                    },
                    {
                        "username": "a098707730135",
                        "content": "I am a newer of Python. Could anyone answer this basic problem? I\\'ve been stuck with Leetcode which always gave me a lot of problems that were able to be run on my computer cmd. Like this one: \\n `list1 = input()\\nlist2 = input()\\nres = Solution()\\nroot = Node(None)\\nroot = res.mergeTwoLists(str(list1), str(list2))`\\n\\n `class Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        list1 = [list1[i] for i in range(len(list1)) if list1[i] != \",\" and list1[i] != \" \"]\\n        list2 = [list2[i] for i in range(len(list2)) if list2[i] != \",\" and list2[i] != \" \"]`\\n\\nBut I finally got the error:\\n `TypeError: object of type \\'NoneType\\' has no len()\\n    list1 = [list1[i] for i in range(len(list1)) if list1[i] != \",\" and list1[i] != \" \"]`\\n\\nWhy? Wasn\\'t Len() called to calculate the length of String? That will be great if anyone could answer that!  "
                    }
                ]
            },
            {
                "id": 1959965,
                "content": [
                    {
                        "username": "mafras85",
                        "content": "I don\\'t understand why these question cannot be solved using ordinary lists. I am not that experienced with linked lists and the solutions would be totally different, not even close in logic. As a result, I have to skip all the questions that are based on linked lists. I just had this question in an interview with ordinary normal lists. And I was not able to answer that fully because I skipped this here because it\\'s based on linked lists. It\\'s so frustrating! "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Learn what a linked list is."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "here we are not taking the value of the head or traversing node of the linked list we are simply doing  \\n                                                            tail.next = list1;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "ivstefanov",
                        "content": "#include <iostream>\\n#include <list>\\n#include <string>\\n\\nint main(){\\n    std::string sCommand(\"\");\\n    std::list<int> nList_1;\\n    std::list<int> nList_2;\\n    int nCounter=0;\\n    \\n    std::cout << \"\\\\n---Insert elements into LIST 1---\" << std::endl;\\n    std::cout << \"---Type \\'End\\' to stop insertion---\" << std::endl;\\n    while(true){\\n        std::cout<< \"Element[\" << nCounter << \"]: \";\\n        std::cin >> sCommand;\\n        \\n        if(sCommand!=\"End\"){\\n            nList_1.push_back(std::stoi(sCommand));\\n        }else{\\n            break;\\n        }\\n        nCounter++;\\n    }\\n    \\n    std::cout << std::endl;\\n    sCommand = \"\";\\n    nCounter = 0;\\n\\n    std::cout << \"---Insert elements into LIST 2---\" << std::endl;\\n    std::cout << \"---Type \\'End\\' to stop insertion---\" << std::endl;\\n    while(true){\\n        std::cout<< \"Element[\" << nCounter << \"]: \";\\n        std::cin >> sCommand;\\n        if(sCommand!=\"End\"){\\n            nList_2.push_back(std::stoi(sCommand));\\n        }else{\\n            break;\\n        }\\n        nCounter++;\\n    }\\n    \\n    nList_1.sort();\\n    nList_2.sort();\\n\\n    std::cout << \"\\\\n---After sorting---\" << std::endl;\\n    std::cout << \"[List 1]: \";\\n    for (int element : nList_1) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << \"\\\\n[List 2]: \";\\n    for (int element : nList_2) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << std::endl;\\n    \\n    std::cout << \"\\\\n---Merge lists---\";\\n    nList_1.merge(nList_2);\\n    nList_1.sort();\\n    std::cout << \"\\\\n[Merged List]: \";\\n    for (int element : nList_1) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << std::endl;\\n\\n\\n    return 0;\\n}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Dhirojkumarsahu",
                        "content": "how to approach this problem"
                    },
                    {
                        "username": "StrawhatLuffy2502",
                        "content": "Try to merge the linked lists like how u merge two subarrays in merge sort."
                    },
                    {
                        "username": "dipesh1203",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public static ListNode merge(ListNode list1, ListNode list2,ListNode finalList){\\n        if(list1==null){\\n            while(list2!=null){\\n                finalList.next=list2;\\n                list2=list2.next;\\n            }\\n            return finalList;\\n        }\\n        else if(list2==null){\\n            finalList.next=list1;\\n            while(list1!=null){\\n                finalList.next=list1;\\n                list1=list1.next;\\n            }\\n            return finalList;\\n        }\\n        if(list1.val<=list2.val){\\n            finalList.next=list1;\\n            merge(list1.next,list2,finalList.next);\\n        }else{\\n            finalList.next=list2;\\n            merge(list1,list2.next,finalList.next);\\n        }\\n        return finalList;\\n        \\n    }\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        int value=0;\\n        if (list1 == null) {\\n            return list2;\\n        }\\n        if (list2 == null) {\\n            return list1;\\n        }\\n        if(list1.val<=list2.val){\\n            value = list1.val;\\n            list1=list1.next;\\n        }else{\\n            value = list2.val;\\n            list2=list2.next;\\n        }\\n        ListNode finalList=new ListNode(value);\\n        return merge(list1,list2,finalList);\\n        \\n    }\\n}\\nthis above code not working for test case\\nlist1=[-9,3]\\nlist2=[5,7]\\nplease anyone can help me where is error in above code"
                    },
                    {
                        "username": "rohithvarma1510",
                        "content": "Do we need to learn linked lists to attempt this cant we solve it without it \\n"
                    },
                    {
                        "username": "dipesh1203",
                        "content": "Yes yout need to study linkedlist  before attempting this question"
                    },
                    {
                        "username": "Amit18755",
                        "content": "should i merged these two lists into another list or merged them into existing list.\\nAnyone ??"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You link the nodes of the two lists in the desired order. You don\\'t need to copy them."
                    },
                    {
                        "username": "dipesh1203",
                        "content": "You should merge into new list by 2 counter approach"
                    },
                    {
                        "username": "JekoAZE",
                        "content": "var mergeTwoLists = function(list1, list2) {\\n    const output = [];\\n    let i = 0;\\n    let j = 0;\\n    const length1 = list1.length;\\n    const length2 = list2.length;\\n  \\n    for (; i < length1 && j < length2; ) {\\n      if (list1[i] < list2[j]) {\\n        output.push(list1[i]);                     \\n        i++;\\n      } else {\\n        output.push(list2[j]);\\n        j++;\\n      }\\n    }\\n  \\n    for (; i < length1; i++) {\\n      output.push(list1[i]);\\n    }\\n  \\n    for (; j < length2; j++) {\\n      output.push(list2[j]);\\n    }\\n  \\n    return output;\\n  };\\n  \\n  const list1 = [1, 2, 4];\\n  const list2 = [1, 3, 4];\\n  const result = mergeTwoLists(list1, list2);\\n  \\n  console.log(result);\\n  // output = [1, 1, 2, 3, 4, 4]\\n\\nI think everything i wrote ok. But i cant write to solution section. They gives me some issues\\n  "
                    },
                    {
                        "username": "a098707730135",
                        "content": "I am a newer of Python. Could anyone answer this basic problem? I\\'ve been stuck with Leetcode which always gave me a lot of problems that were able to be run on my computer cmd. Like this one: \\n `list1 = input()\\nlist2 = input()\\nres = Solution()\\nroot = Node(None)\\nroot = res.mergeTwoLists(str(list1), str(list2))`\\n\\n `class Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        list1 = [list1[i] for i in range(len(list1)) if list1[i] != \",\" and list1[i] != \" \"]\\n        list2 = [list2[i] for i in range(len(list2)) if list2[i] != \",\" and list2[i] != \" \"]`\\n\\nBut I finally got the error:\\n `TypeError: object of type \\'NoneType\\' has no len()\\n    list1 = [list1[i] for i in range(len(list1)) if list1[i] != \",\" and list1[i] != \" \"]`\\n\\nWhy? Wasn\\'t Len() called to calculate the length of String? That will be great if anyone could answer that!  "
                    }
                ]
            },
            {
                "id": 1941108,
                "content": [
                    {
                        "username": "mafras85",
                        "content": "I don\\'t understand why these question cannot be solved using ordinary lists. I am not that experienced with linked lists and the solutions would be totally different, not even close in logic. As a result, I have to skip all the questions that are based on linked lists. I just had this question in an interview with ordinary normal lists. And I was not able to answer that fully because I skipped this here because it\\'s based on linked lists. It\\'s so frustrating! "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Learn what a linked list is."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "here we are not taking the value of the head or traversing node of the linked list we are simply doing  \\n                                                            tail.next = list1;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "ivstefanov",
                        "content": "#include <iostream>\\n#include <list>\\n#include <string>\\n\\nint main(){\\n    std::string sCommand(\"\");\\n    std::list<int> nList_1;\\n    std::list<int> nList_2;\\n    int nCounter=0;\\n    \\n    std::cout << \"\\\\n---Insert elements into LIST 1---\" << std::endl;\\n    std::cout << \"---Type \\'End\\' to stop insertion---\" << std::endl;\\n    while(true){\\n        std::cout<< \"Element[\" << nCounter << \"]: \";\\n        std::cin >> sCommand;\\n        \\n        if(sCommand!=\"End\"){\\n            nList_1.push_back(std::stoi(sCommand));\\n        }else{\\n            break;\\n        }\\n        nCounter++;\\n    }\\n    \\n    std::cout << std::endl;\\n    sCommand = \"\";\\n    nCounter = 0;\\n\\n    std::cout << \"---Insert elements into LIST 2---\" << std::endl;\\n    std::cout << \"---Type \\'End\\' to stop insertion---\" << std::endl;\\n    while(true){\\n        std::cout<< \"Element[\" << nCounter << \"]: \";\\n        std::cin >> sCommand;\\n        if(sCommand!=\"End\"){\\n            nList_2.push_back(std::stoi(sCommand));\\n        }else{\\n            break;\\n        }\\n        nCounter++;\\n    }\\n    \\n    nList_1.sort();\\n    nList_2.sort();\\n\\n    std::cout << \"\\\\n---After sorting---\" << std::endl;\\n    std::cout << \"[List 1]: \";\\n    for (int element : nList_1) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << \"\\\\n[List 2]: \";\\n    for (int element : nList_2) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << std::endl;\\n    \\n    std::cout << \"\\\\n---Merge lists---\";\\n    nList_1.merge(nList_2);\\n    nList_1.sort();\\n    std::cout << \"\\\\n[Merged List]: \";\\n    for (int element : nList_1) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << std::endl;\\n\\n\\n    return 0;\\n}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Dhirojkumarsahu",
                        "content": "how to approach this problem"
                    },
                    {
                        "username": "StrawhatLuffy2502",
                        "content": "Try to merge the linked lists like how u merge two subarrays in merge sort."
                    },
                    {
                        "username": "dipesh1203",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public static ListNode merge(ListNode list1, ListNode list2,ListNode finalList){\\n        if(list1==null){\\n            while(list2!=null){\\n                finalList.next=list2;\\n                list2=list2.next;\\n            }\\n            return finalList;\\n        }\\n        else if(list2==null){\\n            finalList.next=list1;\\n            while(list1!=null){\\n                finalList.next=list1;\\n                list1=list1.next;\\n            }\\n            return finalList;\\n        }\\n        if(list1.val<=list2.val){\\n            finalList.next=list1;\\n            merge(list1.next,list2,finalList.next);\\n        }else{\\n            finalList.next=list2;\\n            merge(list1,list2.next,finalList.next);\\n        }\\n        return finalList;\\n        \\n    }\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        int value=0;\\n        if (list1 == null) {\\n            return list2;\\n        }\\n        if (list2 == null) {\\n            return list1;\\n        }\\n        if(list1.val<=list2.val){\\n            value = list1.val;\\n            list1=list1.next;\\n        }else{\\n            value = list2.val;\\n            list2=list2.next;\\n        }\\n        ListNode finalList=new ListNode(value);\\n        return merge(list1,list2,finalList);\\n        \\n    }\\n}\\nthis above code not working for test case\\nlist1=[-9,3]\\nlist2=[5,7]\\nplease anyone can help me where is error in above code"
                    },
                    {
                        "username": "rohithvarma1510",
                        "content": "Do we need to learn linked lists to attempt this cant we solve it without it \\n"
                    },
                    {
                        "username": "dipesh1203",
                        "content": "Yes yout need to study linkedlist  before attempting this question"
                    },
                    {
                        "username": "Amit18755",
                        "content": "should i merged these two lists into another list or merged them into existing list.\\nAnyone ??"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You link the nodes of the two lists in the desired order. You don\\'t need to copy them."
                    },
                    {
                        "username": "dipesh1203",
                        "content": "You should merge into new list by 2 counter approach"
                    },
                    {
                        "username": "JekoAZE",
                        "content": "var mergeTwoLists = function(list1, list2) {\\n    const output = [];\\n    let i = 0;\\n    let j = 0;\\n    const length1 = list1.length;\\n    const length2 = list2.length;\\n  \\n    for (; i < length1 && j < length2; ) {\\n      if (list1[i] < list2[j]) {\\n        output.push(list1[i]);                     \\n        i++;\\n      } else {\\n        output.push(list2[j]);\\n        j++;\\n      }\\n    }\\n  \\n    for (; i < length1; i++) {\\n      output.push(list1[i]);\\n    }\\n  \\n    for (; j < length2; j++) {\\n      output.push(list2[j]);\\n    }\\n  \\n    return output;\\n  };\\n  \\n  const list1 = [1, 2, 4];\\n  const list2 = [1, 3, 4];\\n  const result = mergeTwoLists(list1, list2);\\n  \\n  console.log(result);\\n  // output = [1, 1, 2, 3, 4, 4]\\n\\nI think everything i wrote ok. But i cant write to solution section. They gives me some issues\\n  "
                    },
                    {
                        "username": "a098707730135",
                        "content": "I am a newer of Python. Could anyone answer this basic problem? I\\'ve been stuck with Leetcode which always gave me a lot of problems that were able to be run on my computer cmd. Like this one: \\n `list1 = input()\\nlist2 = input()\\nres = Solution()\\nroot = Node(None)\\nroot = res.mergeTwoLists(str(list1), str(list2))`\\n\\n `class Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        list1 = [list1[i] for i in range(len(list1)) if list1[i] != \",\" and list1[i] != \" \"]\\n        list2 = [list2[i] for i in range(len(list2)) if list2[i] != \",\" and list2[i] != \" \"]`\\n\\nBut I finally got the error:\\n `TypeError: object of type \\'NoneType\\' has no len()\\n    list1 = [list1[i] for i in range(len(list1)) if list1[i] != \",\" and list1[i] != \" \"]`\\n\\nWhy? Wasn\\'t Len() called to calculate the length of String? That will be great if anyone could answer that!  "
                    }
                ]
            },
            {
                "id": 1940524,
                "content": [
                    {
                        "username": "mafras85",
                        "content": "I don\\'t understand why these question cannot be solved using ordinary lists. I am not that experienced with linked lists and the solutions would be totally different, not even close in logic. As a result, I have to skip all the questions that are based on linked lists. I just had this question in an interview with ordinary normal lists. And I was not able to answer that fully because I skipped this here because it\\'s based on linked lists. It\\'s so frustrating! "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Learn what a linked list is."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "here we are not taking the value of the head or traversing node of the linked list we are simply doing  \\n                                                            tail.next = list1;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "ivstefanov",
                        "content": "#include <iostream>\\n#include <list>\\n#include <string>\\n\\nint main(){\\n    std::string sCommand(\"\");\\n    std::list<int> nList_1;\\n    std::list<int> nList_2;\\n    int nCounter=0;\\n    \\n    std::cout << \"\\\\n---Insert elements into LIST 1---\" << std::endl;\\n    std::cout << \"---Type \\'End\\' to stop insertion---\" << std::endl;\\n    while(true){\\n        std::cout<< \"Element[\" << nCounter << \"]: \";\\n        std::cin >> sCommand;\\n        \\n        if(sCommand!=\"End\"){\\n            nList_1.push_back(std::stoi(sCommand));\\n        }else{\\n            break;\\n        }\\n        nCounter++;\\n    }\\n    \\n    std::cout << std::endl;\\n    sCommand = \"\";\\n    nCounter = 0;\\n\\n    std::cout << \"---Insert elements into LIST 2---\" << std::endl;\\n    std::cout << \"---Type \\'End\\' to stop insertion---\" << std::endl;\\n    while(true){\\n        std::cout<< \"Element[\" << nCounter << \"]: \";\\n        std::cin >> sCommand;\\n        if(sCommand!=\"End\"){\\n            nList_2.push_back(std::stoi(sCommand));\\n        }else{\\n            break;\\n        }\\n        nCounter++;\\n    }\\n    \\n    nList_1.sort();\\n    nList_2.sort();\\n\\n    std::cout << \"\\\\n---After sorting---\" << std::endl;\\n    std::cout << \"[List 1]: \";\\n    for (int element : nList_1) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << \"\\\\n[List 2]: \";\\n    for (int element : nList_2) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << std::endl;\\n    \\n    std::cout << \"\\\\n---Merge lists---\";\\n    nList_1.merge(nList_2);\\n    nList_1.sort();\\n    std::cout << \"\\\\n[Merged List]: \";\\n    for (int element : nList_1) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << std::endl;\\n\\n\\n    return 0;\\n}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Dhirojkumarsahu",
                        "content": "how to approach this problem"
                    },
                    {
                        "username": "StrawhatLuffy2502",
                        "content": "Try to merge the linked lists like how u merge two subarrays in merge sort."
                    },
                    {
                        "username": "dipesh1203",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public static ListNode merge(ListNode list1, ListNode list2,ListNode finalList){\\n        if(list1==null){\\n            while(list2!=null){\\n                finalList.next=list2;\\n                list2=list2.next;\\n            }\\n            return finalList;\\n        }\\n        else if(list2==null){\\n            finalList.next=list1;\\n            while(list1!=null){\\n                finalList.next=list1;\\n                list1=list1.next;\\n            }\\n            return finalList;\\n        }\\n        if(list1.val<=list2.val){\\n            finalList.next=list1;\\n            merge(list1.next,list2,finalList.next);\\n        }else{\\n            finalList.next=list2;\\n            merge(list1,list2.next,finalList.next);\\n        }\\n        return finalList;\\n        \\n    }\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        int value=0;\\n        if (list1 == null) {\\n            return list2;\\n        }\\n        if (list2 == null) {\\n            return list1;\\n        }\\n        if(list1.val<=list2.val){\\n            value = list1.val;\\n            list1=list1.next;\\n        }else{\\n            value = list2.val;\\n            list2=list2.next;\\n        }\\n        ListNode finalList=new ListNode(value);\\n        return merge(list1,list2,finalList);\\n        \\n    }\\n}\\nthis above code not working for test case\\nlist1=[-9,3]\\nlist2=[5,7]\\nplease anyone can help me where is error in above code"
                    },
                    {
                        "username": "rohithvarma1510",
                        "content": "Do we need to learn linked lists to attempt this cant we solve it without it \\n"
                    },
                    {
                        "username": "dipesh1203",
                        "content": "Yes yout need to study linkedlist  before attempting this question"
                    },
                    {
                        "username": "Amit18755",
                        "content": "should i merged these two lists into another list or merged them into existing list.\\nAnyone ??"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You link the nodes of the two lists in the desired order. You don\\'t need to copy them."
                    },
                    {
                        "username": "dipesh1203",
                        "content": "You should merge into new list by 2 counter approach"
                    },
                    {
                        "username": "JekoAZE",
                        "content": "var mergeTwoLists = function(list1, list2) {\\n    const output = [];\\n    let i = 0;\\n    let j = 0;\\n    const length1 = list1.length;\\n    const length2 = list2.length;\\n  \\n    for (; i < length1 && j < length2; ) {\\n      if (list1[i] < list2[j]) {\\n        output.push(list1[i]);                     \\n        i++;\\n      } else {\\n        output.push(list2[j]);\\n        j++;\\n      }\\n    }\\n  \\n    for (; i < length1; i++) {\\n      output.push(list1[i]);\\n    }\\n  \\n    for (; j < length2; j++) {\\n      output.push(list2[j]);\\n    }\\n  \\n    return output;\\n  };\\n  \\n  const list1 = [1, 2, 4];\\n  const list2 = [1, 3, 4];\\n  const result = mergeTwoLists(list1, list2);\\n  \\n  console.log(result);\\n  // output = [1, 1, 2, 3, 4, 4]\\n\\nI think everything i wrote ok. But i cant write to solution section. They gives me some issues\\n  "
                    },
                    {
                        "username": "a098707730135",
                        "content": "I am a newer of Python. Could anyone answer this basic problem? I\\'ve been stuck with Leetcode which always gave me a lot of problems that were able to be run on my computer cmd. Like this one: \\n `list1 = input()\\nlist2 = input()\\nres = Solution()\\nroot = Node(None)\\nroot = res.mergeTwoLists(str(list1), str(list2))`\\n\\n `class Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        list1 = [list1[i] for i in range(len(list1)) if list1[i] != \",\" and list1[i] != \" \"]\\n        list2 = [list2[i] for i in range(len(list2)) if list2[i] != \",\" and list2[i] != \" \"]`\\n\\nBut I finally got the error:\\n `TypeError: object of type \\'NoneType\\' has no len()\\n    list1 = [list1[i] for i in range(len(list1)) if list1[i] != \",\" and list1[i] != \" \"]`\\n\\nWhy? Wasn\\'t Len() called to calculate the length of String? That will be great if anyone could answer that!  "
                    }
                ]
            },
            {
                "id": 1935468,
                "content": [
                    {
                        "username": "mafras85",
                        "content": "I don\\'t understand why these question cannot be solved using ordinary lists. I am not that experienced with linked lists and the solutions would be totally different, not even close in logic. As a result, I have to skip all the questions that are based on linked lists. I just had this question in an interview with ordinary normal lists. And I was not able to answer that fully because I skipped this here because it\\'s based on linked lists. It\\'s so frustrating! "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Learn what a linked list is."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "here we are not taking the value of the head or traversing node of the linked list we are simply doing  \\n                                                            tail.next = list1;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "ivstefanov",
                        "content": "#include <iostream>\\n#include <list>\\n#include <string>\\n\\nint main(){\\n    std::string sCommand(\"\");\\n    std::list<int> nList_1;\\n    std::list<int> nList_2;\\n    int nCounter=0;\\n    \\n    std::cout << \"\\\\n---Insert elements into LIST 1---\" << std::endl;\\n    std::cout << \"---Type \\'End\\' to stop insertion---\" << std::endl;\\n    while(true){\\n        std::cout<< \"Element[\" << nCounter << \"]: \";\\n        std::cin >> sCommand;\\n        \\n        if(sCommand!=\"End\"){\\n            nList_1.push_back(std::stoi(sCommand));\\n        }else{\\n            break;\\n        }\\n        nCounter++;\\n    }\\n    \\n    std::cout << std::endl;\\n    sCommand = \"\";\\n    nCounter = 0;\\n\\n    std::cout << \"---Insert elements into LIST 2---\" << std::endl;\\n    std::cout << \"---Type \\'End\\' to stop insertion---\" << std::endl;\\n    while(true){\\n        std::cout<< \"Element[\" << nCounter << \"]: \";\\n        std::cin >> sCommand;\\n        if(sCommand!=\"End\"){\\n            nList_2.push_back(std::stoi(sCommand));\\n        }else{\\n            break;\\n        }\\n        nCounter++;\\n    }\\n    \\n    nList_1.sort();\\n    nList_2.sort();\\n\\n    std::cout << \"\\\\n---After sorting---\" << std::endl;\\n    std::cout << \"[List 1]: \";\\n    for (int element : nList_1) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << \"\\\\n[List 2]: \";\\n    for (int element : nList_2) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << std::endl;\\n    \\n    std::cout << \"\\\\n---Merge lists---\";\\n    nList_1.merge(nList_2);\\n    nList_1.sort();\\n    std::cout << \"\\\\n[Merged List]: \";\\n    for (int element : nList_1) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << std::endl;\\n\\n\\n    return 0;\\n}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Dhirojkumarsahu",
                        "content": "how to approach this problem"
                    },
                    {
                        "username": "StrawhatLuffy2502",
                        "content": "Try to merge the linked lists like how u merge two subarrays in merge sort."
                    },
                    {
                        "username": "dipesh1203",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public static ListNode merge(ListNode list1, ListNode list2,ListNode finalList){\\n        if(list1==null){\\n            while(list2!=null){\\n                finalList.next=list2;\\n                list2=list2.next;\\n            }\\n            return finalList;\\n        }\\n        else if(list2==null){\\n            finalList.next=list1;\\n            while(list1!=null){\\n                finalList.next=list1;\\n                list1=list1.next;\\n            }\\n            return finalList;\\n        }\\n        if(list1.val<=list2.val){\\n            finalList.next=list1;\\n            merge(list1.next,list2,finalList.next);\\n        }else{\\n            finalList.next=list2;\\n            merge(list1,list2.next,finalList.next);\\n        }\\n        return finalList;\\n        \\n    }\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        int value=0;\\n        if (list1 == null) {\\n            return list2;\\n        }\\n        if (list2 == null) {\\n            return list1;\\n        }\\n        if(list1.val<=list2.val){\\n            value = list1.val;\\n            list1=list1.next;\\n        }else{\\n            value = list2.val;\\n            list2=list2.next;\\n        }\\n        ListNode finalList=new ListNode(value);\\n        return merge(list1,list2,finalList);\\n        \\n    }\\n}\\nthis above code not working for test case\\nlist1=[-9,3]\\nlist2=[5,7]\\nplease anyone can help me where is error in above code"
                    },
                    {
                        "username": "rohithvarma1510",
                        "content": "Do we need to learn linked lists to attempt this cant we solve it without it \\n"
                    },
                    {
                        "username": "dipesh1203",
                        "content": "Yes yout need to study linkedlist  before attempting this question"
                    },
                    {
                        "username": "Amit18755",
                        "content": "should i merged these two lists into another list or merged them into existing list.\\nAnyone ??"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You link the nodes of the two lists in the desired order. You don\\'t need to copy them."
                    },
                    {
                        "username": "dipesh1203",
                        "content": "You should merge into new list by 2 counter approach"
                    },
                    {
                        "username": "JekoAZE",
                        "content": "var mergeTwoLists = function(list1, list2) {\\n    const output = [];\\n    let i = 0;\\n    let j = 0;\\n    const length1 = list1.length;\\n    const length2 = list2.length;\\n  \\n    for (; i < length1 && j < length2; ) {\\n      if (list1[i] < list2[j]) {\\n        output.push(list1[i]);                     \\n        i++;\\n      } else {\\n        output.push(list2[j]);\\n        j++;\\n      }\\n    }\\n  \\n    for (; i < length1; i++) {\\n      output.push(list1[i]);\\n    }\\n  \\n    for (; j < length2; j++) {\\n      output.push(list2[j]);\\n    }\\n  \\n    return output;\\n  };\\n  \\n  const list1 = [1, 2, 4];\\n  const list2 = [1, 3, 4];\\n  const result = mergeTwoLists(list1, list2);\\n  \\n  console.log(result);\\n  // output = [1, 1, 2, 3, 4, 4]\\n\\nI think everything i wrote ok. But i cant write to solution section. They gives me some issues\\n  "
                    },
                    {
                        "username": "a098707730135",
                        "content": "I am a newer of Python. Could anyone answer this basic problem? I\\'ve been stuck with Leetcode which always gave me a lot of problems that were able to be run on my computer cmd. Like this one: \\n `list1 = input()\\nlist2 = input()\\nres = Solution()\\nroot = Node(None)\\nroot = res.mergeTwoLists(str(list1), str(list2))`\\n\\n `class Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        list1 = [list1[i] for i in range(len(list1)) if list1[i] != \",\" and list1[i] != \" \"]\\n        list2 = [list2[i] for i in range(len(list2)) if list2[i] != \",\" and list2[i] != \" \"]`\\n\\nBut I finally got the error:\\n `TypeError: object of type \\'NoneType\\' has no len()\\n    list1 = [list1[i] for i in range(len(list1)) if list1[i] != \",\" and list1[i] != \" \"]`\\n\\nWhy? Wasn\\'t Len() called to calculate the length of String? That will be great if anyone could answer that!  "
                    }
                ]
            },
            {
                "id": 1929614,
                "content": [
                    {
                        "username": "mafras85",
                        "content": "I don\\'t understand why these question cannot be solved using ordinary lists. I am not that experienced with linked lists and the solutions would be totally different, not even close in logic. As a result, I have to skip all the questions that are based on linked lists. I just had this question in an interview with ordinary normal lists. And I was not able to answer that fully because I skipped this here because it\\'s based on linked lists. It\\'s so frustrating! "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Learn what a linked list is."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "here we are not taking the value of the head or traversing node of the linked list we are simply doing  \\n                                                            tail.next = list1;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "ivstefanov",
                        "content": "#include <iostream>\\n#include <list>\\n#include <string>\\n\\nint main(){\\n    std::string sCommand(\"\");\\n    std::list<int> nList_1;\\n    std::list<int> nList_2;\\n    int nCounter=0;\\n    \\n    std::cout << \"\\\\n---Insert elements into LIST 1---\" << std::endl;\\n    std::cout << \"---Type \\'End\\' to stop insertion---\" << std::endl;\\n    while(true){\\n        std::cout<< \"Element[\" << nCounter << \"]: \";\\n        std::cin >> sCommand;\\n        \\n        if(sCommand!=\"End\"){\\n            nList_1.push_back(std::stoi(sCommand));\\n        }else{\\n            break;\\n        }\\n        nCounter++;\\n    }\\n    \\n    std::cout << std::endl;\\n    sCommand = \"\";\\n    nCounter = 0;\\n\\n    std::cout << \"---Insert elements into LIST 2---\" << std::endl;\\n    std::cout << \"---Type \\'End\\' to stop insertion---\" << std::endl;\\n    while(true){\\n        std::cout<< \"Element[\" << nCounter << \"]: \";\\n        std::cin >> sCommand;\\n        if(sCommand!=\"End\"){\\n            nList_2.push_back(std::stoi(sCommand));\\n        }else{\\n            break;\\n        }\\n        nCounter++;\\n    }\\n    \\n    nList_1.sort();\\n    nList_2.sort();\\n\\n    std::cout << \"\\\\n---After sorting---\" << std::endl;\\n    std::cout << \"[List 1]: \";\\n    for (int element : nList_1) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << \"\\\\n[List 2]: \";\\n    for (int element : nList_2) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << std::endl;\\n    \\n    std::cout << \"\\\\n---Merge lists---\";\\n    nList_1.merge(nList_2);\\n    nList_1.sort();\\n    std::cout << \"\\\\n[Merged List]: \";\\n    for (int element : nList_1) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << std::endl;\\n\\n\\n    return 0;\\n}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Dhirojkumarsahu",
                        "content": "how to approach this problem"
                    },
                    {
                        "username": "StrawhatLuffy2502",
                        "content": "Try to merge the linked lists like how u merge two subarrays in merge sort."
                    },
                    {
                        "username": "dipesh1203",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public static ListNode merge(ListNode list1, ListNode list2,ListNode finalList){\\n        if(list1==null){\\n            while(list2!=null){\\n                finalList.next=list2;\\n                list2=list2.next;\\n            }\\n            return finalList;\\n        }\\n        else if(list2==null){\\n            finalList.next=list1;\\n            while(list1!=null){\\n                finalList.next=list1;\\n                list1=list1.next;\\n            }\\n            return finalList;\\n        }\\n        if(list1.val<=list2.val){\\n            finalList.next=list1;\\n            merge(list1.next,list2,finalList.next);\\n        }else{\\n            finalList.next=list2;\\n            merge(list1,list2.next,finalList.next);\\n        }\\n        return finalList;\\n        \\n    }\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        int value=0;\\n        if (list1 == null) {\\n            return list2;\\n        }\\n        if (list2 == null) {\\n            return list1;\\n        }\\n        if(list1.val<=list2.val){\\n            value = list1.val;\\n            list1=list1.next;\\n        }else{\\n            value = list2.val;\\n            list2=list2.next;\\n        }\\n        ListNode finalList=new ListNode(value);\\n        return merge(list1,list2,finalList);\\n        \\n    }\\n}\\nthis above code not working for test case\\nlist1=[-9,3]\\nlist2=[5,7]\\nplease anyone can help me where is error in above code"
                    },
                    {
                        "username": "rohithvarma1510",
                        "content": "Do we need to learn linked lists to attempt this cant we solve it without it \\n"
                    },
                    {
                        "username": "dipesh1203",
                        "content": "Yes yout need to study linkedlist  before attempting this question"
                    },
                    {
                        "username": "Amit18755",
                        "content": "should i merged these two lists into another list or merged them into existing list.\\nAnyone ??"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You link the nodes of the two lists in the desired order. You don\\'t need to copy them."
                    },
                    {
                        "username": "dipesh1203",
                        "content": "You should merge into new list by 2 counter approach"
                    },
                    {
                        "username": "JekoAZE",
                        "content": "var mergeTwoLists = function(list1, list2) {\\n    const output = [];\\n    let i = 0;\\n    let j = 0;\\n    const length1 = list1.length;\\n    const length2 = list2.length;\\n  \\n    for (; i < length1 && j < length2; ) {\\n      if (list1[i] < list2[j]) {\\n        output.push(list1[i]);                     \\n        i++;\\n      } else {\\n        output.push(list2[j]);\\n        j++;\\n      }\\n    }\\n  \\n    for (; i < length1; i++) {\\n      output.push(list1[i]);\\n    }\\n  \\n    for (; j < length2; j++) {\\n      output.push(list2[j]);\\n    }\\n  \\n    return output;\\n  };\\n  \\n  const list1 = [1, 2, 4];\\n  const list2 = [1, 3, 4];\\n  const result = mergeTwoLists(list1, list2);\\n  \\n  console.log(result);\\n  // output = [1, 1, 2, 3, 4, 4]\\n\\nI think everything i wrote ok. But i cant write to solution section. They gives me some issues\\n  "
                    },
                    {
                        "username": "a098707730135",
                        "content": "I am a newer of Python. Could anyone answer this basic problem? I\\'ve been stuck with Leetcode which always gave me a lot of problems that were able to be run on my computer cmd. Like this one: \\n `list1 = input()\\nlist2 = input()\\nres = Solution()\\nroot = Node(None)\\nroot = res.mergeTwoLists(str(list1), str(list2))`\\n\\n `class Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        list1 = [list1[i] for i in range(len(list1)) if list1[i] != \",\" and list1[i] != \" \"]\\n        list2 = [list2[i] for i in range(len(list2)) if list2[i] != \",\" and list2[i] != \" \"]`\\n\\nBut I finally got the error:\\n `TypeError: object of type \\'NoneType\\' has no len()\\n    list1 = [list1[i] for i in range(len(list1)) if list1[i] != \",\" and list1[i] != \" \"]`\\n\\nWhy? Wasn\\'t Len() called to calculate the length of String? That will be great if anyone could answer that!  "
                    }
                ]
            },
            {
                "id": 1926379,
                "content": [
                    {
                        "username": "mafras85",
                        "content": "I don\\'t understand why these question cannot be solved using ordinary lists. I am not that experienced with linked lists and the solutions would be totally different, not even close in logic. As a result, I have to skip all the questions that are based on linked lists. I just had this question in an interview with ordinary normal lists. And I was not able to answer that fully because I skipped this here because it\\'s based on linked lists. It\\'s so frustrating! "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Learn what a linked list is."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "here we are not taking the value of the head or traversing node of the linked list we are simply doing  \\n                                                            tail.next = list1;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": " public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n    if (list1 == null) {\\n      return list2;\\n    }\\n    if (list2 == null) {\\n      return list1;\\n    }\\n\\n    if (list1.val < list2.val) {\\n      list1.next = mergeTwoLists(list1.next, list2);\\n      return list1;\\n    } else {\\n      list2.next = mergeTwoLists(list1, list2.next);\\n      return list2;\\n    }\\n"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "ivstefanov",
                        "content": "#include <iostream>\\n#include <list>\\n#include <string>\\n\\nint main(){\\n    std::string sCommand(\"\");\\n    std::list<int> nList_1;\\n    std::list<int> nList_2;\\n    int nCounter=0;\\n    \\n    std::cout << \"\\\\n---Insert elements into LIST 1---\" << std::endl;\\n    std::cout << \"---Type \\'End\\' to stop insertion---\" << std::endl;\\n    while(true){\\n        std::cout<< \"Element[\" << nCounter << \"]: \";\\n        std::cin >> sCommand;\\n        \\n        if(sCommand!=\"End\"){\\n            nList_1.push_back(std::stoi(sCommand));\\n        }else{\\n            break;\\n        }\\n        nCounter++;\\n    }\\n    \\n    std::cout << std::endl;\\n    sCommand = \"\";\\n    nCounter = 0;\\n\\n    std::cout << \"---Insert elements into LIST 2---\" << std::endl;\\n    std::cout << \"---Type \\'End\\' to stop insertion---\" << std::endl;\\n    while(true){\\n        std::cout<< \"Element[\" << nCounter << \"]: \";\\n        std::cin >> sCommand;\\n        if(sCommand!=\"End\"){\\n            nList_2.push_back(std::stoi(sCommand));\\n        }else{\\n            break;\\n        }\\n        nCounter++;\\n    }\\n    \\n    nList_1.sort();\\n    nList_2.sort();\\n\\n    std::cout << \"\\\\n---After sorting---\" << std::endl;\\n    std::cout << \"[List 1]: \";\\n    for (int element : nList_1) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << \"\\\\n[List 2]: \";\\n    for (int element : nList_2) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << std::endl;\\n    \\n    std::cout << \"\\\\n---Merge lists---\";\\n    nList_1.merge(nList_2);\\n    nList_1.sort();\\n    std::cout << \"\\\\n[Merged List]: \";\\n    for (int element : nList_1) {\\n        std::cout << element << \" \";\\n    }\\n    std::cout << std::endl;\\n\\n\\n    return 0;\\n}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Dhirojkumarsahu",
                        "content": "how to approach this problem"
                    },
                    {
                        "username": "StrawhatLuffy2502",
                        "content": "Try to merge the linked lists like how u merge two subarrays in merge sort."
                    },
                    {
                        "username": "dipesh1203",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public static ListNode merge(ListNode list1, ListNode list2,ListNode finalList){\\n        if(list1==null){\\n            while(list2!=null){\\n                finalList.next=list2;\\n                list2=list2.next;\\n            }\\n            return finalList;\\n        }\\n        else if(list2==null){\\n            finalList.next=list1;\\n            while(list1!=null){\\n                finalList.next=list1;\\n                list1=list1.next;\\n            }\\n            return finalList;\\n        }\\n        if(list1.val<=list2.val){\\n            finalList.next=list1;\\n            merge(list1.next,list2,finalList.next);\\n        }else{\\n            finalList.next=list2;\\n            merge(list1,list2.next,finalList.next);\\n        }\\n        return finalList;\\n        \\n    }\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        int value=0;\\n        if (list1 == null) {\\n            return list2;\\n        }\\n        if (list2 == null) {\\n            return list1;\\n        }\\n        if(list1.val<=list2.val){\\n            value = list1.val;\\n            list1=list1.next;\\n        }else{\\n            value = list2.val;\\n            list2=list2.next;\\n        }\\n        ListNode finalList=new ListNode(value);\\n        return merge(list1,list2,finalList);\\n        \\n    }\\n}\\nthis above code not working for test case\\nlist1=[-9,3]\\nlist2=[5,7]\\nplease anyone can help me where is error in above code"
                    },
                    {
                        "username": "rohithvarma1510",
                        "content": "Do we need to learn linked lists to attempt this cant we solve it without it \\n"
                    },
                    {
                        "username": "dipesh1203",
                        "content": "Yes yout need to study linkedlist  before attempting this question"
                    },
                    {
                        "username": "Amit18755",
                        "content": "should i merged these two lists into another list or merged them into existing list.\\nAnyone ??"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You link the nodes of the two lists in the desired order. You don\\'t need to copy them."
                    },
                    {
                        "username": "dipesh1203",
                        "content": "You should merge into new list by 2 counter approach"
                    },
                    {
                        "username": "JekoAZE",
                        "content": "var mergeTwoLists = function(list1, list2) {\\n    const output = [];\\n    let i = 0;\\n    let j = 0;\\n    const length1 = list1.length;\\n    const length2 = list2.length;\\n  \\n    for (; i < length1 && j < length2; ) {\\n      if (list1[i] < list2[j]) {\\n        output.push(list1[i]);                     \\n        i++;\\n      } else {\\n        output.push(list2[j]);\\n        j++;\\n      }\\n    }\\n  \\n    for (; i < length1; i++) {\\n      output.push(list1[i]);\\n    }\\n  \\n    for (; j < length2; j++) {\\n      output.push(list2[j]);\\n    }\\n  \\n    return output;\\n  };\\n  \\n  const list1 = [1, 2, 4];\\n  const list2 = [1, 3, 4];\\n  const result = mergeTwoLists(list1, list2);\\n  \\n  console.log(result);\\n  // output = [1, 1, 2, 3, 4, 4]\\n\\nI think everything i wrote ok. But i cant write to solution section. They gives me some issues\\n  "
                    },
                    {
                        "username": "a098707730135",
                        "content": "I am a newer of Python. Could anyone answer this basic problem? I\\'ve been stuck with Leetcode which always gave me a lot of problems that were able to be run on my computer cmd. Like this one: \\n `list1 = input()\\nlist2 = input()\\nres = Solution()\\nroot = Node(None)\\nroot = res.mergeTwoLists(str(list1), str(list2))`\\n\\n `class Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        list1 = [list1[i] for i in range(len(list1)) if list1[i] != \",\" and list1[i] != \" \"]\\n        list2 = [list2[i] for i in range(len(list2)) if list2[i] != \",\" and list2[i] != \" \"]`\\n\\nBut I finally got the error:\\n `TypeError: object of type \\'NoneType\\' has no len()\\n    list1 = [list1[i] for i in range(len(list1)) if list1[i] != \",\" and list1[i] != \" \"]`\\n\\nWhy? Wasn\\'t Len() called to calculate the length of String? That will be great if anyone could answer that!  "
                    }
                ]
            },
            {
                "id": 1925269,
                "content": [
                    {
                        "username": "awecefil",
                        "content": "Can anyone help me figure out why the code below is wrong?\\n\\nstruct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2){\\n    struct ListNode merged;\\n    struct ListNode *p = &merged;\\n\\n    while(list1 != NULL && list2 != NULL){\\n        if(list1->val < list2->val){\\n            p->next = list1;\\n            list1 = list1->next; \\n        }\\n        else{\\n            p->next = list2;\\n            list2 = list2->next;\\n        }\\n        p = p->next;\\n    }\\n\\n    if(list1!=NULL){\\n        p->next = list1;\\n    }\\n    if(list2!=NULL){\\n        p->next = list2;\\n    }\\n    return merged.next;\\n}\\n********************************************************\\nThe code above get Runtime Error and the error message is:\\n\\nAddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==23==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x563a0a541602 bp 0x7ffe2b241ce0 sp 0x7ffe2b241bf0 T0)\\n==23==The signal is caused by a READ memory access.\\n==23==Hint: address points to the zero page.\\n    #2 0x7eff48642082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)\\nAddressSanitizer can not provide additional info.\\n==23==ABORTING\\n********************************************************\\n\\nbut if I change the code from \\nif(list1!=NULL){\\n    p->next = list1;\\n}\\nif(list2!=NULL){\\n    p->next = list2;\\n}\\nto \\nif(list1!=NULL){\\n    p->next = list1;\\n}\\nelse{\\n   p->next = list2;\\n}\\nthen it correct without any error."
                    },
                    {
                        "username": "SalehMohammed",
                        "content": "should i add more functions in the class, cuz I think its needed"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You can, but it is not needed."
                    },
                    {
                        "username": "Amar___",
                        "content": "Am i the only one facing memory limit exceed  or i do have some folks here."
                    },
                    {
                        "username": "OmiDaHomi",
                        "content": "very interesting problem, everyone can definitely learn from this"
                    },
                    {
                        "username": "BobDaProgrammer",
                        "content": "this works if list1 and list2 are actuall lists:\\n\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        new_list = []\\n        y = len(list1)\\n        num = 0\\n        for x in range(1, y+1):\\n            if list1[num] < list2[num]:\\n                new_list.append(list1[num])\\n                new_list.append(list2[num])\\n            else:\\n                new_list.append(list2[num])\\n                new_list.append(list1[num])    \\n            num += 1            \\n        return new_list\\n\\nyou could call the function:\\nprint(mergeTwoLists(list1=[2,4,5,8], list2=[1,3,6,12]))\\nand it would output:\\n[1, 2, 3, 4, 5, 6, 8, 12]\\nbut the list that is provided is:\\nListNode{val: 1, next: ListNode{val: 2, next: ListNode{val: 4, next: None}}}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "vimalalwaysrocks",
                        "content": "This is one of the more difficult question. Two lists, either of them can be empty. If both lists are of same size, the solution is simple. "
                    },
                    {
                        "username": "ArtemSerdechnyi",
                        "content": "Not correct example 2 and 3. \\nInput: list1 = [], list2 = []\\nOutput: [] but must be [0, 0]\\nbecouse: val=0 is defoult!"
                    },
                    {
                        "username": "wegocove",
                        "content": "List1 and list2 are empty. There are no default values."
                    },
                    {
                        "username": "kavyakhurana1001",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        ListNode head = null;\\n        ListNode pointer = null;\\n\\n        if(list1.val < list2.val) {\\n            head = new ListNode(list1.val);\\n            list1 = list1.next;\\n            } else {\\n            head = new ListNode(list2.val);\\n            list2 = list2.next;\\n           }\\n           \\n\\n           System.out.println(head.val+\" \"+pointer);\\n\\n        pointer = head;\\n           pointer = pointer.next;\\n        while(list1 != null && list2 != null) {\\n            if(list1.val < list2.val) {\\n            pointer.next = new ListNode(list1.val);\\n            list1 = list1.next;\\n            } else {\\n            pointer.next = new ListNode(list2.val);\\n            list2 = list2.next;\\n           }\\n           pointer = pointer.next;\\n        }\\n\\n        if(list1 != null) {\\n             pointer.next = list1;\\n        }\\n\\n        if(list2 != null) {\\n             pointer.next = list2;\\n        }\\n\\n        return head.next;\\n    }\\n}\\n\\n\\n\\nthis is my code: its getting null pointer exception - however in the print statement pointer value is null, but head is not null. I have no idea why. can someone help pls?"
                    },
                    {
                        "username": "Maheshwar_Bhat",
                        "content": "AttributeError: \\'NoneType\\' object has no attribute \\'val\\'  - I get this error while trying to access a value in the lists given (list1.value) . Why is this coming?"
                    },
                    {
                        "username": "Kinszs",
                        "content": "When I did this problem, leetcode said that my solution is incorrect. It shows that the number 0 is added and I am not sure why\\n\\npublic class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n        var dummyNode = new ListNode();\\n        var tail = dummyNode;\\n         var pointer1 = list1;\\n         var pointer2 = list2;\\n         \\n          while(pointer1 != null && pointer2 != null){\\n              if(pointer1.val < pointer2.val){\\n                  tail.next = pointer1;\\n                  pointer1 = pointer1.next;\\n              }else{\\n                  tail.next = pointer2;\\n                  pointer2 = pointer2.next;\\n              } tail = tail.next;\\n              \\n          }  \\n            return dummyNode;\\n          }\\n         \\n          \\n    }\\n "
                    }
                ]
            },
            {
                "id": 1912185,
                "content": [
                    {
                        "username": "awecefil",
                        "content": "Can anyone help me figure out why the code below is wrong?\\n\\nstruct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2){\\n    struct ListNode merged;\\n    struct ListNode *p = &merged;\\n\\n    while(list1 != NULL && list2 != NULL){\\n        if(list1->val < list2->val){\\n            p->next = list1;\\n            list1 = list1->next; \\n        }\\n        else{\\n            p->next = list2;\\n            list2 = list2->next;\\n        }\\n        p = p->next;\\n    }\\n\\n    if(list1!=NULL){\\n        p->next = list1;\\n    }\\n    if(list2!=NULL){\\n        p->next = list2;\\n    }\\n    return merged.next;\\n}\\n********************************************************\\nThe code above get Runtime Error and the error message is:\\n\\nAddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==23==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x563a0a541602 bp 0x7ffe2b241ce0 sp 0x7ffe2b241bf0 T0)\\n==23==The signal is caused by a READ memory access.\\n==23==Hint: address points to the zero page.\\n    #2 0x7eff48642082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)\\nAddressSanitizer can not provide additional info.\\n==23==ABORTING\\n********************************************************\\n\\nbut if I change the code from \\nif(list1!=NULL){\\n    p->next = list1;\\n}\\nif(list2!=NULL){\\n    p->next = list2;\\n}\\nto \\nif(list1!=NULL){\\n    p->next = list1;\\n}\\nelse{\\n   p->next = list2;\\n}\\nthen it correct without any error."
                    },
                    {
                        "username": "SalehMohammed",
                        "content": "should i add more functions in the class, cuz I think its needed"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You can, but it is not needed."
                    },
                    {
                        "username": "Amar___",
                        "content": "Am i the only one facing memory limit exceed  or i do have some folks here."
                    },
                    {
                        "username": "OmiDaHomi",
                        "content": "very interesting problem, everyone can definitely learn from this"
                    },
                    {
                        "username": "BobDaProgrammer",
                        "content": "this works if list1 and list2 are actuall lists:\\n\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        new_list = []\\n        y = len(list1)\\n        num = 0\\n        for x in range(1, y+1):\\n            if list1[num] < list2[num]:\\n                new_list.append(list1[num])\\n                new_list.append(list2[num])\\n            else:\\n                new_list.append(list2[num])\\n                new_list.append(list1[num])    \\n            num += 1            \\n        return new_list\\n\\nyou could call the function:\\nprint(mergeTwoLists(list1=[2,4,5,8], list2=[1,3,6,12]))\\nand it would output:\\n[1, 2, 3, 4, 5, 6, 8, 12]\\nbut the list that is provided is:\\nListNode{val: 1, next: ListNode{val: 2, next: ListNode{val: 4, next: None}}}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "vimalalwaysrocks",
                        "content": "This is one of the more difficult question. Two lists, either of them can be empty. If both lists are of same size, the solution is simple. "
                    },
                    {
                        "username": "ArtemSerdechnyi",
                        "content": "Not correct example 2 and 3. \\nInput: list1 = [], list2 = []\\nOutput: [] but must be [0, 0]\\nbecouse: val=0 is defoult!"
                    },
                    {
                        "username": "wegocove",
                        "content": "List1 and list2 are empty. There are no default values."
                    },
                    {
                        "username": "kavyakhurana1001",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        ListNode head = null;\\n        ListNode pointer = null;\\n\\n        if(list1.val < list2.val) {\\n            head = new ListNode(list1.val);\\n            list1 = list1.next;\\n            } else {\\n            head = new ListNode(list2.val);\\n            list2 = list2.next;\\n           }\\n           \\n\\n           System.out.println(head.val+\" \"+pointer);\\n\\n        pointer = head;\\n           pointer = pointer.next;\\n        while(list1 != null && list2 != null) {\\n            if(list1.val < list2.val) {\\n            pointer.next = new ListNode(list1.val);\\n            list1 = list1.next;\\n            } else {\\n            pointer.next = new ListNode(list2.val);\\n            list2 = list2.next;\\n           }\\n           pointer = pointer.next;\\n        }\\n\\n        if(list1 != null) {\\n             pointer.next = list1;\\n        }\\n\\n        if(list2 != null) {\\n             pointer.next = list2;\\n        }\\n\\n        return head.next;\\n    }\\n}\\n\\n\\n\\nthis is my code: its getting null pointer exception - however in the print statement pointer value is null, but head is not null. I have no idea why. can someone help pls?"
                    },
                    {
                        "username": "Maheshwar_Bhat",
                        "content": "AttributeError: \\'NoneType\\' object has no attribute \\'val\\'  - I get this error while trying to access a value in the lists given (list1.value) . Why is this coming?"
                    },
                    {
                        "username": "Kinszs",
                        "content": "When I did this problem, leetcode said that my solution is incorrect. It shows that the number 0 is added and I am not sure why\\n\\npublic class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n        var dummyNode = new ListNode();\\n        var tail = dummyNode;\\n         var pointer1 = list1;\\n         var pointer2 = list2;\\n         \\n          while(pointer1 != null && pointer2 != null){\\n              if(pointer1.val < pointer2.val){\\n                  tail.next = pointer1;\\n                  pointer1 = pointer1.next;\\n              }else{\\n                  tail.next = pointer2;\\n                  pointer2 = pointer2.next;\\n              } tail = tail.next;\\n              \\n          }  \\n            return dummyNode;\\n          }\\n         \\n          \\n    }\\n "
                    }
                ]
            },
            {
                "id": 1912135,
                "content": [
                    {
                        "username": "awecefil",
                        "content": "Can anyone help me figure out why the code below is wrong?\\n\\nstruct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2){\\n    struct ListNode merged;\\n    struct ListNode *p = &merged;\\n\\n    while(list1 != NULL && list2 != NULL){\\n        if(list1->val < list2->val){\\n            p->next = list1;\\n            list1 = list1->next; \\n        }\\n        else{\\n            p->next = list2;\\n            list2 = list2->next;\\n        }\\n        p = p->next;\\n    }\\n\\n    if(list1!=NULL){\\n        p->next = list1;\\n    }\\n    if(list2!=NULL){\\n        p->next = list2;\\n    }\\n    return merged.next;\\n}\\n********************************************************\\nThe code above get Runtime Error and the error message is:\\n\\nAddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==23==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x563a0a541602 bp 0x7ffe2b241ce0 sp 0x7ffe2b241bf0 T0)\\n==23==The signal is caused by a READ memory access.\\n==23==Hint: address points to the zero page.\\n    #2 0x7eff48642082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)\\nAddressSanitizer can not provide additional info.\\n==23==ABORTING\\n********************************************************\\n\\nbut if I change the code from \\nif(list1!=NULL){\\n    p->next = list1;\\n}\\nif(list2!=NULL){\\n    p->next = list2;\\n}\\nto \\nif(list1!=NULL){\\n    p->next = list1;\\n}\\nelse{\\n   p->next = list2;\\n}\\nthen it correct without any error."
                    },
                    {
                        "username": "SalehMohammed",
                        "content": "should i add more functions in the class, cuz I think its needed"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You can, but it is not needed."
                    },
                    {
                        "username": "Amar___",
                        "content": "Am i the only one facing memory limit exceed  or i do have some folks here."
                    },
                    {
                        "username": "OmiDaHomi",
                        "content": "very interesting problem, everyone can definitely learn from this"
                    },
                    {
                        "username": "BobDaProgrammer",
                        "content": "this works if list1 and list2 are actuall lists:\\n\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        new_list = []\\n        y = len(list1)\\n        num = 0\\n        for x in range(1, y+1):\\n            if list1[num] < list2[num]:\\n                new_list.append(list1[num])\\n                new_list.append(list2[num])\\n            else:\\n                new_list.append(list2[num])\\n                new_list.append(list1[num])    \\n            num += 1            \\n        return new_list\\n\\nyou could call the function:\\nprint(mergeTwoLists(list1=[2,4,5,8], list2=[1,3,6,12]))\\nand it would output:\\n[1, 2, 3, 4, 5, 6, 8, 12]\\nbut the list that is provided is:\\nListNode{val: 1, next: ListNode{val: 2, next: ListNode{val: 4, next: None}}}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "vimalalwaysrocks",
                        "content": "This is one of the more difficult question. Two lists, either of them can be empty. If both lists are of same size, the solution is simple. "
                    },
                    {
                        "username": "ArtemSerdechnyi",
                        "content": "Not correct example 2 and 3. \\nInput: list1 = [], list2 = []\\nOutput: [] but must be [0, 0]\\nbecouse: val=0 is defoult!"
                    },
                    {
                        "username": "wegocove",
                        "content": "List1 and list2 are empty. There are no default values."
                    },
                    {
                        "username": "kavyakhurana1001",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        ListNode head = null;\\n        ListNode pointer = null;\\n\\n        if(list1.val < list2.val) {\\n            head = new ListNode(list1.val);\\n            list1 = list1.next;\\n            } else {\\n            head = new ListNode(list2.val);\\n            list2 = list2.next;\\n           }\\n           \\n\\n           System.out.println(head.val+\" \"+pointer);\\n\\n        pointer = head;\\n           pointer = pointer.next;\\n        while(list1 != null && list2 != null) {\\n            if(list1.val < list2.val) {\\n            pointer.next = new ListNode(list1.val);\\n            list1 = list1.next;\\n            } else {\\n            pointer.next = new ListNode(list2.val);\\n            list2 = list2.next;\\n           }\\n           pointer = pointer.next;\\n        }\\n\\n        if(list1 != null) {\\n             pointer.next = list1;\\n        }\\n\\n        if(list2 != null) {\\n             pointer.next = list2;\\n        }\\n\\n        return head.next;\\n    }\\n}\\n\\n\\n\\nthis is my code: its getting null pointer exception - however in the print statement pointer value is null, but head is not null. I have no idea why. can someone help pls?"
                    },
                    {
                        "username": "Maheshwar_Bhat",
                        "content": "AttributeError: \\'NoneType\\' object has no attribute \\'val\\'  - I get this error while trying to access a value in the lists given (list1.value) . Why is this coming?"
                    },
                    {
                        "username": "Kinszs",
                        "content": "When I did this problem, leetcode said that my solution is incorrect. It shows that the number 0 is added and I am not sure why\\n\\npublic class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n        var dummyNode = new ListNode();\\n        var tail = dummyNode;\\n         var pointer1 = list1;\\n         var pointer2 = list2;\\n         \\n          while(pointer1 != null && pointer2 != null){\\n              if(pointer1.val < pointer2.val){\\n                  tail.next = pointer1;\\n                  pointer1 = pointer1.next;\\n              }else{\\n                  tail.next = pointer2;\\n                  pointer2 = pointer2.next;\\n              } tail = tail.next;\\n              \\n          }  \\n            return dummyNode;\\n          }\\n         \\n          \\n    }\\n "
                    }
                ]
            },
            {
                "id": 1910218,
                "content": [
                    {
                        "username": "awecefil",
                        "content": "Can anyone help me figure out why the code below is wrong?\\n\\nstruct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2){\\n    struct ListNode merged;\\n    struct ListNode *p = &merged;\\n\\n    while(list1 != NULL && list2 != NULL){\\n        if(list1->val < list2->val){\\n            p->next = list1;\\n            list1 = list1->next; \\n        }\\n        else{\\n            p->next = list2;\\n            list2 = list2->next;\\n        }\\n        p = p->next;\\n    }\\n\\n    if(list1!=NULL){\\n        p->next = list1;\\n    }\\n    if(list2!=NULL){\\n        p->next = list2;\\n    }\\n    return merged.next;\\n}\\n********************************************************\\nThe code above get Runtime Error and the error message is:\\n\\nAddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==23==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x563a0a541602 bp 0x7ffe2b241ce0 sp 0x7ffe2b241bf0 T0)\\n==23==The signal is caused by a READ memory access.\\n==23==Hint: address points to the zero page.\\n    #2 0x7eff48642082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)\\nAddressSanitizer can not provide additional info.\\n==23==ABORTING\\n********************************************************\\n\\nbut if I change the code from \\nif(list1!=NULL){\\n    p->next = list1;\\n}\\nif(list2!=NULL){\\n    p->next = list2;\\n}\\nto \\nif(list1!=NULL){\\n    p->next = list1;\\n}\\nelse{\\n   p->next = list2;\\n}\\nthen it correct without any error."
                    },
                    {
                        "username": "SalehMohammed",
                        "content": "should i add more functions in the class, cuz I think its needed"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You can, but it is not needed."
                    },
                    {
                        "username": "Amar___",
                        "content": "Am i the only one facing memory limit exceed  or i do have some folks here."
                    },
                    {
                        "username": "OmiDaHomi",
                        "content": "very interesting problem, everyone can definitely learn from this"
                    },
                    {
                        "username": "BobDaProgrammer",
                        "content": "this works if list1 and list2 are actuall lists:\\n\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        new_list = []\\n        y = len(list1)\\n        num = 0\\n        for x in range(1, y+1):\\n            if list1[num] < list2[num]:\\n                new_list.append(list1[num])\\n                new_list.append(list2[num])\\n            else:\\n                new_list.append(list2[num])\\n                new_list.append(list1[num])    \\n            num += 1            \\n        return new_list\\n\\nyou could call the function:\\nprint(mergeTwoLists(list1=[2,4,5,8], list2=[1,3,6,12]))\\nand it would output:\\n[1, 2, 3, 4, 5, 6, 8, 12]\\nbut the list that is provided is:\\nListNode{val: 1, next: ListNode{val: 2, next: ListNode{val: 4, next: None}}}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "vimalalwaysrocks",
                        "content": "This is one of the more difficult question. Two lists, either of them can be empty. If both lists are of same size, the solution is simple. "
                    },
                    {
                        "username": "ArtemSerdechnyi",
                        "content": "Not correct example 2 and 3. \\nInput: list1 = [], list2 = []\\nOutput: [] but must be [0, 0]\\nbecouse: val=0 is defoult!"
                    },
                    {
                        "username": "wegocove",
                        "content": "List1 and list2 are empty. There are no default values."
                    },
                    {
                        "username": "kavyakhurana1001",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        ListNode head = null;\\n        ListNode pointer = null;\\n\\n        if(list1.val < list2.val) {\\n            head = new ListNode(list1.val);\\n            list1 = list1.next;\\n            } else {\\n            head = new ListNode(list2.val);\\n            list2 = list2.next;\\n           }\\n           \\n\\n           System.out.println(head.val+\" \"+pointer);\\n\\n        pointer = head;\\n           pointer = pointer.next;\\n        while(list1 != null && list2 != null) {\\n            if(list1.val < list2.val) {\\n            pointer.next = new ListNode(list1.val);\\n            list1 = list1.next;\\n            } else {\\n            pointer.next = new ListNode(list2.val);\\n            list2 = list2.next;\\n           }\\n           pointer = pointer.next;\\n        }\\n\\n        if(list1 != null) {\\n             pointer.next = list1;\\n        }\\n\\n        if(list2 != null) {\\n             pointer.next = list2;\\n        }\\n\\n        return head.next;\\n    }\\n}\\n\\n\\n\\nthis is my code: its getting null pointer exception - however in the print statement pointer value is null, but head is not null. I have no idea why. can someone help pls?"
                    },
                    {
                        "username": "Maheshwar_Bhat",
                        "content": "AttributeError: \\'NoneType\\' object has no attribute \\'val\\'  - I get this error while trying to access a value in the lists given (list1.value) . Why is this coming?"
                    },
                    {
                        "username": "Kinszs",
                        "content": "When I did this problem, leetcode said that my solution is incorrect. It shows that the number 0 is added and I am not sure why\\n\\npublic class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n        var dummyNode = new ListNode();\\n        var tail = dummyNode;\\n         var pointer1 = list1;\\n         var pointer2 = list2;\\n         \\n          while(pointer1 != null && pointer2 != null){\\n              if(pointer1.val < pointer2.val){\\n                  tail.next = pointer1;\\n                  pointer1 = pointer1.next;\\n              }else{\\n                  tail.next = pointer2;\\n                  pointer2 = pointer2.next;\\n              } tail = tail.next;\\n              \\n          }  \\n            return dummyNode;\\n          }\\n         \\n          \\n    }\\n "
                    }
                ]
            },
            {
                "id": 1897339,
                "content": [
                    {
                        "username": "awecefil",
                        "content": "Can anyone help me figure out why the code below is wrong?\\n\\nstruct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2){\\n    struct ListNode merged;\\n    struct ListNode *p = &merged;\\n\\n    while(list1 != NULL && list2 != NULL){\\n        if(list1->val < list2->val){\\n            p->next = list1;\\n            list1 = list1->next; \\n        }\\n        else{\\n            p->next = list2;\\n            list2 = list2->next;\\n        }\\n        p = p->next;\\n    }\\n\\n    if(list1!=NULL){\\n        p->next = list1;\\n    }\\n    if(list2!=NULL){\\n        p->next = list2;\\n    }\\n    return merged.next;\\n}\\n********************************************************\\nThe code above get Runtime Error and the error message is:\\n\\nAddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==23==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x563a0a541602 bp 0x7ffe2b241ce0 sp 0x7ffe2b241bf0 T0)\\n==23==The signal is caused by a READ memory access.\\n==23==Hint: address points to the zero page.\\n    #2 0x7eff48642082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)\\nAddressSanitizer can not provide additional info.\\n==23==ABORTING\\n********************************************************\\n\\nbut if I change the code from \\nif(list1!=NULL){\\n    p->next = list1;\\n}\\nif(list2!=NULL){\\n    p->next = list2;\\n}\\nto \\nif(list1!=NULL){\\n    p->next = list1;\\n}\\nelse{\\n   p->next = list2;\\n}\\nthen it correct without any error."
                    },
                    {
                        "username": "SalehMohammed",
                        "content": "should i add more functions in the class, cuz I think its needed"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You can, but it is not needed."
                    },
                    {
                        "username": "Amar___",
                        "content": "Am i the only one facing memory limit exceed  or i do have some folks here."
                    },
                    {
                        "username": "OmiDaHomi",
                        "content": "very interesting problem, everyone can definitely learn from this"
                    },
                    {
                        "username": "BobDaProgrammer",
                        "content": "this works if list1 and list2 are actuall lists:\\n\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        new_list = []\\n        y = len(list1)\\n        num = 0\\n        for x in range(1, y+1):\\n            if list1[num] < list2[num]:\\n                new_list.append(list1[num])\\n                new_list.append(list2[num])\\n            else:\\n                new_list.append(list2[num])\\n                new_list.append(list1[num])    \\n            num += 1            \\n        return new_list\\n\\nyou could call the function:\\nprint(mergeTwoLists(list1=[2,4,5,8], list2=[1,3,6,12]))\\nand it would output:\\n[1, 2, 3, 4, 5, 6, 8, 12]\\nbut the list that is provided is:\\nListNode{val: 1, next: ListNode{val: 2, next: ListNode{val: 4, next: None}}}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "vimalalwaysrocks",
                        "content": "This is one of the more difficult question. Two lists, either of them can be empty. If both lists are of same size, the solution is simple. "
                    },
                    {
                        "username": "ArtemSerdechnyi",
                        "content": "Not correct example 2 and 3. \\nInput: list1 = [], list2 = []\\nOutput: [] but must be [0, 0]\\nbecouse: val=0 is defoult!"
                    },
                    {
                        "username": "wegocove",
                        "content": "List1 and list2 are empty. There are no default values."
                    },
                    {
                        "username": "kavyakhurana1001",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        ListNode head = null;\\n        ListNode pointer = null;\\n\\n        if(list1.val < list2.val) {\\n            head = new ListNode(list1.val);\\n            list1 = list1.next;\\n            } else {\\n            head = new ListNode(list2.val);\\n            list2 = list2.next;\\n           }\\n           \\n\\n           System.out.println(head.val+\" \"+pointer);\\n\\n        pointer = head;\\n           pointer = pointer.next;\\n        while(list1 != null && list2 != null) {\\n            if(list1.val < list2.val) {\\n            pointer.next = new ListNode(list1.val);\\n            list1 = list1.next;\\n            } else {\\n            pointer.next = new ListNode(list2.val);\\n            list2 = list2.next;\\n           }\\n           pointer = pointer.next;\\n        }\\n\\n        if(list1 != null) {\\n             pointer.next = list1;\\n        }\\n\\n        if(list2 != null) {\\n             pointer.next = list2;\\n        }\\n\\n        return head.next;\\n    }\\n}\\n\\n\\n\\nthis is my code: its getting null pointer exception - however in the print statement pointer value is null, but head is not null. I have no idea why. can someone help pls?"
                    },
                    {
                        "username": "Maheshwar_Bhat",
                        "content": "AttributeError: \\'NoneType\\' object has no attribute \\'val\\'  - I get this error while trying to access a value in the lists given (list1.value) . Why is this coming?"
                    },
                    {
                        "username": "Kinszs",
                        "content": "When I did this problem, leetcode said that my solution is incorrect. It shows that the number 0 is added and I am not sure why\\n\\npublic class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n        var dummyNode = new ListNode();\\n        var tail = dummyNode;\\n         var pointer1 = list1;\\n         var pointer2 = list2;\\n         \\n          while(pointer1 != null && pointer2 != null){\\n              if(pointer1.val < pointer2.val){\\n                  tail.next = pointer1;\\n                  pointer1 = pointer1.next;\\n              }else{\\n                  tail.next = pointer2;\\n                  pointer2 = pointer2.next;\\n              } tail = tail.next;\\n              \\n          }  \\n            return dummyNode;\\n          }\\n         \\n          \\n    }\\n "
                    }
                ]
            },
            {
                "id": 1886696,
                "content": [
                    {
                        "username": "awecefil",
                        "content": "Can anyone help me figure out why the code below is wrong?\\n\\nstruct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2){\\n    struct ListNode merged;\\n    struct ListNode *p = &merged;\\n\\n    while(list1 != NULL && list2 != NULL){\\n        if(list1->val < list2->val){\\n            p->next = list1;\\n            list1 = list1->next; \\n        }\\n        else{\\n            p->next = list2;\\n            list2 = list2->next;\\n        }\\n        p = p->next;\\n    }\\n\\n    if(list1!=NULL){\\n        p->next = list1;\\n    }\\n    if(list2!=NULL){\\n        p->next = list2;\\n    }\\n    return merged.next;\\n}\\n********************************************************\\nThe code above get Runtime Error and the error message is:\\n\\nAddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==23==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x563a0a541602 bp 0x7ffe2b241ce0 sp 0x7ffe2b241bf0 T0)\\n==23==The signal is caused by a READ memory access.\\n==23==Hint: address points to the zero page.\\n    #2 0x7eff48642082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)\\nAddressSanitizer can not provide additional info.\\n==23==ABORTING\\n********************************************************\\n\\nbut if I change the code from \\nif(list1!=NULL){\\n    p->next = list1;\\n}\\nif(list2!=NULL){\\n    p->next = list2;\\n}\\nto \\nif(list1!=NULL){\\n    p->next = list1;\\n}\\nelse{\\n   p->next = list2;\\n}\\nthen it correct without any error."
                    },
                    {
                        "username": "SalehMohammed",
                        "content": "should i add more functions in the class, cuz I think its needed"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You can, but it is not needed."
                    },
                    {
                        "username": "Amar___",
                        "content": "Am i the only one facing memory limit exceed  or i do have some folks here."
                    },
                    {
                        "username": "OmiDaHomi",
                        "content": "very interesting problem, everyone can definitely learn from this"
                    },
                    {
                        "username": "BobDaProgrammer",
                        "content": "this works if list1 and list2 are actuall lists:\\n\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        new_list = []\\n        y = len(list1)\\n        num = 0\\n        for x in range(1, y+1):\\n            if list1[num] < list2[num]:\\n                new_list.append(list1[num])\\n                new_list.append(list2[num])\\n            else:\\n                new_list.append(list2[num])\\n                new_list.append(list1[num])    \\n            num += 1            \\n        return new_list\\n\\nyou could call the function:\\nprint(mergeTwoLists(list1=[2,4,5,8], list2=[1,3,6,12]))\\nand it would output:\\n[1, 2, 3, 4, 5, 6, 8, 12]\\nbut the list that is provided is:\\nListNode{val: 1, next: ListNode{val: 2, next: ListNode{val: 4, next: None}}}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "vimalalwaysrocks",
                        "content": "This is one of the more difficult question. Two lists, either of them can be empty. If both lists are of same size, the solution is simple. "
                    },
                    {
                        "username": "ArtemSerdechnyi",
                        "content": "Not correct example 2 and 3. \\nInput: list1 = [], list2 = []\\nOutput: [] but must be [0, 0]\\nbecouse: val=0 is defoult!"
                    },
                    {
                        "username": "wegocove",
                        "content": "List1 and list2 are empty. There are no default values."
                    },
                    {
                        "username": "kavyakhurana1001",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        ListNode head = null;\\n        ListNode pointer = null;\\n\\n        if(list1.val < list2.val) {\\n            head = new ListNode(list1.val);\\n            list1 = list1.next;\\n            } else {\\n            head = new ListNode(list2.val);\\n            list2 = list2.next;\\n           }\\n           \\n\\n           System.out.println(head.val+\" \"+pointer);\\n\\n        pointer = head;\\n           pointer = pointer.next;\\n        while(list1 != null && list2 != null) {\\n            if(list1.val < list2.val) {\\n            pointer.next = new ListNode(list1.val);\\n            list1 = list1.next;\\n            } else {\\n            pointer.next = new ListNode(list2.val);\\n            list2 = list2.next;\\n           }\\n           pointer = pointer.next;\\n        }\\n\\n        if(list1 != null) {\\n             pointer.next = list1;\\n        }\\n\\n        if(list2 != null) {\\n             pointer.next = list2;\\n        }\\n\\n        return head.next;\\n    }\\n}\\n\\n\\n\\nthis is my code: its getting null pointer exception - however in the print statement pointer value is null, but head is not null. I have no idea why. can someone help pls?"
                    },
                    {
                        "username": "Maheshwar_Bhat",
                        "content": "AttributeError: \\'NoneType\\' object has no attribute \\'val\\'  - I get this error while trying to access a value in the lists given (list1.value) . Why is this coming?"
                    },
                    {
                        "username": "Kinszs",
                        "content": "When I did this problem, leetcode said that my solution is incorrect. It shows that the number 0 is added and I am not sure why\\n\\npublic class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n        var dummyNode = new ListNode();\\n        var tail = dummyNode;\\n         var pointer1 = list1;\\n         var pointer2 = list2;\\n         \\n          while(pointer1 != null && pointer2 != null){\\n              if(pointer1.val < pointer2.val){\\n                  tail.next = pointer1;\\n                  pointer1 = pointer1.next;\\n              }else{\\n                  tail.next = pointer2;\\n                  pointer2 = pointer2.next;\\n              } tail = tail.next;\\n              \\n          }  \\n            return dummyNode;\\n          }\\n         \\n          \\n    }\\n "
                    }
                ]
            },
            {
                "id": 1884620,
                "content": [
                    {
                        "username": "awecefil",
                        "content": "Can anyone help me figure out why the code below is wrong?\\n\\nstruct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2){\\n    struct ListNode merged;\\n    struct ListNode *p = &merged;\\n\\n    while(list1 != NULL && list2 != NULL){\\n        if(list1->val < list2->val){\\n            p->next = list1;\\n            list1 = list1->next; \\n        }\\n        else{\\n            p->next = list2;\\n            list2 = list2->next;\\n        }\\n        p = p->next;\\n    }\\n\\n    if(list1!=NULL){\\n        p->next = list1;\\n    }\\n    if(list2!=NULL){\\n        p->next = list2;\\n    }\\n    return merged.next;\\n}\\n********************************************************\\nThe code above get Runtime Error and the error message is:\\n\\nAddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==23==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x563a0a541602 bp 0x7ffe2b241ce0 sp 0x7ffe2b241bf0 T0)\\n==23==The signal is caused by a READ memory access.\\n==23==Hint: address points to the zero page.\\n    #2 0x7eff48642082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)\\nAddressSanitizer can not provide additional info.\\n==23==ABORTING\\n********************************************************\\n\\nbut if I change the code from \\nif(list1!=NULL){\\n    p->next = list1;\\n}\\nif(list2!=NULL){\\n    p->next = list2;\\n}\\nto \\nif(list1!=NULL){\\n    p->next = list1;\\n}\\nelse{\\n   p->next = list2;\\n}\\nthen it correct without any error."
                    },
                    {
                        "username": "SalehMohammed",
                        "content": "should i add more functions in the class, cuz I think its needed"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You can, but it is not needed."
                    },
                    {
                        "username": "Amar___",
                        "content": "Am i the only one facing memory limit exceed  or i do have some folks here."
                    },
                    {
                        "username": "OmiDaHomi",
                        "content": "very interesting problem, everyone can definitely learn from this"
                    },
                    {
                        "username": "BobDaProgrammer",
                        "content": "this works if list1 and list2 are actuall lists:\\n\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        new_list = []\\n        y = len(list1)\\n        num = 0\\n        for x in range(1, y+1):\\n            if list1[num] < list2[num]:\\n                new_list.append(list1[num])\\n                new_list.append(list2[num])\\n            else:\\n                new_list.append(list2[num])\\n                new_list.append(list1[num])    \\n            num += 1            \\n        return new_list\\n\\nyou could call the function:\\nprint(mergeTwoLists(list1=[2,4,5,8], list2=[1,3,6,12]))\\nand it would output:\\n[1, 2, 3, 4, 5, 6, 8, 12]\\nbut the list that is provided is:\\nListNode{val: 1, next: ListNode{val: 2, next: ListNode{val: 4, next: None}}}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "vimalalwaysrocks",
                        "content": "This is one of the more difficult question. Two lists, either of them can be empty. If both lists are of same size, the solution is simple. "
                    },
                    {
                        "username": "ArtemSerdechnyi",
                        "content": "Not correct example 2 and 3. \\nInput: list1 = [], list2 = []\\nOutput: [] but must be [0, 0]\\nbecouse: val=0 is defoult!"
                    },
                    {
                        "username": "wegocove",
                        "content": "List1 and list2 are empty. There are no default values."
                    },
                    {
                        "username": "kavyakhurana1001",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        ListNode head = null;\\n        ListNode pointer = null;\\n\\n        if(list1.val < list2.val) {\\n            head = new ListNode(list1.val);\\n            list1 = list1.next;\\n            } else {\\n            head = new ListNode(list2.val);\\n            list2 = list2.next;\\n           }\\n           \\n\\n           System.out.println(head.val+\" \"+pointer);\\n\\n        pointer = head;\\n           pointer = pointer.next;\\n        while(list1 != null && list2 != null) {\\n            if(list1.val < list2.val) {\\n            pointer.next = new ListNode(list1.val);\\n            list1 = list1.next;\\n            } else {\\n            pointer.next = new ListNode(list2.val);\\n            list2 = list2.next;\\n           }\\n           pointer = pointer.next;\\n        }\\n\\n        if(list1 != null) {\\n             pointer.next = list1;\\n        }\\n\\n        if(list2 != null) {\\n             pointer.next = list2;\\n        }\\n\\n        return head.next;\\n    }\\n}\\n\\n\\n\\nthis is my code: its getting null pointer exception - however in the print statement pointer value is null, but head is not null. I have no idea why. can someone help pls?"
                    },
                    {
                        "username": "Maheshwar_Bhat",
                        "content": "AttributeError: \\'NoneType\\' object has no attribute \\'val\\'  - I get this error while trying to access a value in the lists given (list1.value) . Why is this coming?"
                    },
                    {
                        "username": "Kinszs",
                        "content": "When I did this problem, leetcode said that my solution is incorrect. It shows that the number 0 is added and I am not sure why\\n\\npublic class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n        var dummyNode = new ListNode();\\n        var tail = dummyNode;\\n         var pointer1 = list1;\\n         var pointer2 = list2;\\n         \\n          while(pointer1 != null && pointer2 != null){\\n              if(pointer1.val < pointer2.val){\\n                  tail.next = pointer1;\\n                  pointer1 = pointer1.next;\\n              }else{\\n                  tail.next = pointer2;\\n                  pointer2 = pointer2.next;\\n              } tail = tail.next;\\n              \\n          }  \\n            return dummyNode;\\n          }\\n         \\n          \\n    }\\n "
                    }
                ]
            },
            {
                "id": 1878960,
                "content": [
                    {
                        "username": "awecefil",
                        "content": "Can anyone help me figure out why the code below is wrong?\\n\\nstruct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2){\\n    struct ListNode merged;\\n    struct ListNode *p = &merged;\\n\\n    while(list1 != NULL && list2 != NULL){\\n        if(list1->val < list2->val){\\n            p->next = list1;\\n            list1 = list1->next; \\n        }\\n        else{\\n            p->next = list2;\\n            list2 = list2->next;\\n        }\\n        p = p->next;\\n    }\\n\\n    if(list1!=NULL){\\n        p->next = list1;\\n    }\\n    if(list2!=NULL){\\n        p->next = list2;\\n    }\\n    return merged.next;\\n}\\n********************************************************\\nThe code above get Runtime Error and the error message is:\\n\\nAddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==23==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x563a0a541602 bp 0x7ffe2b241ce0 sp 0x7ffe2b241bf0 T0)\\n==23==The signal is caused by a READ memory access.\\n==23==Hint: address points to the zero page.\\n    #2 0x7eff48642082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)\\nAddressSanitizer can not provide additional info.\\n==23==ABORTING\\n********************************************************\\n\\nbut if I change the code from \\nif(list1!=NULL){\\n    p->next = list1;\\n}\\nif(list2!=NULL){\\n    p->next = list2;\\n}\\nto \\nif(list1!=NULL){\\n    p->next = list1;\\n}\\nelse{\\n   p->next = list2;\\n}\\nthen it correct without any error."
                    },
                    {
                        "username": "SalehMohammed",
                        "content": "should i add more functions in the class, cuz I think its needed"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You can, but it is not needed."
                    },
                    {
                        "username": "Amar___",
                        "content": "Am i the only one facing memory limit exceed  or i do have some folks here."
                    },
                    {
                        "username": "OmiDaHomi",
                        "content": "very interesting problem, everyone can definitely learn from this"
                    },
                    {
                        "username": "BobDaProgrammer",
                        "content": "this works if list1 and list2 are actuall lists:\\n\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        new_list = []\\n        y = len(list1)\\n        num = 0\\n        for x in range(1, y+1):\\n            if list1[num] < list2[num]:\\n                new_list.append(list1[num])\\n                new_list.append(list2[num])\\n            else:\\n                new_list.append(list2[num])\\n                new_list.append(list1[num])    \\n            num += 1            \\n        return new_list\\n\\nyou could call the function:\\nprint(mergeTwoLists(list1=[2,4,5,8], list2=[1,3,6,12]))\\nand it would output:\\n[1, 2, 3, 4, 5, 6, 8, 12]\\nbut the list that is provided is:\\nListNode{val: 1, next: ListNode{val: 2, next: ListNode{val: 4, next: None}}}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "vimalalwaysrocks",
                        "content": "This is one of the more difficult question. Two lists, either of them can be empty. If both lists are of same size, the solution is simple. "
                    },
                    {
                        "username": "ArtemSerdechnyi",
                        "content": "Not correct example 2 and 3. \\nInput: list1 = [], list2 = []\\nOutput: [] but must be [0, 0]\\nbecouse: val=0 is defoult!"
                    },
                    {
                        "username": "wegocove",
                        "content": "List1 and list2 are empty. There are no default values."
                    },
                    {
                        "username": "kavyakhurana1001",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        ListNode head = null;\\n        ListNode pointer = null;\\n\\n        if(list1.val < list2.val) {\\n            head = new ListNode(list1.val);\\n            list1 = list1.next;\\n            } else {\\n            head = new ListNode(list2.val);\\n            list2 = list2.next;\\n           }\\n           \\n\\n           System.out.println(head.val+\" \"+pointer);\\n\\n        pointer = head;\\n           pointer = pointer.next;\\n        while(list1 != null && list2 != null) {\\n            if(list1.val < list2.val) {\\n            pointer.next = new ListNode(list1.val);\\n            list1 = list1.next;\\n            } else {\\n            pointer.next = new ListNode(list2.val);\\n            list2 = list2.next;\\n           }\\n           pointer = pointer.next;\\n        }\\n\\n        if(list1 != null) {\\n             pointer.next = list1;\\n        }\\n\\n        if(list2 != null) {\\n             pointer.next = list2;\\n        }\\n\\n        return head.next;\\n    }\\n}\\n\\n\\n\\nthis is my code: its getting null pointer exception - however in the print statement pointer value is null, but head is not null. I have no idea why. can someone help pls?"
                    },
                    {
                        "username": "Maheshwar_Bhat",
                        "content": "AttributeError: \\'NoneType\\' object has no attribute \\'val\\'  - I get this error while trying to access a value in the lists given (list1.value) . Why is this coming?"
                    },
                    {
                        "username": "Kinszs",
                        "content": "When I did this problem, leetcode said that my solution is incorrect. It shows that the number 0 is added and I am not sure why\\n\\npublic class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n        var dummyNode = new ListNode();\\n        var tail = dummyNode;\\n         var pointer1 = list1;\\n         var pointer2 = list2;\\n         \\n          while(pointer1 != null && pointer2 != null){\\n              if(pointer1.val < pointer2.val){\\n                  tail.next = pointer1;\\n                  pointer1 = pointer1.next;\\n              }else{\\n                  tail.next = pointer2;\\n                  pointer2 = pointer2.next;\\n              } tail = tail.next;\\n              \\n          }  \\n            return dummyNode;\\n          }\\n         \\n          \\n    }\\n "
                    }
                ]
            },
            {
                "id": 1877914,
                "content": [
                    {
                        "username": "awecefil",
                        "content": "Can anyone help me figure out why the code below is wrong?\\n\\nstruct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2){\\n    struct ListNode merged;\\n    struct ListNode *p = &merged;\\n\\n    while(list1 != NULL && list2 != NULL){\\n        if(list1->val < list2->val){\\n            p->next = list1;\\n            list1 = list1->next; \\n        }\\n        else{\\n            p->next = list2;\\n            list2 = list2->next;\\n        }\\n        p = p->next;\\n    }\\n\\n    if(list1!=NULL){\\n        p->next = list1;\\n    }\\n    if(list2!=NULL){\\n        p->next = list2;\\n    }\\n    return merged.next;\\n}\\n********************************************************\\nThe code above get Runtime Error and the error message is:\\n\\nAddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==23==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x563a0a541602 bp 0x7ffe2b241ce0 sp 0x7ffe2b241bf0 T0)\\n==23==The signal is caused by a READ memory access.\\n==23==Hint: address points to the zero page.\\n    #2 0x7eff48642082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)\\nAddressSanitizer can not provide additional info.\\n==23==ABORTING\\n********************************************************\\n\\nbut if I change the code from \\nif(list1!=NULL){\\n    p->next = list1;\\n}\\nif(list2!=NULL){\\n    p->next = list2;\\n}\\nto \\nif(list1!=NULL){\\n    p->next = list1;\\n}\\nelse{\\n   p->next = list2;\\n}\\nthen it correct without any error."
                    },
                    {
                        "username": "SalehMohammed",
                        "content": "should i add more functions in the class, cuz I think its needed"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You can, but it is not needed."
                    },
                    {
                        "username": "Amar___",
                        "content": "Am i the only one facing memory limit exceed  or i do have some folks here."
                    },
                    {
                        "username": "OmiDaHomi",
                        "content": "very interesting problem, everyone can definitely learn from this"
                    },
                    {
                        "username": "BobDaProgrammer",
                        "content": "this works if list1 and list2 are actuall lists:\\n\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        new_list = []\\n        y = len(list1)\\n        num = 0\\n        for x in range(1, y+1):\\n            if list1[num] < list2[num]:\\n                new_list.append(list1[num])\\n                new_list.append(list2[num])\\n            else:\\n                new_list.append(list2[num])\\n                new_list.append(list1[num])    \\n            num += 1            \\n        return new_list\\n\\nyou could call the function:\\nprint(mergeTwoLists(list1=[2,4,5,8], list2=[1,3,6,12]))\\nand it would output:\\n[1, 2, 3, 4, 5, 6, 8, 12]\\nbut the list that is provided is:\\nListNode{val: 1, next: ListNode{val: 2, next: ListNode{val: 4, next: None}}}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "vimalalwaysrocks",
                        "content": "This is one of the more difficult question. Two lists, either of them can be empty. If both lists are of same size, the solution is simple. "
                    },
                    {
                        "username": "ArtemSerdechnyi",
                        "content": "Not correct example 2 and 3. \\nInput: list1 = [], list2 = []\\nOutput: [] but must be [0, 0]\\nbecouse: val=0 is defoult!"
                    },
                    {
                        "username": "wegocove",
                        "content": "List1 and list2 are empty. There are no default values."
                    },
                    {
                        "username": "kavyakhurana1001",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        ListNode head = null;\\n        ListNode pointer = null;\\n\\n        if(list1.val < list2.val) {\\n            head = new ListNode(list1.val);\\n            list1 = list1.next;\\n            } else {\\n            head = new ListNode(list2.val);\\n            list2 = list2.next;\\n           }\\n           \\n\\n           System.out.println(head.val+\" \"+pointer);\\n\\n        pointer = head;\\n           pointer = pointer.next;\\n        while(list1 != null && list2 != null) {\\n            if(list1.val < list2.val) {\\n            pointer.next = new ListNode(list1.val);\\n            list1 = list1.next;\\n            } else {\\n            pointer.next = new ListNode(list2.val);\\n            list2 = list2.next;\\n           }\\n           pointer = pointer.next;\\n        }\\n\\n        if(list1 != null) {\\n             pointer.next = list1;\\n        }\\n\\n        if(list2 != null) {\\n             pointer.next = list2;\\n        }\\n\\n        return head.next;\\n    }\\n}\\n\\n\\n\\nthis is my code: its getting null pointer exception - however in the print statement pointer value is null, but head is not null. I have no idea why. can someone help pls?"
                    },
                    {
                        "username": "Maheshwar_Bhat",
                        "content": "AttributeError: \\'NoneType\\' object has no attribute \\'val\\'  - I get this error while trying to access a value in the lists given (list1.value) . Why is this coming?"
                    },
                    {
                        "username": "Kinszs",
                        "content": "When I did this problem, leetcode said that my solution is incorrect. It shows that the number 0 is added and I am not sure why\\n\\npublic class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n        var dummyNode = new ListNode();\\n        var tail = dummyNode;\\n         var pointer1 = list1;\\n         var pointer2 = list2;\\n         \\n          while(pointer1 != null && pointer2 != null){\\n              if(pointer1.val < pointer2.val){\\n                  tail.next = pointer1;\\n                  pointer1 = pointer1.next;\\n              }else{\\n                  tail.next = pointer2;\\n                  pointer2 = pointer2.next;\\n              } tail = tail.next;\\n              \\n          }  \\n            return dummyNode;\\n          }\\n         \\n          \\n    }\\n "
                    }
                ]
            },
            {
                "id": 1875543,
                "content": [
                    {
                        "username": "awecefil",
                        "content": "Can anyone help me figure out why the code below is wrong?\\n\\nstruct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2){\\n    struct ListNode merged;\\n    struct ListNode *p = &merged;\\n\\n    while(list1 != NULL && list2 != NULL){\\n        if(list1->val < list2->val){\\n            p->next = list1;\\n            list1 = list1->next; \\n        }\\n        else{\\n            p->next = list2;\\n            list2 = list2->next;\\n        }\\n        p = p->next;\\n    }\\n\\n    if(list1!=NULL){\\n        p->next = list1;\\n    }\\n    if(list2!=NULL){\\n        p->next = list2;\\n    }\\n    return merged.next;\\n}\\n********************************************************\\nThe code above get Runtime Error and the error message is:\\n\\nAddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==23==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x563a0a541602 bp 0x7ffe2b241ce0 sp 0x7ffe2b241bf0 T0)\\n==23==The signal is caused by a READ memory access.\\n==23==Hint: address points to the zero page.\\n    #2 0x7eff48642082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)\\nAddressSanitizer can not provide additional info.\\n==23==ABORTING\\n********************************************************\\n\\nbut if I change the code from \\nif(list1!=NULL){\\n    p->next = list1;\\n}\\nif(list2!=NULL){\\n    p->next = list2;\\n}\\nto \\nif(list1!=NULL){\\n    p->next = list1;\\n}\\nelse{\\n   p->next = list2;\\n}\\nthen it correct without any error."
                    },
                    {
                        "username": "SalehMohammed",
                        "content": "should i add more functions in the class, cuz I think its needed"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "You can, but it is not needed."
                    },
                    {
                        "username": "Amar___",
                        "content": "Am i the only one facing memory limit exceed  or i do have some folks here."
                    },
                    {
                        "username": "OmiDaHomi",
                        "content": "very interesting problem, everyone can definitely learn from this"
                    },
                    {
                        "username": "BobDaProgrammer",
                        "content": "this works if list1 and list2 are actuall lists:\\n\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n        new_list = []\\n        y = len(list1)\\n        num = 0\\n        for x in range(1, y+1):\\n            if list1[num] < list2[num]:\\n                new_list.append(list1[num])\\n                new_list.append(list2[num])\\n            else:\\n                new_list.append(list2[num])\\n                new_list.append(list1[num])    \\n            num += 1            \\n        return new_list\\n\\nyou could call the function:\\nprint(mergeTwoLists(list1=[2,4,5,8], list2=[1,3,6,12]))\\nand it would output:\\n[1, 2, 3, 4, 5, 6, 8, 12]\\nbut the list that is provided is:\\nListNode{val: 1, next: ListNode{val: 2, next: ListNode{val: 4, next: None}}}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "vimalalwaysrocks",
                        "content": "This is one of the more difficult question. Two lists, either of them can be empty. If both lists are of same size, the solution is simple. "
                    },
                    {
                        "username": "ArtemSerdechnyi",
                        "content": "Not correct example 2 and 3. \\nInput: list1 = [], list2 = []\\nOutput: [] but must be [0, 0]\\nbecouse: val=0 is defoult!"
                    },
                    {
                        "username": "wegocove",
                        "content": "List1 and list2 are empty. There are no default values."
                    },
                    {
                        "username": "kavyakhurana1001",
                        "content": "/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        ListNode head = null;\\n        ListNode pointer = null;\\n\\n        if(list1.val < list2.val) {\\n            head = new ListNode(list1.val);\\n            list1 = list1.next;\\n            } else {\\n            head = new ListNode(list2.val);\\n            list2 = list2.next;\\n           }\\n           \\n\\n           System.out.println(head.val+\" \"+pointer);\\n\\n        pointer = head;\\n           pointer = pointer.next;\\n        while(list1 != null && list2 != null) {\\n            if(list1.val < list2.val) {\\n            pointer.next = new ListNode(list1.val);\\n            list1 = list1.next;\\n            } else {\\n            pointer.next = new ListNode(list2.val);\\n            list2 = list2.next;\\n           }\\n           pointer = pointer.next;\\n        }\\n\\n        if(list1 != null) {\\n             pointer.next = list1;\\n        }\\n\\n        if(list2 != null) {\\n             pointer.next = list2;\\n        }\\n\\n        return head.next;\\n    }\\n}\\n\\n\\n\\nthis is my code: its getting null pointer exception - however in the print statement pointer value is null, but head is not null. I have no idea why. can someone help pls?"
                    },
                    {
                        "username": "Maheshwar_Bhat",
                        "content": "AttributeError: \\'NoneType\\' object has no attribute \\'val\\'  - I get this error while trying to access a value in the lists given (list1.value) . Why is this coming?"
                    },
                    {
                        "username": "Kinszs",
                        "content": "When I did this problem, leetcode said that my solution is incorrect. It shows that the number 0 is added and I am not sure why\\n\\npublic class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n        var dummyNode = new ListNode();\\n        var tail = dummyNode;\\n         var pointer1 = list1;\\n         var pointer2 = list2;\\n         \\n          while(pointer1 != null && pointer2 != null){\\n              if(pointer1.val < pointer2.val){\\n                  tail.next = pointer1;\\n                  pointer1 = pointer1.next;\\n              }else{\\n                  tail.next = pointer2;\\n                  pointer2 = pointer2.next;\\n              } tail = tail.next;\\n              \\n          }  \\n            return dummyNode;\\n          }\\n         \\n          \\n    }\\n "
                    }
                ]
            },
            {
                "id": 1874400,
                "content": [
                    {
                        "username": "user5451ao",
                        "content": "What can I use below code? Thanks!\\n\\n`return list1.concat(list2).sort();`"
                    },
                    {
                        "username": "ADiyorbek",
                        "content": "Why + isn\\'t working???"
                    },
                    {
                        "username": "sdfasdfadsfdsafsa",
                        "content": "Are both lists always the same \"length,\" or can they vary?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "They can vary."
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n            cur1, res1 = list1, []\\n    \\n            while cur1:\\n                res1.append(cur1.val)\\n                cur1 = cur1.next\\n                \\n            cur2, res2 = list2, []\\n            \\n            while cur2:\\n                res2.append(cur2.val)\\n                cur2 = cur2.next\\n                \\n            l = sorted(res1 + res2)\\n            \\n            ans = final_ans = ListNode()\\n            \\n            \\n            for i in range(len(l)):\\n                ans.next = ListNode(l[i])\\n                ans = ans.next\\n                \\n            return final_ans.next\\n```\\nThe problem solved\\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* p1= list1;\\n        ListNode* p2= list2;\\n        ListNode* dummyNode =new ListNode(-1);\\n        ListNode* p3=dummyNode;\\n        while(p1!=NULL && p2!=NULL)\\n        {\\n            if(p1->val <=p2->val){\\n                p3->next=p1;\\n                p1=p1->next;\\n            }\\n            else{\\n                p3->next=p2;\\n                p2=p2->next;\\n            }\\n            p3=p3->next;\\n        }\\n        while(p2!=NULL)\\n        {\\n            p3->next=p2;\\n            p2=p2->next;\\n            p3=p3->next;\\n        }\\n         while(p1!=NULL)\\n        {\\n            p3->next=p1;\\n            p1=p1->next;\\n            p3=p3->next;\\n        }\\n        return dummyNode->next;\\n    }\\n};"
                    },
                    {
                        "username": "hicugi",
                        "content": "Test broken for JavaScript. Even though - I did encode/decode for `ListNode`, on 3th test I\\'m getting \"Runtime Error\":\\n```\\n[31:0x5e84180]      651 ms: Mark-sweep (reduce) 130.2 (135.1) -> 79.7 (81.7) MB, 90.6 / 0.0 ms  (+ 0.0 ms in 0 steps since start of marking, biggest step 0.0 ms, walltime since start of marking 92 ms) (average mu = 0.552, current mu = 0.588) last resort G[31:0x5e84180]      731 ms: Mark-sweep (reduce) 79.7 (81.7) -> 79.7 (81.4) MB, 80.1 / 0.0 ms  (average mu = 0.364, current mu = 0.000) last resort GC in old space requested\\n```\\n\\np.s. ecoder / decoder:\\n```\\nconst listNodeDecode = (data) => {\\n  let result = [];\\n  let item = data;\\n\\n  do {\\n    if (!item || !item.val) break;\\n    result.push(item.val);\\n    item = item.next;\\n  } while (data.next);\\n\\n  return (result);\\n};\\n\\nconst listNodeEncode = values => {\\n  let value = values.shift();\\n\\n  if (value === undefined) return null;\\n\\n  const result = new ListNode(value);\\n  let prevResult = result\\n  while ((value = values.shift()) !== undefined) {\\n    prevResult.next = new ListNode(value);\\n    prevResult = prevResult.next;\\n  }\\n  return result;\\n}\\n```"
                    },
                    {
                        "username": "nikhilsonigolusoni",
                        "content": "if you know merge sorted array problem then you can solve very easy using 3 pointer variable  with extra space "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Linked lists don\\'t need extra space."
                    },
                    {
                        "username": "mo1ok",
                        "content": "Base case is LC easy, but edge cases are LC medium."
                    },
                    {
                        "username": "manojnayak759",
                        "content": "def mergetwolists(list1, list2):\\n    output = []\\n    if list1 is None or len(list1)==0:\\n        return list2\\n    elif list2 is None or len(list2)==0:\\n        return list1\\n    elif len(list1)>0 and len(list2)>0:\\n        final_list = list1+list2\\n        final_list.sort()\\n        return final_list\\n    else:\\n        return output"
                    },
                    {
                        "username": "rise_of_obi_wan",
                        "content": "I got my list sorted, but the test does not output the last element (that I know is linked) I don't get why, anyone can give me a hint ? Is it the test that is broken ? "
                    },
                    {
                        "username": "rise_of_obi_wan",
                        "content": "No one ? "
                    }
                ]
            },
            {
                "id": 1873711,
                "content": [
                    {
                        "username": "user5451ao",
                        "content": "What can I use below code? Thanks!\\n\\n`return list1.concat(list2).sort();`"
                    },
                    {
                        "username": "ADiyorbek",
                        "content": "Why + isn\\'t working???"
                    },
                    {
                        "username": "sdfasdfadsfdsafsa",
                        "content": "Are both lists always the same \"length,\" or can they vary?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "They can vary."
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n            cur1, res1 = list1, []\\n    \\n            while cur1:\\n                res1.append(cur1.val)\\n                cur1 = cur1.next\\n                \\n            cur2, res2 = list2, []\\n            \\n            while cur2:\\n                res2.append(cur2.val)\\n                cur2 = cur2.next\\n                \\n            l = sorted(res1 + res2)\\n            \\n            ans = final_ans = ListNode()\\n            \\n            \\n            for i in range(len(l)):\\n                ans.next = ListNode(l[i])\\n                ans = ans.next\\n                \\n            return final_ans.next\\n```\\nThe problem solved\\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* p1= list1;\\n        ListNode* p2= list2;\\n        ListNode* dummyNode =new ListNode(-1);\\n        ListNode* p3=dummyNode;\\n        while(p1!=NULL && p2!=NULL)\\n        {\\n            if(p1->val <=p2->val){\\n                p3->next=p1;\\n                p1=p1->next;\\n            }\\n            else{\\n                p3->next=p2;\\n                p2=p2->next;\\n            }\\n            p3=p3->next;\\n        }\\n        while(p2!=NULL)\\n        {\\n            p3->next=p2;\\n            p2=p2->next;\\n            p3=p3->next;\\n        }\\n         while(p1!=NULL)\\n        {\\n            p3->next=p1;\\n            p1=p1->next;\\n            p3=p3->next;\\n        }\\n        return dummyNode->next;\\n    }\\n};"
                    },
                    {
                        "username": "hicugi",
                        "content": "Test broken for JavaScript. Even though - I did encode/decode for `ListNode`, on 3th test I\\'m getting \"Runtime Error\":\\n```\\n[31:0x5e84180]      651 ms: Mark-sweep (reduce) 130.2 (135.1) -> 79.7 (81.7) MB, 90.6 / 0.0 ms  (+ 0.0 ms in 0 steps since start of marking, biggest step 0.0 ms, walltime since start of marking 92 ms) (average mu = 0.552, current mu = 0.588) last resort G[31:0x5e84180]      731 ms: Mark-sweep (reduce) 79.7 (81.7) -> 79.7 (81.4) MB, 80.1 / 0.0 ms  (average mu = 0.364, current mu = 0.000) last resort GC in old space requested\\n```\\n\\np.s. ecoder / decoder:\\n```\\nconst listNodeDecode = (data) => {\\n  let result = [];\\n  let item = data;\\n\\n  do {\\n    if (!item || !item.val) break;\\n    result.push(item.val);\\n    item = item.next;\\n  } while (data.next);\\n\\n  return (result);\\n};\\n\\nconst listNodeEncode = values => {\\n  let value = values.shift();\\n\\n  if (value === undefined) return null;\\n\\n  const result = new ListNode(value);\\n  let prevResult = result\\n  while ((value = values.shift()) !== undefined) {\\n    prevResult.next = new ListNode(value);\\n    prevResult = prevResult.next;\\n  }\\n  return result;\\n}\\n```"
                    },
                    {
                        "username": "nikhilsonigolusoni",
                        "content": "if you know merge sorted array problem then you can solve very easy using 3 pointer variable  with extra space "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Linked lists don\\'t need extra space."
                    },
                    {
                        "username": "mo1ok",
                        "content": "Base case is LC easy, but edge cases are LC medium."
                    },
                    {
                        "username": "manojnayak759",
                        "content": "def mergetwolists(list1, list2):\\n    output = []\\n    if list1 is None or len(list1)==0:\\n        return list2\\n    elif list2 is None or len(list2)==0:\\n        return list1\\n    elif len(list1)>0 and len(list2)>0:\\n        final_list = list1+list2\\n        final_list.sort()\\n        return final_list\\n    else:\\n        return output"
                    },
                    {
                        "username": "rise_of_obi_wan",
                        "content": "I got my list sorted, but the test does not output the last element (that I know is linked) I don't get why, anyone can give me a hint ? Is it the test that is broken ? "
                    },
                    {
                        "username": "rise_of_obi_wan",
                        "content": "No one ? "
                    }
                ]
            },
            {
                "id": 1872128,
                "content": [
                    {
                        "username": "user5451ao",
                        "content": "What can I use below code? Thanks!\\n\\n`return list1.concat(list2).sort();`"
                    },
                    {
                        "username": "ADiyorbek",
                        "content": "Why + isn\\'t working???"
                    },
                    {
                        "username": "sdfasdfadsfdsafsa",
                        "content": "Are both lists always the same \"length,\" or can they vary?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "They can vary."
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n            cur1, res1 = list1, []\\n    \\n            while cur1:\\n                res1.append(cur1.val)\\n                cur1 = cur1.next\\n                \\n            cur2, res2 = list2, []\\n            \\n            while cur2:\\n                res2.append(cur2.val)\\n                cur2 = cur2.next\\n                \\n            l = sorted(res1 + res2)\\n            \\n            ans = final_ans = ListNode()\\n            \\n            \\n            for i in range(len(l)):\\n                ans.next = ListNode(l[i])\\n                ans = ans.next\\n                \\n            return final_ans.next\\n```\\nThe problem solved\\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* p1= list1;\\n        ListNode* p2= list2;\\n        ListNode* dummyNode =new ListNode(-1);\\n        ListNode* p3=dummyNode;\\n        while(p1!=NULL && p2!=NULL)\\n        {\\n            if(p1->val <=p2->val){\\n                p3->next=p1;\\n                p1=p1->next;\\n            }\\n            else{\\n                p3->next=p2;\\n                p2=p2->next;\\n            }\\n            p3=p3->next;\\n        }\\n        while(p2!=NULL)\\n        {\\n            p3->next=p2;\\n            p2=p2->next;\\n            p3=p3->next;\\n        }\\n         while(p1!=NULL)\\n        {\\n            p3->next=p1;\\n            p1=p1->next;\\n            p3=p3->next;\\n        }\\n        return dummyNode->next;\\n    }\\n};"
                    },
                    {
                        "username": "hicugi",
                        "content": "Test broken for JavaScript. Even though - I did encode/decode for `ListNode`, on 3th test I\\'m getting \"Runtime Error\":\\n```\\n[31:0x5e84180]      651 ms: Mark-sweep (reduce) 130.2 (135.1) -> 79.7 (81.7) MB, 90.6 / 0.0 ms  (+ 0.0 ms in 0 steps since start of marking, biggest step 0.0 ms, walltime since start of marking 92 ms) (average mu = 0.552, current mu = 0.588) last resort G[31:0x5e84180]      731 ms: Mark-sweep (reduce) 79.7 (81.7) -> 79.7 (81.4) MB, 80.1 / 0.0 ms  (average mu = 0.364, current mu = 0.000) last resort GC in old space requested\\n```\\n\\np.s. ecoder / decoder:\\n```\\nconst listNodeDecode = (data) => {\\n  let result = [];\\n  let item = data;\\n\\n  do {\\n    if (!item || !item.val) break;\\n    result.push(item.val);\\n    item = item.next;\\n  } while (data.next);\\n\\n  return (result);\\n};\\n\\nconst listNodeEncode = values => {\\n  let value = values.shift();\\n\\n  if (value === undefined) return null;\\n\\n  const result = new ListNode(value);\\n  let prevResult = result\\n  while ((value = values.shift()) !== undefined) {\\n    prevResult.next = new ListNode(value);\\n    prevResult = prevResult.next;\\n  }\\n  return result;\\n}\\n```"
                    },
                    {
                        "username": "nikhilsonigolusoni",
                        "content": "if you know merge sorted array problem then you can solve very easy using 3 pointer variable  with extra space "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Linked lists don\\'t need extra space."
                    },
                    {
                        "username": "mo1ok",
                        "content": "Base case is LC easy, but edge cases are LC medium."
                    },
                    {
                        "username": "manojnayak759",
                        "content": "def mergetwolists(list1, list2):\\n    output = []\\n    if list1 is None or len(list1)==0:\\n        return list2\\n    elif list2 is None or len(list2)==0:\\n        return list1\\n    elif len(list1)>0 and len(list2)>0:\\n        final_list = list1+list2\\n        final_list.sort()\\n        return final_list\\n    else:\\n        return output"
                    },
                    {
                        "username": "rise_of_obi_wan",
                        "content": "I got my list sorted, but the test does not output the last element (that I know is linked) I don't get why, anyone can give me a hint ? Is it the test that is broken ? "
                    },
                    {
                        "username": "rise_of_obi_wan",
                        "content": "No one ? "
                    }
                ]
            },
            {
                "id": 1857634,
                "content": [
                    {
                        "username": "user5451ao",
                        "content": "What can I use below code? Thanks!\\n\\n`return list1.concat(list2).sort();`"
                    },
                    {
                        "username": "ADiyorbek",
                        "content": "Why + isn\\'t working???"
                    },
                    {
                        "username": "sdfasdfadsfdsafsa",
                        "content": "Are both lists always the same \"length,\" or can they vary?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "They can vary."
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n            cur1, res1 = list1, []\\n    \\n            while cur1:\\n                res1.append(cur1.val)\\n                cur1 = cur1.next\\n                \\n            cur2, res2 = list2, []\\n            \\n            while cur2:\\n                res2.append(cur2.val)\\n                cur2 = cur2.next\\n                \\n            l = sorted(res1 + res2)\\n            \\n            ans = final_ans = ListNode()\\n            \\n            \\n            for i in range(len(l)):\\n                ans.next = ListNode(l[i])\\n                ans = ans.next\\n                \\n            return final_ans.next\\n```\\nThe problem solved\\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* p1= list1;\\n        ListNode* p2= list2;\\n        ListNode* dummyNode =new ListNode(-1);\\n        ListNode* p3=dummyNode;\\n        while(p1!=NULL && p2!=NULL)\\n        {\\n            if(p1->val <=p2->val){\\n                p3->next=p1;\\n                p1=p1->next;\\n            }\\n            else{\\n                p3->next=p2;\\n                p2=p2->next;\\n            }\\n            p3=p3->next;\\n        }\\n        while(p2!=NULL)\\n        {\\n            p3->next=p2;\\n            p2=p2->next;\\n            p3=p3->next;\\n        }\\n         while(p1!=NULL)\\n        {\\n            p3->next=p1;\\n            p1=p1->next;\\n            p3=p3->next;\\n        }\\n        return dummyNode->next;\\n    }\\n};"
                    },
                    {
                        "username": "hicugi",
                        "content": "Test broken for JavaScript. Even though - I did encode/decode for `ListNode`, on 3th test I\\'m getting \"Runtime Error\":\\n```\\n[31:0x5e84180]      651 ms: Mark-sweep (reduce) 130.2 (135.1) -> 79.7 (81.7) MB, 90.6 / 0.0 ms  (+ 0.0 ms in 0 steps since start of marking, biggest step 0.0 ms, walltime since start of marking 92 ms) (average mu = 0.552, current mu = 0.588) last resort G[31:0x5e84180]      731 ms: Mark-sweep (reduce) 79.7 (81.7) -> 79.7 (81.4) MB, 80.1 / 0.0 ms  (average mu = 0.364, current mu = 0.000) last resort GC in old space requested\\n```\\n\\np.s. ecoder / decoder:\\n```\\nconst listNodeDecode = (data) => {\\n  let result = [];\\n  let item = data;\\n\\n  do {\\n    if (!item || !item.val) break;\\n    result.push(item.val);\\n    item = item.next;\\n  } while (data.next);\\n\\n  return (result);\\n};\\n\\nconst listNodeEncode = values => {\\n  let value = values.shift();\\n\\n  if (value === undefined) return null;\\n\\n  const result = new ListNode(value);\\n  let prevResult = result\\n  while ((value = values.shift()) !== undefined) {\\n    prevResult.next = new ListNode(value);\\n    prevResult = prevResult.next;\\n  }\\n  return result;\\n}\\n```"
                    },
                    {
                        "username": "nikhilsonigolusoni",
                        "content": "if you know merge sorted array problem then you can solve very easy using 3 pointer variable  with extra space "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Linked lists don\\'t need extra space."
                    },
                    {
                        "username": "mo1ok",
                        "content": "Base case is LC easy, but edge cases are LC medium."
                    },
                    {
                        "username": "manojnayak759",
                        "content": "def mergetwolists(list1, list2):\\n    output = []\\n    if list1 is None or len(list1)==0:\\n        return list2\\n    elif list2 is None or len(list2)==0:\\n        return list1\\n    elif len(list1)>0 and len(list2)>0:\\n        final_list = list1+list2\\n        final_list.sort()\\n        return final_list\\n    else:\\n        return output"
                    },
                    {
                        "username": "rise_of_obi_wan",
                        "content": "I got my list sorted, but the test does not output the last element (that I know is linked) I don't get why, anyone can give me a hint ? Is it the test that is broken ? "
                    },
                    {
                        "username": "rise_of_obi_wan",
                        "content": "No one ? "
                    }
                ]
            },
            {
                "id": 1856713,
                "content": [
                    {
                        "username": "user5451ao",
                        "content": "What can I use below code? Thanks!\\n\\n`return list1.concat(list2).sort();`"
                    },
                    {
                        "username": "ADiyorbek",
                        "content": "Why + isn\\'t working???"
                    },
                    {
                        "username": "sdfasdfadsfdsafsa",
                        "content": "Are both lists always the same \"length,\" or can they vary?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "They can vary."
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n            cur1, res1 = list1, []\\n    \\n            while cur1:\\n                res1.append(cur1.val)\\n                cur1 = cur1.next\\n                \\n            cur2, res2 = list2, []\\n            \\n            while cur2:\\n                res2.append(cur2.val)\\n                cur2 = cur2.next\\n                \\n            l = sorted(res1 + res2)\\n            \\n            ans = final_ans = ListNode()\\n            \\n            \\n            for i in range(len(l)):\\n                ans.next = ListNode(l[i])\\n                ans = ans.next\\n                \\n            return final_ans.next\\n```\\nThe problem solved\\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* p1= list1;\\n        ListNode* p2= list2;\\n        ListNode* dummyNode =new ListNode(-1);\\n        ListNode* p3=dummyNode;\\n        while(p1!=NULL && p2!=NULL)\\n        {\\n            if(p1->val <=p2->val){\\n                p3->next=p1;\\n                p1=p1->next;\\n            }\\n            else{\\n                p3->next=p2;\\n                p2=p2->next;\\n            }\\n            p3=p3->next;\\n        }\\n        while(p2!=NULL)\\n        {\\n            p3->next=p2;\\n            p2=p2->next;\\n            p3=p3->next;\\n        }\\n         while(p1!=NULL)\\n        {\\n            p3->next=p1;\\n            p1=p1->next;\\n            p3=p3->next;\\n        }\\n        return dummyNode->next;\\n    }\\n};"
                    },
                    {
                        "username": "hicugi",
                        "content": "Test broken for JavaScript. Even though - I did encode/decode for `ListNode`, on 3th test I\\'m getting \"Runtime Error\":\\n```\\n[31:0x5e84180]      651 ms: Mark-sweep (reduce) 130.2 (135.1) -> 79.7 (81.7) MB, 90.6 / 0.0 ms  (+ 0.0 ms in 0 steps since start of marking, biggest step 0.0 ms, walltime since start of marking 92 ms) (average mu = 0.552, current mu = 0.588) last resort G[31:0x5e84180]      731 ms: Mark-sweep (reduce) 79.7 (81.7) -> 79.7 (81.4) MB, 80.1 / 0.0 ms  (average mu = 0.364, current mu = 0.000) last resort GC in old space requested\\n```\\n\\np.s. ecoder / decoder:\\n```\\nconst listNodeDecode = (data) => {\\n  let result = [];\\n  let item = data;\\n\\n  do {\\n    if (!item || !item.val) break;\\n    result.push(item.val);\\n    item = item.next;\\n  } while (data.next);\\n\\n  return (result);\\n};\\n\\nconst listNodeEncode = values => {\\n  let value = values.shift();\\n\\n  if (value === undefined) return null;\\n\\n  const result = new ListNode(value);\\n  let prevResult = result\\n  while ((value = values.shift()) !== undefined) {\\n    prevResult.next = new ListNode(value);\\n    prevResult = prevResult.next;\\n  }\\n  return result;\\n}\\n```"
                    },
                    {
                        "username": "nikhilsonigolusoni",
                        "content": "if you know merge sorted array problem then you can solve very easy using 3 pointer variable  with extra space "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Linked lists don\\'t need extra space."
                    },
                    {
                        "username": "mo1ok",
                        "content": "Base case is LC easy, but edge cases are LC medium."
                    },
                    {
                        "username": "manojnayak759",
                        "content": "def mergetwolists(list1, list2):\\n    output = []\\n    if list1 is None or len(list1)==0:\\n        return list2\\n    elif list2 is None or len(list2)==0:\\n        return list1\\n    elif len(list1)>0 and len(list2)>0:\\n        final_list = list1+list2\\n        final_list.sort()\\n        return final_list\\n    else:\\n        return output"
                    },
                    {
                        "username": "rise_of_obi_wan",
                        "content": "I got my list sorted, but the test does not output the last element (that I know is linked) I don't get why, anyone can give me a hint ? Is it the test that is broken ? "
                    },
                    {
                        "username": "rise_of_obi_wan",
                        "content": "No one ? "
                    }
                ]
            },
            {
                "id": 1854660,
                "content": [
                    {
                        "username": "user5451ao",
                        "content": "What can I use below code? Thanks!\\n\\n`return list1.concat(list2).sort();`"
                    },
                    {
                        "username": "ADiyorbek",
                        "content": "Why + isn\\'t working???"
                    },
                    {
                        "username": "sdfasdfadsfdsafsa",
                        "content": "Are both lists always the same \"length,\" or can they vary?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "They can vary."
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n            cur1, res1 = list1, []\\n    \\n            while cur1:\\n                res1.append(cur1.val)\\n                cur1 = cur1.next\\n                \\n            cur2, res2 = list2, []\\n            \\n            while cur2:\\n                res2.append(cur2.val)\\n                cur2 = cur2.next\\n                \\n            l = sorted(res1 + res2)\\n            \\n            ans = final_ans = ListNode()\\n            \\n            \\n            for i in range(len(l)):\\n                ans.next = ListNode(l[i])\\n                ans = ans.next\\n                \\n            return final_ans.next\\n```\\nThe problem solved\\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* p1= list1;\\n        ListNode* p2= list2;\\n        ListNode* dummyNode =new ListNode(-1);\\n        ListNode* p3=dummyNode;\\n        while(p1!=NULL && p2!=NULL)\\n        {\\n            if(p1->val <=p2->val){\\n                p3->next=p1;\\n                p1=p1->next;\\n            }\\n            else{\\n                p3->next=p2;\\n                p2=p2->next;\\n            }\\n            p3=p3->next;\\n        }\\n        while(p2!=NULL)\\n        {\\n            p3->next=p2;\\n            p2=p2->next;\\n            p3=p3->next;\\n        }\\n         while(p1!=NULL)\\n        {\\n            p3->next=p1;\\n            p1=p1->next;\\n            p3=p3->next;\\n        }\\n        return dummyNode->next;\\n    }\\n};"
                    },
                    {
                        "username": "hicugi",
                        "content": "Test broken for JavaScript. Even though - I did encode/decode for `ListNode`, on 3th test I\\'m getting \"Runtime Error\":\\n```\\n[31:0x5e84180]      651 ms: Mark-sweep (reduce) 130.2 (135.1) -> 79.7 (81.7) MB, 90.6 / 0.0 ms  (+ 0.0 ms in 0 steps since start of marking, biggest step 0.0 ms, walltime since start of marking 92 ms) (average mu = 0.552, current mu = 0.588) last resort G[31:0x5e84180]      731 ms: Mark-sweep (reduce) 79.7 (81.7) -> 79.7 (81.4) MB, 80.1 / 0.0 ms  (average mu = 0.364, current mu = 0.000) last resort GC in old space requested\\n```\\n\\np.s. ecoder / decoder:\\n```\\nconst listNodeDecode = (data) => {\\n  let result = [];\\n  let item = data;\\n\\n  do {\\n    if (!item || !item.val) break;\\n    result.push(item.val);\\n    item = item.next;\\n  } while (data.next);\\n\\n  return (result);\\n};\\n\\nconst listNodeEncode = values => {\\n  let value = values.shift();\\n\\n  if (value === undefined) return null;\\n\\n  const result = new ListNode(value);\\n  let prevResult = result\\n  while ((value = values.shift()) !== undefined) {\\n    prevResult.next = new ListNode(value);\\n    prevResult = prevResult.next;\\n  }\\n  return result;\\n}\\n```"
                    },
                    {
                        "username": "nikhilsonigolusoni",
                        "content": "if you know merge sorted array problem then you can solve very easy using 3 pointer variable  with extra space "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Linked lists don\\'t need extra space."
                    },
                    {
                        "username": "mo1ok",
                        "content": "Base case is LC easy, but edge cases are LC medium."
                    },
                    {
                        "username": "manojnayak759",
                        "content": "def mergetwolists(list1, list2):\\n    output = []\\n    if list1 is None or len(list1)==0:\\n        return list2\\n    elif list2 is None or len(list2)==0:\\n        return list1\\n    elif len(list1)>0 and len(list2)>0:\\n        final_list = list1+list2\\n        final_list.sort()\\n        return final_list\\n    else:\\n        return output"
                    },
                    {
                        "username": "rise_of_obi_wan",
                        "content": "I got my list sorted, but the test does not output the last element (that I know is linked) I don't get why, anyone can give me a hint ? Is it the test that is broken ? "
                    },
                    {
                        "username": "rise_of_obi_wan",
                        "content": "No one ? "
                    }
                ]
            },
            {
                "id": 1854356,
                "content": [
                    {
                        "username": "user5451ao",
                        "content": "What can I use below code? Thanks!\\n\\n`return list1.concat(list2).sort();`"
                    },
                    {
                        "username": "ADiyorbek",
                        "content": "Why + isn\\'t working???"
                    },
                    {
                        "username": "sdfasdfadsfdsafsa",
                        "content": "Are both lists always the same \"length,\" or can they vary?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "They can vary."
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n            cur1, res1 = list1, []\\n    \\n            while cur1:\\n                res1.append(cur1.val)\\n                cur1 = cur1.next\\n                \\n            cur2, res2 = list2, []\\n            \\n            while cur2:\\n                res2.append(cur2.val)\\n                cur2 = cur2.next\\n                \\n            l = sorted(res1 + res2)\\n            \\n            ans = final_ans = ListNode()\\n            \\n            \\n            for i in range(len(l)):\\n                ans.next = ListNode(l[i])\\n                ans = ans.next\\n                \\n            return final_ans.next\\n```\\nThe problem solved\\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* p1= list1;\\n        ListNode* p2= list2;\\n        ListNode* dummyNode =new ListNode(-1);\\n        ListNode* p3=dummyNode;\\n        while(p1!=NULL && p2!=NULL)\\n        {\\n            if(p1->val <=p2->val){\\n                p3->next=p1;\\n                p1=p1->next;\\n            }\\n            else{\\n                p3->next=p2;\\n                p2=p2->next;\\n            }\\n            p3=p3->next;\\n        }\\n        while(p2!=NULL)\\n        {\\n            p3->next=p2;\\n            p2=p2->next;\\n            p3=p3->next;\\n        }\\n         while(p1!=NULL)\\n        {\\n            p3->next=p1;\\n            p1=p1->next;\\n            p3=p3->next;\\n        }\\n        return dummyNode->next;\\n    }\\n};"
                    },
                    {
                        "username": "hicugi",
                        "content": "Test broken for JavaScript. Even though - I did encode/decode for `ListNode`, on 3th test I\\'m getting \"Runtime Error\":\\n```\\n[31:0x5e84180]      651 ms: Mark-sweep (reduce) 130.2 (135.1) -> 79.7 (81.7) MB, 90.6 / 0.0 ms  (+ 0.0 ms in 0 steps since start of marking, biggest step 0.0 ms, walltime since start of marking 92 ms) (average mu = 0.552, current mu = 0.588) last resort G[31:0x5e84180]      731 ms: Mark-sweep (reduce) 79.7 (81.7) -> 79.7 (81.4) MB, 80.1 / 0.0 ms  (average mu = 0.364, current mu = 0.000) last resort GC in old space requested\\n```\\n\\np.s. ecoder / decoder:\\n```\\nconst listNodeDecode = (data) => {\\n  let result = [];\\n  let item = data;\\n\\n  do {\\n    if (!item || !item.val) break;\\n    result.push(item.val);\\n    item = item.next;\\n  } while (data.next);\\n\\n  return (result);\\n};\\n\\nconst listNodeEncode = values => {\\n  let value = values.shift();\\n\\n  if (value === undefined) return null;\\n\\n  const result = new ListNode(value);\\n  let prevResult = result\\n  while ((value = values.shift()) !== undefined) {\\n    prevResult.next = new ListNode(value);\\n    prevResult = prevResult.next;\\n  }\\n  return result;\\n}\\n```"
                    },
                    {
                        "username": "nikhilsonigolusoni",
                        "content": "if you know merge sorted array problem then you can solve very easy using 3 pointer variable  with extra space "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Linked lists don\\'t need extra space."
                    },
                    {
                        "username": "mo1ok",
                        "content": "Base case is LC easy, but edge cases are LC medium."
                    },
                    {
                        "username": "manojnayak759",
                        "content": "def mergetwolists(list1, list2):\\n    output = []\\n    if list1 is None or len(list1)==0:\\n        return list2\\n    elif list2 is None or len(list2)==0:\\n        return list1\\n    elif len(list1)>0 and len(list2)>0:\\n        final_list = list1+list2\\n        final_list.sort()\\n        return final_list\\n    else:\\n        return output"
                    },
                    {
                        "username": "rise_of_obi_wan",
                        "content": "I got my list sorted, but the test does not output the last element (that I know is linked) I don't get why, anyone can give me a hint ? Is it the test that is broken ? "
                    },
                    {
                        "username": "rise_of_obi_wan",
                        "content": "No one ? "
                    }
                ]
            },
            {
                "id": 1853814,
                "content": [
                    {
                        "username": "user5451ao",
                        "content": "What can I use below code? Thanks!\\n\\n`return list1.concat(list2).sort();`"
                    },
                    {
                        "username": "ADiyorbek",
                        "content": "Why + isn\\'t working???"
                    },
                    {
                        "username": "sdfasdfadsfdsafsa",
                        "content": "Are both lists always the same \"length,\" or can they vary?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "They can vary."
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n            cur1, res1 = list1, []\\n    \\n            while cur1:\\n                res1.append(cur1.val)\\n                cur1 = cur1.next\\n                \\n            cur2, res2 = list2, []\\n            \\n            while cur2:\\n                res2.append(cur2.val)\\n                cur2 = cur2.next\\n                \\n            l = sorted(res1 + res2)\\n            \\n            ans = final_ans = ListNode()\\n            \\n            \\n            for i in range(len(l)):\\n                ans.next = ListNode(l[i])\\n                ans = ans.next\\n                \\n            return final_ans.next\\n```\\nThe problem solved\\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* p1= list1;\\n        ListNode* p2= list2;\\n        ListNode* dummyNode =new ListNode(-1);\\n        ListNode* p3=dummyNode;\\n        while(p1!=NULL && p2!=NULL)\\n        {\\n            if(p1->val <=p2->val){\\n                p3->next=p1;\\n                p1=p1->next;\\n            }\\n            else{\\n                p3->next=p2;\\n                p2=p2->next;\\n            }\\n            p3=p3->next;\\n        }\\n        while(p2!=NULL)\\n        {\\n            p3->next=p2;\\n            p2=p2->next;\\n            p3=p3->next;\\n        }\\n         while(p1!=NULL)\\n        {\\n            p3->next=p1;\\n            p1=p1->next;\\n            p3=p3->next;\\n        }\\n        return dummyNode->next;\\n    }\\n};"
                    },
                    {
                        "username": "hicugi",
                        "content": "Test broken for JavaScript. Even though - I did encode/decode for `ListNode`, on 3th test I\\'m getting \"Runtime Error\":\\n```\\n[31:0x5e84180]      651 ms: Mark-sweep (reduce) 130.2 (135.1) -> 79.7 (81.7) MB, 90.6 / 0.0 ms  (+ 0.0 ms in 0 steps since start of marking, biggest step 0.0 ms, walltime since start of marking 92 ms) (average mu = 0.552, current mu = 0.588) last resort G[31:0x5e84180]      731 ms: Mark-sweep (reduce) 79.7 (81.7) -> 79.7 (81.4) MB, 80.1 / 0.0 ms  (average mu = 0.364, current mu = 0.000) last resort GC in old space requested\\n```\\n\\np.s. ecoder / decoder:\\n```\\nconst listNodeDecode = (data) => {\\n  let result = [];\\n  let item = data;\\n\\n  do {\\n    if (!item || !item.val) break;\\n    result.push(item.val);\\n    item = item.next;\\n  } while (data.next);\\n\\n  return (result);\\n};\\n\\nconst listNodeEncode = values => {\\n  let value = values.shift();\\n\\n  if (value === undefined) return null;\\n\\n  const result = new ListNode(value);\\n  let prevResult = result\\n  while ((value = values.shift()) !== undefined) {\\n    prevResult.next = new ListNode(value);\\n    prevResult = prevResult.next;\\n  }\\n  return result;\\n}\\n```"
                    },
                    {
                        "username": "nikhilsonigolusoni",
                        "content": "if you know merge sorted array problem then you can solve very easy using 3 pointer variable  with extra space "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Linked lists don\\'t need extra space."
                    },
                    {
                        "username": "mo1ok",
                        "content": "Base case is LC easy, but edge cases are LC medium."
                    },
                    {
                        "username": "manojnayak759",
                        "content": "def mergetwolists(list1, list2):\\n    output = []\\n    if list1 is None or len(list1)==0:\\n        return list2\\n    elif list2 is None or len(list2)==0:\\n        return list1\\n    elif len(list1)>0 and len(list2)>0:\\n        final_list = list1+list2\\n        final_list.sort()\\n        return final_list\\n    else:\\n        return output"
                    },
                    {
                        "username": "rise_of_obi_wan",
                        "content": "I got my list sorted, but the test does not output the last element (that I know is linked) I don't get why, anyone can give me a hint ? Is it the test that is broken ? "
                    },
                    {
                        "username": "rise_of_obi_wan",
                        "content": "No one ? "
                    }
                ]
            },
            {
                "id": 1848003,
                "content": [
                    {
                        "username": "user5451ao",
                        "content": "What can I use below code? Thanks!\\n\\n`return list1.concat(list2).sort();`"
                    },
                    {
                        "username": "ADiyorbek",
                        "content": "Why + isn\\'t working???"
                    },
                    {
                        "username": "sdfasdfadsfdsafsa",
                        "content": "Are both lists always the same \"length,\" or can they vary?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "They can vary."
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n            cur1, res1 = list1, []\\n    \\n            while cur1:\\n                res1.append(cur1.val)\\n                cur1 = cur1.next\\n                \\n            cur2, res2 = list2, []\\n            \\n            while cur2:\\n                res2.append(cur2.val)\\n                cur2 = cur2.next\\n                \\n            l = sorted(res1 + res2)\\n            \\n            ans = final_ans = ListNode()\\n            \\n            \\n            for i in range(len(l)):\\n                ans.next = ListNode(l[i])\\n                ans = ans.next\\n                \\n            return final_ans.next\\n```\\nThe problem solved\\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* p1= list1;\\n        ListNode* p2= list2;\\n        ListNode* dummyNode =new ListNode(-1);\\n        ListNode* p3=dummyNode;\\n        while(p1!=NULL && p2!=NULL)\\n        {\\n            if(p1->val <=p2->val){\\n                p3->next=p1;\\n                p1=p1->next;\\n            }\\n            else{\\n                p3->next=p2;\\n                p2=p2->next;\\n            }\\n            p3=p3->next;\\n        }\\n        while(p2!=NULL)\\n        {\\n            p3->next=p2;\\n            p2=p2->next;\\n            p3=p3->next;\\n        }\\n         while(p1!=NULL)\\n        {\\n            p3->next=p1;\\n            p1=p1->next;\\n            p3=p3->next;\\n        }\\n        return dummyNode->next;\\n    }\\n};"
                    },
                    {
                        "username": "hicugi",
                        "content": "Test broken for JavaScript. Even though - I did encode/decode for `ListNode`, on 3th test I\\'m getting \"Runtime Error\":\\n```\\n[31:0x5e84180]      651 ms: Mark-sweep (reduce) 130.2 (135.1) -> 79.7 (81.7) MB, 90.6 / 0.0 ms  (+ 0.0 ms in 0 steps since start of marking, biggest step 0.0 ms, walltime since start of marking 92 ms) (average mu = 0.552, current mu = 0.588) last resort G[31:0x5e84180]      731 ms: Mark-sweep (reduce) 79.7 (81.7) -> 79.7 (81.4) MB, 80.1 / 0.0 ms  (average mu = 0.364, current mu = 0.000) last resort GC in old space requested\\n```\\n\\np.s. ecoder / decoder:\\n```\\nconst listNodeDecode = (data) => {\\n  let result = [];\\n  let item = data;\\n\\n  do {\\n    if (!item || !item.val) break;\\n    result.push(item.val);\\n    item = item.next;\\n  } while (data.next);\\n\\n  return (result);\\n};\\n\\nconst listNodeEncode = values => {\\n  let value = values.shift();\\n\\n  if (value === undefined) return null;\\n\\n  const result = new ListNode(value);\\n  let prevResult = result\\n  while ((value = values.shift()) !== undefined) {\\n    prevResult.next = new ListNode(value);\\n    prevResult = prevResult.next;\\n  }\\n  return result;\\n}\\n```"
                    },
                    {
                        "username": "nikhilsonigolusoni",
                        "content": "if you know merge sorted array problem then you can solve very easy using 3 pointer variable  with extra space "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Linked lists don\\'t need extra space."
                    },
                    {
                        "username": "mo1ok",
                        "content": "Base case is LC easy, but edge cases are LC medium."
                    },
                    {
                        "username": "manojnayak759",
                        "content": "def mergetwolists(list1, list2):\\n    output = []\\n    if list1 is None or len(list1)==0:\\n        return list2\\n    elif list2 is None or len(list2)==0:\\n        return list1\\n    elif len(list1)>0 and len(list2)>0:\\n        final_list = list1+list2\\n        final_list.sort()\\n        return final_list\\n    else:\\n        return output"
                    },
                    {
                        "username": "rise_of_obi_wan",
                        "content": "I got my list sorted, but the test does not output the last element (that I know is linked) I don't get why, anyone can give me a hint ? Is it the test that is broken ? "
                    },
                    {
                        "username": "rise_of_obi_wan",
                        "content": "No one ? "
                    }
                ]
            },
            {
                "id": 1844699,
                "content": [
                    {
                        "username": "user5451ao",
                        "content": "What can I use below code? Thanks!\\n\\n`return list1.concat(list2).sort();`"
                    },
                    {
                        "username": "ADiyorbek",
                        "content": "Why + isn\\'t working???"
                    },
                    {
                        "username": "sdfasdfadsfdsafsa",
                        "content": "Are both lists always the same \"length,\" or can they vary?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "They can vary."
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def mergeTwoLists(self, list1, list2):\\n            cur1, res1 = list1, []\\n    \\n            while cur1:\\n                res1.append(cur1.val)\\n                cur1 = cur1.next\\n                \\n            cur2, res2 = list2, []\\n            \\n            while cur2:\\n                res2.append(cur2.val)\\n                cur2 = cur2.next\\n                \\n            l = sorted(res1 + res2)\\n            \\n            ans = final_ans = ListNode()\\n            \\n            \\n            for i in range(len(l)):\\n                ans.next = ListNode(l[i])\\n                ans = ans.next\\n                \\n            return final_ans.next\\n```\\nThe problem solved\\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "tarikulislamriko910",
                        "content": "class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* p1= list1;\\n        ListNode* p2= list2;\\n        ListNode* dummyNode =new ListNode(-1);\\n        ListNode* p3=dummyNode;\\n        while(p1!=NULL && p2!=NULL)\\n        {\\n            if(p1->val <=p2->val){\\n                p3->next=p1;\\n                p1=p1->next;\\n            }\\n            else{\\n                p3->next=p2;\\n                p2=p2->next;\\n            }\\n            p3=p3->next;\\n        }\\n        while(p2!=NULL)\\n        {\\n            p3->next=p2;\\n            p2=p2->next;\\n            p3=p3->next;\\n        }\\n         while(p1!=NULL)\\n        {\\n            p3->next=p1;\\n            p1=p1->next;\\n            p3=p3->next;\\n        }\\n        return dummyNode->next;\\n    }\\n};"
                    },
                    {
                        "username": "hicugi",
                        "content": "Test broken for JavaScript. Even though - I did encode/decode for `ListNode`, on 3th test I\\'m getting \"Runtime Error\":\\n```\\n[31:0x5e84180]      651 ms: Mark-sweep (reduce) 130.2 (135.1) -> 79.7 (81.7) MB, 90.6 / 0.0 ms  (+ 0.0 ms in 0 steps since start of marking, biggest step 0.0 ms, walltime since start of marking 92 ms) (average mu = 0.552, current mu = 0.588) last resort G[31:0x5e84180]      731 ms: Mark-sweep (reduce) 79.7 (81.7) -> 79.7 (81.4) MB, 80.1 / 0.0 ms  (average mu = 0.364, current mu = 0.000) last resort GC in old space requested\\n```\\n\\np.s. ecoder / decoder:\\n```\\nconst listNodeDecode = (data) => {\\n  let result = [];\\n  let item = data;\\n\\n  do {\\n    if (!item || !item.val) break;\\n    result.push(item.val);\\n    item = item.next;\\n  } while (data.next);\\n\\n  return (result);\\n};\\n\\nconst listNodeEncode = values => {\\n  let value = values.shift();\\n\\n  if (value === undefined) return null;\\n\\n  const result = new ListNode(value);\\n  let prevResult = result\\n  while ((value = values.shift()) !== undefined) {\\n    prevResult.next = new ListNode(value);\\n    prevResult = prevResult.next;\\n  }\\n  return result;\\n}\\n```"
                    },
                    {
                        "username": "nikhilsonigolusoni",
                        "content": "if you know merge sorted array problem then you can solve very easy using 3 pointer variable  with extra space "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Linked lists don\\'t need extra space."
                    },
                    {
                        "username": "mo1ok",
                        "content": "Base case is LC easy, but edge cases are LC medium."
                    },
                    {
                        "username": "manojnayak759",
                        "content": "def mergetwolists(list1, list2):\\n    output = []\\n    if list1 is None or len(list1)==0:\\n        return list2\\n    elif list2 is None or len(list2)==0:\\n        return list1\\n    elif len(list1)>0 and len(list2)>0:\\n        final_list = list1+list2\\n        final_list.sort()\\n        return final_list\\n    else:\\n        return output"
                    },
                    {
                        "username": "rise_of_obi_wan",
                        "content": "I got my list sorted, but the test does not output the last element (that I know is linked) I don't get why, anyone can give me a hint ? Is it the test that is broken ? "
                    },
                    {
                        "username": "rise_of_obi_wan",
                        "content": "No one ? "
                    }
                ]
            },
            {
                "id": 1840230,
                "content": [
                    {
                        "username": "JoshuvaBernard",
                        "content": "I\\'m still learning java, I have a doubt. So usually we store the address of the next structure(pointer) in the next variable right?... how do we do this in java. or if you have any recourses it will be useful "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "like so: currentNode.next = list1;"
                    },
                    {
                        "username": "najwer23",
                        "content": "when it is ListNode instead of array\\n\\n\\u201CYou don\\u2019t have the right\\u201D O \\u201CYou don\\u2019t have the right\\u201D\\n\\u201CYou don\\u2019t have the right\\u201D O \\u201CYou don\\u2019t have the right\\u201D"
                    },
                    {
                        "username": "davidalvarezj",
                        "content": "what is a ListNode never used that on javascript why outpus similar to an array?"
                    },
                    {
                        "username": "greenchalk",
                        "content": "I can\\'t understand why you can\\'t access list.val or list.next right from the beginning of the code. If you do so you get the following error:\\n\\n\"TypeError: Cannot read properties of null (reading \\'val\\')\" \\n\\nBut list1/2 is not empty, if you console log list1 or list2 you get the printed out list. So what am I doing wrong  here?\\n"
                    },
                    {
                        "username": "Mr636",
                        "content": "Poor Challenge! This is not how singly linked lists work. "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "What do you mean? This is how linked lists work."
                    },
                    {
                        "username": "bharukahimanshu",
                        "content": "class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if(l1 == NULL){\\n            return l2;\\n        }\\n\\n        if(l2 == NULL){\\n            return l1;\\n        }\\n\\n        if(l1 -> val > l2 -> val){\\n            std::swap(l1, l2);\\n        }\\n\\n        ListNode* head = l1;\\n\\n        while(l1 != NULL && l2 != NULL){\\n\\n            ListNode* temp = NULL;\\n\\n            while(l1 != NULL && l2 != NULL && l1 -> val <= l2 -> val){\\n                temp = l1;\\n                l1 =l1 -> next;\\n            }\\n\\n            temp -> next = l2;\\n            std::swap(l1, l2);\\n\\n        }\\n\\n        return head;\\n\\n        \\n    }\\n};"
                    },
                    {
                        "username": "prikshitsingh2",
                        "content": "please help me my code is nor running for the intput list1=[2] and list2[1]\\noutput it giving is [2]\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n      if(list1==NULL) return list2;\\n      if(list2==NULL) return list1;\\n\\n      if(list1->val<=list2->val){\\n          solve(list1,list2);\\n          \\n      }\\n      else{\\n          solve(list2,list1);\\n      }\\n      return list1;\\n    }\\n\\n    void solve(ListNode* first,ListNode* second){\\n        // if(first->next==NULL) {\\n        //     first->next=second;\\n        // }\\n        ListNode* curr1=first;\\n        ListNode*next1=curr1->next;\\n        ListNode* curr2=second;\\n        ListNode* next2=curr2->next;\\n\\n        while(next1!=NULL && curr2!=NULL){\\n            if((curr2->val>=curr1->val) && (curr2->val<=next1->val)){\\n                curr1->next=curr2;\\n                next2=curr2->next;\\n                curr2->next=next1;\\n\\n                curr1=curr2;\\n                curr2=next2;\\n            }\\n            else{\\n                curr1=next1;\\n                next1=next1->next;\\n                if(next1==NULL){\\n                    curr1->next=curr2;\\n                    // return first;\\n                }\\n            }\\n        }\\n       \\n    }\\n};"
                    },
                    {
                        "username": "mazentharwatfathy",
                        "content": "# listNode in leetcode expliaing\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode { // to define the linked list\\n *     int val; //the value in each node \\n *     ListNode *next;  // the pointer to the next node\\n        //three constructors\\n *     ListNode() : val(0), next(nullptr) {} // default with no arguments\\n *     ListNode(int x) : val(x), next(nullptr) {} // with value only , will set pointer to null\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {} // has the 2 values \\n * };\\n */"
                    },
                    {
                        "username": "axectly",
                        "content": "Idk why it\\'s not allowed to use built-in methods. We can merge lists with two strings (python):\\n\\n `list1.extend(list2)`\\n `list1.sort()`\\n `return list1`\\n"
                    },
                    {
                        "username": "razau314",
                        "content": "Because you are using list while there are linked list in the questin."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "Because this is a linked list. It\\'s not an array"
                    },
                    {
                        "username": "Monkescripts",
                        "content": "Hi guys, just wondering why this implementation is wrong? Instead of current-> next = list 1, I did current = list1 and updates current at the end of the while loop instead. \\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n\\n  `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(!list1) return list2;\\n        if(!list2) return list1;\\n        ListNode* current = nullptr;\\n        ListNode* result = current;\\n        while(list1||list2){ \\n            if(!list2 && list1 || (list1->val < list2->val)){\\n                current = list1;\\n                list1= list1->next;\\n            }\\n            else{\\n                current= list2;\\n                list2 = list2->next;\\n            }\\n            current = current->next;      \\n        }\\n        return result;\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1837895,
                "content": [
                    {
                        "username": "JoshuvaBernard",
                        "content": "I\\'m still learning java, I have a doubt. So usually we store the address of the next structure(pointer) in the next variable right?... how do we do this in java. or if you have any recourses it will be useful "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "like so: currentNode.next = list1;"
                    },
                    {
                        "username": "najwer23",
                        "content": "when it is ListNode instead of array\\n\\n\\u201CYou don\\u2019t have the right\\u201D O \\u201CYou don\\u2019t have the right\\u201D\\n\\u201CYou don\\u2019t have the right\\u201D O \\u201CYou don\\u2019t have the right\\u201D"
                    },
                    {
                        "username": "davidalvarezj",
                        "content": "what is a ListNode never used that on javascript why outpus similar to an array?"
                    },
                    {
                        "username": "greenchalk",
                        "content": "I can\\'t understand why you can\\'t access list.val or list.next right from the beginning of the code. If you do so you get the following error:\\n\\n\"TypeError: Cannot read properties of null (reading \\'val\\')\" \\n\\nBut list1/2 is not empty, if you console log list1 or list2 you get the printed out list. So what am I doing wrong  here?\\n"
                    },
                    {
                        "username": "Mr636",
                        "content": "Poor Challenge! This is not how singly linked lists work. "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "What do you mean? This is how linked lists work."
                    },
                    {
                        "username": "bharukahimanshu",
                        "content": "class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if(l1 == NULL){\\n            return l2;\\n        }\\n\\n        if(l2 == NULL){\\n            return l1;\\n        }\\n\\n        if(l1 -> val > l2 -> val){\\n            std::swap(l1, l2);\\n        }\\n\\n        ListNode* head = l1;\\n\\n        while(l1 != NULL && l2 != NULL){\\n\\n            ListNode* temp = NULL;\\n\\n            while(l1 != NULL && l2 != NULL && l1 -> val <= l2 -> val){\\n                temp = l1;\\n                l1 =l1 -> next;\\n            }\\n\\n            temp -> next = l2;\\n            std::swap(l1, l2);\\n\\n        }\\n\\n        return head;\\n\\n        \\n    }\\n};"
                    },
                    {
                        "username": "prikshitsingh2",
                        "content": "please help me my code is nor running for the intput list1=[2] and list2[1]\\noutput it giving is [2]\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n      if(list1==NULL) return list2;\\n      if(list2==NULL) return list1;\\n\\n      if(list1->val<=list2->val){\\n          solve(list1,list2);\\n          \\n      }\\n      else{\\n          solve(list2,list1);\\n      }\\n      return list1;\\n    }\\n\\n    void solve(ListNode* first,ListNode* second){\\n        // if(first->next==NULL) {\\n        //     first->next=second;\\n        // }\\n        ListNode* curr1=first;\\n        ListNode*next1=curr1->next;\\n        ListNode* curr2=second;\\n        ListNode* next2=curr2->next;\\n\\n        while(next1!=NULL && curr2!=NULL){\\n            if((curr2->val>=curr1->val) && (curr2->val<=next1->val)){\\n                curr1->next=curr2;\\n                next2=curr2->next;\\n                curr2->next=next1;\\n\\n                curr1=curr2;\\n                curr2=next2;\\n            }\\n            else{\\n                curr1=next1;\\n                next1=next1->next;\\n                if(next1==NULL){\\n                    curr1->next=curr2;\\n                    // return first;\\n                }\\n            }\\n        }\\n       \\n    }\\n};"
                    },
                    {
                        "username": "mazentharwatfathy",
                        "content": "# listNode in leetcode expliaing\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode { // to define the linked list\\n *     int val; //the value in each node \\n *     ListNode *next;  // the pointer to the next node\\n        //three constructors\\n *     ListNode() : val(0), next(nullptr) {} // default with no arguments\\n *     ListNode(int x) : val(x), next(nullptr) {} // with value only , will set pointer to null\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {} // has the 2 values \\n * };\\n */"
                    },
                    {
                        "username": "axectly",
                        "content": "Idk why it\\'s not allowed to use built-in methods. We can merge lists with two strings (python):\\n\\n `list1.extend(list2)`\\n `list1.sort()`\\n `return list1`\\n"
                    },
                    {
                        "username": "razau314",
                        "content": "Because you are using list while there are linked list in the questin."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "Because this is a linked list. It\\'s not an array"
                    },
                    {
                        "username": "Monkescripts",
                        "content": "Hi guys, just wondering why this implementation is wrong? Instead of current-> next = list 1, I did current = list1 and updates current at the end of the while loop instead. \\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n\\n  `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(!list1) return list2;\\n        if(!list2) return list1;\\n        ListNode* current = nullptr;\\n        ListNode* result = current;\\n        while(list1||list2){ \\n            if(!list2 && list1 || (list1->val < list2->val)){\\n                current = list1;\\n                list1= list1->next;\\n            }\\n            else{\\n                current= list2;\\n                list2 = list2->next;\\n            }\\n            current = current->next;      \\n        }\\n        return result;\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1827574,
                "content": [
                    {
                        "username": "JoshuvaBernard",
                        "content": "I\\'m still learning java, I have a doubt. So usually we store the address of the next structure(pointer) in the next variable right?... how do we do this in java. or if you have any recourses it will be useful "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "like so: currentNode.next = list1;"
                    },
                    {
                        "username": "najwer23",
                        "content": "when it is ListNode instead of array\\n\\n\\u201CYou don\\u2019t have the right\\u201D O \\u201CYou don\\u2019t have the right\\u201D\\n\\u201CYou don\\u2019t have the right\\u201D O \\u201CYou don\\u2019t have the right\\u201D"
                    },
                    {
                        "username": "davidalvarezj",
                        "content": "what is a ListNode never used that on javascript why outpus similar to an array?"
                    },
                    {
                        "username": "greenchalk",
                        "content": "I can\\'t understand why you can\\'t access list.val or list.next right from the beginning of the code. If you do so you get the following error:\\n\\n\"TypeError: Cannot read properties of null (reading \\'val\\')\" \\n\\nBut list1/2 is not empty, if you console log list1 or list2 you get the printed out list. So what am I doing wrong  here?\\n"
                    },
                    {
                        "username": "Mr636",
                        "content": "Poor Challenge! This is not how singly linked lists work. "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "What do you mean? This is how linked lists work."
                    },
                    {
                        "username": "bharukahimanshu",
                        "content": "class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if(l1 == NULL){\\n            return l2;\\n        }\\n\\n        if(l2 == NULL){\\n            return l1;\\n        }\\n\\n        if(l1 -> val > l2 -> val){\\n            std::swap(l1, l2);\\n        }\\n\\n        ListNode* head = l1;\\n\\n        while(l1 != NULL && l2 != NULL){\\n\\n            ListNode* temp = NULL;\\n\\n            while(l1 != NULL && l2 != NULL && l1 -> val <= l2 -> val){\\n                temp = l1;\\n                l1 =l1 -> next;\\n            }\\n\\n            temp -> next = l2;\\n            std::swap(l1, l2);\\n\\n        }\\n\\n        return head;\\n\\n        \\n    }\\n};"
                    },
                    {
                        "username": "prikshitsingh2",
                        "content": "please help me my code is nor running for the intput list1=[2] and list2[1]\\noutput it giving is [2]\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n      if(list1==NULL) return list2;\\n      if(list2==NULL) return list1;\\n\\n      if(list1->val<=list2->val){\\n          solve(list1,list2);\\n          \\n      }\\n      else{\\n          solve(list2,list1);\\n      }\\n      return list1;\\n    }\\n\\n    void solve(ListNode* first,ListNode* second){\\n        // if(first->next==NULL) {\\n        //     first->next=second;\\n        // }\\n        ListNode* curr1=first;\\n        ListNode*next1=curr1->next;\\n        ListNode* curr2=second;\\n        ListNode* next2=curr2->next;\\n\\n        while(next1!=NULL && curr2!=NULL){\\n            if((curr2->val>=curr1->val) && (curr2->val<=next1->val)){\\n                curr1->next=curr2;\\n                next2=curr2->next;\\n                curr2->next=next1;\\n\\n                curr1=curr2;\\n                curr2=next2;\\n            }\\n            else{\\n                curr1=next1;\\n                next1=next1->next;\\n                if(next1==NULL){\\n                    curr1->next=curr2;\\n                    // return first;\\n                }\\n            }\\n        }\\n       \\n    }\\n};"
                    },
                    {
                        "username": "mazentharwatfathy",
                        "content": "# listNode in leetcode expliaing\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode { // to define the linked list\\n *     int val; //the value in each node \\n *     ListNode *next;  // the pointer to the next node\\n        //three constructors\\n *     ListNode() : val(0), next(nullptr) {} // default with no arguments\\n *     ListNode(int x) : val(x), next(nullptr) {} // with value only , will set pointer to null\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {} // has the 2 values \\n * };\\n */"
                    },
                    {
                        "username": "axectly",
                        "content": "Idk why it\\'s not allowed to use built-in methods. We can merge lists with two strings (python):\\n\\n `list1.extend(list2)`\\n `list1.sort()`\\n `return list1`\\n"
                    },
                    {
                        "username": "razau314",
                        "content": "Because you are using list while there are linked list in the questin."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "Because this is a linked list. It\\'s not an array"
                    },
                    {
                        "username": "Monkescripts",
                        "content": "Hi guys, just wondering why this implementation is wrong? Instead of current-> next = list 1, I did current = list1 and updates current at the end of the while loop instead. \\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n\\n  `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(!list1) return list2;\\n        if(!list2) return list1;\\n        ListNode* current = nullptr;\\n        ListNode* result = current;\\n        while(list1||list2){ \\n            if(!list2 && list1 || (list1->val < list2->val)){\\n                current = list1;\\n                list1= list1->next;\\n            }\\n            else{\\n                current= list2;\\n                list2 = list2->next;\\n            }\\n            current = current->next;      \\n        }\\n        return result;\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1818401,
                "content": [
                    {
                        "username": "JoshuvaBernard",
                        "content": "I\\'m still learning java, I have a doubt. So usually we store the address of the next structure(pointer) in the next variable right?... how do we do this in java. or if you have any recourses it will be useful "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "like so: currentNode.next = list1;"
                    },
                    {
                        "username": "najwer23",
                        "content": "when it is ListNode instead of array\\n\\n\\u201CYou don\\u2019t have the right\\u201D O \\u201CYou don\\u2019t have the right\\u201D\\n\\u201CYou don\\u2019t have the right\\u201D O \\u201CYou don\\u2019t have the right\\u201D"
                    },
                    {
                        "username": "davidalvarezj",
                        "content": "what is a ListNode never used that on javascript why outpus similar to an array?"
                    },
                    {
                        "username": "greenchalk",
                        "content": "I can\\'t understand why you can\\'t access list.val or list.next right from the beginning of the code. If you do so you get the following error:\\n\\n\"TypeError: Cannot read properties of null (reading \\'val\\')\" \\n\\nBut list1/2 is not empty, if you console log list1 or list2 you get the printed out list. So what am I doing wrong  here?\\n"
                    },
                    {
                        "username": "Mr636",
                        "content": "Poor Challenge! This is not how singly linked lists work. "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "What do you mean? This is how linked lists work."
                    },
                    {
                        "username": "bharukahimanshu",
                        "content": "class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if(l1 == NULL){\\n            return l2;\\n        }\\n\\n        if(l2 == NULL){\\n            return l1;\\n        }\\n\\n        if(l1 -> val > l2 -> val){\\n            std::swap(l1, l2);\\n        }\\n\\n        ListNode* head = l1;\\n\\n        while(l1 != NULL && l2 != NULL){\\n\\n            ListNode* temp = NULL;\\n\\n            while(l1 != NULL && l2 != NULL && l1 -> val <= l2 -> val){\\n                temp = l1;\\n                l1 =l1 -> next;\\n            }\\n\\n            temp -> next = l2;\\n            std::swap(l1, l2);\\n\\n        }\\n\\n        return head;\\n\\n        \\n    }\\n};"
                    },
                    {
                        "username": "prikshitsingh2",
                        "content": "please help me my code is nor running for the intput list1=[2] and list2[1]\\noutput it giving is [2]\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n      if(list1==NULL) return list2;\\n      if(list2==NULL) return list1;\\n\\n      if(list1->val<=list2->val){\\n          solve(list1,list2);\\n          \\n      }\\n      else{\\n          solve(list2,list1);\\n      }\\n      return list1;\\n    }\\n\\n    void solve(ListNode* first,ListNode* second){\\n        // if(first->next==NULL) {\\n        //     first->next=second;\\n        // }\\n        ListNode* curr1=first;\\n        ListNode*next1=curr1->next;\\n        ListNode* curr2=second;\\n        ListNode* next2=curr2->next;\\n\\n        while(next1!=NULL && curr2!=NULL){\\n            if((curr2->val>=curr1->val) && (curr2->val<=next1->val)){\\n                curr1->next=curr2;\\n                next2=curr2->next;\\n                curr2->next=next1;\\n\\n                curr1=curr2;\\n                curr2=next2;\\n            }\\n            else{\\n                curr1=next1;\\n                next1=next1->next;\\n                if(next1==NULL){\\n                    curr1->next=curr2;\\n                    // return first;\\n                }\\n            }\\n        }\\n       \\n    }\\n};"
                    },
                    {
                        "username": "mazentharwatfathy",
                        "content": "# listNode in leetcode expliaing\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode { // to define the linked list\\n *     int val; //the value in each node \\n *     ListNode *next;  // the pointer to the next node\\n        //three constructors\\n *     ListNode() : val(0), next(nullptr) {} // default with no arguments\\n *     ListNode(int x) : val(x), next(nullptr) {} // with value only , will set pointer to null\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {} // has the 2 values \\n * };\\n */"
                    },
                    {
                        "username": "axectly",
                        "content": "Idk why it\\'s not allowed to use built-in methods. We can merge lists with two strings (python):\\n\\n `list1.extend(list2)`\\n `list1.sort()`\\n `return list1`\\n"
                    },
                    {
                        "username": "razau314",
                        "content": "Because you are using list while there are linked list in the questin."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "Because this is a linked list. It\\'s not an array"
                    },
                    {
                        "username": "Monkescripts",
                        "content": "Hi guys, just wondering why this implementation is wrong? Instead of current-> next = list 1, I did current = list1 and updates current at the end of the while loop instead. \\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n\\n  `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(!list1) return list2;\\n        if(!list2) return list1;\\n        ListNode* current = nullptr;\\n        ListNode* result = current;\\n        while(list1||list2){ \\n            if(!list2 && list1 || (list1->val < list2->val)){\\n                current = list1;\\n                list1= list1->next;\\n            }\\n            else{\\n                current= list2;\\n                list2 = list2->next;\\n            }\\n            current = current->next;      \\n        }\\n        return result;\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1811317,
                "content": [
                    {
                        "username": "JoshuvaBernard",
                        "content": "I\\'m still learning java, I have a doubt. So usually we store the address of the next structure(pointer) in the next variable right?... how do we do this in java. or if you have any recourses it will be useful "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "like so: currentNode.next = list1;"
                    },
                    {
                        "username": "najwer23",
                        "content": "when it is ListNode instead of array\\n\\n\\u201CYou don\\u2019t have the right\\u201D O \\u201CYou don\\u2019t have the right\\u201D\\n\\u201CYou don\\u2019t have the right\\u201D O \\u201CYou don\\u2019t have the right\\u201D"
                    },
                    {
                        "username": "davidalvarezj",
                        "content": "what is a ListNode never used that on javascript why outpus similar to an array?"
                    },
                    {
                        "username": "greenchalk",
                        "content": "I can\\'t understand why you can\\'t access list.val or list.next right from the beginning of the code. If you do so you get the following error:\\n\\n\"TypeError: Cannot read properties of null (reading \\'val\\')\" \\n\\nBut list1/2 is not empty, if you console log list1 or list2 you get the printed out list. So what am I doing wrong  here?\\n"
                    },
                    {
                        "username": "Mr636",
                        "content": "Poor Challenge! This is not how singly linked lists work. "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "What do you mean? This is how linked lists work."
                    },
                    {
                        "username": "bharukahimanshu",
                        "content": "class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if(l1 == NULL){\\n            return l2;\\n        }\\n\\n        if(l2 == NULL){\\n            return l1;\\n        }\\n\\n        if(l1 -> val > l2 -> val){\\n            std::swap(l1, l2);\\n        }\\n\\n        ListNode* head = l1;\\n\\n        while(l1 != NULL && l2 != NULL){\\n\\n            ListNode* temp = NULL;\\n\\n            while(l1 != NULL && l2 != NULL && l1 -> val <= l2 -> val){\\n                temp = l1;\\n                l1 =l1 -> next;\\n            }\\n\\n            temp -> next = l2;\\n            std::swap(l1, l2);\\n\\n        }\\n\\n        return head;\\n\\n        \\n    }\\n};"
                    },
                    {
                        "username": "prikshitsingh2",
                        "content": "please help me my code is nor running for the intput list1=[2] and list2[1]\\noutput it giving is [2]\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n      if(list1==NULL) return list2;\\n      if(list2==NULL) return list1;\\n\\n      if(list1->val<=list2->val){\\n          solve(list1,list2);\\n          \\n      }\\n      else{\\n          solve(list2,list1);\\n      }\\n      return list1;\\n    }\\n\\n    void solve(ListNode* first,ListNode* second){\\n        // if(first->next==NULL) {\\n        //     first->next=second;\\n        // }\\n        ListNode* curr1=first;\\n        ListNode*next1=curr1->next;\\n        ListNode* curr2=second;\\n        ListNode* next2=curr2->next;\\n\\n        while(next1!=NULL && curr2!=NULL){\\n            if((curr2->val>=curr1->val) && (curr2->val<=next1->val)){\\n                curr1->next=curr2;\\n                next2=curr2->next;\\n                curr2->next=next1;\\n\\n                curr1=curr2;\\n                curr2=next2;\\n            }\\n            else{\\n                curr1=next1;\\n                next1=next1->next;\\n                if(next1==NULL){\\n                    curr1->next=curr2;\\n                    // return first;\\n                }\\n            }\\n        }\\n       \\n    }\\n};"
                    },
                    {
                        "username": "mazentharwatfathy",
                        "content": "# listNode in leetcode expliaing\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode { // to define the linked list\\n *     int val; //the value in each node \\n *     ListNode *next;  // the pointer to the next node\\n        //three constructors\\n *     ListNode() : val(0), next(nullptr) {} // default with no arguments\\n *     ListNode(int x) : val(x), next(nullptr) {} // with value only , will set pointer to null\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {} // has the 2 values \\n * };\\n */"
                    },
                    {
                        "username": "axectly",
                        "content": "Idk why it\\'s not allowed to use built-in methods. We can merge lists with two strings (python):\\n\\n `list1.extend(list2)`\\n `list1.sort()`\\n `return list1`\\n"
                    },
                    {
                        "username": "razau314",
                        "content": "Because you are using list while there are linked list in the questin."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "Because this is a linked list. It\\'s not an array"
                    },
                    {
                        "username": "Monkescripts",
                        "content": "Hi guys, just wondering why this implementation is wrong? Instead of current-> next = list 1, I did current = list1 and updates current at the end of the while loop instead. \\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n\\n  `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(!list1) return list2;\\n        if(!list2) return list1;\\n        ListNode* current = nullptr;\\n        ListNode* result = current;\\n        while(list1||list2){ \\n            if(!list2 && list1 || (list1->val < list2->val)){\\n                current = list1;\\n                list1= list1->next;\\n            }\\n            else{\\n                current= list2;\\n                list2 = list2->next;\\n            }\\n            current = current->next;      \\n        }\\n        return result;\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1804631,
                "content": [
                    {
                        "username": "JoshuvaBernard",
                        "content": "I\\'m still learning java, I have a doubt. So usually we store the address of the next structure(pointer) in the next variable right?... how do we do this in java. or if you have any recourses it will be useful "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "like so: currentNode.next = list1;"
                    },
                    {
                        "username": "najwer23",
                        "content": "when it is ListNode instead of array\\n\\n\\u201CYou don\\u2019t have the right\\u201D O \\u201CYou don\\u2019t have the right\\u201D\\n\\u201CYou don\\u2019t have the right\\u201D O \\u201CYou don\\u2019t have the right\\u201D"
                    },
                    {
                        "username": "davidalvarezj",
                        "content": "what is a ListNode never used that on javascript why outpus similar to an array?"
                    },
                    {
                        "username": "greenchalk",
                        "content": "I can\\'t understand why you can\\'t access list.val or list.next right from the beginning of the code. If you do so you get the following error:\\n\\n\"TypeError: Cannot read properties of null (reading \\'val\\')\" \\n\\nBut list1/2 is not empty, if you console log list1 or list2 you get the printed out list. So what am I doing wrong  here?\\n"
                    },
                    {
                        "username": "Mr636",
                        "content": "Poor Challenge! This is not how singly linked lists work. "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "What do you mean? This is how linked lists work."
                    },
                    {
                        "username": "bharukahimanshu",
                        "content": "class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if(l1 == NULL){\\n            return l2;\\n        }\\n\\n        if(l2 == NULL){\\n            return l1;\\n        }\\n\\n        if(l1 -> val > l2 -> val){\\n            std::swap(l1, l2);\\n        }\\n\\n        ListNode* head = l1;\\n\\n        while(l1 != NULL && l2 != NULL){\\n\\n            ListNode* temp = NULL;\\n\\n            while(l1 != NULL && l2 != NULL && l1 -> val <= l2 -> val){\\n                temp = l1;\\n                l1 =l1 -> next;\\n            }\\n\\n            temp -> next = l2;\\n            std::swap(l1, l2);\\n\\n        }\\n\\n        return head;\\n\\n        \\n    }\\n};"
                    },
                    {
                        "username": "prikshitsingh2",
                        "content": "please help me my code is nor running for the intput list1=[2] and list2[1]\\noutput it giving is [2]\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n      if(list1==NULL) return list2;\\n      if(list2==NULL) return list1;\\n\\n      if(list1->val<=list2->val){\\n          solve(list1,list2);\\n          \\n      }\\n      else{\\n          solve(list2,list1);\\n      }\\n      return list1;\\n    }\\n\\n    void solve(ListNode* first,ListNode* second){\\n        // if(first->next==NULL) {\\n        //     first->next=second;\\n        // }\\n        ListNode* curr1=first;\\n        ListNode*next1=curr1->next;\\n        ListNode* curr2=second;\\n        ListNode* next2=curr2->next;\\n\\n        while(next1!=NULL && curr2!=NULL){\\n            if((curr2->val>=curr1->val) && (curr2->val<=next1->val)){\\n                curr1->next=curr2;\\n                next2=curr2->next;\\n                curr2->next=next1;\\n\\n                curr1=curr2;\\n                curr2=next2;\\n            }\\n            else{\\n                curr1=next1;\\n                next1=next1->next;\\n                if(next1==NULL){\\n                    curr1->next=curr2;\\n                    // return first;\\n                }\\n            }\\n        }\\n       \\n    }\\n};"
                    },
                    {
                        "username": "mazentharwatfathy",
                        "content": "# listNode in leetcode expliaing\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode { // to define the linked list\\n *     int val; //the value in each node \\n *     ListNode *next;  // the pointer to the next node\\n        //three constructors\\n *     ListNode() : val(0), next(nullptr) {} // default with no arguments\\n *     ListNode(int x) : val(x), next(nullptr) {} // with value only , will set pointer to null\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {} // has the 2 values \\n * };\\n */"
                    },
                    {
                        "username": "axectly",
                        "content": "Idk why it\\'s not allowed to use built-in methods. We can merge lists with two strings (python):\\n\\n `list1.extend(list2)`\\n `list1.sort()`\\n `return list1`\\n"
                    },
                    {
                        "username": "razau314",
                        "content": "Because you are using list while there are linked list in the questin."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "Because this is a linked list. It\\'s not an array"
                    },
                    {
                        "username": "Monkescripts",
                        "content": "Hi guys, just wondering why this implementation is wrong? Instead of current-> next = list 1, I did current = list1 and updates current at the end of the while loop instead. \\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n\\n  `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(!list1) return list2;\\n        if(!list2) return list1;\\n        ListNode* current = nullptr;\\n        ListNode* result = current;\\n        while(list1||list2){ \\n            if(!list2 && list1 || (list1->val < list2->val)){\\n                current = list1;\\n                list1= list1->next;\\n            }\\n            else{\\n                current= list2;\\n                list2 = list2->next;\\n            }\\n            current = current->next;      \\n        }\\n        return result;\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1803497,
                "content": [
                    {
                        "username": "JoshuvaBernard",
                        "content": "I\\'m still learning java, I have a doubt. So usually we store the address of the next structure(pointer) in the next variable right?... how do we do this in java. or if you have any recourses it will be useful "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "like so: currentNode.next = list1;"
                    },
                    {
                        "username": "najwer23",
                        "content": "when it is ListNode instead of array\\n\\n\\u201CYou don\\u2019t have the right\\u201D O \\u201CYou don\\u2019t have the right\\u201D\\n\\u201CYou don\\u2019t have the right\\u201D O \\u201CYou don\\u2019t have the right\\u201D"
                    },
                    {
                        "username": "davidalvarezj",
                        "content": "what is a ListNode never used that on javascript why outpus similar to an array?"
                    },
                    {
                        "username": "greenchalk",
                        "content": "I can\\'t understand why you can\\'t access list.val or list.next right from the beginning of the code. If you do so you get the following error:\\n\\n\"TypeError: Cannot read properties of null (reading \\'val\\')\" \\n\\nBut list1/2 is not empty, if you console log list1 or list2 you get the printed out list. So what am I doing wrong  here?\\n"
                    },
                    {
                        "username": "Mr636",
                        "content": "Poor Challenge! This is not how singly linked lists work. "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "What do you mean? This is how linked lists work."
                    },
                    {
                        "username": "bharukahimanshu",
                        "content": "class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if(l1 == NULL){\\n            return l2;\\n        }\\n\\n        if(l2 == NULL){\\n            return l1;\\n        }\\n\\n        if(l1 -> val > l2 -> val){\\n            std::swap(l1, l2);\\n        }\\n\\n        ListNode* head = l1;\\n\\n        while(l1 != NULL && l2 != NULL){\\n\\n            ListNode* temp = NULL;\\n\\n            while(l1 != NULL && l2 != NULL && l1 -> val <= l2 -> val){\\n                temp = l1;\\n                l1 =l1 -> next;\\n            }\\n\\n            temp -> next = l2;\\n            std::swap(l1, l2);\\n\\n        }\\n\\n        return head;\\n\\n        \\n    }\\n};"
                    },
                    {
                        "username": "prikshitsingh2",
                        "content": "please help me my code is nor running for the intput list1=[2] and list2[1]\\noutput it giving is [2]\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n      if(list1==NULL) return list2;\\n      if(list2==NULL) return list1;\\n\\n      if(list1->val<=list2->val){\\n          solve(list1,list2);\\n          \\n      }\\n      else{\\n          solve(list2,list1);\\n      }\\n      return list1;\\n    }\\n\\n    void solve(ListNode* first,ListNode* second){\\n        // if(first->next==NULL) {\\n        //     first->next=second;\\n        // }\\n        ListNode* curr1=first;\\n        ListNode*next1=curr1->next;\\n        ListNode* curr2=second;\\n        ListNode* next2=curr2->next;\\n\\n        while(next1!=NULL && curr2!=NULL){\\n            if((curr2->val>=curr1->val) && (curr2->val<=next1->val)){\\n                curr1->next=curr2;\\n                next2=curr2->next;\\n                curr2->next=next1;\\n\\n                curr1=curr2;\\n                curr2=next2;\\n            }\\n            else{\\n                curr1=next1;\\n                next1=next1->next;\\n                if(next1==NULL){\\n                    curr1->next=curr2;\\n                    // return first;\\n                }\\n            }\\n        }\\n       \\n    }\\n};"
                    },
                    {
                        "username": "mazentharwatfathy",
                        "content": "# listNode in leetcode expliaing\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode { // to define the linked list\\n *     int val; //the value in each node \\n *     ListNode *next;  // the pointer to the next node\\n        //three constructors\\n *     ListNode() : val(0), next(nullptr) {} // default with no arguments\\n *     ListNode(int x) : val(x), next(nullptr) {} // with value only , will set pointer to null\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {} // has the 2 values \\n * };\\n */"
                    },
                    {
                        "username": "axectly",
                        "content": "Idk why it\\'s not allowed to use built-in methods. We can merge lists with two strings (python):\\n\\n `list1.extend(list2)`\\n `list1.sort()`\\n `return list1`\\n"
                    },
                    {
                        "username": "razau314",
                        "content": "Because you are using list while there are linked list in the questin."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "Because this is a linked list. It\\'s not an array"
                    },
                    {
                        "username": "Monkescripts",
                        "content": "Hi guys, just wondering why this implementation is wrong? Instead of current-> next = list 1, I did current = list1 and updates current at the end of the while loop instead. \\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n\\n  `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(!list1) return list2;\\n        if(!list2) return list1;\\n        ListNode* current = nullptr;\\n        ListNode* result = current;\\n        while(list1||list2){ \\n            if(!list2 && list1 || (list1->val < list2->val)){\\n                current = list1;\\n                list1= list1->next;\\n            }\\n            else{\\n                current= list2;\\n                list2 = list2->next;\\n            }\\n            current = current->next;      \\n        }\\n        return result;\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1801777,
                "content": [
                    {
                        "username": "JoshuvaBernard",
                        "content": "I\\'m still learning java, I have a doubt. So usually we store the address of the next structure(pointer) in the next variable right?... how do we do this in java. or if you have any recourses it will be useful "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "like so: currentNode.next = list1;"
                    },
                    {
                        "username": "najwer23",
                        "content": "when it is ListNode instead of array\\n\\n\\u201CYou don\\u2019t have the right\\u201D O \\u201CYou don\\u2019t have the right\\u201D\\n\\u201CYou don\\u2019t have the right\\u201D O \\u201CYou don\\u2019t have the right\\u201D"
                    },
                    {
                        "username": "davidalvarezj",
                        "content": "what is a ListNode never used that on javascript why outpus similar to an array?"
                    },
                    {
                        "username": "greenchalk",
                        "content": "I can\\'t understand why you can\\'t access list.val or list.next right from the beginning of the code. If you do so you get the following error:\\n\\n\"TypeError: Cannot read properties of null (reading \\'val\\')\" \\n\\nBut list1/2 is not empty, if you console log list1 or list2 you get the printed out list. So what am I doing wrong  here?\\n"
                    },
                    {
                        "username": "Mr636",
                        "content": "Poor Challenge! This is not how singly linked lists work. "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "What do you mean? This is how linked lists work."
                    },
                    {
                        "username": "bharukahimanshu",
                        "content": "class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if(l1 == NULL){\\n            return l2;\\n        }\\n\\n        if(l2 == NULL){\\n            return l1;\\n        }\\n\\n        if(l1 -> val > l2 -> val){\\n            std::swap(l1, l2);\\n        }\\n\\n        ListNode* head = l1;\\n\\n        while(l1 != NULL && l2 != NULL){\\n\\n            ListNode* temp = NULL;\\n\\n            while(l1 != NULL && l2 != NULL && l1 -> val <= l2 -> val){\\n                temp = l1;\\n                l1 =l1 -> next;\\n            }\\n\\n            temp -> next = l2;\\n            std::swap(l1, l2);\\n\\n        }\\n\\n        return head;\\n\\n        \\n    }\\n};"
                    },
                    {
                        "username": "prikshitsingh2",
                        "content": "please help me my code is nor running for the intput list1=[2] and list2[1]\\noutput it giving is [2]\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n      if(list1==NULL) return list2;\\n      if(list2==NULL) return list1;\\n\\n      if(list1->val<=list2->val){\\n          solve(list1,list2);\\n          \\n      }\\n      else{\\n          solve(list2,list1);\\n      }\\n      return list1;\\n    }\\n\\n    void solve(ListNode* first,ListNode* second){\\n        // if(first->next==NULL) {\\n        //     first->next=second;\\n        // }\\n        ListNode* curr1=first;\\n        ListNode*next1=curr1->next;\\n        ListNode* curr2=second;\\n        ListNode* next2=curr2->next;\\n\\n        while(next1!=NULL && curr2!=NULL){\\n            if((curr2->val>=curr1->val) && (curr2->val<=next1->val)){\\n                curr1->next=curr2;\\n                next2=curr2->next;\\n                curr2->next=next1;\\n\\n                curr1=curr2;\\n                curr2=next2;\\n            }\\n            else{\\n                curr1=next1;\\n                next1=next1->next;\\n                if(next1==NULL){\\n                    curr1->next=curr2;\\n                    // return first;\\n                }\\n            }\\n        }\\n       \\n    }\\n};"
                    },
                    {
                        "username": "mazentharwatfathy",
                        "content": "# listNode in leetcode expliaing\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode { // to define the linked list\\n *     int val; //the value in each node \\n *     ListNode *next;  // the pointer to the next node\\n        //three constructors\\n *     ListNode() : val(0), next(nullptr) {} // default with no arguments\\n *     ListNode(int x) : val(x), next(nullptr) {} // with value only , will set pointer to null\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {} // has the 2 values \\n * };\\n */"
                    },
                    {
                        "username": "axectly",
                        "content": "Idk why it\\'s not allowed to use built-in methods. We can merge lists with two strings (python):\\n\\n `list1.extend(list2)`\\n `list1.sort()`\\n `return list1`\\n"
                    },
                    {
                        "username": "razau314",
                        "content": "Because you are using list while there are linked list in the questin."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "Because this is a linked list. It\\'s not an array"
                    },
                    {
                        "username": "Monkescripts",
                        "content": "Hi guys, just wondering why this implementation is wrong? Instead of current-> next = list 1, I did current = list1 and updates current at the end of the while loop instead. \\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n\\n  `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(!list1) return list2;\\n        if(!list2) return list1;\\n        ListNode* current = nullptr;\\n        ListNode* result = current;\\n        while(list1||list2){ \\n            if(!list2 && list1 || (list1->val < list2->val)){\\n                current = list1;\\n                list1= list1->next;\\n            }\\n            else{\\n                current= list2;\\n                list2 = list2->next;\\n            }\\n            current = current->next;      \\n        }\\n        return result;\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1799689,
                "content": [
                    {
                        "username": "JoshuvaBernard",
                        "content": "I\\'m still learning java, I have a doubt. So usually we store the address of the next structure(pointer) in the next variable right?... how do we do this in java. or if you have any recourses it will be useful "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "like so: currentNode.next = list1;"
                    },
                    {
                        "username": "najwer23",
                        "content": "when it is ListNode instead of array\\n\\n\\u201CYou don\\u2019t have the right\\u201D O \\u201CYou don\\u2019t have the right\\u201D\\n\\u201CYou don\\u2019t have the right\\u201D O \\u201CYou don\\u2019t have the right\\u201D"
                    },
                    {
                        "username": "davidalvarezj",
                        "content": "what is a ListNode never used that on javascript why outpus similar to an array?"
                    },
                    {
                        "username": "greenchalk",
                        "content": "I can\\'t understand why you can\\'t access list.val or list.next right from the beginning of the code. If you do so you get the following error:\\n\\n\"TypeError: Cannot read properties of null (reading \\'val\\')\" \\n\\nBut list1/2 is not empty, if you console log list1 or list2 you get the printed out list. So what am I doing wrong  here?\\n"
                    },
                    {
                        "username": "Mr636",
                        "content": "Poor Challenge! This is not how singly linked lists work. "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "What do you mean? This is how linked lists work."
                    },
                    {
                        "username": "bharukahimanshu",
                        "content": "class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if(l1 == NULL){\\n            return l2;\\n        }\\n\\n        if(l2 == NULL){\\n            return l1;\\n        }\\n\\n        if(l1 -> val > l2 -> val){\\n            std::swap(l1, l2);\\n        }\\n\\n        ListNode* head = l1;\\n\\n        while(l1 != NULL && l2 != NULL){\\n\\n            ListNode* temp = NULL;\\n\\n            while(l1 != NULL && l2 != NULL && l1 -> val <= l2 -> val){\\n                temp = l1;\\n                l1 =l1 -> next;\\n            }\\n\\n            temp -> next = l2;\\n            std::swap(l1, l2);\\n\\n        }\\n\\n        return head;\\n\\n        \\n    }\\n};"
                    },
                    {
                        "username": "prikshitsingh2",
                        "content": "please help me my code is nor running for the intput list1=[2] and list2[1]\\noutput it giving is [2]\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n      if(list1==NULL) return list2;\\n      if(list2==NULL) return list1;\\n\\n      if(list1->val<=list2->val){\\n          solve(list1,list2);\\n          \\n      }\\n      else{\\n          solve(list2,list1);\\n      }\\n      return list1;\\n    }\\n\\n    void solve(ListNode* first,ListNode* second){\\n        // if(first->next==NULL) {\\n        //     first->next=second;\\n        // }\\n        ListNode* curr1=first;\\n        ListNode*next1=curr1->next;\\n        ListNode* curr2=second;\\n        ListNode* next2=curr2->next;\\n\\n        while(next1!=NULL && curr2!=NULL){\\n            if((curr2->val>=curr1->val) && (curr2->val<=next1->val)){\\n                curr1->next=curr2;\\n                next2=curr2->next;\\n                curr2->next=next1;\\n\\n                curr1=curr2;\\n                curr2=next2;\\n            }\\n            else{\\n                curr1=next1;\\n                next1=next1->next;\\n                if(next1==NULL){\\n                    curr1->next=curr2;\\n                    // return first;\\n                }\\n            }\\n        }\\n       \\n    }\\n};"
                    },
                    {
                        "username": "mazentharwatfathy",
                        "content": "# listNode in leetcode expliaing\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode { // to define the linked list\\n *     int val; //the value in each node \\n *     ListNode *next;  // the pointer to the next node\\n        //three constructors\\n *     ListNode() : val(0), next(nullptr) {} // default with no arguments\\n *     ListNode(int x) : val(x), next(nullptr) {} // with value only , will set pointer to null\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {} // has the 2 values \\n * };\\n */"
                    },
                    {
                        "username": "axectly",
                        "content": "Idk why it\\'s not allowed to use built-in methods. We can merge lists with two strings (python):\\n\\n `list1.extend(list2)`\\n `list1.sort()`\\n `return list1`\\n"
                    },
                    {
                        "username": "razau314",
                        "content": "Because you are using list while there are linked list in the questin."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "Because this is a linked list. It\\'s not an array"
                    },
                    {
                        "username": "Monkescripts",
                        "content": "Hi guys, just wondering why this implementation is wrong? Instead of current-> next = list 1, I did current = list1 and updates current at the end of the while loop instead. \\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n\\n  `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(!list1) return list2;\\n        if(!list2) return list1;\\n        ListNode* current = nullptr;\\n        ListNode* result = current;\\n        while(list1||list2){ \\n            if(!list2 && list1 || (list1->val < list2->val)){\\n                current = list1;\\n                list1= list1->next;\\n            }\\n            else{\\n                current= list2;\\n                list2 = list2->next;\\n            }\\n            current = current->next;      \\n        }\\n        return result;\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1799668,
                "content": [
                    {
                        "username": "JoshuvaBernard",
                        "content": "I\\'m still learning java, I have a doubt. So usually we store the address of the next structure(pointer) in the next variable right?... how do we do this in java. or if you have any recourses it will be useful "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "like so: currentNode.next = list1;"
                    },
                    {
                        "username": "najwer23",
                        "content": "when it is ListNode instead of array\\n\\n\\u201CYou don\\u2019t have the right\\u201D O \\u201CYou don\\u2019t have the right\\u201D\\n\\u201CYou don\\u2019t have the right\\u201D O \\u201CYou don\\u2019t have the right\\u201D"
                    },
                    {
                        "username": "davidalvarezj",
                        "content": "what is a ListNode never used that on javascript why outpus similar to an array?"
                    },
                    {
                        "username": "greenchalk",
                        "content": "I can\\'t understand why you can\\'t access list.val or list.next right from the beginning of the code. If you do so you get the following error:\\n\\n\"TypeError: Cannot read properties of null (reading \\'val\\')\" \\n\\nBut list1/2 is not empty, if you console log list1 or list2 you get the printed out list. So what am I doing wrong  here?\\n"
                    },
                    {
                        "username": "Mr636",
                        "content": "Poor Challenge! This is not how singly linked lists work. "
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "What do you mean? This is how linked lists work."
                    },
                    {
                        "username": "bharukahimanshu",
                        "content": "class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        if(l1 == NULL){\\n            return l2;\\n        }\\n\\n        if(l2 == NULL){\\n            return l1;\\n        }\\n\\n        if(l1 -> val > l2 -> val){\\n            std::swap(l1, l2);\\n        }\\n\\n        ListNode* head = l1;\\n\\n        while(l1 != NULL && l2 != NULL){\\n\\n            ListNode* temp = NULL;\\n\\n            while(l1 != NULL && l2 != NULL && l1 -> val <= l2 -> val){\\n                temp = l1;\\n                l1 =l1 -> next;\\n            }\\n\\n            temp -> next = l2;\\n            std::swap(l1, l2);\\n\\n        }\\n\\n        return head;\\n\\n        \\n    }\\n};"
                    },
                    {
                        "username": "prikshitsingh2",
                        "content": "please help me my code is nor running for the intput list1=[2] and list2[1]\\noutput it giving is [2]\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n      if(list1==NULL) return list2;\\n      if(list2==NULL) return list1;\\n\\n      if(list1->val<=list2->val){\\n          solve(list1,list2);\\n          \\n      }\\n      else{\\n          solve(list2,list1);\\n      }\\n      return list1;\\n    }\\n\\n    void solve(ListNode* first,ListNode* second){\\n        // if(first->next==NULL) {\\n        //     first->next=second;\\n        // }\\n        ListNode* curr1=first;\\n        ListNode*next1=curr1->next;\\n        ListNode* curr2=second;\\n        ListNode* next2=curr2->next;\\n\\n        while(next1!=NULL && curr2!=NULL){\\n            if((curr2->val>=curr1->val) && (curr2->val<=next1->val)){\\n                curr1->next=curr2;\\n                next2=curr2->next;\\n                curr2->next=next1;\\n\\n                curr1=curr2;\\n                curr2=next2;\\n            }\\n            else{\\n                curr1=next1;\\n                next1=next1->next;\\n                if(next1==NULL){\\n                    curr1->next=curr2;\\n                    // return first;\\n                }\\n            }\\n        }\\n       \\n    }\\n};"
                    },
                    {
                        "username": "mazentharwatfathy",
                        "content": "# listNode in leetcode expliaing\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode { // to define the linked list\\n *     int val; //the value in each node \\n *     ListNode *next;  // the pointer to the next node\\n        //three constructors\\n *     ListNode() : val(0), next(nullptr) {} // default with no arguments\\n *     ListNode(int x) : val(x), next(nullptr) {} // with value only , will set pointer to null\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {} // has the 2 values \\n * };\\n */"
                    },
                    {
                        "username": "axectly",
                        "content": "Idk why it\\'s not allowed to use built-in methods. We can merge lists with two strings (python):\\n\\n `list1.extend(list2)`\\n `list1.sort()`\\n `return list1`\\n"
                    },
                    {
                        "username": "razau314",
                        "content": "Because you are using list while there are linked list in the questin."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "Because this is a linked list. It\\'s not an array"
                    },
                    {
                        "username": "Monkescripts",
                        "content": "Hi guys, just wondering why this implementation is wrong? Instead of current-> next = list 1, I did current = list1 and updates current at the end of the while loop instead. \\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\n\\n  `your inline code...your inline code...` `your inline code...your inline code...`\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(!list1) return list2;\\n        if(!list2) return list1;\\n        ListNode* current = nullptr;\\n        ListNode* result = current;\\n        while(list1||list2){ \\n            if(!list2 && list1 || (list1->val < list2->val)){\\n                current = list1;\\n                list1= list1->next;\\n            }\\n            else{\\n                current= list2;\\n                list2 = list2->next;\\n            }\\n            current = current->next;      \\n        }\\n        return result;\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1798989,
                "content": [
                    {
                        "username": "sayalaryal2",
                        "content": "Can anyone Explain what ListNode is ?  When I tried to copy and paste the code in Netbeans it shows Cannot find symbol error in ListNode."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The ListNode is in the comment at the top."
                    },
                    {
                        "username": "alexyarigin",
                        "content": "Java SOL:\\n\\n\\n        if (list1 == null && list2 == null) return null;\\n        if (list1 == null && list2 != null) return list2;\\n        if (list1 != null && list2 == null) return list1;\\n\\n        if (list1.val <= list2.val) {\\n            ListNode next = mergeTwoLists(list1.next, list2);\\n            list1.next = next;\\n            return list1;\\n        }\\n\\n        ListNode next = mergeTwoLists(list1, list2.next);\\n        list2.next = next;\\n        return list2;"
                    },
                    {
                        "username": "alexyarigin",
                        "content": "Java Solution:\\n\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        if (list1 == null && list2 == null) return null;\\n        if (list1 == null && list2 != null) return list2;\\n        if (list1 != null && list2 == null) return list1;\\n\\n        if (list1.val <= list2.val) {\\n            ListNode next = mergeTwoLists(list1.next, list2);\\n            list1.next = next;\\n            return list1;\\n        }\\n\\n        ListNode next = mergeTwoLists(list1, list2.next);\\n        list2.next = next;\\n        return list2;\\n    }"
                    },
                    {
                        "username": "maykkortis",
                        "content": "I get unidentified name for both ListNode and Optional...Has anyone faced the same and how do I resolve it?"
                    },
                    {
                        "username": "Spamatz",
                        "content": "For the python3 version, is \"Optional\" is class object?"
                    },
                    {
                        "username": "Shiv_45",
                        "content": "why iam getting error in list1.size() part is this a wrong way  \\nfor(int i=0; i< list1.size();i++){\\n            list += list1.val;\\n            \\n        }"
                    },
                    {
                        "username": "Shiv_45",
                        "content": "[@NidhiChaudhary2002](/NidhiChaudhary2002)  ok thanks!"
                    },
                    {
                        "username": "NidhiChaudhary2002",
                        "content": "I don\\'t think there exist any such function to calculate size calculate it iteratively it will be better. "
                    },
                    {
                        "username": "lenkadevesh",
                        "content": "Can anyone tell me what the input should be to initalize the linked list with multiple values please?\\n"
                    },
                    {
                        "username": "Krish1906",
                        "content": "We have to sort normal arrays or linked list?\\n"
                    },
                    {
                        "username": "raviroushan",
                        "content": "Why is it giving TLE if we are using while loop for remaining nodes ?"
                    },
                    {
                        "username": "alleach24",
                        "content": "In Python3, I'm getting the following error:\n`AttributeError: 'NoneType' object has no attribute 'val'`\nanytime I try to do `list1.val` or `list2.val`\n\nAny ideas what is causing this?"
                    },
                    {
                        "username": "user7290uq",
                        "content": "The function parameter is Optional[ListNode], so the input value can be None or a ListNode. Your code should check for None before treating it as a ListNode."
                    }
                ]
            },
            {
                "id": 1798601,
                "content": [
                    {
                        "username": "sayalaryal2",
                        "content": "Can anyone Explain what ListNode is ?  When I tried to copy and paste the code in Netbeans it shows Cannot find symbol error in ListNode."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The ListNode is in the comment at the top."
                    },
                    {
                        "username": "alexyarigin",
                        "content": "Java SOL:\\n\\n\\n        if (list1 == null && list2 == null) return null;\\n        if (list1 == null && list2 != null) return list2;\\n        if (list1 != null && list2 == null) return list1;\\n\\n        if (list1.val <= list2.val) {\\n            ListNode next = mergeTwoLists(list1.next, list2);\\n            list1.next = next;\\n            return list1;\\n        }\\n\\n        ListNode next = mergeTwoLists(list1, list2.next);\\n        list2.next = next;\\n        return list2;"
                    },
                    {
                        "username": "alexyarigin",
                        "content": "Java Solution:\\n\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        if (list1 == null && list2 == null) return null;\\n        if (list1 == null && list2 != null) return list2;\\n        if (list1 != null && list2 == null) return list1;\\n\\n        if (list1.val <= list2.val) {\\n            ListNode next = mergeTwoLists(list1.next, list2);\\n            list1.next = next;\\n            return list1;\\n        }\\n\\n        ListNode next = mergeTwoLists(list1, list2.next);\\n        list2.next = next;\\n        return list2;\\n    }"
                    },
                    {
                        "username": "maykkortis",
                        "content": "I get unidentified name for both ListNode and Optional...Has anyone faced the same and how do I resolve it?"
                    },
                    {
                        "username": "Spamatz",
                        "content": "For the python3 version, is \"Optional\" is class object?"
                    },
                    {
                        "username": "Shiv_45",
                        "content": "why iam getting error in list1.size() part is this a wrong way  \\nfor(int i=0; i< list1.size();i++){\\n            list += list1.val;\\n            \\n        }"
                    },
                    {
                        "username": "Shiv_45",
                        "content": "[@NidhiChaudhary2002](/NidhiChaudhary2002)  ok thanks!"
                    },
                    {
                        "username": "NidhiChaudhary2002",
                        "content": "I don\\'t think there exist any such function to calculate size calculate it iteratively it will be better. "
                    },
                    {
                        "username": "lenkadevesh",
                        "content": "Can anyone tell me what the input should be to initalize the linked list with multiple values please?\\n"
                    },
                    {
                        "username": "Krish1906",
                        "content": "We have to sort normal arrays or linked list?\\n"
                    },
                    {
                        "username": "raviroushan",
                        "content": "Why is it giving TLE if we are using while loop for remaining nodes ?"
                    },
                    {
                        "username": "alleach24",
                        "content": "In Python3, I'm getting the following error:\n`AttributeError: 'NoneType' object has no attribute 'val'`\nanytime I try to do `list1.val` or `list2.val`\n\nAny ideas what is causing this?"
                    },
                    {
                        "username": "user7290uq",
                        "content": "The function parameter is Optional[ListNode], so the input value can be None or a ListNode. Your code should check for None before treating it as a ListNode."
                    }
                ]
            },
            {
                "id": 1798596,
                "content": [
                    {
                        "username": "sayalaryal2",
                        "content": "Can anyone Explain what ListNode is ?  When I tried to copy and paste the code in Netbeans it shows Cannot find symbol error in ListNode."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The ListNode is in the comment at the top."
                    },
                    {
                        "username": "alexyarigin",
                        "content": "Java SOL:\\n\\n\\n        if (list1 == null && list2 == null) return null;\\n        if (list1 == null && list2 != null) return list2;\\n        if (list1 != null && list2 == null) return list1;\\n\\n        if (list1.val <= list2.val) {\\n            ListNode next = mergeTwoLists(list1.next, list2);\\n            list1.next = next;\\n            return list1;\\n        }\\n\\n        ListNode next = mergeTwoLists(list1, list2.next);\\n        list2.next = next;\\n        return list2;"
                    },
                    {
                        "username": "alexyarigin",
                        "content": "Java Solution:\\n\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        if (list1 == null && list2 == null) return null;\\n        if (list1 == null && list2 != null) return list2;\\n        if (list1 != null && list2 == null) return list1;\\n\\n        if (list1.val <= list2.val) {\\n            ListNode next = mergeTwoLists(list1.next, list2);\\n            list1.next = next;\\n            return list1;\\n        }\\n\\n        ListNode next = mergeTwoLists(list1, list2.next);\\n        list2.next = next;\\n        return list2;\\n    }"
                    },
                    {
                        "username": "maykkortis",
                        "content": "I get unidentified name for both ListNode and Optional...Has anyone faced the same and how do I resolve it?"
                    },
                    {
                        "username": "Spamatz",
                        "content": "For the python3 version, is \"Optional\" is class object?"
                    },
                    {
                        "username": "Shiv_45",
                        "content": "why iam getting error in list1.size() part is this a wrong way  \\nfor(int i=0; i< list1.size();i++){\\n            list += list1.val;\\n            \\n        }"
                    },
                    {
                        "username": "Shiv_45",
                        "content": "[@NidhiChaudhary2002](/NidhiChaudhary2002)  ok thanks!"
                    },
                    {
                        "username": "NidhiChaudhary2002",
                        "content": "I don\\'t think there exist any such function to calculate size calculate it iteratively it will be better. "
                    },
                    {
                        "username": "lenkadevesh",
                        "content": "Can anyone tell me what the input should be to initalize the linked list with multiple values please?\\n"
                    },
                    {
                        "username": "Krish1906",
                        "content": "We have to sort normal arrays or linked list?\\n"
                    },
                    {
                        "username": "raviroushan",
                        "content": "Why is it giving TLE if we are using while loop for remaining nodes ?"
                    },
                    {
                        "username": "alleach24",
                        "content": "In Python3, I'm getting the following error:\n`AttributeError: 'NoneType' object has no attribute 'val'`\nanytime I try to do `list1.val` or `list2.val`\n\nAny ideas what is causing this?"
                    },
                    {
                        "username": "user7290uq",
                        "content": "The function parameter is Optional[ListNode], so the input value can be None or a ListNode. Your code should check for None before treating it as a ListNode."
                    }
                ]
            },
            {
                "id": 1795874,
                "content": [
                    {
                        "username": "sayalaryal2",
                        "content": "Can anyone Explain what ListNode is ?  When I tried to copy and paste the code in Netbeans it shows Cannot find symbol error in ListNode."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The ListNode is in the comment at the top."
                    },
                    {
                        "username": "alexyarigin",
                        "content": "Java SOL:\\n\\n\\n        if (list1 == null && list2 == null) return null;\\n        if (list1 == null && list2 != null) return list2;\\n        if (list1 != null && list2 == null) return list1;\\n\\n        if (list1.val <= list2.val) {\\n            ListNode next = mergeTwoLists(list1.next, list2);\\n            list1.next = next;\\n            return list1;\\n        }\\n\\n        ListNode next = mergeTwoLists(list1, list2.next);\\n        list2.next = next;\\n        return list2;"
                    },
                    {
                        "username": "alexyarigin",
                        "content": "Java Solution:\\n\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        if (list1 == null && list2 == null) return null;\\n        if (list1 == null && list2 != null) return list2;\\n        if (list1 != null && list2 == null) return list1;\\n\\n        if (list1.val <= list2.val) {\\n            ListNode next = mergeTwoLists(list1.next, list2);\\n            list1.next = next;\\n            return list1;\\n        }\\n\\n        ListNode next = mergeTwoLists(list1, list2.next);\\n        list2.next = next;\\n        return list2;\\n    }"
                    },
                    {
                        "username": "maykkortis",
                        "content": "I get unidentified name for both ListNode and Optional...Has anyone faced the same and how do I resolve it?"
                    },
                    {
                        "username": "Spamatz",
                        "content": "For the python3 version, is \"Optional\" is class object?"
                    },
                    {
                        "username": "Shiv_45",
                        "content": "why iam getting error in list1.size() part is this a wrong way  \\nfor(int i=0; i< list1.size();i++){\\n            list += list1.val;\\n            \\n        }"
                    },
                    {
                        "username": "Shiv_45",
                        "content": "[@NidhiChaudhary2002](/NidhiChaudhary2002)  ok thanks!"
                    },
                    {
                        "username": "NidhiChaudhary2002",
                        "content": "I don\\'t think there exist any such function to calculate size calculate it iteratively it will be better. "
                    },
                    {
                        "username": "lenkadevesh",
                        "content": "Can anyone tell me what the input should be to initalize the linked list with multiple values please?\\n"
                    },
                    {
                        "username": "Krish1906",
                        "content": "We have to sort normal arrays or linked list?\\n"
                    },
                    {
                        "username": "raviroushan",
                        "content": "Why is it giving TLE if we are using while loop for remaining nodes ?"
                    },
                    {
                        "username": "alleach24",
                        "content": "In Python3, I'm getting the following error:\n`AttributeError: 'NoneType' object has no attribute 'val'`\nanytime I try to do `list1.val` or `list2.val`\n\nAny ideas what is causing this?"
                    },
                    {
                        "username": "user7290uq",
                        "content": "The function parameter is Optional[ListNode], so the input value can be None or a ListNode. Your code should check for None before treating it as a ListNode."
                    }
                ]
            },
            {
                "id": 1793562,
                "content": [
                    {
                        "username": "sayalaryal2",
                        "content": "Can anyone Explain what ListNode is ?  When I tried to copy and paste the code in Netbeans it shows Cannot find symbol error in ListNode."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The ListNode is in the comment at the top."
                    },
                    {
                        "username": "alexyarigin",
                        "content": "Java SOL:\\n\\n\\n        if (list1 == null && list2 == null) return null;\\n        if (list1 == null && list2 != null) return list2;\\n        if (list1 != null && list2 == null) return list1;\\n\\n        if (list1.val <= list2.val) {\\n            ListNode next = mergeTwoLists(list1.next, list2);\\n            list1.next = next;\\n            return list1;\\n        }\\n\\n        ListNode next = mergeTwoLists(list1, list2.next);\\n        list2.next = next;\\n        return list2;"
                    },
                    {
                        "username": "alexyarigin",
                        "content": "Java Solution:\\n\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        if (list1 == null && list2 == null) return null;\\n        if (list1 == null && list2 != null) return list2;\\n        if (list1 != null && list2 == null) return list1;\\n\\n        if (list1.val <= list2.val) {\\n            ListNode next = mergeTwoLists(list1.next, list2);\\n            list1.next = next;\\n            return list1;\\n        }\\n\\n        ListNode next = mergeTwoLists(list1, list2.next);\\n        list2.next = next;\\n        return list2;\\n    }"
                    },
                    {
                        "username": "maykkortis",
                        "content": "I get unidentified name for both ListNode and Optional...Has anyone faced the same and how do I resolve it?"
                    },
                    {
                        "username": "Spamatz",
                        "content": "For the python3 version, is \"Optional\" is class object?"
                    },
                    {
                        "username": "Shiv_45",
                        "content": "why iam getting error in list1.size() part is this a wrong way  \\nfor(int i=0; i< list1.size();i++){\\n            list += list1.val;\\n            \\n        }"
                    },
                    {
                        "username": "Shiv_45",
                        "content": "[@NidhiChaudhary2002](/NidhiChaudhary2002)  ok thanks!"
                    },
                    {
                        "username": "NidhiChaudhary2002",
                        "content": "I don\\'t think there exist any such function to calculate size calculate it iteratively it will be better. "
                    },
                    {
                        "username": "lenkadevesh",
                        "content": "Can anyone tell me what the input should be to initalize the linked list with multiple values please?\\n"
                    },
                    {
                        "username": "Krish1906",
                        "content": "We have to sort normal arrays or linked list?\\n"
                    },
                    {
                        "username": "raviroushan",
                        "content": "Why is it giving TLE if we are using while loop for remaining nodes ?"
                    },
                    {
                        "username": "alleach24",
                        "content": "In Python3, I'm getting the following error:\n`AttributeError: 'NoneType' object has no attribute 'val'`\nanytime I try to do `list1.val` or `list2.val`\n\nAny ideas what is causing this?"
                    },
                    {
                        "username": "user7290uq",
                        "content": "The function parameter is Optional[ListNode], so the input value can be None or a ListNode. Your code should check for None before treating it as a ListNode."
                    }
                ]
            },
            {
                "id": 1793239,
                "content": [
                    {
                        "username": "sayalaryal2",
                        "content": "Can anyone Explain what ListNode is ?  When I tried to copy and paste the code in Netbeans it shows Cannot find symbol error in ListNode."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The ListNode is in the comment at the top."
                    },
                    {
                        "username": "alexyarigin",
                        "content": "Java SOL:\\n\\n\\n        if (list1 == null && list2 == null) return null;\\n        if (list1 == null && list2 != null) return list2;\\n        if (list1 != null && list2 == null) return list1;\\n\\n        if (list1.val <= list2.val) {\\n            ListNode next = mergeTwoLists(list1.next, list2);\\n            list1.next = next;\\n            return list1;\\n        }\\n\\n        ListNode next = mergeTwoLists(list1, list2.next);\\n        list2.next = next;\\n        return list2;"
                    },
                    {
                        "username": "alexyarigin",
                        "content": "Java Solution:\\n\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        if (list1 == null && list2 == null) return null;\\n        if (list1 == null && list2 != null) return list2;\\n        if (list1 != null && list2 == null) return list1;\\n\\n        if (list1.val <= list2.val) {\\n            ListNode next = mergeTwoLists(list1.next, list2);\\n            list1.next = next;\\n            return list1;\\n        }\\n\\n        ListNode next = mergeTwoLists(list1, list2.next);\\n        list2.next = next;\\n        return list2;\\n    }"
                    },
                    {
                        "username": "maykkortis",
                        "content": "I get unidentified name for both ListNode and Optional...Has anyone faced the same and how do I resolve it?"
                    },
                    {
                        "username": "Spamatz",
                        "content": "For the python3 version, is \"Optional\" is class object?"
                    },
                    {
                        "username": "Shiv_45",
                        "content": "why iam getting error in list1.size() part is this a wrong way  \\nfor(int i=0; i< list1.size();i++){\\n            list += list1.val;\\n            \\n        }"
                    },
                    {
                        "username": "Shiv_45",
                        "content": "[@NidhiChaudhary2002](/NidhiChaudhary2002)  ok thanks!"
                    },
                    {
                        "username": "NidhiChaudhary2002",
                        "content": "I don\\'t think there exist any such function to calculate size calculate it iteratively it will be better. "
                    },
                    {
                        "username": "lenkadevesh",
                        "content": "Can anyone tell me what the input should be to initalize the linked list with multiple values please?\\n"
                    },
                    {
                        "username": "Krish1906",
                        "content": "We have to sort normal arrays or linked list?\\n"
                    },
                    {
                        "username": "raviroushan",
                        "content": "Why is it giving TLE if we are using while loop for remaining nodes ?"
                    },
                    {
                        "username": "alleach24",
                        "content": "In Python3, I'm getting the following error:\n`AttributeError: 'NoneType' object has no attribute 'val'`\nanytime I try to do `list1.val` or `list2.val`\n\nAny ideas what is causing this?"
                    },
                    {
                        "username": "user7290uq",
                        "content": "The function parameter is Optional[ListNode], so the input value can be None or a ListNode. Your code should check for None before treating it as a ListNode."
                    }
                ]
            },
            {
                "id": 1788954,
                "content": [
                    {
                        "username": "sayalaryal2",
                        "content": "Can anyone Explain what ListNode is ?  When I tried to copy and paste the code in Netbeans it shows Cannot find symbol error in ListNode."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The ListNode is in the comment at the top."
                    },
                    {
                        "username": "alexyarigin",
                        "content": "Java SOL:\\n\\n\\n        if (list1 == null && list2 == null) return null;\\n        if (list1 == null && list2 != null) return list2;\\n        if (list1 != null && list2 == null) return list1;\\n\\n        if (list1.val <= list2.val) {\\n            ListNode next = mergeTwoLists(list1.next, list2);\\n            list1.next = next;\\n            return list1;\\n        }\\n\\n        ListNode next = mergeTwoLists(list1, list2.next);\\n        list2.next = next;\\n        return list2;"
                    },
                    {
                        "username": "alexyarigin",
                        "content": "Java Solution:\\n\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        if (list1 == null && list2 == null) return null;\\n        if (list1 == null && list2 != null) return list2;\\n        if (list1 != null && list2 == null) return list1;\\n\\n        if (list1.val <= list2.val) {\\n            ListNode next = mergeTwoLists(list1.next, list2);\\n            list1.next = next;\\n            return list1;\\n        }\\n\\n        ListNode next = mergeTwoLists(list1, list2.next);\\n        list2.next = next;\\n        return list2;\\n    }"
                    },
                    {
                        "username": "maykkortis",
                        "content": "I get unidentified name for both ListNode and Optional...Has anyone faced the same and how do I resolve it?"
                    },
                    {
                        "username": "Spamatz",
                        "content": "For the python3 version, is \"Optional\" is class object?"
                    },
                    {
                        "username": "Shiv_45",
                        "content": "why iam getting error in list1.size() part is this a wrong way  \\nfor(int i=0; i< list1.size();i++){\\n            list += list1.val;\\n            \\n        }"
                    },
                    {
                        "username": "Shiv_45",
                        "content": "[@NidhiChaudhary2002](/NidhiChaudhary2002)  ok thanks!"
                    },
                    {
                        "username": "NidhiChaudhary2002",
                        "content": "I don\\'t think there exist any such function to calculate size calculate it iteratively it will be better. "
                    },
                    {
                        "username": "lenkadevesh",
                        "content": "Can anyone tell me what the input should be to initalize the linked list with multiple values please?\\n"
                    },
                    {
                        "username": "Krish1906",
                        "content": "We have to sort normal arrays or linked list?\\n"
                    },
                    {
                        "username": "raviroushan",
                        "content": "Why is it giving TLE if we are using while loop for remaining nodes ?"
                    },
                    {
                        "username": "alleach24",
                        "content": "In Python3, I'm getting the following error:\n`AttributeError: 'NoneType' object has no attribute 'val'`\nanytime I try to do `list1.val` or `list2.val`\n\nAny ideas what is causing this?"
                    },
                    {
                        "username": "user7290uq",
                        "content": "The function parameter is Optional[ListNode], so the input value can be None or a ListNode. Your code should check for None before treating it as a ListNode."
                    }
                ]
            },
            {
                "id": 1788867,
                "content": [
                    {
                        "username": "sayalaryal2",
                        "content": "Can anyone Explain what ListNode is ?  When I tried to copy and paste the code in Netbeans it shows Cannot find symbol error in ListNode."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The ListNode is in the comment at the top."
                    },
                    {
                        "username": "alexyarigin",
                        "content": "Java SOL:\\n\\n\\n        if (list1 == null && list2 == null) return null;\\n        if (list1 == null && list2 != null) return list2;\\n        if (list1 != null && list2 == null) return list1;\\n\\n        if (list1.val <= list2.val) {\\n            ListNode next = mergeTwoLists(list1.next, list2);\\n            list1.next = next;\\n            return list1;\\n        }\\n\\n        ListNode next = mergeTwoLists(list1, list2.next);\\n        list2.next = next;\\n        return list2;"
                    },
                    {
                        "username": "alexyarigin",
                        "content": "Java Solution:\\n\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        if (list1 == null && list2 == null) return null;\\n        if (list1 == null && list2 != null) return list2;\\n        if (list1 != null && list2 == null) return list1;\\n\\n        if (list1.val <= list2.val) {\\n            ListNode next = mergeTwoLists(list1.next, list2);\\n            list1.next = next;\\n            return list1;\\n        }\\n\\n        ListNode next = mergeTwoLists(list1, list2.next);\\n        list2.next = next;\\n        return list2;\\n    }"
                    },
                    {
                        "username": "maykkortis",
                        "content": "I get unidentified name for both ListNode and Optional...Has anyone faced the same and how do I resolve it?"
                    },
                    {
                        "username": "Spamatz",
                        "content": "For the python3 version, is \"Optional\" is class object?"
                    },
                    {
                        "username": "Shiv_45",
                        "content": "why iam getting error in list1.size() part is this a wrong way  \\nfor(int i=0; i< list1.size();i++){\\n            list += list1.val;\\n            \\n        }"
                    },
                    {
                        "username": "Shiv_45",
                        "content": "[@NidhiChaudhary2002](/NidhiChaudhary2002)  ok thanks!"
                    },
                    {
                        "username": "NidhiChaudhary2002",
                        "content": "I don\\'t think there exist any such function to calculate size calculate it iteratively it will be better. "
                    },
                    {
                        "username": "lenkadevesh",
                        "content": "Can anyone tell me what the input should be to initalize the linked list with multiple values please?\\n"
                    },
                    {
                        "username": "Krish1906",
                        "content": "We have to sort normal arrays or linked list?\\n"
                    },
                    {
                        "username": "raviroushan",
                        "content": "Why is it giving TLE if we are using while loop for remaining nodes ?"
                    },
                    {
                        "username": "alleach24",
                        "content": "In Python3, I'm getting the following error:\n`AttributeError: 'NoneType' object has no attribute 'val'`\nanytime I try to do `list1.val` or `list2.val`\n\nAny ideas what is causing this?"
                    },
                    {
                        "username": "user7290uq",
                        "content": "The function parameter is Optional[ListNode], so the input value can be None or a ListNode. Your code should check for None before treating it as a ListNode."
                    }
                ]
            },
            {
                "id": 1783466,
                "content": [
                    {
                        "username": "sayalaryal2",
                        "content": "Can anyone Explain what ListNode is ?  When I tried to copy and paste the code in Netbeans it shows Cannot find symbol error in ListNode."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The ListNode is in the comment at the top."
                    },
                    {
                        "username": "alexyarigin",
                        "content": "Java SOL:\\n\\n\\n        if (list1 == null && list2 == null) return null;\\n        if (list1 == null && list2 != null) return list2;\\n        if (list1 != null && list2 == null) return list1;\\n\\n        if (list1.val <= list2.val) {\\n            ListNode next = mergeTwoLists(list1.next, list2);\\n            list1.next = next;\\n            return list1;\\n        }\\n\\n        ListNode next = mergeTwoLists(list1, list2.next);\\n        list2.next = next;\\n        return list2;"
                    },
                    {
                        "username": "alexyarigin",
                        "content": "Java Solution:\\n\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        if (list1 == null && list2 == null) return null;\\n        if (list1 == null && list2 != null) return list2;\\n        if (list1 != null && list2 == null) return list1;\\n\\n        if (list1.val <= list2.val) {\\n            ListNode next = mergeTwoLists(list1.next, list2);\\n            list1.next = next;\\n            return list1;\\n        }\\n\\n        ListNode next = mergeTwoLists(list1, list2.next);\\n        list2.next = next;\\n        return list2;\\n    }"
                    },
                    {
                        "username": "maykkortis",
                        "content": "I get unidentified name for both ListNode and Optional...Has anyone faced the same and how do I resolve it?"
                    },
                    {
                        "username": "Spamatz",
                        "content": "For the python3 version, is \"Optional\" is class object?"
                    },
                    {
                        "username": "Shiv_45",
                        "content": "why iam getting error in list1.size() part is this a wrong way  \\nfor(int i=0; i< list1.size();i++){\\n            list += list1.val;\\n            \\n        }"
                    },
                    {
                        "username": "Shiv_45",
                        "content": "[@NidhiChaudhary2002](/NidhiChaudhary2002)  ok thanks!"
                    },
                    {
                        "username": "NidhiChaudhary2002",
                        "content": "I don\\'t think there exist any such function to calculate size calculate it iteratively it will be better. "
                    },
                    {
                        "username": "lenkadevesh",
                        "content": "Can anyone tell me what the input should be to initalize the linked list with multiple values please?\\n"
                    },
                    {
                        "username": "Krish1906",
                        "content": "We have to sort normal arrays or linked list?\\n"
                    },
                    {
                        "username": "raviroushan",
                        "content": "Why is it giving TLE if we are using while loop for remaining nodes ?"
                    },
                    {
                        "username": "alleach24",
                        "content": "In Python3, I'm getting the following error:\n`AttributeError: 'NoneType' object has no attribute 'val'`\nanytime I try to do `list1.val` or `list2.val`\n\nAny ideas what is causing this?"
                    },
                    {
                        "username": "user7290uq",
                        "content": "The function parameter is Optional[ListNode], so the input value can be None or a ListNode. Your code should check for None before treating it as a ListNode."
                    }
                ]
            },
            {
                "id": 1782480,
                "content": [
                    {
                        "username": "sayalaryal2",
                        "content": "Can anyone Explain what ListNode is ?  When I tried to copy and paste the code in Netbeans it shows Cannot find symbol error in ListNode."
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "The ListNode is in the comment at the top."
                    },
                    {
                        "username": "alexyarigin",
                        "content": "Java SOL:\\n\\n\\n        if (list1 == null && list2 == null) return null;\\n        if (list1 == null && list2 != null) return list2;\\n        if (list1 != null && list2 == null) return list1;\\n\\n        if (list1.val <= list2.val) {\\n            ListNode next = mergeTwoLists(list1.next, list2);\\n            list1.next = next;\\n            return list1;\\n        }\\n\\n        ListNode next = mergeTwoLists(list1, list2.next);\\n        list2.next = next;\\n        return list2;"
                    },
                    {
                        "username": "alexyarigin",
                        "content": "Java Solution:\\n\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n\\n        if (list1 == null && list2 == null) return null;\\n        if (list1 == null && list2 != null) return list2;\\n        if (list1 != null && list2 == null) return list1;\\n\\n        if (list1.val <= list2.val) {\\n            ListNode next = mergeTwoLists(list1.next, list2);\\n            list1.next = next;\\n            return list1;\\n        }\\n\\n        ListNode next = mergeTwoLists(list1, list2.next);\\n        list2.next = next;\\n        return list2;\\n    }"
                    },
                    {
                        "username": "maykkortis",
                        "content": "I get unidentified name for both ListNode and Optional...Has anyone faced the same and how do I resolve it?"
                    },
                    {
                        "username": "Spamatz",
                        "content": "For the python3 version, is \"Optional\" is class object?"
                    },
                    {
                        "username": "Shiv_45",
                        "content": "why iam getting error in list1.size() part is this a wrong way  \\nfor(int i=0; i< list1.size();i++){\\n            list += list1.val;\\n            \\n        }"
                    },
                    {
                        "username": "Shiv_45",
                        "content": "[@NidhiChaudhary2002](/NidhiChaudhary2002)  ok thanks!"
                    },
                    {
                        "username": "NidhiChaudhary2002",
                        "content": "I don\\'t think there exist any such function to calculate size calculate it iteratively it will be better. "
                    },
                    {
                        "username": "lenkadevesh",
                        "content": "Can anyone tell me what the input should be to initalize the linked list with multiple values please?\\n"
                    },
                    {
                        "username": "Krish1906",
                        "content": "We have to sort normal arrays or linked list?\\n"
                    },
                    {
                        "username": "raviroushan",
                        "content": "Why is it giving TLE if we are using while loop for remaining nodes ?"
                    },
                    {
                        "username": "alleach24",
                        "content": "In Python3, I'm getting the following error:\n`AttributeError: 'NoneType' object has no attribute 'val'`\nanytime I try to do `list1.val` or `list2.val`\n\nAny ideas what is causing this?"
                    },
                    {
                        "username": "user7290uq",
                        "content": "The function parameter is Optional[ListNode], so the input value can be None or a ListNode. Your code should check for None before treating it as a ListNode."
                    }
                ]
            },
            {
                "id": 1780815,
                "content": [
                    {
                        "username": "alexnelyubiy",
                        "content": "so, each param of mergeTwoLists func is an array of objects?"
                    },
                    {
                        "username": "Ruildo",
                        "content": "No. they\\'re a linked list. A linked list is a data structure used in many programs but in JS they\\'re a Class, and in LeetCode its an object from JSON."
                    },
                    {
                        "username": "thenullcoder",
                        "content": "I have tried a simple javascript solution for this problem with rest operators but this solution is not working , maybe expected output in form of lListNode and my solution produce it in Array.\\n\\nCan anyone help me out with explaining traversing in Linked List ?\\n"
                    },
                    {
                        "username": "PythonAkoto",
                        "content": "Why can\\'t you just create an empty list then iterate through the two lists and append values to the new list.  After that you can just sort the new list and return the value.\\n\\nThat\\'s what i have tried but i have received and error.\\n\\n```\\n# empty list to add new values\\nnew_list = []\\n\\n# iterate through list1 and add to new_list\\n for item in list1:\\n     new_list.append(item)\\n\\n# iterate through list2 and add to new_list\\nfor item in list2:\\n    new_list.append(item)\\n\\n# sort the elements in new_list\\nnew_list.sort()\\n\\nreturn new_list\\n```"
                    },
                    {
                        "username": "zenverak",
                        "content": "because you\\'re dealing with a linked list. not a list."
                    },
                    {
                        "username": "The_White_Fox",
                        "content": "Because the datatype is a ListNode not list. Welcome to Leetcode"
                    },
                    {
                        "username": "abhi893198",
                        "content": "cant we just treverse till the last node of first list and and place the head value of second in null place to merge them and then sort the whole list ?\nhelp with this"
                    },
                    {
                        "username": "sandeep1808",
                        "content": "please help me to solve this problem i written code but showing error\\n\\ncode:\\nclass solution {\\n    public:\\n    String mergeAlternate(string word1, string word2)\\n{\\n    int i=0;\\n    int j=0;\\n    string res=\"\";\\n    while(i<word1.size() && j<word2.size())\\n    {\\n        res+=word1[i++];\\n        res+=word1[j++];\\n    }\\n\\n    while(i<word1.size())\\n    {\\n        res+=word1[i++];\\n    }\\n    while(j<word2.size())\\n    {\\n        res+=word1[j++];\\n    }\\n    return res;\\n\\n}\\n};"
                    },
                    {
                        "username": "gurmindersingh5",
                        "content": "When i test code in Pycharm, it says 'val' is not attribute of 'list'. which makes sense because it's not. but in leetcode the code gives no error and gets accepted. can anyone explain pls? "
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "my solution!!\ntoo lazy to make it shorter, but algo is solid. If you don't agree provide feedback on improvements.\n\n\n`func mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\n    var curNode *ListNode\n    var head *ListNode \n\n    if list1 == nil {\n        return list2\n    }\n\n    if list2 == nil {\n        return list1\n    }\n\n    if list1.Val < list2.Val {\n        head = list1\n        curNode = head\n        list1 = list1.Next\n    } else {\n        head = list2\n        curNode = head\n        list2 = list2.Next\n    }\n\n    for list1 != nil || list2 != nil {\n        if list1 == nil {\n            curNode.Next = list2\n            return head\n        }\n        if list2 == nil {\n            curNode.Next = list1\n            return head\n        }\n        if list1.Val < list2.Val {\n            curNode.Next = list1\n            list1 = list1.Next\n        } else {\n            curNode.Next = list2\n            list2 = list2.Next\n        }\n\n        curNode = curNode.Next\n    }\n    return head\n}`"
                    },
                    {
                        "username": "dssera",
                        "content": "What is problem of this error?\\nTypeError: object of type \\'ListNode\\' has no len()\\n    n = len(list2)\\nLine 8 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 36 in _driver (Solution.py)\\n    _driver()\\nLine 46 in <module> (Solution.py)   "
                    },
                    {
                        "username": "zenverak",
                        "content": "The problem is that ListNode doesn\\'t have a length "
                    },
                    {
                        "username": "gadjiev",
                        "content": "try to solve on javascript \\ni have `{val:1,next:[2,4]}`\\nWhy it gives me error when i try ` console.log(\\'l1\\',[...list1.next])` ?\\nError is \\nTypeError: list1.next is not iterable\\n"
                    },
                    {
                        "username": "tiwarijgm66",
                        "content": "solution for this question in java  \\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if(list1 == null){ \\n            return list2;\\n        } \\n        if(list2 == null){ \\n            return list1; \\n        }  \\n        if(list1.val <= list2.val){ \\n            list1.next = mergeTwoLists(list2 , list1.next);\\n            return list1;\\n        }else{ \\n            list2.next = mergeTwoLists(list2.next, list1); \\n            return list2;\\n        } \\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1779059,
                "content": [
                    {
                        "username": "alexnelyubiy",
                        "content": "so, each param of mergeTwoLists func is an array of objects?"
                    },
                    {
                        "username": "Ruildo",
                        "content": "No. they\\'re a linked list. A linked list is a data structure used in many programs but in JS they\\'re a Class, and in LeetCode its an object from JSON."
                    },
                    {
                        "username": "thenullcoder",
                        "content": "I have tried a simple javascript solution for this problem with rest operators but this solution is not working , maybe expected output in form of lListNode and my solution produce it in Array.\\n\\nCan anyone help me out with explaining traversing in Linked List ?\\n"
                    },
                    {
                        "username": "PythonAkoto",
                        "content": "Why can\\'t you just create an empty list then iterate through the two lists and append values to the new list.  After that you can just sort the new list and return the value.\\n\\nThat\\'s what i have tried but i have received and error.\\n\\n```\\n# empty list to add new values\\nnew_list = []\\n\\n# iterate through list1 and add to new_list\\n for item in list1:\\n     new_list.append(item)\\n\\n# iterate through list2 and add to new_list\\nfor item in list2:\\n    new_list.append(item)\\n\\n# sort the elements in new_list\\nnew_list.sort()\\n\\nreturn new_list\\n```"
                    },
                    {
                        "username": "zenverak",
                        "content": "because you\\'re dealing with a linked list. not a list."
                    },
                    {
                        "username": "The_White_Fox",
                        "content": "Because the datatype is a ListNode not list. Welcome to Leetcode"
                    },
                    {
                        "username": "abhi893198",
                        "content": "cant we just treverse till the last node of first list and and place the head value of second in null place to merge them and then sort the whole list ?\nhelp with this"
                    },
                    {
                        "username": "sandeep1808",
                        "content": "please help me to solve this problem i written code but showing error\\n\\ncode:\\nclass solution {\\n    public:\\n    String mergeAlternate(string word1, string word2)\\n{\\n    int i=0;\\n    int j=0;\\n    string res=\"\";\\n    while(i<word1.size() && j<word2.size())\\n    {\\n        res+=word1[i++];\\n        res+=word1[j++];\\n    }\\n\\n    while(i<word1.size())\\n    {\\n        res+=word1[i++];\\n    }\\n    while(j<word2.size())\\n    {\\n        res+=word1[j++];\\n    }\\n    return res;\\n\\n}\\n};"
                    },
                    {
                        "username": "gurmindersingh5",
                        "content": "When i test code in Pycharm, it says 'val' is not attribute of 'list'. which makes sense because it's not. but in leetcode the code gives no error and gets accepted. can anyone explain pls? "
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "my solution!!\ntoo lazy to make it shorter, but algo is solid. If you don't agree provide feedback on improvements.\n\n\n`func mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\n    var curNode *ListNode\n    var head *ListNode \n\n    if list1 == nil {\n        return list2\n    }\n\n    if list2 == nil {\n        return list1\n    }\n\n    if list1.Val < list2.Val {\n        head = list1\n        curNode = head\n        list1 = list1.Next\n    } else {\n        head = list2\n        curNode = head\n        list2 = list2.Next\n    }\n\n    for list1 != nil || list2 != nil {\n        if list1 == nil {\n            curNode.Next = list2\n            return head\n        }\n        if list2 == nil {\n            curNode.Next = list1\n            return head\n        }\n        if list1.Val < list2.Val {\n            curNode.Next = list1\n            list1 = list1.Next\n        } else {\n            curNode.Next = list2\n            list2 = list2.Next\n        }\n\n        curNode = curNode.Next\n    }\n    return head\n}`"
                    },
                    {
                        "username": "dssera",
                        "content": "What is problem of this error?\\nTypeError: object of type \\'ListNode\\' has no len()\\n    n = len(list2)\\nLine 8 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 36 in _driver (Solution.py)\\n    _driver()\\nLine 46 in <module> (Solution.py)   "
                    },
                    {
                        "username": "zenverak",
                        "content": "The problem is that ListNode doesn\\'t have a length "
                    },
                    {
                        "username": "gadjiev",
                        "content": "try to solve on javascript \\ni have `{val:1,next:[2,4]}`\\nWhy it gives me error when i try ` console.log(\\'l1\\',[...list1.next])` ?\\nError is \\nTypeError: list1.next is not iterable\\n"
                    },
                    {
                        "username": "tiwarijgm66",
                        "content": "solution for this question in java  \\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if(list1 == null){ \\n            return list2;\\n        } \\n        if(list2 == null){ \\n            return list1; \\n        }  \\n        if(list1.val <= list2.val){ \\n            list1.next = mergeTwoLists(list2 , list1.next);\\n            return list1;\\n        }else{ \\n            list2.next = mergeTwoLists(list2.next, list1); \\n            return list2;\\n        } \\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1777901,
                "content": [
                    {
                        "username": "alexnelyubiy",
                        "content": "so, each param of mergeTwoLists func is an array of objects?"
                    },
                    {
                        "username": "Ruildo",
                        "content": "No. they\\'re a linked list. A linked list is a data structure used in many programs but in JS they\\'re a Class, and in LeetCode its an object from JSON."
                    },
                    {
                        "username": "thenullcoder",
                        "content": "I have tried a simple javascript solution for this problem with rest operators but this solution is not working , maybe expected output in form of lListNode and my solution produce it in Array.\\n\\nCan anyone help me out with explaining traversing in Linked List ?\\n"
                    },
                    {
                        "username": "PythonAkoto",
                        "content": "Why can\\'t you just create an empty list then iterate through the two lists and append values to the new list.  After that you can just sort the new list and return the value.\\n\\nThat\\'s what i have tried but i have received and error.\\n\\n```\\n# empty list to add new values\\nnew_list = []\\n\\n# iterate through list1 and add to new_list\\n for item in list1:\\n     new_list.append(item)\\n\\n# iterate through list2 and add to new_list\\nfor item in list2:\\n    new_list.append(item)\\n\\n# sort the elements in new_list\\nnew_list.sort()\\n\\nreturn new_list\\n```"
                    },
                    {
                        "username": "zenverak",
                        "content": "because you\\'re dealing with a linked list. not a list."
                    },
                    {
                        "username": "The_White_Fox",
                        "content": "Because the datatype is a ListNode not list. Welcome to Leetcode"
                    },
                    {
                        "username": "abhi893198",
                        "content": "cant we just treverse till the last node of first list and and place the head value of second in null place to merge them and then sort the whole list ?\nhelp with this"
                    },
                    {
                        "username": "sandeep1808",
                        "content": "please help me to solve this problem i written code but showing error\\n\\ncode:\\nclass solution {\\n    public:\\n    String mergeAlternate(string word1, string word2)\\n{\\n    int i=0;\\n    int j=0;\\n    string res=\"\";\\n    while(i<word1.size() && j<word2.size())\\n    {\\n        res+=word1[i++];\\n        res+=word1[j++];\\n    }\\n\\n    while(i<word1.size())\\n    {\\n        res+=word1[i++];\\n    }\\n    while(j<word2.size())\\n    {\\n        res+=word1[j++];\\n    }\\n    return res;\\n\\n}\\n};"
                    },
                    {
                        "username": "gurmindersingh5",
                        "content": "When i test code in Pycharm, it says 'val' is not attribute of 'list'. which makes sense because it's not. but in leetcode the code gives no error and gets accepted. can anyone explain pls? "
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "my solution!!\ntoo lazy to make it shorter, but algo is solid. If you don't agree provide feedback on improvements.\n\n\n`func mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\n    var curNode *ListNode\n    var head *ListNode \n\n    if list1 == nil {\n        return list2\n    }\n\n    if list2 == nil {\n        return list1\n    }\n\n    if list1.Val < list2.Val {\n        head = list1\n        curNode = head\n        list1 = list1.Next\n    } else {\n        head = list2\n        curNode = head\n        list2 = list2.Next\n    }\n\n    for list1 != nil || list2 != nil {\n        if list1 == nil {\n            curNode.Next = list2\n            return head\n        }\n        if list2 == nil {\n            curNode.Next = list1\n            return head\n        }\n        if list1.Val < list2.Val {\n            curNode.Next = list1\n            list1 = list1.Next\n        } else {\n            curNode.Next = list2\n            list2 = list2.Next\n        }\n\n        curNode = curNode.Next\n    }\n    return head\n}`"
                    },
                    {
                        "username": "dssera",
                        "content": "What is problem of this error?\\nTypeError: object of type \\'ListNode\\' has no len()\\n    n = len(list2)\\nLine 8 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 36 in _driver (Solution.py)\\n    _driver()\\nLine 46 in <module> (Solution.py)   "
                    },
                    {
                        "username": "zenverak",
                        "content": "The problem is that ListNode doesn\\'t have a length "
                    },
                    {
                        "username": "gadjiev",
                        "content": "try to solve on javascript \\ni have `{val:1,next:[2,4]}`\\nWhy it gives me error when i try ` console.log(\\'l1\\',[...list1.next])` ?\\nError is \\nTypeError: list1.next is not iterable\\n"
                    },
                    {
                        "username": "tiwarijgm66",
                        "content": "solution for this question in java  \\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if(list1 == null){ \\n            return list2;\\n        } \\n        if(list2 == null){ \\n            return list1; \\n        }  \\n        if(list1.val <= list2.val){ \\n            list1.next = mergeTwoLists(list2 , list1.next);\\n            return list1;\\n        }else{ \\n            list2.next = mergeTwoLists(list2.next, list1); \\n            return list2;\\n        } \\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1774390,
                "content": [
                    {
                        "username": "alexnelyubiy",
                        "content": "so, each param of mergeTwoLists func is an array of objects?"
                    },
                    {
                        "username": "Ruildo",
                        "content": "No. they\\'re a linked list. A linked list is a data structure used in many programs but in JS they\\'re a Class, and in LeetCode its an object from JSON."
                    },
                    {
                        "username": "thenullcoder",
                        "content": "I have tried a simple javascript solution for this problem with rest operators but this solution is not working , maybe expected output in form of lListNode and my solution produce it in Array.\\n\\nCan anyone help me out with explaining traversing in Linked List ?\\n"
                    },
                    {
                        "username": "PythonAkoto",
                        "content": "Why can\\'t you just create an empty list then iterate through the two lists and append values to the new list.  After that you can just sort the new list and return the value.\\n\\nThat\\'s what i have tried but i have received and error.\\n\\n```\\n# empty list to add new values\\nnew_list = []\\n\\n# iterate through list1 and add to new_list\\n for item in list1:\\n     new_list.append(item)\\n\\n# iterate through list2 and add to new_list\\nfor item in list2:\\n    new_list.append(item)\\n\\n# sort the elements in new_list\\nnew_list.sort()\\n\\nreturn new_list\\n```"
                    },
                    {
                        "username": "zenverak",
                        "content": "because you\\'re dealing with a linked list. not a list."
                    },
                    {
                        "username": "The_White_Fox",
                        "content": "Because the datatype is a ListNode not list. Welcome to Leetcode"
                    },
                    {
                        "username": "abhi893198",
                        "content": "cant we just treverse till the last node of first list and and place the head value of second in null place to merge them and then sort the whole list ?\nhelp with this"
                    },
                    {
                        "username": "sandeep1808",
                        "content": "please help me to solve this problem i written code but showing error\\n\\ncode:\\nclass solution {\\n    public:\\n    String mergeAlternate(string word1, string word2)\\n{\\n    int i=0;\\n    int j=0;\\n    string res=\"\";\\n    while(i<word1.size() && j<word2.size())\\n    {\\n        res+=word1[i++];\\n        res+=word1[j++];\\n    }\\n\\n    while(i<word1.size())\\n    {\\n        res+=word1[i++];\\n    }\\n    while(j<word2.size())\\n    {\\n        res+=word1[j++];\\n    }\\n    return res;\\n\\n}\\n};"
                    },
                    {
                        "username": "gurmindersingh5",
                        "content": "When i test code in Pycharm, it says 'val' is not attribute of 'list'. which makes sense because it's not. but in leetcode the code gives no error and gets accepted. can anyone explain pls? "
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "my solution!!\ntoo lazy to make it shorter, but algo is solid. If you don't agree provide feedback on improvements.\n\n\n`func mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\n    var curNode *ListNode\n    var head *ListNode \n\n    if list1 == nil {\n        return list2\n    }\n\n    if list2 == nil {\n        return list1\n    }\n\n    if list1.Val < list2.Val {\n        head = list1\n        curNode = head\n        list1 = list1.Next\n    } else {\n        head = list2\n        curNode = head\n        list2 = list2.Next\n    }\n\n    for list1 != nil || list2 != nil {\n        if list1 == nil {\n            curNode.Next = list2\n            return head\n        }\n        if list2 == nil {\n            curNode.Next = list1\n            return head\n        }\n        if list1.Val < list2.Val {\n            curNode.Next = list1\n            list1 = list1.Next\n        } else {\n            curNode.Next = list2\n            list2 = list2.Next\n        }\n\n        curNode = curNode.Next\n    }\n    return head\n}`"
                    },
                    {
                        "username": "dssera",
                        "content": "What is problem of this error?\\nTypeError: object of type \\'ListNode\\' has no len()\\n    n = len(list2)\\nLine 8 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 36 in _driver (Solution.py)\\n    _driver()\\nLine 46 in <module> (Solution.py)   "
                    },
                    {
                        "username": "zenverak",
                        "content": "The problem is that ListNode doesn\\'t have a length "
                    },
                    {
                        "username": "gadjiev",
                        "content": "try to solve on javascript \\ni have `{val:1,next:[2,4]}`\\nWhy it gives me error when i try ` console.log(\\'l1\\',[...list1.next])` ?\\nError is \\nTypeError: list1.next is not iterable\\n"
                    },
                    {
                        "username": "tiwarijgm66",
                        "content": "solution for this question in java  \\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if(list1 == null){ \\n            return list2;\\n        } \\n        if(list2 == null){ \\n            return list1; \\n        }  \\n        if(list1.val <= list2.val){ \\n            list1.next = mergeTwoLists(list2 , list1.next);\\n            return list1;\\n        }else{ \\n            list2.next = mergeTwoLists(list2.next, list1); \\n            return list2;\\n        } \\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1772127,
                "content": [
                    {
                        "username": "alexnelyubiy",
                        "content": "so, each param of mergeTwoLists func is an array of objects?"
                    },
                    {
                        "username": "Ruildo",
                        "content": "No. they\\'re a linked list. A linked list is a data structure used in many programs but in JS they\\'re a Class, and in LeetCode its an object from JSON."
                    },
                    {
                        "username": "thenullcoder",
                        "content": "I have tried a simple javascript solution for this problem with rest operators but this solution is not working , maybe expected output in form of lListNode and my solution produce it in Array.\\n\\nCan anyone help me out with explaining traversing in Linked List ?\\n"
                    },
                    {
                        "username": "PythonAkoto",
                        "content": "Why can\\'t you just create an empty list then iterate through the two lists and append values to the new list.  After that you can just sort the new list and return the value.\\n\\nThat\\'s what i have tried but i have received and error.\\n\\n```\\n# empty list to add new values\\nnew_list = []\\n\\n# iterate through list1 and add to new_list\\n for item in list1:\\n     new_list.append(item)\\n\\n# iterate through list2 and add to new_list\\nfor item in list2:\\n    new_list.append(item)\\n\\n# sort the elements in new_list\\nnew_list.sort()\\n\\nreturn new_list\\n```"
                    },
                    {
                        "username": "zenverak",
                        "content": "because you\\'re dealing with a linked list. not a list."
                    },
                    {
                        "username": "The_White_Fox",
                        "content": "Because the datatype is a ListNode not list. Welcome to Leetcode"
                    },
                    {
                        "username": "abhi893198",
                        "content": "cant we just treverse till the last node of first list and and place the head value of second in null place to merge them and then sort the whole list ?\nhelp with this"
                    },
                    {
                        "username": "sandeep1808",
                        "content": "please help me to solve this problem i written code but showing error\\n\\ncode:\\nclass solution {\\n    public:\\n    String mergeAlternate(string word1, string word2)\\n{\\n    int i=0;\\n    int j=0;\\n    string res=\"\";\\n    while(i<word1.size() && j<word2.size())\\n    {\\n        res+=word1[i++];\\n        res+=word1[j++];\\n    }\\n\\n    while(i<word1.size())\\n    {\\n        res+=word1[i++];\\n    }\\n    while(j<word2.size())\\n    {\\n        res+=word1[j++];\\n    }\\n    return res;\\n\\n}\\n};"
                    },
                    {
                        "username": "gurmindersingh5",
                        "content": "When i test code in Pycharm, it says 'val' is not attribute of 'list'. which makes sense because it's not. but in leetcode the code gives no error and gets accepted. can anyone explain pls? "
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "my solution!!\ntoo lazy to make it shorter, but algo is solid. If you don't agree provide feedback on improvements.\n\n\n`func mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\n    var curNode *ListNode\n    var head *ListNode \n\n    if list1 == nil {\n        return list2\n    }\n\n    if list2 == nil {\n        return list1\n    }\n\n    if list1.Val < list2.Val {\n        head = list1\n        curNode = head\n        list1 = list1.Next\n    } else {\n        head = list2\n        curNode = head\n        list2 = list2.Next\n    }\n\n    for list1 != nil || list2 != nil {\n        if list1 == nil {\n            curNode.Next = list2\n            return head\n        }\n        if list2 == nil {\n            curNode.Next = list1\n            return head\n        }\n        if list1.Val < list2.Val {\n            curNode.Next = list1\n            list1 = list1.Next\n        } else {\n            curNode.Next = list2\n            list2 = list2.Next\n        }\n\n        curNode = curNode.Next\n    }\n    return head\n}`"
                    },
                    {
                        "username": "dssera",
                        "content": "What is problem of this error?\\nTypeError: object of type \\'ListNode\\' has no len()\\n    n = len(list2)\\nLine 8 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 36 in _driver (Solution.py)\\n    _driver()\\nLine 46 in <module> (Solution.py)   "
                    },
                    {
                        "username": "zenverak",
                        "content": "The problem is that ListNode doesn\\'t have a length "
                    },
                    {
                        "username": "gadjiev",
                        "content": "try to solve on javascript \\ni have `{val:1,next:[2,4]}`\\nWhy it gives me error when i try ` console.log(\\'l1\\',[...list1.next])` ?\\nError is \\nTypeError: list1.next is not iterable\\n"
                    },
                    {
                        "username": "tiwarijgm66",
                        "content": "solution for this question in java  \\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if(list1 == null){ \\n            return list2;\\n        } \\n        if(list2 == null){ \\n            return list1; \\n        }  \\n        if(list1.val <= list2.val){ \\n            list1.next = mergeTwoLists(list2 , list1.next);\\n            return list1;\\n        }else{ \\n            list2.next = mergeTwoLists(list2.next, list1); \\n            return list2;\\n        } \\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1771773,
                "content": [
                    {
                        "username": "alexnelyubiy",
                        "content": "so, each param of mergeTwoLists func is an array of objects?"
                    },
                    {
                        "username": "Ruildo",
                        "content": "No. they\\'re a linked list. A linked list is a data structure used in many programs but in JS they\\'re a Class, and in LeetCode its an object from JSON."
                    },
                    {
                        "username": "thenullcoder",
                        "content": "I have tried a simple javascript solution for this problem with rest operators but this solution is not working , maybe expected output in form of lListNode and my solution produce it in Array.\\n\\nCan anyone help me out with explaining traversing in Linked List ?\\n"
                    },
                    {
                        "username": "PythonAkoto",
                        "content": "Why can\\'t you just create an empty list then iterate through the two lists and append values to the new list.  After that you can just sort the new list and return the value.\\n\\nThat\\'s what i have tried but i have received and error.\\n\\n```\\n# empty list to add new values\\nnew_list = []\\n\\n# iterate through list1 and add to new_list\\n for item in list1:\\n     new_list.append(item)\\n\\n# iterate through list2 and add to new_list\\nfor item in list2:\\n    new_list.append(item)\\n\\n# sort the elements in new_list\\nnew_list.sort()\\n\\nreturn new_list\\n```"
                    },
                    {
                        "username": "zenverak",
                        "content": "because you\\'re dealing with a linked list. not a list."
                    },
                    {
                        "username": "The_White_Fox",
                        "content": "Because the datatype is a ListNode not list. Welcome to Leetcode"
                    },
                    {
                        "username": "abhi893198",
                        "content": "cant we just treverse till the last node of first list and and place the head value of second in null place to merge them and then sort the whole list ?\nhelp with this"
                    },
                    {
                        "username": "sandeep1808",
                        "content": "please help me to solve this problem i written code but showing error\\n\\ncode:\\nclass solution {\\n    public:\\n    String mergeAlternate(string word1, string word2)\\n{\\n    int i=0;\\n    int j=0;\\n    string res=\"\";\\n    while(i<word1.size() && j<word2.size())\\n    {\\n        res+=word1[i++];\\n        res+=word1[j++];\\n    }\\n\\n    while(i<word1.size())\\n    {\\n        res+=word1[i++];\\n    }\\n    while(j<word2.size())\\n    {\\n        res+=word1[j++];\\n    }\\n    return res;\\n\\n}\\n};"
                    },
                    {
                        "username": "gurmindersingh5",
                        "content": "When i test code in Pycharm, it says 'val' is not attribute of 'list'. which makes sense because it's not. but in leetcode the code gives no error and gets accepted. can anyone explain pls? "
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "my solution!!\ntoo lazy to make it shorter, but algo is solid. If you don't agree provide feedback on improvements.\n\n\n`func mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\n    var curNode *ListNode\n    var head *ListNode \n\n    if list1 == nil {\n        return list2\n    }\n\n    if list2 == nil {\n        return list1\n    }\n\n    if list1.Val < list2.Val {\n        head = list1\n        curNode = head\n        list1 = list1.Next\n    } else {\n        head = list2\n        curNode = head\n        list2 = list2.Next\n    }\n\n    for list1 != nil || list2 != nil {\n        if list1 == nil {\n            curNode.Next = list2\n            return head\n        }\n        if list2 == nil {\n            curNode.Next = list1\n            return head\n        }\n        if list1.Val < list2.Val {\n            curNode.Next = list1\n            list1 = list1.Next\n        } else {\n            curNode.Next = list2\n            list2 = list2.Next\n        }\n\n        curNode = curNode.Next\n    }\n    return head\n}`"
                    },
                    {
                        "username": "dssera",
                        "content": "What is problem of this error?\\nTypeError: object of type \\'ListNode\\' has no len()\\n    n = len(list2)\\nLine 8 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 36 in _driver (Solution.py)\\n    _driver()\\nLine 46 in <module> (Solution.py)   "
                    },
                    {
                        "username": "zenverak",
                        "content": "The problem is that ListNode doesn\\'t have a length "
                    },
                    {
                        "username": "gadjiev",
                        "content": "try to solve on javascript \\ni have `{val:1,next:[2,4]}`\\nWhy it gives me error when i try ` console.log(\\'l1\\',[...list1.next])` ?\\nError is \\nTypeError: list1.next is not iterable\\n"
                    },
                    {
                        "username": "tiwarijgm66",
                        "content": "solution for this question in java  \\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if(list1 == null){ \\n            return list2;\\n        } \\n        if(list2 == null){ \\n            return list1; \\n        }  \\n        if(list1.val <= list2.val){ \\n            list1.next = mergeTwoLists(list2 , list1.next);\\n            return list1;\\n        }else{ \\n            list2.next = mergeTwoLists(list2.next, list1); \\n            return list2;\\n        } \\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1770704,
                "content": [
                    {
                        "username": "alexnelyubiy",
                        "content": "so, each param of mergeTwoLists func is an array of objects?"
                    },
                    {
                        "username": "Ruildo",
                        "content": "No. they\\'re a linked list. A linked list is a data structure used in many programs but in JS they\\'re a Class, and in LeetCode its an object from JSON."
                    },
                    {
                        "username": "thenullcoder",
                        "content": "I have tried a simple javascript solution for this problem with rest operators but this solution is not working , maybe expected output in form of lListNode and my solution produce it in Array.\\n\\nCan anyone help me out with explaining traversing in Linked List ?\\n"
                    },
                    {
                        "username": "PythonAkoto",
                        "content": "Why can\\'t you just create an empty list then iterate through the two lists and append values to the new list.  After that you can just sort the new list and return the value.\\n\\nThat\\'s what i have tried but i have received and error.\\n\\n```\\n# empty list to add new values\\nnew_list = []\\n\\n# iterate through list1 and add to new_list\\n for item in list1:\\n     new_list.append(item)\\n\\n# iterate through list2 and add to new_list\\nfor item in list2:\\n    new_list.append(item)\\n\\n# sort the elements in new_list\\nnew_list.sort()\\n\\nreturn new_list\\n```"
                    },
                    {
                        "username": "zenverak",
                        "content": "because you\\'re dealing with a linked list. not a list."
                    },
                    {
                        "username": "The_White_Fox",
                        "content": "Because the datatype is a ListNode not list. Welcome to Leetcode"
                    },
                    {
                        "username": "abhi893198",
                        "content": "cant we just treverse till the last node of first list and and place the head value of second in null place to merge them and then sort the whole list ?\nhelp with this"
                    },
                    {
                        "username": "sandeep1808",
                        "content": "please help me to solve this problem i written code but showing error\\n\\ncode:\\nclass solution {\\n    public:\\n    String mergeAlternate(string word1, string word2)\\n{\\n    int i=0;\\n    int j=0;\\n    string res=\"\";\\n    while(i<word1.size() && j<word2.size())\\n    {\\n        res+=word1[i++];\\n        res+=word1[j++];\\n    }\\n\\n    while(i<word1.size())\\n    {\\n        res+=word1[i++];\\n    }\\n    while(j<word2.size())\\n    {\\n        res+=word1[j++];\\n    }\\n    return res;\\n\\n}\\n};"
                    },
                    {
                        "username": "gurmindersingh5",
                        "content": "When i test code in Pycharm, it says 'val' is not attribute of 'list'. which makes sense because it's not. but in leetcode the code gives no error and gets accepted. can anyone explain pls? "
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "my solution!!\ntoo lazy to make it shorter, but algo is solid. If you don't agree provide feedback on improvements.\n\n\n`func mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\n    var curNode *ListNode\n    var head *ListNode \n\n    if list1 == nil {\n        return list2\n    }\n\n    if list2 == nil {\n        return list1\n    }\n\n    if list1.Val < list2.Val {\n        head = list1\n        curNode = head\n        list1 = list1.Next\n    } else {\n        head = list2\n        curNode = head\n        list2 = list2.Next\n    }\n\n    for list1 != nil || list2 != nil {\n        if list1 == nil {\n            curNode.Next = list2\n            return head\n        }\n        if list2 == nil {\n            curNode.Next = list1\n            return head\n        }\n        if list1.Val < list2.Val {\n            curNode.Next = list1\n            list1 = list1.Next\n        } else {\n            curNode.Next = list2\n            list2 = list2.Next\n        }\n\n        curNode = curNode.Next\n    }\n    return head\n}`"
                    },
                    {
                        "username": "dssera",
                        "content": "What is problem of this error?\\nTypeError: object of type \\'ListNode\\' has no len()\\n    n = len(list2)\\nLine 8 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 36 in _driver (Solution.py)\\n    _driver()\\nLine 46 in <module> (Solution.py)   "
                    },
                    {
                        "username": "zenverak",
                        "content": "The problem is that ListNode doesn\\'t have a length "
                    },
                    {
                        "username": "gadjiev",
                        "content": "try to solve on javascript \\ni have `{val:1,next:[2,4]}`\\nWhy it gives me error when i try ` console.log(\\'l1\\',[...list1.next])` ?\\nError is \\nTypeError: list1.next is not iterable\\n"
                    },
                    {
                        "username": "tiwarijgm66",
                        "content": "solution for this question in java  \\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if(list1 == null){ \\n            return list2;\\n        } \\n        if(list2 == null){ \\n            return list1; \\n        }  \\n        if(list1.val <= list2.val){ \\n            list1.next = mergeTwoLists(list2 , list1.next);\\n            return list1;\\n        }else{ \\n            list2.next = mergeTwoLists(list2.next, list1); \\n            return list2;\\n        } \\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1769931,
                "content": [
                    {
                        "username": "alexnelyubiy",
                        "content": "so, each param of mergeTwoLists func is an array of objects?"
                    },
                    {
                        "username": "Ruildo",
                        "content": "No. they\\'re a linked list. A linked list is a data structure used in many programs but in JS they\\'re a Class, and in LeetCode its an object from JSON."
                    },
                    {
                        "username": "thenullcoder",
                        "content": "I have tried a simple javascript solution for this problem with rest operators but this solution is not working , maybe expected output in form of lListNode and my solution produce it in Array.\\n\\nCan anyone help me out with explaining traversing in Linked List ?\\n"
                    },
                    {
                        "username": "PythonAkoto",
                        "content": "Why can\\'t you just create an empty list then iterate through the two lists and append values to the new list.  After that you can just sort the new list and return the value.\\n\\nThat\\'s what i have tried but i have received and error.\\n\\n```\\n# empty list to add new values\\nnew_list = []\\n\\n# iterate through list1 and add to new_list\\n for item in list1:\\n     new_list.append(item)\\n\\n# iterate through list2 and add to new_list\\nfor item in list2:\\n    new_list.append(item)\\n\\n# sort the elements in new_list\\nnew_list.sort()\\n\\nreturn new_list\\n```"
                    },
                    {
                        "username": "zenverak",
                        "content": "because you\\'re dealing with a linked list. not a list."
                    },
                    {
                        "username": "The_White_Fox",
                        "content": "Because the datatype is a ListNode not list. Welcome to Leetcode"
                    },
                    {
                        "username": "abhi893198",
                        "content": "cant we just treverse till the last node of first list and and place the head value of second in null place to merge them and then sort the whole list ?\nhelp with this"
                    },
                    {
                        "username": "sandeep1808",
                        "content": "please help me to solve this problem i written code but showing error\\n\\ncode:\\nclass solution {\\n    public:\\n    String mergeAlternate(string word1, string word2)\\n{\\n    int i=0;\\n    int j=0;\\n    string res=\"\";\\n    while(i<word1.size() && j<word2.size())\\n    {\\n        res+=word1[i++];\\n        res+=word1[j++];\\n    }\\n\\n    while(i<word1.size())\\n    {\\n        res+=word1[i++];\\n    }\\n    while(j<word2.size())\\n    {\\n        res+=word1[j++];\\n    }\\n    return res;\\n\\n}\\n};"
                    },
                    {
                        "username": "gurmindersingh5",
                        "content": "When i test code in Pycharm, it says 'val' is not attribute of 'list'. which makes sense because it's not. but in leetcode the code gives no error and gets accepted. can anyone explain pls? "
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "my solution!!\ntoo lazy to make it shorter, but algo is solid. If you don't agree provide feedback on improvements.\n\n\n`func mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\n    var curNode *ListNode\n    var head *ListNode \n\n    if list1 == nil {\n        return list2\n    }\n\n    if list2 == nil {\n        return list1\n    }\n\n    if list1.Val < list2.Val {\n        head = list1\n        curNode = head\n        list1 = list1.Next\n    } else {\n        head = list2\n        curNode = head\n        list2 = list2.Next\n    }\n\n    for list1 != nil || list2 != nil {\n        if list1 == nil {\n            curNode.Next = list2\n            return head\n        }\n        if list2 == nil {\n            curNode.Next = list1\n            return head\n        }\n        if list1.Val < list2.Val {\n            curNode.Next = list1\n            list1 = list1.Next\n        } else {\n            curNode.Next = list2\n            list2 = list2.Next\n        }\n\n        curNode = curNode.Next\n    }\n    return head\n}`"
                    },
                    {
                        "username": "dssera",
                        "content": "What is problem of this error?\\nTypeError: object of type \\'ListNode\\' has no len()\\n    n = len(list2)\\nLine 8 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 36 in _driver (Solution.py)\\n    _driver()\\nLine 46 in <module> (Solution.py)   "
                    },
                    {
                        "username": "zenverak",
                        "content": "The problem is that ListNode doesn\\'t have a length "
                    },
                    {
                        "username": "gadjiev",
                        "content": "try to solve on javascript \\ni have `{val:1,next:[2,4]}`\\nWhy it gives me error when i try ` console.log(\\'l1\\',[...list1.next])` ?\\nError is \\nTypeError: list1.next is not iterable\\n"
                    },
                    {
                        "username": "tiwarijgm66",
                        "content": "solution for this question in java  \\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if(list1 == null){ \\n            return list2;\\n        } \\n        if(list2 == null){ \\n            return list1; \\n        }  \\n        if(list1.val <= list2.val){ \\n            list1.next = mergeTwoLists(list2 , list1.next);\\n            return list1;\\n        }else{ \\n            list2.next = mergeTwoLists(list2.next, list1); \\n            return list2;\\n        } \\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1768316,
                "content": [
                    {
                        "username": "alexnelyubiy",
                        "content": "so, each param of mergeTwoLists func is an array of objects?"
                    },
                    {
                        "username": "Ruildo",
                        "content": "No. they\\'re a linked list. A linked list is a data structure used in many programs but in JS they\\'re a Class, and in LeetCode its an object from JSON."
                    },
                    {
                        "username": "thenullcoder",
                        "content": "I have tried a simple javascript solution for this problem with rest operators but this solution is not working , maybe expected output in form of lListNode and my solution produce it in Array.\\n\\nCan anyone help me out with explaining traversing in Linked List ?\\n"
                    },
                    {
                        "username": "PythonAkoto",
                        "content": "Why can\\'t you just create an empty list then iterate through the two lists and append values to the new list.  After that you can just sort the new list and return the value.\\n\\nThat\\'s what i have tried but i have received and error.\\n\\n```\\n# empty list to add new values\\nnew_list = []\\n\\n# iterate through list1 and add to new_list\\n for item in list1:\\n     new_list.append(item)\\n\\n# iterate through list2 and add to new_list\\nfor item in list2:\\n    new_list.append(item)\\n\\n# sort the elements in new_list\\nnew_list.sort()\\n\\nreturn new_list\\n```"
                    },
                    {
                        "username": "zenverak",
                        "content": "because you\\'re dealing with a linked list. not a list."
                    },
                    {
                        "username": "The_White_Fox",
                        "content": "Because the datatype is a ListNode not list. Welcome to Leetcode"
                    },
                    {
                        "username": "abhi893198",
                        "content": "cant we just treverse till the last node of first list and and place the head value of second in null place to merge them and then sort the whole list ?\nhelp with this"
                    },
                    {
                        "username": "sandeep1808",
                        "content": "please help me to solve this problem i written code but showing error\\n\\ncode:\\nclass solution {\\n    public:\\n    String mergeAlternate(string word1, string word2)\\n{\\n    int i=0;\\n    int j=0;\\n    string res=\"\";\\n    while(i<word1.size() && j<word2.size())\\n    {\\n        res+=word1[i++];\\n        res+=word1[j++];\\n    }\\n\\n    while(i<word1.size())\\n    {\\n        res+=word1[i++];\\n    }\\n    while(j<word2.size())\\n    {\\n        res+=word1[j++];\\n    }\\n    return res;\\n\\n}\\n};"
                    },
                    {
                        "username": "gurmindersingh5",
                        "content": "When i test code in Pycharm, it says 'val' is not attribute of 'list'. which makes sense because it's not. but in leetcode the code gives no error and gets accepted. can anyone explain pls? "
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "my solution!!\ntoo lazy to make it shorter, but algo is solid. If you don't agree provide feedback on improvements.\n\n\n`func mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\n    var curNode *ListNode\n    var head *ListNode \n\n    if list1 == nil {\n        return list2\n    }\n\n    if list2 == nil {\n        return list1\n    }\n\n    if list1.Val < list2.Val {\n        head = list1\n        curNode = head\n        list1 = list1.Next\n    } else {\n        head = list2\n        curNode = head\n        list2 = list2.Next\n    }\n\n    for list1 != nil || list2 != nil {\n        if list1 == nil {\n            curNode.Next = list2\n            return head\n        }\n        if list2 == nil {\n            curNode.Next = list1\n            return head\n        }\n        if list1.Val < list2.Val {\n            curNode.Next = list1\n            list1 = list1.Next\n        } else {\n            curNode.Next = list2\n            list2 = list2.Next\n        }\n\n        curNode = curNode.Next\n    }\n    return head\n}`"
                    },
                    {
                        "username": "dssera",
                        "content": "What is problem of this error?\\nTypeError: object of type \\'ListNode\\' has no len()\\n    n = len(list2)\\nLine 8 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 36 in _driver (Solution.py)\\n    _driver()\\nLine 46 in <module> (Solution.py)   "
                    },
                    {
                        "username": "zenverak",
                        "content": "The problem is that ListNode doesn\\'t have a length "
                    },
                    {
                        "username": "gadjiev",
                        "content": "try to solve on javascript \\ni have `{val:1,next:[2,4]}`\\nWhy it gives me error when i try ` console.log(\\'l1\\',[...list1.next])` ?\\nError is \\nTypeError: list1.next is not iterable\\n"
                    },
                    {
                        "username": "tiwarijgm66",
                        "content": "solution for this question in java  \\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if(list1 == null){ \\n            return list2;\\n        } \\n        if(list2 == null){ \\n            return list1; \\n        }  \\n        if(list1.val <= list2.val){ \\n            list1.next = mergeTwoLists(list2 , list1.next);\\n            return list1;\\n        }else{ \\n            list2.next = mergeTwoLists(list2.next, list1); \\n            return list2;\\n        } \\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1765408,
                "content": [
                    {
                        "username": "alexnelyubiy",
                        "content": "so, each param of mergeTwoLists func is an array of objects?"
                    },
                    {
                        "username": "Ruildo",
                        "content": "No. they\\'re a linked list. A linked list is a data structure used in many programs but in JS they\\'re a Class, and in LeetCode its an object from JSON."
                    },
                    {
                        "username": "thenullcoder",
                        "content": "I have tried a simple javascript solution for this problem with rest operators but this solution is not working , maybe expected output in form of lListNode and my solution produce it in Array.\\n\\nCan anyone help me out with explaining traversing in Linked List ?\\n"
                    },
                    {
                        "username": "PythonAkoto",
                        "content": "Why can\\'t you just create an empty list then iterate through the two lists and append values to the new list.  After that you can just sort the new list and return the value.\\n\\nThat\\'s what i have tried but i have received and error.\\n\\n```\\n# empty list to add new values\\nnew_list = []\\n\\n# iterate through list1 and add to new_list\\n for item in list1:\\n     new_list.append(item)\\n\\n# iterate through list2 and add to new_list\\nfor item in list2:\\n    new_list.append(item)\\n\\n# sort the elements in new_list\\nnew_list.sort()\\n\\nreturn new_list\\n```"
                    },
                    {
                        "username": "zenverak",
                        "content": "because you\\'re dealing with a linked list. not a list."
                    },
                    {
                        "username": "The_White_Fox",
                        "content": "Because the datatype is a ListNode not list. Welcome to Leetcode"
                    },
                    {
                        "username": "abhi893198",
                        "content": "cant we just treverse till the last node of first list and and place the head value of second in null place to merge them and then sort the whole list ?\nhelp with this"
                    },
                    {
                        "username": "sandeep1808",
                        "content": "please help me to solve this problem i written code but showing error\\n\\ncode:\\nclass solution {\\n    public:\\n    String mergeAlternate(string word1, string word2)\\n{\\n    int i=0;\\n    int j=0;\\n    string res=\"\";\\n    while(i<word1.size() && j<word2.size())\\n    {\\n        res+=word1[i++];\\n        res+=word1[j++];\\n    }\\n\\n    while(i<word1.size())\\n    {\\n        res+=word1[i++];\\n    }\\n    while(j<word2.size())\\n    {\\n        res+=word1[j++];\\n    }\\n    return res;\\n\\n}\\n};"
                    },
                    {
                        "username": "gurmindersingh5",
                        "content": "When i test code in Pycharm, it says 'val' is not attribute of 'list'. which makes sense because it's not. but in leetcode the code gives no error and gets accepted. can anyone explain pls? "
                    },
                    {
                        "username": "Last_CodeBender",
                        "content": "my solution!!\ntoo lazy to make it shorter, but algo is solid. If you don't agree provide feedback on improvements.\n\n\n`func mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {\n    var curNode *ListNode\n    var head *ListNode \n\n    if list1 == nil {\n        return list2\n    }\n\n    if list2 == nil {\n        return list1\n    }\n\n    if list1.Val < list2.Val {\n        head = list1\n        curNode = head\n        list1 = list1.Next\n    } else {\n        head = list2\n        curNode = head\n        list2 = list2.Next\n    }\n\n    for list1 != nil || list2 != nil {\n        if list1 == nil {\n            curNode.Next = list2\n            return head\n        }\n        if list2 == nil {\n            curNode.Next = list1\n            return head\n        }\n        if list1.Val < list2.Val {\n            curNode.Next = list1\n            list1 = list1.Next\n        } else {\n            curNode.Next = list2\n            list2 = list2.Next\n        }\n\n        curNode = curNode.Next\n    }\n    return head\n}`"
                    },
                    {
                        "username": "dssera",
                        "content": "What is problem of this error?\\nTypeError: object of type \\'ListNode\\' has no len()\\n    n = len(list2)\\nLine 8 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 36 in _driver (Solution.py)\\n    _driver()\\nLine 46 in <module> (Solution.py)   "
                    },
                    {
                        "username": "zenverak",
                        "content": "The problem is that ListNode doesn\\'t have a length "
                    },
                    {
                        "username": "gadjiev",
                        "content": "try to solve on javascript \\ni have `{val:1,next:[2,4]}`\\nWhy it gives me error when i try ` console.log(\\'l1\\',[...list1.next])` ?\\nError is \\nTypeError: list1.next is not iterable\\n"
                    },
                    {
                        "username": "tiwarijgm66",
                        "content": "solution for this question in java  \\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        if(list1 == null){ \\n            return list2;\\n        } \\n        if(list2 == null){ \\n            return list1; \\n        }  \\n        if(list1.val <= list2.val){ \\n            list1.next = mergeTwoLists(list2 , list1.next);\\n            return list1;\\n        }else{ \\n            list2.next = mergeTwoLists(list2.next, list1); \\n            return list2;\\n        } \\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1765142,
                "content": [
                    {
                        "username": "devinat11",
                        "content": "Most solutions use a dummy variable when solving this problem. However, the problem states to, \"splice the nodes of the first two lists\", which I took to mean that we cannot use a dummy node as our start (can only use the original lists\\' space). Is this problem solvable without using a dummy variable?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Shure, it only makes the code more complicated. But a dummy node is not forbidden."
                    },
                    {
                        "username": "_chitransh_9",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    private:\\n    ListNode* solve(ListNode* list1,ListNode* list2){\\n        if(list1->next==NULL){\\n            list1->next=list2;\\n            return list1;\\n        }\\n        //assigning pointer to list\\n        ListNode* curr1=list1;\\n        ListNode* next1=curr1->next;\\n        ListNode* curr2=list2;\\n        ListNode* next2=curr2->next;\\n        \\n        //merging two list\\n        while(next1!=NULL&&curr2!=NULL){\\n            if((curr2->val>=curr1->val)&&(curr2->val<=next1->val)){\\n                curr1->next=curr2; \\n                next2=curr2->next; \\n                curr2->next=next1;\\n                curr1=curr2; \\n                curr2=next2;\\n            }\\n            else{\\n                curr1=next1; \\n                next1=next1->next;\\n                if (next1==NULL) {\\n                   curr1->next=curr2;\\n                   return list1;\\n                }\\n            }\\n        }\\n        return list1;\\n    } \\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==NULL) return list2;\\n        if(list2==NULL) return list1;\\n\\n        if(list1->val<=list2->val){\\n            return solve(list1,list2);\\n        }\\n        else{\\n            return solve(list2,list1);\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "DenisUstinov",
                        "content": "\\u041F\\u0440\\u0438\\u0434\\u0443\\u043C\\u0430\\u0439\\u0442\\u0435 \\u0443\\u0436\\u0435 \\u043F\\u0441\\u0435\\u0432\\u0434\\u043E\\u043A\\u043E\\u0434 \\u0434\\u043B\\u044F \\u0441\\u0432\\u043E\\u0435\\u0433\\u043E \\u0441\\u0435\\u0440\\u0432\\u0438\\u0441\\u0430!"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "agarrkoch",
                        "content": "Hi. I basically understand how the code below works.\\nBut I don\\'t understand the behavior of the first two variables, \"head\" and \"tail\". \\nWhy is it when you update tail (e.g. tail.next = a) it dynamically updates head?\\nAnd why is it when you truncate tail (e.g. tail = tail.next), this doesn\\'t affect head?\\n\\n\\n\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def mergeTwoLists(self, a, b):\\n\\n        head = ListNode()\\n        tail = head\\n\\n        while a and b:\\n            if a.val <= b.val:\\n                tail.next = a\\n                a = a.next\\n            else:\\n                tail.next = b\\n                b = b.next\\n            tail = tail.next\\n        \\n        if a:\\n            tail.next = a\\n        elif b:\\n            tail.next = b \\n\\n        return head.next\\n\\n"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/merge-two-sorted-lists-leet-code-21/"
                    },
                    {
                        "username": "mqmq",
                        "content": "Why does the operation \\'+\\' not work here? Thank you!"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "No, simply concatenating the lists doesn't maintain the sorted order. If you combine [1,2,3] and [-1,1,2,5] you should get [-1,1,2,2,3,5], not [1,2,3,-1,1,2,5]."
                    },
                    {
                        "username": "djarto",
                        "content": "It should be made clear that the given lists are of same size. I ended up writing an algo that consider lists that are not of equal size, putting strain on the performance of my solution"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Nothing in the problem says that they are the same size, so your code should be able to correctly merge lists of different sizes. It\\'s possible to do that with very little impact on execution time."
                    },
                    {
                        "username": "GeekErra",
                        "content": "CLEAR VIDEO EXPLANATION\\n\\nClick this link to Subscribe to my YouTube Channel -> https://tinyurl.com/4e2nj4vr\\n\\nhttps://youtu.be/xEYAoPszHVM"
                    },
                    {
                        "username": "zkerner1",
                        "content": "On Ruby l1.val throws an error \"undefined method val for nil\". But l1.nil? returns false. Helppppppppppp"
                    }
                ]
            },
            {
                "id": 1765054,
                "content": [
                    {
                        "username": "devinat11",
                        "content": "Most solutions use a dummy variable when solving this problem. However, the problem states to, \"splice the nodes of the first two lists\", which I took to mean that we cannot use a dummy node as our start (can only use the original lists\\' space). Is this problem solvable without using a dummy variable?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Shure, it only makes the code more complicated. But a dummy node is not forbidden."
                    },
                    {
                        "username": "_chitransh_9",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    private:\\n    ListNode* solve(ListNode* list1,ListNode* list2){\\n        if(list1->next==NULL){\\n            list1->next=list2;\\n            return list1;\\n        }\\n        //assigning pointer to list\\n        ListNode* curr1=list1;\\n        ListNode* next1=curr1->next;\\n        ListNode* curr2=list2;\\n        ListNode* next2=curr2->next;\\n        \\n        //merging two list\\n        while(next1!=NULL&&curr2!=NULL){\\n            if((curr2->val>=curr1->val)&&(curr2->val<=next1->val)){\\n                curr1->next=curr2; \\n                next2=curr2->next; \\n                curr2->next=next1;\\n                curr1=curr2; \\n                curr2=next2;\\n            }\\n            else{\\n                curr1=next1; \\n                next1=next1->next;\\n                if (next1==NULL) {\\n                   curr1->next=curr2;\\n                   return list1;\\n                }\\n            }\\n        }\\n        return list1;\\n    } \\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==NULL) return list2;\\n        if(list2==NULL) return list1;\\n\\n        if(list1->val<=list2->val){\\n            return solve(list1,list2);\\n        }\\n        else{\\n            return solve(list2,list1);\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "DenisUstinov",
                        "content": "\\u041F\\u0440\\u0438\\u0434\\u0443\\u043C\\u0430\\u0439\\u0442\\u0435 \\u0443\\u0436\\u0435 \\u043F\\u0441\\u0435\\u0432\\u0434\\u043E\\u043A\\u043E\\u0434 \\u0434\\u043B\\u044F \\u0441\\u0432\\u043E\\u0435\\u0433\\u043E \\u0441\\u0435\\u0440\\u0432\\u0438\\u0441\\u0430!"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "agarrkoch",
                        "content": "Hi. I basically understand how the code below works.\\nBut I don\\'t understand the behavior of the first two variables, \"head\" and \"tail\". \\nWhy is it when you update tail (e.g. tail.next = a) it dynamically updates head?\\nAnd why is it when you truncate tail (e.g. tail = tail.next), this doesn\\'t affect head?\\n\\n\\n\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def mergeTwoLists(self, a, b):\\n\\n        head = ListNode()\\n        tail = head\\n\\n        while a and b:\\n            if a.val <= b.val:\\n                tail.next = a\\n                a = a.next\\n            else:\\n                tail.next = b\\n                b = b.next\\n            tail = tail.next\\n        \\n        if a:\\n            tail.next = a\\n        elif b:\\n            tail.next = b \\n\\n        return head.next\\n\\n"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/merge-two-sorted-lists-leet-code-21/"
                    },
                    {
                        "username": "mqmq",
                        "content": "Why does the operation \\'+\\' not work here? Thank you!"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "No, simply concatenating the lists doesn't maintain the sorted order. If you combine [1,2,3] and [-1,1,2,5] you should get [-1,1,2,2,3,5], not [1,2,3,-1,1,2,5]."
                    },
                    {
                        "username": "djarto",
                        "content": "It should be made clear that the given lists are of same size. I ended up writing an algo that consider lists that are not of equal size, putting strain on the performance of my solution"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Nothing in the problem says that they are the same size, so your code should be able to correctly merge lists of different sizes. It\\'s possible to do that with very little impact on execution time."
                    },
                    {
                        "username": "GeekErra",
                        "content": "CLEAR VIDEO EXPLANATION\\n\\nClick this link to Subscribe to my YouTube Channel -> https://tinyurl.com/4e2nj4vr\\n\\nhttps://youtu.be/xEYAoPszHVM"
                    },
                    {
                        "username": "zkerner1",
                        "content": "On Ruby l1.val throws an error \"undefined method val for nil\". But l1.nil? returns false. Helppppppppppp"
                    }
                ]
            },
            {
                "id": 1761124,
                "content": [
                    {
                        "username": "devinat11",
                        "content": "Most solutions use a dummy variable when solving this problem. However, the problem states to, \"splice the nodes of the first two lists\", which I took to mean that we cannot use a dummy node as our start (can only use the original lists\\' space). Is this problem solvable without using a dummy variable?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Shure, it only makes the code more complicated. But a dummy node is not forbidden."
                    },
                    {
                        "username": "_chitransh_9",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    private:\\n    ListNode* solve(ListNode* list1,ListNode* list2){\\n        if(list1->next==NULL){\\n            list1->next=list2;\\n            return list1;\\n        }\\n        //assigning pointer to list\\n        ListNode* curr1=list1;\\n        ListNode* next1=curr1->next;\\n        ListNode* curr2=list2;\\n        ListNode* next2=curr2->next;\\n        \\n        //merging two list\\n        while(next1!=NULL&&curr2!=NULL){\\n            if((curr2->val>=curr1->val)&&(curr2->val<=next1->val)){\\n                curr1->next=curr2; \\n                next2=curr2->next; \\n                curr2->next=next1;\\n                curr1=curr2; \\n                curr2=next2;\\n            }\\n            else{\\n                curr1=next1; \\n                next1=next1->next;\\n                if (next1==NULL) {\\n                   curr1->next=curr2;\\n                   return list1;\\n                }\\n            }\\n        }\\n        return list1;\\n    } \\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==NULL) return list2;\\n        if(list2==NULL) return list1;\\n\\n        if(list1->val<=list2->val){\\n            return solve(list1,list2);\\n        }\\n        else{\\n            return solve(list2,list1);\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "DenisUstinov",
                        "content": "\\u041F\\u0440\\u0438\\u0434\\u0443\\u043C\\u0430\\u0439\\u0442\\u0435 \\u0443\\u0436\\u0435 \\u043F\\u0441\\u0435\\u0432\\u0434\\u043E\\u043A\\u043E\\u0434 \\u0434\\u043B\\u044F \\u0441\\u0432\\u043E\\u0435\\u0433\\u043E \\u0441\\u0435\\u0440\\u0432\\u0438\\u0441\\u0430!"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "agarrkoch",
                        "content": "Hi. I basically understand how the code below works.\\nBut I don\\'t understand the behavior of the first two variables, \"head\" and \"tail\". \\nWhy is it when you update tail (e.g. tail.next = a) it dynamically updates head?\\nAnd why is it when you truncate tail (e.g. tail = tail.next), this doesn\\'t affect head?\\n\\n\\n\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def mergeTwoLists(self, a, b):\\n\\n        head = ListNode()\\n        tail = head\\n\\n        while a and b:\\n            if a.val <= b.val:\\n                tail.next = a\\n                a = a.next\\n            else:\\n                tail.next = b\\n                b = b.next\\n            tail = tail.next\\n        \\n        if a:\\n            tail.next = a\\n        elif b:\\n            tail.next = b \\n\\n        return head.next\\n\\n"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/merge-two-sorted-lists-leet-code-21/"
                    },
                    {
                        "username": "mqmq",
                        "content": "Why does the operation \\'+\\' not work here? Thank you!"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "No, simply concatenating the lists doesn't maintain the sorted order. If you combine [1,2,3] and [-1,1,2,5] you should get [-1,1,2,2,3,5], not [1,2,3,-1,1,2,5]."
                    },
                    {
                        "username": "djarto",
                        "content": "It should be made clear that the given lists are of same size. I ended up writing an algo that consider lists that are not of equal size, putting strain on the performance of my solution"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Nothing in the problem says that they are the same size, so your code should be able to correctly merge lists of different sizes. It\\'s possible to do that with very little impact on execution time."
                    },
                    {
                        "username": "GeekErra",
                        "content": "CLEAR VIDEO EXPLANATION\\n\\nClick this link to Subscribe to my YouTube Channel -> https://tinyurl.com/4e2nj4vr\\n\\nhttps://youtu.be/xEYAoPszHVM"
                    },
                    {
                        "username": "zkerner1",
                        "content": "On Ruby l1.val throws an error \"undefined method val for nil\". But l1.nil? returns false. Helppppppppppp"
                    }
                ]
            },
            {
                "id": 1760980,
                "content": [
                    {
                        "username": "devinat11",
                        "content": "Most solutions use a dummy variable when solving this problem. However, the problem states to, \"splice the nodes of the first two lists\", which I took to mean that we cannot use a dummy node as our start (can only use the original lists\\' space). Is this problem solvable without using a dummy variable?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Shure, it only makes the code more complicated. But a dummy node is not forbidden."
                    },
                    {
                        "username": "_chitransh_9",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    private:\\n    ListNode* solve(ListNode* list1,ListNode* list2){\\n        if(list1->next==NULL){\\n            list1->next=list2;\\n            return list1;\\n        }\\n        //assigning pointer to list\\n        ListNode* curr1=list1;\\n        ListNode* next1=curr1->next;\\n        ListNode* curr2=list2;\\n        ListNode* next2=curr2->next;\\n        \\n        //merging two list\\n        while(next1!=NULL&&curr2!=NULL){\\n            if((curr2->val>=curr1->val)&&(curr2->val<=next1->val)){\\n                curr1->next=curr2; \\n                next2=curr2->next; \\n                curr2->next=next1;\\n                curr1=curr2; \\n                curr2=next2;\\n            }\\n            else{\\n                curr1=next1; \\n                next1=next1->next;\\n                if (next1==NULL) {\\n                   curr1->next=curr2;\\n                   return list1;\\n                }\\n            }\\n        }\\n        return list1;\\n    } \\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==NULL) return list2;\\n        if(list2==NULL) return list1;\\n\\n        if(list1->val<=list2->val){\\n            return solve(list1,list2);\\n        }\\n        else{\\n            return solve(list2,list1);\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "DenisUstinov",
                        "content": "\\u041F\\u0440\\u0438\\u0434\\u0443\\u043C\\u0430\\u0439\\u0442\\u0435 \\u0443\\u0436\\u0435 \\u043F\\u0441\\u0435\\u0432\\u0434\\u043E\\u043A\\u043E\\u0434 \\u0434\\u043B\\u044F \\u0441\\u0432\\u043E\\u0435\\u0433\\u043E \\u0441\\u0435\\u0440\\u0432\\u0438\\u0441\\u0430!"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "agarrkoch",
                        "content": "Hi. I basically understand how the code below works.\\nBut I don\\'t understand the behavior of the first two variables, \"head\" and \"tail\". \\nWhy is it when you update tail (e.g. tail.next = a) it dynamically updates head?\\nAnd why is it when you truncate tail (e.g. tail = tail.next), this doesn\\'t affect head?\\n\\n\\n\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def mergeTwoLists(self, a, b):\\n\\n        head = ListNode()\\n        tail = head\\n\\n        while a and b:\\n            if a.val <= b.val:\\n                tail.next = a\\n                a = a.next\\n            else:\\n                tail.next = b\\n                b = b.next\\n            tail = tail.next\\n        \\n        if a:\\n            tail.next = a\\n        elif b:\\n            tail.next = b \\n\\n        return head.next\\n\\n"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/merge-two-sorted-lists-leet-code-21/"
                    },
                    {
                        "username": "mqmq",
                        "content": "Why does the operation \\'+\\' not work here? Thank you!"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "No, simply concatenating the lists doesn't maintain the sorted order. If you combine [1,2,3] and [-1,1,2,5] you should get [-1,1,2,2,3,5], not [1,2,3,-1,1,2,5]."
                    },
                    {
                        "username": "djarto",
                        "content": "It should be made clear that the given lists are of same size. I ended up writing an algo that consider lists that are not of equal size, putting strain on the performance of my solution"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Nothing in the problem says that they are the same size, so your code should be able to correctly merge lists of different sizes. It\\'s possible to do that with very little impact on execution time."
                    },
                    {
                        "username": "GeekErra",
                        "content": "CLEAR VIDEO EXPLANATION\\n\\nClick this link to Subscribe to my YouTube Channel -> https://tinyurl.com/4e2nj4vr\\n\\nhttps://youtu.be/xEYAoPszHVM"
                    },
                    {
                        "username": "zkerner1",
                        "content": "On Ruby l1.val throws an error \"undefined method val for nil\". But l1.nil? returns false. Helppppppppppp"
                    }
                ]
            },
            {
                "id": 1759288,
                "content": [
                    {
                        "username": "devinat11",
                        "content": "Most solutions use a dummy variable when solving this problem. However, the problem states to, \"splice the nodes of the first two lists\", which I took to mean that we cannot use a dummy node as our start (can only use the original lists\\' space). Is this problem solvable without using a dummy variable?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Shure, it only makes the code more complicated. But a dummy node is not forbidden."
                    },
                    {
                        "username": "_chitransh_9",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    private:\\n    ListNode* solve(ListNode* list1,ListNode* list2){\\n        if(list1->next==NULL){\\n            list1->next=list2;\\n            return list1;\\n        }\\n        //assigning pointer to list\\n        ListNode* curr1=list1;\\n        ListNode* next1=curr1->next;\\n        ListNode* curr2=list2;\\n        ListNode* next2=curr2->next;\\n        \\n        //merging two list\\n        while(next1!=NULL&&curr2!=NULL){\\n            if((curr2->val>=curr1->val)&&(curr2->val<=next1->val)){\\n                curr1->next=curr2; \\n                next2=curr2->next; \\n                curr2->next=next1;\\n                curr1=curr2; \\n                curr2=next2;\\n            }\\n            else{\\n                curr1=next1; \\n                next1=next1->next;\\n                if (next1==NULL) {\\n                   curr1->next=curr2;\\n                   return list1;\\n                }\\n            }\\n        }\\n        return list1;\\n    } \\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==NULL) return list2;\\n        if(list2==NULL) return list1;\\n\\n        if(list1->val<=list2->val){\\n            return solve(list1,list2);\\n        }\\n        else{\\n            return solve(list2,list1);\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "DenisUstinov",
                        "content": "\\u041F\\u0440\\u0438\\u0434\\u0443\\u043C\\u0430\\u0439\\u0442\\u0435 \\u0443\\u0436\\u0435 \\u043F\\u0441\\u0435\\u0432\\u0434\\u043E\\u043A\\u043E\\u0434 \\u0434\\u043B\\u044F \\u0441\\u0432\\u043E\\u0435\\u0433\\u043E \\u0441\\u0435\\u0440\\u0432\\u0438\\u0441\\u0430!"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "agarrkoch",
                        "content": "Hi. I basically understand how the code below works.\\nBut I don\\'t understand the behavior of the first two variables, \"head\" and \"tail\". \\nWhy is it when you update tail (e.g. tail.next = a) it dynamically updates head?\\nAnd why is it when you truncate tail (e.g. tail = tail.next), this doesn\\'t affect head?\\n\\n\\n\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def mergeTwoLists(self, a, b):\\n\\n        head = ListNode()\\n        tail = head\\n\\n        while a and b:\\n            if a.val <= b.val:\\n                tail.next = a\\n                a = a.next\\n            else:\\n                tail.next = b\\n                b = b.next\\n            tail = tail.next\\n        \\n        if a:\\n            tail.next = a\\n        elif b:\\n            tail.next = b \\n\\n        return head.next\\n\\n"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/merge-two-sorted-lists-leet-code-21/"
                    },
                    {
                        "username": "mqmq",
                        "content": "Why does the operation \\'+\\' not work here? Thank you!"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "No, simply concatenating the lists doesn't maintain the sorted order. If you combine [1,2,3] and [-1,1,2,5] you should get [-1,1,2,2,3,5], not [1,2,3,-1,1,2,5]."
                    },
                    {
                        "username": "djarto",
                        "content": "It should be made clear that the given lists are of same size. I ended up writing an algo that consider lists that are not of equal size, putting strain on the performance of my solution"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Nothing in the problem says that they are the same size, so your code should be able to correctly merge lists of different sizes. It\\'s possible to do that with very little impact on execution time."
                    },
                    {
                        "username": "GeekErra",
                        "content": "CLEAR VIDEO EXPLANATION\\n\\nClick this link to Subscribe to my YouTube Channel -> https://tinyurl.com/4e2nj4vr\\n\\nhttps://youtu.be/xEYAoPszHVM"
                    },
                    {
                        "username": "zkerner1",
                        "content": "On Ruby l1.val throws an error \"undefined method val for nil\". But l1.nil? returns false. Helppppppppppp"
                    }
                ]
            },
            {
                "id": 1757022,
                "content": [
                    {
                        "username": "devinat11",
                        "content": "Most solutions use a dummy variable when solving this problem. However, the problem states to, \"splice the nodes of the first two lists\", which I took to mean that we cannot use a dummy node as our start (can only use the original lists\\' space). Is this problem solvable without using a dummy variable?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Shure, it only makes the code more complicated. But a dummy node is not forbidden."
                    },
                    {
                        "username": "_chitransh_9",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    private:\\n    ListNode* solve(ListNode* list1,ListNode* list2){\\n        if(list1->next==NULL){\\n            list1->next=list2;\\n            return list1;\\n        }\\n        //assigning pointer to list\\n        ListNode* curr1=list1;\\n        ListNode* next1=curr1->next;\\n        ListNode* curr2=list2;\\n        ListNode* next2=curr2->next;\\n        \\n        //merging two list\\n        while(next1!=NULL&&curr2!=NULL){\\n            if((curr2->val>=curr1->val)&&(curr2->val<=next1->val)){\\n                curr1->next=curr2; \\n                next2=curr2->next; \\n                curr2->next=next1;\\n                curr1=curr2; \\n                curr2=next2;\\n            }\\n            else{\\n                curr1=next1; \\n                next1=next1->next;\\n                if (next1==NULL) {\\n                   curr1->next=curr2;\\n                   return list1;\\n                }\\n            }\\n        }\\n        return list1;\\n    } \\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==NULL) return list2;\\n        if(list2==NULL) return list1;\\n\\n        if(list1->val<=list2->val){\\n            return solve(list1,list2);\\n        }\\n        else{\\n            return solve(list2,list1);\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "DenisUstinov",
                        "content": "\\u041F\\u0440\\u0438\\u0434\\u0443\\u043C\\u0430\\u0439\\u0442\\u0435 \\u0443\\u0436\\u0435 \\u043F\\u0441\\u0435\\u0432\\u0434\\u043E\\u043A\\u043E\\u0434 \\u0434\\u043B\\u044F \\u0441\\u0432\\u043E\\u0435\\u0433\\u043E \\u0441\\u0435\\u0440\\u0432\\u0438\\u0441\\u0430!"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "agarrkoch",
                        "content": "Hi. I basically understand how the code below works.\\nBut I don\\'t understand the behavior of the first two variables, \"head\" and \"tail\". \\nWhy is it when you update tail (e.g. tail.next = a) it dynamically updates head?\\nAnd why is it when you truncate tail (e.g. tail = tail.next), this doesn\\'t affect head?\\n\\n\\n\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def mergeTwoLists(self, a, b):\\n\\n        head = ListNode()\\n        tail = head\\n\\n        while a and b:\\n            if a.val <= b.val:\\n                tail.next = a\\n                a = a.next\\n            else:\\n                tail.next = b\\n                b = b.next\\n            tail = tail.next\\n        \\n        if a:\\n            tail.next = a\\n        elif b:\\n            tail.next = b \\n\\n        return head.next\\n\\n"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/merge-two-sorted-lists-leet-code-21/"
                    },
                    {
                        "username": "mqmq",
                        "content": "Why does the operation \\'+\\' not work here? Thank you!"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "No, simply concatenating the lists doesn't maintain the sorted order. If you combine [1,2,3] and [-1,1,2,5] you should get [-1,1,2,2,3,5], not [1,2,3,-1,1,2,5]."
                    },
                    {
                        "username": "djarto",
                        "content": "It should be made clear that the given lists are of same size. I ended up writing an algo that consider lists that are not of equal size, putting strain on the performance of my solution"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Nothing in the problem says that they are the same size, so your code should be able to correctly merge lists of different sizes. It\\'s possible to do that with very little impact on execution time."
                    },
                    {
                        "username": "GeekErra",
                        "content": "CLEAR VIDEO EXPLANATION\\n\\nClick this link to Subscribe to my YouTube Channel -> https://tinyurl.com/4e2nj4vr\\n\\nhttps://youtu.be/xEYAoPszHVM"
                    },
                    {
                        "username": "zkerner1",
                        "content": "On Ruby l1.val throws an error \"undefined method val for nil\". But l1.nil? returns false. Helppppppppppp"
                    }
                ]
            },
            {
                "id": 1756293,
                "content": [
                    {
                        "username": "devinat11",
                        "content": "Most solutions use a dummy variable when solving this problem. However, the problem states to, \"splice the nodes of the first two lists\", which I took to mean that we cannot use a dummy node as our start (can only use the original lists\\' space). Is this problem solvable without using a dummy variable?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Shure, it only makes the code more complicated. But a dummy node is not forbidden."
                    },
                    {
                        "username": "_chitransh_9",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    private:\\n    ListNode* solve(ListNode* list1,ListNode* list2){\\n        if(list1->next==NULL){\\n            list1->next=list2;\\n            return list1;\\n        }\\n        //assigning pointer to list\\n        ListNode* curr1=list1;\\n        ListNode* next1=curr1->next;\\n        ListNode* curr2=list2;\\n        ListNode* next2=curr2->next;\\n        \\n        //merging two list\\n        while(next1!=NULL&&curr2!=NULL){\\n            if((curr2->val>=curr1->val)&&(curr2->val<=next1->val)){\\n                curr1->next=curr2; \\n                next2=curr2->next; \\n                curr2->next=next1;\\n                curr1=curr2; \\n                curr2=next2;\\n            }\\n            else{\\n                curr1=next1; \\n                next1=next1->next;\\n                if (next1==NULL) {\\n                   curr1->next=curr2;\\n                   return list1;\\n                }\\n            }\\n        }\\n        return list1;\\n    } \\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==NULL) return list2;\\n        if(list2==NULL) return list1;\\n\\n        if(list1->val<=list2->val){\\n            return solve(list1,list2);\\n        }\\n        else{\\n            return solve(list2,list1);\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "DenisUstinov",
                        "content": "\\u041F\\u0440\\u0438\\u0434\\u0443\\u043C\\u0430\\u0439\\u0442\\u0435 \\u0443\\u0436\\u0435 \\u043F\\u0441\\u0435\\u0432\\u0434\\u043E\\u043A\\u043E\\u0434 \\u0434\\u043B\\u044F \\u0441\\u0432\\u043E\\u0435\\u0433\\u043E \\u0441\\u0435\\u0440\\u0432\\u0438\\u0441\\u0430!"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "agarrkoch",
                        "content": "Hi. I basically understand how the code below works.\\nBut I don\\'t understand the behavior of the first two variables, \"head\" and \"tail\". \\nWhy is it when you update tail (e.g. tail.next = a) it dynamically updates head?\\nAnd why is it when you truncate tail (e.g. tail = tail.next), this doesn\\'t affect head?\\n\\n\\n\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def mergeTwoLists(self, a, b):\\n\\n        head = ListNode()\\n        tail = head\\n\\n        while a and b:\\n            if a.val <= b.val:\\n                tail.next = a\\n                a = a.next\\n            else:\\n                tail.next = b\\n                b = b.next\\n            tail = tail.next\\n        \\n        if a:\\n            tail.next = a\\n        elif b:\\n            tail.next = b \\n\\n        return head.next\\n\\n"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/merge-two-sorted-lists-leet-code-21/"
                    },
                    {
                        "username": "mqmq",
                        "content": "Why does the operation \\'+\\' not work here? Thank you!"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "No, simply concatenating the lists doesn't maintain the sorted order. If you combine [1,2,3] and [-1,1,2,5] you should get [-1,1,2,2,3,5], not [1,2,3,-1,1,2,5]."
                    },
                    {
                        "username": "djarto",
                        "content": "It should be made clear that the given lists are of same size. I ended up writing an algo that consider lists that are not of equal size, putting strain on the performance of my solution"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Nothing in the problem says that they are the same size, so your code should be able to correctly merge lists of different sizes. It\\'s possible to do that with very little impact on execution time."
                    },
                    {
                        "username": "GeekErra",
                        "content": "CLEAR VIDEO EXPLANATION\\n\\nClick this link to Subscribe to my YouTube Channel -> https://tinyurl.com/4e2nj4vr\\n\\nhttps://youtu.be/xEYAoPszHVM"
                    },
                    {
                        "username": "zkerner1",
                        "content": "On Ruby l1.val throws an error \"undefined method val for nil\". But l1.nil? returns false. Helppppppppppp"
                    }
                ]
            },
            {
                "id": 1755065,
                "content": [
                    {
                        "username": "devinat11",
                        "content": "Most solutions use a dummy variable when solving this problem. However, the problem states to, \"splice the nodes of the first two lists\", which I took to mean that we cannot use a dummy node as our start (can only use the original lists\\' space). Is this problem solvable without using a dummy variable?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Shure, it only makes the code more complicated. But a dummy node is not forbidden."
                    },
                    {
                        "username": "_chitransh_9",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    private:\\n    ListNode* solve(ListNode* list1,ListNode* list2){\\n        if(list1->next==NULL){\\n            list1->next=list2;\\n            return list1;\\n        }\\n        //assigning pointer to list\\n        ListNode* curr1=list1;\\n        ListNode* next1=curr1->next;\\n        ListNode* curr2=list2;\\n        ListNode* next2=curr2->next;\\n        \\n        //merging two list\\n        while(next1!=NULL&&curr2!=NULL){\\n            if((curr2->val>=curr1->val)&&(curr2->val<=next1->val)){\\n                curr1->next=curr2; \\n                next2=curr2->next; \\n                curr2->next=next1;\\n                curr1=curr2; \\n                curr2=next2;\\n            }\\n            else{\\n                curr1=next1; \\n                next1=next1->next;\\n                if (next1==NULL) {\\n                   curr1->next=curr2;\\n                   return list1;\\n                }\\n            }\\n        }\\n        return list1;\\n    } \\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==NULL) return list2;\\n        if(list2==NULL) return list1;\\n\\n        if(list1->val<=list2->val){\\n            return solve(list1,list2);\\n        }\\n        else{\\n            return solve(list2,list1);\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "DenisUstinov",
                        "content": "\\u041F\\u0440\\u0438\\u0434\\u0443\\u043C\\u0430\\u0439\\u0442\\u0435 \\u0443\\u0436\\u0435 \\u043F\\u0441\\u0435\\u0432\\u0434\\u043E\\u043A\\u043E\\u0434 \\u0434\\u043B\\u044F \\u0441\\u0432\\u043E\\u0435\\u0433\\u043E \\u0441\\u0435\\u0440\\u0432\\u0438\\u0441\\u0430!"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "agarrkoch",
                        "content": "Hi. I basically understand how the code below works.\\nBut I don\\'t understand the behavior of the first two variables, \"head\" and \"tail\". \\nWhy is it when you update tail (e.g. tail.next = a) it dynamically updates head?\\nAnd why is it when you truncate tail (e.g. tail = tail.next), this doesn\\'t affect head?\\n\\n\\n\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def mergeTwoLists(self, a, b):\\n\\n        head = ListNode()\\n        tail = head\\n\\n        while a and b:\\n            if a.val <= b.val:\\n                tail.next = a\\n                a = a.next\\n            else:\\n                tail.next = b\\n                b = b.next\\n            tail = tail.next\\n        \\n        if a:\\n            tail.next = a\\n        elif b:\\n            tail.next = b \\n\\n        return head.next\\n\\n"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/merge-two-sorted-lists-leet-code-21/"
                    },
                    {
                        "username": "mqmq",
                        "content": "Why does the operation \\'+\\' not work here? Thank you!"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "No, simply concatenating the lists doesn't maintain the sorted order. If you combine [1,2,3] and [-1,1,2,5] you should get [-1,1,2,2,3,5], not [1,2,3,-1,1,2,5]."
                    },
                    {
                        "username": "djarto",
                        "content": "It should be made clear that the given lists are of same size. I ended up writing an algo that consider lists that are not of equal size, putting strain on the performance of my solution"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Nothing in the problem says that they are the same size, so your code should be able to correctly merge lists of different sizes. It\\'s possible to do that with very little impact on execution time."
                    },
                    {
                        "username": "GeekErra",
                        "content": "CLEAR VIDEO EXPLANATION\\n\\nClick this link to Subscribe to my YouTube Channel -> https://tinyurl.com/4e2nj4vr\\n\\nhttps://youtu.be/xEYAoPszHVM"
                    },
                    {
                        "username": "zkerner1",
                        "content": "On Ruby l1.val throws an error \"undefined method val for nil\". But l1.nil? returns false. Helppppppppppp"
                    }
                ]
            },
            {
                "id": 1755056,
                "content": [
                    {
                        "username": "devinat11",
                        "content": "Most solutions use a dummy variable when solving this problem. However, the problem states to, \"splice the nodes of the first two lists\", which I took to mean that we cannot use a dummy node as our start (can only use the original lists\\' space). Is this problem solvable without using a dummy variable?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Shure, it only makes the code more complicated. But a dummy node is not forbidden."
                    },
                    {
                        "username": "_chitransh_9",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    private:\\n    ListNode* solve(ListNode* list1,ListNode* list2){\\n        if(list1->next==NULL){\\n            list1->next=list2;\\n            return list1;\\n        }\\n        //assigning pointer to list\\n        ListNode* curr1=list1;\\n        ListNode* next1=curr1->next;\\n        ListNode* curr2=list2;\\n        ListNode* next2=curr2->next;\\n        \\n        //merging two list\\n        while(next1!=NULL&&curr2!=NULL){\\n            if((curr2->val>=curr1->val)&&(curr2->val<=next1->val)){\\n                curr1->next=curr2; \\n                next2=curr2->next; \\n                curr2->next=next1;\\n                curr1=curr2; \\n                curr2=next2;\\n            }\\n            else{\\n                curr1=next1; \\n                next1=next1->next;\\n                if (next1==NULL) {\\n                   curr1->next=curr2;\\n                   return list1;\\n                }\\n            }\\n        }\\n        return list1;\\n    } \\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==NULL) return list2;\\n        if(list2==NULL) return list1;\\n\\n        if(list1->val<=list2->val){\\n            return solve(list1,list2);\\n        }\\n        else{\\n            return solve(list2,list1);\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "DenisUstinov",
                        "content": "\\u041F\\u0440\\u0438\\u0434\\u0443\\u043C\\u0430\\u0439\\u0442\\u0435 \\u0443\\u0436\\u0435 \\u043F\\u0441\\u0435\\u0432\\u0434\\u043E\\u043A\\u043E\\u0434 \\u0434\\u043B\\u044F \\u0441\\u0432\\u043E\\u0435\\u0433\\u043E \\u0441\\u0435\\u0440\\u0432\\u0438\\u0441\\u0430!"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "agarrkoch",
                        "content": "Hi. I basically understand how the code below works.\\nBut I don\\'t understand the behavior of the first two variables, \"head\" and \"tail\". \\nWhy is it when you update tail (e.g. tail.next = a) it dynamically updates head?\\nAnd why is it when you truncate tail (e.g. tail = tail.next), this doesn\\'t affect head?\\n\\n\\n\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def mergeTwoLists(self, a, b):\\n\\n        head = ListNode()\\n        tail = head\\n\\n        while a and b:\\n            if a.val <= b.val:\\n                tail.next = a\\n                a = a.next\\n            else:\\n                tail.next = b\\n                b = b.next\\n            tail = tail.next\\n        \\n        if a:\\n            tail.next = a\\n        elif b:\\n            tail.next = b \\n\\n        return head.next\\n\\n"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/merge-two-sorted-lists-leet-code-21/"
                    },
                    {
                        "username": "mqmq",
                        "content": "Why does the operation \\'+\\' not work here? Thank you!"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "No, simply concatenating the lists doesn't maintain the sorted order. If you combine [1,2,3] and [-1,1,2,5] you should get [-1,1,2,2,3,5], not [1,2,3,-1,1,2,5]."
                    },
                    {
                        "username": "djarto",
                        "content": "It should be made clear that the given lists are of same size. I ended up writing an algo that consider lists that are not of equal size, putting strain on the performance of my solution"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Nothing in the problem says that they are the same size, so your code should be able to correctly merge lists of different sizes. It\\'s possible to do that with very little impact on execution time."
                    },
                    {
                        "username": "GeekErra",
                        "content": "CLEAR VIDEO EXPLANATION\\n\\nClick this link to Subscribe to my YouTube Channel -> https://tinyurl.com/4e2nj4vr\\n\\nhttps://youtu.be/xEYAoPszHVM"
                    },
                    {
                        "username": "zkerner1",
                        "content": "On Ruby l1.val throws an error \"undefined method val for nil\". But l1.nil? returns false. Helppppppppppp"
                    }
                ]
            },
            {
                "id": 1753281,
                "content": [
                    {
                        "username": "devinat11",
                        "content": "Most solutions use a dummy variable when solving this problem. However, the problem states to, \"splice the nodes of the first two lists\", which I took to mean that we cannot use a dummy node as our start (can only use the original lists\\' space). Is this problem solvable without using a dummy variable?"
                    },
                    {
                        "username": "Tom_Dev",
                        "content": "Shure, it only makes the code more complicated. But a dummy node is not forbidden."
                    },
                    {
                        "username": "_chitransh_9",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    private:\\n    ListNode* solve(ListNode* list1,ListNode* list2){\\n        if(list1->next==NULL){\\n            list1->next=list2;\\n            return list1;\\n        }\\n        //assigning pointer to list\\n        ListNode* curr1=list1;\\n        ListNode* next1=curr1->next;\\n        ListNode* curr2=list2;\\n        ListNode* next2=curr2->next;\\n        \\n        //merging two list\\n        while(next1!=NULL&&curr2!=NULL){\\n            if((curr2->val>=curr1->val)&&(curr2->val<=next1->val)){\\n                curr1->next=curr2; \\n                next2=curr2->next; \\n                curr2->next=next1;\\n                curr1=curr2; \\n                curr2=next2;\\n            }\\n            else{\\n                curr1=next1; \\n                next1=next1->next;\\n                if (next1==NULL) {\\n                   curr1->next=curr2;\\n                   return list1;\\n                }\\n            }\\n        }\\n        return list1;\\n    } \\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==NULL) return list2;\\n        if(list2==NULL) return list1;\\n\\n        if(list1->val<=list2->val){\\n            return solve(list1,list2);\\n        }\\n        else{\\n            return solve(list2,list1);\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "DenisUstinov",
                        "content": "\\u041F\\u0440\\u0438\\u0434\\u0443\\u043C\\u0430\\u0439\\u0442\\u0435 \\u0443\\u0436\\u0435 \\u043F\\u0441\\u0435\\u0432\\u0434\\u043E\\u043A\\u043E\\u0434 \\u0434\\u043B\\u044F \\u0441\\u0432\\u043E\\u0435\\u0433\\u043E \\u0441\\u0435\\u0440\\u0432\\u0438\\u0441\\u0430!"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "agarrkoch",
                        "content": "Hi. I basically understand how the code below works.\\nBut I don\\'t understand the behavior of the first two variables, \"head\" and \"tail\". \\nWhy is it when you update tail (e.g. tail.next = a) it dynamically updates head?\\nAnd why is it when you truncate tail (e.g. tail = tail.next), this doesn\\'t affect head?\\n\\n\\n\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def mergeTwoLists(self, a, b):\\n\\n        head = ListNode()\\n        tail = head\\n\\n        while a and b:\\n            if a.val <= b.val:\\n                tail.next = a\\n                a = a.next\\n            else:\\n                tail.next = b\\n                b = b.next\\n            tail = tail.next\\n        \\n        if a:\\n            tail.next = a\\n        elif b:\\n            tail.next = b \\n\\n        return head.next\\n\\n"
                    },
                    {
                        "username": "user7780HP",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\nhttps://siteinvokers.com/merge-two-sorted-lists-leet-code-21/"
                    },
                    {
                        "username": "mqmq",
                        "content": "Why does the operation \\'+\\' not work here? Thank you!"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "No, simply concatenating the lists doesn't maintain the sorted order. If you combine [1,2,3] and [-1,1,2,5] you should get [-1,1,2,2,3,5], not [1,2,3,-1,1,2,5]."
                    },
                    {
                        "username": "djarto",
                        "content": "It should be made clear that the given lists are of same size. I ended up writing an algo that consider lists that are not of equal size, putting strain on the performance of my solution"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Nothing in the problem says that they are the same size, so your code should be able to correctly merge lists of different sizes. It\\'s possible to do that with very little impact on execution time."
                    },
                    {
                        "username": "GeekErra",
                        "content": "CLEAR VIDEO EXPLANATION\\n\\nClick this link to Subscribe to my YouTube Channel -> https://tinyurl.com/4e2nj4vr\\n\\nhttps://youtu.be/xEYAoPszHVM"
                    },
                    {
                        "username": "zkerner1",
                        "content": "On Ruby l1.val throws an error \"undefined method val for nil\". But l1.nil? returns false. Helppppppppppp"
                    }
                ]
            },
            {
                "id": 1750753,
                "content": [
                    {
                        "username": "alptekinI",
                        "content": "Hi.\\nI have a kind of silly question.\\nThe head of a linked list is the first element...\\nSo, when it is said that, given is the head of 2 linked list, [1,2,4], It really doesnt make sense to me...\\nDo they mean that, the keys of the linked list 1 is 1, 2 and 4? Such that, the first element, ie head has a key 1 and the successive element has a key 2 and the tail element has a key 4?\\nThanks"
                    },
                    {
                        "username": "hoangtheviet",
                        "content": "can someone tell me what is the pointer \"next\" use for when defining the struct, i think it is used to save the next address of a node, is that right?"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Right, the \\'next\\' value is a reference to the next node in the list, or nil for the last node."
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand.\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/3024782/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "zily",
                        "content": "Is it possible to differ list1 = [], list2 = [0] for Java? Whatever empty ListNode includes default val which is 0"
                    },
                    {
                        "username": "sushant14",
                        "content": "when I have write this code in my editior this code work but why  this code is not working.\nplease give me suggestion to correct this code.\n\n```\nclass Solution:\n    def mergeTwoLists(self, list1,list2):\n        for i in list2:\n            list1.append(i)\n        list1.sort()\n        return list1\n```"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "I am trying to run this code using C:\\nstruct ListNode * first=NULL;\\n    struct ListNode * last=NULL;\\n    struct ListNode * p=list1;\\n    struct ListNode * q=list2;\\n    if(p->val < q->val){\\n        first=last=p;\\n        p=p->next;\\n        last->next=NULL;\\n    }else{\\n        first=last=q;\\n        q=q->next;\\n        last->next=NULL;\\n    }\\n    while(p!=NULL && q!=NULL)\\n    {\\n        if(p->val < q->val)\\n        {\\n            last->next=p;\\n            last=p;\\n            p=p->next;\\n            last->next=NULL;\\n        }\\n        else \\n        {\\n            last->next=q;\\n            last=q;\\n            q=q->next;\\n            last->next=NULL;\\n        }\\n    }\\n    if(p!=NULL)\\n    {\\n        last->next=p;\\n    }else\\n    {\\n        last->next=q;\\n    }\\n    return first;\\n\\nBut i am getting an error in first IF condition saying \" Runtime Error:member access withing null pointer of type \\'struct ListNode\\'.\\n\\nHow to resolve this?"
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "Basically the compiler here is telling you that `*p` could be a `NULL` pointer, which would result in an error that you are trying to access an attribute of a `NULL` pointer on the first if statement. You don\\'t check for a `NULL` pointer in base cases, which leads to runtime errors of trying to access `NULL->val` in test case 2 and 3. Dont forget your base cases!"
                    },
                    {
                        "username": "jaiskaran008",
                        "content": "This question needs a very good understanding of pointers."
                    },
                    {
                        "username": "arnyc",
                        "content": "The question asks us to \"Return the *head of* the merged linked list\" But the output shown in the example is the entire merged list. Is this how people use the term \"head\" when it comes to link lists or is the question badly worded? I am not complaining. I am a beginner and want to know how these terms are used in practice."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The function returns a single node, but in a linked list each node in the list points to the next one, so returning the head is the same as returning the entire list."
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "\"Head\" refers to the start of the linked list. For this problem, we only return 1 node, but this node has next pointers to other nodes which will eventually expand into the full list of numbers. For Leetcode\\'s perspective, to be technically accurate they could say return ListNode(1) for test case 1, but this makes it hard for people to understand how the list is fully formed with all the numbers, so it is expanded into a traditional list for simplistic purposes. Also, it would be a pain to list the return of test case 1 as head.val = 1, head.next.val = 1, head.next.next.val = 2, and so on. Hope this helps!"
                    },
                    {
                        "username": "ec1912",
                        "content": " `class Solution {   \\npublic: \\n\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1 == NULL){\\n            return list2;\\n        }\\n        if(list2 == NULL){\\n            return list1;\\n        }\\n\\n        \\n        if(list1-> val <= list2->val){\\n            list1->next = mergeTwoLists(list1->next, list2);\\n            return list1;\\n        }\\n        else {\\n          \\n            list2->next = mergeTwoLists(list2->next, list1);\\n            return list2;\\n        }\\n    }\\n};`"
                    },
                    {
                        "username": "imsej_al",
                        "content": "https://github.com/imsejal/Leetcode/tree/main\\nHope it helps ..\\nPlease upvote if it helps :)\\nIf you Like the repository don\\'t fogot to star & fork the repository"
                    }
                ]
            },
            {
                "id": 1750083,
                "content": [
                    {
                        "username": "alptekinI",
                        "content": "Hi.\\nI have a kind of silly question.\\nThe head of a linked list is the first element...\\nSo, when it is said that, given is the head of 2 linked list, [1,2,4], It really doesnt make sense to me...\\nDo they mean that, the keys of the linked list 1 is 1, 2 and 4? Such that, the first element, ie head has a key 1 and the successive element has a key 2 and the tail element has a key 4?\\nThanks"
                    },
                    {
                        "username": "hoangtheviet",
                        "content": "can someone tell me what is the pointer \"next\" use for when defining the struct, i think it is used to save the next address of a node, is that right?"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Right, the \\'next\\' value is a reference to the next node in the list, or nil for the last node."
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand.\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/3024782/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "zily",
                        "content": "Is it possible to differ list1 = [], list2 = [0] for Java? Whatever empty ListNode includes default val which is 0"
                    },
                    {
                        "username": "sushant14",
                        "content": "when I have write this code in my editior this code work but why  this code is not working.\nplease give me suggestion to correct this code.\n\n```\nclass Solution:\n    def mergeTwoLists(self, list1,list2):\n        for i in list2:\n            list1.append(i)\n        list1.sort()\n        return list1\n```"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "I am trying to run this code using C:\\nstruct ListNode * first=NULL;\\n    struct ListNode * last=NULL;\\n    struct ListNode * p=list1;\\n    struct ListNode * q=list2;\\n    if(p->val < q->val){\\n        first=last=p;\\n        p=p->next;\\n        last->next=NULL;\\n    }else{\\n        first=last=q;\\n        q=q->next;\\n        last->next=NULL;\\n    }\\n    while(p!=NULL && q!=NULL)\\n    {\\n        if(p->val < q->val)\\n        {\\n            last->next=p;\\n            last=p;\\n            p=p->next;\\n            last->next=NULL;\\n        }\\n        else \\n        {\\n            last->next=q;\\n            last=q;\\n            q=q->next;\\n            last->next=NULL;\\n        }\\n    }\\n    if(p!=NULL)\\n    {\\n        last->next=p;\\n    }else\\n    {\\n        last->next=q;\\n    }\\n    return first;\\n\\nBut i am getting an error in first IF condition saying \" Runtime Error:member access withing null pointer of type \\'struct ListNode\\'.\\n\\nHow to resolve this?"
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "Basically the compiler here is telling you that `*p` could be a `NULL` pointer, which would result in an error that you are trying to access an attribute of a `NULL` pointer on the first if statement. You don\\'t check for a `NULL` pointer in base cases, which leads to runtime errors of trying to access `NULL->val` in test case 2 and 3. Dont forget your base cases!"
                    },
                    {
                        "username": "jaiskaran008",
                        "content": "This question needs a very good understanding of pointers."
                    },
                    {
                        "username": "arnyc",
                        "content": "The question asks us to \"Return the *head of* the merged linked list\" But the output shown in the example is the entire merged list. Is this how people use the term \"head\" when it comes to link lists or is the question badly worded? I am not complaining. I am a beginner and want to know how these terms are used in practice."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The function returns a single node, but in a linked list each node in the list points to the next one, so returning the head is the same as returning the entire list."
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "\"Head\" refers to the start of the linked list. For this problem, we only return 1 node, but this node has next pointers to other nodes which will eventually expand into the full list of numbers. For Leetcode\\'s perspective, to be technically accurate they could say return ListNode(1) for test case 1, but this makes it hard for people to understand how the list is fully formed with all the numbers, so it is expanded into a traditional list for simplistic purposes. Also, it would be a pain to list the return of test case 1 as head.val = 1, head.next.val = 1, head.next.next.val = 2, and so on. Hope this helps!"
                    },
                    {
                        "username": "ec1912",
                        "content": " `class Solution {   \\npublic: \\n\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1 == NULL){\\n            return list2;\\n        }\\n        if(list2 == NULL){\\n            return list1;\\n        }\\n\\n        \\n        if(list1-> val <= list2->val){\\n            list1->next = mergeTwoLists(list1->next, list2);\\n            return list1;\\n        }\\n        else {\\n          \\n            list2->next = mergeTwoLists(list2->next, list1);\\n            return list2;\\n        }\\n    }\\n};`"
                    },
                    {
                        "username": "imsej_al",
                        "content": "https://github.com/imsejal/Leetcode/tree/main\\nHope it helps ..\\nPlease upvote if it helps :)\\nIf you Like the repository don\\'t fogot to star & fork the repository"
                    }
                ]
            },
            {
                "id": 1749790,
                "content": [
                    {
                        "username": "alptekinI",
                        "content": "Hi.\\nI have a kind of silly question.\\nThe head of a linked list is the first element...\\nSo, when it is said that, given is the head of 2 linked list, [1,2,4], It really doesnt make sense to me...\\nDo they mean that, the keys of the linked list 1 is 1, 2 and 4? Such that, the first element, ie head has a key 1 and the successive element has a key 2 and the tail element has a key 4?\\nThanks"
                    },
                    {
                        "username": "hoangtheviet",
                        "content": "can someone tell me what is the pointer \"next\" use for when defining the struct, i think it is used to save the next address of a node, is that right?"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Right, the \\'next\\' value is a reference to the next node in the list, or nil for the last node."
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand.\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/3024782/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "zily",
                        "content": "Is it possible to differ list1 = [], list2 = [0] for Java? Whatever empty ListNode includes default val which is 0"
                    },
                    {
                        "username": "sushant14",
                        "content": "when I have write this code in my editior this code work but why  this code is not working.\nplease give me suggestion to correct this code.\n\n```\nclass Solution:\n    def mergeTwoLists(self, list1,list2):\n        for i in list2:\n            list1.append(i)\n        list1.sort()\n        return list1\n```"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "I am trying to run this code using C:\\nstruct ListNode * first=NULL;\\n    struct ListNode * last=NULL;\\n    struct ListNode * p=list1;\\n    struct ListNode * q=list2;\\n    if(p->val < q->val){\\n        first=last=p;\\n        p=p->next;\\n        last->next=NULL;\\n    }else{\\n        first=last=q;\\n        q=q->next;\\n        last->next=NULL;\\n    }\\n    while(p!=NULL && q!=NULL)\\n    {\\n        if(p->val < q->val)\\n        {\\n            last->next=p;\\n            last=p;\\n            p=p->next;\\n            last->next=NULL;\\n        }\\n        else \\n        {\\n            last->next=q;\\n            last=q;\\n            q=q->next;\\n            last->next=NULL;\\n        }\\n    }\\n    if(p!=NULL)\\n    {\\n        last->next=p;\\n    }else\\n    {\\n        last->next=q;\\n    }\\n    return first;\\n\\nBut i am getting an error in first IF condition saying \" Runtime Error:member access withing null pointer of type \\'struct ListNode\\'.\\n\\nHow to resolve this?"
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "Basically the compiler here is telling you that `*p` could be a `NULL` pointer, which would result in an error that you are trying to access an attribute of a `NULL` pointer on the first if statement. You don\\'t check for a `NULL` pointer in base cases, which leads to runtime errors of trying to access `NULL->val` in test case 2 and 3. Dont forget your base cases!"
                    },
                    {
                        "username": "jaiskaran008",
                        "content": "This question needs a very good understanding of pointers."
                    },
                    {
                        "username": "arnyc",
                        "content": "The question asks us to \"Return the *head of* the merged linked list\" But the output shown in the example is the entire merged list. Is this how people use the term \"head\" when it comes to link lists or is the question badly worded? I am not complaining. I am a beginner and want to know how these terms are used in practice."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The function returns a single node, but in a linked list each node in the list points to the next one, so returning the head is the same as returning the entire list."
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "\"Head\" refers to the start of the linked list. For this problem, we only return 1 node, but this node has next pointers to other nodes which will eventually expand into the full list of numbers. For Leetcode\\'s perspective, to be technically accurate they could say return ListNode(1) for test case 1, but this makes it hard for people to understand how the list is fully formed with all the numbers, so it is expanded into a traditional list for simplistic purposes. Also, it would be a pain to list the return of test case 1 as head.val = 1, head.next.val = 1, head.next.next.val = 2, and so on. Hope this helps!"
                    },
                    {
                        "username": "ec1912",
                        "content": " `class Solution {   \\npublic: \\n\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1 == NULL){\\n            return list2;\\n        }\\n        if(list2 == NULL){\\n            return list1;\\n        }\\n\\n        \\n        if(list1-> val <= list2->val){\\n            list1->next = mergeTwoLists(list1->next, list2);\\n            return list1;\\n        }\\n        else {\\n          \\n            list2->next = mergeTwoLists(list2->next, list1);\\n            return list2;\\n        }\\n    }\\n};`"
                    },
                    {
                        "username": "imsej_al",
                        "content": "https://github.com/imsejal/Leetcode/tree/main\\nHope it helps ..\\nPlease upvote if it helps :)\\nIf you Like the repository don\\'t fogot to star & fork the repository"
                    }
                ]
            },
            {
                "id": 1748840,
                "content": [
                    {
                        "username": "alptekinI",
                        "content": "Hi.\\nI have a kind of silly question.\\nThe head of a linked list is the first element...\\nSo, when it is said that, given is the head of 2 linked list, [1,2,4], It really doesnt make sense to me...\\nDo they mean that, the keys of the linked list 1 is 1, 2 and 4? Such that, the first element, ie head has a key 1 and the successive element has a key 2 and the tail element has a key 4?\\nThanks"
                    },
                    {
                        "username": "hoangtheviet",
                        "content": "can someone tell me what is the pointer \"next\" use for when defining the struct, i think it is used to save the next address of a node, is that right?"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Right, the \\'next\\' value is a reference to the next node in the list, or nil for the last node."
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand.\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/3024782/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "zily",
                        "content": "Is it possible to differ list1 = [], list2 = [0] for Java? Whatever empty ListNode includes default val which is 0"
                    },
                    {
                        "username": "sushant14",
                        "content": "when I have write this code in my editior this code work but why  this code is not working.\nplease give me suggestion to correct this code.\n\n```\nclass Solution:\n    def mergeTwoLists(self, list1,list2):\n        for i in list2:\n            list1.append(i)\n        list1.sort()\n        return list1\n```"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "I am trying to run this code using C:\\nstruct ListNode * first=NULL;\\n    struct ListNode * last=NULL;\\n    struct ListNode * p=list1;\\n    struct ListNode * q=list2;\\n    if(p->val < q->val){\\n        first=last=p;\\n        p=p->next;\\n        last->next=NULL;\\n    }else{\\n        first=last=q;\\n        q=q->next;\\n        last->next=NULL;\\n    }\\n    while(p!=NULL && q!=NULL)\\n    {\\n        if(p->val < q->val)\\n        {\\n            last->next=p;\\n            last=p;\\n            p=p->next;\\n            last->next=NULL;\\n        }\\n        else \\n        {\\n            last->next=q;\\n            last=q;\\n            q=q->next;\\n            last->next=NULL;\\n        }\\n    }\\n    if(p!=NULL)\\n    {\\n        last->next=p;\\n    }else\\n    {\\n        last->next=q;\\n    }\\n    return first;\\n\\nBut i am getting an error in first IF condition saying \" Runtime Error:member access withing null pointer of type \\'struct ListNode\\'.\\n\\nHow to resolve this?"
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "Basically the compiler here is telling you that `*p` could be a `NULL` pointer, which would result in an error that you are trying to access an attribute of a `NULL` pointer on the first if statement. You don\\'t check for a `NULL` pointer in base cases, which leads to runtime errors of trying to access `NULL->val` in test case 2 and 3. Dont forget your base cases!"
                    },
                    {
                        "username": "jaiskaran008",
                        "content": "This question needs a very good understanding of pointers."
                    },
                    {
                        "username": "arnyc",
                        "content": "The question asks us to \"Return the *head of* the merged linked list\" But the output shown in the example is the entire merged list. Is this how people use the term \"head\" when it comes to link lists or is the question badly worded? I am not complaining. I am a beginner and want to know how these terms are used in practice."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The function returns a single node, but in a linked list each node in the list points to the next one, so returning the head is the same as returning the entire list."
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "\"Head\" refers to the start of the linked list. For this problem, we only return 1 node, but this node has next pointers to other nodes which will eventually expand into the full list of numbers. For Leetcode\\'s perspective, to be technically accurate they could say return ListNode(1) for test case 1, but this makes it hard for people to understand how the list is fully formed with all the numbers, so it is expanded into a traditional list for simplistic purposes. Also, it would be a pain to list the return of test case 1 as head.val = 1, head.next.val = 1, head.next.next.val = 2, and so on. Hope this helps!"
                    },
                    {
                        "username": "ec1912",
                        "content": " `class Solution {   \\npublic: \\n\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1 == NULL){\\n            return list2;\\n        }\\n        if(list2 == NULL){\\n            return list1;\\n        }\\n\\n        \\n        if(list1-> val <= list2->val){\\n            list1->next = mergeTwoLists(list1->next, list2);\\n            return list1;\\n        }\\n        else {\\n          \\n            list2->next = mergeTwoLists(list2->next, list1);\\n            return list2;\\n        }\\n    }\\n};`"
                    },
                    {
                        "username": "imsej_al",
                        "content": "https://github.com/imsejal/Leetcode/tree/main\\nHope it helps ..\\nPlease upvote if it helps :)\\nIf you Like the repository don\\'t fogot to star & fork the repository"
                    }
                ]
            },
            {
                "id": 1748772,
                "content": [
                    {
                        "username": "alptekinI",
                        "content": "Hi.\\nI have a kind of silly question.\\nThe head of a linked list is the first element...\\nSo, when it is said that, given is the head of 2 linked list, [1,2,4], It really doesnt make sense to me...\\nDo they mean that, the keys of the linked list 1 is 1, 2 and 4? Such that, the first element, ie head has a key 1 and the successive element has a key 2 and the tail element has a key 4?\\nThanks"
                    },
                    {
                        "username": "hoangtheviet",
                        "content": "can someone tell me what is the pointer \"next\" use for when defining the struct, i think it is used to save the next address of a node, is that right?"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Right, the \\'next\\' value is a reference to the next node in the list, or nil for the last node."
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand.\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/3024782/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "zily",
                        "content": "Is it possible to differ list1 = [], list2 = [0] for Java? Whatever empty ListNode includes default val which is 0"
                    },
                    {
                        "username": "sushant14",
                        "content": "when I have write this code in my editior this code work but why  this code is not working.\nplease give me suggestion to correct this code.\n\n```\nclass Solution:\n    def mergeTwoLists(self, list1,list2):\n        for i in list2:\n            list1.append(i)\n        list1.sort()\n        return list1\n```"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "I am trying to run this code using C:\\nstruct ListNode * first=NULL;\\n    struct ListNode * last=NULL;\\n    struct ListNode * p=list1;\\n    struct ListNode * q=list2;\\n    if(p->val < q->val){\\n        first=last=p;\\n        p=p->next;\\n        last->next=NULL;\\n    }else{\\n        first=last=q;\\n        q=q->next;\\n        last->next=NULL;\\n    }\\n    while(p!=NULL && q!=NULL)\\n    {\\n        if(p->val < q->val)\\n        {\\n            last->next=p;\\n            last=p;\\n            p=p->next;\\n            last->next=NULL;\\n        }\\n        else \\n        {\\n            last->next=q;\\n            last=q;\\n            q=q->next;\\n            last->next=NULL;\\n        }\\n    }\\n    if(p!=NULL)\\n    {\\n        last->next=p;\\n    }else\\n    {\\n        last->next=q;\\n    }\\n    return first;\\n\\nBut i am getting an error in first IF condition saying \" Runtime Error:member access withing null pointer of type \\'struct ListNode\\'.\\n\\nHow to resolve this?"
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "Basically the compiler here is telling you that `*p` could be a `NULL` pointer, which would result in an error that you are trying to access an attribute of a `NULL` pointer on the first if statement. You don\\'t check for a `NULL` pointer in base cases, which leads to runtime errors of trying to access `NULL->val` in test case 2 and 3. Dont forget your base cases!"
                    },
                    {
                        "username": "jaiskaran008",
                        "content": "This question needs a very good understanding of pointers."
                    },
                    {
                        "username": "arnyc",
                        "content": "The question asks us to \"Return the *head of* the merged linked list\" But the output shown in the example is the entire merged list. Is this how people use the term \"head\" when it comes to link lists or is the question badly worded? I am not complaining. I am a beginner and want to know how these terms are used in practice."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The function returns a single node, but in a linked list each node in the list points to the next one, so returning the head is the same as returning the entire list."
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "\"Head\" refers to the start of the linked list. For this problem, we only return 1 node, but this node has next pointers to other nodes which will eventually expand into the full list of numbers. For Leetcode\\'s perspective, to be technically accurate they could say return ListNode(1) for test case 1, but this makes it hard for people to understand how the list is fully formed with all the numbers, so it is expanded into a traditional list for simplistic purposes. Also, it would be a pain to list the return of test case 1 as head.val = 1, head.next.val = 1, head.next.next.val = 2, and so on. Hope this helps!"
                    },
                    {
                        "username": "ec1912",
                        "content": " `class Solution {   \\npublic: \\n\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1 == NULL){\\n            return list2;\\n        }\\n        if(list2 == NULL){\\n            return list1;\\n        }\\n\\n        \\n        if(list1-> val <= list2->val){\\n            list1->next = mergeTwoLists(list1->next, list2);\\n            return list1;\\n        }\\n        else {\\n          \\n            list2->next = mergeTwoLists(list2->next, list1);\\n            return list2;\\n        }\\n    }\\n};`"
                    },
                    {
                        "username": "imsej_al",
                        "content": "https://github.com/imsejal/Leetcode/tree/main\\nHope it helps ..\\nPlease upvote if it helps :)\\nIf you Like the repository don\\'t fogot to star & fork the repository"
                    }
                ]
            },
            {
                "id": 1746083,
                "content": [
                    {
                        "username": "alptekinI",
                        "content": "Hi.\\nI have a kind of silly question.\\nThe head of a linked list is the first element...\\nSo, when it is said that, given is the head of 2 linked list, [1,2,4], It really doesnt make sense to me...\\nDo they mean that, the keys of the linked list 1 is 1, 2 and 4? Such that, the first element, ie head has a key 1 and the successive element has a key 2 and the tail element has a key 4?\\nThanks"
                    },
                    {
                        "username": "hoangtheviet",
                        "content": "can someone tell me what is the pointer \"next\" use for when defining the struct, i think it is used to save the next address of a node, is that right?"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Right, the \\'next\\' value is a reference to the next node in the list, or nil for the last node."
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand.\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/3024782/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "zily",
                        "content": "Is it possible to differ list1 = [], list2 = [0] for Java? Whatever empty ListNode includes default val which is 0"
                    },
                    {
                        "username": "sushant14",
                        "content": "when I have write this code in my editior this code work but why  this code is not working.\nplease give me suggestion to correct this code.\n\n```\nclass Solution:\n    def mergeTwoLists(self, list1,list2):\n        for i in list2:\n            list1.append(i)\n        list1.sort()\n        return list1\n```"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "I am trying to run this code using C:\\nstruct ListNode * first=NULL;\\n    struct ListNode * last=NULL;\\n    struct ListNode * p=list1;\\n    struct ListNode * q=list2;\\n    if(p->val < q->val){\\n        first=last=p;\\n        p=p->next;\\n        last->next=NULL;\\n    }else{\\n        first=last=q;\\n        q=q->next;\\n        last->next=NULL;\\n    }\\n    while(p!=NULL && q!=NULL)\\n    {\\n        if(p->val < q->val)\\n        {\\n            last->next=p;\\n            last=p;\\n            p=p->next;\\n            last->next=NULL;\\n        }\\n        else \\n        {\\n            last->next=q;\\n            last=q;\\n            q=q->next;\\n            last->next=NULL;\\n        }\\n    }\\n    if(p!=NULL)\\n    {\\n        last->next=p;\\n    }else\\n    {\\n        last->next=q;\\n    }\\n    return first;\\n\\nBut i am getting an error in first IF condition saying \" Runtime Error:member access withing null pointer of type \\'struct ListNode\\'.\\n\\nHow to resolve this?"
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "Basically the compiler here is telling you that `*p` could be a `NULL` pointer, which would result in an error that you are trying to access an attribute of a `NULL` pointer on the first if statement. You don\\'t check for a `NULL` pointer in base cases, which leads to runtime errors of trying to access `NULL->val` in test case 2 and 3. Dont forget your base cases!"
                    },
                    {
                        "username": "jaiskaran008",
                        "content": "This question needs a very good understanding of pointers."
                    },
                    {
                        "username": "arnyc",
                        "content": "The question asks us to \"Return the *head of* the merged linked list\" But the output shown in the example is the entire merged list. Is this how people use the term \"head\" when it comes to link lists or is the question badly worded? I am not complaining. I am a beginner and want to know how these terms are used in practice."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The function returns a single node, but in a linked list each node in the list points to the next one, so returning the head is the same as returning the entire list."
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "\"Head\" refers to the start of the linked list. For this problem, we only return 1 node, but this node has next pointers to other nodes which will eventually expand into the full list of numbers. For Leetcode\\'s perspective, to be technically accurate they could say return ListNode(1) for test case 1, but this makes it hard for people to understand how the list is fully formed with all the numbers, so it is expanded into a traditional list for simplistic purposes. Also, it would be a pain to list the return of test case 1 as head.val = 1, head.next.val = 1, head.next.next.val = 2, and so on. Hope this helps!"
                    },
                    {
                        "username": "ec1912",
                        "content": " `class Solution {   \\npublic: \\n\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1 == NULL){\\n            return list2;\\n        }\\n        if(list2 == NULL){\\n            return list1;\\n        }\\n\\n        \\n        if(list1-> val <= list2->val){\\n            list1->next = mergeTwoLists(list1->next, list2);\\n            return list1;\\n        }\\n        else {\\n          \\n            list2->next = mergeTwoLists(list2->next, list1);\\n            return list2;\\n        }\\n    }\\n};`"
                    },
                    {
                        "username": "imsej_al",
                        "content": "https://github.com/imsejal/Leetcode/tree/main\\nHope it helps ..\\nPlease upvote if it helps :)\\nIf you Like the repository don\\'t fogot to star & fork the repository"
                    }
                ]
            },
            {
                "id": 1744813,
                "content": [
                    {
                        "username": "alptekinI",
                        "content": "Hi.\\nI have a kind of silly question.\\nThe head of a linked list is the first element...\\nSo, when it is said that, given is the head of 2 linked list, [1,2,4], It really doesnt make sense to me...\\nDo they mean that, the keys of the linked list 1 is 1, 2 and 4? Such that, the first element, ie head has a key 1 and the successive element has a key 2 and the tail element has a key 4?\\nThanks"
                    },
                    {
                        "username": "hoangtheviet",
                        "content": "can someone tell me what is the pointer \"next\" use for when defining the struct, i think it is used to save the next address of a node, is that right?"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Right, the \\'next\\' value is a reference to the next node in the list, or nil for the last node."
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand.\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/3024782/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "zily",
                        "content": "Is it possible to differ list1 = [], list2 = [0] for Java? Whatever empty ListNode includes default val which is 0"
                    },
                    {
                        "username": "sushant14",
                        "content": "when I have write this code in my editior this code work but why  this code is not working.\nplease give me suggestion to correct this code.\n\n```\nclass Solution:\n    def mergeTwoLists(self, list1,list2):\n        for i in list2:\n            list1.append(i)\n        list1.sort()\n        return list1\n```"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "I am trying to run this code using C:\\nstruct ListNode * first=NULL;\\n    struct ListNode * last=NULL;\\n    struct ListNode * p=list1;\\n    struct ListNode * q=list2;\\n    if(p->val < q->val){\\n        first=last=p;\\n        p=p->next;\\n        last->next=NULL;\\n    }else{\\n        first=last=q;\\n        q=q->next;\\n        last->next=NULL;\\n    }\\n    while(p!=NULL && q!=NULL)\\n    {\\n        if(p->val < q->val)\\n        {\\n            last->next=p;\\n            last=p;\\n            p=p->next;\\n            last->next=NULL;\\n        }\\n        else \\n        {\\n            last->next=q;\\n            last=q;\\n            q=q->next;\\n            last->next=NULL;\\n        }\\n    }\\n    if(p!=NULL)\\n    {\\n        last->next=p;\\n    }else\\n    {\\n        last->next=q;\\n    }\\n    return first;\\n\\nBut i am getting an error in first IF condition saying \" Runtime Error:member access withing null pointer of type \\'struct ListNode\\'.\\n\\nHow to resolve this?"
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "Basically the compiler here is telling you that `*p` could be a `NULL` pointer, which would result in an error that you are trying to access an attribute of a `NULL` pointer on the first if statement. You don\\'t check for a `NULL` pointer in base cases, which leads to runtime errors of trying to access `NULL->val` in test case 2 and 3. Dont forget your base cases!"
                    },
                    {
                        "username": "jaiskaran008",
                        "content": "This question needs a very good understanding of pointers."
                    },
                    {
                        "username": "arnyc",
                        "content": "The question asks us to \"Return the *head of* the merged linked list\" But the output shown in the example is the entire merged list. Is this how people use the term \"head\" when it comes to link lists or is the question badly worded? I am not complaining. I am a beginner and want to know how these terms are used in practice."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The function returns a single node, but in a linked list each node in the list points to the next one, so returning the head is the same as returning the entire list."
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "\"Head\" refers to the start of the linked list. For this problem, we only return 1 node, but this node has next pointers to other nodes which will eventually expand into the full list of numbers. For Leetcode\\'s perspective, to be technically accurate they could say return ListNode(1) for test case 1, but this makes it hard for people to understand how the list is fully formed with all the numbers, so it is expanded into a traditional list for simplistic purposes. Also, it would be a pain to list the return of test case 1 as head.val = 1, head.next.val = 1, head.next.next.val = 2, and so on. Hope this helps!"
                    },
                    {
                        "username": "ec1912",
                        "content": " `class Solution {   \\npublic: \\n\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1 == NULL){\\n            return list2;\\n        }\\n        if(list2 == NULL){\\n            return list1;\\n        }\\n\\n        \\n        if(list1-> val <= list2->val){\\n            list1->next = mergeTwoLists(list1->next, list2);\\n            return list1;\\n        }\\n        else {\\n          \\n            list2->next = mergeTwoLists(list2->next, list1);\\n            return list2;\\n        }\\n    }\\n};`"
                    },
                    {
                        "username": "imsej_al",
                        "content": "https://github.com/imsejal/Leetcode/tree/main\\nHope it helps ..\\nPlease upvote if it helps :)\\nIf you Like the repository don\\'t fogot to star & fork the repository"
                    }
                ]
            },
            {
                "id": 1741802,
                "content": [
                    {
                        "username": "alptekinI",
                        "content": "Hi.\\nI have a kind of silly question.\\nThe head of a linked list is the first element...\\nSo, when it is said that, given is the head of 2 linked list, [1,2,4], It really doesnt make sense to me...\\nDo they mean that, the keys of the linked list 1 is 1, 2 and 4? Such that, the first element, ie head has a key 1 and the successive element has a key 2 and the tail element has a key 4?\\nThanks"
                    },
                    {
                        "username": "hoangtheviet",
                        "content": "can someone tell me what is the pointer \"next\" use for when defining the struct, i think it is used to save the next address of a node, is that right?"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Right, the \\'next\\' value is a reference to the next node in the list, or nil for the last node."
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand.\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/3024782/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "zily",
                        "content": "Is it possible to differ list1 = [], list2 = [0] for Java? Whatever empty ListNode includes default val which is 0"
                    },
                    {
                        "username": "sushant14",
                        "content": "when I have write this code in my editior this code work but why  this code is not working.\nplease give me suggestion to correct this code.\n\n```\nclass Solution:\n    def mergeTwoLists(self, list1,list2):\n        for i in list2:\n            list1.append(i)\n        list1.sort()\n        return list1\n```"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "I am trying to run this code using C:\\nstruct ListNode * first=NULL;\\n    struct ListNode * last=NULL;\\n    struct ListNode * p=list1;\\n    struct ListNode * q=list2;\\n    if(p->val < q->val){\\n        first=last=p;\\n        p=p->next;\\n        last->next=NULL;\\n    }else{\\n        first=last=q;\\n        q=q->next;\\n        last->next=NULL;\\n    }\\n    while(p!=NULL && q!=NULL)\\n    {\\n        if(p->val < q->val)\\n        {\\n            last->next=p;\\n            last=p;\\n            p=p->next;\\n            last->next=NULL;\\n        }\\n        else \\n        {\\n            last->next=q;\\n            last=q;\\n            q=q->next;\\n            last->next=NULL;\\n        }\\n    }\\n    if(p!=NULL)\\n    {\\n        last->next=p;\\n    }else\\n    {\\n        last->next=q;\\n    }\\n    return first;\\n\\nBut i am getting an error in first IF condition saying \" Runtime Error:member access withing null pointer of type \\'struct ListNode\\'.\\n\\nHow to resolve this?"
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "Basically the compiler here is telling you that `*p` could be a `NULL` pointer, which would result in an error that you are trying to access an attribute of a `NULL` pointer on the first if statement. You don\\'t check for a `NULL` pointer in base cases, which leads to runtime errors of trying to access `NULL->val` in test case 2 and 3. Dont forget your base cases!"
                    },
                    {
                        "username": "jaiskaran008",
                        "content": "This question needs a very good understanding of pointers."
                    },
                    {
                        "username": "arnyc",
                        "content": "The question asks us to \"Return the *head of* the merged linked list\" But the output shown in the example is the entire merged list. Is this how people use the term \"head\" when it comes to link lists or is the question badly worded? I am not complaining. I am a beginner and want to know how these terms are used in practice."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The function returns a single node, but in a linked list each node in the list points to the next one, so returning the head is the same as returning the entire list."
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "\"Head\" refers to the start of the linked list. For this problem, we only return 1 node, but this node has next pointers to other nodes which will eventually expand into the full list of numbers. For Leetcode\\'s perspective, to be technically accurate they could say return ListNode(1) for test case 1, but this makes it hard for people to understand how the list is fully formed with all the numbers, so it is expanded into a traditional list for simplistic purposes. Also, it would be a pain to list the return of test case 1 as head.val = 1, head.next.val = 1, head.next.next.val = 2, and so on. Hope this helps!"
                    },
                    {
                        "username": "ec1912",
                        "content": " `class Solution {   \\npublic: \\n\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1 == NULL){\\n            return list2;\\n        }\\n        if(list2 == NULL){\\n            return list1;\\n        }\\n\\n        \\n        if(list1-> val <= list2->val){\\n            list1->next = mergeTwoLists(list1->next, list2);\\n            return list1;\\n        }\\n        else {\\n          \\n            list2->next = mergeTwoLists(list2->next, list1);\\n            return list2;\\n        }\\n    }\\n};`"
                    },
                    {
                        "username": "imsej_al",
                        "content": "https://github.com/imsejal/Leetcode/tree/main\\nHope it helps ..\\nPlease upvote if it helps :)\\nIf you Like the repository don\\'t fogot to star & fork the repository"
                    }
                ]
            },
            {
                "id": 1735031,
                "content": [
                    {
                        "username": "alptekinI",
                        "content": "Hi.\\nI have a kind of silly question.\\nThe head of a linked list is the first element...\\nSo, when it is said that, given is the head of 2 linked list, [1,2,4], It really doesnt make sense to me...\\nDo they mean that, the keys of the linked list 1 is 1, 2 and 4? Such that, the first element, ie head has a key 1 and the successive element has a key 2 and the tail element has a key 4?\\nThanks"
                    },
                    {
                        "username": "hoangtheviet",
                        "content": "can someone tell me what is the pointer \"next\" use for when defining the struct, i think it is used to save the next address of a node, is that right?"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Right, the \\'next\\' value is a reference to the next node in the list, or nil for the last node."
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand.\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/3024782/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "zily",
                        "content": "Is it possible to differ list1 = [], list2 = [0] for Java? Whatever empty ListNode includes default val which is 0"
                    },
                    {
                        "username": "sushant14",
                        "content": "when I have write this code in my editior this code work but why  this code is not working.\nplease give me suggestion to correct this code.\n\n```\nclass Solution:\n    def mergeTwoLists(self, list1,list2):\n        for i in list2:\n            list1.append(i)\n        list1.sort()\n        return list1\n```"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "I am trying to run this code using C:\\nstruct ListNode * first=NULL;\\n    struct ListNode * last=NULL;\\n    struct ListNode * p=list1;\\n    struct ListNode * q=list2;\\n    if(p->val < q->val){\\n        first=last=p;\\n        p=p->next;\\n        last->next=NULL;\\n    }else{\\n        first=last=q;\\n        q=q->next;\\n        last->next=NULL;\\n    }\\n    while(p!=NULL && q!=NULL)\\n    {\\n        if(p->val < q->val)\\n        {\\n            last->next=p;\\n            last=p;\\n            p=p->next;\\n            last->next=NULL;\\n        }\\n        else \\n        {\\n            last->next=q;\\n            last=q;\\n            q=q->next;\\n            last->next=NULL;\\n        }\\n    }\\n    if(p!=NULL)\\n    {\\n        last->next=p;\\n    }else\\n    {\\n        last->next=q;\\n    }\\n    return first;\\n\\nBut i am getting an error in first IF condition saying \" Runtime Error:member access withing null pointer of type \\'struct ListNode\\'.\\n\\nHow to resolve this?"
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "Basically the compiler here is telling you that `*p` could be a `NULL` pointer, which would result in an error that you are trying to access an attribute of a `NULL` pointer on the first if statement. You don\\'t check for a `NULL` pointer in base cases, which leads to runtime errors of trying to access `NULL->val` in test case 2 and 3. Dont forget your base cases!"
                    },
                    {
                        "username": "jaiskaran008",
                        "content": "This question needs a very good understanding of pointers."
                    },
                    {
                        "username": "arnyc",
                        "content": "The question asks us to \"Return the *head of* the merged linked list\" But the output shown in the example is the entire merged list. Is this how people use the term \"head\" when it comes to link lists or is the question badly worded? I am not complaining. I am a beginner and want to know how these terms are used in practice."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The function returns a single node, but in a linked list each node in the list points to the next one, so returning the head is the same as returning the entire list."
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "\"Head\" refers to the start of the linked list. For this problem, we only return 1 node, but this node has next pointers to other nodes which will eventually expand into the full list of numbers. For Leetcode\\'s perspective, to be technically accurate they could say return ListNode(1) for test case 1, but this makes it hard for people to understand how the list is fully formed with all the numbers, so it is expanded into a traditional list for simplistic purposes. Also, it would be a pain to list the return of test case 1 as head.val = 1, head.next.val = 1, head.next.next.val = 2, and so on. Hope this helps!"
                    },
                    {
                        "username": "ec1912",
                        "content": " `class Solution {   \\npublic: \\n\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1 == NULL){\\n            return list2;\\n        }\\n        if(list2 == NULL){\\n            return list1;\\n        }\\n\\n        \\n        if(list1-> val <= list2->val){\\n            list1->next = mergeTwoLists(list1->next, list2);\\n            return list1;\\n        }\\n        else {\\n          \\n            list2->next = mergeTwoLists(list2->next, list1);\\n            return list2;\\n        }\\n    }\\n};`"
                    },
                    {
                        "username": "imsej_al",
                        "content": "https://github.com/imsejal/Leetcode/tree/main\\nHope it helps ..\\nPlease upvote if it helps :)\\nIf you Like the repository don\\'t fogot to star & fork the repository"
                    }
                ]
            },
            {
                "id": 1732888,
                "content": [
                    {
                        "username": "alptekinI",
                        "content": "Hi.\\nI have a kind of silly question.\\nThe head of a linked list is the first element...\\nSo, when it is said that, given is the head of 2 linked list, [1,2,4], It really doesnt make sense to me...\\nDo they mean that, the keys of the linked list 1 is 1, 2 and 4? Such that, the first element, ie head has a key 1 and the successive element has a key 2 and the tail element has a key 4?\\nThanks"
                    },
                    {
                        "username": "hoangtheviet",
                        "content": "can someone tell me what is the pointer \"next\" use for when defining the struct, i think it is used to save the next address of a node, is that right?"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Right, the \\'next\\' value is a reference to the next node in the list, or nil for the last node."
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || 0 ms || Beats 100% runtime || Easy to understand.\\nhttps://leetcode.com/problems/merge-two-sorted-lists/solutions/3024782/simple-java-0-ms-beats-100-runtime-easy-to-understand/"
                    },
                    {
                        "username": "zily",
                        "content": "Is it possible to differ list1 = [], list2 = [0] for Java? Whatever empty ListNode includes default val which is 0"
                    },
                    {
                        "username": "sushant14",
                        "content": "when I have write this code in my editior this code work but why  this code is not working.\nplease give me suggestion to correct this code.\n\n```\nclass Solution:\n    def mergeTwoLists(self, list1,list2):\n        for i in list2:\n            list1.append(i)\n        list1.sort()\n        return list1\n```"
                    },
                    {
                        "username": "NadimKazi",
                        "content": "I am trying to run this code using C:\\nstruct ListNode * first=NULL;\\n    struct ListNode * last=NULL;\\n    struct ListNode * p=list1;\\n    struct ListNode * q=list2;\\n    if(p->val < q->val){\\n        first=last=p;\\n        p=p->next;\\n        last->next=NULL;\\n    }else{\\n        first=last=q;\\n        q=q->next;\\n        last->next=NULL;\\n    }\\n    while(p!=NULL && q!=NULL)\\n    {\\n        if(p->val < q->val)\\n        {\\n            last->next=p;\\n            last=p;\\n            p=p->next;\\n            last->next=NULL;\\n        }\\n        else \\n        {\\n            last->next=q;\\n            last=q;\\n            q=q->next;\\n            last->next=NULL;\\n        }\\n    }\\n    if(p!=NULL)\\n    {\\n        last->next=p;\\n    }else\\n    {\\n        last->next=q;\\n    }\\n    return first;\\n\\nBut i am getting an error in first IF condition saying \" Runtime Error:member access withing null pointer of type \\'struct ListNode\\'.\\n\\nHow to resolve this?"
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "Basically the compiler here is telling you that `*p` could be a `NULL` pointer, which would result in an error that you are trying to access an attribute of a `NULL` pointer on the first if statement. You don\\'t check for a `NULL` pointer in base cases, which leads to runtime errors of trying to access `NULL->val` in test case 2 and 3. Dont forget your base cases!"
                    },
                    {
                        "username": "jaiskaran008",
                        "content": "This question needs a very good understanding of pointers."
                    },
                    {
                        "username": "arnyc",
                        "content": "The question asks us to \"Return the *head of* the merged linked list\" But the output shown in the example is the entire merged list. Is this how people use the term \"head\" when it comes to link lists or is the question badly worded? I am not complaining. I am a beginner and want to know how these terms are used in practice."
                    },
                    {
                        "username": "user5267Xl",
                        "content": "The function returns a single node, but in a linked list each node in the list points to the next one, so returning the head is the same as returning the entire list."
                    },
                    {
                        "username": "KarthikShankar",
                        "content": "\"Head\" refers to the start of the linked list. For this problem, we only return 1 node, but this node has next pointers to other nodes which will eventually expand into the full list of numbers. For Leetcode\\'s perspective, to be technically accurate they could say return ListNode(1) for test case 1, but this makes it hard for people to understand how the list is fully formed with all the numbers, so it is expanded into a traditional list for simplistic purposes. Also, it would be a pain to list the return of test case 1 as head.val = 1, head.next.val = 1, head.next.next.val = 2, and so on. Hope this helps!"
                    },
                    {
                        "username": "ec1912",
                        "content": " `class Solution {   \\npublic: \\n\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1 == NULL){\\n            return list2;\\n        }\\n        if(list2 == NULL){\\n            return list1;\\n        }\\n\\n        \\n        if(list1-> val <= list2->val){\\n            list1->next = mergeTwoLists(list1->next, list2);\\n            return list1;\\n        }\\n        else {\\n          \\n            list2->next = mergeTwoLists(list2->next, list1);\\n            return list2;\\n        }\\n    }\\n};`"
                    },
                    {
                        "username": "imsej_al",
                        "content": "https://github.com/imsejal/Leetcode/tree/main\\nHope it helps ..\\nPlease upvote if it helps :)\\nIf you Like the repository don\\'t fogot to star & fork the repository"
                    }
                ]
            },
            {
                "id": 1731951,
                "content": [
                    {
                        "username": "vcr20010418",
                        "content": "what this function listnode will return ?"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "It will return the head node of merged linked list."
                    },
                    {
                        "username": "Akashverma212",
                        "content": "why i can\\'t use head over here?\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/merge-two-sorted-lists-leet-code-21/"
                    },
                    {
                        "username": "user3947tf",
                        "content": "when we add while list1 & list2, then print(list1.val) gives value otherwise it gives the attribute error: \\'NoneType\\' object has no attribute \\'val\\'\\ncan anyone please educate me about this weird problem."
                    },
                    {
                        "username": "mee_sam",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n       ListNode *fh=NULL,*ft=NULL;\\n        while(list1!=NULL&&list2!=NULL)\\n        {\\n            if(list1==NULL &&list2==NULL)\\n            {\\n                if(list1->val<list2->val)\\n                {\\n                    fh=list1;\\n                    ft=list1;\\n                }\\n                else\\n                {\\n                    fh=list2;\\n                    ft=list2;\\n                }\\n            }\\n            if(list1->val<list2->val)\\n            {\\n                ft->next=list1;\\n                ft=ft->next;\\n                list1=list1->next;\\n            }\\n            else\\n            {   \\n                ft->next=list2;\\n                ft=ft->next;\\n                list2=list2->next;\\n                \\n            }\\n        }\\n        if(list1!=NULL)\\n        ft->next=list1;\\n        else\\n        ft->next=list2;\\n        return fh;\\n        \\n    }\\n};\\nI am getting \\'runtime error: member access within null pointer of type \\'ListNode\\' error.\\n"
                    },
                    {
                        "username": "ozigun1988",
                        "content": "come ooon.. this is so simple but it gives me \"concat() is not a function\"... concat? concat?"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/21_merge_two_sorted_list.cpp"
                    },
                    {
                        "username": "avm07",
                        "content": "\nExplain. Why is my code bad for this job?\nfrom itertools import chain\nlist1 = [1,2,4]\nlist2 = [1,3,4]\noutput = sorted(chain(list1, list2))\nprint(output)"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Merging sorted lists is an O(n) operation, whereas concatenating and then sorting is at least O(n log n)."
                    },
                    {
                        "username": "rm1",
                        "content": "Can I create a separate merged list? Or does this have to be in O(1) space so no extra space is used?"
                    },
                    {
                        "username": "danillo7789",
                        "content": "It keeps saying list1.forEach or map is not a function.\nI tried this in my vscode, both map and forEach methods works perfectly.\nPls can anyone point why this is so?"
                    }
                ]
            },
            {
                "id": 1731921,
                "content": [
                    {
                        "username": "vcr20010418",
                        "content": "what this function listnode will return ?"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "It will return the head node of merged linked list."
                    },
                    {
                        "username": "Akashverma212",
                        "content": "why i can\\'t use head over here?\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/merge-two-sorted-lists-leet-code-21/"
                    },
                    {
                        "username": "user3947tf",
                        "content": "when we add while list1 & list2, then print(list1.val) gives value otherwise it gives the attribute error: \\'NoneType\\' object has no attribute \\'val\\'\\ncan anyone please educate me about this weird problem."
                    },
                    {
                        "username": "mee_sam",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n       ListNode *fh=NULL,*ft=NULL;\\n        while(list1!=NULL&&list2!=NULL)\\n        {\\n            if(list1==NULL &&list2==NULL)\\n            {\\n                if(list1->val<list2->val)\\n                {\\n                    fh=list1;\\n                    ft=list1;\\n                }\\n                else\\n                {\\n                    fh=list2;\\n                    ft=list2;\\n                }\\n            }\\n            if(list1->val<list2->val)\\n            {\\n                ft->next=list1;\\n                ft=ft->next;\\n                list1=list1->next;\\n            }\\n            else\\n            {   \\n                ft->next=list2;\\n                ft=ft->next;\\n                list2=list2->next;\\n                \\n            }\\n        }\\n        if(list1!=NULL)\\n        ft->next=list1;\\n        else\\n        ft->next=list2;\\n        return fh;\\n        \\n    }\\n};\\nI am getting \\'runtime error: member access within null pointer of type \\'ListNode\\' error.\\n"
                    },
                    {
                        "username": "ozigun1988",
                        "content": "come ooon.. this is so simple but it gives me \"concat() is not a function\"... concat? concat?"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/21_merge_two_sorted_list.cpp"
                    },
                    {
                        "username": "avm07",
                        "content": "\nExplain. Why is my code bad for this job?\nfrom itertools import chain\nlist1 = [1,2,4]\nlist2 = [1,3,4]\noutput = sorted(chain(list1, list2))\nprint(output)"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Merging sorted lists is an O(n) operation, whereas concatenating and then sorting is at least O(n log n)."
                    },
                    {
                        "username": "rm1",
                        "content": "Can I create a separate merged list? Or does this have to be in O(1) space so no extra space is used?"
                    },
                    {
                        "username": "danillo7789",
                        "content": "It keeps saying list1.forEach or map is not a function.\nI tried this in my vscode, both map and forEach methods works perfectly.\nPls can anyone point why this is so?"
                    }
                ]
            },
            {
                "id": 1729158,
                "content": [
                    {
                        "username": "vcr20010418",
                        "content": "what this function listnode will return ?"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "It will return the head node of merged linked list."
                    },
                    {
                        "username": "Akashverma212",
                        "content": "why i can\\'t use head over here?\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/merge-two-sorted-lists-leet-code-21/"
                    },
                    {
                        "username": "user3947tf",
                        "content": "when we add while list1 & list2, then print(list1.val) gives value otherwise it gives the attribute error: \\'NoneType\\' object has no attribute \\'val\\'\\ncan anyone please educate me about this weird problem."
                    },
                    {
                        "username": "mee_sam",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n       ListNode *fh=NULL,*ft=NULL;\\n        while(list1!=NULL&&list2!=NULL)\\n        {\\n            if(list1==NULL &&list2==NULL)\\n            {\\n                if(list1->val<list2->val)\\n                {\\n                    fh=list1;\\n                    ft=list1;\\n                }\\n                else\\n                {\\n                    fh=list2;\\n                    ft=list2;\\n                }\\n            }\\n            if(list1->val<list2->val)\\n            {\\n                ft->next=list1;\\n                ft=ft->next;\\n                list1=list1->next;\\n            }\\n            else\\n            {   \\n                ft->next=list2;\\n                ft=ft->next;\\n                list2=list2->next;\\n                \\n            }\\n        }\\n        if(list1!=NULL)\\n        ft->next=list1;\\n        else\\n        ft->next=list2;\\n        return fh;\\n        \\n    }\\n};\\nI am getting \\'runtime error: member access within null pointer of type \\'ListNode\\' error.\\n"
                    },
                    {
                        "username": "ozigun1988",
                        "content": "come ooon.. this is so simple but it gives me \"concat() is not a function\"... concat? concat?"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/21_merge_two_sorted_list.cpp"
                    },
                    {
                        "username": "avm07",
                        "content": "\nExplain. Why is my code bad for this job?\nfrom itertools import chain\nlist1 = [1,2,4]\nlist2 = [1,3,4]\noutput = sorted(chain(list1, list2))\nprint(output)"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Merging sorted lists is an O(n) operation, whereas concatenating and then sorting is at least O(n log n)."
                    },
                    {
                        "username": "rm1",
                        "content": "Can I create a separate merged list? Or does this have to be in O(1) space so no extra space is used?"
                    },
                    {
                        "username": "danillo7789",
                        "content": "It keeps saying list1.forEach or map is not a function.\nI tried this in my vscode, both map and forEach methods works perfectly.\nPls can anyone point why this is so?"
                    }
                ]
            },
            {
                "id": 1728681,
                "content": [
                    {
                        "username": "vcr20010418",
                        "content": "what this function listnode will return ?"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "It will return the head node of merged linked list."
                    },
                    {
                        "username": "Akashverma212",
                        "content": "why i can\\'t use head over here?\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/merge-two-sorted-lists-leet-code-21/"
                    },
                    {
                        "username": "user3947tf",
                        "content": "when we add while list1 & list2, then print(list1.val) gives value otherwise it gives the attribute error: \\'NoneType\\' object has no attribute \\'val\\'\\ncan anyone please educate me about this weird problem."
                    },
                    {
                        "username": "mee_sam",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n       ListNode *fh=NULL,*ft=NULL;\\n        while(list1!=NULL&&list2!=NULL)\\n        {\\n            if(list1==NULL &&list2==NULL)\\n            {\\n                if(list1->val<list2->val)\\n                {\\n                    fh=list1;\\n                    ft=list1;\\n                }\\n                else\\n                {\\n                    fh=list2;\\n                    ft=list2;\\n                }\\n            }\\n            if(list1->val<list2->val)\\n            {\\n                ft->next=list1;\\n                ft=ft->next;\\n                list1=list1->next;\\n            }\\n            else\\n            {   \\n                ft->next=list2;\\n                ft=ft->next;\\n                list2=list2->next;\\n                \\n            }\\n        }\\n        if(list1!=NULL)\\n        ft->next=list1;\\n        else\\n        ft->next=list2;\\n        return fh;\\n        \\n    }\\n};\\nI am getting \\'runtime error: member access within null pointer of type \\'ListNode\\' error.\\n"
                    },
                    {
                        "username": "ozigun1988",
                        "content": "come ooon.. this is so simple but it gives me \"concat() is not a function\"... concat? concat?"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/21_merge_two_sorted_list.cpp"
                    },
                    {
                        "username": "avm07",
                        "content": "\nExplain. Why is my code bad for this job?\nfrom itertools import chain\nlist1 = [1,2,4]\nlist2 = [1,3,4]\noutput = sorted(chain(list1, list2))\nprint(output)"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Merging sorted lists is an O(n) operation, whereas concatenating and then sorting is at least O(n log n)."
                    },
                    {
                        "username": "rm1",
                        "content": "Can I create a separate merged list? Or does this have to be in O(1) space so no extra space is used?"
                    },
                    {
                        "username": "danillo7789",
                        "content": "It keeps saying list1.forEach or map is not a function.\nI tried this in my vscode, both map and forEach methods works perfectly.\nPls can anyone point why this is so?"
                    }
                ]
            },
            {
                "id": 1727890,
                "content": [
                    {
                        "username": "vcr20010418",
                        "content": "what this function listnode will return ?"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "It will return the head node of merged linked list."
                    },
                    {
                        "username": "Akashverma212",
                        "content": "why i can\\'t use head over here?\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/merge-two-sorted-lists-leet-code-21/"
                    },
                    {
                        "username": "user3947tf",
                        "content": "when we add while list1 & list2, then print(list1.val) gives value otherwise it gives the attribute error: \\'NoneType\\' object has no attribute \\'val\\'\\ncan anyone please educate me about this weird problem."
                    },
                    {
                        "username": "mee_sam",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n       ListNode *fh=NULL,*ft=NULL;\\n        while(list1!=NULL&&list2!=NULL)\\n        {\\n            if(list1==NULL &&list2==NULL)\\n            {\\n                if(list1->val<list2->val)\\n                {\\n                    fh=list1;\\n                    ft=list1;\\n                }\\n                else\\n                {\\n                    fh=list2;\\n                    ft=list2;\\n                }\\n            }\\n            if(list1->val<list2->val)\\n            {\\n                ft->next=list1;\\n                ft=ft->next;\\n                list1=list1->next;\\n            }\\n            else\\n            {   \\n                ft->next=list2;\\n                ft=ft->next;\\n                list2=list2->next;\\n                \\n            }\\n        }\\n        if(list1!=NULL)\\n        ft->next=list1;\\n        else\\n        ft->next=list2;\\n        return fh;\\n        \\n    }\\n};\\nI am getting \\'runtime error: member access within null pointer of type \\'ListNode\\' error.\\n"
                    },
                    {
                        "username": "ozigun1988",
                        "content": "come ooon.. this is so simple but it gives me \"concat() is not a function\"... concat? concat?"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/21_merge_two_sorted_list.cpp"
                    },
                    {
                        "username": "avm07",
                        "content": "\nExplain. Why is my code bad for this job?\nfrom itertools import chain\nlist1 = [1,2,4]\nlist2 = [1,3,4]\noutput = sorted(chain(list1, list2))\nprint(output)"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Merging sorted lists is an O(n) operation, whereas concatenating and then sorting is at least O(n log n)."
                    },
                    {
                        "username": "rm1",
                        "content": "Can I create a separate merged list? Or does this have to be in O(1) space so no extra space is used?"
                    },
                    {
                        "username": "danillo7789",
                        "content": "It keeps saying list1.forEach or map is not a function.\nI tried this in my vscode, both map and forEach methods works perfectly.\nPls can anyone point why this is so?"
                    }
                ]
            },
            {
                "id": 1726389,
                "content": [
                    {
                        "username": "vcr20010418",
                        "content": "what this function listnode will return ?"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "It will return the head node of merged linked list."
                    },
                    {
                        "username": "Akashverma212",
                        "content": "why i can\\'t use head over here?\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/merge-two-sorted-lists-leet-code-21/"
                    },
                    {
                        "username": "user3947tf",
                        "content": "when we add while list1 & list2, then print(list1.val) gives value otherwise it gives the attribute error: \\'NoneType\\' object has no attribute \\'val\\'\\ncan anyone please educate me about this weird problem."
                    },
                    {
                        "username": "mee_sam",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n       ListNode *fh=NULL,*ft=NULL;\\n        while(list1!=NULL&&list2!=NULL)\\n        {\\n            if(list1==NULL &&list2==NULL)\\n            {\\n                if(list1->val<list2->val)\\n                {\\n                    fh=list1;\\n                    ft=list1;\\n                }\\n                else\\n                {\\n                    fh=list2;\\n                    ft=list2;\\n                }\\n            }\\n            if(list1->val<list2->val)\\n            {\\n                ft->next=list1;\\n                ft=ft->next;\\n                list1=list1->next;\\n            }\\n            else\\n            {   \\n                ft->next=list2;\\n                ft=ft->next;\\n                list2=list2->next;\\n                \\n            }\\n        }\\n        if(list1!=NULL)\\n        ft->next=list1;\\n        else\\n        ft->next=list2;\\n        return fh;\\n        \\n    }\\n};\\nI am getting \\'runtime error: member access within null pointer of type \\'ListNode\\' error.\\n"
                    },
                    {
                        "username": "ozigun1988",
                        "content": "come ooon.. this is so simple but it gives me \"concat() is not a function\"... concat? concat?"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/21_merge_two_sorted_list.cpp"
                    },
                    {
                        "username": "avm07",
                        "content": "\nExplain. Why is my code bad for this job?\nfrom itertools import chain\nlist1 = [1,2,4]\nlist2 = [1,3,4]\noutput = sorted(chain(list1, list2))\nprint(output)"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Merging sorted lists is an O(n) operation, whereas concatenating and then sorting is at least O(n log n)."
                    },
                    {
                        "username": "rm1",
                        "content": "Can I create a separate merged list? Or does this have to be in O(1) space so no extra space is used?"
                    },
                    {
                        "username": "danillo7789",
                        "content": "It keeps saying list1.forEach or map is not a function.\nI tried this in my vscode, both map and forEach methods works perfectly.\nPls can anyone point why this is so?"
                    }
                ]
            },
            {
                "id": 1725510,
                "content": [
                    {
                        "username": "vcr20010418",
                        "content": "what this function listnode will return ?"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "It will return the head node of merged linked list."
                    },
                    {
                        "username": "Akashverma212",
                        "content": "why i can\\'t use head over here?\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/merge-two-sorted-lists-leet-code-21/"
                    },
                    {
                        "username": "user3947tf",
                        "content": "when we add while list1 & list2, then print(list1.val) gives value otherwise it gives the attribute error: \\'NoneType\\' object has no attribute \\'val\\'\\ncan anyone please educate me about this weird problem."
                    },
                    {
                        "username": "mee_sam",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n       ListNode *fh=NULL,*ft=NULL;\\n        while(list1!=NULL&&list2!=NULL)\\n        {\\n            if(list1==NULL &&list2==NULL)\\n            {\\n                if(list1->val<list2->val)\\n                {\\n                    fh=list1;\\n                    ft=list1;\\n                }\\n                else\\n                {\\n                    fh=list2;\\n                    ft=list2;\\n                }\\n            }\\n            if(list1->val<list2->val)\\n            {\\n                ft->next=list1;\\n                ft=ft->next;\\n                list1=list1->next;\\n            }\\n            else\\n            {   \\n                ft->next=list2;\\n                ft=ft->next;\\n                list2=list2->next;\\n                \\n            }\\n        }\\n        if(list1!=NULL)\\n        ft->next=list1;\\n        else\\n        ft->next=list2;\\n        return fh;\\n        \\n    }\\n};\\nI am getting \\'runtime error: member access within null pointer of type \\'ListNode\\' error.\\n"
                    },
                    {
                        "username": "ozigun1988",
                        "content": "come ooon.. this is so simple but it gives me \"concat() is not a function\"... concat? concat?"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/21_merge_two_sorted_list.cpp"
                    },
                    {
                        "username": "avm07",
                        "content": "\nExplain. Why is my code bad for this job?\nfrom itertools import chain\nlist1 = [1,2,4]\nlist2 = [1,3,4]\noutput = sorted(chain(list1, list2))\nprint(output)"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Merging sorted lists is an O(n) operation, whereas concatenating and then sorting is at least O(n log n)."
                    },
                    {
                        "username": "rm1",
                        "content": "Can I create a separate merged list? Or does this have to be in O(1) space so no extra space is used?"
                    },
                    {
                        "username": "danillo7789",
                        "content": "It keeps saying list1.forEach or map is not a function.\nI tried this in my vscode, both map and forEach methods works perfectly.\nPls can anyone point why this is so?"
                    }
                ]
            },
            {
                "id": 1725213,
                "content": [
                    {
                        "username": "vcr20010418",
                        "content": "what this function listnode will return ?"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "It will return the head node of merged linked list."
                    },
                    {
                        "username": "Akashverma212",
                        "content": "why i can\\'t use head over here?\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/merge-two-sorted-lists-leet-code-21/"
                    },
                    {
                        "username": "user3947tf",
                        "content": "when we add while list1 & list2, then print(list1.val) gives value otherwise it gives the attribute error: \\'NoneType\\' object has no attribute \\'val\\'\\ncan anyone please educate me about this weird problem."
                    },
                    {
                        "username": "mee_sam",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n       ListNode *fh=NULL,*ft=NULL;\\n        while(list1!=NULL&&list2!=NULL)\\n        {\\n            if(list1==NULL &&list2==NULL)\\n            {\\n                if(list1->val<list2->val)\\n                {\\n                    fh=list1;\\n                    ft=list1;\\n                }\\n                else\\n                {\\n                    fh=list2;\\n                    ft=list2;\\n                }\\n            }\\n            if(list1->val<list2->val)\\n            {\\n                ft->next=list1;\\n                ft=ft->next;\\n                list1=list1->next;\\n            }\\n            else\\n            {   \\n                ft->next=list2;\\n                ft=ft->next;\\n                list2=list2->next;\\n                \\n            }\\n        }\\n        if(list1!=NULL)\\n        ft->next=list1;\\n        else\\n        ft->next=list2;\\n        return fh;\\n        \\n    }\\n};\\nI am getting \\'runtime error: member access within null pointer of type \\'ListNode\\' error.\\n"
                    },
                    {
                        "username": "ozigun1988",
                        "content": "come ooon.. this is so simple but it gives me \"concat() is not a function\"... concat? concat?"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/21_merge_two_sorted_list.cpp"
                    },
                    {
                        "username": "avm07",
                        "content": "\nExplain. Why is my code bad for this job?\nfrom itertools import chain\nlist1 = [1,2,4]\nlist2 = [1,3,4]\noutput = sorted(chain(list1, list2))\nprint(output)"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Merging sorted lists is an O(n) operation, whereas concatenating and then sorting is at least O(n log n)."
                    },
                    {
                        "username": "rm1",
                        "content": "Can I create a separate merged list? Or does this have to be in O(1) space so no extra space is used?"
                    },
                    {
                        "username": "danillo7789",
                        "content": "It keeps saying list1.forEach or map is not a function.\nI tried this in my vscode, both map and forEach methods works perfectly.\nPls can anyone point why this is so?"
                    }
                ]
            },
            {
                "id": 1723721,
                "content": [
                    {
                        "username": "vcr20010418",
                        "content": "what this function listnode will return ?"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "It will return the head node of merged linked list."
                    },
                    {
                        "username": "Akashverma212",
                        "content": "why i can\\'t use head over here?\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/merge-two-sorted-lists-leet-code-21/"
                    },
                    {
                        "username": "user3947tf",
                        "content": "when we add while list1 & list2, then print(list1.val) gives value otherwise it gives the attribute error: \\'NoneType\\' object has no attribute \\'val\\'\\ncan anyone please educate me about this weird problem."
                    },
                    {
                        "username": "mee_sam",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n       ListNode *fh=NULL,*ft=NULL;\\n        while(list1!=NULL&&list2!=NULL)\\n        {\\n            if(list1==NULL &&list2==NULL)\\n            {\\n                if(list1->val<list2->val)\\n                {\\n                    fh=list1;\\n                    ft=list1;\\n                }\\n                else\\n                {\\n                    fh=list2;\\n                    ft=list2;\\n                }\\n            }\\n            if(list1->val<list2->val)\\n            {\\n                ft->next=list1;\\n                ft=ft->next;\\n                list1=list1->next;\\n            }\\n            else\\n            {   \\n                ft->next=list2;\\n                ft=ft->next;\\n                list2=list2->next;\\n                \\n            }\\n        }\\n        if(list1!=NULL)\\n        ft->next=list1;\\n        else\\n        ft->next=list2;\\n        return fh;\\n        \\n    }\\n};\\nI am getting \\'runtime error: member access within null pointer of type \\'ListNode\\' error.\\n"
                    },
                    {
                        "username": "ozigun1988",
                        "content": "come ooon.. this is so simple but it gives me \"concat() is not a function\"... concat? concat?"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/21_merge_two_sorted_list.cpp"
                    },
                    {
                        "username": "avm07",
                        "content": "\nExplain. Why is my code bad for this job?\nfrom itertools import chain\nlist1 = [1,2,4]\nlist2 = [1,3,4]\noutput = sorted(chain(list1, list2))\nprint(output)"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Merging sorted lists is an O(n) operation, whereas concatenating and then sorting is at least O(n log n)."
                    },
                    {
                        "username": "rm1",
                        "content": "Can I create a separate merged list? Or does this have to be in O(1) space so no extra space is used?"
                    },
                    {
                        "username": "danillo7789",
                        "content": "It keeps saying list1.forEach or map is not a function.\nI tried this in my vscode, both map and forEach methods works perfectly.\nPls can anyone point why this is so?"
                    }
                ]
            },
            {
                "id": 1722796,
                "content": [
                    {
                        "username": "vcr20010418",
                        "content": "what this function listnode will return ?"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "It will return the head node of merged linked list."
                    },
                    {
                        "username": "Akashverma212",
                        "content": "why i can\\'t use head over here?\\n"
                    },
                    {
                        "username": "haldkar_shubham",
                        "content": "This is a python code with explanation, approach and algorithm. \\n\\n\\n\\nhttps://siteinvokers.com/merge-two-sorted-lists-leet-code-21/"
                    },
                    {
                        "username": "user3947tf",
                        "content": "when we add while list1 & list2, then print(list1.val) gives value otherwise it gives the attribute error: \\'NoneType\\' object has no attribute \\'val\\'\\ncan anyone please educate me about this weird problem."
                    },
                    {
                        "username": "mee_sam",
                        "content": "/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n       ListNode *fh=NULL,*ft=NULL;\\n        while(list1!=NULL&&list2!=NULL)\\n        {\\n            if(list1==NULL &&list2==NULL)\\n            {\\n                if(list1->val<list2->val)\\n                {\\n                    fh=list1;\\n                    ft=list1;\\n                }\\n                else\\n                {\\n                    fh=list2;\\n                    ft=list2;\\n                }\\n            }\\n            if(list1->val<list2->val)\\n            {\\n                ft->next=list1;\\n                ft=ft->next;\\n                list1=list1->next;\\n            }\\n            else\\n            {   \\n                ft->next=list2;\\n                ft=ft->next;\\n                list2=list2->next;\\n                \\n            }\\n        }\\n        if(list1!=NULL)\\n        ft->next=list1;\\n        else\\n        ft->next=list2;\\n        return fh;\\n        \\n    }\\n};\\nI am getting \\'runtime error: member access within null pointer of type \\'ListNode\\' error.\\n"
                    },
                    {
                        "username": "ozigun1988",
                        "content": "come ooon.. this is so simple but it gives me \"concat() is not a function\"... concat? concat?"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/21_merge_two_sorted_list.cpp"
                    },
                    {
                        "username": "avm07",
                        "content": "\nExplain. Why is my code bad for this job?\nfrom itertools import chain\nlist1 = [1,2,4]\nlist2 = [1,3,4]\noutput = sorted(chain(list1, list2))\nprint(output)"
                    },
                    {
                        "username": "user5267Xl",
                        "content": "Merging sorted lists is an O(n) operation, whereas concatenating and then sorting is at least O(n log n)."
                    },
                    {
                        "username": "rm1",
                        "content": "Can I create a separate merged list? Or does this have to be in O(1) space so no extra space is used?"
                    },
                    {
                        "username": "danillo7789",
                        "content": "It keeps saying list1.forEach or map is not a function.\nI tried this in my vscode, both map and forEach methods works perfectly.\nPls can anyone point why this is so?"
                    }
                ]
            },
            {
                "id": 1722075,
                "content": [
                    {
                        "username": "Taterr",
                        "content": " `Merge the two lists in a one sorted list.`\\ndoes this mean that we create and return a new linked list, or do we have to append it to an existing list1/list2 and return the head of those 2?\\nthe question could be clearer in that aspect"
                    },
                    {
                        "username": "takashi4233",
                        "content": "You can return a new linked list. For no88 you need to use existing list. "
                    },
                    {
                        "username": "mrsnopi",
                        "content": "why is he writing list1 is not iterable?\\nlet arr = [...list1, ...list2]\\neverything works in vs code\\n"
                    },
                    {
                        "username": "chandupriya_06",
                        "content": "///// 12 ms \\n\\nclass Solution \\n{\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2)\\n    {\\n          if(!l1) return l2;\\n          if(!l2) return l1;\\n          ListNode*head=new ListNode();\\n          if(l1->val<l2->val){\\n              head->val=l1->val;\\n              head->next=mergeTwoLists(l1->next,l2);\\n          }else{\\n              head->val=l2->val;\\n              head->next=mergeTwoLists(l1,l2->next);\\n          }\\n        return head;\\n    }\\n\\n};"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "Java Code for Merge two Lists:\n \npublic ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode finalList=new ListNode(0);\n        ListNode dummyList=finalList;\n        if(list1==null && list2==null){\n            return null;\n        }\n        else{\n        ListNode list=new ListNode();\n            if(list1==null && list2!=null){\n                return list2;\n            }\n            else if(list1!=null && list2==null){\n                return list1;\n            }\n\n            else{\n                while(list2!=null){\n                    addValue(list1,list2.val);\n                    list2=list2.next;\n\n                }\n                return list1;\n            }\n\n        }\n\n    }\n\n    public void addValue(ListNode list, int value){\n        if(list==null){\n            return;\n        }\n        ListNode dummy=list;\n        boolean added=false;\n\n\n        while(dummy!=null) {\n            if(dummy.next==null && !added){\n                if(value>dummy.val){\n                    dummy.next=new ListNode(value);\n                    break;\n                }\n            }\n            if (value <= dummy.val) {\n                int a = dummy.val;\n                ListNode newList = new ListNode(a, dummy.next);\n                dummy.val = value;\n                dummy.next = newList;\n                added=true;\n                break;\n            }\n            dummy=dummy.next;\n        }\n    }"
                    },
                    {
                        "username": "EsraaAbodeif",
                        "content": "can someone please clerify to me why he is using  mergedPointer.next = new ListNode(list2.val);) , instead of  mergedPointer = new ListNode(list2.val); in this solution\\n\\npublic static ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        ListNode merged = new ListNode();\\n        ListNode mergedPointer = merged;\\n        while(list1 != null && list2 != null){\\n            if(list1.val < list2.val){\\n                mergedPointer.next= new ListNode(list1.val);\\n                list1 = list1.next;\\n            }\\n            else{\\n                mergedPointer.next = new ListNode(list2.val);\\n                list2 = list2.next;\\n            }\\n                mergedPointer = mergedPointer.next;\\n        }\\n        if(list1 == null){\\n            mergedPointer.next = list2;\\n        }else if (list2 == null){\\n            mergedPointer.next = list1;\\n        }\\n        return merged;\\n    }  "
                    },
                    {
                        "username": "kellyir",
                        "content": "There doesn't appear to be any way for a null value linked list to be read as [] in javascript. It also is not understanding my logic here. If list1 doesn't have a length line 69 should never be read. \n\nerror:\nLine 69 in solution.js\n        while(i <= list1.length || i <= list2.length){\n\ncode:\n `68  if(list1 !== [] && list2 !== []){\n\n    69    while(i <= list1.length || i <= list2.length){`"
                    },
                    {
                        "username": "XOMehdi",
                        "content": "will the 2 lists always have the same length? why is it not specified?"
                    },
                    {
                        "username": "takashi4233",
                        "content": "Can someone tell me why the following code shows an error .\\n\\n`\\n\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]\\n\\n        print(list1.val)`\\n\\nError Message\\nAttributeError: \\'NoneType\\' object has no attribute \\'val\\'\\n    print(list1.val)\\nLine 9 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 69 in _driver (Solution.py)\\n    _driver()\\nLine 80 in <module> (Solution.py)"
                    },
                    {
                        "username": "Cha0ticAnt",
                        "content": "A list can be empty. That\\'s represented by None. So calling .val on that results in an error, so check to make sure that list1 != None before calling .val on it. You have assumed that the input lists have something in them, but the site is testing that the function still works if some of the given lists are empty. (Nobody said the lists couldn\\'t be empty.) It mentions NoneType because that\\'s the type of None, and it\\'s a variable\\'s type that determines what attributes it has. None doesn\\'t have val, and an empty container also doesn\\'t. In an abstract manner, None is technically still a list: it\\'s an empty list, at least it\\'s a representation of an empty list."
                    },
                    {
                        "username": "close27",
                        "content": "it seems that the challenge is to implement it in c++. Had to think about how to create head pointer and moving pointer seperately."
                    },
                    {
                        "username": "danielhasibuanpro",
                        "content": "Hi i was trying to solve this using python. My idea is to merge these two lists into one, flatten them and then sort them out. I am not sure why it won\\'t work? \\n"
                    }
                ]
            },
            {
                "id": 1721560,
                "content": [
                    {
                        "username": "Taterr",
                        "content": " `Merge the two lists in a one sorted list.`\\ndoes this mean that we create and return a new linked list, or do we have to append it to an existing list1/list2 and return the head of those 2?\\nthe question could be clearer in that aspect"
                    },
                    {
                        "username": "takashi4233",
                        "content": "You can return a new linked list. For no88 you need to use existing list. "
                    },
                    {
                        "username": "mrsnopi",
                        "content": "why is he writing list1 is not iterable?\\nlet arr = [...list1, ...list2]\\neverything works in vs code\\n"
                    },
                    {
                        "username": "chandupriya_06",
                        "content": "///// 12 ms \\n\\nclass Solution \\n{\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2)\\n    {\\n          if(!l1) return l2;\\n          if(!l2) return l1;\\n          ListNode*head=new ListNode();\\n          if(l1->val<l2->val){\\n              head->val=l1->val;\\n              head->next=mergeTwoLists(l1->next,l2);\\n          }else{\\n              head->val=l2->val;\\n              head->next=mergeTwoLists(l1,l2->next);\\n          }\\n        return head;\\n    }\\n\\n};"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "Java Code for Merge two Lists:\n \npublic ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode finalList=new ListNode(0);\n        ListNode dummyList=finalList;\n        if(list1==null && list2==null){\n            return null;\n        }\n        else{\n        ListNode list=new ListNode();\n            if(list1==null && list2!=null){\n                return list2;\n            }\n            else if(list1!=null && list2==null){\n                return list1;\n            }\n\n            else{\n                while(list2!=null){\n                    addValue(list1,list2.val);\n                    list2=list2.next;\n\n                }\n                return list1;\n            }\n\n        }\n\n    }\n\n    public void addValue(ListNode list, int value){\n        if(list==null){\n            return;\n        }\n        ListNode dummy=list;\n        boolean added=false;\n\n\n        while(dummy!=null) {\n            if(dummy.next==null && !added){\n                if(value>dummy.val){\n                    dummy.next=new ListNode(value);\n                    break;\n                }\n            }\n            if (value <= dummy.val) {\n                int a = dummy.val;\n                ListNode newList = new ListNode(a, dummy.next);\n                dummy.val = value;\n                dummy.next = newList;\n                added=true;\n                break;\n            }\n            dummy=dummy.next;\n        }\n    }"
                    },
                    {
                        "username": "EsraaAbodeif",
                        "content": "can someone please clerify to me why he is using  mergedPointer.next = new ListNode(list2.val);) , instead of  mergedPointer = new ListNode(list2.val); in this solution\\n\\npublic static ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        ListNode merged = new ListNode();\\n        ListNode mergedPointer = merged;\\n        while(list1 != null && list2 != null){\\n            if(list1.val < list2.val){\\n                mergedPointer.next= new ListNode(list1.val);\\n                list1 = list1.next;\\n            }\\n            else{\\n                mergedPointer.next = new ListNode(list2.val);\\n                list2 = list2.next;\\n            }\\n                mergedPointer = mergedPointer.next;\\n        }\\n        if(list1 == null){\\n            mergedPointer.next = list2;\\n        }else if (list2 == null){\\n            mergedPointer.next = list1;\\n        }\\n        return merged;\\n    }  "
                    },
                    {
                        "username": "kellyir",
                        "content": "There doesn't appear to be any way for a null value linked list to be read as [] in javascript. It also is not understanding my logic here. If list1 doesn't have a length line 69 should never be read. \n\nerror:\nLine 69 in solution.js\n        while(i <= list1.length || i <= list2.length){\n\ncode:\n `68  if(list1 !== [] && list2 !== []){\n\n    69    while(i <= list1.length || i <= list2.length){`"
                    },
                    {
                        "username": "XOMehdi",
                        "content": "will the 2 lists always have the same length? why is it not specified?"
                    },
                    {
                        "username": "takashi4233",
                        "content": "Can someone tell me why the following code shows an error .\\n\\n`\\n\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]\\n\\n        print(list1.val)`\\n\\nError Message\\nAttributeError: \\'NoneType\\' object has no attribute \\'val\\'\\n    print(list1.val)\\nLine 9 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 69 in _driver (Solution.py)\\n    _driver()\\nLine 80 in <module> (Solution.py)"
                    },
                    {
                        "username": "Cha0ticAnt",
                        "content": "A list can be empty. That\\'s represented by None. So calling .val on that results in an error, so check to make sure that list1 != None before calling .val on it. You have assumed that the input lists have something in them, but the site is testing that the function still works if some of the given lists are empty. (Nobody said the lists couldn\\'t be empty.) It mentions NoneType because that\\'s the type of None, and it\\'s a variable\\'s type that determines what attributes it has. None doesn\\'t have val, and an empty container also doesn\\'t. In an abstract manner, None is technically still a list: it\\'s an empty list, at least it\\'s a representation of an empty list."
                    },
                    {
                        "username": "close27",
                        "content": "it seems that the challenge is to implement it in c++. Had to think about how to create head pointer and moving pointer seperately."
                    },
                    {
                        "username": "danielhasibuanpro",
                        "content": "Hi i was trying to solve this using python. My idea is to merge these two lists into one, flatten them and then sort them out. I am not sure why it won\\'t work? \\n"
                    }
                ]
            },
            {
                "id": 1721327,
                "content": [
                    {
                        "username": "Taterr",
                        "content": " `Merge the two lists in a one sorted list.`\\ndoes this mean that we create and return a new linked list, or do we have to append it to an existing list1/list2 and return the head of those 2?\\nthe question could be clearer in that aspect"
                    },
                    {
                        "username": "takashi4233",
                        "content": "You can return a new linked list. For no88 you need to use existing list. "
                    },
                    {
                        "username": "mrsnopi",
                        "content": "why is he writing list1 is not iterable?\\nlet arr = [...list1, ...list2]\\neverything works in vs code\\n"
                    },
                    {
                        "username": "chandupriya_06",
                        "content": "///// 12 ms \\n\\nclass Solution \\n{\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2)\\n    {\\n          if(!l1) return l2;\\n          if(!l2) return l1;\\n          ListNode*head=new ListNode();\\n          if(l1->val<l2->val){\\n              head->val=l1->val;\\n              head->next=mergeTwoLists(l1->next,l2);\\n          }else{\\n              head->val=l2->val;\\n              head->next=mergeTwoLists(l1,l2->next);\\n          }\\n        return head;\\n    }\\n\\n};"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "Java Code for Merge two Lists:\n \npublic ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode finalList=new ListNode(0);\n        ListNode dummyList=finalList;\n        if(list1==null && list2==null){\n            return null;\n        }\n        else{\n        ListNode list=new ListNode();\n            if(list1==null && list2!=null){\n                return list2;\n            }\n            else if(list1!=null && list2==null){\n                return list1;\n            }\n\n            else{\n                while(list2!=null){\n                    addValue(list1,list2.val);\n                    list2=list2.next;\n\n                }\n                return list1;\n            }\n\n        }\n\n    }\n\n    public void addValue(ListNode list, int value){\n        if(list==null){\n            return;\n        }\n        ListNode dummy=list;\n        boolean added=false;\n\n\n        while(dummy!=null) {\n            if(dummy.next==null && !added){\n                if(value>dummy.val){\n                    dummy.next=new ListNode(value);\n                    break;\n                }\n            }\n            if (value <= dummy.val) {\n                int a = dummy.val;\n                ListNode newList = new ListNode(a, dummy.next);\n                dummy.val = value;\n                dummy.next = newList;\n                added=true;\n                break;\n            }\n            dummy=dummy.next;\n        }\n    }"
                    },
                    {
                        "username": "EsraaAbodeif",
                        "content": "can someone please clerify to me why he is using  mergedPointer.next = new ListNode(list2.val);) , instead of  mergedPointer = new ListNode(list2.val); in this solution\\n\\npublic static ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        ListNode merged = new ListNode();\\n        ListNode mergedPointer = merged;\\n        while(list1 != null && list2 != null){\\n            if(list1.val < list2.val){\\n                mergedPointer.next= new ListNode(list1.val);\\n                list1 = list1.next;\\n            }\\n            else{\\n                mergedPointer.next = new ListNode(list2.val);\\n                list2 = list2.next;\\n            }\\n                mergedPointer = mergedPointer.next;\\n        }\\n        if(list1 == null){\\n            mergedPointer.next = list2;\\n        }else if (list2 == null){\\n            mergedPointer.next = list1;\\n        }\\n        return merged;\\n    }  "
                    },
                    {
                        "username": "kellyir",
                        "content": "There doesn't appear to be any way for a null value linked list to be read as [] in javascript. It also is not understanding my logic here. If list1 doesn't have a length line 69 should never be read. \n\nerror:\nLine 69 in solution.js\n        while(i <= list1.length || i <= list2.length){\n\ncode:\n `68  if(list1 !== [] && list2 !== []){\n\n    69    while(i <= list1.length || i <= list2.length){`"
                    },
                    {
                        "username": "XOMehdi",
                        "content": "will the 2 lists always have the same length? why is it not specified?"
                    },
                    {
                        "username": "takashi4233",
                        "content": "Can someone tell me why the following code shows an error .\\n\\n`\\n\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]\\n\\n        print(list1.val)`\\n\\nError Message\\nAttributeError: \\'NoneType\\' object has no attribute \\'val\\'\\n    print(list1.val)\\nLine 9 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 69 in _driver (Solution.py)\\n    _driver()\\nLine 80 in <module> (Solution.py)"
                    },
                    {
                        "username": "Cha0ticAnt",
                        "content": "A list can be empty. That\\'s represented by None. So calling .val on that results in an error, so check to make sure that list1 != None before calling .val on it. You have assumed that the input lists have something in them, but the site is testing that the function still works if some of the given lists are empty. (Nobody said the lists couldn\\'t be empty.) It mentions NoneType because that\\'s the type of None, and it\\'s a variable\\'s type that determines what attributes it has. None doesn\\'t have val, and an empty container also doesn\\'t. In an abstract manner, None is technically still a list: it\\'s an empty list, at least it\\'s a representation of an empty list."
                    },
                    {
                        "username": "close27",
                        "content": "it seems that the challenge is to implement it in c++. Had to think about how to create head pointer and moving pointer seperately."
                    },
                    {
                        "username": "danielhasibuanpro",
                        "content": "Hi i was trying to solve this using python. My idea is to merge these two lists into one, flatten them and then sort them out. I am not sure why it won\\'t work? \\n"
                    }
                ]
            },
            {
                "id": 1720892,
                "content": [
                    {
                        "username": "Taterr",
                        "content": " `Merge the two lists in a one sorted list.`\\ndoes this mean that we create and return a new linked list, or do we have to append it to an existing list1/list2 and return the head of those 2?\\nthe question could be clearer in that aspect"
                    },
                    {
                        "username": "takashi4233",
                        "content": "You can return a new linked list. For no88 you need to use existing list. "
                    },
                    {
                        "username": "mrsnopi",
                        "content": "why is he writing list1 is not iterable?\\nlet arr = [...list1, ...list2]\\neverything works in vs code\\n"
                    },
                    {
                        "username": "chandupriya_06",
                        "content": "///// 12 ms \\n\\nclass Solution \\n{\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2)\\n    {\\n          if(!l1) return l2;\\n          if(!l2) return l1;\\n          ListNode*head=new ListNode();\\n          if(l1->val<l2->val){\\n              head->val=l1->val;\\n              head->next=mergeTwoLists(l1->next,l2);\\n          }else{\\n              head->val=l2->val;\\n              head->next=mergeTwoLists(l1,l2->next);\\n          }\\n        return head;\\n    }\\n\\n};"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "Java Code for Merge two Lists:\n \npublic ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode finalList=new ListNode(0);\n        ListNode dummyList=finalList;\n        if(list1==null && list2==null){\n            return null;\n        }\n        else{\n        ListNode list=new ListNode();\n            if(list1==null && list2!=null){\n                return list2;\n            }\n            else if(list1!=null && list2==null){\n                return list1;\n            }\n\n            else{\n                while(list2!=null){\n                    addValue(list1,list2.val);\n                    list2=list2.next;\n\n                }\n                return list1;\n            }\n\n        }\n\n    }\n\n    public void addValue(ListNode list, int value){\n        if(list==null){\n            return;\n        }\n        ListNode dummy=list;\n        boolean added=false;\n\n\n        while(dummy!=null) {\n            if(dummy.next==null && !added){\n                if(value>dummy.val){\n                    dummy.next=new ListNode(value);\n                    break;\n                }\n            }\n            if (value <= dummy.val) {\n                int a = dummy.val;\n                ListNode newList = new ListNode(a, dummy.next);\n                dummy.val = value;\n                dummy.next = newList;\n                added=true;\n                break;\n            }\n            dummy=dummy.next;\n        }\n    }"
                    },
                    {
                        "username": "EsraaAbodeif",
                        "content": "can someone please clerify to me why he is using  mergedPointer.next = new ListNode(list2.val);) , instead of  mergedPointer = new ListNode(list2.val); in this solution\\n\\npublic static ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        ListNode merged = new ListNode();\\n        ListNode mergedPointer = merged;\\n        while(list1 != null && list2 != null){\\n            if(list1.val < list2.val){\\n                mergedPointer.next= new ListNode(list1.val);\\n                list1 = list1.next;\\n            }\\n            else{\\n                mergedPointer.next = new ListNode(list2.val);\\n                list2 = list2.next;\\n            }\\n                mergedPointer = mergedPointer.next;\\n        }\\n        if(list1 == null){\\n            mergedPointer.next = list2;\\n        }else if (list2 == null){\\n            mergedPointer.next = list1;\\n        }\\n        return merged;\\n    }  "
                    },
                    {
                        "username": "kellyir",
                        "content": "There doesn't appear to be any way for a null value linked list to be read as [] in javascript. It also is not understanding my logic here. If list1 doesn't have a length line 69 should never be read. \n\nerror:\nLine 69 in solution.js\n        while(i <= list1.length || i <= list2.length){\n\ncode:\n `68  if(list1 !== [] && list2 !== []){\n\n    69    while(i <= list1.length || i <= list2.length){`"
                    },
                    {
                        "username": "XOMehdi",
                        "content": "will the 2 lists always have the same length? why is it not specified?"
                    },
                    {
                        "username": "takashi4233",
                        "content": "Can someone tell me why the following code shows an error .\\n\\n`\\n\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]\\n\\n        print(list1.val)`\\n\\nError Message\\nAttributeError: \\'NoneType\\' object has no attribute \\'val\\'\\n    print(list1.val)\\nLine 9 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 69 in _driver (Solution.py)\\n    _driver()\\nLine 80 in <module> (Solution.py)"
                    },
                    {
                        "username": "Cha0ticAnt",
                        "content": "A list can be empty. That\\'s represented by None. So calling .val on that results in an error, so check to make sure that list1 != None before calling .val on it. You have assumed that the input lists have something in them, but the site is testing that the function still works if some of the given lists are empty. (Nobody said the lists couldn\\'t be empty.) It mentions NoneType because that\\'s the type of None, and it\\'s a variable\\'s type that determines what attributes it has. None doesn\\'t have val, and an empty container also doesn\\'t. In an abstract manner, None is technically still a list: it\\'s an empty list, at least it\\'s a representation of an empty list."
                    },
                    {
                        "username": "close27",
                        "content": "it seems that the challenge is to implement it in c++. Had to think about how to create head pointer and moving pointer seperately."
                    },
                    {
                        "username": "danielhasibuanpro",
                        "content": "Hi i was trying to solve this using python. My idea is to merge these two lists into one, flatten them and then sort them out. I am not sure why it won\\'t work? \\n"
                    }
                ]
            },
            {
                "id": 1718983,
                "content": [
                    {
                        "username": "Taterr",
                        "content": " `Merge the two lists in a one sorted list.`\\ndoes this mean that we create and return a new linked list, or do we have to append it to an existing list1/list2 and return the head of those 2?\\nthe question could be clearer in that aspect"
                    },
                    {
                        "username": "takashi4233",
                        "content": "You can return a new linked list. For no88 you need to use existing list. "
                    },
                    {
                        "username": "mrsnopi",
                        "content": "why is he writing list1 is not iterable?\\nlet arr = [...list1, ...list2]\\neverything works in vs code\\n"
                    },
                    {
                        "username": "chandupriya_06",
                        "content": "///// 12 ms \\n\\nclass Solution \\n{\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2)\\n    {\\n          if(!l1) return l2;\\n          if(!l2) return l1;\\n          ListNode*head=new ListNode();\\n          if(l1->val<l2->val){\\n              head->val=l1->val;\\n              head->next=mergeTwoLists(l1->next,l2);\\n          }else{\\n              head->val=l2->val;\\n              head->next=mergeTwoLists(l1,l2->next);\\n          }\\n        return head;\\n    }\\n\\n};"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "Java Code for Merge two Lists:\n \npublic ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode finalList=new ListNode(0);\n        ListNode dummyList=finalList;\n        if(list1==null && list2==null){\n            return null;\n        }\n        else{\n        ListNode list=new ListNode();\n            if(list1==null && list2!=null){\n                return list2;\n            }\n            else if(list1!=null && list2==null){\n                return list1;\n            }\n\n            else{\n                while(list2!=null){\n                    addValue(list1,list2.val);\n                    list2=list2.next;\n\n                }\n                return list1;\n            }\n\n        }\n\n    }\n\n    public void addValue(ListNode list, int value){\n        if(list==null){\n            return;\n        }\n        ListNode dummy=list;\n        boolean added=false;\n\n\n        while(dummy!=null) {\n            if(dummy.next==null && !added){\n                if(value>dummy.val){\n                    dummy.next=new ListNode(value);\n                    break;\n                }\n            }\n            if (value <= dummy.val) {\n                int a = dummy.val;\n                ListNode newList = new ListNode(a, dummy.next);\n                dummy.val = value;\n                dummy.next = newList;\n                added=true;\n                break;\n            }\n            dummy=dummy.next;\n        }\n    }"
                    },
                    {
                        "username": "EsraaAbodeif",
                        "content": "can someone please clerify to me why he is using  mergedPointer.next = new ListNode(list2.val);) , instead of  mergedPointer = new ListNode(list2.val); in this solution\\n\\npublic static ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        ListNode merged = new ListNode();\\n        ListNode mergedPointer = merged;\\n        while(list1 != null && list2 != null){\\n            if(list1.val < list2.val){\\n                mergedPointer.next= new ListNode(list1.val);\\n                list1 = list1.next;\\n            }\\n            else{\\n                mergedPointer.next = new ListNode(list2.val);\\n                list2 = list2.next;\\n            }\\n                mergedPointer = mergedPointer.next;\\n        }\\n        if(list1 == null){\\n            mergedPointer.next = list2;\\n        }else if (list2 == null){\\n            mergedPointer.next = list1;\\n        }\\n        return merged;\\n    }  "
                    },
                    {
                        "username": "kellyir",
                        "content": "There doesn't appear to be any way for a null value linked list to be read as [] in javascript. It also is not understanding my logic here. If list1 doesn't have a length line 69 should never be read. \n\nerror:\nLine 69 in solution.js\n        while(i <= list1.length || i <= list2.length){\n\ncode:\n `68  if(list1 !== [] && list2 !== []){\n\n    69    while(i <= list1.length || i <= list2.length){`"
                    },
                    {
                        "username": "XOMehdi",
                        "content": "will the 2 lists always have the same length? why is it not specified?"
                    },
                    {
                        "username": "takashi4233",
                        "content": "Can someone tell me why the following code shows an error .\\n\\n`\\n\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]\\n\\n        print(list1.val)`\\n\\nError Message\\nAttributeError: \\'NoneType\\' object has no attribute \\'val\\'\\n    print(list1.val)\\nLine 9 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 69 in _driver (Solution.py)\\n    _driver()\\nLine 80 in <module> (Solution.py)"
                    },
                    {
                        "username": "Cha0ticAnt",
                        "content": "A list can be empty. That\\'s represented by None. So calling .val on that results in an error, so check to make sure that list1 != None before calling .val on it. You have assumed that the input lists have something in them, but the site is testing that the function still works if some of the given lists are empty. (Nobody said the lists couldn\\'t be empty.) It mentions NoneType because that\\'s the type of None, and it\\'s a variable\\'s type that determines what attributes it has. None doesn\\'t have val, and an empty container also doesn\\'t. In an abstract manner, None is technically still a list: it\\'s an empty list, at least it\\'s a representation of an empty list."
                    },
                    {
                        "username": "close27",
                        "content": "it seems that the challenge is to implement it in c++. Had to think about how to create head pointer and moving pointer seperately."
                    },
                    {
                        "username": "danielhasibuanpro",
                        "content": "Hi i was trying to solve this using python. My idea is to merge these two lists into one, flatten them and then sort them out. I am not sure why it won\\'t work? \\n"
                    }
                ]
            },
            {
                "id": 1718664,
                "content": [
                    {
                        "username": "Taterr",
                        "content": " `Merge the two lists in a one sorted list.`\\ndoes this mean that we create and return a new linked list, or do we have to append it to an existing list1/list2 and return the head of those 2?\\nthe question could be clearer in that aspect"
                    },
                    {
                        "username": "takashi4233",
                        "content": "You can return a new linked list. For no88 you need to use existing list. "
                    },
                    {
                        "username": "mrsnopi",
                        "content": "why is he writing list1 is not iterable?\\nlet arr = [...list1, ...list2]\\neverything works in vs code\\n"
                    },
                    {
                        "username": "chandupriya_06",
                        "content": "///// 12 ms \\n\\nclass Solution \\n{\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2)\\n    {\\n          if(!l1) return l2;\\n          if(!l2) return l1;\\n          ListNode*head=new ListNode();\\n          if(l1->val<l2->val){\\n              head->val=l1->val;\\n              head->next=mergeTwoLists(l1->next,l2);\\n          }else{\\n              head->val=l2->val;\\n              head->next=mergeTwoLists(l1,l2->next);\\n          }\\n        return head;\\n    }\\n\\n};"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "Java Code for Merge two Lists:\n \npublic ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode finalList=new ListNode(0);\n        ListNode dummyList=finalList;\n        if(list1==null && list2==null){\n            return null;\n        }\n        else{\n        ListNode list=new ListNode();\n            if(list1==null && list2!=null){\n                return list2;\n            }\n            else if(list1!=null && list2==null){\n                return list1;\n            }\n\n            else{\n                while(list2!=null){\n                    addValue(list1,list2.val);\n                    list2=list2.next;\n\n                }\n                return list1;\n            }\n\n        }\n\n    }\n\n    public void addValue(ListNode list, int value){\n        if(list==null){\n            return;\n        }\n        ListNode dummy=list;\n        boolean added=false;\n\n\n        while(dummy!=null) {\n            if(dummy.next==null && !added){\n                if(value>dummy.val){\n                    dummy.next=new ListNode(value);\n                    break;\n                }\n            }\n            if (value <= dummy.val) {\n                int a = dummy.val;\n                ListNode newList = new ListNode(a, dummy.next);\n                dummy.val = value;\n                dummy.next = newList;\n                added=true;\n                break;\n            }\n            dummy=dummy.next;\n        }\n    }"
                    },
                    {
                        "username": "EsraaAbodeif",
                        "content": "can someone please clerify to me why he is using  mergedPointer.next = new ListNode(list2.val);) , instead of  mergedPointer = new ListNode(list2.val); in this solution\\n\\npublic static ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        ListNode merged = new ListNode();\\n        ListNode mergedPointer = merged;\\n        while(list1 != null && list2 != null){\\n            if(list1.val < list2.val){\\n                mergedPointer.next= new ListNode(list1.val);\\n                list1 = list1.next;\\n            }\\n            else{\\n                mergedPointer.next = new ListNode(list2.val);\\n                list2 = list2.next;\\n            }\\n                mergedPointer = mergedPointer.next;\\n        }\\n        if(list1 == null){\\n            mergedPointer.next = list2;\\n        }else if (list2 == null){\\n            mergedPointer.next = list1;\\n        }\\n        return merged;\\n    }  "
                    },
                    {
                        "username": "kellyir",
                        "content": "There doesn't appear to be any way for a null value linked list to be read as [] in javascript. It also is not understanding my logic here. If list1 doesn't have a length line 69 should never be read. \n\nerror:\nLine 69 in solution.js\n        while(i <= list1.length || i <= list2.length){\n\ncode:\n `68  if(list1 !== [] && list2 !== []){\n\n    69    while(i <= list1.length || i <= list2.length){`"
                    },
                    {
                        "username": "XOMehdi",
                        "content": "will the 2 lists always have the same length? why is it not specified?"
                    },
                    {
                        "username": "takashi4233",
                        "content": "Can someone tell me why the following code shows an error .\\n\\n`\\n\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]\\n\\n        print(list1.val)`\\n\\nError Message\\nAttributeError: \\'NoneType\\' object has no attribute \\'val\\'\\n    print(list1.val)\\nLine 9 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 69 in _driver (Solution.py)\\n    _driver()\\nLine 80 in <module> (Solution.py)"
                    },
                    {
                        "username": "Cha0ticAnt",
                        "content": "A list can be empty. That\\'s represented by None. So calling .val on that results in an error, so check to make sure that list1 != None before calling .val on it. You have assumed that the input lists have something in them, but the site is testing that the function still works if some of the given lists are empty. (Nobody said the lists couldn\\'t be empty.) It mentions NoneType because that\\'s the type of None, and it\\'s a variable\\'s type that determines what attributes it has. None doesn\\'t have val, and an empty container also doesn\\'t. In an abstract manner, None is technically still a list: it\\'s an empty list, at least it\\'s a representation of an empty list."
                    },
                    {
                        "username": "close27",
                        "content": "it seems that the challenge is to implement it in c++. Had to think about how to create head pointer and moving pointer seperately."
                    },
                    {
                        "username": "danielhasibuanpro",
                        "content": "Hi i was trying to solve this using python. My idea is to merge these two lists into one, flatten them and then sort them out. I am not sure why it won\\'t work? \\n"
                    }
                ]
            },
            {
                "id": 1717160,
                "content": [
                    {
                        "username": "Taterr",
                        "content": " `Merge the two lists in a one sorted list.`\\ndoes this mean that we create and return a new linked list, or do we have to append it to an existing list1/list2 and return the head of those 2?\\nthe question could be clearer in that aspect"
                    },
                    {
                        "username": "takashi4233",
                        "content": "You can return a new linked list. For no88 you need to use existing list. "
                    },
                    {
                        "username": "mrsnopi",
                        "content": "why is he writing list1 is not iterable?\\nlet arr = [...list1, ...list2]\\neverything works in vs code\\n"
                    },
                    {
                        "username": "chandupriya_06",
                        "content": "///// 12 ms \\n\\nclass Solution \\n{\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2)\\n    {\\n          if(!l1) return l2;\\n          if(!l2) return l1;\\n          ListNode*head=new ListNode();\\n          if(l1->val<l2->val){\\n              head->val=l1->val;\\n              head->next=mergeTwoLists(l1->next,l2);\\n          }else{\\n              head->val=l2->val;\\n              head->next=mergeTwoLists(l1,l2->next);\\n          }\\n        return head;\\n    }\\n\\n};"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "Java Code for Merge two Lists:\n \npublic ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode finalList=new ListNode(0);\n        ListNode dummyList=finalList;\n        if(list1==null && list2==null){\n            return null;\n        }\n        else{\n        ListNode list=new ListNode();\n            if(list1==null && list2!=null){\n                return list2;\n            }\n            else if(list1!=null && list2==null){\n                return list1;\n            }\n\n            else{\n                while(list2!=null){\n                    addValue(list1,list2.val);\n                    list2=list2.next;\n\n                }\n                return list1;\n            }\n\n        }\n\n    }\n\n    public void addValue(ListNode list, int value){\n        if(list==null){\n            return;\n        }\n        ListNode dummy=list;\n        boolean added=false;\n\n\n        while(dummy!=null) {\n            if(dummy.next==null && !added){\n                if(value>dummy.val){\n                    dummy.next=new ListNode(value);\n                    break;\n                }\n            }\n            if (value <= dummy.val) {\n                int a = dummy.val;\n                ListNode newList = new ListNode(a, dummy.next);\n                dummy.val = value;\n                dummy.next = newList;\n                added=true;\n                break;\n            }\n            dummy=dummy.next;\n        }\n    }"
                    },
                    {
                        "username": "EsraaAbodeif",
                        "content": "can someone please clerify to me why he is using  mergedPointer.next = new ListNode(list2.val);) , instead of  mergedPointer = new ListNode(list2.val); in this solution\\n\\npublic static ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        ListNode merged = new ListNode();\\n        ListNode mergedPointer = merged;\\n        while(list1 != null && list2 != null){\\n            if(list1.val < list2.val){\\n                mergedPointer.next= new ListNode(list1.val);\\n                list1 = list1.next;\\n            }\\n            else{\\n                mergedPointer.next = new ListNode(list2.val);\\n                list2 = list2.next;\\n            }\\n                mergedPointer = mergedPointer.next;\\n        }\\n        if(list1 == null){\\n            mergedPointer.next = list2;\\n        }else if (list2 == null){\\n            mergedPointer.next = list1;\\n        }\\n        return merged;\\n    }  "
                    },
                    {
                        "username": "kellyir",
                        "content": "There doesn't appear to be any way for a null value linked list to be read as [] in javascript. It also is not understanding my logic here. If list1 doesn't have a length line 69 should never be read. \n\nerror:\nLine 69 in solution.js\n        while(i <= list1.length || i <= list2.length){\n\ncode:\n `68  if(list1 !== [] && list2 !== []){\n\n    69    while(i <= list1.length || i <= list2.length){`"
                    },
                    {
                        "username": "XOMehdi",
                        "content": "will the 2 lists always have the same length? why is it not specified?"
                    },
                    {
                        "username": "takashi4233",
                        "content": "Can someone tell me why the following code shows an error .\\n\\n`\\n\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]\\n\\n        print(list1.val)`\\n\\nError Message\\nAttributeError: \\'NoneType\\' object has no attribute \\'val\\'\\n    print(list1.val)\\nLine 9 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 69 in _driver (Solution.py)\\n    _driver()\\nLine 80 in <module> (Solution.py)"
                    },
                    {
                        "username": "Cha0ticAnt",
                        "content": "A list can be empty. That\\'s represented by None. So calling .val on that results in an error, so check to make sure that list1 != None before calling .val on it. You have assumed that the input lists have something in them, but the site is testing that the function still works if some of the given lists are empty. (Nobody said the lists couldn\\'t be empty.) It mentions NoneType because that\\'s the type of None, and it\\'s a variable\\'s type that determines what attributes it has. None doesn\\'t have val, and an empty container also doesn\\'t. In an abstract manner, None is technically still a list: it\\'s an empty list, at least it\\'s a representation of an empty list."
                    },
                    {
                        "username": "close27",
                        "content": "it seems that the challenge is to implement it in c++. Had to think about how to create head pointer and moving pointer seperately."
                    },
                    {
                        "username": "danielhasibuanpro",
                        "content": "Hi i was trying to solve this using python. My idea is to merge these two lists into one, flatten them and then sort them out. I am not sure why it won\\'t work? \\n"
                    }
                ]
            },
            {
                "id": 1715684,
                "content": [
                    {
                        "username": "Taterr",
                        "content": " `Merge the two lists in a one sorted list.`\\ndoes this mean that we create and return a new linked list, or do we have to append it to an existing list1/list2 and return the head of those 2?\\nthe question could be clearer in that aspect"
                    },
                    {
                        "username": "takashi4233",
                        "content": "You can return a new linked list. For no88 you need to use existing list. "
                    },
                    {
                        "username": "mrsnopi",
                        "content": "why is he writing list1 is not iterable?\\nlet arr = [...list1, ...list2]\\neverything works in vs code\\n"
                    },
                    {
                        "username": "chandupriya_06",
                        "content": "///// 12 ms \\n\\nclass Solution \\n{\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2)\\n    {\\n          if(!l1) return l2;\\n          if(!l2) return l1;\\n          ListNode*head=new ListNode();\\n          if(l1->val<l2->val){\\n              head->val=l1->val;\\n              head->next=mergeTwoLists(l1->next,l2);\\n          }else{\\n              head->val=l2->val;\\n              head->next=mergeTwoLists(l1,l2->next);\\n          }\\n        return head;\\n    }\\n\\n};"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "Java Code for Merge two Lists:\n \npublic ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode finalList=new ListNode(0);\n        ListNode dummyList=finalList;\n        if(list1==null && list2==null){\n            return null;\n        }\n        else{\n        ListNode list=new ListNode();\n            if(list1==null && list2!=null){\n                return list2;\n            }\n            else if(list1!=null && list2==null){\n                return list1;\n            }\n\n            else{\n                while(list2!=null){\n                    addValue(list1,list2.val);\n                    list2=list2.next;\n\n                }\n                return list1;\n            }\n\n        }\n\n    }\n\n    public void addValue(ListNode list, int value){\n        if(list==null){\n            return;\n        }\n        ListNode dummy=list;\n        boolean added=false;\n\n\n        while(dummy!=null) {\n            if(dummy.next==null && !added){\n                if(value>dummy.val){\n                    dummy.next=new ListNode(value);\n                    break;\n                }\n            }\n            if (value <= dummy.val) {\n                int a = dummy.val;\n                ListNode newList = new ListNode(a, dummy.next);\n                dummy.val = value;\n                dummy.next = newList;\n                added=true;\n                break;\n            }\n            dummy=dummy.next;\n        }\n    }"
                    },
                    {
                        "username": "EsraaAbodeif",
                        "content": "can someone please clerify to me why he is using  mergedPointer.next = new ListNode(list2.val);) , instead of  mergedPointer = new ListNode(list2.val); in this solution\\n\\npublic static ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        ListNode merged = new ListNode();\\n        ListNode mergedPointer = merged;\\n        while(list1 != null && list2 != null){\\n            if(list1.val < list2.val){\\n                mergedPointer.next= new ListNode(list1.val);\\n                list1 = list1.next;\\n            }\\n            else{\\n                mergedPointer.next = new ListNode(list2.val);\\n                list2 = list2.next;\\n            }\\n                mergedPointer = mergedPointer.next;\\n        }\\n        if(list1 == null){\\n            mergedPointer.next = list2;\\n        }else if (list2 == null){\\n            mergedPointer.next = list1;\\n        }\\n        return merged;\\n    }  "
                    },
                    {
                        "username": "kellyir",
                        "content": "There doesn't appear to be any way for a null value linked list to be read as [] in javascript. It also is not understanding my logic here. If list1 doesn't have a length line 69 should never be read. \n\nerror:\nLine 69 in solution.js\n        while(i <= list1.length || i <= list2.length){\n\ncode:\n `68  if(list1 !== [] && list2 !== []){\n\n    69    while(i <= list1.length || i <= list2.length){`"
                    },
                    {
                        "username": "XOMehdi",
                        "content": "will the 2 lists always have the same length? why is it not specified?"
                    },
                    {
                        "username": "takashi4233",
                        "content": "Can someone tell me why the following code shows an error .\\n\\n`\\n\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]\\n\\n        print(list1.val)`\\n\\nError Message\\nAttributeError: \\'NoneType\\' object has no attribute \\'val\\'\\n    print(list1.val)\\nLine 9 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 69 in _driver (Solution.py)\\n    _driver()\\nLine 80 in <module> (Solution.py)"
                    },
                    {
                        "username": "Cha0ticAnt",
                        "content": "A list can be empty. That\\'s represented by None. So calling .val on that results in an error, so check to make sure that list1 != None before calling .val on it. You have assumed that the input lists have something in them, but the site is testing that the function still works if some of the given lists are empty. (Nobody said the lists couldn\\'t be empty.) It mentions NoneType because that\\'s the type of None, and it\\'s a variable\\'s type that determines what attributes it has. None doesn\\'t have val, and an empty container also doesn\\'t. In an abstract manner, None is technically still a list: it\\'s an empty list, at least it\\'s a representation of an empty list."
                    },
                    {
                        "username": "close27",
                        "content": "it seems that the challenge is to implement it in c++. Had to think about how to create head pointer and moving pointer seperately."
                    },
                    {
                        "username": "danielhasibuanpro",
                        "content": "Hi i was trying to solve this using python. My idea is to merge these two lists into one, flatten them and then sort them out. I am not sure why it won\\'t work? \\n"
                    }
                ]
            },
            {
                "id": 1714874,
                "content": [
                    {
                        "username": "Taterr",
                        "content": " `Merge the two lists in a one sorted list.`\\ndoes this mean that we create and return a new linked list, or do we have to append it to an existing list1/list2 and return the head of those 2?\\nthe question could be clearer in that aspect"
                    },
                    {
                        "username": "takashi4233",
                        "content": "You can return a new linked list. For no88 you need to use existing list. "
                    },
                    {
                        "username": "mrsnopi",
                        "content": "why is he writing list1 is not iterable?\\nlet arr = [...list1, ...list2]\\neverything works in vs code\\n"
                    },
                    {
                        "username": "chandupriya_06",
                        "content": "///// 12 ms \\n\\nclass Solution \\n{\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2)\\n    {\\n          if(!l1) return l2;\\n          if(!l2) return l1;\\n          ListNode*head=new ListNode();\\n          if(l1->val<l2->val){\\n              head->val=l1->val;\\n              head->next=mergeTwoLists(l1->next,l2);\\n          }else{\\n              head->val=l2->val;\\n              head->next=mergeTwoLists(l1,l2->next);\\n          }\\n        return head;\\n    }\\n\\n};"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "Java Code for Merge two Lists:\n \npublic ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode finalList=new ListNode(0);\n        ListNode dummyList=finalList;\n        if(list1==null && list2==null){\n            return null;\n        }\n        else{\n        ListNode list=new ListNode();\n            if(list1==null && list2!=null){\n                return list2;\n            }\n            else if(list1!=null && list2==null){\n                return list1;\n            }\n\n            else{\n                while(list2!=null){\n                    addValue(list1,list2.val);\n                    list2=list2.next;\n\n                }\n                return list1;\n            }\n\n        }\n\n    }\n\n    public void addValue(ListNode list, int value){\n        if(list==null){\n            return;\n        }\n        ListNode dummy=list;\n        boolean added=false;\n\n\n        while(dummy!=null) {\n            if(dummy.next==null && !added){\n                if(value>dummy.val){\n                    dummy.next=new ListNode(value);\n                    break;\n                }\n            }\n            if (value <= dummy.val) {\n                int a = dummy.val;\n                ListNode newList = new ListNode(a, dummy.next);\n                dummy.val = value;\n                dummy.next = newList;\n                added=true;\n                break;\n            }\n            dummy=dummy.next;\n        }\n    }"
                    },
                    {
                        "username": "EsraaAbodeif",
                        "content": "can someone please clerify to me why he is using  mergedPointer.next = new ListNode(list2.val);) , instead of  mergedPointer = new ListNode(list2.val); in this solution\\n\\npublic static ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        ListNode merged = new ListNode();\\n        ListNode mergedPointer = merged;\\n        while(list1 != null && list2 != null){\\n            if(list1.val < list2.val){\\n                mergedPointer.next= new ListNode(list1.val);\\n                list1 = list1.next;\\n            }\\n            else{\\n                mergedPointer.next = new ListNode(list2.val);\\n                list2 = list2.next;\\n            }\\n                mergedPointer = mergedPointer.next;\\n        }\\n        if(list1 == null){\\n            mergedPointer.next = list2;\\n        }else if (list2 == null){\\n            mergedPointer.next = list1;\\n        }\\n        return merged;\\n    }  "
                    },
                    {
                        "username": "kellyir",
                        "content": "There doesn't appear to be any way for a null value linked list to be read as [] in javascript. It also is not understanding my logic here. If list1 doesn't have a length line 69 should never be read. \n\nerror:\nLine 69 in solution.js\n        while(i <= list1.length || i <= list2.length){\n\ncode:\n `68  if(list1 !== [] && list2 !== []){\n\n    69    while(i <= list1.length || i <= list2.length){`"
                    },
                    {
                        "username": "XOMehdi",
                        "content": "will the 2 lists always have the same length? why is it not specified?"
                    },
                    {
                        "username": "takashi4233",
                        "content": "Can someone tell me why the following code shows an error .\\n\\n`\\n\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]\\n\\n        print(list1.val)`\\n\\nError Message\\nAttributeError: \\'NoneType\\' object has no attribute \\'val\\'\\n    print(list1.val)\\nLine 9 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 69 in _driver (Solution.py)\\n    _driver()\\nLine 80 in <module> (Solution.py)"
                    },
                    {
                        "username": "Cha0ticAnt",
                        "content": "A list can be empty. That\\'s represented by None. So calling .val on that results in an error, so check to make sure that list1 != None before calling .val on it. You have assumed that the input lists have something in them, but the site is testing that the function still works if some of the given lists are empty. (Nobody said the lists couldn\\'t be empty.) It mentions NoneType because that\\'s the type of None, and it\\'s a variable\\'s type that determines what attributes it has. None doesn\\'t have val, and an empty container also doesn\\'t. In an abstract manner, None is technically still a list: it\\'s an empty list, at least it\\'s a representation of an empty list."
                    },
                    {
                        "username": "close27",
                        "content": "it seems that the challenge is to implement it in c++. Had to think about how to create head pointer and moving pointer seperately."
                    },
                    {
                        "username": "danielhasibuanpro",
                        "content": "Hi i was trying to solve this using python. My idea is to merge these two lists into one, flatten them and then sort them out. I am not sure why it won\\'t work? \\n"
                    }
                ]
            },
            {
                "id": 1714538,
                "content": [
                    {
                        "username": "Taterr",
                        "content": " `Merge the two lists in a one sorted list.`\\ndoes this mean that we create and return a new linked list, or do we have to append it to an existing list1/list2 and return the head of those 2?\\nthe question could be clearer in that aspect"
                    },
                    {
                        "username": "takashi4233",
                        "content": "You can return a new linked list. For no88 you need to use existing list. "
                    },
                    {
                        "username": "mrsnopi",
                        "content": "why is he writing list1 is not iterable?\\nlet arr = [...list1, ...list2]\\neverything works in vs code\\n"
                    },
                    {
                        "username": "chandupriya_06",
                        "content": "///// 12 ms \\n\\nclass Solution \\n{\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2)\\n    {\\n          if(!l1) return l2;\\n          if(!l2) return l1;\\n          ListNode*head=new ListNode();\\n          if(l1->val<l2->val){\\n              head->val=l1->val;\\n              head->next=mergeTwoLists(l1->next,l2);\\n          }else{\\n              head->val=l2->val;\\n              head->next=mergeTwoLists(l1,l2->next);\\n          }\\n        return head;\\n    }\\n\\n};"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "Java Code for Merge two Lists:\n \npublic ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode finalList=new ListNode(0);\n        ListNode dummyList=finalList;\n        if(list1==null && list2==null){\n            return null;\n        }\n        else{\n        ListNode list=new ListNode();\n            if(list1==null && list2!=null){\n                return list2;\n            }\n            else if(list1!=null && list2==null){\n                return list1;\n            }\n\n            else{\n                while(list2!=null){\n                    addValue(list1,list2.val);\n                    list2=list2.next;\n\n                }\n                return list1;\n            }\n\n        }\n\n    }\n\n    public void addValue(ListNode list, int value){\n        if(list==null){\n            return;\n        }\n        ListNode dummy=list;\n        boolean added=false;\n\n\n        while(dummy!=null) {\n            if(dummy.next==null && !added){\n                if(value>dummy.val){\n                    dummy.next=new ListNode(value);\n                    break;\n                }\n            }\n            if (value <= dummy.val) {\n                int a = dummy.val;\n                ListNode newList = new ListNode(a, dummy.next);\n                dummy.val = value;\n                dummy.next = newList;\n                added=true;\n                break;\n            }\n            dummy=dummy.next;\n        }\n    }"
                    },
                    {
                        "username": "EsraaAbodeif",
                        "content": "can someone please clerify to me why he is using  mergedPointer.next = new ListNode(list2.val);) , instead of  mergedPointer = new ListNode(list2.val); in this solution\\n\\npublic static ListNode mergeTwoLists(ListNode list1, ListNode list2) {\\n        ListNode merged = new ListNode();\\n        ListNode mergedPointer = merged;\\n        while(list1 != null && list2 != null){\\n            if(list1.val < list2.val){\\n                mergedPointer.next= new ListNode(list1.val);\\n                list1 = list1.next;\\n            }\\n            else{\\n                mergedPointer.next = new ListNode(list2.val);\\n                list2 = list2.next;\\n            }\\n                mergedPointer = mergedPointer.next;\\n        }\\n        if(list1 == null){\\n            mergedPointer.next = list2;\\n        }else if (list2 == null){\\n            mergedPointer.next = list1;\\n        }\\n        return merged;\\n    }  "
                    },
                    {
                        "username": "kellyir",
                        "content": "There doesn't appear to be any way for a null value linked list to be read as [] in javascript. It also is not understanding my logic here. If list1 doesn't have a length line 69 should never be read. \n\nerror:\nLine 69 in solution.js\n        while(i <= list1.length || i <= list2.length){\n\ncode:\n `68  if(list1 !== [] && list2 !== []){\n\n    69    while(i <= list1.length || i <= list2.length){`"
                    },
                    {
                        "username": "XOMehdi",
                        "content": "will the 2 lists always have the same length? why is it not specified?"
                    },
                    {
                        "username": "takashi4233",
                        "content": "Can someone tell me why the following code shows an error .\\n\\n`\\n\\n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]\\n\\n        print(list1.val)`\\n\\nError Message\\nAttributeError: \\'NoneType\\' object has no attribute \\'val\\'\\n    print(list1.val)\\nLine 9 in mergeTwoLists (Solution.py)\\n    ret = Solution().mergeTwoLists(param_1, param_2)\\nLine 69 in _driver (Solution.py)\\n    _driver()\\nLine 80 in <module> (Solution.py)"
                    },
                    {
                        "username": "Cha0ticAnt",
                        "content": "A list can be empty. That\\'s represented by None. So calling .val on that results in an error, so check to make sure that list1 != None before calling .val on it. You have assumed that the input lists have something in them, but the site is testing that the function still works if some of the given lists are empty. (Nobody said the lists couldn\\'t be empty.) It mentions NoneType because that\\'s the type of None, and it\\'s a variable\\'s type that determines what attributes it has. None doesn\\'t have val, and an empty container also doesn\\'t. In an abstract manner, None is technically still a list: it\\'s an empty list, at least it\\'s a representation of an empty list."
                    },
                    {
                        "username": "close27",
                        "content": "it seems that the challenge is to implement it in c++. Had to think about how to create head pointer and moving pointer seperately."
                    },
                    {
                        "username": "danielhasibuanpro",
                        "content": "Hi i was trying to solve this using python. My idea is to merge these two lists into one, flatten them and then sort them out. I am not sure why it won\\'t work? \\n"
                    }
                ]
            },
            {
                "id": 1714506,
                "content": [
                    {
                        "username": "AkselJensen",
                        "content": "I call my solution \"Das Boot\". It uses a helper function called \"submerge\"."
                    },
                    {
                        "username": "AkselJensen",
                        "content": "After solving the problem I copied the fastest solution verbatim and submitted it. It performed worse than my first submission. Different Python3 minor versions?"
                    },
                    {
                        "username": "akshita_kiet",
                        "content": "runtime error: member access within null pointer of type \\'ListNode\\'  how should i resolv this error"
                    },
                    {
                        "username": "kaibrabo",
                        "content": "literally says \"list1 and list2 are in non-decreasing order\", so that means your linked list should be in \"non-decreasing order\" you goofs"
                    },
                    {
                        "username": "fclaw007",
                        "content": "What is the definition of an empty list? How can I convert  an empty array into the given list if i am not allowed to extend the list in any way?\nIn my opinion an empty list must be initiated by constructor with all fields optional. In the code we see that val field is strict on its type, therefore  this definition curbs getting an empty list initiated empty "
                    },
                    {
                        "username": "dev-ravikiran-rk",
                        "content": "```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n    ListNode* head;\\n    ListNode* tail;\\n    head = nullptr;\\n    tail = nullptr;\\n    //When both not null\\n    while((list1 != nullptr) && (list2 != nullptr)){\\n        // check if head is null \\n        if(head == nullptr){\\n            //if list1 < list2 then head head of merged list will be head list1\\n            if(list1->val < list2->val) {head = list1; list1 = list1->next; }\\n            else {head = list2; list2 = list2->next;}\\n            tail = head;\\n        }\\n        else{\\n            if(list1->val < list2->val) {\\n                tail->next = list1;\\n                tail = tail->next; \\n                list1 = list1->next; \\n            }\\n            else {\\n                tail->next = list2; \\n                tail = tail->next;\\n                list2 = list2->next;\\n            }\\n        }\\n    }\\n    //when list1 is null\\n    if(list1 == nullptr) tail->next = list2;\\n    //when list2 is null\\n    if(list2 == nullptr) tail->next = list1;\\n    return head;\\n    }\\n};\\n```\\nCan some tell me  what mistake I am making?"
                    },
                    {
                        "username": "15rishika",
                        "content": "why should we return head.next and why not head can anyone pz help"
                    },
                    {
                        "username": "AshishRautela",
                        "content": "wht is the error?\\n\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==nullptr) return list2;\\n        if(list2==nullptr) return list1;\\n\\n        ListNode *list3=new ListNode(),*temp=new ListNode();\\n        temp=list3;\\n        while(list1&&list2){\\n        if(list1->val<=list2->val){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;\\n        }\\n        else{\\n            list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next;\\n        }\\n        }\\n        while(list1){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;  \\n        }\\n        while(list2){\\n             list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next; \\n\\n        }\\n    return temp;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "AshishRautela",
                        "content": "wht is the error in thid code??\\n\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==nullptr) return list2;\\n        if(list2==nullptr) return list1;\\n\\n        ListNode *list3=new ListNode(),*temp=new ListNode();\\n        temp=list3;\\n        while(list1&&list2){\\n        if(list1->val<=list2->val){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;\\n        }\\n        else{\\n            list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next;\\n        }\\n        }\\n        while(list1){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;  \\n        }\\n        while(list2){\\n             list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next; \\n\\n        }\\n    return temp;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "kairatovalmat2003",
                        "content": "How can i send the Listnode value in Java? I cant even run the program\\nthis one is wrong*\\nSystem.out.println(s.mergeTwoLists(new ListNode(){1, 2, 4}, new ListNode(){1, 3, 5}));"
                    }
                ]
            },
            {
                "id": 1714488,
                "content": [
                    {
                        "username": "AkselJensen",
                        "content": "I call my solution \"Das Boot\". It uses a helper function called \"submerge\"."
                    },
                    {
                        "username": "AkselJensen",
                        "content": "After solving the problem I copied the fastest solution verbatim and submitted it. It performed worse than my first submission. Different Python3 minor versions?"
                    },
                    {
                        "username": "akshita_kiet",
                        "content": "runtime error: member access within null pointer of type \\'ListNode\\'  how should i resolv this error"
                    },
                    {
                        "username": "kaibrabo",
                        "content": "literally says \"list1 and list2 are in non-decreasing order\", so that means your linked list should be in \"non-decreasing order\" you goofs"
                    },
                    {
                        "username": "fclaw007",
                        "content": "What is the definition of an empty list? How can I convert  an empty array into the given list if i am not allowed to extend the list in any way?\nIn my opinion an empty list must be initiated by constructor with all fields optional. In the code we see that val field is strict on its type, therefore  this definition curbs getting an empty list initiated empty "
                    },
                    {
                        "username": "dev-ravikiran-rk",
                        "content": "```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n    ListNode* head;\\n    ListNode* tail;\\n    head = nullptr;\\n    tail = nullptr;\\n    //When both not null\\n    while((list1 != nullptr) && (list2 != nullptr)){\\n        // check if head is null \\n        if(head == nullptr){\\n            //if list1 < list2 then head head of merged list will be head list1\\n            if(list1->val < list2->val) {head = list1; list1 = list1->next; }\\n            else {head = list2; list2 = list2->next;}\\n            tail = head;\\n        }\\n        else{\\n            if(list1->val < list2->val) {\\n                tail->next = list1;\\n                tail = tail->next; \\n                list1 = list1->next; \\n            }\\n            else {\\n                tail->next = list2; \\n                tail = tail->next;\\n                list2 = list2->next;\\n            }\\n        }\\n    }\\n    //when list1 is null\\n    if(list1 == nullptr) tail->next = list2;\\n    //when list2 is null\\n    if(list2 == nullptr) tail->next = list1;\\n    return head;\\n    }\\n};\\n```\\nCan some tell me  what mistake I am making?"
                    },
                    {
                        "username": "15rishika",
                        "content": "why should we return head.next and why not head can anyone pz help"
                    },
                    {
                        "username": "AshishRautela",
                        "content": "wht is the error?\\n\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==nullptr) return list2;\\n        if(list2==nullptr) return list1;\\n\\n        ListNode *list3=new ListNode(),*temp=new ListNode();\\n        temp=list3;\\n        while(list1&&list2){\\n        if(list1->val<=list2->val){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;\\n        }\\n        else{\\n            list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next;\\n        }\\n        }\\n        while(list1){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;  \\n        }\\n        while(list2){\\n             list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next; \\n\\n        }\\n    return temp;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "AshishRautela",
                        "content": "wht is the error in thid code??\\n\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==nullptr) return list2;\\n        if(list2==nullptr) return list1;\\n\\n        ListNode *list3=new ListNode(),*temp=new ListNode();\\n        temp=list3;\\n        while(list1&&list2){\\n        if(list1->val<=list2->val){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;\\n        }\\n        else{\\n            list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next;\\n        }\\n        }\\n        while(list1){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;  \\n        }\\n        while(list2){\\n             list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next; \\n\\n        }\\n    return temp;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "kairatovalmat2003",
                        "content": "How can i send the Listnode value in Java? I cant even run the program\\nthis one is wrong*\\nSystem.out.println(s.mergeTwoLists(new ListNode(){1, 2, 4}, new ListNode(){1, 3, 5}));"
                    }
                ]
            },
            {
                "id": 1710755,
                "content": [
                    {
                        "username": "AkselJensen",
                        "content": "I call my solution \"Das Boot\". It uses a helper function called \"submerge\"."
                    },
                    {
                        "username": "AkselJensen",
                        "content": "After solving the problem I copied the fastest solution verbatim and submitted it. It performed worse than my first submission. Different Python3 minor versions?"
                    },
                    {
                        "username": "akshita_kiet",
                        "content": "runtime error: member access within null pointer of type \\'ListNode\\'  how should i resolv this error"
                    },
                    {
                        "username": "kaibrabo",
                        "content": "literally says \"list1 and list2 are in non-decreasing order\", so that means your linked list should be in \"non-decreasing order\" you goofs"
                    },
                    {
                        "username": "fclaw007",
                        "content": "What is the definition of an empty list? How can I convert  an empty array into the given list if i am not allowed to extend the list in any way?\nIn my opinion an empty list must be initiated by constructor with all fields optional. In the code we see that val field is strict on its type, therefore  this definition curbs getting an empty list initiated empty "
                    },
                    {
                        "username": "dev-ravikiran-rk",
                        "content": "```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n    ListNode* head;\\n    ListNode* tail;\\n    head = nullptr;\\n    tail = nullptr;\\n    //When both not null\\n    while((list1 != nullptr) && (list2 != nullptr)){\\n        // check if head is null \\n        if(head == nullptr){\\n            //if list1 < list2 then head head of merged list will be head list1\\n            if(list1->val < list2->val) {head = list1; list1 = list1->next; }\\n            else {head = list2; list2 = list2->next;}\\n            tail = head;\\n        }\\n        else{\\n            if(list1->val < list2->val) {\\n                tail->next = list1;\\n                tail = tail->next; \\n                list1 = list1->next; \\n            }\\n            else {\\n                tail->next = list2; \\n                tail = tail->next;\\n                list2 = list2->next;\\n            }\\n        }\\n    }\\n    //when list1 is null\\n    if(list1 == nullptr) tail->next = list2;\\n    //when list2 is null\\n    if(list2 == nullptr) tail->next = list1;\\n    return head;\\n    }\\n};\\n```\\nCan some tell me  what mistake I am making?"
                    },
                    {
                        "username": "15rishika",
                        "content": "why should we return head.next and why not head can anyone pz help"
                    },
                    {
                        "username": "AshishRautela",
                        "content": "wht is the error?\\n\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==nullptr) return list2;\\n        if(list2==nullptr) return list1;\\n\\n        ListNode *list3=new ListNode(),*temp=new ListNode();\\n        temp=list3;\\n        while(list1&&list2){\\n        if(list1->val<=list2->val){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;\\n        }\\n        else{\\n            list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next;\\n        }\\n        }\\n        while(list1){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;  \\n        }\\n        while(list2){\\n             list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next; \\n\\n        }\\n    return temp;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "AshishRautela",
                        "content": "wht is the error in thid code??\\n\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==nullptr) return list2;\\n        if(list2==nullptr) return list1;\\n\\n        ListNode *list3=new ListNode(),*temp=new ListNode();\\n        temp=list3;\\n        while(list1&&list2){\\n        if(list1->val<=list2->val){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;\\n        }\\n        else{\\n            list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next;\\n        }\\n        }\\n        while(list1){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;  \\n        }\\n        while(list2){\\n             list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next; \\n\\n        }\\n    return temp;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "kairatovalmat2003",
                        "content": "How can i send the Listnode value in Java? I cant even run the program\\nthis one is wrong*\\nSystem.out.println(s.mergeTwoLists(new ListNode(){1, 2, 4}, new ListNode(){1, 3, 5}));"
                    }
                ]
            },
            {
                "id": 1710532,
                "content": [
                    {
                        "username": "AkselJensen",
                        "content": "I call my solution \"Das Boot\". It uses a helper function called \"submerge\"."
                    },
                    {
                        "username": "AkselJensen",
                        "content": "After solving the problem I copied the fastest solution verbatim and submitted it. It performed worse than my first submission. Different Python3 minor versions?"
                    },
                    {
                        "username": "akshita_kiet",
                        "content": "runtime error: member access within null pointer of type \\'ListNode\\'  how should i resolv this error"
                    },
                    {
                        "username": "kaibrabo",
                        "content": "literally says \"list1 and list2 are in non-decreasing order\", so that means your linked list should be in \"non-decreasing order\" you goofs"
                    },
                    {
                        "username": "fclaw007",
                        "content": "What is the definition of an empty list? How can I convert  an empty array into the given list if i am not allowed to extend the list in any way?\nIn my opinion an empty list must be initiated by constructor with all fields optional. In the code we see that val field is strict on its type, therefore  this definition curbs getting an empty list initiated empty "
                    },
                    {
                        "username": "dev-ravikiran-rk",
                        "content": "```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n    ListNode* head;\\n    ListNode* tail;\\n    head = nullptr;\\n    tail = nullptr;\\n    //When both not null\\n    while((list1 != nullptr) && (list2 != nullptr)){\\n        // check if head is null \\n        if(head == nullptr){\\n            //if list1 < list2 then head head of merged list will be head list1\\n            if(list1->val < list2->val) {head = list1; list1 = list1->next; }\\n            else {head = list2; list2 = list2->next;}\\n            tail = head;\\n        }\\n        else{\\n            if(list1->val < list2->val) {\\n                tail->next = list1;\\n                tail = tail->next; \\n                list1 = list1->next; \\n            }\\n            else {\\n                tail->next = list2; \\n                tail = tail->next;\\n                list2 = list2->next;\\n            }\\n        }\\n    }\\n    //when list1 is null\\n    if(list1 == nullptr) tail->next = list2;\\n    //when list2 is null\\n    if(list2 == nullptr) tail->next = list1;\\n    return head;\\n    }\\n};\\n```\\nCan some tell me  what mistake I am making?"
                    },
                    {
                        "username": "15rishika",
                        "content": "why should we return head.next and why not head can anyone pz help"
                    },
                    {
                        "username": "AshishRautela",
                        "content": "wht is the error?\\n\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==nullptr) return list2;\\n        if(list2==nullptr) return list1;\\n\\n        ListNode *list3=new ListNode(),*temp=new ListNode();\\n        temp=list3;\\n        while(list1&&list2){\\n        if(list1->val<=list2->val){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;\\n        }\\n        else{\\n            list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next;\\n        }\\n        }\\n        while(list1){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;  \\n        }\\n        while(list2){\\n             list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next; \\n\\n        }\\n    return temp;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "AshishRautela",
                        "content": "wht is the error in thid code??\\n\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==nullptr) return list2;\\n        if(list2==nullptr) return list1;\\n\\n        ListNode *list3=new ListNode(),*temp=new ListNode();\\n        temp=list3;\\n        while(list1&&list2){\\n        if(list1->val<=list2->val){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;\\n        }\\n        else{\\n            list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next;\\n        }\\n        }\\n        while(list1){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;  \\n        }\\n        while(list2){\\n             list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next; \\n\\n        }\\n    return temp;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "kairatovalmat2003",
                        "content": "How can i send the Listnode value in Java? I cant even run the program\\nthis one is wrong*\\nSystem.out.println(s.mergeTwoLists(new ListNode(){1, 2, 4}, new ListNode(){1, 3, 5}));"
                    }
                ]
            },
            {
                "id": 1708892,
                "content": [
                    {
                        "username": "AkselJensen",
                        "content": "I call my solution \"Das Boot\". It uses a helper function called \"submerge\"."
                    },
                    {
                        "username": "AkselJensen",
                        "content": "After solving the problem I copied the fastest solution verbatim and submitted it. It performed worse than my first submission. Different Python3 minor versions?"
                    },
                    {
                        "username": "akshita_kiet",
                        "content": "runtime error: member access within null pointer of type \\'ListNode\\'  how should i resolv this error"
                    },
                    {
                        "username": "kaibrabo",
                        "content": "literally says \"list1 and list2 are in non-decreasing order\", so that means your linked list should be in \"non-decreasing order\" you goofs"
                    },
                    {
                        "username": "fclaw007",
                        "content": "What is the definition of an empty list? How can I convert  an empty array into the given list if i am not allowed to extend the list in any way?\nIn my opinion an empty list must be initiated by constructor with all fields optional. In the code we see that val field is strict on its type, therefore  this definition curbs getting an empty list initiated empty "
                    },
                    {
                        "username": "dev-ravikiran-rk",
                        "content": "```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n    ListNode* head;\\n    ListNode* tail;\\n    head = nullptr;\\n    tail = nullptr;\\n    //When both not null\\n    while((list1 != nullptr) && (list2 != nullptr)){\\n        // check if head is null \\n        if(head == nullptr){\\n            //if list1 < list2 then head head of merged list will be head list1\\n            if(list1->val < list2->val) {head = list1; list1 = list1->next; }\\n            else {head = list2; list2 = list2->next;}\\n            tail = head;\\n        }\\n        else{\\n            if(list1->val < list2->val) {\\n                tail->next = list1;\\n                tail = tail->next; \\n                list1 = list1->next; \\n            }\\n            else {\\n                tail->next = list2; \\n                tail = tail->next;\\n                list2 = list2->next;\\n            }\\n        }\\n    }\\n    //when list1 is null\\n    if(list1 == nullptr) tail->next = list2;\\n    //when list2 is null\\n    if(list2 == nullptr) tail->next = list1;\\n    return head;\\n    }\\n};\\n```\\nCan some tell me  what mistake I am making?"
                    },
                    {
                        "username": "15rishika",
                        "content": "why should we return head.next and why not head can anyone pz help"
                    },
                    {
                        "username": "AshishRautela",
                        "content": "wht is the error?\\n\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==nullptr) return list2;\\n        if(list2==nullptr) return list1;\\n\\n        ListNode *list3=new ListNode(),*temp=new ListNode();\\n        temp=list3;\\n        while(list1&&list2){\\n        if(list1->val<=list2->val){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;\\n        }\\n        else{\\n            list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next;\\n        }\\n        }\\n        while(list1){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;  \\n        }\\n        while(list2){\\n             list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next; \\n\\n        }\\n    return temp;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "AshishRautela",
                        "content": "wht is the error in thid code??\\n\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==nullptr) return list2;\\n        if(list2==nullptr) return list1;\\n\\n        ListNode *list3=new ListNode(),*temp=new ListNode();\\n        temp=list3;\\n        while(list1&&list2){\\n        if(list1->val<=list2->val){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;\\n        }\\n        else{\\n            list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next;\\n        }\\n        }\\n        while(list1){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;  \\n        }\\n        while(list2){\\n             list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next; \\n\\n        }\\n    return temp;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "kairatovalmat2003",
                        "content": "How can i send the Listnode value in Java? I cant even run the program\\nthis one is wrong*\\nSystem.out.println(s.mergeTwoLists(new ListNode(){1, 2, 4}, new ListNode(){1, 3, 5}));"
                    }
                ]
            },
            {
                "id": 1707691,
                "content": [
                    {
                        "username": "AkselJensen",
                        "content": "I call my solution \"Das Boot\". It uses a helper function called \"submerge\"."
                    },
                    {
                        "username": "AkselJensen",
                        "content": "After solving the problem I copied the fastest solution verbatim and submitted it. It performed worse than my first submission. Different Python3 minor versions?"
                    },
                    {
                        "username": "akshita_kiet",
                        "content": "runtime error: member access within null pointer of type \\'ListNode\\'  how should i resolv this error"
                    },
                    {
                        "username": "kaibrabo",
                        "content": "literally says \"list1 and list2 are in non-decreasing order\", so that means your linked list should be in \"non-decreasing order\" you goofs"
                    },
                    {
                        "username": "fclaw007",
                        "content": "What is the definition of an empty list? How can I convert  an empty array into the given list if i am not allowed to extend the list in any way?\nIn my opinion an empty list must be initiated by constructor with all fields optional. In the code we see that val field is strict on its type, therefore  this definition curbs getting an empty list initiated empty "
                    },
                    {
                        "username": "dev-ravikiran-rk",
                        "content": "```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n    ListNode* head;\\n    ListNode* tail;\\n    head = nullptr;\\n    tail = nullptr;\\n    //When both not null\\n    while((list1 != nullptr) && (list2 != nullptr)){\\n        // check if head is null \\n        if(head == nullptr){\\n            //if list1 < list2 then head head of merged list will be head list1\\n            if(list1->val < list2->val) {head = list1; list1 = list1->next; }\\n            else {head = list2; list2 = list2->next;}\\n            tail = head;\\n        }\\n        else{\\n            if(list1->val < list2->val) {\\n                tail->next = list1;\\n                tail = tail->next; \\n                list1 = list1->next; \\n            }\\n            else {\\n                tail->next = list2; \\n                tail = tail->next;\\n                list2 = list2->next;\\n            }\\n        }\\n    }\\n    //when list1 is null\\n    if(list1 == nullptr) tail->next = list2;\\n    //when list2 is null\\n    if(list2 == nullptr) tail->next = list1;\\n    return head;\\n    }\\n};\\n```\\nCan some tell me  what mistake I am making?"
                    },
                    {
                        "username": "15rishika",
                        "content": "why should we return head.next and why not head can anyone pz help"
                    },
                    {
                        "username": "AshishRautela",
                        "content": "wht is the error?\\n\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==nullptr) return list2;\\n        if(list2==nullptr) return list1;\\n\\n        ListNode *list3=new ListNode(),*temp=new ListNode();\\n        temp=list3;\\n        while(list1&&list2){\\n        if(list1->val<=list2->val){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;\\n        }\\n        else{\\n            list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next;\\n        }\\n        }\\n        while(list1){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;  \\n        }\\n        while(list2){\\n             list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next; \\n\\n        }\\n    return temp;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "AshishRautela",
                        "content": "wht is the error in thid code??\\n\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==nullptr) return list2;\\n        if(list2==nullptr) return list1;\\n\\n        ListNode *list3=new ListNode(),*temp=new ListNode();\\n        temp=list3;\\n        while(list1&&list2){\\n        if(list1->val<=list2->val){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;\\n        }\\n        else{\\n            list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next;\\n        }\\n        }\\n        while(list1){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;  \\n        }\\n        while(list2){\\n             list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next; \\n\\n        }\\n    return temp;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "kairatovalmat2003",
                        "content": "How can i send the Listnode value in Java? I cant even run the program\\nthis one is wrong*\\nSystem.out.println(s.mergeTwoLists(new ListNode(){1, 2, 4}, new ListNode(){1, 3, 5}));"
                    }
                ]
            },
            {
                "id": 1705416,
                "content": [
                    {
                        "username": "AkselJensen",
                        "content": "I call my solution \"Das Boot\". It uses a helper function called \"submerge\"."
                    },
                    {
                        "username": "AkselJensen",
                        "content": "After solving the problem I copied the fastest solution verbatim and submitted it. It performed worse than my first submission. Different Python3 minor versions?"
                    },
                    {
                        "username": "akshita_kiet",
                        "content": "runtime error: member access within null pointer of type \\'ListNode\\'  how should i resolv this error"
                    },
                    {
                        "username": "kaibrabo",
                        "content": "literally says \"list1 and list2 are in non-decreasing order\", so that means your linked list should be in \"non-decreasing order\" you goofs"
                    },
                    {
                        "username": "fclaw007",
                        "content": "What is the definition of an empty list? How can I convert  an empty array into the given list if i am not allowed to extend the list in any way?\nIn my opinion an empty list must be initiated by constructor with all fields optional. In the code we see that val field is strict on its type, therefore  this definition curbs getting an empty list initiated empty "
                    },
                    {
                        "username": "dev-ravikiran-rk",
                        "content": "```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n    ListNode* head;\\n    ListNode* tail;\\n    head = nullptr;\\n    tail = nullptr;\\n    //When both not null\\n    while((list1 != nullptr) && (list2 != nullptr)){\\n        // check if head is null \\n        if(head == nullptr){\\n            //if list1 < list2 then head head of merged list will be head list1\\n            if(list1->val < list2->val) {head = list1; list1 = list1->next; }\\n            else {head = list2; list2 = list2->next;}\\n            tail = head;\\n        }\\n        else{\\n            if(list1->val < list2->val) {\\n                tail->next = list1;\\n                tail = tail->next; \\n                list1 = list1->next; \\n            }\\n            else {\\n                tail->next = list2; \\n                tail = tail->next;\\n                list2 = list2->next;\\n            }\\n        }\\n    }\\n    //when list1 is null\\n    if(list1 == nullptr) tail->next = list2;\\n    //when list2 is null\\n    if(list2 == nullptr) tail->next = list1;\\n    return head;\\n    }\\n};\\n```\\nCan some tell me  what mistake I am making?"
                    },
                    {
                        "username": "15rishika",
                        "content": "why should we return head.next and why not head can anyone pz help"
                    },
                    {
                        "username": "AshishRautela",
                        "content": "wht is the error?\\n\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==nullptr) return list2;\\n        if(list2==nullptr) return list1;\\n\\n        ListNode *list3=new ListNode(),*temp=new ListNode();\\n        temp=list3;\\n        while(list1&&list2){\\n        if(list1->val<=list2->val){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;\\n        }\\n        else{\\n            list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next;\\n        }\\n        }\\n        while(list1){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;  \\n        }\\n        while(list2){\\n             list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next; \\n\\n        }\\n    return temp;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "AshishRautela",
                        "content": "wht is the error in thid code??\\n\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==nullptr) return list2;\\n        if(list2==nullptr) return list1;\\n\\n        ListNode *list3=new ListNode(),*temp=new ListNode();\\n        temp=list3;\\n        while(list1&&list2){\\n        if(list1->val<=list2->val){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;\\n        }\\n        else{\\n            list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next;\\n        }\\n        }\\n        while(list1){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;  \\n        }\\n        while(list2){\\n             list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next; \\n\\n        }\\n    return temp;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "kairatovalmat2003",
                        "content": "How can i send the Listnode value in Java? I cant even run the program\\nthis one is wrong*\\nSystem.out.println(s.mergeTwoLists(new ListNode(){1, 2, 4}, new ListNode(){1, 3, 5}));"
                    }
                ]
            },
            {
                "id": 1704409,
                "content": [
                    {
                        "username": "AkselJensen",
                        "content": "I call my solution \"Das Boot\". It uses a helper function called \"submerge\"."
                    },
                    {
                        "username": "AkselJensen",
                        "content": "After solving the problem I copied the fastest solution verbatim and submitted it. It performed worse than my first submission. Different Python3 minor versions?"
                    },
                    {
                        "username": "akshita_kiet",
                        "content": "runtime error: member access within null pointer of type \\'ListNode\\'  how should i resolv this error"
                    },
                    {
                        "username": "kaibrabo",
                        "content": "literally says \"list1 and list2 are in non-decreasing order\", so that means your linked list should be in \"non-decreasing order\" you goofs"
                    },
                    {
                        "username": "fclaw007",
                        "content": "What is the definition of an empty list? How can I convert  an empty array into the given list if i am not allowed to extend the list in any way?\nIn my opinion an empty list must be initiated by constructor with all fields optional. In the code we see that val field is strict on its type, therefore  this definition curbs getting an empty list initiated empty "
                    },
                    {
                        "username": "dev-ravikiran-rk",
                        "content": "```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n    ListNode* head;\\n    ListNode* tail;\\n    head = nullptr;\\n    tail = nullptr;\\n    //When both not null\\n    while((list1 != nullptr) && (list2 != nullptr)){\\n        // check if head is null \\n        if(head == nullptr){\\n            //if list1 < list2 then head head of merged list will be head list1\\n            if(list1->val < list2->val) {head = list1; list1 = list1->next; }\\n            else {head = list2; list2 = list2->next;}\\n            tail = head;\\n        }\\n        else{\\n            if(list1->val < list2->val) {\\n                tail->next = list1;\\n                tail = tail->next; \\n                list1 = list1->next; \\n            }\\n            else {\\n                tail->next = list2; \\n                tail = tail->next;\\n                list2 = list2->next;\\n            }\\n        }\\n    }\\n    //when list1 is null\\n    if(list1 == nullptr) tail->next = list2;\\n    //when list2 is null\\n    if(list2 == nullptr) tail->next = list1;\\n    return head;\\n    }\\n};\\n```\\nCan some tell me  what mistake I am making?"
                    },
                    {
                        "username": "15rishika",
                        "content": "why should we return head.next and why not head can anyone pz help"
                    },
                    {
                        "username": "AshishRautela",
                        "content": "wht is the error?\\n\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==nullptr) return list2;\\n        if(list2==nullptr) return list1;\\n\\n        ListNode *list3=new ListNode(),*temp=new ListNode();\\n        temp=list3;\\n        while(list1&&list2){\\n        if(list1->val<=list2->val){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;\\n        }\\n        else{\\n            list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next;\\n        }\\n        }\\n        while(list1){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;  \\n        }\\n        while(list2){\\n             list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next; \\n\\n        }\\n    return temp;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "AshishRautela",
                        "content": "wht is the error in thid code??\\n\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==nullptr) return list2;\\n        if(list2==nullptr) return list1;\\n\\n        ListNode *list3=new ListNode(),*temp=new ListNode();\\n        temp=list3;\\n        while(list1&&list2){\\n        if(list1->val<=list2->val){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;\\n        }\\n        else{\\n            list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next;\\n        }\\n        }\\n        while(list1){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;  \\n        }\\n        while(list2){\\n             list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next; \\n\\n        }\\n    return temp;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "kairatovalmat2003",
                        "content": "How can i send the Listnode value in Java? I cant even run the program\\nthis one is wrong*\\nSystem.out.println(s.mergeTwoLists(new ListNode(){1, 2, 4}, new ListNode(){1, 3, 5}));"
                    }
                ]
            },
            {
                "id": 1704406,
                "content": [
                    {
                        "username": "AkselJensen",
                        "content": "I call my solution \"Das Boot\". It uses a helper function called \"submerge\"."
                    },
                    {
                        "username": "AkselJensen",
                        "content": "After solving the problem I copied the fastest solution verbatim and submitted it. It performed worse than my first submission. Different Python3 minor versions?"
                    },
                    {
                        "username": "akshita_kiet",
                        "content": "runtime error: member access within null pointer of type \\'ListNode\\'  how should i resolv this error"
                    },
                    {
                        "username": "kaibrabo",
                        "content": "literally says \"list1 and list2 are in non-decreasing order\", so that means your linked list should be in \"non-decreasing order\" you goofs"
                    },
                    {
                        "username": "fclaw007",
                        "content": "What is the definition of an empty list? How can I convert  an empty array into the given list if i am not allowed to extend the list in any way?\nIn my opinion an empty list must be initiated by constructor with all fields optional. In the code we see that val field is strict on its type, therefore  this definition curbs getting an empty list initiated empty "
                    },
                    {
                        "username": "dev-ravikiran-rk",
                        "content": "```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n    ListNode* head;\\n    ListNode* tail;\\n    head = nullptr;\\n    tail = nullptr;\\n    //When both not null\\n    while((list1 != nullptr) && (list2 != nullptr)){\\n        // check if head is null \\n        if(head == nullptr){\\n            //if list1 < list2 then head head of merged list will be head list1\\n            if(list1->val < list2->val) {head = list1; list1 = list1->next; }\\n            else {head = list2; list2 = list2->next;}\\n            tail = head;\\n        }\\n        else{\\n            if(list1->val < list2->val) {\\n                tail->next = list1;\\n                tail = tail->next; \\n                list1 = list1->next; \\n            }\\n            else {\\n                tail->next = list2; \\n                tail = tail->next;\\n                list2 = list2->next;\\n            }\\n        }\\n    }\\n    //when list1 is null\\n    if(list1 == nullptr) tail->next = list2;\\n    //when list2 is null\\n    if(list2 == nullptr) tail->next = list1;\\n    return head;\\n    }\\n};\\n```\\nCan some tell me  what mistake I am making?"
                    },
                    {
                        "username": "15rishika",
                        "content": "why should we return head.next and why not head can anyone pz help"
                    },
                    {
                        "username": "AshishRautela",
                        "content": "wht is the error?\\n\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==nullptr) return list2;\\n        if(list2==nullptr) return list1;\\n\\n        ListNode *list3=new ListNode(),*temp=new ListNode();\\n        temp=list3;\\n        while(list1&&list2){\\n        if(list1->val<=list2->val){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;\\n        }\\n        else{\\n            list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next;\\n        }\\n        }\\n        while(list1){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;  \\n        }\\n        while(list2){\\n             list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next; \\n\\n        }\\n    return temp;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "AshishRautela",
                        "content": "wht is the error in thid code??\\n\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==nullptr) return list2;\\n        if(list2==nullptr) return list1;\\n\\n        ListNode *list3=new ListNode(),*temp=new ListNode();\\n        temp=list3;\\n        while(list1&&list2){\\n        if(list1->val<=list2->val){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;\\n        }\\n        else{\\n            list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next;\\n        }\\n        }\\n        while(list1){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;  \\n        }\\n        while(list2){\\n             list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next; \\n\\n        }\\n    return temp;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "kairatovalmat2003",
                        "content": "How can i send the Listnode value in Java? I cant even run the program\\nthis one is wrong*\\nSystem.out.println(s.mergeTwoLists(new ListNode(){1, 2, 4}, new ListNode(){1, 3, 5}));"
                    }
                ]
            },
            {
                "id": 1694021,
                "content": [
                    {
                        "username": "AkselJensen",
                        "content": "I call my solution \"Das Boot\". It uses a helper function called \"submerge\"."
                    },
                    {
                        "username": "AkselJensen",
                        "content": "After solving the problem I copied the fastest solution verbatim and submitted it. It performed worse than my first submission. Different Python3 minor versions?"
                    },
                    {
                        "username": "akshita_kiet",
                        "content": "runtime error: member access within null pointer of type \\'ListNode\\'  how should i resolv this error"
                    },
                    {
                        "username": "kaibrabo",
                        "content": "literally says \"list1 and list2 are in non-decreasing order\", so that means your linked list should be in \"non-decreasing order\" you goofs"
                    },
                    {
                        "username": "fclaw007",
                        "content": "What is the definition of an empty list? How can I convert  an empty array into the given list if i am not allowed to extend the list in any way?\nIn my opinion an empty list must be initiated by constructor with all fields optional. In the code we see that val field is strict on its type, therefore  this definition curbs getting an empty list initiated empty "
                    },
                    {
                        "username": "dev-ravikiran-rk",
                        "content": "```\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n    ListNode* head;\\n    ListNode* tail;\\n    head = nullptr;\\n    tail = nullptr;\\n    //When both not null\\n    while((list1 != nullptr) && (list2 != nullptr)){\\n        // check if head is null \\n        if(head == nullptr){\\n            //if list1 < list2 then head head of merged list will be head list1\\n            if(list1->val < list2->val) {head = list1; list1 = list1->next; }\\n            else {head = list2; list2 = list2->next;}\\n            tail = head;\\n        }\\n        else{\\n            if(list1->val < list2->val) {\\n                tail->next = list1;\\n                tail = tail->next; \\n                list1 = list1->next; \\n            }\\n            else {\\n                tail->next = list2; \\n                tail = tail->next;\\n                list2 = list2->next;\\n            }\\n        }\\n    }\\n    //when list1 is null\\n    if(list1 == nullptr) tail->next = list2;\\n    //when list2 is null\\n    if(list2 == nullptr) tail->next = list1;\\n    return head;\\n    }\\n};\\n```\\nCan some tell me  what mistake I am making?"
                    },
                    {
                        "username": "15rishika",
                        "content": "why should we return head.next and why not head can anyone pz help"
                    },
                    {
                        "username": "AshishRautela",
                        "content": "wht is the error?\\n\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==nullptr) return list2;\\n        if(list2==nullptr) return list1;\\n\\n        ListNode *list3=new ListNode(),*temp=new ListNode();\\n        temp=list3;\\n        while(list1&&list2){\\n        if(list1->val<=list2->val){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;\\n        }\\n        else{\\n            list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next;\\n        }\\n        }\\n        while(list1){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;  \\n        }\\n        while(list2){\\n             list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next; \\n\\n        }\\n    return temp;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "AshishRautela",
                        "content": "wht is the error in thid code??\\n\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if(list1==nullptr) return list2;\\n        if(list2==nullptr) return list1;\\n\\n        ListNode *list3=new ListNode(),*temp=new ListNode();\\n        temp=list3;\\n        while(list1&&list2){\\n        if(list1->val<=list2->val){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;\\n        }\\n        else{\\n            list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next;\\n        }\\n        }\\n        while(list1){\\n            list3->val=list1->val;\\n            list3->next=nullptr;\\n            list1=list1->next;  \\n        }\\n        while(list2){\\n             list3->val=list2->val;\\n            list3->next=nullptr;\\n            list2=list2->next; \\n\\n        }\\n    return temp;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "kairatovalmat2003",
                        "content": "How can i send the Listnode value in Java? I cant even run the program\\nthis one is wrong*\\nSystem.out.println(s.mergeTwoLists(new ListNode(){1, 2, 4}, new ListNode(){1, 3, 5}));"
                    }
                ]
            },
            {
                "id": 1691608,
                "content": [
                    {
                        "username": "charlessrze",
                        "content": " ` const list = [];\n    list1.forEach(e => list.push(e));\n    list2.forEach(e => list.push(e));\n    return list.sort();`\nwhy it's not working???"
                    },
                    {
                        "username": "denkochev",
                        "content": "Coz we use custom type of data. You can google LinkedList in js."
                    },
                    {
                        "username": "hj414",
                        "content": "\\nCan someone explain why the below approach is considered as O(1) Space, we are creating a separate linked list with length len(l1) and and len(l2) right??\\n \\n`your inline code...your inline code...dummy = ListNode()\\n        cur = dummy\\n\\n        while list1 and list2:\\n            if list1.val < list2.val:\\n                cur.next = list1\\n                list1 = list1.next\\n            else:\\n                cur.next = list2\\n                list2 = list2.next\\n            cur=cur.next\\n        if list1!=None:\\n            cur.next = list1\\n        \\n        if list2!=None:\\n            cur.next = list2\\n            \\n        return dummy.next`\\n\\n\\n\\nso space complexity should be O( m + n ), where m and n are length of both the linked list correspondingly.\\n\\n"
                    },
                    {
                        "username": "itsabi_z1",
                        "content": "Here we are not creating new nodes, we are simply getting the nodes form List1 and List2 and chaining them. Hence this is considered as O(1) space. "
                    },
                    {
                        "username": "user7334rh",
                        "content": "My intuitive 1ms runtime Java Solution \n\nHi guys, \nBefore reading any solution I tried making my own version, and it works. \nIt seems like runtime is very good (no recursion) even though memory usage is not the best. \n\nWhat do you think of this solution ? \n\nThanks in advance. \n\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode list3 = new ListNode(0);\n        ListNode dummy_head = list3; \n\n        while(list1 != null || list2 != null){\n            if(list1 != null && list2 != null){\n                if(list1.val < list2.val){\n                    list3.next = new ListNode(list1.val);\n                    list1 = list1.next; \n                    list3 = list3.next; \n                }\n                else if (list1.val > list2.val){\n                    list3.next = new ListNode(list2.val);\n                    list2 = list2.next; \n                    list3 = list3.next; \n                }\n                else {\n                    list3.next = new ListNode(list2.val);\n                    list3.next.next = new ListNode(list2.val);\n                    list1 = list1.next; \n                    list2 = list2.next; \n                    list3 = list3.next.next; \n                }\n            }\n            else {\n                if(list1 == null && list2 != null){\n                    list3.next = new ListNode(list2.val);\n                    list3 = list3.next; \n                    list2 = list2.next; \n                }\n                else if(list1 != null && list2 == null){\n                    list3.next = new ListNode(list1.val);\n                    list3 = list3.next; \n                    list1 = list1.next; \n                }\n            }\n        }\n\n        return dummy_head.next;"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python, java, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-merge-two-sorted-lists-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-merge-two-sorted-lists-problem-solution.html)"
                    },
                    {
                        "username": "Srikar_PY",
                        "content": "public class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n        Boolean cond = true;\\n        ListNode prevList1 = new ListNode(0,null);\\n        ListNode tempList2;\\n        \\n        \\n        while(cond){\\n            if(list2.val < list1.val){\\n                tempList2 = list2;\\n                if(prevList1 == null){\\n                    prevList1 = list2;\\n                    prevList1.next = list1;\\n                }else{\\n                    prevList1.next = list2;\\n                    list2.next = list1;\\n                }\\n                if(tempList2.next == null){\\n                    cond = false;\\n                    break;\\n                }\\n                list2 = tempList2.next;\\n            \\n            }else{\\n                if(list1.next == null){\\n                    cond = false;\\n                    break;\\n                }\\n              \\n                prevList1.val = list1.val;\\n                prevList1.next = list1.next;\\n                list1 = list1.next;\\n            }\\n            \\n        }\\n        if(list2.next != null){\\n            list1.next = list2;\\n        }\\n        return list1;\\n        \\n    }\\n}\\n\\nHi everyone, above is my code. I am getting the below error.\\n\\nUnhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\\nAt Solution.MergeTwoLists(ListNode list1, ListNode list2)\\nAt __Driver__.Main(String[] args)\\n\\nI am not able to figure out, why this error is getting. Can someone help me?"
                    },
                    {
                        "username": "aryansinha1818",
                        "content": "Why is this code wrong? Can anyone debug it! \\n\\n`your inline code...your inline code...`class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* t = new ListNode();\\n        ListNode* p = t;\\n        if(list1 == NULL){\\n            return list2;\\n        }\\n        if(list2 == NULL){\\n            return list1;\\n        }\\n        while(list1 || list2){\\n            if(list1->val == list2->val){\\n                t->val = list1->val;\\n                t->next = new ListNode();\\n                t = t->next;\\n                t->val = list2->val;\\n                list1 = list1->next;\\n                list2 = list2->next;\\n            }\\n            else{\\n                if(list1->val < list2->val){\\n                    t->next = new ListNode(list1->val);\\n                    t = t->next;\\n                    // t->val = list1->val;\\n                    list1 = list1->next;\\n                }\\n                else{\\n                    t->next = new ListNode(list2->val);\\n                    t = t->next;\\n                    //t->val = list2->val;\\n                    list2 = list2->next;\\n                }\\n            }\\n        }\\n        return p;\\n    }\\n};"
                    },
                    {
                        "username": "FED4",
                        "content": "This resembles the merge step in the merge sort. With a dummy root node, the initialization of current result pointer p can be as easy as ListNode* p = dummy. The real root node is just dummy->next. Notice that sorting in increasing order requires list1->val < list2->val. I am assuming list1  and list2 are passed by copy (the function can't change pointer itself) so it is ok to modify them. It is a better practice to back-up  list1 and list2 and do mergeTwoLists(ListNode* const list1, ListNode* const list2).\n\n`class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        ListNode* dummy = new ListNode();\n        ListNode* p = dummy;\n        while(list1 != nullptr && list2 != nullptr)\n        {\n            if(list1->val < list2->val)\n            {\n                p->next = list1;\n                list1 = list1->next;\n            }\n            else\n            {\n                p->next = list2;\n                list2 = list2->next;\n            }\n            p = p->next;\n        }\n        while(list1 != nullptr)\n        {\n            p->next = list1;\n            list1 = list1->next;\n            p = p->next;\n        }\n        while(list2 != nullptr)\n        {\n             p->next = list2;\n            list2 = list2->next;\n            p = p->next;\n        }\n        return dummy->next;\n    }\n};`"
                    },
                    {
                        "username": "bobasafe",
                        "content": "Nice solution but can you explain these two statements \\nListNode* dummy = new ListNode();\\nListNode* p = dummy\\nthese two seem to be the key factors of the whole algorithm, I assume that the dummy points to the created Node, and then I assume P is reference dummy so that way dummy ->next is returned by reference corect? because my solution wouldn\\'t work and I like it too.. here\\n\\n\\nListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\nListNode fake(-1); //dummy node\\nListNode* listCombined = &fake;\\nwhile(list1 != nullptr && list2 != nullptr){\\nif(list1->val < list2->val){\\nlistCombined->next = list1;\\nlistCombined = list1;\\nlist1 = list1->next;\\n}\\nelse{\\nlistCombined->next = list2;\\nlistCombined = list2;\\nlist2 = list2->next;\\n}\\n}\\nwhile(list1 != nullptr){\\nlistCombined->next = list1;\\n}\\nwhile(list2 != nullptr){\\nlistCombined->next = list2;\\n}\\nreturn fake.next;\\n}"
                    },
                    {
                        "username": "andrefontes",
                        "content": "Is there any reason why the zip() function does not work here? My code works perfectly in every testcase on PyCharm but here I get the error:\\n\\nTypeError: zip argument #1 must support iteration\\n"
                    },
                    {
                        "username": "andrefontes",
                        "content": "My code works fine on PyCharm but here it keeps giving me an error in the zip() function. Any ideas why?\\ndef mergeTwoLists(self, list1, list2):\\n        list3 = []\\n        for a, b in zip(list1, list2):\\n            list3.append(a)\\n            list3.append(b)\\n        return sorted(list3)"
                    },
                    {
                        "username": "bobasafe",
                        "content": "Generally confused, I was writing down on my whiteboard the problem and for some reason it is not accepting it.... Here is the problem why is it saying \"time exceeding\"\\n\\n\\n ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode fake(-1);  //dummy node\\n        ListNode* listCombined = &fake;  \\n        while(list1 != nullptr && list2 != nullptr){\\n            if(list1->val < list2->val){\\n                listCombined->next = list1;\\n                listCombined = list1;\\n                list1 = list1->next;\\n            }\\n            else{\\n                listCombined->next = list2;\\n                listCombined = list2;\\n                list2 = list2->next;\\n            }\\n        }\\n        while(list1 != nullptr){\\n            listCombined->next = list1;\\n        }\\n        while(list2 != nullptr){\\n            listCombined->next = list2;\\n        }\\n        return fake.next;\\n    }"
                    }
                ]
            },
            {
                "id": 1678675,
                "content": [
                    {
                        "username": "charlessrze",
                        "content": " ` const list = [];\n    list1.forEach(e => list.push(e));\n    list2.forEach(e => list.push(e));\n    return list.sort();`\nwhy it's not working???"
                    },
                    {
                        "username": "denkochev",
                        "content": "Coz we use custom type of data. You can google LinkedList in js."
                    },
                    {
                        "username": "hj414",
                        "content": "\\nCan someone explain why the below approach is considered as O(1) Space, we are creating a separate linked list with length len(l1) and and len(l2) right??\\n \\n`your inline code...your inline code...dummy = ListNode()\\n        cur = dummy\\n\\n        while list1 and list2:\\n            if list1.val < list2.val:\\n                cur.next = list1\\n                list1 = list1.next\\n            else:\\n                cur.next = list2\\n                list2 = list2.next\\n            cur=cur.next\\n        if list1!=None:\\n            cur.next = list1\\n        \\n        if list2!=None:\\n            cur.next = list2\\n            \\n        return dummy.next`\\n\\n\\n\\nso space complexity should be O( m + n ), where m and n are length of both the linked list correspondingly.\\n\\n"
                    },
                    {
                        "username": "itsabi_z1",
                        "content": "Here we are not creating new nodes, we are simply getting the nodes form List1 and List2 and chaining them. Hence this is considered as O(1) space. "
                    },
                    {
                        "username": "user7334rh",
                        "content": "My intuitive 1ms runtime Java Solution \n\nHi guys, \nBefore reading any solution I tried making my own version, and it works. \nIt seems like runtime is very good (no recursion) even though memory usage is not the best. \n\nWhat do you think of this solution ? \n\nThanks in advance. \n\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode list3 = new ListNode(0);\n        ListNode dummy_head = list3; \n\n        while(list1 != null || list2 != null){\n            if(list1 != null && list2 != null){\n                if(list1.val < list2.val){\n                    list3.next = new ListNode(list1.val);\n                    list1 = list1.next; \n                    list3 = list3.next; \n                }\n                else if (list1.val > list2.val){\n                    list3.next = new ListNode(list2.val);\n                    list2 = list2.next; \n                    list3 = list3.next; \n                }\n                else {\n                    list3.next = new ListNode(list2.val);\n                    list3.next.next = new ListNode(list2.val);\n                    list1 = list1.next; \n                    list2 = list2.next; \n                    list3 = list3.next.next; \n                }\n            }\n            else {\n                if(list1 == null && list2 != null){\n                    list3.next = new ListNode(list2.val);\n                    list3 = list3.next; \n                    list2 = list2.next; \n                }\n                else if(list1 != null && list2 == null){\n                    list3.next = new ListNode(list1.val);\n                    list3 = list3.next; \n                    list1 = list1.next; \n                }\n            }\n        }\n\n        return dummy_head.next;"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python, java, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-merge-two-sorted-lists-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-merge-two-sorted-lists-problem-solution.html)"
                    },
                    {
                        "username": "Srikar_PY",
                        "content": "public class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n        Boolean cond = true;\\n        ListNode prevList1 = new ListNode(0,null);\\n        ListNode tempList2;\\n        \\n        \\n        while(cond){\\n            if(list2.val < list1.val){\\n                tempList2 = list2;\\n                if(prevList1 == null){\\n                    prevList1 = list2;\\n                    prevList1.next = list1;\\n                }else{\\n                    prevList1.next = list2;\\n                    list2.next = list1;\\n                }\\n                if(tempList2.next == null){\\n                    cond = false;\\n                    break;\\n                }\\n                list2 = tempList2.next;\\n            \\n            }else{\\n                if(list1.next == null){\\n                    cond = false;\\n                    break;\\n                }\\n              \\n                prevList1.val = list1.val;\\n                prevList1.next = list1.next;\\n                list1 = list1.next;\\n            }\\n            \\n        }\\n        if(list2.next != null){\\n            list1.next = list2;\\n        }\\n        return list1;\\n        \\n    }\\n}\\n\\nHi everyone, above is my code. I am getting the below error.\\n\\nUnhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\\nAt Solution.MergeTwoLists(ListNode list1, ListNode list2)\\nAt __Driver__.Main(String[] args)\\n\\nI am not able to figure out, why this error is getting. Can someone help me?"
                    },
                    {
                        "username": "aryansinha1818",
                        "content": "Why is this code wrong? Can anyone debug it! \\n\\n`your inline code...your inline code...`class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* t = new ListNode();\\n        ListNode* p = t;\\n        if(list1 == NULL){\\n            return list2;\\n        }\\n        if(list2 == NULL){\\n            return list1;\\n        }\\n        while(list1 || list2){\\n            if(list1->val == list2->val){\\n                t->val = list1->val;\\n                t->next = new ListNode();\\n                t = t->next;\\n                t->val = list2->val;\\n                list1 = list1->next;\\n                list2 = list2->next;\\n            }\\n            else{\\n                if(list1->val < list2->val){\\n                    t->next = new ListNode(list1->val);\\n                    t = t->next;\\n                    // t->val = list1->val;\\n                    list1 = list1->next;\\n                }\\n                else{\\n                    t->next = new ListNode(list2->val);\\n                    t = t->next;\\n                    //t->val = list2->val;\\n                    list2 = list2->next;\\n                }\\n            }\\n        }\\n        return p;\\n    }\\n};"
                    },
                    {
                        "username": "FED4",
                        "content": "This resembles the merge step in the merge sort. With a dummy root node, the initialization of current result pointer p can be as easy as ListNode* p = dummy. The real root node is just dummy->next. Notice that sorting in increasing order requires list1->val < list2->val. I am assuming list1  and list2 are passed by copy (the function can't change pointer itself) so it is ok to modify them. It is a better practice to back-up  list1 and list2 and do mergeTwoLists(ListNode* const list1, ListNode* const list2).\n\n`class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        ListNode* dummy = new ListNode();\n        ListNode* p = dummy;\n        while(list1 != nullptr && list2 != nullptr)\n        {\n            if(list1->val < list2->val)\n            {\n                p->next = list1;\n                list1 = list1->next;\n            }\n            else\n            {\n                p->next = list2;\n                list2 = list2->next;\n            }\n            p = p->next;\n        }\n        while(list1 != nullptr)\n        {\n            p->next = list1;\n            list1 = list1->next;\n            p = p->next;\n        }\n        while(list2 != nullptr)\n        {\n             p->next = list2;\n            list2 = list2->next;\n            p = p->next;\n        }\n        return dummy->next;\n    }\n};`"
                    },
                    {
                        "username": "bobasafe",
                        "content": "Nice solution but can you explain these two statements \\nListNode* dummy = new ListNode();\\nListNode* p = dummy\\nthese two seem to be the key factors of the whole algorithm, I assume that the dummy points to the created Node, and then I assume P is reference dummy so that way dummy ->next is returned by reference corect? because my solution wouldn\\'t work and I like it too.. here\\n\\n\\nListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\nListNode fake(-1); //dummy node\\nListNode* listCombined = &fake;\\nwhile(list1 != nullptr && list2 != nullptr){\\nif(list1->val < list2->val){\\nlistCombined->next = list1;\\nlistCombined = list1;\\nlist1 = list1->next;\\n}\\nelse{\\nlistCombined->next = list2;\\nlistCombined = list2;\\nlist2 = list2->next;\\n}\\n}\\nwhile(list1 != nullptr){\\nlistCombined->next = list1;\\n}\\nwhile(list2 != nullptr){\\nlistCombined->next = list2;\\n}\\nreturn fake.next;\\n}"
                    },
                    {
                        "username": "andrefontes",
                        "content": "Is there any reason why the zip() function does not work here? My code works perfectly in every testcase on PyCharm but here I get the error:\\n\\nTypeError: zip argument #1 must support iteration\\n"
                    },
                    {
                        "username": "andrefontes",
                        "content": "My code works fine on PyCharm but here it keeps giving me an error in the zip() function. Any ideas why?\\ndef mergeTwoLists(self, list1, list2):\\n        list3 = []\\n        for a, b in zip(list1, list2):\\n            list3.append(a)\\n            list3.append(b)\\n        return sorted(list3)"
                    },
                    {
                        "username": "bobasafe",
                        "content": "Generally confused, I was writing down on my whiteboard the problem and for some reason it is not accepting it.... Here is the problem why is it saying \"time exceeding\"\\n\\n\\n ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode fake(-1);  //dummy node\\n        ListNode* listCombined = &fake;  \\n        while(list1 != nullptr && list2 != nullptr){\\n            if(list1->val < list2->val){\\n                listCombined->next = list1;\\n                listCombined = list1;\\n                list1 = list1->next;\\n            }\\n            else{\\n                listCombined->next = list2;\\n                listCombined = list2;\\n                list2 = list2->next;\\n            }\\n        }\\n        while(list1 != nullptr){\\n            listCombined->next = list1;\\n        }\\n        while(list2 != nullptr){\\n            listCombined->next = list2;\\n        }\\n        return fake.next;\\n    }"
                    }
                ]
            },
            {
                "id": 1675340,
                "content": [
                    {
                        "username": "charlessrze",
                        "content": " ` const list = [];\n    list1.forEach(e => list.push(e));\n    list2.forEach(e => list.push(e));\n    return list.sort();`\nwhy it's not working???"
                    },
                    {
                        "username": "denkochev",
                        "content": "Coz we use custom type of data. You can google LinkedList in js."
                    },
                    {
                        "username": "hj414",
                        "content": "\\nCan someone explain why the below approach is considered as O(1) Space, we are creating a separate linked list with length len(l1) and and len(l2) right??\\n \\n`your inline code...your inline code...dummy = ListNode()\\n        cur = dummy\\n\\n        while list1 and list2:\\n            if list1.val < list2.val:\\n                cur.next = list1\\n                list1 = list1.next\\n            else:\\n                cur.next = list2\\n                list2 = list2.next\\n            cur=cur.next\\n        if list1!=None:\\n            cur.next = list1\\n        \\n        if list2!=None:\\n            cur.next = list2\\n            \\n        return dummy.next`\\n\\n\\n\\nso space complexity should be O( m + n ), where m and n are length of both the linked list correspondingly.\\n\\n"
                    },
                    {
                        "username": "itsabi_z1",
                        "content": "Here we are not creating new nodes, we are simply getting the nodes form List1 and List2 and chaining them. Hence this is considered as O(1) space. "
                    },
                    {
                        "username": "user7334rh",
                        "content": "My intuitive 1ms runtime Java Solution \n\nHi guys, \nBefore reading any solution I tried making my own version, and it works. \nIt seems like runtime is very good (no recursion) even though memory usage is not the best. \n\nWhat do you think of this solution ? \n\nThanks in advance. \n\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode list3 = new ListNode(0);\n        ListNode dummy_head = list3; \n\n        while(list1 != null || list2 != null){\n            if(list1 != null && list2 != null){\n                if(list1.val < list2.val){\n                    list3.next = new ListNode(list1.val);\n                    list1 = list1.next; \n                    list3 = list3.next; \n                }\n                else if (list1.val > list2.val){\n                    list3.next = new ListNode(list2.val);\n                    list2 = list2.next; \n                    list3 = list3.next; \n                }\n                else {\n                    list3.next = new ListNode(list2.val);\n                    list3.next.next = new ListNode(list2.val);\n                    list1 = list1.next; \n                    list2 = list2.next; \n                    list3 = list3.next.next; \n                }\n            }\n            else {\n                if(list1 == null && list2 != null){\n                    list3.next = new ListNode(list2.val);\n                    list3 = list3.next; \n                    list2 = list2.next; \n                }\n                else if(list1 != null && list2 == null){\n                    list3.next = new ListNode(list1.val);\n                    list3 = list3.next; \n                    list1 = list1.next; \n                }\n            }\n        }\n\n        return dummy_head.next;"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python, java, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-merge-two-sorted-lists-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-merge-two-sorted-lists-problem-solution.html)"
                    },
                    {
                        "username": "Srikar_PY",
                        "content": "public class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n        Boolean cond = true;\\n        ListNode prevList1 = new ListNode(0,null);\\n        ListNode tempList2;\\n        \\n        \\n        while(cond){\\n            if(list2.val < list1.val){\\n                tempList2 = list2;\\n                if(prevList1 == null){\\n                    prevList1 = list2;\\n                    prevList1.next = list1;\\n                }else{\\n                    prevList1.next = list2;\\n                    list2.next = list1;\\n                }\\n                if(tempList2.next == null){\\n                    cond = false;\\n                    break;\\n                }\\n                list2 = tempList2.next;\\n            \\n            }else{\\n                if(list1.next == null){\\n                    cond = false;\\n                    break;\\n                }\\n              \\n                prevList1.val = list1.val;\\n                prevList1.next = list1.next;\\n                list1 = list1.next;\\n            }\\n            \\n        }\\n        if(list2.next != null){\\n            list1.next = list2;\\n        }\\n        return list1;\\n        \\n    }\\n}\\n\\nHi everyone, above is my code. I am getting the below error.\\n\\nUnhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\\nAt Solution.MergeTwoLists(ListNode list1, ListNode list2)\\nAt __Driver__.Main(String[] args)\\n\\nI am not able to figure out, why this error is getting. Can someone help me?"
                    },
                    {
                        "username": "aryansinha1818",
                        "content": "Why is this code wrong? Can anyone debug it! \\n\\n`your inline code...your inline code...`class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* t = new ListNode();\\n        ListNode* p = t;\\n        if(list1 == NULL){\\n            return list2;\\n        }\\n        if(list2 == NULL){\\n            return list1;\\n        }\\n        while(list1 || list2){\\n            if(list1->val == list2->val){\\n                t->val = list1->val;\\n                t->next = new ListNode();\\n                t = t->next;\\n                t->val = list2->val;\\n                list1 = list1->next;\\n                list2 = list2->next;\\n            }\\n            else{\\n                if(list1->val < list2->val){\\n                    t->next = new ListNode(list1->val);\\n                    t = t->next;\\n                    // t->val = list1->val;\\n                    list1 = list1->next;\\n                }\\n                else{\\n                    t->next = new ListNode(list2->val);\\n                    t = t->next;\\n                    //t->val = list2->val;\\n                    list2 = list2->next;\\n                }\\n            }\\n        }\\n        return p;\\n    }\\n};"
                    },
                    {
                        "username": "FED4",
                        "content": "This resembles the merge step in the merge sort. With a dummy root node, the initialization of current result pointer p can be as easy as ListNode* p = dummy. The real root node is just dummy->next. Notice that sorting in increasing order requires list1->val < list2->val. I am assuming list1  and list2 are passed by copy (the function can't change pointer itself) so it is ok to modify them. It is a better practice to back-up  list1 and list2 and do mergeTwoLists(ListNode* const list1, ListNode* const list2).\n\n`class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        ListNode* dummy = new ListNode();\n        ListNode* p = dummy;\n        while(list1 != nullptr && list2 != nullptr)\n        {\n            if(list1->val < list2->val)\n            {\n                p->next = list1;\n                list1 = list1->next;\n            }\n            else\n            {\n                p->next = list2;\n                list2 = list2->next;\n            }\n            p = p->next;\n        }\n        while(list1 != nullptr)\n        {\n            p->next = list1;\n            list1 = list1->next;\n            p = p->next;\n        }\n        while(list2 != nullptr)\n        {\n             p->next = list2;\n            list2 = list2->next;\n            p = p->next;\n        }\n        return dummy->next;\n    }\n};`"
                    },
                    {
                        "username": "bobasafe",
                        "content": "Nice solution but can you explain these two statements \\nListNode* dummy = new ListNode();\\nListNode* p = dummy\\nthese two seem to be the key factors of the whole algorithm, I assume that the dummy points to the created Node, and then I assume P is reference dummy so that way dummy ->next is returned by reference corect? because my solution wouldn\\'t work and I like it too.. here\\n\\n\\nListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\nListNode fake(-1); //dummy node\\nListNode* listCombined = &fake;\\nwhile(list1 != nullptr && list2 != nullptr){\\nif(list1->val < list2->val){\\nlistCombined->next = list1;\\nlistCombined = list1;\\nlist1 = list1->next;\\n}\\nelse{\\nlistCombined->next = list2;\\nlistCombined = list2;\\nlist2 = list2->next;\\n}\\n}\\nwhile(list1 != nullptr){\\nlistCombined->next = list1;\\n}\\nwhile(list2 != nullptr){\\nlistCombined->next = list2;\\n}\\nreturn fake.next;\\n}"
                    },
                    {
                        "username": "andrefontes",
                        "content": "Is there any reason why the zip() function does not work here? My code works perfectly in every testcase on PyCharm but here I get the error:\\n\\nTypeError: zip argument #1 must support iteration\\n"
                    },
                    {
                        "username": "andrefontes",
                        "content": "My code works fine on PyCharm but here it keeps giving me an error in the zip() function. Any ideas why?\\ndef mergeTwoLists(self, list1, list2):\\n        list3 = []\\n        for a, b in zip(list1, list2):\\n            list3.append(a)\\n            list3.append(b)\\n        return sorted(list3)"
                    },
                    {
                        "username": "bobasafe",
                        "content": "Generally confused, I was writing down on my whiteboard the problem and for some reason it is not accepting it.... Here is the problem why is it saying \"time exceeding\"\\n\\n\\n ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode fake(-1);  //dummy node\\n        ListNode* listCombined = &fake;  \\n        while(list1 != nullptr && list2 != nullptr){\\n            if(list1->val < list2->val){\\n                listCombined->next = list1;\\n                listCombined = list1;\\n                list1 = list1->next;\\n            }\\n            else{\\n                listCombined->next = list2;\\n                listCombined = list2;\\n                list2 = list2->next;\\n            }\\n        }\\n        while(list1 != nullptr){\\n            listCombined->next = list1;\\n        }\\n        while(list2 != nullptr){\\n            listCombined->next = list2;\\n        }\\n        return fake.next;\\n    }"
                    }
                ]
            },
            {
                "id": 1671274,
                "content": [
                    {
                        "username": "charlessrze",
                        "content": " ` const list = [];\n    list1.forEach(e => list.push(e));\n    list2.forEach(e => list.push(e));\n    return list.sort();`\nwhy it's not working???"
                    },
                    {
                        "username": "denkochev",
                        "content": "Coz we use custom type of data. You can google LinkedList in js."
                    },
                    {
                        "username": "hj414",
                        "content": "\\nCan someone explain why the below approach is considered as O(1) Space, we are creating a separate linked list with length len(l1) and and len(l2) right??\\n \\n`your inline code...your inline code...dummy = ListNode()\\n        cur = dummy\\n\\n        while list1 and list2:\\n            if list1.val < list2.val:\\n                cur.next = list1\\n                list1 = list1.next\\n            else:\\n                cur.next = list2\\n                list2 = list2.next\\n            cur=cur.next\\n        if list1!=None:\\n            cur.next = list1\\n        \\n        if list2!=None:\\n            cur.next = list2\\n            \\n        return dummy.next`\\n\\n\\n\\nso space complexity should be O( m + n ), where m and n are length of both the linked list correspondingly.\\n\\n"
                    },
                    {
                        "username": "itsabi_z1",
                        "content": "Here we are not creating new nodes, we are simply getting the nodes form List1 and List2 and chaining them. Hence this is considered as O(1) space. "
                    },
                    {
                        "username": "user7334rh",
                        "content": "My intuitive 1ms runtime Java Solution \n\nHi guys, \nBefore reading any solution I tried making my own version, and it works. \nIt seems like runtime is very good (no recursion) even though memory usage is not the best. \n\nWhat do you think of this solution ? \n\nThanks in advance. \n\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode list3 = new ListNode(0);\n        ListNode dummy_head = list3; \n\n        while(list1 != null || list2 != null){\n            if(list1 != null && list2 != null){\n                if(list1.val < list2.val){\n                    list3.next = new ListNode(list1.val);\n                    list1 = list1.next; \n                    list3 = list3.next; \n                }\n                else if (list1.val > list2.val){\n                    list3.next = new ListNode(list2.val);\n                    list2 = list2.next; \n                    list3 = list3.next; \n                }\n                else {\n                    list3.next = new ListNode(list2.val);\n                    list3.next.next = new ListNode(list2.val);\n                    list1 = list1.next; \n                    list2 = list2.next; \n                    list3 = list3.next.next; \n                }\n            }\n            else {\n                if(list1 == null && list2 != null){\n                    list3.next = new ListNode(list2.val);\n                    list3 = list3.next; \n                    list2 = list2.next; \n                }\n                else if(list1 != null && list2 == null){\n                    list3.next = new ListNode(list1.val);\n                    list3 = list3.next; \n                    list1 = list1.next; \n                }\n            }\n        }\n\n        return dummy_head.next;"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python, java, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-merge-two-sorted-lists-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-merge-two-sorted-lists-problem-solution.html)"
                    },
                    {
                        "username": "Srikar_PY",
                        "content": "public class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n        Boolean cond = true;\\n        ListNode prevList1 = new ListNode(0,null);\\n        ListNode tempList2;\\n        \\n        \\n        while(cond){\\n            if(list2.val < list1.val){\\n                tempList2 = list2;\\n                if(prevList1 == null){\\n                    prevList1 = list2;\\n                    prevList1.next = list1;\\n                }else{\\n                    prevList1.next = list2;\\n                    list2.next = list1;\\n                }\\n                if(tempList2.next == null){\\n                    cond = false;\\n                    break;\\n                }\\n                list2 = tempList2.next;\\n            \\n            }else{\\n                if(list1.next == null){\\n                    cond = false;\\n                    break;\\n                }\\n              \\n                prevList1.val = list1.val;\\n                prevList1.next = list1.next;\\n                list1 = list1.next;\\n            }\\n            \\n        }\\n        if(list2.next != null){\\n            list1.next = list2;\\n        }\\n        return list1;\\n        \\n    }\\n}\\n\\nHi everyone, above is my code. I am getting the below error.\\n\\nUnhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\\nAt Solution.MergeTwoLists(ListNode list1, ListNode list2)\\nAt __Driver__.Main(String[] args)\\n\\nI am not able to figure out, why this error is getting. Can someone help me?"
                    },
                    {
                        "username": "aryansinha1818",
                        "content": "Why is this code wrong? Can anyone debug it! \\n\\n`your inline code...your inline code...`class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* t = new ListNode();\\n        ListNode* p = t;\\n        if(list1 == NULL){\\n            return list2;\\n        }\\n        if(list2 == NULL){\\n            return list1;\\n        }\\n        while(list1 || list2){\\n            if(list1->val == list2->val){\\n                t->val = list1->val;\\n                t->next = new ListNode();\\n                t = t->next;\\n                t->val = list2->val;\\n                list1 = list1->next;\\n                list2 = list2->next;\\n            }\\n            else{\\n                if(list1->val < list2->val){\\n                    t->next = new ListNode(list1->val);\\n                    t = t->next;\\n                    // t->val = list1->val;\\n                    list1 = list1->next;\\n                }\\n                else{\\n                    t->next = new ListNode(list2->val);\\n                    t = t->next;\\n                    //t->val = list2->val;\\n                    list2 = list2->next;\\n                }\\n            }\\n        }\\n        return p;\\n    }\\n};"
                    },
                    {
                        "username": "FED4",
                        "content": "This resembles the merge step in the merge sort. With a dummy root node, the initialization of current result pointer p can be as easy as ListNode* p = dummy. The real root node is just dummy->next. Notice that sorting in increasing order requires list1->val < list2->val. I am assuming list1  and list2 are passed by copy (the function can't change pointer itself) so it is ok to modify them. It is a better practice to back-up  list1 and list2 and do mergeTwoLists(ListNode* const list1, ListNode* const list2).\n\n`class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        ListNode* dummy = new ListNode();\n        ListNode* p = dummy;\n        while(list1 != nullptr && list2 != nullptr)\n        {\n            if(list1->val < list2->val)\n            {\n                p->next = list1;\n                list1 = list1->next;\n            }\n            else\n            {\n                p->next = list2;\n                list2 = list2->next;\n            }\n            p = p->next;\n        }\n        while(list1 != nullptr)\n        {\n            p->next = list1;\n            list1 = list1->next;\n            p = p->next;\n        }\n        while(list2 != nullptr)\n        {\n             p->next = list2;\n            list2 = list2->next;\n            p = p->next;\n        }\n        return dummy->next;\n    }\n};`"
                    },
                    {
                        "username": "bobasafe",
                        "content": "Nice solution but can you explain these two statements \\nListNode* dummy = new ListNode();\\nListNode* p = dummy\\nthese two seem to be the key factors of the whole algorithm, I assume that the dummy points to the created Node, and then I assume P is reference dummy so that way dummy ->next is returned by reference corect? because my solution wouldn\\'t work and I like it too.. here\\n\\n\\nListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\nListNode fake(-1); //dummy node\\nListNode* listCombined = &fake;\\nwhile(list1 != nullptr && list2 != nullptr){\\nif(list1->val < list2->val){\\nlistCombined->next = list1;\\nlistCombined = list1;\\nlist1 = list1->next;\\n}\\nelse{\\nlistCombined->next = list2;\\nlistCombined = list2;\\nlist2 = list2->next;\\n}\\n}\\nwhile(list1 != nullptr){\\nlistCombined->next = list1;\\n}\\nwhile(list2 != nullptr){\\nlistCombined->next = list2;\\n}\\nreturn fake.next;\\n}"
                    },
                    {
                        "username": "andrefontes",
                        "content": "Is there any reason why the zip() function does not work here? My code works perfectly in every testcase on PyCharm but here I get the error:\\n\\nTypeError: zip argument #1 must support iteration\\n"
                    },
                    {
                        "username": "andrefontes",
                        "content": "My code works fine on PyCharm but here it keeps giving me an error in the zip() function. Any ideas why?\\ndef mergeTwoLists(self, list1, list2):\\n        list3 = []\\n        for a, b in zip(list1, list2):\\n            list3.append(a)\\n            list3.append(b)\\n        return sorted(list3)"
                    },
                    {
                        "username": "bobasafe",
                        "content": "Generally confused, I was writing down on my whiteboard the problem and for some reason it is not accepting it.... Here is the problem why is it saying \"time exceeding\"\\n\\n\\n ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode fake(-1);  //dummy node\\n        ListNode* listCombined = &fake;  \\n        while(list1 != nullptr && list2 != nullptr){\\n            if(list1->val < list2->val){\\n                listCombined->next = list1;\\n                listCombined = list1;\\n                list1 = list1->next;\\n            }\\n            else{\\n                listCombined->next = list2;\\n                listCombined = list2;\\n                list2 = list2->next;\\n            }\\n        }\\n        while(list1 != nullptr){\\n            listCombined->next = list1;\\n        }\\n        while(list2 != nullptr){\\n            listCombined->next = list2;\\n        }\\n        return fake.next;\\n    }"
                    }
                ]
            },
            {
                "id": 1669900,
                "content": [
                    {
                        "username": "charlessrze",
                        "content": " ` const list = [];\n    list1.forEach(e => list.push(e));\n    list2.forEach(e => list.push(e));\n    return list.sort();`\nwhy it's not working???"
                    },
                    {
                        "username": "denkochev",
                        "content": "Coz we use custom type of data. You can google LinkedList in js."
                    },
                    {
                        "username": "hj414",
                        "content": "\\nCan someone explain why the below approach is considered as O(1) Space, we are creating a separate linked list with length len(l1) and and len(l2) right??\\n \\n`your inline code...your inline code...dummy = ListNode()\\n        cur = dummy\\n\\n        while list1 and list2:\\n            if list1.val < list2.val:\\n                cur.next = list1\\n                list1 = list1.next\\n            else:\\n                cur.next = list2\\n                list2 = list2.next\\n            cur=cur.next\\n        if list1!=None:\\n            cur.next = list1\\n        \\n        if list2!=None:\\n            cur.next = list2\\n            \\n        return dummy.next`\\n\\n\\n\\nso space complexity should be O( m + n ), where m and n are length of both the linked list correspondingly.\\n\\n"
                    },
                    {
                        "username": "itsabi_z1",
                        "content": "Here we are not creating new nodes, we are simply getting the nodes form List1 and List2 and chaining them. Hence this is considered as O(1) space. "
                    },
                    {
                        "username": "user7334rh",
                        "content": "My intuitive 1ms runtime Java Solution \n\nHi guys, \nBefore reading any solution I tried making my own version, and it works. \nIt seems like runtime is very good (no recursion) even though memory usage is not the best. \n\nWhat do you think of this solution ? \n\nThanks in advance. \n\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode list3 = new ListNode(0);\n        ListNode dummy_head = list3; \n\n        while(list1 != null || list2 != null){\n            if(list1 != null && list2 != null){\n                if(list1.val < list2.val){\n                    list3.next = new ListNode(list1.val);\n                    list1 = list1.next; \n                    list3 = list3.next; \n                }\n                else if (list1.val > list2.val){\n                    list3.next = new ListNode(list2.val);\n                    list2 = list2.next; \n                    list3 = list3.next; \n                }\n                else {\n                    list3.next = new ListNode(list2.val);\n                    list3.next.next = new ListNode(list2.val);\n                    list1 = list1.next; \n                    list2 = list2.next; \n                    list3 = list3.next.next; \n                }\n            }\n            else {\n                if(list1 == null && list2 != null){\n                    list3.next = new ListNode(list2.val);\n                    list3 = list3.next; \n                    list2 = list2.next; \n                }\n                else if(list1 != null && list2 == null){\n                    list3.next = new ListNode(list1.val);\n                    list3 = list3.next; \n                    list1 = list1.next; \n                }\n            }\n        }\n\n        return dummy_head.next;"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python, java, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-merge-two-sorted-lists-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-merge-two-sorted-lists-problem-solution.html)"
                    },
                    {
                        "username": "Srikar_PY",
                        "content": "public class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n        Boolean cond = true;\\n        ListNode prevList1 = new ListNode(0,null);\\n        ListNode tempList2;\\n        \\n        \\n        while(cond){\\n            if(list2.val < list1.val){\\n                tempList2 = list2;\\n                if(prevList1 == null){\\n                    prevList1 = list2;\\n                    prevList1.next = list1;\\n                }else{\\n                    prevList1.next = list2;\\n                    list2.next = list1;\\n                }\\n                if(tempList2.next == null){\\n                    cond = false;\\n                    break;\\n                }\\n                list2 = tempList2.next;\\n            \\n            }else{\\n                if(list1.next == null){\\n                    cond = false;\\n                    break;\\n                }\\n              \\n                prevList1.val = list1.val;\\n                prevList1.next = list1.next;\\n                list1 = list1.next;\\n            }\\n            \\n        }\\n        if(list2.next != null){\\n            list1.next = list2;\\n        }\\n        return list1;\\n        \\n    }\\n}\\n\\nHi everyone, above is my code. I am getting the below error.\\n\\nUnhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\\nAt Solution.MergeTwoLists(ListNode list1, ListNode list2)\\nAt __Driver__.Main(String[] args)\\n\\nI am not able to figure out, why this error is getting. Can someone help me?"
                    },
                    {
                        "username": "aryansinha1818",
                        "content": "Why is this code wrong? Can anyone debug it! \\n\\n`your inline code...your inline code...`class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* t = new ListNode();\\n        ListNode* p = t;\\n        if(list1 == NULL){\\n            return list2;\\n        }\\n        if(list2 == NULL){\\n            return list1;\\n        }\\n        while(list1 || list2){\\n            if(list1->val == list2->val){\\n                t->val = list1->val;\\n                t->next = new ListNode();\\n                t = t->next;\\n                t->val = list2->val;\\n                list1 = list1->next;\\n                list2 = list2->next;\\n            }\\n            else{\\n                if(list1->val < list2->val){\\n                    t->next = new ListNode(list1->val);\\n                    t = t->next;\\n                    // t->val = list1->val;\\n                    list1 = list1->next;\\n                }\\n                else{\\n                    t->next = new ListNode(list2->val);\\n                    t = t->next;\\n                    //t->val = list2->val;\\n                    list2 = list2->next;\\n                }\\n            }\\n        }\\n        return p;\\n    }\\n};"
                    },
                    {
                        "username": "FED4",
                        "content": "This resembles the merge step in the merge sort. With a dummy root node, the initialization of current result pointer p can be as easy as ListNode* p = dummy. The real root node is just dummy->next. Notice that sorting in increasing order requires list1->val < list2->val. I am assuming list1  and list2 are passed by copy (the function can't change pointer itself) so it is ok to modify them. It is a better practice to back-up  list1 and list2 and do mergeTwoLists(ListNode* const list1, ListNode* const list2).\n\n`class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        ListNode* dummy = new ListNode();\n        ListNode* p = dummy;\n        while(list1 != nullptr && list2 != nullptr)\n        {\n            if(list1->val < list2->val)\n            {\n                p->next = list1;\n                list1 = list1->next;\n            }\n            else\n            {\n                p->next = list2;\n                list2 = list2->next;\n            }\n            p = p->next;\n        }\n        while(list1 != nullptr)\n        {\n            p->next = list1;\n            list1 = list1->next;\n            p = p->next;\n        }\n        while(list2 != nullptr)\n        {\n             p->next = list2;\n            list2 = list2->next;\n            p = p->next;\n        }\n        return dummy->next;\n    }\n};`"
                    },
                    {
                        "username": "bobasafe",
                        "content": "Nice solution but can you explain these two statements \\nListNode* dummy = new ListNode();\\nListNode* p = dummy\\nthese two seem to be the key factors of the whole algorithm, I assume that the dummy points to the created Node, and then I assume P is reference dummy so that way dummy ->next is returned by reference corect? because my solution wouldn\\'t work and I like it too.. here\\n\\n\\nListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\nListNode fake(-1); //dummy node\\nListNode* listCombined = &fake;\\nwhile(list1 != nullptr && list2 != nullptr){\\nif(list1->val < list2->val){\\nlistCombined->next = list1;\\nlistCombined = list1;\\nlist1 = list1->next;\\n}\\nelse{\\nlistCombined->next = list2;\\nlistCombined = list2;\\nlist2 = list2->next;\\n}\\n}\\nwhile(list1 != nullptr){\\nlistCombined->next = list1;\\n}\\nwhile(list2 != nullptr){\\nlistCombined->next = list2;\\n}\\nreturn fake.next;\\n}"
                    },
                    {
                        "username": "andrefontes",
                        "content": "Is there any reason why the zip() function does not work here? My code works perfectly in every testcase on PyCharm but here I get the error:\\n\\nTypeError: zip argument #1 must support iteration\\n"
                    },
                    {
                        "username": "andrefontes",
                        "content": "My code works fine on PyCharm but here it keeps giving me an error in the zip() function. Any ideas why?\\ndef mergeTwoLists(self, list1, list2):\\n        list3 = []\\n        for a, b in zip(list1, list2):\\n            list3.append(a)\\n            list3.append(b)\\n        return sorted(list3)"
                    },
                    {
                        "username": "bobasafe",
                        "content": "Generally confused, I was writing down on my whiteboard the problem and for some reason it is not accepting it.... Here is the problem why is it saying \"time exceeding\"\\n\\n\\n ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode fake(-1);  //dummy node\\n        ListNode* listCombined = &fake;  \\n        while(list1 != nullptr && list2 != nullptr){\\n            if(list1->val < list2->val){\\n                listCombined->next = list1;\\n                listCombined = list1;\\n                list1 = list1->next;\\n            }\\n            else{\\n                listCombined->next = list2;\\n                listCombined = list2;\\n                list2 = list2->next;\\n            }\\n        }\\n        while(list1 != nullptr){\\n            listCombined->next = list1;\\n        }\\n        while(list2 != nullptr){\\n            listCombined->next = list2;\\n        }\\n        return fake.next;\\n    }"
                    }
                ]
            },
            {
                "id": 1654884,
                "content": [
                    {
                        "username": "charlessrze",
                        "content": " ` const list = [];\n    list1.forEach(e => list.push(e));\n    list2.forEach(e => list.push(e));\n    return list.sort();`\nwhy it's not working???"
                    },
                    {
                        "username": "denkochev",
                        "content": "Coz we use custom type of data. You can google LinkedList in js."
                    },
                    {
                        "username": "hj414",
                        "content": "\\nCan someone explain why the below approach is considered as O(1) Space, we are creating a separate linked list with length len(l1) and and len(l2) right??\\n \\n`your inline code...your inline code...dummy = ListNode()\\n        cur = dummy\\n\\n        while list1 and list2:\\n            if list1.val < list2.val:\\n                cur.next = list1\\n                list1 = list1.next\\n            else:\\n                cur.next = list2\\n                list2 = list2.next\\n            cur=cur.next\\n        if list1!=None:\\n            cur.next = list1\\n        \\n        if list2!=None:\\n            cur.next = list2\\n            \\n        return dummy.next`\\n\\n\\n\\nso space complexity should be O( m + n ), where m and n are length of both the linked list correspondingly.\\n\\n"
                    },
                    {
                        "username": "itsabi_z1",
                        "content": "Here we are not creating new nodes, we are simply getting the nodes form List1 and List2 and chaining them. Hence this is considered as O(1) space. "
                    },
                    {
                        "username": "user7334rh",
                        "content": "My intuitive 1ms runtime Java Solution \n\nHi guys, \nBefore reading any solution I tried making my own version, and it works. \nIt seems like runtime is very good (no recursion) even though memory usage is not the best. \n\nWhat do you think of this solution ? \n\nThanks in advance. \n\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode list3 = new ListNode(0);\n        ListNode dummy_head = list3; \n\n        while(list1 != null || list2 != null){\n            if(list1 != null && list2 != null){\n                if(list1.val < list2.val){\n                    list3.next = new ListNode(list1.val);\n                    list1 = list1.next; \n                    list3 = list3.next; \n                }\n                else if (list1.val > list2.val){\n                    list3.next = new ListNode(list2.val);\n                    list2 = list2.next; \n                    list3 = list3.next; \n                }\n                else {\n                    list3.next = new ListNode(list2.val);\n                    list3.next.next = new ListNode(list2.val);\n                    list1 = list1.next; \n                    list2 = list2.next; \n                    list3 = list3.next.next; \n                }\n            }\n            else {\n                if(list1 == null && list2 != null){\n                    list3.next = new ListNode(list2.val);\n                    list3 = list3.next; \n                    list2 = list2.next; \n                }\n                else if(list1 != null && list2 == null){\n                    list3.next = new ListNode(list1.val);\n                    list3 = list3.next; \n                    list1 = list1.next; \n                }\n            }\n        }\n\n        return dummy_head.next;"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python, java, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-merge-two-sorted-lists-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-merge-two-sorted-lists-problem-solution.html)"
                    },
                    {
                        "username": "Srikar_PY",
                        "content": "public class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n        Boolean cond = true;\\n        ListNode prevList1 = new ListNode(0,null);\\n        ListNode tempList2;\\n        \\n        \\n        while(cond){\\n            if(list2.val < list1.val){\\n                tempList2 = list2;\\n                if(prevList1 == null){\\n                    prevList1 = list2;\\n                    prevList1.next = list1;\\n                }else{\\n                    prevList1.next = list2;\\n                    list2.next = list1;\\n                }\\n                if(tempList2.next == null){\\n                    cond = false;\\n                    break;\\n                }\\n                list2 = tempList2.next;\\n            \\n            }else{\\n                if(list1.next == null){\\n                    cond = false;\\n                    break;\\n                }\\n              \\n                prevList1.val = list1.val;\\n                prevList1.next = list1.next;\\n                list1 = list1.next;\\n            }\\n            \\n        }\\n        if(list2.next != null){\\n            list1.next = list2;\\n        }\\n        return list1;\\n        \\n    }\\n}\\n\\nHi everyone, above is my code. I am getting the below error.\\n\\nUnhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\\nAt Solution.MergeTwoLists(ListNode list1, ListNode list2)\\nAt __Driver__.Main(String[] args)\\n\\nI am not able to figure out, why this error is getting. Can someone help me?"
                    },
                    {
                        "username": "aryansinha1818",
                        "content": "Why is this code wrong? Can anyone debug it! \\n\\n`your inline code...your inline code...`class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* t = new ListNode();\\n        ListNode* p = t;\\n        if(list1 == NULL){\\n            return list2;\\n        }\\n        if(list2 == NULL){\\n            return list1;\\n        }\\n        while(list1 || list2){\\n            if(list1->val == list2->val){\\n                t->val = list1->val;\\n                t->next = new ListNode();\\n                t = t->next;\\n                t->val = list2->val;\\n                list1 = list1->next;\\n                list2 = list2->next;\\n            }\\n            else{\\n                if(list1->val < list2->val){\\n                    t->next = new ListNode(list1->val);\\n                    t = t->next;\\n                    // t->val = list1->val;\\n                    list1 = list1->next;\\n                }\\n                else{\\n                    t->next = new ListNode(list2->val);\\n                    t = t->next;\\n                    //t->val = list2->val;\\n                    list2 = list2->next;\\n                }\\n            }\\n        }\\n        return p;\\n    }\\n};"
                    },
                    {
                        "username": "FED4",
                        "content": "This resembles the merge step in the merge sort. With a dummy root node, the initialization of current result pointer p can be as easy as ListNode* p = dummy. The real root node is just dummy->next. Notice that sorting in increasing order requires list1->val < list2->val. I am assuming list1  and list2 are passed by copy (the function can't change pointer itself) so it is ok to modify them. It is a better practice to back-up  list1 and list2 and do mergeTwoLists(ListNode* const list1, ListNode* const list2).\n\n`class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        ListNode* dummy = new ListNode();\n        ListNode* p = dummy;\n        while(list1 != nullptr && list2 != nullptr)\n        {\n            if(list1->val < list2->val)\n            {\n                p->next = list1;\n                list1 = list1->next;\n            }\n            else\n            {\n                p->next = list2;\n                list2 = list2->next;\n            }\n            p = p->next;\n        }\n        while(list1 != nullptr)\n        {\n            p->next = list1;\n            list1 = list1->next;\n            p = p->next;\n        }\n        while(list2 != nullptr)\n        {\n             p->next = list2;\n            list2 = list2->next;\n            p = p->next;\n        }\n        return dummy->next;\n    }\n};`"
                    },
                    {
                        "username": "bobasafe",
                        "content": "Nice solution but can you explain these two statements \\nListNode* dummy = new ListNode();\\nListNode* p = dummy\\nthese two seem to be the key factors of the whole algorithm, I assume that the dummy points to the created Node, and then I assume P is reference dummy so that way dummy ->next is returned by reference corect? because my solution wouldn\\'t work and I like it too.. here\\n\\n\\nListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\nListNode fake(-1); //dummy node\\nListNode* listCombined = &fake;\\nwhile(list1 != nullptr && list2 != nullptr){\\nif(list1->val < list2->val){\\nlistCombined->next = list1;\\nlistCombined = list1;\\nlist1 = list1->next;\\n}\\nelse{\\nlistCombined->next = list2;\\nlistCombined = list2;\\nlist2 = list2->next;\\n}\\n}\\nwhile(list1 != nullptr){\\nlistCombined->next = list1;\\n}\\nwhile(list2 != nullptr){\\nlistCombined->next = list2;\\n}\\nreturn fake.next;\\n}"
                    },
                    {
                        "username": "andrefontes",
                        "content": "Is there any reason why the zip() function does not work here? My code works perfectly in every testcase on PyCharm but here I get the error:\\n\\nTypeError: zip argument #1 must support iteration\\n"
                    },
                    {
                        "username": "andrefontes",
                        "content": "My code works fine on PyCharm but here it keeps giving me an error in the zip() function. Any ideas why?\\ndef mergeTwoLists(self, list1, list2):\\n        list3 = []\\n        for a, b in zip(list1, list2):\\n            list3.append(a)\\n            list3.append(b)\\n        return sorted(list3)"
                    },
                    {
                        "username": "bobasafe",
                        "content": "Generally confused, I was writing down on my whiteboard the problem and for some reason it is not accepting it.... Here is the problem why is it saying \"time exceeding\"\\n\\n\\n ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode fake(-1);  //dummy node\\n        ListNode* listCombined = &fake;  \\n        while(list1 != nullptr && list2 != nullptr){\\n            if(list1->val < list2->val){\\n                listCombined->next = list1;\\n                listCombined = list1;\\n                list1 = list1->next;\\n            }\\n            else{\\n                listCombined->next = list2;\\n                listCombined = list2;\\n                list2 = list2->next;\\n            }\\n        }\\n        while(list1 != nullptr){\\n            listCombined->next = list1;\\n        }\\n        while(list2 != nullptr){\\n            listCombined->next = list2;\\n        }\\n        return fake.next;\\n    }"
                    }
                ]
            },
            {
                "id": 1654413,
                "content": [
                    {
                        "username": "charlessrze",
                        "content": " ` const list = [];\n    list1.forEach(e => list.push(e));\n    list2.forEach(e => list.push(e));\n    return list.sort();`\nwhy it's not working???"
                    },
                    {
                        "username": "denkochev",
                        "content": "Coz we use custom type of data. You can google LinkedList in js."
                    },
                    {
                        "username": "hj414",
                        "content": "\\nCan someone explain why the below approach is considered as O(1) Space, we are creating a separate linked list with length len(l1) and and len(l2) right??\\n \\n`your inline code...your inline code...dummy = ListNode()\\n        cur = dummy\\n\\n        while list1 and list2:\\n            if list1.val < list2.val:\\n                cur.next = list1\\n                list1 = list1.next\\n            else:\\n                cur.next = list2\\n                list2 = list2.next\\n            cur=cur.next\\n        if list1!=None:\\n            cur.next = list1\\n        \\n        if list2!=None:\\n            cur.next = list2\\n            \\n        return dummy.next`\\n\\n\\n\\nso space complexity should be O( m + n ), where m and n are length of both the linked list correspondingly.\\n\\n"
                    },
                    {
                        "username": "itsabi_z1",
                        "content": "Here we are not creating new nodes, we are simply getting the nodes form List1 and List2 and chaining them. Hence this is considered as O(1) space. "
                    },
                    {
                        "username": "user7334rh",
                        "content": "My intuitive 1ms runtime Java Solution \n\nHi guys, \nBefore reading any solution I tried making my own version, and it works. \nIt seems like runtime is very good (no recursion) even though memory usage is not the best. \n\nWhat do you think of this solution ? \n\nThanks in advance. \n\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode list3 = new ListNode(0);\n        ListNode dummy_head = list3; \n\n        while(list1 != null || list2 != null){\n            if(list1 != null && list2 != null){\n                if(list1.val < list2.val){\n                    list3.next = new ListNode(list1.val);\n                    list1 = list1.next; \n                    list3 = list3.next; \n                }\n                else if (list1.val > list2.val){\n                    list3.next = new ListNode(list2.val);\n                    list2 = list2.next; \n                    list3 = list3.next; \n                }\n                else {\n                    list3.next = new ListNode(list2.val);\n                    list3.next.next = new ListNode(list2.val);\n                    list1 = list1.next; \n                    list2 = list2.next; \n                    list3 = list3.next.next; \n                }\n            }\n            else {\n                if(list1 == null && list2 != null){\n                    list3.next = new ListNode(list2.val);\n                    list3 = list3.next; \n                    list2 = list2.next; \n                }\n                else if(list1 != null && list2 == null){\n                    list3.next = new ListNode(list1.val);\n                    list3 = list3.next; \n                    list1 = list1.next; \n                }\n            }\n        }\n\n        return dummy_head.next;"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python, java, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-merge-two-sorted-lists-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-merge-two-sorted-lists-problem-solution.html)"
                    },
                    {
                        "username": "Srikar_PY",
                        "content": "public class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n        Boolean cond = true;\\n        ListNode prevList1 = new ListNode(0,null);\\n        ListNode tempList2;\\n        \\n        \\n        while(cond){\\n            if(list2.val < list1.val){\\n                tempList2 = list2;\\n                if(prevList1 == null){\\n                    prevList1 = list2;\\n                    prevList1.next = list1;\\n                }else{\\n                    prevList1.next = list2;\\n                    list2.next = list1;\\n                }\\n                if(tempList2.next == null){\\n                    cond = false;\\n                    break;\\n                }\\n                list2 = tempList2.next;\\n            \\n            }else{\\n                if(list1.next == null){\\n                    cond = false;\\n                    break;\\n                }\\n              \\n                prevList1.val = list1.val;\\n                prevList1.next = list1.next;\\n                list1 = list1.next;\\n            }\\n            \\n        }\\n        if(list2.next != null){\\n            list1.next = list2;\\n        }\\n        return list1;\\n        \\n    }\\n}\\n\\nHi everyone, above is my code. I am getting the below error.\\n\\nUnhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\\nAt Solution.MergeTwoLists(ListNode list1, ListNode list2)\\nAt __Driver__.Main(String[] args)\\n\\nI am not able to figure out, why this error is getting. Can someone help me?"
                    },
                    {
                        "username": "aryansinha1818",
                        "content": "Why is this code wrong? Can anyone debug it! \\n\\n`your inline code...your inline code...`class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* t = new ListNode();\\n        ListNode* p = t;\\n        if(list1 == NULL){\\n            return list2;\\n        }\\n        if(list2 == NULL){\\n            return list1;\\n        }\\n        while(list1 || list2){\\n            if(list1->val == list2->val){\\n                t->val = list1->val;\\n                t->next = new ListNode();\\n                t = t->next;\\n                t->val = list2->val;\\n                list1 = list1->next;\\n                list2 = list2->next;\\n            }\\n            else{\\n                if(list1->val < list2->val){\\n                    t->next = new ListNode(list1->val);\\n                    t = t->next;\\n                    // t->val = list1->val;\\n                    list1 = list1->next;\\n                }\\n                else{\\n                    t->next = new ListNode(list2->val);\\n                    t = t->next;\\n                    //t->val = list2->val;\\n                    list2 = list2->next;\\n                }\\n            }\\n        }\\n        return p;\\n    }\\n};"
                    },
                    {
                        "username": "FED4",
                        "content": "This resembles the merge step in the merge sort. With a dummy root node, the initialization of current result pointer p can be as easy as ListNode* p = dummy. The real root node is just dummy->next. Notice that sorting in increasing order requires list1->val < list2->val. I am assuming list1  and list2 are passed by copy (the function can't change pointer itself) so it is ok to modify them. It is a better practice to back-up  list1 and list2 and do mergeTwoLists(ListNode* const list1, ListNode* const list2).\n\n`class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        ListNode* dummy = new ListNode();\n        ListNode* p = dummy;\n        while(list1 != nullptr && list2 != nullptr)\n        {\n            if(list1->val < list2->val)\n            {\n                p->next = list1;\n                list1 = list1->next;\n            }\n            else\n            {\n                p->next = list2;\n                list2 = list2->next;\n            }\n            p = p->next;\n        }\n        while(list1 != nullptr)\n        {\n            p->next = list1;\n            list1 = list1->next;\n            p = p->next;\n        }\n        while(list2 != nullptr)\n        {\n             p->next = list2;\n            list2 = list2->next;\n            p = p->next;\n        }\n        return dummy->next;\n    }\n};`"
                    },
                    {
                        "username": "bobasafe",
                        "content": "Nice solution but can you explain these two statements \\nListNode* dummy = new ListNode();\\nListNode* p = dummy\\nthese two seem to be the key factors of the whole algorithm, I assume that the dummy points to the created Node, and then I assume P is reference dummy so that way dummy ->next is returned by reference corect? because my solution wouldn\\'t work and I like it too.. here\\n\\n\\nListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\nListNode fake(-1); //dummy node\\nListNode* listCombined = &fake;\\nwhile(list1 != nullptr && list2 != nullptr){\\nif(list1->val < list2->val){\\nlistCombined->next = list1;\\nlistCombined = list1;\\nlist1 = list1->next;\\n}\\nelse{\\nlistCombined->next = list2;\\nlistCombined = list2;\\nlist2 = list2->next;\\n}\\n}\\nwhile(list1 != nullptr){\\nlistCombined->next = list1;\\n}\\nwhile(list2 != nullptr){\\nlistCombined->next = list2;\\n}\\nreturn fake.next;\\n}"
                    },
                    {
                        "username": "andrefontes",
                        "content": "Is there any reason why the zip() function does not work here? My code works perfectly in every testcase on PyCharm but here I get the error:\\n\\nTypeError: zip argument #1 must support iteration\\n"
                    },
                    {
                        "username": "andrefontes",
                        "content": "My code works fine on PyCharm but here it keeps giving me an error in the zip() function. Any ideas why?\\ndef mergeTwoLists(self, list1, list2):\\n        list3 = []\\n        for a, b in zip(list1, list2):\\n            list3.append(a)\\n            list3.append(b)\\n        return sorted(list3)"
                    },
                    {
                        "username": "bobasafe",
                        "content": "Generally confused, I was writing down on my whiteboard the problem and for some reason it is not accepting it.... Here is the problem why is it saying \"time exceeding\"\\n\\n\\n ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode fake(-1);  //dummy node\\n        ListNode* listCombined = &fake;  \\n        while(list1 != nullptr && list2 != nullptr){\\n            if(list1->val < list2->val){\\n                listCombined->next = list1;\\n                listCombined = list1;\\n                list1 = list1->next;\\n            }\\n            else{\\n                listCombined->next = list2;\\n                listCombined = list2;\\n                list2 = list2->next;\\n            }\\n        }\\n        while(list1 != nullptr){\\n            listCombined->next = list1;\\n        }\\n        while(list2 != nullptr){\\n            listCombined->next = list2;\\n        }\\n        return fake.next;\\n    }"
                    }
                ]
            },
            {
                "id": 1653326,
                "content": [
                    {
                        "username": "charlessrze",
                        "content": " ` const list = [];\n    list1.forEach(e => list.push(e));\n    list2.forEach(e => list.push(e));\n    return list.sort();`\nwhy it's not working???"
                    },
                    {
                        "username": "denkochev",
                        "content": "Coz we use custom type of data. You can google LinkedList in js."
                    },
                    {
                        "username": "hj414",
                        "content": "\\nCan someone explain why the below approach is considered as O(1) Space, we are creating a separate linked list with length len(l1) and and len(l2) right??\\n \\n`your inline code...your inline code...dummy = ListNode()\\n        cur = dummy\\n\\n        while list1 and list2:\\n            if list1.val < list2.val:\\n                cur.next = list1\\n                list1 = list1.next\\n            else:\\n                cur.next = list2\\n                list2 = list2.next\\n            cur=cur.next\\n        if list1!=None:\\n            cur.next = list1\\n        \\n        if list2!=None:\\n            cur.next = list2\\n            \\n        return dummy.next`\\n\\n\\n\\nso space complexity should be O( m + n ), where m and n are length of both the linked list correspondingly.\\n\\n"
                    },
                    {
                        "username": "itsabi_z1",
                        "content": "Here we are not creating new nodes, we are simply getting the nodes form List1 and List2 and chaining them. Hence this is considered as O(1) space. "
                    },
                    {
                        "username": "user7334rh",
                        "content": "My intuitive 1ms runtime Java Solution \n\nHi guys, \nBefore reading any solution I tried making my own version, and it works. \nIt seems like runtime is very good (no recursion) even though memory usage is not the best. \n\nWhat do you think of this solution ? \n\nThanks in advance. \n\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode list3 = new ListNode(0);\n        ListNode dummy_head = list3; \n\n        while(list1 != null || list2 != null){\n            if(list1 != null && list2 != null){\n                if(list1.val < list2.val){\n                    list3.next = new ListNode(list1.val);\n                    list1 = list1.next; \n                    list3 = list3.next; \n                }\n                else if (list1.val > list2.val){\n                    list3.next = new ListNode(list2.val);\n                    list2 = list2.next; \n                    list3 = list3.next; \n                }\n                else {\n                    list3.next = new ListNode(list2.val);\n                    list3.next.next = new ListNode(list2.val);\n                    list1 = list1.next; \n                    list2 = list2.next; \n                    list3 = list3.next.next; \n                }\n            }\n            else {\n                if(list1 == null && list2 != null){\n                    list3.next = new ListNode(list2.val);\n                    list3 = list3.next; \n                    list2 = list2.next; \n                }\n                else if(list1 != null && list2 == null){\n                    list3.next = new ListNode(list1.val);\n                    list3 = list3.next; \n                    list1 = list1.next; \n                }\n            }\n        }\n\n        return dummy_head.next;"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python, java, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-merge-two-sorted-lists-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-merge-two-sorted-lists-problem-solution.html)"
                    },
                    {
                        "username": "Srikar_PY",
                        "content": "public class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n        Boolean cond = true;\\n        ListNode prevList1 = new ListNode(0,null);\\n        ListNode tempList2;\\n        \\n        \\n        while(cond){\\n            if(list2.val < list1.val){\\n                tempList2 = list2;\\n                if(prevList1 == null){\\n                    prevList1 = list2;\\n                    prevList1.next = list1;\\n                }else{\\n                    prevList1.next = list2;\\n                    list2.next = list1;\\n                }\\n                if(tempList2.next == null){\\n                    cond = false;\\n                    break;\\n                }\\n                list2 = tempList2.next;\\n            \\n            }else{\\n                if(list1.next == null){\\n                    cond = false;\\n                    break;\\n                }\\n              \\n                prevList1.val = list1.val;\\n                prevList1.next = list1.next;\\n                list1 = list1.next;\\n            }\\n            \\n        }\\n        if(list2.next != null){\\n            list1.next = list2;\\n        }\\n        return list1;\\n        \\n    }\\n}\\n\\nHi everyone, above is my code. I am getting the below error.\\n\\nUnhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\\nAt Solution.MergeTwoLists(ListNode list1, ListNode list2)\\nAt __Driver__.Main(String[] args)\\n\\nI am not able to figure out, why this error is getting. Can someone help me?"
                    },
                    {
                        "username": "aryansinha1818",
                        "content": "Why is this code wrong? Can anyone debug it! \\n\\n`your inline code...your inline code...`class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* t = new ListNode();\\n        ListNode* p = t;\\n        if(list1 == NULL){\\n            return list2;\\n        }\\n        if(list2 == NULL){\\n            return list1;\\n        }\\n        while(list1 || list2){\\n            if(list1->val == list2->val){\\n                t->val = list1->val;\\n                t->next = new ListNode();\\n                t = t->next;\\n                t->val = list2->val;\\n                list1 = list1->next;\\n                list2 = list2->next;\\n            }\\n            else{\\n                if(list1->val < list2->val){\\n                    t->next = new ListNode(list1->val);\\n                    t = t->next;\\n                    // t->val = list1->val;\\n                    list1 = list1->next;\\n                }\\n                else{\\n                    t->next = new ListNode(list2->val);\\n                    t = t->next;\\n                    //t->val = list2->val;\\n                    list2 = list2->next;\\n                }\\n            }\\n        }\\n        return p;\\n    }\\n};"
                    },
                    {
                        "username": "FED4",
                        "content": "This resembles the merge step in the merge sort. With a dummy root node, the initialization of current result pointer p can be as easy as ListNode* p = dummy. The real root node is just dummy->next. Notice that sorting in increasing order requires list1->val < list2->val. I am assuming list1  and list2 are passed by copy (the function can't change pointer itself) so it is ok to modify them. It is a better practice to back-up  list1 and list2 and do mergeTwoLists(ListNode* const list1, ListNode* const list2).\n\n`class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        ListNode* dummy = new ListNode();\n        ListNode* p = dummy;\n        while(list1 != nullptr && list2 != nullptr)\n        {\n            if(list1->val < list2->val)\n            {\n                p->next = list1;\n                list1 = list1->next;\n            }\n            else\n            {\n                p->next = list2;\n                list2 = list2->next;\n            }\n            p = p->next;\n        }\n        while(list1 != nullptr)\n        {\n            p->next = list1;\n            list1 = list1->next;\n            p = p->next;\n        }\n        while(list2 != nullptr)\n        {\n             p->next = list2;\n            list2 = list2->next;\n            p = p->next;\n        }\n        return dummy->next;\n    }\n};`"
                    },
                    {
                        "username": "bobasafe",
                        "content": "Nice solution but can you explain these two statements \\nListNode* dummy = new ListNode();\\nListNode* p = dummy\\nthese two seem to be the key factors of the whole algorithm, I assume that the dummy points to the created Node, and then I assume P is reference dummy so that way dummy ->next is returned by reference corect? because my solution wouldn\\'t work and I like it too.. here\\n\\n\\nListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\nListNode fake(-1); //dummy node\\nListNode* listCombined = &fake;\\nwhile(list1 != nullptr && list2 != nullptr){\\nif(list1->val < list2->val){\\nlistCombined->next = list1;\\nlistCombined = list1;\\nlist1 = list1->next;\\n}\\nelse{\\nlistCombined->next = list2;\\nlistCombined = list2;\\nlist2 = list2->next;\\n}\\n}\\nwhile(list1 != nullptr){\\nlistCombined->next = list1;\\n}\\nwhile(list2 != nullptr){\\nlistCombined->next = list2;\\n}\\nreturn fake.next;\\n}"
                    },
                    {
                        "username": "andrefontes",
                        "content": "Is there any reason why the zip() function does not work here? My code works perfectly in every testcase on PyCharm but here I get the error:\\n\\nTypeError: zip argument #1 must support iteration\\n"
                    },
                    {
                        "username": "andrefontes",
                        "content": "My code works fine on PyCharm but here it keeps giving me an error in the zip() function. Any ideas why?\\ndef mergeTwoLists(self, list1, list2):\\n        list3 = []\\n        for a, b in zip(list1, list2):\\n            list3.append(a)\\n            list3.append(b)\\n        return sorted(list3)"
                    },
                    {
                        "username": "bobasafe",
                        "content": "Generally confused, I was writing down on my whiteboard the problem and for some reason it is not accepting it.... Here is the problem why is it saying \"time exceeding\"\\n\\n\\n ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode fake(-1);  //dummy node\\n        ListNode* listCombined = &fake;  \\n        while(list1 != nullptr && list2 != nullptr){\\n            if(list1->val < list2->val){\\n                listCombined->next = list1;\\n                listCombined = list1;\\n                list1 = list1->next;\\n            }\\n            else{\\n                listCombined->next = list2;\\n                listCombined = list2;\\n                list2 = list2->next;\\n            }\\n        }\\n        while(list1 != nullptr){\\n            listCombined->next = list1;\\n        }\\n        while(list2 != nullptr){\\n            listCombined->next = list2;\\n        }\\n        return fake.next;\\n    }"
                    }
                ]
            },
            {
                "id": 1652972,
                "content": [
                    {
                        "username": "charlessrze",
                        "content": " ` const list = [];\n    list1.forEach(e => list.push(e));\n    list2.forEach(e => list.push(e));\n    return list.sort();`\nwhy it's not working???"
                    },
                    {
                        "username": "denkochev",
                        "content": "Coz we use custom type of data. You can google LinkedList in js."
                    },
                    {
                        "username": "hj414",
                        "content": "\\nCan someone explain why the below approach is considered as O(1) Space, we are creating a separate linked list with length len(l1) and and len(l2) right??\\n \\n`your inline code...your inline code...dummy = ListNode()\\n        cur = dummy\\n\\n        while list1 and list2:\\n            if list1.val < list2.val:\\n                cur.next = list1\\n                list1 = list1.next\\n            else:\\n                cur.next = list2\\n                list2 = list2.next\\n            cur=cur.next\\n        if list1!=None:\\n            cur.next = list1\\n        \\n        if list2!=None:\\n            cur.next = list2\\n            \\n        return dummy.next`\\n\\n\\n\\nso space complexity should be O( m + n ), where m and n are length of both the linked list correspondingly.\\n\\n"
                    },
                    {
                        "username": "itsabi_z1",
                        "content": "Here we are not creating new nodes, we are simply getting the nodes form List1 and List2 and chaining them. Hence this is considered as O(1) space. "
                    },
                    {
                        "username": "user7334rh",
                        "content": "My intuitive 1ms runtime Java Solution \n\nHi guys, \nBefore reading any solution I tried making my own version, and it works. \nIt seems like runtime is very good (no recursion) even though memory usage is not the best. \n\nWhat do you think of this solution ? \n\nThanks in advance. \n\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode list3 = new ListNode(0);\n        ListNode dummy_head = list3; \n\n        while(list1 != null || list2 != null){\n            if(list1 != null && list2 != null){\n                if(list1.val < list2.val){\n                    list3.next = new ListNode(list1.val);\n                    list1 = list1.next; \n                    list3 = list3.next; \n                }\n                else if (list1.val > list2.val){\n                    list3.next = new ListNode(list2.val);\n                    list2 = list2.next; \n                    list3 = list3.next; \n                }\n                else {\n                    list3.next = new ListNode(list2.val);\n                    list3.next.next = new ListNode(list2.val);\n                    list1 = list1.next; \n                    list2 = list2.next; \n                    list3 = list3.next.next; \n                }\n            }\n            else {\n                if(list1 == null && list2 != null){\n                    list3.next = new ListNode(list2.val);\n                    list3 = list3.next; \n                    list2 = list2.next; \n                }\n                else if(list1 != null && list2 == null){\n                    list3.next = new ListNode(list1.val);\n                    list3 = list3.next; \n                    list1 = list1.next; \n                }\n            }\n        }\n\n        return dummy_head.next;"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python, java, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-merge-two-sorted-lists-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-merge-two-sorted-lists-problem-solution.html)"
                    },
                    {
                        "username": "Srikar_PY",
                        "content": "public class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n        Boolean cond = true;\\n        ListNode prevList1 = new ListNode(0,null);\\n        ListNode tempList2;\\n        \\n        \\n        while(cond){\\n            if(list2.val < list1.val){\\n                tempList2 = list2;\\n                if(prevList1 == null){\\n                    prevList1 = list2;\\n                    prevList1.next = list1;\\n                }else{\\n                    prevList1.next = list2;\\n                    list2.next = list1;\\n                }\\n                if(tempList2.next == null){\\n                    cond = false;\\n                    break;\\n                }\\n                list2 = tempList2.next;\\n            \\n            }else{\\n                if(list1.next == null){\\n                    cond = false;\\n                    break;\\n                }\\n              \\n                prevList1.val = list1.val;\\n                prevList1.next = list1.next;\\n                list1 = list1.next;\\n            }\\n            \\n        }\\n        if(list2.next != null){\\n            list1.next = list2;\\n        }\\n        return list1;\\n        \\n    }\\n}\\n\\nHi everyone, above is my code. I am getting the below error.\\n\\nUnhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\\nAt Solution.MergeTwoLists(ListNode list1, ListNode list2)\\nAt __Driver__.Main(String[] args)\\n\\nI am not able to figure out, why this error is getting. Can someone help me?"
                    },
                    {
                        "username": "aryansinha1818",
                        "content": "Why is this code wrong? Can anyone debug it! \\n\\n`your inline code...your inline code...`class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* t = new ListNode();\\n        ListNode* p = t;\\n        if(list1 == NULL){\\n            return list2;\\n        }\\n        if(list2 == NULL){\\n            return list1;\\n        }\\n        while(list1 || list2){\\n            if(list1->val == list2->val){\\n                t->val = list1->val;\\n                t->next = new ListNode();\\n                t = t->next;\\n                t->val = list2->val;\\n                list1 = list1->next;\\n                list2 = list2->next;\\n            }\\n            else{\\n                if(list1->val < list2->val){\\n                    t->next = new ListNode(list1->val);\\n                    t = t->next;\\n                    // t->val = list1->val;\\n                    list1 = list1->next;\\n                }\\n                else{\\n                    t->next = new ListNode(list2->val);\\n                    t = t->next;\\n                    //t->val = list2->val;\\n                    list2 = list2->next;\\n                }\\n            }\\n        }\\n        return p;\\n    }\\n};"
                    },
                    {
                        "username": "FED4",
                        "content": "This resembles the merge step in the merge sort. With a dummy root node, the initialization of current result pointer p can be as easy as ListNode* p = dummy. The real root node is just dummy->next. Notice that sorting in increasing order requires list1->val < list2->val. I am assuming list1  and list2 are passed by copy (the function can't change pointer itself) so it is ok to modify them. It is a better practice to back-up  list1 and list2 and do mergeTwoLists(ListNode* const list1, ListNode* const list2).\n\n`class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        ListNode* dummy = new ListNode();\n        ListNode* p = dummy;\n        while(list1 != nullptr && list2 != nullptr)\n        {\n            if(list1->val < list2->val)\n            {\n                p->next = list1;\n                list1 = list1->next;\n            }\n            else\n            {\n                p->next = list2;\n                list2 = list2->next;\n            }\n            p = p->next;\n        }\n        while(list1 != nullptr)\n        {\n            p->next = list1;\n            list1 = list1->next;\n            p = p->next;\n        }\n        while(list2 != nullptr)\n        {\n             p->next = list2;\n            list2 = list2->next;\n            p = p->next;\n        }\n        return dummy->next;\n    }\n};`"
                    },
                    {
                        "username": "bobasafe",
                        "content": "Nice solution but can you explain these two statements \\nListNode* dummy = new ListNode();\\nListNode* p = dummy\\nthese two seem to be the key factors of the whole algorithm, I assume that the dummy points to the created Node, and then I assume P is reference dummy so that way dummy ->next is returned by reference corect? because my solution wouldn\\'t work and I like it too.. here\\n\\n\\nListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\nListNode fake(-1); //dummy node\\nListNode* listCombined = &fake;\\nwhile(list1 != nullptr && list2 != nullptr){\\nif(list1->val < list2->val){\\nlistCombined->next = list1;\\nlistCombined = list1;\\nlist1 = list1->next;\\n}\\nelse{\\nlistCombined->next = list2;\\nlistCombined = list2;\\nlist2 = list2->next;\\n}\\n}\\nwhile(list1 != nullptr){\\nlistCombined->next = list1;\\n}\\nwhile(list2 != nullptr){\\nlistCombined->next = list2;\\n}\\nreturn fake.next;\\n}"
                    },
                    {
                        "username": "andrefontes",
                        "content": "Is there any reason why the zip() function does not work here? My code works perfectly in every testcase on PyCharm but here I get the error:\\n\\nTypeError: zip argument #1 must support iteration\\n"
                    },
                    {
                        "username": "andrefontes",
                        "content": "My code works fine on PyCharm but here it keeps giving me an error in the zip() function. Any ideas why?\\ndef mergeTwoLists(self, list1, list2):\\n        list3 = []\\n        for a, b in zip(list1, list2):\\n            list3.append(a)\\n            list3.append(b)\\n        return sorted(list3)"
                    },
                    {
                        "username": "bobasafe",
                        "content": "Generally confused, I was writing down on my whiteboard the problem and for some reason it is not accepting it.... Here is the problem why is it saying \"time exceeding\"\\n\\n\\n ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode fake(-1);  //dummy node\\n        ListNode* listCombined = &fake;  \\n        while(list1 != nullptr && list2 != nullptr){\\n            if(list1->val < list2->val){\\n                listCombined->next = list1;\\n                listCombined = list1;\\n                list1 = list1->next;\\n            }\\n            else{\\n                listCombined->next = list2;\\n                listCombined = list2;\\n                list2 = list2->next;\\n            }\\n        }\\n        while(list1 != nullptr){\\n            listCombined->next = list1;\\n        }\\n        while(list2 != nullptr){\\n            listCombined->next = list2;\\n        }\\n        return fake.next;\\n    }"
                    }
                ]
            },
            {
                "id": 1651943,
                "content": [
                    {
                        "username": "charlessrze",
                        "content": " ` const list = [];\n    list1.forEach(e => list.push(e));\n    list2.forEach(e => list.push(e));\n    return list.sort();`\nwhy it's not working???"
                    },
                    {
                        "username": "denkochev",
                        "content": "Coz we use custom type of data. You can google LinkedList in js."
                    },
                    {
                        "username": "hj414",
                        "content": "\\nCan someone explain why the below approach is considered as O(1) Space, we are creating a separate linked list with length len(l1) and and len(l2) right??\\n \\n`your inline code...your inline code...dummy = ListNode()\\n        cur = dummy\\n\\n        while list1 and list2:\\n            if list1.val < list2.val:\\n                cur.next = list1\\n                list1 = list1.next\\n            else:\\n                cur.next = list2\\n                list2 = list2.next\\n            cur=cur.next\\n        if list1!=None:\\n            cur.next = list1\\n        \\n        if list2!=None:\\n            cur.next = list2\\n            \\n        return dummy.next`\\n\\n\\n\\nso space complexity should be O( m + n ), where m and n are length of both the linked list correspondingly.\\n\\n"
                    },
                    {
                        "username": "itsabi_z1",
                        "content": "Here we are not creating new nodes, we are simply getting the nodes form List1 and List2 and chaining them. Hence this is considered as O(1) space. "
                    },
                    {
                        "username": "user7334rh",
                        "content": "My intuitive 1ms runtime Java Solution \n\nHi guys, \nBefore reading any solution I tried making my own version, and it works. \nIt seems like runtime is very good (no recursion) even though memory usage is not the best. \n\nWhat do you think of this solution ? \n\nThanks in advance. \n\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode list3 = new ListNode(0);\n        ListNode dummy_head = list3; \n\n        while(list1 != null || list2 != null){\n            if(list1 != null && list2 != null){\n                if(list1.val < list2.val){\n                    list3.next = new ListNode(list1.val);\n                    list1 = list1.next; \n                    list3 = list3.next; \n                }\n                else if (list1.val > list2.val){\n                    list3.next = new ListNode(list2.val);\n                    list2 = list2.next; \n                    list3 = list3.next; \n                }\n                else {\n                    list3.next = new ListNode(list2.val);\n                    list3.next.next = new ListNode(list2.val);\n                    list1 = list1.next; \n                    list2 = list2.next; \n                    list3 = list3.next.next; \n                }\n            }\n            else {\n                if(list1 == null && list2 != null){\n                    list3.next = new ListNode(list2.val);\n                    list3 = list3.next; \n                    list2 = list2.next; \n                }\n                else if(list1 != null && list2 == null){\n                    list3.next = new ListNode(list1.val);\n                    list3 = list3.next; \n                    list1 = list1.next; \n                }\n            }\n        }\n\n        return dummy_head.next;"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python, java, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-merge-two-sorted-lists-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-merge-two-sorted-lists-problem-solution.html)"
                    },
                    {
                        "username": "Srikar_PY",
                        "content": "public class Solution {\\n    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {\\n        Boolean cond = true;\\n        ListNode prevList1 = new ListNode(0,null);\\n        ListNode tempList2;\\n        \\n        \\n        while(cond){\\n            if(list2.val < list1.val){\\n                tempList2 = list2;\\n                if(prevList1 == null){\\n                    prevList1 = list2;\\n                    prevList1.next = list1;\\n                }else{\\n                    prevList1.next = list2;\\n                    list2.next = list1;\\n                }\\n                if(tempList2.next == null){\\n                    cond = false;\\n                    break;\\n                }\\n                list2 = tempList2.next;\\n            \\n            }else{\\n                if(list1.next == null){\\n                    cond = false;\\n                    break;\\n                }\\n              \\n                prevList1.val = list1.val;\\n                prevList1.next = list1.next;\\n                list1 = list1.next;\\n            }\\n            \\n        }\\n        if(list2.next != null){\\n            list1.next = list2;\\n        }\\n        return list1;\\n        \\n    }\\n}\\n\\nHi everyone, above is my code. I am getting the below error.\\n\\nUnhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\\nAt Solution.MergeTwoLists(ListNode list1, ListNode list2)\\nAt __Driver__.Main(String[] args)\\n\\nI am not able to figure out, why this error is getting. Can someone help me?"
                    },
                    {
                        "username": "aryansinha1818",
                        "content": "Why is this code wrong? Can anyone debug it! \\n\\n`your inline code...your inline code...`class Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode* t = new ListNode();\\n        ListNode* p = t;\\n        if(list1 == NULL){\\n            return list2;\\n        }\\n        if(list2 == NULL){\\n            return list1;\\n        }\\n        while(list1 || list2){\\n            if(list1->val == list2->val){\\n                t->val = list1->val;\\n                t->next = new ListNode();\\n                t = t->next;\\n                t->val = list2->val;\\n                list1 = list1->next;\\n                list2 = list2->next;\\n            }\\n            else{\\n                if(list1->val < list2->val){\\n                    t->next = new ListNode(list1->val);\\n                    t = t->next;\\n                    // t->val = list1->val;\\n                    list1 = list1->next;\\n                }\\n                else{\\n                    t->next = new ListNode(list2->val);\\n                    t = t->next;\\n                    //t->val = list2->val;\\n                    list2 = list2->next;\\n                }\\n            }\\n        }\\n        return p;\\n    }\\n};"
                    },
                    {
                        "username": "FED4",
                        "content": "This resembles the merge step in the merge sort. With a dummy root node, the initialization of current result pointer p can be as easy as ListNode* p = dummy. The real root node is just dummy->next. Notice that sorting in increasing order requires list1->val < list2->val. I am assuming list1  and list2 are passed by copy (the function can't change pointer itself) so it is ok to modify them. It is a better practice to back-up  list1 and list2 and do mergeTwoLists(ListNode* const list1, ListNode* const list2).\n\n`class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        ListNode* dummy = new ListNode();\n        ListNode* p = dummy;\n        while(list1 != nullptr && list2 != nullptr)\n        {\n            if(list1->val < list2->val)\n            {\n                p->next = list1;\n                list1 = list1->next;\n            }\n            else\n            {\n                p->next = list2;\n                list2 = list2->next;\n            }\n            p = p->next;\n        }\n        while(list1 != nullptr)\n        {\n            p->next = list1;\n            list1 = list1->next;\n            p = p->next;\n        }\n        while(list2 != nullptr)\n        {\n             p->next = list2;\n            list2 = list2->next;\n            p = p->next;\n        }\n        return dummy->next;\n    }\n};`"
                    },
                    {
                        "username": "bobasafe",
                        "content": "Nice solution but can you explain these two statements \\nListNode* dummy = new ListNode();\\nListNode* p = dummy\\nthese two seem to be the key factors of the whole algorithm, I assume that the dummy points to the created Node, and then I assume P is reference dummy so that way dummy ->next is returned by reference corect? because my solution wouldn\\'t work and I like it too.. here\\n\\n\\nListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\nListNode fake(-1); //dummy node\\nListNode* listCombined = &fake;\\nwhile(list1 != nullptr && list2 != nullptr){\\nif(list1->val < list2->val){\\nlistCombined->next = list1;\\nlistCombined = list1;\\nlist1 = list1->next;\\n}\\nelse{\\nlistCombined->next = list2;\\nlistCombined = list2;\\nlist2 = list2->next;\\n}\\n}\\nwhile(list1 != nullptr){\\nlistCombined->next = list1;\\n}\\nwhile(list2 != nullptr){\\nlistCombined->next = list2;\\n}\\nreturn fake.next;\\n}"
                    },
                    {
                        "username": "andrefontes",
                        "content": "Is there any reason why the zip() function does not work here? My code works perfectly in every testcase on PyCharm but here I get the error:\\n\\nTypeError: zip argument #1 must support iteration\\n"
                    },
                    {
                        "username": "andrefontes",
                        "content": "My code works fine on PyCharm but here it keeps giving me an error in the zip() function. Any ideas why?\\ndef mergeTwoLists(self, list1, list2):\\n        list3 = []\\n        for a, b in zip(list1, list2):\\n            list3.append(a)\\n            list3.append(b)\\n        return sorted(list3)"
                    },
                    {
                        "username": "bobasafe",
                        "content": "Generally confused, I was writing down on my whiteboard the problem and for some reason it is not accepting it.... Here is the problem why is it saying \"time exceeding\"\\n\\n\\n ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        ListNode fake(-1);  //dummy node\\n        ListNode* listCombined = &fake;  \\n        while(list1 != nullptr && list2 != nullptr){\\n            if(list1->val < list2->val){\\n                listCombined->next = list1;\\n                listCombined = list1;\\n                list1 = list1->next;\\n            }\\n            else{\\n                listCombined->next = list2;\\n                listCombined = list2;\\n                list2 = list2->next;\\n            }\\n        }\\n        while(list1 != nullptr){\\n            listCombined->next = list1;\\n        }\\n        while(list2 != nullptr){\\n            listCombined->next = list2;\\n        }\\n        return fake.next;\\n    }"
                    }
                ]
            }
        ]
    }
]