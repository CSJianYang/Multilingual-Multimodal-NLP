[
    {
        "title": "Count the Digits That Divide a Number",
        "question_content": "Given an integer num, return the number of digits in num that divide num.\nAn integer val divides nums if nums % val == 0.\n&nbsp;\nExample 1:\n\nInput: num = 7\nOutput: 1\nExplanation: 7 divides itself, hence the answer is 1.\n\nExample 2:\n\nInput: num = 121\nOutput: 2\nExplanation: 121 is divisible by 1, but not 2. Since 1 occurs twice as a digit, we return 2.\n\nExample 3:\n\nInput: num = 1248\nOutput: 4\nExplanation: 1248 is divisible by all of its digits, hence the answer is 4.\n\n&nbsp;\nConstraints:\n\n\t1 <= num <= 109\n\tnum does not contain 0 as one of its digits.",
        "solutions": [
            {
                "id": 2984535,
                "title": "simple-and-concise-100-fast",
                "content": "**PLEASE UPVOTE IF YOU FIND MY APPROACH HELPFUL, MEANS A LOT \\uD83D\\uDE0A**\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int answer = 0;\\n        int n = num;\\n        while(n>0){\\n            if(num % (n%10) == 0) answer++;\\n            n/=10;\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int answer = 0;\\n        int n = num;\\n        while(n>0){\\n            if(num % (n%10) == 0) answer++;\\n            n/=10;\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977336,
                "title": "two-approaches",
                "content": "We can extract each digit using the modulo/division technique, or just convert `num` to a string.\\n\\n## Modulo\\n**C++**\\n```cpp\\nint countDigits(int num) {\\n    int res = 0;\\n    for (int n = num; n > 0; n /= 10)\\n        res += num % (n % 10) == 0;\\n    return res;\\n}\\n```\\n## Convert to String\\n**Python 3**\\n```python\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        return sum(1 if num % int(d) == 0 else 0 for d in str(num))\\n```\\n**C++**\\n```cpp\\nint countDigits(int num) {\\n    auto s = to_string(num);\\n    return accumulate(begin(s), end(s), 0, [&](int res, char ch){ \\n        return res + (num % (ch - \\'0\\') == 0);\\n    });\\n}\\n```",
                "solutionTags": [
                    "Python",
                    "C"
                ],
                "code": "```cpp\\nint countDigits(int num) {\\n    int res = 0;\\n    for (int n = num; n > 0; n /= 10)\\n        res += num % (n % 10) == 0;\\n    return res;\\n}\\n```\n```python\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        return sum(1 if num % int(d) == 0 else 0 for d in str(num))\\n```\n```cpp\\nint countDigits(int num) {\\n    auto s = to_string(num);\\n    return accumulate(begin(s), end(s), 0, [&](int res, char ch){ \\n        return res + (num % (ch - \\'0\\') == 0);\\n    });\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977409,
                "title": "java-c-python-fully-explained",
                "content": "```\\n# Intituition\\n```\\nThe solution iterates through the digits of the integer, and checks if each digit divides the original integer. If a digit divides the integer, the count is incremented. At the end, the final count is returned, which is the number of digits in the integer that divide the integer.\\n\\nFor example, if the input integer is **121**, the digits are **1** and **2**. The digit **1** divides **121**, so the count is incremented to **1**. The digit **2** does not divide **121**, so the count is not incremented. The final count is **1**, which is the number of digits in **121** that divide **121**.\\n\\n```\\n# Approach\\n```\\n\\n* **Initialize a count to 0** to keep track of the number of digits that **divide the integer**.\\n\\n* Iterate through the digits in the integer. For each digit:\\n\\n* * **Check if** the digit divides the integer.\\n* * **If it does**, increment the count.\\n* **Return** the count.\\n\\n**Diagram Representation**\\n\\n```\\n                              +---------------+\\n                              |   num = 121   |\\n                              +-------+-------+\\n                                      |\\n                                      v\\n    +------------------------------------+\\n    | count = 0                         |\\n    +------------------------------------+\\n    |                                    |\\n    | for digit in digits(num):          |\\n    |   if num % digit == 0:            |\\n    |     count += 1                     |\\n    |                                    |\\n    +------------------------------------+\\n                                      |\\n                                      v\\n                              +-------+-------+\\n                              |   count = 1   |\\n                              +---------------+\\n\\n```\\n\\n**Java**\\n\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        String str = Integer.toString(num);\\n\\n    // Initialize a count to keep track of the number of digits that divide num\\n    int count = 0;\\n\\n    // Iterate through the digits in the string\\n    for (int i = 0; i < str.length(); i++) {\\n      // Convert the current character to an integer\\n      int digit = Character.getNumericValue(str.charAt(i));\\n\\n      // Check if the digit divides num\\n      if (num % digit == 0) {\\n        // If it does, increment the count\\n        count++;\\n      }\\n    }\\n\\n    // Return the count\\n    return count;\\n    }\\n}\\n```\\n\\n**C++**\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        // Convert the integer to a string\\n    string str = to_string(num);\\n\\n    // Initialize a count to keep track of the number of digits that divide num\\n    int count = 0;\\n\\n    // Iterate through the digits in the string\\n    for (char c : str) {\\n      // Convert the current character to an integer\\n      int digit = c - \\'0\\';\\n\\n      // Check if the digit divides num\\n      if (num % digit == 0) {\\n        // If it does, increment the count\\n        count++;\\n      }\\n    }\\n\\n    // Return the count\\n    return count;\\n    }\\n};\\n```\\n\\n**Python**\\n\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        # Initialize a count to keep track of the number of digits that divide num\\n        count = 0\\n\\n        # Iterate through the digits in the integer\\n        for digit in str(num):\\n            # Check if the digit divides num\\n            if num % int(digit) == 0:\\n                # If it does, increment the count\\n                count += 1\\n\\n        # Return the count\\n        return count\\n```\\n\\n**ANALYSIS**\\n* **The time complexity :** of this solution is **`O(n)`**, where n is the number of digits in the integer. This is because the solution iterates through all the digits in the integer and performs a constant number of operations on each digit.\\n\\n* **The space complexity :** of this solution is **`O(n)`**, where n is the number of digits in the integer. This is because the solution stores the digits in the integer as a string, which takes up O(n) space.",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```\\n# Intituition\\n```\n```\\n# Approach\\n```\n```\\n                              +---------------+\\n                              |   num = 121   |\\n                              +-------+-------+\\n                                      |\\n                                      v\\n    +------------------------------------+\\n    | count = 0                         |\\n    +------------------------------------+\\n    |                                    |\\n    | for digit in digits(num):          |\\n    |   if num % digit == 0:            |\\n    |     count += 1                     |\\n    |                                    |\\n    +------------------------------------+\\n                                      |\\n                                      v\\n                              +-------+-------+\\n                              |   count = 1   |\\n                              +---------------+\\n\\n```\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        String str = Integer.toString(num);\\n\\n    // Initialize a count to keep track of the number of digits that divide num\\n    int count = 0;\\n\\n    // Iterate through the digits in the string\\n    for (int i = 0; i < str.length(); i++) {\\n      // Convert the current character to an integer\\n      int digit = Character.getNumericValue(str.charAt(i));\\n\\n      // Check if the digit divides num\\n      if (num % digit == 0) {\\n        // If it does, increment the count\\n        count++;\\n      }\\n    }\\n\\n    // Return the count\\n    return count;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        // Convert the integer to a string\\n    string str = to_string(num);\\n\\n    // Initialize a count to keep track of the number of digits that divide num\\n    int count = 0;\\n\\n    // Iterate through the digits in the string\\n    for (char c : str) {\\n      // Convert the current character to an integer\\n      int digit = c - \\'0\\';\\n\\n      // Check if the digit divides num\\n      if (num % digit == 0) {\\n        // If it does, increment the count\\n        count++;\\n      }\\n    }\\n\\n    // Return the count\\n    return count;\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        # Initialize a count to keep track of the number of digits that divide num\\n        count = 0\\n\\n        # Iterate through the digits in the integer\\n        for digit in str(num):\\n            # Check if the digit divides num\\n            if num % int(digit) == 0:\\n                # If it does, increment the count\\n                count += 1\\n\\n        # Return the count\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977375,
                "title": "c-very-simple-and-easy-to-understand-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;;\\n        int n = num;\\n        while(n > 0){\\n            int r = n%10;\\n            if(num % r == 0) ans++;\\n            n = n/10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;;\\n        int n = num;\\n        while(n > 0){\\n            int r = n%10;\\n            if(num % r == 0) ans++;\\n            n = n/10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977312,
                "title": "simple-python-solution",
                "content": "- *Time Complexity:* **O(N)**\\n- *Space Complexity:* **O(1)**\\n```\\nclass Solution(object):\\n    def countDigits(self, num):\\n        str_num, count = str(num), 0\\n        for digit in str_num:\\n            if num % int(digit) == 0:\\n                count += 1\\n        return count\\n```\\n**UpVote**, if you like it **:)**",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def countDigits(self, num):\\n        str_num, count = str(num), 0\\n        for digit in str_num:\\n            if num % int(digit) == 0:\\n                count += 1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977349,
                "title": "java-c-python-easy-and-concise",
                "content": "# **Explanation**\\nIterative `num` digit by digit.\\nWe can do this by transforming the integer `num` to string,\\nor divide `num` by 10 repeatly.\\n<br>\\n\\n# **Complexity**\\nTime `O(log(num))`\\nSpace `O(log(num))`\\n<br>\\n\\n**Java**\\n```java\\n    public int countDigits(int num) {\\n        int res = 0;\\n        for (int x = num; x > 0; x /= 10)\\n            if (num % (x % 10) == 0)\\n                res++;\\n        return res;\\n    }\\n\\n    public int countDigits(int num) {\\n        int res = 0;\\n        for (Character c : Integer.toString(num).toCharArray())\\n            if (num % (c - \\'0\\') == 0)\\n                res++;\\n        return res;\\n    }\\n```\\n\\n**C++**\\n```cpp\\n    int countDigits(int x) {\\n        int res = 0;\\n        for (auto& c: to_string(x))\\n            if (x % (c - \\'0\\') == 0)\\n                res++;\\n        return res;\\n    }\\n```\\n\\n**Python**\\n```py\\n    def countDigits(self, x: int) -> int:\\n        return sum(x % int(y) == 0 for y in str(x))\\n```\\n",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```java\\n    public int countDigits(int num) {\\n        int res = 0;\\n        for (int x = num; x > 0; x /= 10)\\n            if (num % (x % 10) == 0)\\n                res++;\\n        return res;\\n    }\\n\\n    public int countDigits(int num) {\\n        int res = 0;\\n        for (Character c : Integer.toString(num).toCharArray())\\n            if (num % (c - \\'0\\') == 0)\\n                res++;\\n        return res;\\n    }\\n```\n```cpp\\n    int countDigits(int x) {\\n        int res = 0;\\n        for (auto& c: to_string(x))\\n            if (x % (c - \\'0\\') == 0)\\n                res++;\\n        return res;\\n    }\\n```\n```py\\n    def countDigits(self, x: int) -> int:\\n        return sum(x % int(y) == 0 for y in str(x))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2977297,
                "title": "c-java-python",
                "content": "**Brute Force**\\n**Check Divisibilty from each Digit of NUM**\\nTime Complexity -> O(log(num))\\nspace Complexity -> O(1)\\n\\n# C++\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int n = num, ans = 0;\\n        while(num>0){\\n            ans += (n%(num%10)==0);\\n            num /= 10;\\n        }\\n        return ans;\\n    }\\n};\\n```\\n# Python\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        n, res = num, 0\\n        while n>0:\\n            if num%(n%10)==0:\\n                res += 1\\n            n //= 10\\n        return res\\n```\\n# JAVA\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int n = num, cnt = 0;\\n        while ( n > 0 ){\\n            int rem = n%10;\\n            n = n/10;\\n            if ( num % rem == 0 ) cnt++;\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int n = num, ans = 0;\\n        while(num>0){\\n            ans += (n%(num%10)==0);\\n            num /= 10;\\n        }\\n        return ans;\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        n, res = num, 0\\n        while n>0:\\n            if num%(n%10)==0:\\n                res += 1\\n            n //= 10\\n        return res\\n```\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int n = num, cnt = 0;\\n        while ( n > 0 ){\\n            int rem = n%10;\\n            n = n/10;\\n            if ( num % rem == 0 ) cnt++;\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2979310,
                "title": "leetcode-the-hard-way-explained-line-by-line",
                "content": "\\uD83D\\uDD34 Check out [LeetCode The Hard Way](https://wingkwong.github.io/leetcode-the-hard-way/) for more solution explanations and tutorials. \\n\\uD83D\\uDFE0 Check out our [Discord](https://discord.gg/Nqm4jJcyBf) for live discussion.\\n\\uD83D\\uDFE2 Give a star on [Github Repository](https://github.com/wingkwong/leetcode-the-hard-way) and upvote this post if you like it.\\n\\n---\\n\\n**Approach 1: Convert ot String**\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        // convert num to string\\n        string s = to_string(num);\\n        // for each character\\n        for (auto c : s) {\\n            // convert it to number\\n            int d = c - \\'0\\';\\n            // check if it divisible\\n            ans += num % d == 0;\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n**Approach 2: Check each digit**\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0, n = num;\\n        while (n > 0) {\\n            // check each digit\\n            ans += num % (n % 10) == 0;\\n            // move to the next digit\\n            n /= 10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        // convert num to string\\n        string s = to_string(num);\\n        // for each character\\n        for (auto c : s) {\\n            // convert it to number\\n            int d = c - \\'0\\';\\n            // check if it divisible\\n            ans += num % d == 0;\\n        }\\n        return ans;\\n    }\\n};\\n```\n```cpp\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0, n = num;\\n        while (n > 0) {\\n            // check each digit\\n            ans += num % (n % 10) == 0;\\n            // move to the next digit\\n            n /= 10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3512255,
                "title": "my-countdigits",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity\\n- Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar countDigits = function (num) {\\n\\tlet tempNum = num;\\n\\tlet count = 0;\\n\\n\\twhile (tempNum !== 0) {\\n\\t\\tlet digit = tempNum % 10;\\n\\t\\tif (num % digit === 0) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t\\ttempNum = Math.floor(tempNum / 10);\\n\\t}\\n\\n\\treturn count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar countDigits = function (num) {\\n\\tlet tempNum = num;\\n\\tlet count = 0;\\n\\n\\twhile (tempNum !== 0) {\\n\\t\\tlet digit = tempNum % 10;\\n\\t\\tif (num % digit === 0) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t\\ttempNum = Math.floor(tempNum / 10);\\n\\t}\\n\\n\\treturn count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2999122,
                "title": "python-simple-and-clear-solution",
                "content": "# Approach\\nGo through the digits in num and check for each one if num is divided.\\n\\n# Code\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        res = 0\\n        \\n        for i in list(str(num)):\\n            if not num % int(i):\\n                res += 1\\n\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        res = 0\\n        \\n        for i in list(str(num)):\\n            if not num % int(i):\\n                res += 1\\n\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3129582,
                "title": "python-easy-solution",
                "content": "# Code\\u2705\\nSolution 1:\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        count = [digit for digit in str(num) if num % int(digit) == 0]\\n        return len(count)\\n```\\nSolution 2:\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        count = 0\\n        for digit in str(num):\\n            if num % int(digit) == 0:\\n                count +=1\\n        return count\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        count = [digit for digit in str(num) if num % int(digit) == 0]\\n        return len(count)\\n```\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        count = 0\\n        for digit in str(num):\\n            if num % int(digit) == 0:\\n                count +=1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3054148,
                "title": "java-100-faster-shotest-code",
                "content": "![coutn digit.PNG](https://assets.leetcode.com/users/images/fdfb4209-f4eb-46b8-a8c1-eb8012f9d314_1673778912.6200123.png)\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count = 0;\\n        int storingNumber = num;\\n        while (num != 0) {\\n            int r = num % 10;\\n            if (r != 0 && storingNumber % r == 0) {\\n                count++;\\n            }\\n            num = num / 10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count = 0;\\n        int storingNumber = num;\\n        while (num != 0) {\\n            int r = num % 10;\\n            if (r != 0 && storingNumber % r == 0) {\\n                count++;\\n            }\\n            num = num / 10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2979994,
                "title": "one-line-swift-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    func countDigits(_ num: Int) -> Int {\\n        String(num).compactMap(\\\\.wholeNumberValue).filter{ num.isMultiple(of: $0) }.count\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func countDigits(_ num: Int) -> Int {\\n        String(num).compactMap(\\\\.wholeNumberValue).filter{ num.isMultiple(of: $0) }.count\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977556,
                "title": "easy-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        vector<int> v;\\n        int j=1, res, sum=0, original = num;\\n        \\n        while(num!=0){\\n            int k = num % 10;\\n            if(original%k==0)\\n                sum++;\\n            num = num/10;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        vector<int> v;\\n        int j=1, res, sum=0, original = num;\\n        \\n        while(num!=0){\\n            int k = num % 10;\\n            if(original%k==0)\\n                sum++;\\n            num = num/10;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977294,
                "title": "short-clean-java-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int tmp = num, count = 0;\\n        while(tmp > 0){\\n            int val = tmp%10;\\n            if(val != 0 && num % val == 0)   count++;\\n            tmp /= 10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int tmp = num, count = 0;\\n        while(tmp > 0){\\n            int val = tmp%10;\\n            if(val != 0 && num % val == 0)   count++;\\n            tmp /= 10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3467622,
                "title": "beats-100-very-simple-and-easy-solution-must-visit-for-new-beginners",
                "content": "# Intuition\\n![code.jpg](https://assets.leetcode.com/users/images/630c567e-02cf-4599-8487-eec99122726b_1682795106.9404132.jpeg)\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Code\\n```\\nint countDigits(int num){\\n    int c=0;\\n    int digit=0;\\n    int x=num;\\n    while(num>0)\\n    {\\n        digit=num % 10;\\n        if(x % digit ==0)\\n        {\\n            c++;\\n        }\\n        num=num/10;\\n    }\\n    return c;\\n\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nint countDigits(int num){\\n    int c=0;\\n    int digit=0;\\n    int x=num;\\n    while(num>0)\\n    {\\n        digit=num % 10;\\n        if(x % digit ==0)\\n        {\\n            c++;\\n        }\\n        num=num/10;\\n    }\\n    return c;\\n\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3408350,
                "title": "c-simple-easy-to-understand",
                "content": "````\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0, n = num,k;\\n        while(n){\\n            k = n%10;//GET LAST DIGIT OF NUMBER\\n            n /= 10;//DIVIDE NUMBER BY 10\\n            if(num%k==0)ans++;//IF NUM DIVISIBLE BY DIGIT OF NUM INCREMENT ANS BY 1\\n        }\\n        return ans;\\n    }\\n};\\n````",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "````\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0, n = num,k;\\n        while(n){\\n            k = n%10;//GET LAST DIGIT OF NUMBER\\n            n /= 10;//DIVIDE NUMBER BY 10\\n            if(num%k==0)ans++;//IF NUM DIVISIBLE BY DIGIT OF NUM INCREMENT ANS BY 1\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3078251,
                "title": "java-solution-for-beginners",
                "content": "Please Upvote if you like my solution!\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        String str = Integer.toString(num);\\n        int count = 0;\\n        for(int i = 0;i<str.length();i++){\\n            int a = str.charAt(i) - \\'0\\';\\n            if(num%a == 0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        String str = Integer.toString(num);\\n        int count = 0;\\n        for(int i = 0;i<str.length();i++){\\n            int a = str.charAt(i) - \\'0\\';\\n            if(num%a == 0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2983876,
                "title": "c-easy-solution-simple",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nDeviding the number with each digit of the number.\\n\\n# Complexity\\n- Time complexity:O(1)\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int n=num;\\n        int cnt=0;\\n        while(n){\\n            int r=n%10;\\n            n=n/10;\\n            if(num%r==0)cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int n=num;\\n        int cnt=0;\\n        while(n){\\n            int r=n%10;\\n            n=n/10;\\n            if(num%r==0)cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2978847,
                "title": "c-easy-to-understand-very-simple-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int n=num;\\n        int cnt=0;\\n        while(n>0){\\n            int rem=n%10;\\n            if(num%rem==0){\\n                cnt++;\\n            }\\n            n/=10;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int n=num;\\n        int cnt=0;\\n        while(n>0){\\n            int rem=n%10;\\n            if(num%rem==0){\\n                cnt++;\\n            }\\n            n/=10;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977824,
                "title": "python3-simple-solution",
                "content": "Iterate over the **digits** of the original number and check the remainder when dividing:\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        count = 0\\n        \\n        for digit in str(num):\\n            if num % int(digit) == 0:\\n                count += 1\\n                \\n        return count\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        count = 0\\n        \\n        for digit in str(num):\\n            if num % int(digit) == 0:\\n                count += 1\\n                \\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977701,
                "title": "beats-100-explanation-o-n-codedominar-solution",
                "content": "# Approach 1 \\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        # Initialize a count of divisor digits to 0\\n        cnt = 0\\n        # Store a copy of num in a temporary variable for processing\\n        tmp = num\\n        # Loop until tmp is 0\\n        while tmp:\\n            # If num is divisible by the last digit of tmp, increment the count\\n            if num % (tmp % 10) == 0:\\n                cnt += 1\\n            # Remove the last digit of tmp by integer division\\n            tmp //= 10\\n        # Return the final count\\n        return cnt\\n\\n        \\n```\\n\\n\\n---\\n\\n\\n\\n# Approach 2\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        # Initialize a count of divisor digits to 0\\n        cnt = 0\\n        # Convert num to a string for processing\\n        num_str = str(num)\\n        # Iterate over the characters in the string representation of num\\n        for digit in num_str:\\n            # If num is divisible by the current digit, increment the count\\n            if num % int(digit) == 0:\\n                cnt += 1\\n        # Return the final count\\n        return cnt\\n\\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        # Initialize a count of divisor digits to 0\\n        cnt = 0\\n        # Store a copy of num in a temporary variable for processing\\n        tmp = num\\n        # Loop until tmp is 0\\n        while tmp:\\n            # If num is divisible by the last digit of tmp, increment the count\\n            if num % (tmp % 10) == 0:\\n                cnt += 1\\n            # Remove the last digit of tmp by integer division\\n            tmp //= 10\\n        # Return the final count\\n        return cnt\\n\\n        \\n```\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        # Initialize a count of divisor digits to 0\\n        cnt = 0\\n        # Convert num to a string for processing\\n        num_str = str(num)\\n        # Iterate over the characters in the string representation of num\\n        for digit in num_str:\\n            # If num is divisible by the current digit, increment the count\\n            if num % int(digit) == 0:\\n                cnt += 1\\n        # Return the final count\\n        return cnt\\n\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977524,
                "title": "c-3-line-code-beginner-friendly-code",
                "content": "![image](https://assets.leetcode.com/users/images/77e19f79-00c4-45c3-84e8-ee44b3b733ad_1672546226.7368474.png)\\n\\n**n==number of digits of num\\nT->O(n) && S->O(1)**\\n\\n\\tclass Solution {\\n\\t\\tpublic:\\n\\t\\t\\tint countDigits(int num) {\\n\\t\\t\\t\\tint val=num;\\n\\t\\t\\t\\tint count=0;\\n\\t\\t\\t\\twhile(num){\\n\\t\\t\\t\\t\\tif(val%(num%10)==0)count++;\\n\\t\\t\\t\\t\\tnum/=10;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn count;\\n\\t\\t\\t}\\n\\t\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\t\\tpublic:\\n\\t\\t\\tint countDigits(int num) {\\n\\t\\t\\t\\tint val=num;\\n\\t\\t\\t\\tint count=0;\\n\\t\\t\\t\\twhile(num){\\n\\t\\t\\t\\t\\tif(val%(num%10)==0)count++;\\n\\t\\t\\t\\t\\tnum/=10;\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2977276,
                "title": "easy-short-efficient-clean-code",
                "content": "```\\nclass Solution {\\npublic:\\nint countDigits(int n) {\\n    int m=n, ans=0;\\n    while(m>0){\\n        int x=m%10;\\n        m/=10;\\n        ans+=(n%x)==0;\\n    }\\n    return ans;\\n}\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nint countDigits(int n) {\\n    int m=n, ans=0;\\n    while(m>0){\\n        int x=m%10;\\n        m/=10;\\n        ans+=(n%x)==0;\\n    }\\n    return ans;\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3560788,
                "title": "javascript-easy-oneliner",
                "content": "# Intuition\\nThe code implements a function called countDigits that takes a number num as input. The goal is to count the number of digits in num that evenly divide num.\\n# Approach\\n\\nThe approach used in the code is as follows:\\n\\n1. Convert the number num to a string using the toString() method.\\n2. Split the string into an array of individual characters representing the digits of the number using the split(\\'\\') method.\\n3. Apply the reduce() method on the array of digits to calculate the count of digits that evenly divide num.\\n4. In each iteration of reduce(), check if the current digit (cur) evenly divides num using the modulo operator (num % +cur === 0).\\n    * If the digit evenly divides num, increment the accumulator (acc) by 1.\\n    * If the digit does not evenly divide num, keep the accumulator unchanged.\\n5. Finally, the resulting count of digits that evenly divide num is returned.\\n# Complexity\\n- Time complexity:\\n O(n), where n is the number of digits in num.\\n- Space complexity:\\n O(n), as an array of digits is created.\\n# Code\\n```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar countDigits = (num) =>\\n    num.toString().split(\\'\\').reduce((acc,curr)=> (num % +curr ===0 ? acc+1 : acc), 0)\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar countDigits = (num) =>\\n    num.toString().split(\\'\\').reduce((acc,curr)=> (num % +curr ===0 ? acc+1 : acc), 0)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3306832,
                "title": "zero-ms-solution-naive-approach-simple-maths-if-any-doubt-i-will-try-to-resolve-it",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int temp = num;\\n        int count = 0;\\n        while(num != 0) {\\n            int div = num % 10;\\n            if (temp % div == 0) {\\n                count++;\\n            }\\n        num = num/10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int temp = num;\\n        int count = 0;\\n        while(num != 0) {\\n            int div = num % 10;\\n            if (temp % div == 0) {\\n                count++;\\n            }\\n        num = num/10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3241157,
                "title": "crazy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        count=0\\n        n=str(num)\\n        for i in n:\\n            if num%int(i)==0:\\n                count+=1\\n        return count\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        count=0\\n        n=str(num)\\n        for i in n:\\n            if num%int(i)==0:\\n                count+=1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3240394,
                "title": "easiest-python-solution-you-ever-found",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        count=0\\n        x=str(num)\\n        for i in x:\\n            if num%int(i)==0:\\n                count+=1\\n            else:\\n                count+=0\\n        return count\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        count=0\\n        x=str(num)\\n        for i in x:\\n            if num%int(i)==0:\\n                count+=1\\n            else:\\n                count+=0\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3076087,
                "title": "easy-solution",
                "content": "\\n# 1 line\\n```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar countDigits = function(num) {\\n    return String(num).split(\\'\\').reduce((acc, val) => acc += num % +val === 0 ? 1 : 0 ,0)\\n};\\n```\\n# Easy to understand\\n```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar countDigits = function(num) {\\n     let count = 0;\\n\\n     for (let i = 0; i < String(num).length; i++) {\\n        if (num % Number(String(num)[i]) === 0) count++\\n    }\\n\\n    return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar countDigits = function(num) {\\n    return String(num).split(\\'\\').reduce((acc, val) => acc += num % +val === 0 ? 1 : 0 ,0)\\n};\\n```\n```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar countDigits = function(num) {\\n     let count = 0;\\n\\n     for (let i = 0; i < String(num).length; i++) {\\n        if (num % Number(String(num)[i]) === 0) count++\\n    }\\n\\n    return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3016425,
                "title": "rust-simple-1-liner-solution",
                "content": "```rust\\nimpl Solution {\\n    pub fn count_digits(num: i32) -> i32 {\\n        num.to_string().bytes().filter(|x| num % (x - 48) as i32 == 0).count() as i32\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn count_digits(num: i32) -> i32 {\\n        num.to_string().bytes().filter(|x| num % (x - 48) as i32 == 0).count() as i32\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2985247,
                "title": "c-hashmap-easy-40-time-60-space",
                "content": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n      unordered_map<int, int> um;\\n      int temp = num;\\n      while(temp){\\n        int ld = temp % 10;\\n        temp /= 10;\\n        um[ld]++;\\n      }\\n      int ans = 0;\\n      for(auto &[f, s]: um){\\n        if(num % f == 0) ans += s;\\n      }\\n      return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n      unordered_map<int, int> um;\\n      int temp = num;\\n      while(temp){\\n        int ld = temp % 10;\\n        temp /= 10;\\n        um[ld]++;\\n      }\\n      int ans = 0;\\n      for(auto &[f, s]: um){\\n        if(num % f == 0) ans += s;\\n      }\\n      return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2981371,
                "title": "simple-java-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int k=num;\\n        int c=0;\\n        while(num!=0)\\n        {\\n            if(check(k,num%10))\\n            {\\n                c++;\\n            }\\n            num/=10;\\n        }\\n        return c;\\n    }\\n    public boolean check(int num, int div)\\n    {\\n        return num%div==0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int k=num;\\n        int c=0;\\n        while(num!=0)\\n        {\\n            if(check(k,num%10))\\n            {\\n                c++;\\n            }\\n            num/=10;\\n        }\\n        return c;\\n    }\\n    public boolean check(int num, int div)\\n    {\\n        return num%div==0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2979208,
                "title": "c-simple-solution",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int cnt=0;\\n        string str=to_string(num);\\n        for(auto i:str){\\n            int val= i-\\'0\\';\\n            if(num%val==0)\\n            cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int cnt=0;\\n        string str=to_string(num);\\n        for(auto i:str){\\n            int val= i-\\'0\\';\\n            if(num%val==0)\\n            cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2978987,
                "title": "full-explanation-brute-force",
                "content": "# Intuition\\nBRUTE FORCE \\n\\n# Approach\\nTo solve this problem, you can first convert the integer to a string so that you can iterate through each digit of the number. Then, you can iterate through each digit of the number, convert it back to an integer, and check if it divides the original number. If it does, you can increment a count. At the end, return the count.\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        \\n    string s = to_string(num);\\n    int count = 0;\\n\\n    for (int i=0;i<s.size();i++) {\\n      if (num % (s[i]-\\'0\\') == 0) {\\n        count++;\\n      }\\n    }\\n    return count;\\n    }\\n};\\n```\\n\\n\\n# Upvote if you like",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        \\n    string s = to_string(num);\\n    int count = 0;\\n\\n    for (int i=0;i<s.size();i++) {\\n      if (num % (s[i]-\\'0\\') == 0) {\\n        count++;\\n      }\\n    }\\n    return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2978768,
                "title": "most-short-easiest-clean-code",
                "content": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n       int cnt = 0;\\n        for (auto ch : to_string(num))\\n            cnt += (num % (ch - \\'0\\') == 0);\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n       int cnt = 0;\\n        for (auto ch : to_string(num))\\n            cnt += (num % (ch - \\'0\\') == 0);\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2978456,
                "title": "my-c-solution",
                "content": "# Complexity\\n- Time complexity: O(n)\\n- Space complexity: o(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int n = num;\\n        int count = 0;\\n        while(num!=0)\\n        {\\n            if(n%(num%10) == 0)\\n            {\\n                count++;\\n            }\\n            \\n            num=num/10;\\n        }\\n        \\n        return count;\\n        \\n    }\\n};\\n\\n# Please vote if you like my answer\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int n = num;\\n        int count = 0;\\n        while(num!=0)\\n        {\\n            if(n%(num%10) == 0)\\n            {\\n                count++;\\n            }\\n            \\n            num=num/10;\\n        }\\n        \\n        return count;\\n        \\n    }\\n};\\n\\n# Please vote if you like my answer\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977514,
                "title": "java-solution-easy-and-concise-beats-100",
                "content": "```\\nclass Solution {\\n    public int countDigits(int n) {\\n        int a=n, c=0;\\n        while(n>0)\\n        {\\n            if(a%(n%10)==0)\\n                c++;\\n            n/=10;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int n) {\\n        int a=n, c=0;\\n        while(n>0)\\n        {\\n            if(a%(n%10)==0)\\n                c++;\\n            n/=10;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977248,
                "title": "short-concise-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int a = num, ans = 0;\\n        while(a) {\\n            if(num % (a % 10) == 0) ans++;\\n            a /= 10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int a = num, ans = 0;\\n        while(a) {\\n            if(num % (a % 10) == 0) ans++;\\n            a /= 10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3938258,
                "title": "simple-easy-soln",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int n) {\\n       int cnt=0;\\n        int t=n;\\n        while(n>0){\\nint x=n%10;\\n            if(t%x==0) cnt++;\\n            n=n/10;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int n) {\\n       int cnt=0;\\n        int t=n;\\n        while(n>0){\\nint x=n%10;\\n            if(t%x==0) cnt++;\\n            n=n/10;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3892253,
                "title": "intuitive-easy-and-concise-beats-100",
                "content": "# Intuition\\nThe problem asks us to count the digits within a given number that can divide the entire number evenly, without leaving any remainder. To achieve this, we need to identify each digit within the number and check whether it satisfies the divisibility condition.\\n\\n# Approach\\n1. We create a temporary variable to work with (temp).\\n1. We initialize a counter (count) to keep track of qualifying digits.\\n1. We iterate through each digit of the number using a loop, extracting digits from the least significant digit to the most significant digit.\\n1. For each digit, we check if it divides the original number evenly. If it does, we increment the counter.\\n1. After processing each digit, we move to the next digit by dividing the temp variable by 10.\\n1. Finally, we return the counter, which represents the count of digits that evenly divide the original number.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of your solution depends on the number of digits in the input number num. If the number has d digits, the time complexity is $$O(d)$$ because you iterate through each digit once.\\n\\n- Space complexity:\\nThe space complexity is $$O(1)$$ because you only use a constant amount of extra space for the temp variable, the count variable, and the loop variables.\\n\\n# Code\\n```java []\\nclass Solution {\\n    public int countDigits(int num) {\\n        int temp = num;     // Create a temporary variable to store the original number\\n        int count = 0;      // Initialize a counter to keep track of qualifying digits\\n        \\n        // Iterate through each digit of the number\\n        while (temp > 0) {\\n            int digit = temp % 10;  // Get the last digit of the number\\n            \\n            // Check if the digit divides the original number evenly\\n            if (num % digit == 0) {\\n                count++;            // Increment the counter if the digit qualifies\\n            }\\n            \\n            temp = temp / 10;       // Move to the next digit by removing the last digit\\n        }\\n        \\n        return count;   // Return the final count of digits that divide the number evenly\\n    }\\n}\\n\\n```\\n```python []\\nclass Solution:\\n    def countDigits(self, num):\\n        temp = num     # Create a temporary variable to store the original number\\n        count = 0      # Initialize a counter to keep track of qualifying digits\\n        \\n        # Iterate through each digit of the number\\n        while temp > 0:\\n            digit = temp % 10  # Get the last digit of the number\\n            \\n            # Check if the digit divides the original number evenly\\n            if num % digit == 0:\\n                count += 1       # Increment the counter if the digit qualifies\\n            \\n            temp = temp / 10    # Move to the next digit by removing the last digit\\n        \\n        return count  # Return the final count of digits that divide the number evenly\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int temp = num;  // Create a temporary variable to store the original number\\n        int count = 0;   // Initialize a counter to keep track of qualifying digits\\n        \\n        // Iterate through each digit of the number\\n        while (temp > 0) {\\n            int digit = temp % 10;  // Get the last digit of the number\\n            \\n            // Check if the digit divides the original number evenly\\n            if (num % digit == 0) {\\n                count++;  // Increment the counter if the digit qualifies\\n            }\\n            \\n            temp = temp / 10;  // Move to the next digit by removing the last digit\\n        }\\n        \\n        return count;  // Return the final count of digits that divide the number evenly\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Math"
                ],
                "code": "```java []\\nclass Solution {\\n    public int countDigits(int num) {\\n        int temp = num;     // Create a temporary variable to store the original number\\n        int count = 0;      // Initialize a counter to keep track of qualifying digits\\n        \\n        // Iterate through each digit of the number\\n        while (temp > 0) {\\n            int digit = temp % 10;  // Get the last digit of the number\\n            \\n            // Check if the digit divides the original number evenly\\n            if (num % digit == 0) {\\n                count++;            // Increment the counter if the digit qualifies\\n            }\\n            \\n            temp = temp / 10;       // Move to the next digit by removing the last digit\\n        }\\n        \\n        return count;   // Return the final count of digits that divide the number evenly\\n    }\\n}\\n\\n```\n```python []\\nclass Solution:\\n    def countDigits(self, num):\\n        temp = num     # Create a temporary variable to store the original number\\n        count = 0      # Initialize a counter to keep track of qualifying digits\\n        \\n        # Iterate through each digit of the number\\n        while temp > 0:\\n            digit = temp % 10  # Get the last digit of the number\\n            \\n            # Check if the digit divides the original number evenly\\n            if num % digit == 0:\\n                count += 1       # Increment the counter if the digit qualifies\\n            \\n            temp = temp / 10    # Move to the next digit by removing the last digit\\n        \\n        return count  # Return the final count of digits that divide the number evenly\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int temp = num;  // Create a temporary variable to store the original number\\n        int count = 0;   // Initialize a counter to keep track of qualifying digits\\n        \\n        // Iterate through each digit of the number\\n        while (temp > 0) {\\n            int digit = temp % 10;  // Get the last digit of the number\\n            \\n            // Check if the digit divides the original number evenly\\n            if (num % digit == 0) {\\n                count++;  // Increment the counter if the digit qualifies\\n            }\\n            \\n            temp = temp / 10;  // Move to the next digit by removing the last digit\\n        }\\n        \\n        return count;  // Return the final count of digits that divide the number evenly\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3875385,
                "title": "python-easy-solution-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        res=0\\n        for i in str(num):\\n            if num%int(i)==0:\\n                res+=1\\n\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        res=0\\n        for i in str(num):\\n            if num%int(i)==0:\\n                res+=1\\n\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3797597,
                "title": "fully-explained-c-100-beats-in-time-complexity",
                "content": "# Intuition &  Approach\\n\\n1. ```int result = 0;```: A variable result is initialized to zero. This variable will keep track of the count of digits that divide ```num```.\\n\\n2. ```int tempNum = num;```: A temporary variable ```tempNum``` is initialized with the same value as ```num```. This is done to preserve the original value of ```num``` since it will be modified later in the code.\\n\\n3. ```while (num)```: This is a while loop that runs as long as ```num``` is non-zero. The purpose of this loop is to extract the individual digits of ```num``` and *check if they divide tempNum evenly*.\\n\\n4. ```if (tempNum % (num % 10) == 0)```: This line extracts the last digit of ```num``` (the least significant digit) by calculating ```num % 10```. Then, it checks whether the extracted digit divides tempNum evenly (i.e., with a remainder of zero). If it does, then:\\n\\n- ```result += 1;```: The result variable is incremented by 1, indicating that the current digit is a divisor of ```tempNum```.\\n\\n- ```num /= 10;```: This line removes the last digit of ```num``` by dividing it by 10. This operation effectively shifts the number one digit to the right (*removing the least significant digit*).\\n\\n5. After the above ```while``` loop, the function will have iterated through all the digits of the original ```num```, and the variable ```result``` will hold the count of digits that divide ```tempNum``` evenly.\\n\\n6. **Finally**, the function returns the value of ```result```, which represents the count of digits in the original num that divide ```num``` evenly.\\n\\n7. After the above while loop, the vector arr will contain the individual digits of ```num``` in reverse order.\\n\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        \\n        int result = 0;\\n        int tempNum = num;\\n\\n        while(num){\\n\\n            \\n            if(tempNum % (num % 10) == 0){\\n                result +=1;\\n            }\\n            num /= 10;\\n        }\\n       \\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```int result = 0;```\n```num```\n```int tempNum = num;```\n```tempNum```\n```num```\n```num```\n```while (num)```\n```num```\n```num```\n```if (tempNum % (num % 10) == 0)```\n```num```\n```num % 10```\n```result += 1;```\n```tempNum```\n```num /= 10;```\n```num```\n```while```\n```num```\n```result```\n```tempNum```\n```result```\n```num```\n```num```\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        \\n        int result = 0;\\n        int tempNum = num;\\n\\n        while(num){\\n\\n            \\n            if(tempNum % (num % 10) == 0){\\n                result +=1;\\n            }\\n            num /= 10;\\n        }\\n       \\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3697417,
                "title": "easy-and-simple-solution-in-java-0ms-runtime",
                "content": "# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count = 0;\\n        int n=num;\\n        while(num!=0)\\n        {\\n            int k=num%10;\\n            if(n%k==0)\\n            {\\n                count++;\\n            }\\n            num/=10;\\n        }\\n        return count; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count = 0;\\n        int n=num;\\n        while(num!=0)\\n        {\\n            int k=num%10;\\n            if(n%k==0)\\n            {\\n                count++;\\n            }\\n            num/=10;\\n        }\\n        return count; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3697416,
                "title": "0ms-solution-in-c-beats-94-memory",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int temp=num;\\n        int count=0;\\n        while (temp>0)\\n        {\\n            int dig=temp%10;\\n            if (num%dig==0) count++;\\n            temp/=10;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int temp=num;\\n        int count=0;\\n        while (temp>0)\\n        {\\n            int dig=temp%10;\\n            if (num%dig==0) count++;\\n            temp/=10;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3668040,
                "title": "0-ms-c-solution",
                "content": "# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int count=0;\\n        int copy=num;\\n        while(copy!=0)\\n        {\\n            int rem=copy%10;\\n            if(num%rem==0) count++;\\n            copy=copy/10;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int count=0;\\n        int copy=num;\\n        while(copy!=0)\\n        {\\n            int rem=copy%10;\\n            if(num%rem==0) count++;\\n            copy=copy/10;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3662293,
                "title": "2520-count-the-digits-that-divide-a-number-100-easy-java-code",
                "content": "# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count = 0;\\n        int r = 0;\\n        int res = num;\\n        while(res>0){\\n            r = res%10;\\n            res = res/10;\\n            if(num% r == 0){\\n                count++;\\n            }\\n\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count = 0;\\n        int r = 0;\\n        int res = num;\\n        while(res>0){\\n            r = res%10;\\n            res = res/10;\\n            if(num% r == 0){\\n                count++;\\n            }\\n\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3593808,
                "title": "java-easy-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n<!-- Intuition is simple just simple access each digit and divide from the given number if the remainder is **Zero** then increase the count. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n      int b = num;\\n      int count = 0;\\n      while(num != 0){\\n        int rem = num % 10;\\n        num/=10;\\n        if(b % rem == 0){\\n          count++;\\n        }\\n\\n      }\\n      return count;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n      int b = num;\\n      int count = 0;\\n      while(num != 0){\\n        int rem = num % 10;\\n        num/=10;\\n        if(b % rem == 0){\\n          count++;\\n        }\\n\\n      }\\n      return count;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3571466,
                "title": "beginners-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count =0;\\n\\n        int x=num;\\n\\n        while(x!=0){\\n            int t= x%10;\\n            if(t!=0 && num%t==0) count++; \\n            x/=10;\\n        }\\n\\n        \\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count =0;\\n\\n        int x=num;\\n\\n        while(x!=0){\\n            int t= x%10;\\n            if(t!=0 && num%t==0) count++; \\n            x/=10;\\n        }\\n\\n        \\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3549805,
                "title": "easy-1-line-solution-python3",
                "content": "# Code\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        return sum(1 for x in str(num) if num % int(x) == 0)\\n       \\n                \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        return sum(1 for x in str(num) if num % int(x) == 0)\\n       \\n                \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3508754,
                "title": "best-code-with-o-log-n-time-complexity",
                "content": "# Intuition\\nTo solve this problem, we need to count the number of digits in a given positive integer that divide the number itself without leaving a remainder. \\n\\n# Approach\\nWe can implement this algorithm using a simple while loop. First, initialize a counter variable to zero and store the input number in a separate variable. Then, while the input number is greater than zero, find the remainder of the number when it is divided by 10 to get the rightmost digit. Check if the stored input number is divisible by this digit without leaving a remainder. If it is, increment the counter variable. Divide the input number by 10 to remove the rightmost digit. Repeat these steps until the input number becomes zero. Return the counter variable, which represents the number of digits in the original number that divide the number without leaving a remainder.\\n\\n# Complexity\\n- Time complexity: The time complexity of this algorithm is O(log n) because we are dividing the number by 10 in each step until it becomes zero, which results in log base 10 of n steps.\\n- Space complexity: The space complexity of this algorithm is O(1) because we are only using a constant amount of memory to store the counter variable and temporary variables.\\n\\n# Code\\n```\\nint countDigits(int num){\\nint a,b=0,c=num;\\nwhile(num>0){\\n    a=num%10;\\n    if(c%a==0){\\n        b++;\\n    }\\n    num/=10;\\n}\\nreturn b;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint countDigits(int num){\\nint a,b=0,c=num;\\nwhile(num>0){\\n    a=num%10;\\n    if(c%a==0){\\n        b++;\\n    }\\n    num/=10;\\n}\\nreturn b;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3360482,
                "title": "c-easy-to-understand-0ms-beats-100-one-iteration",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nC++ | EASY TO UNDERSTAND | 0ms Beats 100% | ONE ITERATION\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n    To begin, we create a new variable to store our initial number.\\n\\n    Next, we isolate the digit in the ones place of the number, and\\n    divide our initial number by this digit.\\n\\n    If the division is successful with no remainder, we increment \\n    our count and remove the digit in the ones place from our \\n    initial number.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    Runtime 0 ms,  Beats 100%\\n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    Memory 6 MB,  Beats:  10.29%\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int count,a,n = num;\\n        while(num>0)\\n        {\\n            a = num%10;\\n            if(n%a == 0)\\n            {\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n    return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int count,a,n = num;\\n        while(num>0)\\n        {\\n            a = num%10;\\n            if(n%a == 0)\\n            {\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n    return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3358805,
                "title": "very-easy-beats-100-0ms-java",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int n = String.valueOf(num).length();\\n\\n        // int arr[]= new int[n];\\n        int a=0;\\n        int flag=0;\\n        int copy=num;\\n\\n        for(int i =0 ;i<n;i++){\\n            a=num%10;\\n            if(copy%a==0){\\n                flag++;\\n            }\\n            num/=10;\\n        }\\n\\n        return flag;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int n = String.valueOf(num).length();\\n\\n        // int arr[]= new int[n];\\n        int a=0;\\n        int flag=0;\\n        int copy=num;\\n\\n        for(int i =0 ;i<n;i++){\\n            a=num%10;\\n            if(copy%a==0){\\n                flag++;\\n            }\\n            num/=10;\\n        }\\n\\n        return flag;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3354354,
                "title": "one-liner-solution-easy-undetstanding",
                "content": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        return (int)(Integer.toString(num)).chars()\\n                                           .map(Character::getNumericValue)\\n                                           .filter(digit -> digit != 0 && num % digit == 0)\\n                                           .count();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        return (int)(Integer.toString(num)).chars()\\n                                           .map(Character::getNumericValue)\\n                                           .filter(digit -> digit != 0 && num % digit == 0)\\n                                           .count();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3352530,
                "title": "easy-c-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans=0;\\n        int temp=num;\\n        while(temp>0){\\n            if(num%(temp%10)==0)ans++;\\n            temp/=10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans=0;\\n        int temp=num;\\n        while(temp>0){\\n            if(num%(temp%10)==0)ans++;\\n            temp/=10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3352528,
                "title": "easy-c-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans=0;\\n        int temp=num;\\n        while(temp>0){\\n            if(num%(temp%10)==0)ans++;\\n            temp/=10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans=0;\\n        int temp=num;\\n        while(temp>0){\\n            if(num%(temp%10)==0)ans++;\\n            temp/=10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3330091,
                "title": "easiest-java-solution-100-faster",
                "content": "# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count = 0;\\n        int digit = 0;\\n        int temp = num;\\n        while (num != 0) {\\n            digit = num % 10;\\n            if (temp % digit == 0) {\\n                count++;\\n            }\\n            num = num / 10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count = 0;\\n        int digit = 0;\\n        int temp = num;\\n        while (num != 0) {\\n            digit = num % 10;\\n            if (temp % digit == 0) {\\n                count++;\\n            }\\n            num = num / 10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3327436,
                "title": "simple-java-solution-beats-100",
                "content": "# Code\\n```\\npublic int countDigits(int num) {\\n    int count = 0, temp = num;\\n    \\n    while (temp > 0) {\\n        count += num % (temp%10) == 0 ? 1 : 0; \\n        temp /= 10;\\n    }\\n    \\n    return count;\\n}\\n```\\n<br/>\\n<br/>\\n<br/>\\n\\nAuthor :- [*Abhinav Bhardwaj*](https://abhinavbhardwaj.in)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int countDigits(int num) {\\n    int count = 0, temp = num;\\n    \\n    while (temp > 0) {\\n        count += num % (temp%10) == 0 ? 1 : 0; \\n        temp /= 10;\\n    }\\n    \\n    return count;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3324522,
                "title": "simplest-solution-in-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        temp=0\\n        st=str(num)\\n        for i in st:\\n            if num%int(i)==0:\\n                temp+=1\\n        return temp\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        temp=0\\n        st=str(num)\\n        for i in st:\\n            if num%int(i)==0:\\n                temp+=1\\n        return temp\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3229029,
                "title": "java-100-beast",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        String s = String.valueOf(num);\\n        int x = 0;\\n        for(int i = 0; i < s.length(); i++){\\n            if(num % Integer.parseInt(s.substring(i,i+1)) == 0)\\n                x++;\\n        }\\n        return x;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        String s = String.valueOf(num);\\n        int x = 0;\\n        for(int i = 0; i < s.length(); i++){\\n            if(num % Integer.parseInt(s.substring(i,i+1)) == 0)\\n                x++;\\n        }\\n        return x;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3228326,
                "title": "very-easy-java-solution-straightforward-approach",
                "content": "# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int cnt=0;\\n        int n = num;\\n        while(n>0){\\n            int rem = n%10;\\n            if(rem!=0 && num%rem==0){\\n                cnt++;\\n            }\\n            n=n/10;\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int cnt=0;\\n        int n = num;\\n        while(n>0){\\n            int rem = n%10;\\n            if(rem!=0 && num%rem==0){\\n                cnt++;\\n            }\\n            n=n/10;\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3172578,
                "title": "count-the-digits-that-divide-a-number-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFind all the digits of the number\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nGet all the elements of the number using a while loop and store in an array. Then divide the number by the digits and if it\\'s fully divisible then increment count variable. Return count in the end.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int i, j, n, flag=0, count=0;\\n        vector<int> arr;\\n        n = num;\\n        while(num>0)\\n        {\\n            i = num%10;\\n            num = num/10;\\n            arr.push_back(i);\\n        }\\n\\n        for(i=0 ; i<arr.size() ; i++)\\n        {\\n            if(n%arr[i]==0)\\n            {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int i, j, n, flag=0, count=0;\\n        vector<int> arr;\\n        n = num;\\n        while(num>0)\\n        {\\n            i = num%10;\\n            num = num/10;\\n            arr.push_back(i);\\n        }\\n\\n        for(i=0 ; i<arr.size() ; i++)\\n        {\\n            if(n%arr[i]==0)\\n            {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3169888,
                "title": "swift-fast-one-liner",
                "content": "**One-Liner, terse (accepted answer)**\\n```\\nclass Solution {\\n    func countDigits(_ num: Int) -> Int {\\n        \"\\\\(num)\".reduce(0){$0+(num%$1.wholeNumberValue!==0 ? 1:0)}\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func countDigits(_ num: Int) -> Int {\\n        \"\\\\(num)\".reduce(0){$0+(num%$1.wholeNumberValue!==0 ? 1:0)}\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3128558,
                "title": "beats-76-69-count-the-digits-that-divide-a-number",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        count=0\\n        temp=num\\n        while num>0:\\n            rem=num%10\\n            if temp%rem==0:\\n                count+=1\\n            num//=10\\n        return count\\n        \\n            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        count=0\\n        temp=num\\n        while num>0:\\n            rem=num%10\\n            if temp%rem==0:\\n                count+=1\\n            num//=10\\n        return count\\n        \\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3121094,
                "title": "c-tostring",
                "content": "# Code\\n```\\npublic class Solution \\n{\\n    public int CountDigits(int num) \\n    {\\n        var s = num.ToString();\\n        var res = 0;\\n\\n        for(var i = 0; i < s.Length; i++)\\n        {\\n            var cur = s[i] - \\'0\\';\\n            if(num % cur == 0)\\n            {\\n                res++;\\n            }\\n        }\\n        return res;  \\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution \\n{\\n    public int CountDigits(int num) \\n    {\\n        var s = num.ToString();\\n        var res = 0;\\n\\n        for(var i = 0; i < s.Length; i++)\\n        {\\n            var cur = s[i] - \\'0\\';\\n            if(num % cur == 0)\\n            {\\n                res++;\\n            }\\n        }\\n        return res;  \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3117326,
                "title": "c-beats-100",
                "content": "\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int n) {\\n        if(n < 10) return 1;\\n        int x = n, count = 0;;\\n        while(x) {\\n            if(n % (x % 10) == 0) count++;\\n            x /= 10;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int n) {\\n        if(n < 10) return 1;\\n        int x = n, count = 0;;\\n        while(x) {\\n            if(n % (x % 10) == 0) count++;\\n            x /= 10;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3104374,
                "title": "java-0ms-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int temp = num, count = 0;\\n        while (temp > 0) {\\n            if (num % (temp % 10) == 0) count++;\\n            temp /= 10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int temp = num, count = 0;\\n        while (temp > 0) {\\n            if (num % (temp % 10) == 0) count++;\\n            temp /= 10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3102233,
                "title": "c-simplest-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int temp=num,count=0;\\n        while(temp>0){\\n            int rem=temp%10;\\n            if(num%rem==0){\\n                count++;\\n            }\\n            temp=temp/10;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int temp=num,count=0;\\n        while(temp>0){\\n            int rem=temp%10;\\n            if(num%rem==0){\\n                count++;\\n            }\\n            temp=temp/10;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3099010,
                "title": "easy-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        c=0\\n        a=str(num)\\n        for i in range(len(a)):\\n            if(num%int(a[i])==0):\\n                c=c+1\\n        print(1%num)\\n        return c\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        c=0\\n        a=str(num)\\n        for i in range(len(a)):\\n            if(num%int(a[i])==0):\\n                c=c+1\\n        print(1%num)\\n        return c\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3077470,
                "title": "c-easy-understanding-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Iterate till the number is `greater than 0`\\n2. Find the `last digit` of the number \\n3. Check if it divides num\\n4. Increase `cnt` if it divides \\n5. Divide the number by 10.\\n6. Return the `cnt`\\n\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int temp = num ; \\n        int x ; \\n        int cnt = 0 ;\\n        while (num)\\n        {\\n            x = num % 10;\\n            if(temp % x == 0 )\\n            {\\n                cnt ++ ; \\n            }\\n            num = num /10;\\n        }\\n        return cnt ; \\n    }\\n};\\n```\\n![815a317f-9cdf-46e2-a397-af8869dafa2e_1673498197.3721023 (1).png](https://assets.leetcode.com/users/images/f45fd0c7-6e49-4cbc-86b3-cf7eb834f5c0_1674226046.226242.png)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int temp = num ; \\n        int x ; \\n        int cnt = 0 ;\\n        while (num)\\n        {\\n            x = num % 10;\\n            if(temp % x == 0 )\\n            {\\n                cnt ++ ; \\n            }\\n            num = num /10;\\n        }\\n        return cnt ; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3067581,
                "title": "c-easy-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int count = 0;\\n        int n = num;\\n        while(n != 0){\\n            int r = n % 10;\\n            if(num % r == 0) count++;\\n            n /= 10;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int count = 0;\\n        int n = num;\\n        while(n != 0){\\n            int r = n % 10;\\n            if(num % r == 0) count++;\\n            n /= 10;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3043401,
                "title": "easy-solution-using-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count=0;\\n        String temp = Integer.toString(num);\\n        int[] numbers = new int[temp.length()];\\n        for (int i=0;i<temp.length();i++){\\n            numbers[i]=Character.getNumericValue(temp.charAt(i));\\n            if(num%numbers[i]==0){\\n                count++;\\n            }\\n        }\\n\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count=0;\\n        String temp = Integer.toString(num);\\n        int[] numbers = new int[temp.length()];\\n        for (int i=0;i<temp.length();i++){\\n            numbers[i]=Character.getNumericValue(temp.charAt(i));\\n            if(num%numbers[i]==0){\\n                count++;\\n            }\\n        }\\n\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3039034,
                "title": "easy-java-solution-with-0-ms-runtime-tc-o-n-beats-100",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public int countDigits(int num) \\n    {\\n        int count = 0;\\n        for(int tempNum = num, currDiv; tempNum>0; tempNum/=10)\\n        {\\n            currDiv = tempNum%10;\\n            count += currDiv > 0 && num % currDiv == 0 ? 1 : 0;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int countDigits(int num) \\n    {\\n        int count = 0;\\n        for(int tempNum = num, currDiv; tempNum>0; tempNum/=10)\\n        {\\n            currDiv = tempNum%10;\\n            count += currDiv > 0 && num % currDiv == 0 ? 1 : 0;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3036602,
                "title": "dart",
                "content": "# Code\\n```dart\\nclass Solution {\\n  int countDigits(int num) {\\n    var result = 0;\\n    for (var rest = num; rest > 0; rest ~/= 10) {\\n      final digit = rest % 10;\\n      if (num % digit == 0) {\\n        result++;\\n      }\\n    }\\n    return result;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```dart\\nclass Solution {\\n  int countDigits(int num) {\\n    var result = 0;\\n    for (var rest = num; rest > 0; rest ~/= 10) {\\n      final digit = rest % 10;\\n      if (num % digit == 0) {\\n        result++;\\n      }\\n    }\\n    return result;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3035969,
                "title": "simple-js-solution-with-1-line",
                "content": "# Code\\n```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nconst countDigits = function (num) {\\n  return num.toString().split(\\'\\').filter(x => num % x == 0).length;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nconst countDigits = function (num) {\\n  return num.toString().split(\\'\\').filter(x => num % x == 0).length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3021880,
                "title": "c-solution-easy-basic-math",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        \\n    int count = 0;\\n    int n = num;\\n    while(n>0){\\n        if(num%(n%10) == 0)\\n            count++;\\n            n/=10;\\n    }\\n    return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        \\n    int count = 0;\\n    int n = num;\\n    while(n>0){\\n        if(num%(n%10) == 0)\\n            count++;\\n            n/=10;\\n    }\\n    return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3016013,
                "title": "java-100-short-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirst store input to another variable then check every digits if it\\'s divide the number.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int res = 0;\\n        int numCarry = num;\\n        while(numCarry>0){\\n            if(num % (numCarry%10) == 0) res++;\\n            numCarry/=10;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int res = 0;\\n        int numCarry = num;\\n        while(numCarry>0){\\n            if(num % (numCarry%10) == 0) res++;\\n            numCarry/=10;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3014491,
                "title": "c-100-easy",
                "content": "\\n# Code\\n```\\n\\nstatic auto _ = []() {\\n  std::ios::sync_with_stdio(false);\\n  std::cin.tie(nullptr);\\n  return nullptr;\\n}();\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int tmp= num, count=0, digit;\\n\\n        while (tmp){\\n            digit = tmp%10;\\n            if (num % digit == 0) count++;\\n            tmp = tmp/10;\\n        }\\n\\n        return count;        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n\\nstatic auto _ = []() {\\n  std::ios::sync_with_stdio(false);\\n  std::cin.tie(nullptr);\\n  return nullptr;\\n}();\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int tmp= num, count=0, digit;\\n\\n        while (tmp){\\n            digit = tmp%10;\\n            if (num % digit == 0) count++;\\n            tmp = tmp/10;\\n        }\\n\\n        return count;        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3012030,
                "title": "q2520-accepted-c-100-fastest-sol-easiest-simple",
                "content": "CRUX\\n1) We need to find the each digits of the number is able to divide it\\'s parent without remainder.\\n2) Thus, We apply a very simple approach by going through individual digits.\\n3) While traversing we check whether the digits divides the number completely then we increment count.\\n4) Otherwise, we move forward.\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int t=num; // Making a copy\\n        int count=0;\\n        while(t>0){ \\n            int x=t%10; //Ex- 256 , We get 6 , Used to find the last digit\\n            if(num%x==0) // If the digit divides the number the we increment count  \\n                count++;\\n            t=t/10; // Ex- 256 , We get 25 , Divide by 10 to move forward with traversal \\n        }\\n        return count; //Returing the answer\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int t=num; // Making a copy\\n        int count=0;\\n        while(t>0){ \\n            int x=t%10; //Ex- 256 , We get 6 , Used to find the last digit\\n            if(num%x==0) // If the digit divides the number the we increment count  \\n                count++;\\n            t=t/10; // Ex- 256 , We get 25 , Divide by 10 to move forward with traversal \\n        }\\n        return count; //Returing the answer\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3004388,
                "title": "easyyyyy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\nMD ARHAM KALAM ANSARI\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        unordered_set<int> s;\\n        unordered_map<int,int> m;\\n        int n=num;\\n        int k=num;\\n        while(num)\\n        {\\n            m[num%10]++;\\n            num=num/10;\\n        }\\n        int i;\\n        int c=0;\\n        while(n)\\n        {\\n            i=n%10;\\n            if(k%i==0 and s.find(i)==s.end())\\n            {\\n                c+=m[i];\\n                s.insert(i);\\n            }\\n            n=n/10;\\n        }\\n        return c;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        unordered_set<int> s;\\n        unordered_map<int,int> m;\\n        int n=num;\\n        int k=num;\\n        while(num)\\n        {\\n            m[num%10]++;\\n            num=num/10;\\n        }\\n        int i;\\n        int c=0;\\n        while(n)\\n        {\\n            i=n%10;\\n            if(k%i==0 and s.find(i)==s.end())\\n            {\\n                c+=m[i];\\n                s.insert(i);\\n            }\\n            n=n/10;\\n        }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2997880,
                "title": "c-most-easy-and-concise-solution",
                "content": "# Explanation\\nWe take `n` as a copy of `num` to split into digits.\\nWe start from the last digit - `n % 10` and check if it devides `num`.\\nThen we cut off the last digit and go on to the next one.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int res = 0, n = num;\\n        while (n) {\\n            res += num % (n % 10) ? 0 : 1;\\n            n /= 10;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int res = 0, n = num;\\n        while (n) {\\n            res += num % (n % 10) ? 0 : 1;\\n            n /= 10;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2994726,
                "title": "rust-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimpl Solution {\\n    pub fn count_digits(num: i32) -> i32 {\\n        let mut ans = 0;\\n        let mut t = num;\\n        while t > 0\\n        {\\n            if num % (t%10) == 0\\n            {\\n                ans += 1;\\n            }\\n            t/= 10;\\n        }\\n        ans\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn count_digits(num: i32) -> i32 {\\n        let mut ans = 0;\\n        let mut t = num;\\n        while t > 0\\n        {\\n            if num % (t%10) == 0\\n            {\\n                ans += 1;\\n            }\\n            t/= 10;\\n        }\\n        ans\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2994233,
                "title": "python-90-35-faster-easy-solution",
                "content": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        t,c=num,0\\n        while t>0:\\n            s=t%10\\n            if num%s==0:\\n                c+=1\\n            t//=10\\n        return c\\n```\\n\\n**An upvote will be encouraging**",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        t,c=num,0\\n        while t>0:\\n            s=t%10\\n            if num%s==0:\\n                c+=1\\n            t//=10\\n        return c\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2993675,
                "title": "easy-c-solution-just-read-it",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int c=0;\\n        int temp=num;\\n        while(temp)\\n        {\\n            int r=temp%10;\\n            if(num%r==0)\\n                c++;\\n            temp/=10;    \\n        }\\n        return c;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int c=0;\\n        int temp=num;\\n        while(temp)\\n        {\\n            int r=temp%10;\\n            if(num%r==0)\\n                c++;\\n            temp/=10;    \\n        }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2990902,
                "title": "simple-o-log-n-solution-c-clean-code",
                "content": "\\n# Complexity\\n- Time complexity:$$O(log(n))$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution\\n{\\npublic:\\n\\tint countDigits(int num)\\n\\t{\\n\\t\\tint x = num;\\n\\t\\tint ans = 0;\\n\\t\\twhile (num > 0)\\n\\t\\t{\\n\\t\\t\\tint p = num % 10; // digit\\n\\t\\t\\tif (p) // p should not be equal to zero, divide by zero error\\n\\t\\t\\t{ \\n\\t\\t\\t\\tif (x % p == 0)\\n\\t\\t\\t\\t\\tans++;\\n\\t\\t\\t}\\n\\t\\t\\tnum /= 10;\\n\\t\\t}\\n\\t\\treturn ans;\\n\\t}\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n\\tint countDigits(int num)\\n\\t{\\n\\t\\tint x = num;\\n\\t\\tint ans = 0;\\n\\t\\twhile (num > 0)\\n\\t\\t{\\n\\t\\t\\tint p = num % 10; // digit\\n\\t\\t\\tif (p) // p should not be equal to zero, divide by zero error\\n\\t\\t\\t{ \\n\\t\\t\\t\\tif (x % p == 0)\\n\\t\\t\\t\\t\\tans++;\\n\\t\\t\\t}\\n\\t\\t\\tnum /= 10;\\n\\t\\t}\\n\\t\\treturn ans;\\n\\t}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2988106,
                "title": "javascript-one-liner",
                "content": "\\n```\\nconst countDigits = (num) =>\\n    num\\n        .toString()\\n        .split(\\'\\')\\n        .reduce((acc, cur) => (num % +cur === 0 ? acc + 1 : acc), 0);\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst countDigits = (num) =>\\n    num\\n        .toString()\\n        .split(\\'\\')\\n        .reduce((acc, cur) => (num % +cur === 0 ? acc + 1 : acc), 0);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2987219,
                "title": "rust-solution",
                "content": "# Code\\n```\\nimpl Solution {\\n    pub fn count_digits(num: i32) -> i32 {\\n        let (mut n, mut res) = (num, 0);\\n        while n > 0 {\\n            res += (num % (n % 10) == 0) as i32;\\n            n /= 10;\\n        }\\n        res\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Rust",
                    "Math"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn count_digits(num: i32) -> i32 {\\n        let (mut n, mut res) = (num, 0);\\n        while n > 0 {\\n            res += (num % (n % 10) == 0) as i32;\\n            n /= 10;\\n        }\\n        res\\n    }\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2986866,
                "title": "c-easy-solution-beats-100",
                "content": "# Intuition\\nnumber % 10 = last digit \\n\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;;\\n        int n = num;\\n        while(n > 0){\\n            int r = n%10;\\n            if(num % r == 0) ans++;\\n            n = n/10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;;\\n        int n = num;\\n        while(n > 0){\\n            int r = n%10;\\n            if(num % r == 0) ans++;\\n            n = n/10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2986589,
                "title": "c-easy-approach",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int n = num,ele,cnt=0;\\n        while(n){\\n            ele = n%10;\\n            n/=10;\\n            if(ele!=0 && num%ele==0) cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int n = num,ele,cnt=0;\\n        while(n){\\n            ele = n%10;\\n            n/=10;\\n            if(ele!=0 && num%ele==0) cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2986178,
                "title": "c-solution-very-easy-approach-single-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n         int n=num;\\n         int count=0;\\n         while(num>0)\\n         {\\n             int rem=num%10;\\n             if(n%rem==0)\\n             {\\n                 count++;\\n             }\\n             num=num/10;\\n         }\\n\\n         return count;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n         int n=num;\\n         int count=0;\\n         while(num>0)\\n         {\\n             int rem=num%10;\\n             if(n%rem==0)\\n             {\\n                 count++;\\n             }\\n             num=num/10;\\n         }\\n\\n         return count;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2979384,
                "title": "easy-problem-c-0ms-o-log-n",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int nums){\\n     int cnt=0,i,num=nums;\\n        while(nums>0){\\n         i=nums%10;\\n          //get the last element \\n         if(num%i==0){\\n             cnt++;\\n         }\\n            nums/=10;\\n        // reduce the number \\n     }   \\n      return cnt++;\\n   }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int nums){\\n     int cnt=0,i,num=nums;\\n        while(nums>0){\\n         i=nums%10;\\n          //get the last element \\n         if(num%i==0){\\n             cnt++;\\n         }\\n            nums/=10;\\n        // reduce the number \\n     }   \\n      return cnt++;\\n   }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2978842,
                "title": "very-easy-fast-solution-java",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int out=0, d,t=num;\\n        \\n        while(num>0){\\n            d=num%10;\\n            num/=10;\\n            if(t%d==0)\\n                    out++;\\n        }\\n        return out;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int out=0, d,t=num;\\n        \\n        while(num>0){\\n            d=num%10;\\n            num/=10;\\n            if(t%d==0)\\n                    out++;\\n        }\\n        return out;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2978824,
                "title": "modulo-approach",
                "content": "\\n# Complexity\\n- Time complexity: N ( here N is the length of num)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1) constant\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction countDigits(num: number): number {\\n    let count = 0 ;\\n    const n = num;\\n    \\n    while(num > 1){\\n        if(n % (num % 10) === 0) count++\\n        num = Math.floor(num / 10)\\n    }\\n    \\n    if(num === 1) count++\\n    \\n    return count\\n};\\n```",
                "solutionTags": [
                    "Java",
                    "JavaScript",
                    "TypeScript",
                    "Math"
                ],
                "code": "```\\nfunction countDigits(num: number): number {\\n    let count = 0 ;\\n    const n = num;\\n    \\n    while(num > 1){\\n        if(n % (num % 10) === 0) count++\\n        num = Math.floor(num / 10)\\n    }\\n    \\n    if(num === 1) count++\\n    \\n    return count\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2978575,
                "title": "java-easy-solution-100-faster",
                "content": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(temp!=0){\\n            int div=temp%10;\\n            if(num%div==0){\\n                count++;\\n            }\\n            temp/=10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(temp!=0){\\n            int div=temp%10;\\n            if(num%div==0){\\n                count++;\\n            }\\n            temp/=10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2978418,
                "title": "java",
                "content": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        String s = \"\"+num;\\n        int i=0, count = 0;\\n        while(i<s.length()){\\n            int n = Integer.parseInt(\"\"+s.charAt(i));\\n            i++;\\n            if(num%n==0)    count++;\\n        }\\n        \\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        String s = \"\"+num;\\n        int i=0, count = 0;\\n        while(i<s.length()){\\n            int n = Integer.parseInt(\"\"+s.charAt(i));\\n            i++;\\n            if(num%n==0)    count++;\\n        }\\n        \\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2978176,
                "title": "c-simple-and-easy-to-understand-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int temp=num;\\n        int count=0;\\n        while(temp>0){\\n            int digit=temp%10;\\n            if(num%digit==0){\\n                count++;\\n            }\\n            temp=temp/10;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int temp=num;\\n        int count=0;\\n        while(temp>0){\\n            int digit=temp%10;\\n            if(num%digit==0){\\n                count++;\\n            }\\n            temp=temp/10;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977768,
                "title": "java-easy",
                "content": "---\\n# Please Upvote \\uD83D\\uDE07\\n---\\n``` \\nclass Solution {\\n    public int countDigits(int num) {\\n        int x = num;\\n        int count = 0;\\n        while (num != 0) {\\n            int rem = num % 10;\\n            if (x % rem == 0) {\\n                count++;\\n            }\\n            num /= 10;\\n        }\\n        \\n        return count;\\n    }\\n}\\n```\\n---\\n##### Time Complexity: $$O(n)$$\\nwhere $$n$$ is the number of digits in `num`\\n",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "``` \\nclass Solution {\\n    public int countDigits(int num) {\\n        int x = num;\\n        int count = 0;\\n        while (num != 0) {\\n            int rem = num % 10;\\n            if (x % rem == 0) {\\n                count++;\\n            }\\n            num /= 10;\\n        }\\n        \\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977759,
                "title": "ruby-1-liner",
                "content": "```ruby\\ndef count_digits(n) = n.digits.count { n % _1 == 0 }\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```ruby\\ndef count_digits(n) = n.digits.count { n % _1 == 0 }\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2977475,
                "title": "simple-and-esay-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num;\\n        int count=0;\\n        while(num!=0){\\n            int rem=num%10;\\n            num/=10;\\n            if(x%rem==0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num;\\n        int count=0;\\n        while(num!=0){\\n            int rem=num%10;\\n            num/=10;\\n            if(x%rem==0){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977473,
                "title": "c-6-lines-of-code-beats-100",
                "content": "***If you find this helpful, Please Upvote \\uD83D\\uDD3C\\nThank You !***\\n\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        \\n        int temp = num, cnt = 0, val;\\n        \\n        while(num) {\\n            val = num%10;\\n            \\n            if(temp % val == 0) cnt++;\\n            \\n            num = num/10;\\n        }\\n        \\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        \\n        int temp = num, cnt = 0, val;\\n        \\n        while(num) {\\n            val = num%10;\\n            \\n            if(temp % val == 0) cnt++;\\n            \\n            num = num/10;\\n        }\\n        \\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977471,
                "title": "simple-brute-force-approach-o-n",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        vector<int> arr;\\n        int temp = num;\\n        while(temp){\\n            arr.push_back(temp%10);\\n            temp/=10;\\n        };\\n        int res = 0;\\n        for(int i = 0;i<size(arr);i++){\\n            if(num%arr[i] == 0)++res;\\n        };\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        vector<int> arr;\\n        int temp = num;\\n        while(temp){\\n            arr.push_back(temp%10);\\n            temp/=10;\\n        };\\n        int res = 0;\\n        for(int i = 0;i<size(arr);i++){\\n            if(num%arr[i] == 0)++res;\\n        };\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977333,
                "title": "c-to-string-use",
                "content": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        string n = to_string(num);\\n        int ans=0;\\n        for(auto it : n){\\n            if(num%(it-\\'0\\')==0) ans += 1;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        string n = to_string(num);\\n        int ans=0;\\n        for(auto it : n){\\n            if(num%(it-\\'0\\')==0) ans += 1;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977322,
                "title": "easy-to-understand",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n            int cnt=0;\\n            \\n        int value=num;\\n         while (value > 0) {\\n          \\n          if (num%(value%10) == 0) {\\n               cnt++;\\n           }\\n        value /= 10;\\n    }\\n\\n       return cnt; \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n            int cnt=0;\\n            \\n        int value=num;\\n         while (value > 0) {\\n          \\n          if (num%(value%10) == 0) {\\n               cnt++;\\n           }\\n        value /= 10;\\n    }\\n\\n       return cnt; \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977320,
                "title": "2520-count-the-digits-that-divide-a-number",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int d, c = 0;\\n        int m = num;\\n        while(m != 0)\\n        {\\n            d = m % 10;\\n            if(num % d == 0) c++;\\n            m = m/10;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int d, c = 0;\\n        int m = num;\\n        while(m != 0)\\n        {\\n            d = m % 10;\\n            if(num % d == 0) c++;\\n            m = m/10;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977299,
                "title": "very-simple-c-solution",
                "content": "```\\nint countDigits(int num) {\\n        int prevNum=num;\\n        int count=0;\\n        while(num)\\n        {\\n            int d=num%10;\\n            if(prevNum%d == 0)\\n                count++;\\n            num/=10;\\n        }\\n        return count;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint countDigits(int num) {\\n        int prevNum=num;\\n        int count=0;\\n        while(num)\\n        {\\n            int d=num%10;\\n            if(prevNum%d == 0)\\n                count++;\\n            num/=10;\\n        }\\n        return count;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2977265,
                "title": "c-explanation-easy",
                "content": "\\n\\n**Happy New Year !!!**\\n\\n* **Approach** - \\n    1. Very simple, We need all digits so, we take it one digit and check num % digit == 0\\n* Time Complextiy - O(N)\\n* Spcace Complextiy - O(1)\\n\\n**REQUEST** :\\xA0If you found this post even remotely helpful, be kind enough to smash a upvote. I will be grateful.\\n\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int nn = num, ans = 0;\\n        while(nn) {\\n            int rem = nn % 10;\\n            if(num % rem == 0) ans++;\\n            nn /= 10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int nn = num, ans = 0;\\n        while(nn) {\\n            int rem = nn % 10;\\n            if(num % rem == 0) ans++;\\n            nn /= 10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977262,
                "title": "c-easy-and-simple-solution",
                "content": "***Guy\\'s if you find this solution helpful \\uD83D\\uDE0A, PLEASE do UPVOTE. By doing that it motivate\\'s me to create more better post like this \\u270D\\uFE0F***\\n# Complexity\\n- Time complexity:\\nO(N)<br>\\nN is the no of digit in Num .\\n\\n- Space complexity:\\n O(N)\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        vector<int>digit;\\n        int temp=num;\\n        while(temp>0){\\n            digit.push_back(temp%10);\\n            temp=temp/10;\\n        }\\n        int count=0;\\n        for(int i=0;i<digit.size();i++){\\n            if(num%digit[i]==0) count++;\\n            \\n        }\\n        return count;\\n    }\\n};\\n```\\n***Guy\\'s if you find this solution helpful \\uD83D\\uDE0A, PLEASE do UPVOTE. By doing that it motivate\\'s me to create more better post like this \\u270D\\uFE0F***",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        vector<int>digit;\\n        int temp=num;\\n        while(temp>0){\\n            digit.push_back(temp%10);\\n            temp=temp/10;\\n        }\\n        int count=0;\\n        for(int i=0;i<digit.size();i++){\\n            if(num%digit[i]==0) count++;\\n            \\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977242,
                "title": "c",
                "content": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        string n = to_string(num);\\n        int count = 0;\\n        for(auto it: n) {\\n            int temp = it - \\'0\\';\\n            if(num % temp == 0) count += 1;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        string n = to_string(num);\\n        int count = 0;\\n        for(auto it: n) {\\n            int temp = it - \\'0\\';\\n            if(num % temp == 0) count += 1;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4090179,
                "title": "100-faster-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int n=num;\\n        int c=0;\\n        while(num!=0){\\n            if(n%(num%10)==0)c++;\\n            num=num/10;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int n=num;\\n        int c=0;\\n        while(num!=0){\\n            if(n%(num%10)==0)c++;\\n            num=num/10;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4089694,
                "title": "java-easy-solution-beats-100-with-time-and-99-89-with-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        String s= Integer.toString(num);\\n        char[] c=s.toCharArray();\\n        int x=0;\\n        for(int i=0;i<c.length;i++){\\n\\n            int a=c[i]-\\'0\\';\\n            if(num%a==0)\\n            x++;\\n        }\\n        return x;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        String s= Integer.toString(num);\\n        char[] c=s.toCharArray();\\n        int x=0;\\n        for(int i=0;i<c.length;i++){\\n\\n            int a=c[i]-\\'0\\';\\n            if(num%a==0)\\n            x++;\\n        }\\n        return x;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4082983,
                "title": "python3-o-logn-tc",
                "content": "# Complexity\\n- Time complexity:\\nO(logn)\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        tmp = num\\n        c = 0\\n        while tmp > 0:\\n            d = tmp % 10\\n            tmp = tmp // 10\\n            if num % d == 0:\\n                c += 1\\n        return c\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        tmp = num\\n        c = 0\\n        while tmp > 0:\\n            d = tmp % 10\\n            tmp = tmp // 10\\n            if num % d == 0:\\n                c += 1\\n        return c\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4081084,
                "title": "kotlin-1-line-solution-that-beats-90-113ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n fun countDigits(num: Int): Int = \"$num\".fold(0) { acc, it -> if ( num % (it - \\'0\\')  == 0) acc + 1 else acc }\\n\\n\\n}\\n\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n\\n fun countDigits(num: Int): Int = \"$num\".fold(0) { acc, it -> if ( num % (it - \\'0\\')  == 0) acc + 1 else acc }\\n\\n\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4074650,
                "title": "python-solution-for-count-the-digits-that-divide-a-number",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        divs = [int(i) for i in str(num)]\\n        cnt = 0\\n        for i in divs:\\n            if num % i == 0:\\n                cnt += 1\\n        return cnt\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        divs = [int(i) for i in str(num)]\\n        cnt = 0\\n        for i in divs:\\n            if num % i == 0:\\n                cnt += 1\\n        return cnt\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4074525,
                "title": "python-solution-easy-to-understand-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        s=0\\n        for i in str(num):\\n            if num%int(i)==0:\\n                s+=1\\n        return s\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        s=0\\n        for i in str(num):\\n            if num%int(i)==0:\\n                s+=1\\n        return s\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4073410,
                "title": "the-only-easy-way",
                "content": "# \\uD83D\\uDE09Don\\'t just watch & move away, also give an Upvote.\\uD83D\\uDE09\\n# Complexity\\n- Time complexity: $$O(n)$$, where `n` is the no. of digits in `num`\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int cnt=0;\\n        int n = num;\\n        int divider = 0;\\n\\n        while(n != 0)\\n        {\\n            divider = n%10;\\n\\n            if(divider != 0 && num%divider == 0)\\n                cnt++;\\n            \\n            n = n/10;\\n        }\\n\\n<!-- \\u2705Well before returning answer don\\'t forget to UPVOTE.\\u2705 -->\\n        return cnt;\\n    }\\n};\\n```\\n![Leetcode Upvote.gif](https://assets.leetcode.com/users/images/0b05a106-2f1f-4678-8e4d-350bb25033b3_1695315972.6420393.gif)\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "C",
                    "JavaScript",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int cnt=0;\\n        int n = num;\\n        int divider = 0;\\n\\n        while(n != 0)\\n        {\\n            divider = n%10;\\n\\n            if(divider != 0 && num%divider == 0)\\n                cnt++;\\n            \\n            n = n/10;\\n        }\\n\\n<!-- \\u2705Well before returning answer don\\'t forget to UPVOTE.\\u2705 -->\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4068858,
                "title": "easy-solution",
                "content": "int cnt=0;\\n        int n=num;\\n        while(n>0)\\n        {                                                      \\n            int rem=n%10;\\n            if(num%rem==0)\\n            {\\n                cnt++;\\n            }\\n            n=n/10;\\n        }\\n        return cnt;",
                "solutionTags": [
                    "C"
                ],
                "code": "int cnt=0;\\n        int n=num;\\n        while(n>0)\\n        {                                                      \\n            int rem=n%10;\\n            if(num%rem==0)\\n            {\\n                cnt++;\\n            }\\n            n=n/10;\\n        }\\n        return cnt;",
                "codeTag": "Unknown"
            },
            {
                "id": 4063432,
                "title": "c-solution-beats-100-0ms",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int digits[10] {0};\\n        int n = num, count = 0;\\n        while(n) {\\n            if(digits[n%10] == 1)\\n                count++;\\n            else if(digits[n%10] == 0) {\\n                if(num % (n%10) == 0) {\\n                    digits[n%10] = 1;\\n                    count++;\\n                }\\n                else\\n                    digits[n%10] = -1;\\n            }\\n            n /= 10;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int digits[10] {0};\\n        int n = num, count = 0;\\n        while(n) {\\n            if(digits[n%10] == 1)\\n                count++;\\n            else if(digits[n%10] == 0) {\\n                if(num % (n%10) == 0) {\\n                    digits[n%10] = 1;\\n                    count++;\\n                }\\n                else\\n                    digits[n%10] = -1;\\n            }\\n            n /= 10;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4057708,
                "title": "python-o-log-n-time-o-1-space",
                "content": "- Time complexity: O(log(n))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        n = num\\n\\n        count = 0\\n        while n:\\n            x = n % 10\\n            n = n // 10\\n            if num % x == 0:\\n                count += 1\\n        \\n        return count\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        n = num\\n\\n        count = 0\\n        while n:\\n            x = n % 10\\n            n = n // 10\\n            if num % x == 0:\\n                count += 1\\n        \\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4055670,
                "title": "kotlin-easy-to-read-and-understand-using-string",
                "content": "# Approach\\nConvert num to String\\nCount modulo division for every char in string\\n\\ndigit.toString().toInt() is required because digit is a Char and converted to Int using ASCII table number\\n\\n# Code\\n```\\nclass Solution {\\n    fun countDigits(num: Int): Int {\\n        var count = 0\\n\\n        for (digit in num.toString()) {\\n            if (num % digit.toString().toInt() == 0) {\\n                count++\\n            }\\n        }\\n\\n        return count\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun countDigits(num: Int): Int {\\n        var count = 0\\n\\n        for (digit in num.toString()) {\\n            if (num % digit.toString().toInt() == 0) {\\n                count++\\n            }\\n        }\\n\\n        return count\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4055606,
                "title": "simple-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int n = num; \\n        int count =0; \\n        if(num<10) return 1;\\n        else{\\n            while(n!=0)\\n            {\\n                int rem = n%10;\\n                if(num%rem==0) count++;\\n                n /= 10;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int n = num; \\n        int count =0; \\n        if(num<10) return 1;\\n        else{\\n            while(n!=0)\\n            {\\n                int rem = n%10;\\n                if(num%rem==0) count++;\\n                n /= 10;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4050679,
                "title": "c-python-brute-force-approach-too-easy-fully-explained",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nHere\\'s how the code works:\\n\\n1. It starts by creating a copy of the input integer `num` and stores it in a variable `n`. This is done to avoid modifying the original value of `num`.\\n\\n2. It initializes a variable `cnt` to zero. This variable will be used to count the digits of `num` that evenly divide `num`.\\n\\n3. It enters a `while` loop that continues as long as `n` is not equal to zero. This loop processes each digit of `num` one by one, starting from the rightmost digit.\\n\\n4. Inside the loop, it calculates the remainder of `n` divided by 10 (`n % 10`) to extract the last digit of `n` and stores it in the variable `rem`.\\n\\n5. It checks if `num` is evenly divisible by `rem` (i.e., `num % rem == 0`). If it is, it increments the `cnt` variable to count this digit.\\n\\n6. After processing the last digit, it moves to the next digit by dividing `n` by 10 (`n /= 10`). This effectively removes the last digit, and the loop continues with the next digit.\\n\\n7. Finally, after processing all digits of `num`, it returns the value of the `cnt` variable, which represents the count of digits that evenly divide `num`.\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n``` C++ []\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int n = num;\\n        int cnt = 0;\\n        while(n != 0){\\n            int rem = n % 10;\\n            if(num % rem == 0)\\n                cnt++;\\n            n /= 10;\\n        }\\n    return cnt;\\n    }\\n};\\n```\\n``` Python []\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        cnt = 0\\n        n = num\\n        while(n != 0):\\n            if num % (n % 10) == 0:\\n                cnt += 1\\n            n = n // 10\\n        return cnt\\n```",
                "solutionTags": [
                    "C++",
                    "Python3"
                ],
                "code": "``` C++ []\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int n = num;\\n        int cnt = 0;\\n        while(n != 0){\\n            int rem = n % 10;\\n            if(num % rem == 0)\\n                cnt++;\\n            n /= 10;\\n        }\\n    return cnt;\\n    }\\n};\\n```\n``` Python []\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        cnt = 0\\n        n = num\\n        while(n != 0):\\n            if num % (n % 10) == 0:\\n                cnt += 1\\n            n = n // 10\\n        return cnt\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4042695,
                "title": "better-than-98-runtime-and-memory-very-efficient",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\nO(n)\\n# Code\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        ans = 0\\n        m = [int(x) for x in str(num)]\\n        for n in m:\\n            if num % n == 0:\\n                ans = ans + 1\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        ans = 0\\n        m = [int(x) for x in str(num)]\\n        for n in m:\\n            if num % n == 0:\\n                ans = ans + 1\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4042229,
                "title": "easiest-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int n=num,count=0,i=0;\\n        while(n!=0){\\n            n=n/10;\\n            count++;\\n        }\\n        n=num;\\n        int d;\\n        int[] arr=new int[count];\\n        while(n!=0){\\n            d=n%10;\\n            arr[i++]=d;\\n            n=n/10;\\n            \\n        }\\n        count=0;\\n        for(i=0;i<arr.length;i++){\\n            if(num%arr[i]==0){\\n                count++;\\n            }\\n        }\\n        return count;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int n=num,count=0,i=0;\\n        while(n!=0){\\n            n=n/10;\\n            count++;\\n        }\\n        n=num;\\n        int d;\\n        int[] arr=new int[count];\\n        while(n!=0){\\n            d=n%10;\\n            arr[i++]=d;\\n            n=n/10;\\n            \\n        }\\n        count=0;\\n        for(i=0;i<arr.length;i++){\\n            if(num%arr[i]==0){\\n                count++;\\n            }\\n        }\\n        return count;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4038957,
                "title": "easiest-fastest-java-solution",
                "content": "# Intuition\\nI will iterate number from once digit to last digit. If is dividing the number then I will just increase count by 1 \\n***Easy Peasy WooHoo***\\n\\n# Approach\\nSame as Intuition\\n\\n# Complexity\\n- Time complexity :- O(num of digits in number)\\n- Space complexity :- O(1)\\n\\n***Plz Upvote Less Gooo***\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count =0 ;\\n        int x = num;\\n        while(num>0){\\n            if(x%(num%10)==0){\\n                count++;\\n            }\\n            num/=10;\\n        }\\n        return count;\\n    }\\n}\\n```\\n![5zadts.jpg](https://assets.leetcode.com/users/images/f466ecb0-4893-48cb-bfe4-dc0dcd473c89_1694589294.6573546.jpeg)\\n",
                "solutionTags": [
                    "Java",
                    "Math",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count =0 ;\\n        int x = num;\\n        while(num>0){\\n            if(x%(num%10)==0){\\n                count++;\\n            }\\n            num/=10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4038860,
                "title": "easiest-fastest-java-solution",
                "content": "# Intuition\\nI will iterate number from once digit to last digit. If is dividing the number then I will just increase count by 1 \\n***Easy Peasy WooHoo***\\n\\n# Approach\\nSame as Intuition\\n\\n# Complexity\\n- Time complexity :- O(num of digits in number)\\n- Space complexity :- O(1)\\n\\n***Plz Upvote Less Gooo***\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count =0 ;\\n        int x = num;\\n        while(num>0){\\n            if(x%(num%10)==0){\\n                count++;\\n            }\\n            num/=10;\\n        }\\n        return count;\\n    }\\n}\\n```\\n![5zadts.jpg](https://assets.leetcode.com/users/images/f466ecb0-4893-48cb-bfe4-dc0dcd473c89_1694589294.6573546.jpeg)\\n",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count =0 ;\\n        int x = num;\\n        while(num>0){\\n            if(x%(num%10)==0){\\n                count++;\\n            }\\n            num/=10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4030955,
                "title": "swift-0ms-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func countDigits(_ num: Int) -> Int {\\n        \\n        String(num)\\n        .filter { n in\\n            num.isMultiple(of: Int(String(n))!)\\n        }\\n        .endIndex\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func countDigits(_ num: Int) -> Int {\\n        \\n        String(num)\\n        .filter { n in\\n            num.isMultiple(of: Int(String(n))!)\\n        }\\n        .endIndex\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4026850,
                "title": "simple-java-code-with-explanation",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) \\n    {\\n        int orgNumber = num;  // according to question we need to devide each digit by its original number we have given that is \"num\" if i find all the digit then using original value than the my original value is changed thats why i stored it into another variable\\uD83D\\uDE0A.\\n        int rem,count=0;\\n        while(num>0)  // for calculating each digit from the given value we have\\n        {\\n          rem = num % 10;\\n          if(orgNumber % rem == 0)  //cheking original value is divisible by each digit.\\n          {\\n              count++;   // if divisible then count = count + 1;\\n          }\\n          num/=10; \\n        }\\n\\n        return count; \\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) \\n    {\\n        int orgNumber = num;  // according to question we need to devide each digit by its original number we have given that is \"num\" if i find all the digit then using original value than the my original value is changed thats why i stored it into another variable\\uD83D\\uDE0A.\\n        int rem,count=0;\\n        while(num>0)  // for calculating each digit from the given value we have\\n        {\\n          rem = num % 10;\\n          if(orgNumber % rem == 0)  //cheking original value is divisible by each digit.\\n          {\\n              count++;   // if divisible then count = count + 1;\\n          }\\n          num/=10; \\n        }\\n\\n        return count; \\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4024901,
                "title": "typescript-javascript-simple-one-line-solution",
                "content": "# Code\\n```\\nfunction countDigits(num: number): number {\\n    return [...String(num)]\\n        .filter((n) => num % +n === 0)\\n        .length;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Array"
                ],
                "code": "```\\nfunction countDigits(num: number): number {\\n    return [...String(num)]\\n        .filter((n) => num % +n === 0)\\n        .length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4022065,
                "title": "easyyy-java",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int x=num;\\n        int count=0;\\n        while(num>0){\\n            int a= num%10;\\n            if(x % a ==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int x=num;\\n        int count=0;\\n        while(num>0){\\n            int a= num%10;\\n            if(x % a ==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4019077,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int temp = num;\\n        int count = 0;\\n        while(temp>0){\\n            int ld = temp%10;\\n            if(num%ld == 0){\\n                count += 1;\\n            }\\n            temp = temp/10;\\n        }\\n        return count;    \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int temp = num;\\n        int count = 0;\\n        while(temp>0){\\n            int ld = temp%10;\\n            if(num%ld == 0){\\n                count += 1;\\n            }\\n            temp = temp/10;\\n        }\\n        return count;    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4013536,
                "title": "python3-oneline",
                "content": "# Code\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        return sum(num % int(n) == 0 for n in str(num))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        return sum(num % int(n) == 0 for n in str(num))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4010275,
                "title": "beginner-s-approach-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int c = 0, copy = num;\\n        while(num>0){\\n            int rem = num%10;\\n            if(copy%rem == 0){\\n               c += 1;\\n            }\\n            num /= 10;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int c = 0, copy = num;\\n        while(num>0){\\n            int rem = num%10;\\n            if(copy%rem == 0){\\n               c += 1;\\n            }\\n            num /= 10;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4010031,
                "title": "divide-with-digit",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count=0,temp=num;\\n        while(num!=0){\\n            int last=num%10;\\n            if(temp%last==0){\\n                count++;\\n            }\\n            num/=10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count=0,temp=num;\\n        while(num!=0){\\n            int last=num%10;\\n            if(temp%last==0){\\n                count++;\\n            }\\n            num/=10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4010006,
                "title": "java-solution-easy-beats-100",
                "content": "\\n\\n**Time Complexity O(N)**\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count = 0;\\n        int temp = num;\\n        while(num !=0){\\n            int rem = num % 10;\\n            if(temp % rem ==0){\\n                count++;\\n            }\\n            num = num / 10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count = 0;\\n        int temp = num;\\n        while(num !=0){\\n            int rem = num % 10;\\n            if(temp % rem ==0){\\n                count++;\\n            }\\n            num = num / 10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4006453,
                "title": "very-easy-solution-with-0ms-runtime-explained-with-intuition-and-approach",
                "content": "# Intuition\\nThe intuition is very simple . We just need two math operators **/** and **%**\\n\\n# Approach\\neg: take a number ``` n = 1234 ```\\n-> if we do **n%10** we get **4** as output  \\n-> now if we divide it with 10 : **n/10** we get  **n= 123**\\n-> in this method we can simply get last digit of any number without converting it into a string or using some other painful methods . \\n\\n# Complexity\\n- Time complexity:\\n we need to consider n as the length of the number : for 1234 length is 4 \\nso time complexity is : **O(n)**\\n\\n- Space complexity:\\nwe are not using any extra space so : **O(1)**\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        \\n        int dividend = num;\\n        int count =0;\\n        while(dividend >0){\\n            int lastdigit = dividend%10;\\n            if(num%lastdigit==0)count++;\\n            dividend/=10;\\n        }\\n        return count;\\n\\n    }\\n}\\n```\\n# upvote if you found this helpful :)",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "``` n = 1234 ```\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        \\n        int dividend = num;\\n        int count =0;\\n        while(dividend >0){\\n            int lastdigit = dividend%10;\\n            if(num%lastdigit==0)count++;\\n            dividend/=10;\\n        }\\n        return count;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4005875,
                "title": "easy-to-understand-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        if len(str(num))==1:\\n            return 1\\n        else:\\n            temp=num\\n            c=0\\n            while(num>0):\\n                r=num%10\\n                if temp%r==0:\\n                    c+=1\\n                num//=10\\n            return c\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        if len(str(num))==1:\\n            return 1\\n        else:\\n            temp=num\\n            c=0\\n            while(num>0):\\n                r=num%10\\n                if temp%r==0:\\n                    c+=1\\n                num//=10\\n            return c\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4005107,
                "title": "beats-86-17-of-users-with-python3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        digit_set = []\\n        original_num = num  # Store the original number for reference\\n        while num > 0:\\n            digit = num % 10\\n            if digit != 0 :\\n                digit_set.append(digit)\\n            num = num // 10\\n        \\n        count = 0\\n        for i in digit_set:\\n            if original_num % i == 0:\\n                count += 1\\n        return count\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        digit_set = []\\n        original_num = num  # Store the original number for reference\\n        while num > 0:\\n            digit = num % 10\\n            if digit != 0 :\\n                digit_set.append(digit)\\n            num = num // 10\\n        \\n        count = 0\\n        for i in digit_set:\\n            if original_num % i == 0:\\n                count += 1\\n        return count\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4002597,
                "title": "very-basic-java-soln-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int c=num,ans=0;\\n        while(c!=0){\\n            if(num%(c%10)==0)\\n                ans++;\\n            c/=10;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int c=num,ans=0;\\n        while(c!=0){\\n            if(num%(c%10)==0)\\n                ans++;\\n            c/=10;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3997645,
                "title": "my-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIt is easy one.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nBasically we can copy the main number for checking then we can easily check the number;\\n# Complexity\\n- Time complexity: 0ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 39MB\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count= 0;\\n        int temp = num;\\n        while(temp>0){\\n            int val= temp%10;\\n            if(num % val == 0){\\n                count++;\\n            }\\n            temp= temp/10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count= 0;\\n        int temp = num;\\n        while(temp>0){\\n            int val= temp%10;\\n            if(num % val == 0){\\n                count++;\\n            }\\n            temp= temp/10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3994677,
                "title": "c-easy-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int temp = num;\\n        int ans = 0;\\n\\n        while(temp){\\n            int rem = temp%10;\\n\\n            if(num%rem == 0) ans++;\\n\\n            temp /= 10;\\n        }   \\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int temp = num;\\n        int ans = 0;\\n\\n        while(temp){\\n            int rem = temp%10;\\n\\n            if(num%rem == 0) ans++;\\n\\n            temp /= 10;\\n        }   \\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3993323,
                "title": "simple-solution",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        temp = num\\n        count = 0\\n        while temp>0:\\n            count+=1 if num%(temp%10)==0 else 0\\n            temp//=10\\n        return count\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        temp = num\\n        count = 0\\n        while temp>0:\\n            count+=1 if num%(temp%10)==0 else 0\\n            temp//=10\\n        return count\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3988899,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int c=0;\\n        String s=Integer.toString(num);\\n        for(int i=0;i<s.length();i++){\\n            int n=s.charAt(i)-\\'0\\';\\n            if(num%n==0){\\n                c++;\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int c=0;\\n        String s=Integer.toString(num);\\n        for(int i=0;i<s.length();i++){\\n            int n=s.charAt(i)-\\'0\\';\\n            if(num%n==0){\\n                c++;\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3987116,
                "title": "easy-maths-solution-11ms-beats-98-99-c",
                "content": "# Intuition\\nPure mathematics approach\\n![CountDigits.PNG](https://assets.leetcode.com/users/images/1fae3147-8061-4a9f-8450-b2966483f201_1693549393.9053652.png)\\n\\n# Code\\n```\\npublic class Solution {\\n    public int CountDigits(int num) {\\n        int original = num;\\n        int length = num.ToString().Length;\\n        int counter = 0;\\n\\n        for(int i = 0; i< length; i++)\\n        {\\n            int remainder = num % 10;\\n\\n            if (original % remainder == 0) counter++;\\n\\n            num -= remainder;\\n            num /= 10;\\n        }\\n        return counter;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int CountDigits(int num) {\\n        int original = num;\\n        int length = num.ToString().Length;\\n        int counter = 0;\\n\\n        for(int i = 0; i< length; i++)\\n        {\\n            int remainder = num % 10;\\n\\n            if (original % remainder == 0) counter++;\\n\\n            num -= remainder;\\n            num /= 10;\\n        }\\n        return counter;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3984865,
                "title": "python-solution-made-by-a-beginner",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        D=0\\n        for i in list(str(num)):\\n            if num%int(i)==0:\\n                D += 1\\n        return D\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        D=0\\n        for i in list(str(num)):\\n            if num%int(i)==0:\\n                D += 1\\n        return D\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3981426,
                "title": "simple-python3-solution",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        s=str(num)\\n        count=0\\n        for i in s:\\n            if num%(int(i))==0:\\n                count+=1\\n        return count\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countDigits(self, num: int) -> int:\\n        s=str(num)\\n        count=0\\n        for i in s:\\n            if num%(int(i))==0:\\n                count+=1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3979345,
                "title": "java-easy-100-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n    var temp = num;\\n    var ans = 0;\\n    while (temp>0){\\n      var currentD = temp%10;\\n      temp = temp/10;\\n      if(num % currentD ==0){\\n        ans++;\\n      }\\n    }\\n    return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n    var temp = num;\\n    var ans = 0;\\n    while (temp>0){\\n      var currentD = temp%10;\\n      temp = temp/10;\\n      if(num % currentD ==0){\\n        ans++;\\n      }\\n    }\\n    return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3979043,
                "title": "beat-100-test-case-easy-sol-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int count =0;\\n        int t =num; \\n        while(num>0){\\n        int val = num%10;\\n         \\n        if(t%val==0)\\n            count++;\\n        num=num/10;\\n        \\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int count =0;\\n        int t =num; \\n        while(num>0){\\n        int val = num%10;\\n         \\n        if(t%val==0)\\n            count++;\\n        num=num/10;\\n        \\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3978323,
                "title": "simple-math-logic-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int answer = 0;\\n        int n = num;\\n        while(n>0){\\n            if(num % (n%10) == 0) answer++;\\n            n/=10;\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int answer = 0;\\n        int n = num;\\n        while(n>0){\\n            if(num % (n%10) == 0) answer++;\\n            n/=10;\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3977480,
                "title": "runtime-beats-100-memory-beats-83-19",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int n) {\\n        int cnt=0;\\n        int m=n;\\n        int a;\\n        while(n!=0){\\n              a=n%10;\\n            if(m%a==0  ){\\n                cnt++;\\n            }\\n            n/=10;\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int n) {\\n        int cnt=0;\\n        int m=n;\\n        int a;\\n        while(n!=0){\\n              a=n%10;\\n            if(m%a==0  ){\\n                cnt++;\\n            }\\n            n/=10;\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3977372,
                "title": "c-very-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe intuition behind this solution is to iterate through the digits of the given number `num`, and for each digit, check if it divides the original number `num`. If it does, increment a count to keep track of how many digits of `num` are divisors.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach to solving this problem involves the following steps:\\n\\n1. Initialize `n` with the value of `num` to preserve the original number.\\n2. Initialize variables `digit`, which will store each digit of the number in each iteration, and `count` to keep track of the number of digits that are divisors of the original number.\\n3. Use a while loop to iterate through the digits of the number:\\n    - Extract the rightmost digit of `n` using `n % 10` and store it in the variable `digit`.\\n    - Check if the original number `num` is divisible by the extracted digit digit (i.e., `num % digit == 0`). If it is, increment the `count`.\\n    - Perform integer division to remove the rightmost digit from `n` (i.e., `n /= 10`).\\n4. After the loop completes, return the `count` as the result.\\n\\n# Complexity\\n- Time complexity: O(log n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int n = num, digit = 0, count = 0;\\n        while(n > 0) {\\n            digit = n % 10;\\n            if(num % digit == 0) {\\n                count++;\\n            }\\n            n /= 10;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int n = num, digit = 0, count = 0;\\n        while(n > 0) {\\n            digit = n % 10;\\n            if(num % digit == 0) {\\n                count++;\\n            }\\n            n /= 10;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3976417,
                "title": "fastest-code-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count=0,r=0;\\n        int res = num;\\n        while(res>0){\\n            r = res%10;\\n            res/=10;\\n            if(num%r == 0) count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countDigits(int num) {\\n        int count=0,r=0;\\n        int res = num;\\n        while(res>0){\\n            r = res%10;\\n            res/=10;\\n            if(num%r == 0) count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1818471,
                "content": [
                    {
                        "username": "akksh_18",
                        "content": "i have given correct conditions but my code gives wrong output for testcase 2\\n"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "Heyy, \\nWhen I divide the number by 10 before the condition my solution take 3ms, but when I updated my code a little bit and divide the number by 10 right after the mod ZERO condition. It takes 0ms.\\n\\nWhat is the reason behind this?"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "[@PixDay](/PixDay) Thanks, it goes from 3ms to 0ms without any change in the code."
                    },
                    {
                        "username": "PixDay",
                        "content": "Try to submit multiple time the exact same code and sometimes you have some small differences, I don\\'t know exactly what is this comming from but I guess it\\'s due to server requests and latencies"
                    },
                    {
                        "username": "kennyhml",
                        "content": "For anyone struggling to solve this without 'cheating' by turning the number into a string, I wrote down a pretty detailed explanation in my [solution](https://leetcode.com/problems/count-the-digits-that-divide-a-number/solutions/3702272/important-to-understand-no-string-solution/). \n\nEDIT: If you only want a hint, and not the full solution, just read up to the first two bullet points of the approach!"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num,count=0;\\n        if(num<10) return 1;\\n        else{\\n            while(x!=0){\\n                int s=x%10;\\n                if(num%s==0) count++;\\n                x/=10;\\n            }\\n        }\\n        return count;\\n    }\\n};"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2520.%20Count%20the%20Digits%20That%20Divide%20a%20Number.cpp\\n\\nThis repository contains all LEETCODE SOLUTIONS IN C++\\nIf you find it useful please LEAVE A STAR "
                    },
                    {
                        "username": "prashantsleet",
                        "content": "Why am I getting error while incrementing ans? It says signed interger overflow.\\n\\n**************************************************************\\nruntime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:17:20\\n**************************************************************\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        int n = num;\\n        while(n > 0){\\n            if(num % (n%10) == 0) \\n                ans++;\\n            n/10;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "ENViN",
                        "content": "The update statement should be n/=10 and not n/10. The latter is causing an infinite loop and fortunately you get integer overflow before TLE :)"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(num>0){\\n            int digit=num%10;\\n            if(temp%digit==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;\\n        \\n    }"
                    },
                    {
                        "username": "ashokimandi",
                        "content": "how to read input"
                    },
                    {
                        "username": "PixDay",
                        "content": "What do you mean by : \"read the input\" do you talk about the parameters of the function ?"
                    },
                    {
                        "username": "Unbeknownstguy",
                        "content": "Guys, There is no point converting num to string here. We can directly count by storing num in temp variable and taking remainder of the temp and dividing it by 10 each time. Hope it helps. Happy coding."
                    },
                    {
                        "username": "STDeeznutz",
                        "content": "I have a testcase where num = 54. Number of digits is 2. 54/2 = 27 no remainder. But it expects 0? What\\'s going on and what\\'s the reason behind this?"
                    },
                    {
                        "username": "PixDay",
                        "content": "What is asked is not the numbers of digit in the given number but if a digit of the number can divide it  in your example you will have 54/4 and 54/5\\n"
                    }
                ]
            },
            {
                "id": 1736406,
                "content": [
                    {
                        "username": "akksh_18",
                        "content": "i have given correct conditions but my code gives wrong output for testcase 2\\n"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "Heyy, \\nWhen I divide the number by 10 before the condition my solution take 3ms, but when I updated my code a little bit and divide the number by 10 right after the mod ZERO condition. It takes 0ms.\\n\\nWhat is the reason behind this?"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "[@PixDay](/PixDay) Thanks, it goes from 3ms to 0ms without any change in the code."
                    },
                    {
                        "username": "PixDay",
                        "content": "Try to submit multiple time the exact same code and sometimes you have some small differences, I don\\'t know exactly what is this comming from but I guess it\\'s due to server requests and latencies"
                    },
                    {
                        "username": "kennyhml",
                        "content": "For anyone struggling to solve this without 'cheating' by turning the number into a string, I wrote down a pretty detailed explanation in my [solution](https://leetcode.com/problems/count-the-digits-that-divide-a-number/solutions/3702272/important-to-understand-no-string-solution/). \n\nEDIT: If you only want a hint, and not the full solution, just read up to the first two bullet points of the approach!"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num,count=0;\\n        if(num<10) return 1;\\n        else{\\n            while(x!=0){\\n                int s=x%10;\\n                if(num%s==0) count++;\\n                x/=10;\\n            }\\n        }\\n        return count;\\n    }\\n};"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2520.%20Count%20the%20Digits%20That%20Divide%20a%20Number.cpp\\n\\nThis repository contains all LEETCODE SOLUTIONS IN C++\\nIf you find it useful please LEAVE A STAR "
                    },
                    {
                        "username": "prashantsleet",
                        "content": "Why am I getting error while incrementing ans? It says signed interger overflow.\\n\\n**************************************************************\\nruntime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:17:20\\n**************************************************************\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        int n = num;\\n        while(n > 0){\\n            if(num % (n%10) == 0) \\n                ans++;\\n            n/10;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "ENViN",
                        "content": "The update statement should be n/=10 and not n/10. The latter is causing an infinite loop and fortunately you get integer overflow before TLE :)"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(num>0){\\n            int digit=num%10;\\n            if(temp%digit==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;\\n        \\n    }"
                    },
                    {
                        "username": "ashokimandi",
                        "content": "how to read input"
                    },
                    {
                        "username": "PixDay",
                        "content": "What do you mean by : \"read the input\" do you talk about the parameters of the function ?"
                    },
                    {
                        "username": "Unbeknownstguy",
                        "content": "Guys, There is no point converting num to string here. We can directly count by storing num in temp variable and taking remainder of the temp and dividing it by 10 each time. Hope it helps. Happy coding."
                    },
                    {
                        "username": "STDeeznutz",
                        "content": "I have a testcase where num = 54. Number of digits is 2. 54/2 = 27 no remainder. But it expects 0? What\\'s going on and what\\'s the reason behind this?"
                    },
                    {
                        "username": "PixDay",
                        "content": "What is asked is not the numbers of digit in the given number but if a digit of the number can divide it  in your example you will have 54/4 and 54/5\\n"
                    }
                ]
            },
            {
                "id": 1951011,
                "content": [
                    {
                        "username": "akksh_18",
                        "content": "i have given correct conditions but my code gives wrong output for testcase 2\\n"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "Heyy, \\nWhen I divide the number by 10 before the condition my solution take 3ms, but when I updated my code a little bit and divide the number by 10 right after the mod ZERO condition. It takes 0ms.\\n\\nWhat is the reason behind this?"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "[@PixDay](/PixDay) Thanks, it goes from 3ms to 0ms without any change in the code."
                    },
                    {
                        "username": "PixDay",
                        "content": "Try to submit multiple time the exact same code and sometimes you have some small differences, I don\\'t know exactly what is this comming from but I guess it\\'s due to server requests and latencies"
                    },
                    {
                        "username": "kennyhml",
                        "content": "For anyone struggling to solve this without 'cheating' by turning the number into a string, I wrote down a pretty detailed explanation in my [solution](https://leetcode.com/problems/count-the-digits-that-divide-a-number/solutions/3702272/important-to-understand-no-string-solution/). \n\nEDIT: If you only want a hint, and not the full solution, just read up to the first two bullet points of the approach!"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num,count=0;\\n        if(num<10) return 1;\\n        else{\\n            while(x!=0){\\n                int s=x%10;\\n                if(num%s==0) count++;\\n                x/=10;\\n            }\\n        }\\n        return count;\\n    }\\n};"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2520.%20Count%20the%20Digits%20That%20Divide%20a%20Number.cpp\\n\\nThis repository contains all LEETCODE SOLUTIONS IN C++\\nIf you find it useful please LEAVE A STAR "
                    },
                    {
                        "username": "prashantsleet",
                        "content": "Why am I getting error while incrementing ans? It says signed interger overflow.\\n\\n**************************************************************\\nruntime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:17:20\\n**************************************************************\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        int n = num;\\n        while(n > 0){\\n            if(num % (n%10) == 0) \\n                ans++;\\n            n/10;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "ENViN",
                        "content": "The update statement should be n/=10 and not n/10. The latter is causing an infinite loop and fortunately you get integer overflow before TLE :)"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(num>0){\\n            int digit=num%10;\\n            if(temp%digit==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;\\n        \\n    }"
                    },
                    {
                        "username": "ashokimandi",
                        "content": "how to read input"
                    },
                    {
                        "username": "PixDay",
                        "content": "What do you mean by : \"read the input\" do you talk about the parameters of the function ?"
                    },
                    {
                        "username": "Unbeknownstguy",
                        "content": "Guys, There is no point converting num to string here. We can directly count by storing num in temp variable and taking remainder of the temp and dividing it by 10 each time. Hope it helps. Happy coding."
                    },
                    {
                        "username": "STDeeznutz",
                        "content": "I have a testcase where num = 54. Number of digits is 2. 54/2 = 27 no remainder. But it expects 0? What\\'s going on and what\\'s the reason behind this?"
                    },
                    {
                        "username": "PixDay",
                        "content": "What is asked is not the numbers of digit in the given number but if a digit of the number can divide it  in your example you will have 54/4 and 54/5\\n"
                    }
                ]
            },
            {
                "id": 1831198,
                "content": [
                    {
                        "username": "akksh_18",
                        "content": "i have given correct conditions but my code gives wrong output for testcase 2\\n"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "Heyy, \\nWhen I divide the number by 10 before the condition my solution take 3ms, but when I updated my code a little bit and divide the number by 10 right after the mod ZERO condition. It takes 0ms.\\n\\nWhat is the reason behind this?"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "[@PixDay](/PixDay) Thanks, it goes from 3ms to 0ms without any change in the code."
                    },
                    {
                        "username": "PixDay",
                        "content": "Try to submit multiple time the exact same code and sometimes you have some small differences, I don\\'t know exactly what is this comming from but I guess it\\'s due to server requests and latencies"
                    },
                    {
                        "username": "kennyhml",
                        "content": "For anyone struggling to solve this without 'cheating' by turning the number into a string, I wrote down a pretty detailed explanation in my [solution](https://leetcode.com/problems/count-the-digits-that-divide-a-number/solutions/3702272/important-to-understand-no-string-solution/). \n\nEDIT: If you only want a hint, and not the full solution, just read up to the first two bullet points of the approach!"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num,count=0;\\n        if(num<10) return 1;\\n        else{\\n            while(x!=0){\\n                int s=x%10;\\n                if(num%s==0) count++;\\n                x/=10;\\n            }\\n        }\\n        return count;\\n    }\\n};"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2520.%20Count%20the%20Digits%20That%20Divide%20a%20Number.cpp\\n\\nThis repository contains all LEETCODE SOLUTIONS IN C++\\nIf you find it useful please LEAVE A STAR "
                    },
                    {
                        "username": "prashantsleet",
                        "content": "Why am I getting error while incrementing ans? It says signed interger overflow.\\n\\n**************************************************************\\nruntime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:17:20\\n**************************************************************\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        int n = num;\\n        while(n > 0){\\n            if(num % (n%10) == 0) \\n                ans++;\\n            n/10;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "ENViN",
                        "content": "The update statement should be n/=10 and not n/10. The latter is causing an infinite loop and fortunately you get integer overflow before TLE :)"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(num>0){\\n            int digit=num%10;\\n            if(temp%digit==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;\\n        \\n    }"
                    },
                    {
                        "username": "ashokimandi",
                        "content": "how to read input"
                    },
                    {
                        "username": "PixDay",
                        "content": "What do you mean by : \"read the input\" do you talk about the parameters of the function ?"
                    },
                    {
                        "username": "Unbeknownstguy",
                        "content": "Guys, There is no point converting num to string here. We can directly count by storing num in temp variable and taking remainder of the temp and dividing it by 10 each time. Hope it helps. Happy coding."
                    },
                    {
                        "username": "STDeeznutz",
                        "content": "I have a testcase where num = 54. Number of digits is 2. 54/2 = 27 no remainder. But it expects 0? What\\'s going on and what\\'s the reason behind this?"
                    },
                    {
                        "username": "PixDay",
                        "content": "What is asked is not the numbers of digit in the given number but if a digit of the number can divide it  in your example you will have 54/4 and 54/5\\n"
                    }
                ]
            },
            {
                "id": 1795348,
                "content": [
                    {
                        "username": "akksh_18",
                        "content": "i have given correct conditions but my code gives wrong output for testcase 2\\n"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "Heyy, \\nWhen I divide the number by 10 before the condition my solution take 3ms, but when I updated my code a little bit and divide the number by 10 right after the mod ZERO condition. It takes 0ms.\\n\\nWhat is the reason behind this?"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "[@PixDay](/PixDay) Thanks, it goes from 3ms to 0ms without any change in the code."
                    },
                    {
                        "username": "PixDay",
                        "content": "Try to submit multiple time the exact same code and sometimes you have some small differences, I don\\'t know exactly what is this comming from but I guess it\\'s due to server requests and latencies"
                    },
                    {
                        "username": "kennyhml",
                        "content": "For anyone struggling to solve this without 'cheating' by turning the number into a string, I wrote down a pretty detailed explanation in my [solution](https://leetcode.com/problems/count-the-digits-that-divide-a-number/solutions/3702272/important-to-understand-no-string-solution/). \n\nEDIT: If you only want a hint, and not the full solution, just read up to the first two bullet points of the approach!"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num,count=0;\\n        if(num<10) return 1;\\n        else{\\n            while(x!=0){\\n                int s=x%10;\\n                if(num%s==0) count++;\\n                x/=10;\\n            }\\n        }\\n        return count;\\n    }\\n};"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2520.%20Count%20the%20Digits%20That%20Divide%20a%20Number.cpp\\n\\nThis repository contains all LEETCODE SOLUTIONS IN C++\\nIf you find it useful please LEAVE A STAR "
                    },
                    {
                        "username": "prashantsleet",
                        "content": "Why am I getting error while incrementing ans? It says signed interger overflow.\\n\\n**************************************************************\\nruntime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:17:20\\n**************************************************************\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        int n = num;\\n        while(n > 0){\\n            if(num % (n%10) == 0) \\n                ans++;\\n            n/10;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "ENViN",
                        "content": "The update statement should be n/=10 and not n/10. The latter is causing an infinite loop and fortunately you get integer overflow before TLE :)"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(num>0){\\n            int digit=num%10;\\n            if(temp%digit==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;\\n        \\n    }"
                    },
                    {
                        "username": "ashokimandi",
                        "content": "how to read input"
                    },
                    {
                        "username": "PixDay",
                        "content": "What do you mean by : \"read the input\" do you talk about the parameters of the function ?"
                    },
                    {
                        "username": "Unbeknownstguy",
                        "content": "Guys, There is no point converting num to string here. We can directly count by storing num in temp variable and taking remainder of the temp and dividing it by 10 each time. Hope it helps. Happy coding."
                    },
                    {
                        "username": "STDeeznutz",
                        "content": "I have a testcase where num = 54. Number of digits is 2. 54/2 = 27 no remainder. But it expects 0? What\\'s going on and what\\'s the reason behind this?"
                    },
                    {
                        "username": "PixDay",
                        "content": "What is asked is not the numbers of digit in the given number but if a digit of the number can divide it  in your example you will have 54/4 and 54/5\\n"
                    }
                ]
            },
            {
                "id": 1761689,
                "content": [
                    {
                        "username": "akksh_18",
                        "content": "i have given correct conditions but my code gives wrong output for testcase 2\\n"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "Heyy, \\nWhen I divide the number by 10 before the condition my solution take 3ms, but when I updated my code a little bit and divide the number by 10 right after the mod ZERO condition. It takes 0ms.\\n\\nWhat is the reason behind this?"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "[@PixDay](/PixDay) Thanks, it goes from 3ms to 0ms without any change in the code."
                    },
                    {
                        "username": "PixDay",
                        "content": "Try to submit multiple time the exact same code and sometimes you have some small differences, I don\\'t know exactly what is this comming from but I guess it\\'s due to server requests and latencies"
                    },
                    {
                        "username": "kennyhml",
                        "content": "For anyone struggling to solve this without 'cheating' by turning the number into a string, I wrote down a pretty detailed explanation in my [solution](https://leetcode.com/problems/count-the-digits-that-divide-a-number/solutions/3702272/important-to-understand-no-string-solution/). \n\nEDIT: If you only want a hint, and not the full solution, just read up to the first two bullet points of the approach!"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num,count=0;\\n        if(num<10) return 1;\\n        else{\\n            while(x!=0){\\n                int s=x%10;\\n                if(num%s==0) count++;\\n                x/=10;\\n            }\\n        }\\n        return count;\\n    }\\n};"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2520.%20Count%20the%20Digits%20That%20Divide%20a%20Number.cpp\\n\\nThis repository contains all LEETCODE SOLUTIONS IN C++\\nIf you find it useful please LEAVE A STAR "
                    },
                    {
                        "username": "prashantsleet",
                        "content": "Why am I getting error while incrementing ans? It says signed interger overflow.\\n\\n**************************************************************\\nruntime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:17:20\\n**************************************************************\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        int n = num;\\n        while(n > 0){\\n            if(num % (n%10) == 0) \\n                ans++;\\n            n/10;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "ENViN",
                        "content": "The update statement should be n/=10 and not n/10. The latter is causing an infinite loop and fortunately you get integer overflow before TLE :)"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(num>0){\\n            int digit=num%10;\\n            if(temp%digit==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;\\n        \\n    }"
                    },
                    {
                        "username": "ashokimandi",
                        "content": "how to read input"
                    },
                    {
                        "username": "PixDay",
                        "content": "What do you mean by : \"read the input\" do you talk about the parameters of the function ?"
                    },
                    {
                        "username": "Unbeknownstguy",
                        "content": "Guys, There is no point converting num to string here. We can directly count by storing num in temp variable and taking remainder of the temp and dividing it by 10 each time. Hope it helps. Happy coding."
                    },
                    {
                        "username": "STDeeznutz",
                        "content": "I have a testcase where num = 54. Number of digits is 2. 54/2 = 27 no remainder. But it expects 0? What\\'s going on and what\\'s the reason behind this?"
                    },
                    {
                        "username": "PixDay",
                        "content": "What is asked is not the numbers of digit in the given number but if a digit of the number can divide it  in your example you will have 54/4 and 54/5\\n"
                    }
                ]
            },
            {
                "id": 1757658,
                "content": [
                    {
                        "username": "akksh_18",
                        "content": "i have given correct conditions but my code gives wrong output for testcase 2\\n"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "Heyy, \\nWhen I divide the number by 10 before the condition my solution take 3ms, but when I updated my code a little bit and divide the number by 10 right after the mod ZERO condition. It takes 0ms.\\n\\nWhat is the reason behind this?"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "[@PixDay](/PixDay) Thanks, it goes from 3ms to 0ms without any change in the code."
                    },
                    {
                        "username": "PixDay",
                        "content": "Try to submit multiple time the exact same code and sometimes you have some small differences, I don\\'t know exactly what is this comming from but I guess it\\'s due to server requests and latencies"
                    },
                    {
                        "username": "kennyhml",
                        "content": "For anyone struggling to solve this without 'cheating' by turning the number into a string, I wrote down a pretty detailed explanation in my [solution](https://leetcode.com/problems/count-the-digits-that-divide-a-number/solutions/3702272/important-to-understand-no-string-solution/). \n\nEDIT: If you only want a hint, and not the full solution, just read up to the first two bullet points of the approach!"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num,count=0;\\n        if(num<10) return 1;\\n        else{\\n            while(x!=0){\\n                int s=x%10;\\n                if(num%s==0) count++;\\n                x/=10;\\n            }\\n        }\\n        return count;\\n    }\\n};"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2520.%20Count%20the%20Digits%20That%20Divide%20a%20Number.cpp\\n\\nThis repository contains all LEETCODE SOLUTIONS IN C++\\nIf you find it useful please LEAVE A STAR "
                    },
                    {
                        "username": "prashantsleet",
                        "content": "Why am I getting error while incrementing ans? It says signed interger overflow.\\n\\n**************************************************************\\nruntime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:17:20\\n**************************************************************\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        int n = num;\\n        while(n > 0){\\n            if(num % (n%10) == 0) \\n                ans++;\\n            n/10;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "ENViN",
                        "content": "The update statement should be n/=10 and not n/10. The latter is causing an infinite loop and fortunately you get integer overflow before TLE :)"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(num>0){\\n            int digit=num%10;\\n            if(temp%digit==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;\\n        \\n    }"
                    },
                    {
                        "username": "ashokimandi",
                        "content": "how to read input"
                    },
                    {
                        "username": "PixDay",
                        "content": "What do you mean by : \"read the input\" do you talk about the parameters of the function ?"
                    },
                    {
                        "username": "Unbeknownstguy",
                        "content": "Guys, There is no point converting num to string here. We can directly count by storing num in temp variable and taking remainder of the temp and dividing it by 10 each time. Hope it helps. Happy coding."
                    },
                    {
                        "username": "STDeeznutz",
                        "content": "I have a testcase where num = 54. Number of digits is 2. 54/2 = 27 no remainder. But it expects 0? What\\'s going on and what\\'s the reason behind this?"
                    },
                    {
                        "username": "PixDay",
                        "content": "What is asked is not the numbers of digit in the given number but if a digit of the number can divide it  in your example you will have 54/4 and 54/5\\n"
                    }
                ]
            },
            {
                "id": 1744579,
                "content": [
                    {
                        "username": "akksh_18",
                        "content": "i have given correct conditions but my code gives wrong output for testcase 2\\n"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "Heyy, \\nWhen I divide the number by 10 before the condition my solution take 3ms, but when I updated my code a little bit and divide the number by 10 right after the mod ZERO condition. It takes 0ms.\\n\\nWhat is the reason behind this?"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "[@PixDay](/PixDay) Thanks, it goes from 3ms to 0ms without any change in the code."
                    },
                    {
                        "username": "PixDay",
                        "content": "Try to submit multiple time the exact same code and sometimes you have some small differences, I don\\'t know exactly what is this comming from but I guess it\\'s due to server requests and latencies"
                    },
                    {
                        "username": "kennyhml",
                        "content": "For anyone struggling to solve this without 'cheating' by turning the number into a string, I wrote down a pretty detailed explanation in my [solution](https://leetcode.com/problems/count-the-digits-that-divide-a-number/solutions/3702272/important-to-understand-no-string-solution/). \n\nEDIT: If you only want a hint, and not the full solution, just read up to the first two bullet points of the approach!"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num,count=0;\\n        if(num<10) return 1;\\n        else{\\n            while(x!=0){\\n                int s=x%10;\\n                if(num%s==0) count++;\\n                x/=10;\\n            }\\n        }\\n        return count;\\n    }\\n};"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2520.%20Count%20the%20Digits%20That%20Divide%20a%20Number.cpp\\n\\nThis repository contains all LEETCODE SOLUTIONS IN C++\\nIf you find it useful please LEAVE A STAR "
                    },
                    {
                        "username": "prashantsleet",
                        "content": "Why am I getting error while incrementing ans? It says signed interger overflow.\\n\\n**************************************************************\\nruntime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:17:20\\n**************************************************************\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        int n = num;\\n        while(n > 0){\\n            if(num % (n%10) == 0) \\n                ans++;\\n            n/10;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "ENViN",
                        "content": "The update statement should be n/=10 and not n/10. The latter is causing an infinite loop and fortunately you get integer overflow before TLE :)"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(num>0){\\n            int digit=num%10;\\n            if(temp%digit==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;\\n        \\n    }"
                    },
                    {
                        "username": "ashokimandi",
                        "content": "how to read input"
                    },
                    {
                        "username": "PixDay",
                        "content": "What do you mean by : \"read the input\" do you talk about the parameters of the function ?"
                    },
                    {
                        "username": "Unbeknownstguy",
                        "content": "Guys, There is no point converting num to string here. We can directly count by storing num in temp variable and taking remainder of the temp and dividing it by 10 each time. Hope it helps. Happy coding."
                    },
                    {
                        "username": "STDeeznutz",
                        "content": "I have a testcase where num = 54. Number of digits is 2. 54/2 = 27 no remainder. But it expects 0? What\\'s going on and what\\'s the reason behind this?"
                    },
                    {
                        "username": "PixDay",
                        "content": "What is asked is not the numbers of digit in the given number but if a digit of the number can divide it  in your example you will have 54/4 and 54/5\\n"
                    }
                ]
            },
            {
                "id": 1742861,
                "content": [
                    {
                        "username": "akksh_18",
                        "content": "i have given correct conditions but my code gives wrong output for testcase 2\\n"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "Heyy, \\nWhen I divide the number by 10 before the condition my solution take 3ms, but when I updated my code a little bit and divide the number by 10 right after the mod ZERO condition. It takes 0ms.\\n\\nWhat is the reason behind this?"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "[@PixDay](/PixDay) Thanks, it goes from 3ms to 0ms without any change in the code."
                    },
                    {
                        "username": "PixDay",
                        "content": "Try to submit multiple time the exact same code and sometimes you have some small differences, I don\\'t know exactly what is this comming from but I guess it\\'s due to server requests and latencies"
                    },
                    {
                        "username": "kennyhml",
                        "content": "For anyone struggling to solve this without 'cheating' by turning the number into a string, I wrote down a pretty detailed explanation in my [solution](https://leetcode.com/problems/count-the-digits-that-divide-a-number/solutions/3702272/important-to-understand-no-string-solution/). \n\nEDIT: If you only want a hint, and not the full solution, just read up to the first two bullet points of the approach!"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num,count=0;\\n        if(num<10) return 1;\\n        else{\\n            while(x!=0){\\n                int s=x%10;\\n                if(num%s==0) count++;\\n                x/=10;\\n            }\\n        }\\n        return count;\\n    }\\n};"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2520.%20Count%20the%20Digits%20That%20Divide%20a%20Number.cpp\\n\\nThis repository contains all LEETCODE SOLUTIONS IN C++\\nIf you find it useful please LEAVE A STAR "
                    },
                    {
                        "username": "prashantsleet",
                        "content": "Why am I getting error while incrementing ans? It says signed interger overflow.\\n\\n**************************************************************\\nruntime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:17:20\\n**************************************************************\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        int n = num;\\n        while(n > 0){\\n            if(num % (n%10) == 0) \\n                ans++;\\n            n/10;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "ENViN",
                        "content": "The update statement should be n/=10 and not n/10. The latter is causing an infinite loop and fortunately you get integer overflow before TLE :)"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(num>0){\\n            int digit=num%10;\\n            if(temp%digit==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;\\n        \\n    }"
                    },
                    {
                        "username": "ashokimandi",
                        "content": "how to read input"
                    },
                    {
                        "username": "PixDay",
                        "content": "What do you mean by : \"read the input\" do you talk about the parameters of the function ?"
                    },
                    {
                        "username": "Unbeknownstguy",
                        "content": "Guys, There is no point converting num to string here. We can directly count by storing num in temp variable and taking remainder of the temp and dividing it by 10 each time. Hope it helps. Happy coding."
                    },
                    {
                        "username": "STDeeznutz",
                        "content": "I have a testcase where num = 54. Number of digits is 2. 54/2 = 27 no remainder. But it expects 0? What\\'s going on and what\\'s the reason behind this?"
                    },
                    {
                        "username": "PixDay",
                        "content": "What is asked is not the numbers of digit in the given number but if a digit of the number can divide it  in your example you will have 54/4 and 54/5\\n"
                    }
                ]
            },
            {
                "id": 1742030,
                "content": [
                    {
                        "username": "akksh_18",
                        "content": "i have given correct conditions but my code gives wrong output for testcase 2\\n"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "Heyy, \\nWhen I divide the number by 10 before the condition my solution take 3ms, but when I updated my code a little bit and divide the number by 10 right after the mod ZERO condition. It takes 0ms.\\n\\nWhat is the reason behind this?"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "[@PixDay](/PixDay) Thanks, it goes from 3ms to 0ms without any change in the code."
                    },
                    {
                        "username": "PixDay",
                        "content": "Try to submit multiple time the exact same code and sometimes you have some small differences, I don\\'t know exactly what is this comming from but I guess it\\'s due to server requests and latencies"
                    },
                    {
                        "username": "kennyhml",
                        "content": "For anyone struggling to solve this without 'cheating' by turning the number into a string, I wrote down a pretty detailed explanation in my [solution](https://leetcode.com/problems/count-the-digits-that-divide-a-number/solutions/3702272/important-to-understand-no-string-solution/). \n\nEDIT: If you only want a hint, and not the full solution, just read up to the first two bullet points of the approach!"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num,count=0;\\n        if(num<10) return 1;\\n        else{\\n            while(x!=0){\\n                int s=x%10;\\n                if(num%s==0) count++;\\n                x/=10;\\n            }\\n        }\\n        return count;\\n    }\\n};"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2520.%20Count%20the%20Digits%20That%20Divide%20a%20Number.cpp\\n\\nThis repository contains all LEETCODE SOLUTIONS IN C++\\nIf you find it useful please LEAVE A STAR "
                    },
                    {
                        "username": "prashantsleet",
                        "content": "Why am I getting error while incrementing ans? It says signed interger overflow.\\n\\n**************************************************************\\nruntime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:17:20\\n**************************************************************\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        int n = num;\\n        while(n > 0){\\n            if(num % (n%10) == 0) \\n                ans++;\\n            n/10;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "ENViN",
                        "content": "The update statement should be n/=10 and not n/10. The latter is causing an infinite loop and fortunately you get integer overflow before TLE :)"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(num>0){\\n            int digit=num%10;\\n            if(temp%digit==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;\\n        \\n    }"
                    },
                    {
                        "username": "ashokimandi",
                        "content": "how to read input"
                    },
                    {
                        "username": "PixDay",
                        "content": "What do you mean by : \"read the input\" do you talk about the parameters of the function ?"
                    },
                    {
                        "username": "Unbeknownstguy",
                        "content": "Guys, There is no point converting num to string here. We can directly count by storing num in temp variable and taking remainder of the temp and dividing it by 10 each time. Hope it helps. Happy coding."
                    },
                    {
                        "username": "STDeeznutz",
                        "content": "I have a testcase where num = 54. Number of digits is 2. 54/2 = 27 no remainder. But it expects 0? What\\'s going on and what\\'s the reason behind this?"
                    },
                    {
                        "username": "PixDay",
                        "content": "What is asked is not the numbers of digit in the given number but if a digit of the number can divide it  in your example you will have 54/4 and 54/5\\n"
                    }
                ]
            },
            {
                "id": 1818471,
                "content": [
                    {
                        "username": "akksh_18",
                        "content": "i have given correct conditions but my code gives wrong output for testcase 2\\n"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "Heyy, \\nWhen I divide the number by 10 before the condition my solution take 3ms, but when I updated my code a little bit and divide the number by 10 right after the mod ZERO condition. It takes 0ms.\\n\\nWhat is the reason behind this?"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "[@PixDay](/PixDay) Thanks, it goes from 3ms to 0ms without any change in the code."
                    },
                    {
                        "username": "PixDay",
                        "content": "Try to submit multiple time the exact same code and sometimes you have some small differences, I don\\'t know exactly what is this comming from but I guess it\\'s due to server requests and latencies"
                    },
                    {
                        "username": "kennyhml",
                        "content": "For anyone struggling to solve this without 'cheating' by turning the number into a string, I wrote down a pretty detailed explanation in my [solution](https://leetcode.com/problems/count-the-digits-that-divide-a-number/solutions/3702272/important-to-understand-no-string-solution/). \n\nEDIT: If you only want a hint, and not the full solution, just read up to the first two bullet points of the approach!"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num,count=0;\\n        if(num<10) return 1;\\n        else{\\n            while(x!=0){\\n                int s=x%10;\\n                if(num%s==0) count++;\\n                x/=10;\\n            }\\n        }\\n        return count;\\n    }\\n};"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2520.%20Count%20the%20Digits%20That%20Divide%20a%20Number.cpp\\n\\nThis repository contains all LEETCODE SOLUTIONS IN C++\\nIf you find it useful please LEAVE A STAR "
                    },
                    {
                        "username": "prashantsleet",
                        "content": "Why am I getting error while incrementing ans? It says signed interger overflow.\\n\\n**************************************************************\\nruntime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:17:20\\n**************************************************************\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        int n = num;\\n        while(n > 0){\\n            if(num % (n%10) == 0) \\n                ans++;\\n            n/10;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "ENViN",
                        "content": "The update statement should be n/=10 and not n/10. The latter is causing an infinite loop and fortunately you get integer overflow before TLE :)"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(num>0){\\n            int digit=num%10;\\n            if(temp%digit==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;\\n        \\n    }"
                    },
                    {
                        "username": "ashokimandi",
                        "content": "how to read input"
                    },
                    {
                        "username": "PixDay",
                        "content": "What do you mean by : \"read the input\" do you talk about the parameters of the function ?"
                    },
                    {
                        "username": "Unbeknownstguy",
                        "content": "Guys, There is no point converting num to string here. We can directly count by storing num in temp variable and taking remainder of the temp and dividing it by 10 each time. Hope it helps. Happy coding."
                    },
                    {
                        "username": "STDeeznutz",
                        "content": "I have a testcase where num = 54. Number of digits is 2. 54/2 = 27 no remainder. But it expects 0? What\\'s going on and what\\'s the reason behind this?"
                    },
                    {
                        "username": "PixDay",
                        "content": "What is asked is not the numbers of digit in the given number but if a digit of the number can divide it  in your example you will have 54/4 and 54/5\\n"
                    }
                ]
            },
            {
                "id": 1736406,
                "content": [
                    {
                        "username": "akksh_18",
                        "content": "i have given correct conditions but my code gives wrong output for testcase 2\\n"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "Heyy, \\nWhen I divide the number by 10 before the condition my solution take 3ms, but when I updated my code a little bit and divide the number by 10 right after the mod ZERO condition. It takes 0ms.\\n\\nWhat is the reason behind this?"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "[@PixDay](/PixDay) Thanks, it goes from 3ms to 0ms without any change in the code."
                    },
                    {
                        "username": "PixDay",
                        "content": "Try to submit multiple time the exact same code and sometimes you have some small differences, I don\\'t know exactly what is this comming from but I guess it\\'s due to server requests and latencies"
                    },
                    {
                        "username": "kennyhml",
                        "content": "For anyone struggling to solve this without 'cheating' by turning the number into a string, I wrote down a pretty detailed explanation in my [solution](https://leetcode.com/problems/count-the-digits-that-divide-a-number/solutions/3702272/important-to-understand-no-string-solution/). \n\nEDIT: If you only want a hint, and not the full solution, just read up to the first two bullet points of the approach!"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num,count=0;\\n        if(num<10) return 1;\\n        else{\\n            while(x!=0){\\n                int s=x%10;\\n                if(num%s==0) count++;\\n                x/=10;\\n            }\\n        }\\n        return count;\\n    }\\n};"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2520.%20Count%20the%20Digits%20That%20Divide%20a%20Number.cpp\\n\\nThis repository contains all LEETCODE SOLUTIONS IN C++\\nIf you find it useful please LEAVE A STAR "
                    },
                    {
                        "username": "prashantsleet",
                        "content": "Why am I getting error while incrementing ans? It says signed interger overflow.\\n\\n**************************************************************\\nruntime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:17:20\\n**************************************************************\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        int n = num;\\n        while(n > 0){\\n            if(num % (n%10) == 0) \\n                ans++;\\n            n/10;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "ENViN",
                        "content": "The update statement should be n/=10 and not n/10. The latter is causing an infinite loop and fortunately you get integer overflow before TLE :)"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(num>0){\\n            int digit=num%10;\\n            if(temp%digit==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;\\n        \\n    }"
                    },
                    {
                        "username": "ashokimandi",
                        "content": "how to read input"
                    },
                    {
                        "username": "PixDay",
                        "content": "What do you mean by : \"read the input\" do you talk about the parameters of the function ?"
                    },
                    {
                        "username": "Unbeknownstguy",
                        "content": "Guys, There is no point converting num to string here. We can directly count by storing num in temp variable and taking remainder of the temp and dividing it by 10 each time. Hope it helps. Happy coding."
                    },
                    {
                        "username": "STDeeznutz",
                        "content": "I have a testcase where num = 54. Number of digits is 2. 54/2 = 27 no remainder. But it expects 0? What\\'s going on and what\\'s the reason behind this?"
                    },
                    {
                        "username": "PixDay",
                        "content": "What is asked is not the numbers of digit in the given number but if a digit of the number can divide it  in your example you will have 54/4 and 54/5\\n"
                    }
                ]
            },
            {
                "id": 1951011,
                "content": [
                    {
                        "username": "akksh_18",
                        "content": "i have given correct conditions but my code gives wrong output for testcase 2\\n"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "Heyy, \\nWhen I divide the number by 10 before the condition my solution take 3ms, but when I updated my code a little bit and divide the number by 10 right after the mod ZERO condition. It takes 0ms.\\n\\nWhat is the reason behind this?"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "[@PixDay](/PixDay) Thanks, it goes from 3ms to 0ms without any change in the code."
                    },
                    {
                        "username": "PixDay",
                        "content": "Try to submit multiple time the exact same code and sometimes you have some small differences, I don\\'t know exactly what is this comming from but I guess it\\'s due to server requests and latencies"
                    },
                    {
                        "username": "kennyhml",
                        "content": "For anyone struggling to solve this without 'cheating' by turning the number into a string, I wrote down a pretty detailed explanation in my [solution](https://leetcode.com/problems/count-the-digits-that-divide-a-number/solutions/3702272/important-to-understand-no-string-solution/). \n\nEDIT: If you only want a hint, and not the full solution, just read up to the first two bullet points of the approach!"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num,count=0;\\n        if(num<10) return 1;\\n        else{\\n            while(x!=0){\\n                int s=x%10;\\n                if(num%s==0) count++;\\n                x/=10;\\n            }\\n        }\\n        return count;\\n    }\\n};"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2520.%20Count%20the%20Digits%20That%20Divide%20a%20Number.cpp\\n\\nThis repository contains all LEETCODE SOLUTIONS IN C++\\nIf you find it useful please LEAVE A STAR "
                    },
                    {
                        "username": "prashantsleet",
                        "content": "Why am I getting error while incrementing ans? It says signed interger overflow.\\n\\n**************************************************************\\nruntime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:17:20\\n**************************************************************\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        int n = num;\\n        while(n > 0){\\n            if(num % (n%10) == 0) \\n                ans++;\\n            n/10;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "ENViN",
                        "content": "The update statement should be n/=10 and not n/10. The latter is causing an infinite loop and fortunately you get integer overflow before TLE :)"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(num>0){\\n            int digit=num%10;\\n            if(temp%digit==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;\\n        \\n    }"
                    },
                    {
                        "username": "ashokimandi",
                        "content": "how to read input"
                    },
                    {
                        "username": "PixDay",
                        "content": "What do you mean by : \"read the input\" do you talk about the parameters of the function ?"
                    },
                    {
                        "username": "Unbeknownstguy",
                        "content": "Guys, There is no point converting num to string here. We can directly count by storing num in temp variable and taking remainder of the temp and dividing it by 10 each time. Hope it helps. Happy coding."
                    },
                    {
                        "username": "STDeeznutz",
                        "content": "I have a testcase where num = 54. Number of digits is 2. 54/2 = 27 no remainder. But it expects 0? What\\'s going on and what\\'s the reason behind this?"
                    },
                    {
                        "username": "PixDay",
                        "content": "What is asked is not the numbers of digit in the given number but if a digit of the number can divide it  in your example you will have 54/4 and 54/5\\n"
                    }
                ]
            },
            {
                "id": 1831198,
                "content": [
                    {
                        "username": "akksh_18",
                        "content": "i have given correct conditions but my code gives wrong output for testcase 2\\n"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "Heyy, \\nWhen I divide the number by 10 before the condition my solution take 3ms, but when I updated my code a little bit and divide the number by 10 right after the mod ZERO condition. It takes 0ms.\\n\\nWhat is the reason behind this?"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "[@PixDay](/PixDay) Thanks, it goes from 3ms to 0ms without any change in the code."
                    },
                    {
                        "username": "PixDay",
                        "content": "Try to submit multiple time the exact same code and sometimes you have some small differences, I don\\'t know exactly what is this comming from but I guess it\\'s due to server requests and latencies"
                    },
                    {
                        "username": "kennyhml",
                        "content": "For anyone struggling to solve this without 'cheating' by turning the number into a string, I wrote down a pretty detailed explanation in my [solution](https://leetcode.com/problems/count-the-digits-that-divide-a-number/solutions/3702272/important-to-understand-no-string-solution/). \n\nEDIT: If you only want a hint, and not the full solution, just read up to the first two bullet points of the approach!"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num,count=0;\\n        if(num<10) return 1;\\n        else{\\n            while(x!=0){\\n                int s=x%10;\\n                if(num%s==0) count++;\\n                x/=10;\\n            }\\n        }\\n        return count;\\n    }\\n};"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2520.%20Count%20the%20Digits%20That%20Divide%20a%20Number.cpp\\n\\nThis repository contains all LEETCODE SOLUTIONS IN C++\\nIf you find it useful please LEAVE A STAR "
                    },
                    {
                        "username": "prashantsleet",
                        "content": "Why am I getting error while incrementing ans? It says signed interger overflow.\\n\\n**************************************************************\\nruntime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:17:20\\n**************************************************************\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        int n = num;\\n        while(n > 0){\\n            if(num % (n%10) == 0) \\n                ans++;\\n            n/10;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "ENViN",
                        "content": "The update statement should be n/=10 and not n/10. The latter is causing an infinite loop and fortunately you get integer overflow before TLE :)"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(num>0){\\n            int digit=num%10;\\n            if(temp%digit==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;\\n        \\n    }"
                    },
                    {
                        "username": "ashokimandi",
                        "content": "how to read input"
                    },
                    {
                        "username": "PixDay",
                        "content": "What do you mean by : \"read the input\" do you talk about the parameters of the function ?"
                    },
                    {
                        "username": "Unbeknownstguy",
                        "content": "Guys, There is no point converting num to string here. We can directly count by storing num in temp variable and taking remainder of the temp and dividing it by 10 each time. Hope it helps. Happy coding."
                    },
                    {
                        "username": "STDeeznutz",
                        "content": "I have a testcase where num = 54. Number of digits is 2. 54/2 = 27 no remainder. But it expects 0? What\\'s going on and what\\'s the reason behind this?"
                    },
                    {
                        "username": "PixDay",
                        "content": "What is asked is not the numbers of digit in the given number but if a digit of the number can divide it  in your example you will have 54/4 and 54/5\\n"
                    }
                ]
            },
            {
                "id": 1795348,
                "content": [
                    {
                        "username": "akksh_18",
                        "content": "i have given correct conditions but my code gives wrong output for testcase 2\\n"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "Heyy, \\nWhen I divide the number by 10 before the condition my solution take 3ms, but when I updated my code a little bit and divide the number by 10 right after the mod ZERO condition. It takes 0ms.\\n\\nWhat is the reason behind this?"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "[@PixDay](/PixDay) Thanks, it goes from 3ms to 0ms without any change in the code."
                    },
                    {
                        "username": "PixDay",
                        "content": "Try to submit multiple time the exact same code and sometimes you have some small differences, I don\\'t know exactly what is this comming from but I guess it\\'s due to server requests and latencies"
                    },
                    {
                        "username": "kennyhml",
                        "content": "For anyone struggling to solve this without 'cheating' by turning the number into a string, I wrote down a pretty detailed explanation in my [solution](https://leetcode.com/problems/count-the-digits-that-divide-a-number/solutions/3702272/important-to-understand-no-string-solution/). \n\nEDIT: If you only want a hint, and not the full solution, just read up to the first two bullet points of the approach!"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num,count=0;\\n        if(num<10) return 1;\\n        else{\\n            while(x!=0){\\n                int s=x%10;\\n                if(num%s==0) count++;\\n                x/=10;\\n            }\\n        }\\n        return count;\\n    }\\n};"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2520.%20Count%20the%20Digits%20That%20Divide%20a%20Number.cpp\\n\\nThis repository contains all LEETCODE SOLUTIONS IN C++\\nIf you find it useful please LEAVE A STAR "
                    },
                    {
                        "username": "prashantsleet",
                        "content": "Why am I getting error while incrementing ans? It says signed interger overflow.\\n\\n**************************************************************\\nruntime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:17:20\\n**************************************************************\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        int n = num;\\n        while(n > 0){\\n            if(num % (n%10) == 0) \\n                ans++;\\n            n/10;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "ENViN",
                        "content": "The update statement should be n/=10 and not n/10. The latter is causing an infinite loop and fortunately you get integer overflow before TLE :)"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(num>0){\\n            int digit=num%10;\\n            if(temp%digit==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;\\n        \\n    }"
                    },
                    {
                        "username": "ashokimandi",
                        "content": "how to read input"
                    },
                    {
                        "username": "PixDay",
                        "content": "What do you mean by : \"read the input\" do you talk about the parameters of the function ?"
                    },
                    {
                        "username": "Unbeknownstguy",
                        "content": "Guys, There is no point converting num to string here. We can directly count by storing num in temp variable and taking remainder of the temp and dividing it by 10 each time. Hope it helps. Happy coding."
                    },
                    {
                        "username": "STDeeznutz",
                        "content": "I have a testcase where num = 54. Number of digits is 2. 54/2 = 27 no remainder. But it expects 0? What\\'s going on and what\\'s the reason behind this?"
                    },
                    {
                        "username": "PixDay",
                        "content": "What is asked is not the numbers of digit in the given number but if a digit of the number can divide it  in your example you will have 54/4 and 54/5\\n"
                    }
                ]
            },
            {
                "id": 1761689,
                "content": [
                    {
                        "username": "akksh_18",
                        "content": "i have given correct conditions but my code gives wrong output for testcase 2\\n"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "Heyy, \\nWhen I divide the number by 10 before the condition my solution take 3ms, but when I updated my code a little bit and divide the number by 10 right after the mod ZERO condition. It takes 0ms.\\n\\nWhat is the reason behind this?"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "[@PixDay](/PixDay) Thanks, it goes from 3ms to 0ms without any change in the code."
                    },
                    {
                        "username": "PixDay",
                        "content": "Try to submit multiple time the exact same code and sometimes you have some small differences, I don\\'t know exactly what is this comming from but I guess it\\'s due to server requests and latencies"
                    },
                    {
                        "username": "kennyhml",
                        "content": "For anyone struggling to solve this without 'cheating' by turning the number into a string, I wrote down a pretty detailed explanation in my [solution](https://leetcode.com/problems/count-the-digits-that-divide-a-number/solutions/3702272/important-to-understand-no-string-solution/). \n\nEDIT: If you only want a hint, and not the full solution, just read up to the first two bullet points of the approach!"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num,count=0;\\n        if(num<10) return 1;\\n        else{\\n            while(x!=0){\\n                int s=x%10;\\n                if(num%s==0) count++;\\n                x/=10;\\n            }\\n        }\\n        return count;\\n    }\\n};"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2520.%20Count%20the%20Digits%20That%20Divide%20a%20Number.cpp\\n\\nThis repository contains all LEETCODE SOLUTIONS IN C++\\nIf you find it useful please LEAVE A STAR "
                    },
                    {
                        "username": "prashantsleet",
                        "content": "Why am I getting error while incrementing ans? It says signed interger overflow.\\n\\n**************************************************************\\nruntime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:17:20\\n**************************************************************\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        int n = num;\\n        while(n > 0){\\n            if(num % (n%10) == 0) \\n                ans++;\\n            n/10;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "ENViN",
                        "content": "The update statement should be n/=10 and not n/10. The latter is causing an infinite loop and fortunately you get integer overflow before TLE :)"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(num>0){\\n            int digit=num%10;\\n            if(temp%digit==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;\\n        \\n    }"
                    },
                    {
                        "username": "ashokimandi",
                        "content": "how to read input"
                    },
                    {
                        "username": "PixDay",
                        "content": "What do you mean by : \"read the input\" do you talk about the parameters of the function ?"
                    },
                    {
                        "username": "Unbeknownstguy",
                        "content": "Guys, There is no point converting num to string here. We can directly count by storing num in temp variable and taking remainder of the temp and dividing it by 10 each time. Hope it helps. Happy coding."
                    },
                    {
                        "username": "STDeeznutz",
                        "content": "I have a testcase where num = 54. Number of digits is 2. 54/2 = 27 no remainder. But it expects 0? What\\'s going on and what\\'s the reason behind this?"
                    },
                    {
                        "username": "PixDay",
                        "content": "What is asked is not the numbers of digit in the given number but if a digit of the number can divide it  in your example you will have 54/4 and 54/5\\n"
                    }
                ]
            },
            {
                "id": 1757658,
                "content": [
                    {
                        "username": "akksh_18",
                        "content": "i have given correct conditions but my code gives wrong output for testcase 2\\n"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "Heyy, \\nWhen I divide the number by 10 before the condition my solution take 3ms, but when I updated my code a little bit and divide the number by 10 right after the mod ZERO condition. It takes 0ms.\\n\\nWhat is the reason behind this?"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "[@PixDay](/PixDay) Thanks, it goes from 3ms to 0ms without any change in the code."
                    },
                    {
                        "username": "PixDay",
                        "content": "Try to submit multiple time the exact same code and sometimes you have some small differences, I don\\'t know exactly what is this comming from but I guess it\\'s due to server requests and latencies"
                    },
                    {
                        "username": "kennyhml",
                        "content": "For anyone struggling to solve this without 'cheating' by turning the number into a string, I wrote down a pretty detailed explanation in my [solution](https://leetcode.com/problems/count-the-digits-that-divide-a-number/solutions/3702272/important-to-understand-no-string-solution/). \n\nEDIT: If you only want a hint, and not the full solution, just read up to the first two bullet points of the approach!"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num,count=0;\\n        if(num<10) return 1;\\n        else{\\n            while(x!=0){\\n                int s=x%10;\\n                if(num%s==0) count++;\\n                x/=10;\\n            }\\n        }\\n        return count;\\n    }\\n};"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2520.%20Count%20the%20Digits%20That%20Divide%20a%20Number.cpp\\n\\nThis repository contains all LEETCODE SOLUTIONS IN C++\\nIf you find it useful please LEAVE A STAR "
                    },
                    {
                        "username": "prashantsleet",
                        "content": "Why am I getting error while incrementing ans? It says signed interger overflow.\\n\\n**************************************************************\\nruntime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:17:20\\n**************************************************************\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        int n = num;\\n        while(n > 0){\\n            if(num % (n%10) == 0) \\n                ans++;\\n            n/10;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "ENViN",
                        "content": "The update statement should be n/=10 and not n/10. The latter is causing an infinite loop and fortunately you get integer overflow before TLE :)"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(num>0){\\n            int digit=num%10;\\n            if(temp%digit==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;\\n        \\n    }"
                    },
                    {
                        "username": "ashokimandi",
                        "content": "how to read input"
                    },
                    {
                        "username": "PixDay",
                        "content": "What do you mean by : \"read the input\" do you talk about the parameters of the function ?"
                    },
                    {
                        "username": "Unbeknownstguy",
                        "content": "Guys, There is no point converting num to string here. We can directly count by storing num in temp variable and taking remainder of the temp and dividing it by 10 each time. Hope it helps. Happy coding."
                    },
                    {
                        "username": "STDeeznutz",
                        "content": "I have a testcase where num = 54. Number of digits is 2. 54/2 = 27 no remainder. But it expects 0? What\\'s going on and what\\'s the reason behind this?"
                    },
                    {
                        "username": "PixDay",
                        "content": "What is asked is not the numbers of digit in the given number but if a digit of the number can divide it  in your example you will have 54/4 and 54/5\\n"
                    }
                ]
            },
            {
                "id": 1744579,
                "content": [
                    {
                        "username": "akksh_18",
                        "content": "i have given correct conditions but my code gives wrong output for testcase 2\\n"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "Heyy, \\nWhen I divide the number by 10 before the condition my solution take 3ms, but when I updated my code a little bit and divide the number by 10 right after the mod ZERO condition. It takes 0ms.\\n\\nWhat is the reason behind this?"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "[@PixDay](/PixDay) Thanks, it goes from 3ms to 0ms without any change in the code."
                    },
                    {
                        "username": "PixDay",
                        "content": "Try to submit multiple time the exact same code and sometimes you have some small differences, I don\\'t know exactly what is this comming from but I guess it\\'s due to server requests and latencies"
                    },
                    {
                        "username": "kennyhml",
                        "content": "For anyone struggling to solve this without 'cheating' by turning the number into a string, I wrote down a pretty detailed explanation in my [solution](https://leetcode.com/problems/count-the-digits-that-divide-a-number/solutions/3702272/important-to-understand-no-string-solution/). \n\nEDIT: If you only want a hint, and not the full solution, just read up to the first two bullet points of the approach!"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num,count=0;\\n        if(num<10) return 1;\\n        else{\\n            while(x!=0){\\n                int s=x%10;\\n                if(num%s==0) count++;\\n                x/=10;\\n            }\\n        }\\n        return count;\\n    }\\n};"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2520.%20Count%20the%20Digits%20That%20Divide%20a%20Number.cpp\\n\\nThis repository contains all LEETCODE SOLUTIONS IN C++\\nIf you find it useful please LEAVE A STAR "
                    },
                    {
                        "username": "prashantsleet",
                        "content": "Why am I getting error while incrementing ans? It says signed interger overflow.\\n\\n**************************************************************\\nruntime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:17:20\\n**************************************************************\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        int n = num;\\n        while(n > 0){\\n            if(num % (n%10) == 0) \\n                ans++;\\n            n/10;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "ENViN",
                        "content": "The update statement should be n/=10 and not n/10. The latter is causing an infinite loop and fortunately you get integer overflow before TLE :)"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(num>0){\\n            int digit=num%10;\\n            if(temp%digit==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;\\n        \\n    }"
                    },
                    {
                        "username": "ashokimandi",
                        "content": "how to read input"
                    },
                    {
                        "username": "PixDay",
                        "content": "What do you mean by : \"read the input\" do you talk about the parameters of the function ?"
                    },
                    {
                        "username": "Unbeknownstguy",
                        "content": "Guys, There is no point converting num to string here. We can directly count by storing num in temp variable and taking remainder of the temp and dividing it by 10 each time. Hope it helps. Happy coding."
                    },
                    {
                        "username": "STDeeznutz",
                        "content": "I have a testcase where num = 54. Number of digits is 2. 54/2 = 27 no remainder. But it expects 0? What\\'s going on and what\\'s the reason behind this?"
                    },
                    {
                        "username": "PixDay",
                        "content": "What is asked is not the numbers of digit in the given number but if a digit of the number can divide it  in your example you will have 54/4 and 54/5\\n"
                    }
                ]
            },
            {
                "id": 1742861,
                "content": [
                    {
                        "username": "akksh_18",
                        "content": "i have given correct conditions but my code gives wrong output for testcase 2\\n"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "Heyy, \\nWhen I divide the number by 10 before the condition my solution take 3ms, but when I updated my code a little bit and divide the number by 10 right after the mod ZERO condition. It takes 0ms.\\n\\nWhat is the reason behind this?"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "[@PixDay](/PixDay) Thanks, it goes from 3ms to 0ms without any change in the code."
                    },
                    {
                        "username": "PixDay",
                        "content": "Try to submit multiple time the exact same code and sometimes you have some small differences, I don\\'t know exactly what is this comming from but I guess it\\'s due to server requests and latencies"
                    },
                    {
                        "username": "kennyhml",
                        "content": "For anyone struggling to solve this without 'cheating' by turning the number into a string, I wrote down a pretty detailed explanation in my [solution](https://leetcode.com/problems/count-the-digits-that-divide-a-number/solutions/3702272/important-to-understand-no-string-solution/). \n\nEDIT: If you only want a hint, and not the full solution, just read up to the first two bullet points of the approach!"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num,count=0;\\n        if(num<10) return 1;\\n        else{\\n            while(x!=0){\\n                int s=x%10;\\n                if(num%s==0) count++;\\n                x/=10;\\n            }\\n        }\\n        return count;\\n    }\\n};"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2520.%20Count%20the%20Digits%20That%20Divide%20a%20Number.cpp\\n\\nThis repository contains all LEETCODE SOLUTIONS IN C++\\nIf you find it useful please LEAVE A STAR "
                    },
                    {
                        "username": "prashantsleet",
                        "content": "Why am I getting error while incrementing ans? It says signed interger overflow.\\n\\n**************************************************************\\nruntime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:17:20\\n**************************************************************\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        int n = num;\\n        while(n > 0){\\n            if(num % (n%10) == 0) \\n                ans++;\\n            n/10;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "ENViN",
                        "content": "The update statement should be n/=10 and not n/10. The latter is causing an infinite loop and fortunately you get integer overflow before TLE :)"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(num>0){\\n            int digit=num%10;\\n            if(temp%digit==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;\\n        \\n    }"
                    },
                    {
                        "username": "ashokimandi",
                        "content": "how to read input"
                    },
                    {
                        "username": "PixDay",
                        "content": "What do you mean by : \"read the input\" do you talk about the parameters of the function ?"
                    },
                    {
                        "username": "Unbeknownstguy",
                        "content": "Guys, There is no point converting num to string here. We can directly count by storing num in temp variable and taking remainder of the temp and dividing it by 10 each time. Hope it helps. Happy coding."
                    },
                    {
                        "username": "STDeeznutz",
                        "content": "I have a testcase where num = 54. Number of digits is 2. 54/2 = 27 no remainder. But it expects 0? What\\'s going on and what\\'s the reason behind this?"
                    },
                    {
                        "username": "PixDay",
                        "content": "What is asked is not the numbers of digit in the given number but if a digit of the number can divide it  in your example you will have 54/4 and 54/5\\n"
                    }
                ]
            },
            {
                "id": 1742030,
                "content": [
                    {
                        "username": "akksh_18",
                        "content": "i have given correct conditions but my code gives wrong output for testcase 2\\n"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "Heyy, \\nWhen I divide the number by 10 before the condition my solution take 3ms, but when I updated my code a little bit and divide the number by 10 right after the mod ZERO condition. It takes 0ms.\\n\\nWhat is the reason behind this?"
                    },
                    {
                        "username": "HassanFCS",
                        "content": "[@PixDay](/PixDay) Thanks, it goes from 3ms to 0ms without any change in the code."
                    },
                    {
                        "username": "PixDay",
                        "content": "Try to submit multiple time the exact same code and sometimes you have some small differences, I don\\'t know exactly what is this comming from but I guess it\\'s due to server requests and latencies"
                    },
                    {
                        "username": "kennyhml",
                        "content": "For anyone struggling to solve this without 'cheating' by turning the number into a string, I wrote down a pretty detailed explanation in my [solution](https://leetcode.com/problems/count-the-digits-that-divide-a-number/solutions/3702272/important-to-understand-no-string-solution/). \n\nEDIT: If you only want a hint, and not the full solution, just read up to the first two bullet points of the approach!"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int x=num,count=0;\\n        if(num<10) return 1;\\n        else{\\n            while(x!=0){\\n                int s=x%10;\\n                if(num%s==0) count++;\\n                x/=10;\\n            }\\n        }\\n        return count;\\n    }\\n};"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2520.%20Count%20the%20Digits%20That%20Divide%20a%20Number.cpp\\n\\nThis repository contains all LEETCODE SOLUTIONS IN C++\\nIf you find it useful please LEAVE A STAR "
                    },
                    {
                        "username": "prashantsleet",
                        "content": "Why am I getting error while incrementing ans? It says signed interger overflow.\\n\\n**************************************************************\\nruntime error: signed integer overflow: 2147483647 + 1 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:17:20\\n**************************************************************\\n\\nclass Solution {\\npublic:\\n    int countDigits(int num) {\\n        int ans = 0;\\n        int n = num;\\n        while(n > 0){\\n            if(num % (n%10) == 0) \\n                ans++;\\n            n/10;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "ENViN",
                        "content": "The update statement should be n/=10 and not n/10. The latter is causing an infinite loop and fortunately you get integer overflow before TLE :)"
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "    int countDigits(int num) {\\n        int count=0;\\n        int temp=num;\\n        while(num>0){\\n            int digit=num%10;\\n            if(temp%digit==0){\\n                count++;\\n            }\\n            num=num/10;\\n        }\\n        return count;\\n        \\n    }"
                    },
                    {
                        "username": "ashokimandi",
                        "content": "how to read input"
                    },
                    {
                        "username": "PixDay",
                        "content": "What do you mean by : \"read the input\" do you talk about the parameters of the function ?"
                    },
                    {
                        "username": "Unbeknownstguy",
                        "content": "Guys, There is no point converting num to string here. We can directly count by storing num in temp variable and taking remainder of the temp and dividing it by 10 each time. Hope it helps. Happy coding."
                    },
                    {
                        "username": "STDeeznutz",
                        "content": "I have a testcase where num = 54. Number of digits is 2. 54/2 = 27 no remainder. But it expects 0? What\\'s going on and what\\'s the reason behind this?"
                    },
                    {
                        "username": "PixDay",
                        "content": "What is asked is not the numbers of digit in the given number but if a digit of the number can divide it  in your example you will have 54/4 and 54/5\\n"
                    }
                ]
            }
        ]
    }
]