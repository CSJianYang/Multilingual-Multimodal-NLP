[
    {
        "title": "Check if Object Instance of Class",
        "question_content": "Write a function that checks if a given value&nbsp;is an instance of a given class or superclass. For this problem, an object is considered an instance of a given class if that object has access to that class's methods.\nThere are&nbsp;no constraints on the data types that can be passed to the function. For example, the value or the class could be&nbsp;undefined.\n&nbsp;\nExample 1:\n\nInput: func = () => checkIfInstanceOf(new Date(), Date)\nOutput: true\nExplanation: The object returned by the Date constructor is, by definition, an instance of Date.\n\nExample 2:\n\nInput: func = () => { class Animal {}; class Dog extends Animal {}; return checkIfInstanceOf(new Dog(), Animal); }\nOutput: true\nExplanation:\nclass Animal {};\nclass Dog extends Animal {};\ncheckIfInstanceOf(new Dog(), Animal); // true\nDog is a subclass of Animal. Therefore, a Dog object is an instance of both Dog and Animal.\nExample 3:\n\nInput: func = () => checkIfInstanceOf(Date, Date)\nOutput: false\nExplanation: A date constructor cannot logically be an instance of itself.\n\nExample 4:\n\nInput: func = () => checkIfInstanceOf(5, Number)\nOutput: true\nExplanation: 5 is a Number. Note that the \"instanceof\" keyword would return false. However, it is still considered an instance of Number because it accesses the Number methods. For example \"toFixed()\".",
        "solutions": [
            {
                "id": 3406546,
                "title": "basic-javascript-solution-easy-to-understand-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIn Javascript, inheritance is achieved with the prototype chain.We can get the prototype of an object with the\\n   ```    Object.getPrototypeOf(obj)``` \\nusing this compare class prototype with objects prortotype.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe will Traverse the entire prototype chain until we find a match or else return False.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\nThe time complexity of the function depends on the depth of the prototype chain of the object being checked. \\nIn the worst case, when the prototype chain is very deep, the function may take O(n) time, where n is the depth of the prototype chain. \\n\\n<!-- Add your time complexity here, e.g.  -->\\n\\n- Space complexity:$$O(1)$$\\nThe space complexity of the function is constant, as it does not use any additional data structures that grow with the size of the input.\\n\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj!=null)\\n    {\\n        if(obj.constructor === classFunction)\\n        {\\n            return true;\\n        }\\n\\n        obj = Object.getPrototypeOf(obj);\\n\\n    }\\n\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```\\n\\nDo upvote if this was helpful!!",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```    Object.getPrototypeOf(obj)```\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj!=null)\\n    {\\n        if(obj.constructor === classFunction)\\n        {\\n            return true;\\n        }\\n\\n        obj = Object.getPrototypeOf(obj);\\n\\n    }\\n\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3406893,
                "title": "javascript-solution-with-explaination-easy-to-understand",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n### Check of some base conditions \\n* The `obj` parameter must not be null or undefined.\\n* The `classFunction` parameter must be a function.\\n\\n### what if variable `obj` holds a primitive value\\n> ##### Primitives are not objects and do not have properties or mehods, so the instanceof operator returns false when you use it with a primitive.\\n* we have to convert the primitive value into `Object` to use `instanceof` operator.\\n\\nNow we just have to use `instanceof` operator.\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\')\\n        return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```\\n\\n## Edit\\n* In `Javascript`, we can convert every thing into object and when we convert `null` or `undefined` if will become a instance of `Object` class, so it is important to make sure the object isn\\'t one of those.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\')\\n        return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3416578,
                "title": "easiest-2-liner-js-ts-detailed-explanation-with-meme-beats-99",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nMy first thought is to use the instanceof operator to check if the object is an instance of the class. If it is, then return true, otherwise return false. I will also need to handle edge cases, such as if the object or the class function is null or undefined.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nMy approach to solving the problem is as follows:\\n\\n- Check if the object is null or undefined, or if the type of the object is null. If any of these conditions are true, return false.\\n- Check if the second argument (class function) is a function. If it is not a function, return false.\\n- Use the instanceof operator to check if the given object is an instance of the given class function.\\n- If the object is an instance of the class function, return true. Otherwise, return false.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity is $$O(1)$$, as the code performs a fixed number of operations that do not depend on the size of the input.\\n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity is also $$O(1)$$, as the code does not require any extra memory beyond the input object and class function.\\n\\n<img src=\"https://assets.leetcode.com/users/images/b93dcc50-7e19-44d3-80ec-c41558d719ba_1684043630.2104852.png\" width=\"50%\">\\n\\n\\n\\n# Code\\n\\n```javascript []\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj == null || typeof classFunction !== \\'function\\' ) return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n```\\n\\n```typescript []\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n if (obj == null || typeof classFunction !== \\'function\\' ) return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/dcacd128-3c3c-4f01-8554-5f3bf0fcd03f_1681478978.311579.png)\\n",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```javascript []\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj == null || typeof classFunction !== \\'function\\' ) return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n```\n```typescript []\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n if (obj == null || typeof classFunction !== \\'function\\' ) return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3568004,
                "title": "prototype-chain-detailed-explanation-easy",
                "content": "## Approach:\\n\\n1. The `checkIfInstanceOf` function determines whether an object (`obj`) is an instance of a given class (`classFunction`).\\n\\n2. **Initial Checks:** The function first performs some initial checks to ensure the validity of the inputs. It checks if the object is null or undefined and if the `classFunction` is a function. If any of these conditions are true, the function returns `false`.\\n\\n3. **Prototype Chain:** The function retrieves the prototype of the object. Every object in JavaScript has a prototype, which represents the object it inherits properties and methods from.\\n\\n4. **Iterating through the Prototype Chain:** The function enters a loop that iterates through the prototype chain of the object. The prototype chain represents the inheritance hierarchy, allowing access to the prototypes of parent classes.\\n\\n5. **Comparison:** Within the loop, the function checks if the current prototype matches the prototype of the given class. If they match, it indicates that the object is an instance of the class, so the function returns `true`.\\n\\n6. **Moving to the Next Prototype:** If no match is found, the function moves to the next prototype in the chain. It retrieves the prototype of the current prototype using the `Object.getPrototypeOf()` method. This process continues until the end of the prototype chain is reached.\\n\\n9. **No Match Found:** If the loop completes without finding a match, the function returns `false`, indicating that the object is not an instance of the given class.\\n\\n# Code\\n```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\n// Function to check if an object is an instance of a given class\\nconst checkIfInstanceOf = (obj, classFunction) => {\\n  // Check if the object is null, undefined, or if classFunction is not a function\\n  if (obj===null || obj===undefined || typeof classFunction !== \\'function\\') {\\n    return false; // Return false if any of the conditions are true\\n  }\\n\\n  let prototype = Object.getPrototypeOf(obj); // Get the prototype of the object\\n\\n  while (prototype) {\\n    // Iterate through the prototype chain of the object\\n    if (prototype === classFunction.prototype) {\\n      // Check if the current prototype matches the prototype of the given class\\n      return true; // Return true if a match is found\\n    }\\n    prototype = Object.getPrototypeOf(prototype); // Move to the next prototype in the chain\\n  }\\n  return false; // Return false if no match is found in the entire prototype chain\\n};\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\n// Function to check if an object is an instance of a given class\\nconst checkIfInstanceOf = (obj, classFunction) => {\\n  // Check if the object is null, undefined, or if classFunction is not a function\\n  if (obj===null || obj===undefined || typeof classFunction !== \\'function\\') {\\n    return false; // Return false if any of the conditions are true\\n  }\\n\\n  let prototype = Object.getPrototypeOf(obj); // Get the prototype of the object\\n\\n  while (prototype) {\\n    // Iterate through the prototype chain of the object\\n    if (prototype === classFunction.prototype) {\\n      // Check if the current prototype matches the prototype of the given class\\n      return true; // Return true if a match is found\\n    }\\n    prototype = Object.getPrototypeOf(prototype); // Move to the next prototype in the chain\\n  }\\n  return false; // Return false if no match is found in the entire prototype chain\\n};\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3407076,
                "title": "simple-easy-javascript-typescript-solution-begineer-friendly",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n* Check if Object is null or undefined or classFunction is null or undefined. In this condition simply return false.\\n* Then check if given object (obj) is an instance of (instanceof) classFunction or not.\\n# Code\\n\\n```TypeScript []\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n\\n```\\n```JavaScript []\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```\\n\\n",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```TypeScript []\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n\\n```\n```JavaScript []\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3573948,
                "title": "one-liner-eassy-lets-go",
                "content": "\\n\\n```\\nreturn obj != null && typeof classFunction === \\'function\\' && Object(obj) instanceof classFunction;\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nreturn obj != null && typeof classFunction === \\'function\\' && Object(obj) instanceof classFunction;\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3408417,
                "title": "worst-solution-ever",
                "content": "# Approach\\nI don\\'t recommend you to write such dirty code, but I didn\\'t think of any other solution :^)\\n\\n# Complexity\\n- Time complexity: The duration of the heat death of the universe\\n- Space complexity: 2^32 petabyte\\n\\n# Code\\n```\\nfunction check(obj) {\\n    var ans = [], cur = obj.__proto__;\\n    while (cur && cur.name !== \"Object\") {\\n        ans.push(cur.constructor.name);\\n        cur = cur.__proto__;\\n    }\\n    return ans;\\n}\\n\\nfunction isObject(val) {\\n    return ![\"Null\", \"Undefined\"].includes(/\\\\s(\\\\w+)\\\\]/.exec(Object.prototype.toString.call(val))[1])\\n}\\n\\nfunction checkIfInstanceOf(x, y) {\\n    return isObject(x) && isObject(y) && y.constructor.name == \"Function\" && check(x).includes(y.name)\\n}\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction check(obj) {\\n    var ans = [], cur = obj.__proto__;\\n    while (cur && cur.name !== \"Object\") {\\n        ans.push(cur.constructor.name);\\n        cur = cur.__proto__;\\n    }\\n    return ans;\\n}\\n\\nfunction isObject(val) {\\n    return ![\"Null\", \"Undefined\"].includes(/\\\\s(\\\\w+)\\\\]/.exec(Object.prototype.toString.call(val))[1])\\n}\\n\\nfunction checkIfInstanceOf(x, y) {\\n    return isObject(x) && isObject(y) && y.constructor.name == \"Function\" && check(x).includes(y.name)\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3414812,
                "title": "js-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj == null) return false;\\n    if(typeof classFunction !== \\'function\\') return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj == null) return false;\\n    if(typeof classFunction !== \\'function\\') return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3647140,
                "title": "javascript-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj == null || typeof classFunction != \\'function\\' )\\n        return false;\\n    \\n    let val = (Object(obj) instanceof classFunction);\\n    return val;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj == null || typeof classFunction != \\'function\\' )\\n        return false;\\n    \\n    let val = (Object(obj) instanceof classFunction);\\n    return val;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3573754,
                "title": "java-script-solution-for-check-if-object-instance-of-a-class-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe intuition behind the above solution is to determine if an object has access to the methods of a given class or superclass. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach is to use the Object.getPrototypeOf() method to obtain the prototype of the object and the prototype of the class or superclass. Then, a recursive function isPrototypeOf() is used to check if the object\\'s prototype is equal to the class\\'s prototype or if it is a prototype of the class.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the solution depends on the depth of the prototype chain and the complexity of the isPrototypeOf() recursive function. In the worst case, where the prototype chain is very long, the time complexity can be considered O(n), where n is the depth of the prototype chain.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of the solution is determined by the recursive function isPrototypeOf() and the depth of the prototype chain. In the worst case, where the prototype chain is very long, the space complexity can also be considered O(n), where n is the depth of the prototype chain.\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  if (obj === null || typeof obj === \\'undefined\\' || classFunction === null || typeof classFunction !== \\'function\\') {\\n    return false;\\n  }\\n\\n  const objProto = Object.getPrototypeOf(obj);\\n  const classProto = classFunction.prototype;\\n  \\n  return isPrototypeOf(objProto, classProto);\\n};\\n\\nfunction isPrototypeOf(proto, targetProto) {\\n  if (proto === null) {\\n    return false;\\n  }\\n  \\n  if (proto === targetProto) {\\n    return true;\\n  }\\n  \\n  return isPrototypeOf(Object.getPrototypeOf(proto), targetProto);\\n}\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  if (obj === null || typeof obj === \\'undefined\\' || classFunction === null || typeof classFunction !== \\'function\\') {\\n    return false;\\n  }\\n\\n  const objProto = Object.getPrototypeOf(obj);\\n  const classProto = classFunction.prototype;\\n  \\n  return isPrototypeOf(objProto, classProto);\\n};\\n\\nfunction isPrototypeOf(proto, targetProto) {\\n  if (proto === null) {\\n    return false;\\n  }\\n  \\n  if (proto === targetProto) {\\n    return true;\\n  }\\n  \\n  return isPrototypeOf(Object.getPrototypeOf(proto), targetProto);\\n}\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3410743,
                "title": "javascript-solution-check-if-object-instance-of-class",
                "content": "# Intuition\\nThe problem requires checking if a given object is an instance of a given class or superclass. To solve this problem, we can use the  `instanceof` operator. However, since there are no constraints on the data types that can be passed to the function, we need to check if the object is null or undefined before checking its type.\\n\\n# Approach\\nOur approach is to first check if the object is null or undefined. If the object is not null or undefined, we use the `instanceof` operator to check if it is an instance of the given class or superclass. We return true if it is, false otherwise.\\n\\n# Complexity\\n- Time complexity:\\n     O(1), since we are only performing a single check using the instanceof operator.\\n\\n- Space complexity:\\n    O(1), since we are not using any additional space.\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  // Check if obj is null or undefined\\n  if (obj === null || obj === undefined) {\\n    return false;\\n  }\\n\\n  // Get the prototype of obj\\n  let proto = Object.getPrototypeOf(obj);\\n\\n  // Iterate through the prototype chain\\n  while (proto !== null) {\\n    // Check if the prototype\\'s constructor is equal to the class function\\n    if (proto.constructor === classFunction) {\\n      return true;\\n    }\\n\\n    // Get the next prototype in the chain\\n    proto = Object.getPrototypeOf(proto);\\n  }\\n\\n  // If we reach the end of the prototype chain without finding a match, return false\\n  return false;\\n};\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  // Check if obj is null or undefined\\n  if (obj === null || obj === undefined) {\\n    return false;\\n  }\\n\\n  // Get the prototype of obj\\n  let proto = Object.getPrototypeOf(obj);\\n\\n  // Iterate through the prototype chain\\n  while (proto !== null) {\\n    // Check if the prototype\\'s constructor is equal to the class function\\n    if (proto.constructor === classFunction) {\\n      return true;\\n    }\\n\\n    // Get the next prototype in the chain\\n    proto = Object.getPrototypeOf(proto);\\n  }\\n\\n  // If we reach the end of the prototype chain without finding a match, return false\\n  return false;\\n};\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3408527,
                "title": "easy-js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n\\n    if(obj === null || obj === undefined || typeof classFunction !== \"function\") return false;\\n\\n    return Object(obj) instanceof classFunction;\\n\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n\\n    if(obj === null || obj === undefined || typeof classFunction !== \"function\") return false;\\n\\n    return Object(obj) instanceof classFunction;\\n\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3576645,
                "title": "two-line-solution-javascript-solution-beats-93",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n![image.png](https://assets.leetcode.com/users/images/c54311b2-7fdd-4b8e-bf4b-25f10ef7c052_1685389004.8969936.png)\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj===null||obj===undefined || typeof classFunction !== \\'function\\') return false;\\n    return Object(obj) instanceof classFunction   \\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj===null||obj===undefined || typeof classFunction !== \\'function\\') return false;\\n    return Object(obj) instanceof classFunction   \\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3575059,
                "title": "js-without-instanceof-just-pure-while-loop-woohoo",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nProtoype chain, just use this chain.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe checkIfInstanceOf function determines if an object (`obj`) is an instance of a specific class or a class that inherits from it (`classFunction`).\\n\\nTo achieve this, the function iterates through the prototype chain of the object (`obj`) using a while loop.\\n\\nJust before the loop we create varibale `p` and store in initial `__proto__` of the `obj` there.\\n\\nAt each iteration, it compares the current (`p`) to the prototype of the class (`classFunction.prototype`).\\n\\nIf a match is found, we return true. Otherwise, we set `p.__proto__` to the itself and keep the loop until finding a match.\\n\\nWnen the last `__proto__` is null thne loop is being stopped and then we return false;\\n\\n# Complexity\\n- Time complexity: n/a\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: n/a\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  let p = obj?.__proto__;\\n  while (p) {\\n    if (p === classFunction?.prototype) {\\n      return true;\\n    }\\n    p = p?.__proto__;\\n  }\\n  return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  let p = obj?.__proto__;\\n  while (p) {\\n    if (p === classFunction?.prototype) {\\n      return true;\\n    }\\n    p = p?.__proto__;\\n  }\\n  return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3573894,
                "title": "3-line-easiest-solution",
                "content": "# Code\\n```javascript\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined) return false;\\n    if(obj.constructor === classFunction) return true;\\n    return checkIfInstanceOf(Object.getPrototypeOf(obj),classFunction);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined) return false;\\n    if(obj.constructor === classFunction) return true;\\n    return checkIfInstanceOf(Object.getPrototypeOf(obj),classFunction);\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3573650,
                "title": "simple-js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\n\\nconst checkIfInstanceOf = (obj, classFunction) => {\\n  \\n  if (obj===null || obj===undefined || typeof classFunction !== \\'function\\') {\\n    return false; \\n  }\\n\\n  let prototype = Object.getPrototypeOf(obj); \\n  while (prototype) {\\n      if (prototype === classFunction.prototype) {\\n     \\n      return true;\\n    }\\n    prototype = Object.getPrototypeOf(prototype); \\n  }\\n  return false; \\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\n\\nconst checkIfInstanceOf = (obj, classFunction) => {\\n  \\n  if (obj===null || obj===undefined || typeof classFunction !== \\'function\\') {\\n    return false; \\n  }\\n\\n  let prototype = Object.getPrototypeOf(obj); \\n  while (prototype) {\\n      if (prototype === classFunction.prototype) {\\n     \\n      return true;\\n    }\\n    prototype = Object.getPrototypeOf(prototype); \\n  }\\n  return false; \\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3555417,
                "title": "ts-dfs-traversal-of-the-inheritance-tree-104ms-52-8mb",
                "content": "Rather boring chore of a challenge with a few edge cases to filter out more by trial and error than by wit, and unfortunately it does not seem to be the only one: [differences between two objects](https://leetcode.com/problems/differences-between-two-objects/) ([cracked here](https://leetcode.com/problems/differences-between-two-objects/solutions/3559860/ts-dfs-like-traversal-66ms-45mb/)) also seems to follow a similar pattern of vague specs and painful trial and error\\uD83D\\uDE44.\\n\\nWe will have to `return` `false` every time that:\\n* `classFn` is not a function;\\n* `obj` is `null`;\\n* `obj` is `undefined`.\\n\\nRight after that, we can declare our variable `proto` as the prototype of `obj` and we will then loop while `proto !== null` and `proto !== classFn`, going down the inheritance tree like we would do in a normal DFS.\\n\\nFinally, we will `return` `true` if `proto` is not `null` (ie: we did not reach the bottom without finding `classFn`) and if its constructor matches `classFn`, `false` otherwise.\\n\\n# Complexity\\n- Time complexity: $$O(d)$$ (with `d` being the depth of the inheritance tree)\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```ts\\nfunction checkIfInstanceOf(obj: any, classFn: any): boolean {\\n    // edge case: obj and classFn are the same or obj is null or undefined\\n    if (typeof classFn !== \"function\" || obj === null || obj === undefined) return false;\\n    // traversing down the inheritance tree\\n    let proto = Object.getPrototypeOf(obj);\\n    while (proto && proto.constructor !== classFn) {\\n        proto = Object.getPrototypeOf(proto);\\n    }\\n    return proto !== null && proto.constructor === classFn;\\n};\\n```",
                "solutionTags": [
                    "TypeScript",
                    "Depth-First Search"
                ],
                "code": "```ts\\nfunction checkIfInstanceOf(obj: any, classFn: any): boolean {\\n    // edge case: obj and classFn are the same or obj is null or undefined\\n    if (typeof classFn !== \"function\" || obj === null || obj === undefined) return false;\\n    // traversing down the inheritance tree\\n    let proto = Object.getPrototypeOf(obj);\\n    while (proto && proto.constructor !== classFn) {\\n        proto = Object.getPrototypeOf(proto);\\n    }\\n    return proto !== null && proto.constructor === classFn;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3414745,
                "title": "easy-simple-javascript-solution",
                "content": "\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction!==\\'function\\') return false;\\n    return Object(obj) instanceof classFunction;\\n    \\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction!==\\'function\\') return false;\\n    return Object(obj) instanceof classFunction;\\n    \\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3407210,
                "title": "javascript-easy-2-line-solution",
                "content": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false\\n    return Object(obj) instanceof classFunction\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false\\n    return Object(obj) instanceof classFunction\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3406476,
                "title": "typescript-solution",
                "content": "# Approach\\nThe idea is to check object\\'s prototype chain until the required constructor will be found.\\n\\n\\n# Code\\n```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    if (obj === null || obj === undefined || !classFunction) {\\n        return false;\\n    }\\n\\n    let ctor: any = obj.constructor;\\n\\n    while (ctor) {\\n        if (ctor === classFunction) {\\n            return true;\\n        }\\n        ctor = Object.getPrototypeOf(ctor.prototype)?.constructor;\\n    }\\n\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    if (obj === null || obj === undefined || !classFunction) {\\n        return false;\\n    }\\n\\n    let ctor: any = obj.constructor;\\n\\n    while (ctor) {\\n        if (ctor === classFunction) {\\n            return true;\\n        }\\n        ctor = Object.getPrototypeOf(ctor.prototype)?.constructor;\\n    }\\n\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3407261,
                "title": "best-easy-understandable-explained-2-methods-solution",
                "content": "# using prototype chaining\\nThis solution uses a while loop to traverse the prototype chain of obj until it reaches the end of the chain, which is null. Inside the loop, it compares the constructor property of obj with the classFunction to see if they are equal using the == equality operator. If they are equal, it means that obj is an instance of classFunction, so the function returns true.\\n```\\n// In Javascript, inheritance is achieved with the prototype chain.\\n// You can get the prototype of an object with the Object.getPrototypeOf(obj) function. Alternatively, you can code obj[\\'__proto__\\'].\\n// You can compare an object\\'s __proto__ with classFunction.prototype.\\n// Traverse the entire prototype chain until you find a match.\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj != null){\\n        if(obj.constructor==classFunction)\\n            return true;\\n        obj = Object.getPrototypeOf(obj);\\n    }\\n    return false;\\n};\\n// Do upvote if you like\\n```\\n# using in-built instance of method\\nThis solution first checks if obj is null, undefined, or if classFunction is not a function using a series of if conditions. If any of these conditions are true, the function immediately returns false, indicating that obj is not an instance of classFunction.\\nIf the above conditions are not met, then the instanceof operator check if obj is an instance of classFunction. The instanceof operator tests if an object (obj in this case) is an instance of a particular constructor function (classFunction in this case) by checking the object\\'s prototype chain. If obj is an instance of classFunction, the function returns true. Otherwise, it returns false.\\n```\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\')\\n    return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n// Do upvote if you like\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n// In Javascript, inheritance is achieved with the prototype chain.\\n// You can get the prototype of an object with the Object.getPrototypeOf(obj) function. Alternatively, you can code obj[\\'__proto__\\'].\\n// You can compare an object\\'s __proto__ with classFunction.prototype.\\n// Traverse the entire prototype chain until you find a match.\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj != null){\\n        if(obj.constructor==classFunction)\\n            return true;\\n        obj = Object.getPrototypeOf(obj);\\n    }\\n    return false;\\n};\\n// Do upvote if you like\\n```\n```\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\')\\n    return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n// Do upvote if you like\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4098691,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction checkIfInstanceOf(value, classType) {\\n    if (value === null || value === undefined) {\\n        return false; // Handle null or undefined values\\n    }\\n    \\n    if (typeof classType !== \\'function\\') {\\n        return false; // classType must be a constructor function\\n    }\\n\\n    let proto = Object.getPrototypeOf(value);\\n\\n    while (proto !== null) {\\n        if (proto === classType.prototype) {\\n            return true;\\n        }\\n        proto = Object.getPrototypeOf(proto);\\n    }\\n\\n    return false;\\n}\\n\\n// Example 1\\nconst func1 = () => checkIfInstanceOf(new Date(), Date);\\nconsole.log(func1()); // true\\n\\n// Example 2\\nconst func2 = () => {\\n    class Animal {};\\n    class Dog extends Animal {};\\n    return checkIfInstanceOf(new Dog(), Animal);\\n};\\nconsole.log(func2()); // true\\n\\n// Example 3\\nconst func3 = () => checkIfInstanceOf(Date, Date);\\nconsole.log(func3()); // false\\n\\n// Example 4\\nconst func4 = () => checkIfInstanceOf(5, Number);\\nconsole.log(func4()); // true\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction checkIfInstanceOf(value, classType) {\\n    if (value === null || value === undefined) {\\n        return false; // Handle null or undefined values\\n    }\\n    \\n    if (typeof classType !== \\'function\\') {\\n        return false; // classType must be a constructor function\\n    }\\n\\n    let proto = Object.getPrototypeOf(value);\\n\\n    while (proto !== null) {\\n        if (proto === classType.prototype) {\\n            return true;\\n        }\\n        proto = Object.getPrototypeOf(proto);\\n    }\\n\\n    return false;\\n}\\n\\n// Example 1\\nconst func1 = () => checkIfInstanceOf(new Date(), Date);\\nconsole.log(func1()); // true\\n\\n// Example 2\\nconst func2 = () => {\\n    class Animal {};\\n    class Dog extends Animal {};\\n    return checkIfInstanceOf(new Dog(), Animal);\\n};\\nconsole.log(func2()); // true\\n\\n// Example 3\\nconst func3 = () => checkIfInstanceOf(Date, Date);\\nconsole.log(func3()); // false\\n\\n// Example 4\\nconst func4 = () => checkIfInstanceOf(5, Number);\\nconsole.log(func4()); // true\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4091614,
                "title": "javascript-function-for-checking-class-instance",
                "content": "# Intuition\\nI want to determine if a given value is an instance of a given class or its superclass. To do this, I need to check the prototype chain of the value to see if it matches the prototype of the class or superclass.\\n\\n# Approach\\n1. I define a function `checkIfInstanceOf` that takes two parameters: `obj` and `classFunction`.\\n2. I start by checking if `classFunction` is a valid constructor function (i.e., a class or superclass). If it\\'s not a function, I return `false` since it cannot be a valid class.\\n3. I handle cases where `obj` is null or undefined by checking for these conditions explicitly and returning `false` in such cases.\\n4. I create a variable `prototypeChain` and initialize it with the prototype of `obj` using `Object.getPrototypeOf(obj)`.\\n5. I enter a loop to iterate through the prototype chain:\\n   a. Inside the loop, I check if the current prototype (`prototypeChain`) is the same as the prototype of `classFunction` (`classFunction.prototype`). If they match, I return `true` because `obj` is an instance of the specified class or superclass.\\n   b. If the prototypes do not match, I move up the prototype chain by updating `prototypeChain` with its own prototype (`Object.getPrototypeOf(prototypeChain)`).\\n6. If I reach the end of the prototype chain without finding a match, I return `false` to indicate that `obj` is not an instance of the specified class or superclass.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\n/**\\n * @param {*} obj\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (typeof classFunction === \\'function\\') {\\n        if (obj === null || obj === undefined) {\\n            return false;\\n        }\\n        \\n        let prototypeChain = Object.getPrototypeOf(obj);\\n\\n        while (prototypeChain) {\\n            if (prototypeChain === classFunction.prototype) {\\n                return true;\\n            }\\n\\n            prototypeChain = Object.getPrototypeOf(prototypeChain);\\n        }\\n    }\\n\\n    return false;\\n};\\n\\nconsole.log(checkIfInstanceOf(new Date(), Date));\\n\\nclass Animal {}\\nclass Dog extends Animal {}\\n\\nconsole.log(checkIfInstanceOf(new Dog(), Animal));\\nconsole.log(checkIfInstanceOf(Date, Date));\\nconsole.log(checkIfInstanceOf(5, Number));\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {*} obj\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (typeof classFunction === \\'function\\') {\\n        if (obj === null || obj === undefined) {\\n            return false;\\n        }\\n        \\n        let prototypeChain = Object.getPrototypeOf(obj);\\n\\n        while (prototypeChain) {\\n            if (prototypeChain === classFunction.prototype) {\\n                return true;\\n            }\\n\\n            prototypeChain = Object.getPrototypeOf(prototypeChain);\\n        }\\n    }\\n\\n    return false;\\n};\\n\\nconsole.log(checkIfInstanceOf(new Date(), Date));\\n\\nclass Animal {}\\nclass Dog extends Animal {}\\n\\nconsole.log(checkIfInstanceOf(new Dog(), Animal));\\nconsole.log(checkIfInstanceOf(Date, Date));\\nconsole.log(checkIfInstanceOf(5, Number));\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4087836,
                "title": "one-line-solution",
                "content": "\\n\\n# Approach\\n Cheking obj is instance or not using instanceof keyword. and function is an typee of function or not and return the boolean. all fixed.\\n\\n# Code\\n```\\n/**\\n * @param {*} obj\\n * @param {*} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    return obj != null && typeof classFunction === \\'function\\' && Object(obj) instanceof classFunction;\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {*} obj\\n * @param {*} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    return obj != null && typeof classFunction === \\'function\\' && Object(obj) instanceof classFunction;\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4087661,
                "title": "my-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIn this code, the checkIfInstanceOf function iterates through the prototype chain of the given object using a while loop. It checks if the constructor property of each prototype in the chain matches the provided class constructor (classFunction). If it finds a match, it returns true. If it reaches the end of the prototype chain without finding a match, it returns false.\\n\\n\\n# Code\\n```\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  if(obj === null || classFunction === null || obj === undefined || classFunction === undefined) return false;\\n// Return false if either object or classFunction is undefined or null\\n\\n    let currentPrototype = Object.getPrototypeOf(obj);\\n\\n  while (currentPrototype !== null) {\\n    if (currentPrototype.constructor === classFunction) return true;\\n    currentPrototype = Object.getPrototypeOf(currentPrototype);\\n  }\\n  return false;\\n};\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIn this code, the checkIfInstanceOf function iterates through the prototype chain of the given object using a while loop. It checks if the constructor property of each prototype in the chain matches the provided class constructor (classFunction). If it finds a match, it returns true. If it reaches the end of the prototype chain without finding a match, it returns false.\\n\\n\\n# Code\\n```\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  if(obj === null || classFunction === null || obj === undefined || classFunction === undefined) return false;\\n// Return false if either object or classFunction is undefined or null\\n\\n    let currentPrototype = Object.getPrototypeOf(obj);\\n\\n  while (currentPrototype !== null) {\\n    if (currentPrototype.constructor === classFunction) return true;\\n    currentPrototype = Object.getPrototypeOf(currentPrototype);\\n  }\\n  return false;\\n};\\n",
                "codeTag": "Java"
            },
            {
                "id": 4072096,
                "title": "beats-96-03-of-users-with-typescript",
                "content": "# Code\\n```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    if((obj === null || obj === undefined || typeof classFunction !== \\'function\\')) return false\\n\\n    const proto = Object.getPrototypeOf(obj)\\n    \\n    return proto === classFunction.prototype || classFunction.prototype.isPrototypeOf(proto)\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    if((obj === null || obj === undefined || typeof classFunction !== \\'function\\')) return false\\n\\n    const proto = Object.getPrototypeOf(obj)\\n    \\n    return proto === classFunction.prototype || classFunction.prototype.isPrototypeOf(proto)\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4059866,
                "title": "simple-js-solution-using-if-else",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {*} obj\\n * @param {*} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(typeof classFunction !== \\'function\\' || obj=== null || obj=== undefined){\\n        return false;\\n    }else{\\n        return Object(obj) instanceof classFunction;\\n\\n    }\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {*} obj\\n * @param {*} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(typeof classFunction !== \\'function\\' || obj=== null || obj=== undefined){\\n        return false;\\n    }else{\\n        return Object(obj) instanceof classFunction;\\n\\n    }\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4040202,
                "title": "simple-solution",
                "content": "\\n\\n# Code\\n```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    if (obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false\\n        return Object(obj) instanceof classFunction;\\n}\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    if (obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false\\n        return Object(obj) instanceof classFunction;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4040173,
                "title": "my-solution-instanceof",
                "content": "\\n# Complexity\\n- Time complexity: 30min\\n\\n# Code\\n```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    if (obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false\\n    const objType = typeof obj;\\n    if(!obj && !classFunction) return false\\n    if (objType === \\'object\\') {\\n        return obj instanceof classFunction;\\n    }\\n    if(objType === \\'bigint\\'){\\n        return Object(obj) instanceof classFunction;\\n    }\\n\\n    if(typeof obj?.constructor === \\'function\\'){\\n        return new Object(obj) instanceof classFunction;\\n    }\\n    return obj.constructor === classFunction;\\n\\n}\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    if (obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false\\n    const objType = typeof obj;\\n    if(!obj && !classFunction) return false\\n    if (objType === \\'object\\') {\\n        return obj instanceof classFunction;\\n    }\\n    if(objType === \\'bigint\\'){\\n        return Object(obj) instanceof classFunction;\\n    }\\n\\n    if(typeof obj?.constructor === \\'function\\'){\\n        return new Object(obj) instanceof classFunction;\\n    }\\n    return obj.constructor === classFunction;\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4028772,
                "title": "90-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nknow the basic of prototypes and inheritance in javascript.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n      if(obj === null || classFunction === null || obj === undefined ||    classFunction === undefined || !(classFunction instanceof Function)){\\n        return false;  // classFunction must be function and both values should be not null,undefined.\\n   }\\n    if (classFunction === Object){ // just to handle primitive inheritance\\n        return true;\\n    }\\n\\n    // rest will be handled by instanceOf method\\n    if(Object(obj) instanceof classFunction){\\n        return true;\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n      if(obj === null || classFunction === null || obj === undefined ||    classFunction === undefined || !(classFunction instanceof Function)){\\n        return false;  // classFunction must be function and both values should be not null,undefined.\\n   }\\n    if (classFunction === Object){ // just to handle primitive inheritance\\n        return true;\\n    }\\n\\n    // rest will be handled by instanceOf method\\n    if(Object(obj) instanceof classFunction){\\n        return true;\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3987862,
                "title": "check-if-object-instance-of-class",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(lengthPrototypeChain)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  if (obj === undefined) {\\n    return false;\\n  }\\n  while (obj !== null && obj.constructor !== classFunction) {\\n    obj = Object.getPrototypeOf(obj);\\n  }\\n  return obj !== null;  \\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  if (obj === undefined) {\\n    return false;\\n  }\\n  while (obj !== null && obj.constructor !== classFunction) {\\n    obj = Object.getPrototypeOf(obj);\\n  }\\n  return obj !== null;  \\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3963458,
                "title": "object-getprototypeof-obj",
                "content": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n\\n    while (obj != null) {\\n\\n        if (obj.constructor === classFunction) {\\n            return true\\n        }\\n\\n        obj = Object.getPrototypeOf(obj)\\n\\n    }\\n\\n    return false\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n\\n    while (obj != null) {\\n\\n        if (obj.constructor === classFunction) {\\n            return true\\n        }\\n\\n        obj = Object.getPrototypeOf(obj)\\n\\n    }\\n\\n    return false\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3937196,
                "title": "readable-solution-with-study-references",
                "content": "# Intuition\\nThis solution is *not* the most performant but **most readable**. The goal is to better explain the shorter solutions.\\n\\nFurther reading for the functions used is included in the code comments.\\n\\n# Approach\\n- Return the empty values early\\n- Check if the prototype matches\\n- Check if the instance matches\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\n\\n// https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof\\n\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj === null | obj === undefined || typeof classFunction !== \\'function\\') return false;\\n\\n    const objPrototype = Object.getPrototypeOf(obj);\\n    const doesMatchPrototype =\\n        objPrototype === classFunction?.prototype;\\n    const doesMatchInstance =\\n        objPrototype instanceof classFunction;\\n\\n    return doesMatchPrototype || doesMatchInstance;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\n\\n// https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof\\n\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj === null | obj === undefined || typeof classFunction !== \\'function\\') return false;\\n\\n    const objPrototype = Object.getPrototypeOf(obj);\\n    const doesMatchPrototype =\\n        objPrototype === classFunction?.prototype;\\n    const doesMatchInstance =\\n        objPrototype instanceof classFunction;\\n\\n    return doesMatchPrototype || doesMatchInstance;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3916901,
                "title": "recursive-approach",
                "content": "# Approach\\n\\nWe check first if the object `obj` is `null`; if it is, we can return `false` because `null` is not an instance of any class.\\n\\nNext, we checks if the constructor of the object `obj` is the same as the `classFunction`. If they are the same, it means that `obj` is an instance of `classFunction`, so the function returns `true`.\\n\\nIf neither of the above conditions are met, the function calls itself recursively with the prototype of `obj` as the new object to check. This is done using `Object.getPrototypeOf(obj)`, which returns the prototype of `obj` or `null`.\\n\\nThe function will continue to call itself recursively with the prototype of the current object until it either finds a matching constructor (and returns `true`) or reaches the end of the prototype chain (and returns `false`)\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\nThe length of the prototype chain can be considered as \\'n\\'. In the worst case scenario, the function will be called \\'n\\' times.\\n\\n- Space complexity: $$O(n)$$ \\nThe maximum depth of the call stack will be equal to the length of the prototype chain, which is \\'n\\'.\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj == null) {\\n        return false;\\n    }\\n    if (obj.constructor === classFunction) {\\n        return true;\\n    }\\n    return checkIfInstanceOf(Object.getPrototypeOf(obj), classFunction);\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj == null) {\\n        return false;\\n    }\\n    if (obj.constructor === classFunction) {\\n        return true;\\n    }\\n    return checkIfInstanceOf(Object.getPrototypeOf(obj), classFunction);\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3897292,
                "title": "object-instance-checking-using-prototype-chain-traversal",
                "content": "# Intuition\\nWhen faced with the task of checking whether an object is an instance of a specific class, the initial consideration was to traverse the object\\'s prototype chain and compare it with the prototype of the target class.\\n\\n# Approach\\nThe approach involves checking for invalid inputs initially, such as null, undefined, or a non-function class. If any of these conditions are met, the function immediately returns false. Then, the function iterates through the prototype chain of the object, comparing each prototype with the prototype of the target class. If a match is found, the function returns true indicating that the object is an instance of the class.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of this function depends on the length of the prototype chain. In the worst case, it can be proportional to the length of the chain. Let\\'s denote the length of the prototype chain as \"p\". Therefore, the time complexity can be approximated as O(p).\\n\\n- Space complexity:\\nThe space complexity is constant, as the function uses a fixed amount of memory for local variables, regardless of the input. Therefore, the space complexity is O(1).\\n\\n# Code\\n```\\nconst checkIfInstanceOf = (obj, classFunction) => {\\n  if (obj === null || obj === undefined || typeof classFunction !== \\'function\\') {\\n    return false; \\n  }\\n  \\n  let prototype = Object.getPrototypeOf(obj); \\n  while (prototype) {\\n    if (prototype === classFunction.prototype) {\\n      return true;\\n    }\\n    prototype = Object.getPrototypeOf(prototype); \\n  }\\n  \\n  return false; \\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst checkIfInstanceOf = (obj, classFunction) => {\\n  if (obj === null || obj === undefined || typeof classFunction !== \\'function\\') {\\n    return false; \\n  }\\n  \\n  let prototype = Object.getPrototypeOf(obj); \\n  while (prototype) {\\n    if (prototype === classFunction.prototype) {\\n      return true;\\n    }\\n    prototype = Object.getPrototypeOf(prototype); \\n  }\\n  \\n  return false; \\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3873501,
                "title": "check-instance-of-in-javascript",
                "content": "# Intuition\\nIn JavaScript there is a specific keyword to check if object is instance of something, but it return false on primitive type variables, because they are not objects.\\nIn JS the number 5 is a primitive value, but as the problem description said we could access its methods, because there are Object wrappers for all the primitive types except null and undefined.\\nSo when you try to access 5.toFixed() method, JS grab your 5 primitive value, create an Object with the wrapper class automatically: new Number(5), then call Number class toFixed method on it, then destroy instance. So you could also call (5).constuctor and it would be equal to the Number class constructor also thier class names will be the same.\\n\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(typeof obj !== \\'undefined\\' && obj !== null && typeof classFunction == \"function\")\\n    {\\n        let isInstanceOfClass = false;\\n        if(obj instanceof classFunction) isInstanceOfClass = true;\\n        else if((obj).constructor.name == classFunction.name) isInstanceOfClass = true;\\n        else if((obj).constructor.prototype instanceof classFunction) isInstanceOfClass = true;\\n        return isInstanceOfClass;\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(typeof obj !== \\'undefined\\' && obj !== null && typeof classFunction == \"function\")\\n    {\\n        let isInstanceOfClass = false;\\n        if(obj instanceof classFunction) isInstanceOfClass = true;\\n        else if((obj).constructor.name == classFunction.name) isInstanceOfClass = true;\\n        else if((obj).constructor.prototype instanceof classFunction) isInstanceOfClass = true;\\n        return isInstanceOfClass;\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3855104,
                "title": "javascript-easiest-solution-traversing-prototype-chain",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTraverse the prototype chain until find a match. \\nIf not found return false.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  while (obj != null) {\\n    if (obj.constructor === classFunction) return true;\\n    obj = Object.getPrototypeOf(obj);\\n  }\\n  return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  while (obj != null) {\\n    if (obj.constructor === classFunction) return true;\\n    obj = Object.getPrototypeOf(obj);\\n  }\\n  return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3844198,
                "title": "fastest-easy-with-explanation",
                "content": "1. **Input Validation**: The function starts by checking if the **`obj`** is not null or undefined and if the **`classFunction`** is indeed a function. If either of these conditions is false, the function returns **`false`** immediately.\\n2. **Prototype Chain Traversal**: The function uses a **`while`** loop to traverse the prototype chain of the **`obj`**. It starts with the prototype of the **`obj`** and then moves up the chain until it reaches the root object (i.e., when the prototype is **`null`**).\\n3. **Comparison**: During each iteration, the current prototype (**`currPotentialPrototype`**) is compared with the prototype of the **`classFunction`** (**`classFunction.prototype`**). If they match, it means that the object is an instance of the given class, and the function returns **`true`**.\\n4. **Fallback**: If the loop completes without finding a match (i.e., when **`currPotentialPrototype`** becomes **`null`**), the function returns **`false`**, indicating that the object is not an instance of the specified class.\\n\\nHere\\'s the code again with added comments for better understanding:\\n\\n```jsx\\njavascriptCopy code\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  // Input validation: Check if obj is not null or undefined and if classFunction is a function.\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n    return false;\\n\\n  // Start with the prototype of the object.\\n  let currPotentialPrototype = Object.getPrototypeOf(obj);\\n\\n  // Traverse the prototype chain until reaching the root object (null).\\n  while (currPotentialPrototype !== null) {\\n    // Check if the current prototype matches the prototype of the specified class function.\\n    if (currPotentialPrototype === classFunction.prototype)\\n      return true; // Object is an instance of the class.\\n\\n    // Move up the prototype chain.\\n    currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n  }\\n\\n  // If the loop completes without finding a match, the object is not an instance of the specified class.\\n  return false;\\n};\\n\\n/**\\n * Example usage:\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n\\n```\\n\\nThis function can be helpful for type-checking or verifying whether an object is an instance of a particular class in JavaScript. Keep in mind that JavaScript has other built-in ways to perform similar checks, such as the **`instanceof`** operator or the **`Object.prototype.isPrototypeOf`** method.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```jsx\\njavascriptCopy code\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  // Input validation: Check if obj is not null or undefined and if classFunction is a function.\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n    return false;\\n\\n  // Start with the prototype of the object.\\n  let currPotentialPrototype = Object.getPrototypeOf(obj);\\n\\n  // Traverse the prototype chain until reaching the root object (null).\\n  while (currPotentialPrototype !== null) {\\n    // Check if the current prototype matches the prototype of the specified class function.\\n    if (currPotentialPrototype === classFunction.prototype)\\n      return true; // Object is an instance of the class.\\n\\n    // Move up the prototype chain.\\n    currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n  }\\n\\n  // If the loop completes without finding a match, the object is not an instance of the specified class.\\n  return false;\\n};\\n\\n/**\\n * Example usage:\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3842155,
                "title": "javascript-tricks-to-check-the-instance-of-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj!=null)\\n    {\\n        if(obj.constructor === classFunction)\\n        {\\n            return true;\\n        }\\n\\n        obj = Object.getPrototypeOf(obj);\\n\\n    }\\n\\n    return false;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj!=null)\\n    {\\n        if(obj.constructor === classFunction)\\n        {\\n            return true;\\n        }\\n\\n        obj = Object.getPrototypeOf(obj);\\n\\n    }\\n\\n    return false;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3831194,
                "title": "finally-i-did-it",
                "content": "![this_is_fine.jpg](https://assets.leetcode.com/users/images/a6f4cb4c-f86b-485e-ae61-f7aee3322d6c_1690590994.1653993.jpeg)\\n\\nTook me only 10 attempts to find the solution but hey, sleep is for the weak.\\n<b>*cries in the background*</b>\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj == null || classFunction == \\'functon\\' || classFunction == null)return false\\n    // if(obj instanceof classFunction) return true\\n    proto = Object.getPrototypeOf(obj)\\n     while(proto){\\n      if(proto === classFunction.prototype){\\n        return true\\n      }\\n      proto = Object.getPrototypeOf(proto)\\n    }\\n     \\n    return false\\n    \\n      \\n  \\n     \\n    \\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj == null || classFunction == \\'functon\\' || classFunction == null)return false\\n    // if(obj instanceof classFunction) return true\\n    proto = Object.getPrototypeOf(obj)\\n     while(proto){\\n      if(proto === classFunction.prototype){\\n        return true\\n      }\\n      proto = Object.getPrototypeOf(proto)\\n    }\\n     \\n    return false\\n    \\n      \\n  \\n     \\n    \\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3829595,
                "title": "comparison-between-class-and-object-s-prototype",
                "content": "# Complexity\\n- Time complexity:\\n\\n    O(n), n - depth of object\\'s prototype chain\\n\\n- Space complexity:\\n\\n    O(1)\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\n \\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || typeof obj === \\'undefined\\' || classFunction === null) {\\n        return false;\\n    }\\n\\n    let proto = Object.getPrototypeOf(obj);\\n    \\n    while (proto) {\\n        if(proto.constructor === classFunction)\\n            return true;\\n        \\n        proto = Object.getPrototypeOf(proto);\\n    }\\n    return false;\\n};\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\n \\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || typeof obj === \\'undefined\\' || classFunction === null) {\\n        return false;\\n    }\\n\\n    let proto = Object.getPrototypeOf(obj);\\n    \\n    while (proto) {\\n        if(proto.constructor === classFunction)\\n            return true;\\n        \\n        proto = Object.getPrototypeOf(proto);\\n    }\\n    return false;\\n};\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3820246,
                "title": "javascript-o-1-solution-one-liner",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. Check if object is not null or undefined using \\'&&\\' chaining which will return false if that\\'s the case. This will filter out only these 2 conditions, leaving other things like boolean false and NaN (number). I tried using !!obj and later realised their are many things that exited early as false out of the && chain. That\\'s why we need to be specific.\\n2. Next, chain the check on classFunction, it should be a function and nothing else.\\n3. Lastly, add the \\'instanceof\\' comparision in the chain.\\n4. The \\'&&\\' chain is now complete and we did it in 1 line of code & with O(1) complexity\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nconst checkIfInstanceOf = (obj, classFunction) =>  obj !== null && obj !== undefined && typeof classFunction === \\'function\\' && Object(obj) instanceof classFunction\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nconst checkIfInstanceOf = (obj, classFunction) =>  obj !== null && obj !== undefined && typeof classFunction === \\'function\\' && Object(obj) instanceof classFunction\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3813451,
                "title": "check-if-object-instance-of-class",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined){\\n        return false;\\n    }\\n\\n    let prototype = Object.getPrototypeOf(obj);\\n\\n    while(prototype !== null){\\n        if(prototype.constructor === classFunction){\\n            return true;\\n        }\\n\\n        prototype = Object.getPrototypeOf(prototype)\\n    }\\n    return false\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined){\\n        return false;\\n    }\\n\\n    let prototype = Object.getPrototypeOf(obj);\\n\\n    while(prototype !== null){\\n        if(prototype.constructor === classFunction){\\n            return true;\\n        }\\n\\n        prototype = Object.getPrototypeOf(prototype)\\n    }\\n    return false\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3789920,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n     if(obj ===undefined || obj===null || classFunction === null || typeof classFunction !==\"function\"  ){\\n         return false;\\n     }\\n     let currentType =  Object.getPrototypeOf(obj);\\n     while(currentType !==null){\\n        if(currentType === classFunction.prototype ){\\n            return true\\n        }\\n        currentType =  Object.getPrototypeOf(currentType)\\n     }\\n     return false\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n     if(obj ===undefined || obj===null || classFunction === null || typeof classFunction !==\"function\"  ){\\n         return false;\\n     }\\n     let currentType =  Object.getPrototypeOf(obj);\\n     while(currentType !==null){\\n        if(currentType === classFunction.prototype ){\\n            return true\\n        }\\n        currentType =  Object.getPrototypeOf(currentType)\\n     }\\n     return false\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3762206,
                "title": "typescript-follow-the-hints",
                "content": "# Code\\n```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    if(obj===null || obj===undefined || typeof classFunction!==\"function\") return false;\\n\\n    let proto = Object.getPrototypeOf(obj)\\n    while(proto !== null) {\\n        if(proto === classFunction.prototype) return true\\n        proto = Object.getPrototypeOf(proto)\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    if(obj===null || obj===undefined || typeof classFunction!==\"function\") return false;\\n\\n    let proto = Object.getPrototypeOf(obj)\\n    while(proto !== null) {\\n        if(proto === classFunction.prototype) return true\\n        proto = Object.getPrototypeOf(proto)\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3760355,
                "title": "check-if-object-instance-of-class",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n   \\n    let proto = obj?.__proto__\\n    while(proto){\\n        if(proto === classFunction?.prototype){\\n            return true\\n        }\\n        proto = proto?.__proto__\\n    }\\n    return false\\n};\\n\\n\\n checkIfInstanceOf(new Date(), Date); // true\\n \\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n   \\n    let proto = obj?.__proto__\\n    while(proto){\\n        if(proto === classFunction?.prototype){\\n            return true\\n        }\\n        proto = proto?.__proto__\\n    }\\n    return false\\n};\\n\\n\\n checkIfInstanceOf(new Date(), Date); // true\\n \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3745809,
                "title": "does-anyone-know-about-types-when-including-any-inputs",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nvar checkIfInstanceOf = function<T, K>(obj: T, classFunction: () => K):boolean {\\n    if (classFunction && typeof classFunction === \\'function\\' ) {\\n        return checkPrototypeChain(obj, classFunction)\\n    }\\n\\n    return false\\n};\\n\\nfunction checkPrototypeChain<T, K>(obj: T, classFn: () => K): boolean {\\n    let proto;\\n\\n    if (obj?.constructor || Number.isNaN(obj)) proto = Object.getPrototypeOf(obj)\\n    \\n    while (proto) {\\n        console.log(\\'proto: \\', proto.constructor.name)\\n        if (proto.constructor === classFn || proto instanceof classFn) return true\\n        proto = Object.getPrototypeOf(proto)\\n    }\\n\\n    return false\\n}\\n\\n/**\\n * \\n PROBLEM:\\n    Determine whether an object is an instance of the class that is passed\\n    via the second arg passed to the function.\\n EXAMPLES:\\n    Input: func = () => checkIfInstanceOf(new Date(), Date)\\n    Output: true\\n\\n    Input: func = () => { class Animal {}; class Dog extends Animal {};\\n    return checkIfInstanceOf(new Dog(), Animal); }\\n    Output: true    \\n\\n    Input: func = () => checkIfInstanceOf(Date, Date)\\n    Output: false\\n\\n    Input: func = () => checkIfInstanceOf(5, Number)\\n    Output: true\\n\\n    Input: func = () => checkIfInstanceOf(0, Object)\\n    Output: true\\n\\n    Input: func = () => checkIfInstanceOf(NaN, Object)\\n    Output: true\\n DATA: \\n    params: object, prototype fn\\n    return value: boolean\\n ALGORITHM: \\n    walk through the object prototype chain and get if its chain includes\\n    the constructor fn passed in as the second arg.\\n    Start - \\n    if classFn and classFn == \\'function\\'\\n        -subtask\\n        \\n        let prototype\\n\\n        if (obj.constructor || isNaN(obj)) proto = obj.__proto__\\n        while (proto)\\n            if (proto.constructor == classFn OR proto instanceof classFn) return true\\n            proto = proto.__proto__\\n    \\n    return false\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nvar checkIfInstanceOf = function<T, K>(obj: T, classFunction: () => K):boolean {\\n    if (classFunction && typeof classFunction === \\'function\\' ) {\\n        return checkPrototypeChain(obj, classFunction)\\n    }\\n\\n    return false\\n};\\n\\nfunction checkPrototypeChain<T, K>(obj: T, classFn: () => K): boolean {\\n    let proto;\\n\\n    if (obj?.constructor || Number.isNaN(obj)) proto = Object.getPrototypeOf(obj)\\n    \\n    while (proto) {\\n        console.log(\\'proto: \\', proto.constructor.name)\\n        if (proto.constructor === classFn || proto instanceof classFn) return true\\n        proto = Object.getPrototypeOf(proto)\\n    }\\n\\n    return false\\n}\\n\\n/**\\n * \\n PROBLEM:\\n    Determine whether an object is an instance of the class that is passed\\n    via the second arg passed to the function.\\n EXAMPLES:\\n    Input: func = () => checkIfInstanceOf(new Date(), Date)\\n    Output: true\\n\\n    Input: func = () => { class Animal {}; class Dog extends Animal {};\\n    return checkIfInstanceOf(new Dog(), Animal); }\\n    Output: true    \\n\\n    Input: func = () => checkIfInstanceOf(Date, Date)\\n    Output: false\\n\\n    Input: func = () => checkIfInstanceOf(5, Number)\\n    Output: true\\n\\n    Input: func = () => checkIfInstanceOf(0, Object)\\n    Output: true\\n\\n    Input: func = () => checkIfInstanceOf(NaN, Object)\\n    Output: true\\n DATA: \\n    params: object, prototype fn\\n    return value: boolean\\n ALGORITHM: \\n    walk through the object prototype chain and get if its chain includes\\n    the constructor fn passed in as the second arg.\\n    Start - \\n    if classFn and classFn == \\'function\\'\\n        -subtask\\n        \\n        let prototype\\n\\n        if (obj.constructor || isNaN(obj)) proto = obj.__proto__\\n        while (proto)\\n            if (proto.constructor == classFn OR proto instanceof classFn) return true\\n            proto = proto.__proto__\\n    \\n    return false\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3732563,
                "title": "easy-solution-iterating-over-the-prototype-tree",
                "content": "This approach uses a simple while loop to iterate over the prototype tree and then checks if the object is a instance of the classFunction by comparing with its constructor field.\\n\\nThis solution should be O(n) where n describes the amount of recursion in the prototype tree.\\n\\n# Code\\n```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    while(obj !== null && obj !== undefined) {\\n        if(obj.constructor === classFunction) return true;\\n        obj = Object.getPrototypeOf(obj);\\n    }\\n    return false;\\n}\\n\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    while(obj !== null && obj !== undefined) {\\n        if(obj.constructor === classFunction) return true;\\n        obj = Object.getPrototypeOf(obj);\\n    }\\n    return false;\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3732562,
                "title": "easy-solution-iterating-over-the-prototype-tree",
                "content": "This approach uses a simple while loop to iterate over the prototype tree and then checks if the object is a instance of the classFunction by comparing with its constructor field.\\n\\nThis solution should be O(n) where n describes the amount of recursion in the prototype tree.\\n\\n# Code\\n```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    while(obj !== null && obj !== undefined) {\\n        if(obj.constructor === classFunction) return true;\\n        obj = Object.getPrototypeOf(obj);\\n    }\\n    return false;\\n}\\n\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    while(obj !== null && obj !== undefined) {\\n        if(obj.constructor === classFunction) return true;\\n        obj = Object.getPrototypeOf(obj);\\n    }\\n    return false;\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3694973,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    // Check if obj or classFunction is null\\n    if (obj === null || classFunction === null) {\\n        return false;\\n    }\\n\\n    // Check if both obj and classFunction are defined\\n    if (typeof obj === \\'undefined\\' || typeof classFunction === \\'undefined\\') {\\n        return false;\\n    }\\n\\n    // Handle primitive values and instances of built-in types\\n    if ((typeof obj === \\'number\\' && (classFunction === Number || classFunction === Object)) ||\\n        (typeof obj === \\'string\\' && (classFunction === String || classFunction === Object)) ||\\n        (typeof obj === \\'boolean\\' && (classFunction === Boolean || classFunction === Object)) ||\\n        (typeof obj === \\'bigint\\' && (classFunction === BigInt || classFunction === Object)) ||\\n        (typeof obj === \\'symbol\\' && (classFunction === Symbol || classFunction === Object)) ||\\n        (obj.constructor === classFunction)) {\\n        return true;\\n    }\\n  \\n    // Additional check for NaN as an instance of Object\\n    if (Number.isNaN(obj) && classFunction === Object) {\\n        return true;\\n    }\\n\\n    // Check if obj is an instance of classFunction using instanceof operator\\n    // Ensure classFunction is a function before using instanceof\\n    return typeof classFunction === \\'function\\' && obj instanceof classFunction;\\n};\\n\\n\\n\\n\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    // Check if obj or classFunction is null\\n    if (obj === null || classFunction === null) {\\n        return false;\\n    }\\n\\n    // Check if both obj and classFunction are defined\\n    if (typeof obj === \\'undefined\\' || typeof classFunction === \\'undefined\\') {\\n        return false;\\n    }\\n\\n    // Handle primitive values and instances of built-in types\\n    if ((typeof obj === \\'number\\' && (classFunction === Number || classFunction === Object)) ||\\n        (typeof obj === \\'string\\' && (classFunction === String || classFunction === Object)) ||\\n        (typeof obj === \\'boolean\\' && (classFunction === Boolean || classFunction === Object)) ||\\n        (typeof obj === \\'bigint\\' && (classFunction === BigInt || classFunction === Object)) ||\\n        (typeof obj === \\'symbol\\' && (classFunction === Symbol || classFunction === Object)) ||\\n        (obj.constructor === classFunction)) {\\n        return true;\\n    }\\n  \\n    // Additional check for NaN as an instance of Object\\n    if (Number.isNaN(obj) && classFunction === Object) {\\n        return true;\\n    }\\n\\n    // Check if obj is an instance of classFunction using instanceof operator\\n    // Ensure classFunction is a function before using instanceof\\n    return typeof classFunction === \\'function\\' && obj instanceof classFunction;\\n};\\n\\n\\n\\n\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3658465,
                "title": "js-prototype-tree-walker",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nI thought this would be easier than it was, given that JavaScript has the `instanceof` keyword! Boy was that wrong :)\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- I started out by feeling out the equality expected in the test cases (which ended up being *semantic* equality), and tried to use `instanceof` until the very end.\\n\\n- There ended up being so many edge cases to `instanceof` that I scrapped it and wrote a tree walker. That ended up feeling like the *intended* solution so it worked out.\\n\\n# After Thoughts\\n- For simple comparisons where there are no literals involved - such as a React component `useEffect` checking if an elmenent is `instanceof HtmlInputElement` you\\'re good to go. But for a catch-all function this is almost too broad for its own good.\\n- Checking if `5n` is and instance of `Object` is not really all that helpful and you would be way better of with one-off checks like `isBigInt` or `isArray` like I have made for applications in the past.\\n- Granted, you could always add a `<T, O>(): T is O => {}` gate and this might be more useful if you would otherwise have tons of util functions for instance checking :)\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$, where $$n$$ is the potential comparison depth of the prototype chain of `obj`. Deep inheritance will take longer than shallow!\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$, constant space, as it does not utilize any data structures that grow with the input size\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n  // Null and Undefined are problematic, just return false\\n  if (obj === null || classFunction === null) return false;\\n  if (obj === undefined || classFunction === undefined) return false;\\n\\n  // This is far more reliable than instanceof if you\\'re looking for deep prototype equality\\n  let objProto = Object.getPrototypeOf(obj);\\n  while (objProto !== null) {\\n    // Note, this can - and will! - return here if it\\'s an easy comparison\\n    if (objProto == classFunction.prototype) {\\n      return true;\\n    } else {\\n      objProto = Object.getPrototypeOf(objProto);\\n    }\\n  }\\n\\n  // if you get here, return false\\n  return false;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Tree"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n  // Null and Undefined are problematic, just return false\\n  if (obj === null || classFunction === null) return false;\\n  if (obj === undefined || classFunction === undefined) return false;\\n\\n  // This is far more reliable than instanceof if you\\'re looking for deep prototype equality\\n  let objProto = Object.getPrototypeOf(obj);\\n  while (objProto !== null) {\\n    // Note, this can - and will! - return here if it\\'s an easy comparison\\n    if (objProto == classFunction.prototype) {\\n      return true;\\n    } else {\\n      objProto = Object.getPrototypeOf(objProto);\\n    }\\n  }\\n\\n  // if you get here, return false\\n  return false;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3656616,
                "title": "helpful-information",
                "content": "A naive approach to this question would be to do ```return obj instanceof classFunction```\\n\\nTo understand why just calling instanceof fails, we need to understand what the question is actually asking.\\n\\nLet\\'s say we have some objects like this:\\n```\\nfunction Parent() {}\\n\\nfunction Child() {}\\nChild.prototype = Object.create(Parent.prototype);\\nChild.prototype.constructor = Child;\\n\\nfunction Grandchild() {}\\nGrandchild.prototype = Object.create(Child.prototype);\\nGrandchild.prototype.constructor = Grandchild;\\n\\nlet child = new Child();\\nlet grandchild = new Grandchild();\\n```\\n\\nIn this case, Child is a... child... of Parent. And Grandchild is a child of Child. As a result, Grandchild contains all the methods of Parent.\\n\\nThe questions defines an \"instance\" of a class as any object that contains that class\\'s methods.\\nIf we were to do ```instanceof child```, we would just get back \"Child\". But as the question is written, Child, and Grandchild, would both be instances of Parent, as both contain Parent\\'s methods.\\n\\nEffectively, the question is saying that we should return true if obj is an instance or descendent of classFunction, **no matter how far up the chain from obj classFunction may be**.\\n\\nThis means that, from our initial Parent/Child/Grandchild code, if we do:\\n```let child = new Child();\\nlet grandchild = new Grandchild();\\n\\nconsole.log(checkIfInstanceOf(grandchild, Child)); \\nconsole.log(checkIfInstanceOf(grandchild, Parent));  \\nconsole.log(checkIfInstanceOf(child, Parent)); \\n```\\nAll of those console.logs should return \"true\".\\n\\nWorking code (TS):\\n```function checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    if (obj === null || obj == undefined || typeof classFunction !== \"function\") return false;\\n    let potentialPrototype = Object.getPrototypeOf(obj);\\n\\n    while(potentialPrototype !== null) {\\n        if (potentialPrototype === (classFunction as Function).prototype) return true;\\n\\n        potentialPrototype = Object.getPrototypeOf(potentialPrototype);\\n    }\\n\\n    return false;\\n\\n};\\n```\\n\\n",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```return obj instanceof classFunction```\n```\\nfunction Parent() {}\\n\\nfunction Child() {}\\nChild.prototype = Object.create(Parent.prototype);\\nChild.prototype.constructor = Child;\\n\\nfunction Grandchild() {}\\nGrandchild.prototype = Object.create(Child.prototype);\\nGrandchild.prototype.constructor = Grandchild;\\n\\nlet child = new Child();\\nlet grandchild = new Grandchild();\\n```\n```instanceof child```\n```let child = new Child();\\nlet grandchild = new Grandchild();\\n\\nconsole.log(checkIfInstanceOf(grandchild, Child)); \\nconsole.log(checkIfInstanceOf(grandchild, Parent));  \\nconsole.log(checkIfInstanceOf(child, Parent)); \\n```\n```function checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    if (obj === null || obj == undefined || typeof classFunction !== \"function\") return false;\\n    let potentialPrototype = Object.getPrototypeOf(obj);\\n\\n    while(potentialPrototype !== null) {\\n        if (potentialPrototype === (classFunction as Function).prototype) return true;\\n\\n        potentialPrototype = Object.getPrototypeOf(potentialPrototype);\\n    }\\n\\n    return false;\\n\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3650116,
                "title": "it-works-but-in-a-strange-way",
                "content": "# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj === null || obj === undefined) {\\n        return false;\\n    }\\n\\n    if (classFunction) {\\n        try {\\n            // if the classFunction is Object\\n            if (classFunction?.name === \\'Object\\') {\\n                return true;\\n            }\\n            \\n            // if obj is object, then we can utilize instanceOf\\n            if (typeof obj === \"object\") {\\n                return obj instanceof classFunction;\\n            } else {\\n                // if obj is a \\'primitive value\\'\\n                return typeof obj === classFunction.name.toLowerCase();\\n            }\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    return false;\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj === null || obj === undefined) {\\n        return false;\\n    }\\n\\n    if (classFunction) {\\n        try {\\n            // if the classFunction is Object\\n            if (classFunction?.name === \\'Object\\') {\\n                return true;\\n            }\\n            \\n            // if obj is object, then we can utilize instanceOf\\n            if (typeof obj === \"object\") {\\n                return obj instanceof classFunction;\\n            } else {\\n                // if obj is a \\'primitive value\\'\\n                return typeof obj === classFunction.name.toLowerCase();\\n            }\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    return false;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3616653,
                "title": "loop-while",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj === null || obj === undefined || !classFunction) {\\n        return false;\\n    }\\n\\n    let kq = Object.getPrototypeOf(obj) === classFunction.prototype;\\n    let currentClass = obj.__proto__;\\n\\n    while (!kq  && currentClass && Object.getPrototypeOf(currentClass)) {\\n        if (Object.getPrototypeOf(currentClass) === classFunction.prototype) {\\n            kq = true;\\n        } else {\\n            currentClass = currentClass.__proto__;\\n        }\\n    }\\n\\n    return kq;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj === null || obj === undefined || !classFunction) {\\n        return false;\\n    }\\n\\n    let kq = Object.getPrototypeOf(obj) === classFunction.prototype;\\n    let currentClass = obj.__proto__;\\n\\n    while (!kq  && currentClass && Object.getPrototypeOf(currentClass)) {\\n        if (Object.getPrototypeOf(currentClass) === classFunction.prototype) {\\n            kq = true;\\n        } else {\\n            currentClass = currentClass.__proto__;\\n        }\\n    }\\n\\n    return kq;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3613008,
                "title": "simplified",
                "content": "Simplifed \\u2705\\u2705\\n```\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    try{\\n        const valConst=obj.constructor\\n        const classConst=classFunction.prototype.constructor\\n        return valConst==classConst || valConst.prototype instanceof classConst\\n    }catch(e){\\n       return false\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    try{\\n        const valConst=obj.constructor\\n        const classConst=classFunction.prototype.constructor\\n        return valConst==classConst || valConst.prototype instanceof classConst\\n    }catch(e){\\n       return false\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3598351,
                "title": "mdn-links-included-c-instanceof-function-object-o-object-create-null-instanceof-c",
                "content": "Given an [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) `o` and a [constructor](https://developer.mozilla.org/en-US/docs/Glossary/Constructor) `c`, use [instanceof](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) to check if `c` is a valid function (constructor) and that `Object(o)` has `c` anywhere in its [prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain). If `o` is `null` or `undefined` based on the [nullish-coalescing operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing), then we use a [null-prototype object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) in its place.\\n\\n```typescript\\nconst checkIfInstanceOf = (o: any, c: any): boolean => c instanceof Function && Object(o ?? Object.create(null)) instanceof c\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```typescript\\nconst checkIfInstanceOf = (o: any, c: any): boolean => c instanceof Function && Object(o ?? Object.create(null)) instanceof c\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3594420,
                "title": "prototype-chain-day-25",
                "content": "\\n\\n# Approach\\nWe will Traverse the entire prototype chain until we find a match or else return False.\\n\\n\\n# Code\\n```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === undefined){\\n        return false\\n    }\\n    while(obj !== null){\\n        const expectedPrototype = Object.getPrototypeOf(obj);\\n        if(expectedPrototype === classFunction?.prototype){\\n            return true;\\n        }\\n        obj = expectedPrototype;\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === undefined){\\n        return false\\n    }\\n    while(obj !== null){\\n        const expectedPrototype = Object.getPrototypeOf(obj);\\n        if(expectedPrototype === classFunction?.prototype){\\n            return true;\\n        }\\n        obj = expectedPrototype;\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3594190,
                "title": "checkifinstanceof-solution-using-prototype-chaining",
                "content": "# Intuition\\nJs implements inheritance using prototype chaining. As question specifies that the class can also be an extended class it is quite visible that we need to search the entire protype chain\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nwhen an object (obj) is instantiated using a constructor function/class (classFunction). the prototype.constructor value of the object(obj) is set to constructor function (classFunction).\\n\\n**Object.getPrototypeOf(obj)** returns prototype of obj.\\n\\n**protype.isPrototypeOf(obj)** checks if this prototype is present in the protoype chain at any level.\\n\\nAll the obj in their prototype chain points to Object at the end and hence all the obj is bydefault the instance of Object.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: o(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: o(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(typeof classFunction !== \\'function\\' || obj === undefined || obj === null) return false;\\n    return Object.getPrototypeOf(obj).constructor === classFunction || classFunction === Object || classFunction.prototype.isPrototypeOf(obj)\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(typeof classFunction !== \\'function\\' || obj === undefined || obj === null) return false;\\n    return Object.getPrototypeOf(obj).constructor === classFunction || classFunction === Object || classFunction.prototype.isPrototypeOf(obj)\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3590553,
                "title": "shortest-js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj==null || typeof classFunction !==\\'function\\') return false;\\n    return Object(obj) instanceof classFunction\\n    \\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj==null || typeof classFunction !==\\'function\\') return false;\\n    return Object(obj) instanceof classFunction\\n    \\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3590043,
                "title": "simple-recursive-approach-prototype-chain",
                "content": "# What are Prototypes?\\n\\n`Prototypes` are objects themselves and can be thought of as a reference or link to the shared properties and methods that objects can access.\\n\\nChanges made to the prototype can affect all objects that inherit from it.\\n\\nAll Javascript Objects inherit properties and methods from a `prototype`.\\n\\n# Approach\\n**Recursion:**\\nFirstly, check if prototype of the input object `obj` matches with that of `classFn`.\\nTo check if `obj` is an instance of superclass of `classfn`, call your function recursively upon prototype of the obj to traverse the prototype chain.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n  Where *n* is the no.of objects to be traversed.\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFn\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFn) {\\n    \\n    if(obj === null || obj === undefined || typeof classFn !== \\'function\\') return false\\n    if(Object.getPrototypeOf(obj) === classFn.prototype) return true\\n\\n    return checkIfInstanceOf(Object.getPrototypeOf(obj), classFn)\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFn\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFn) {\\n    \\n    if(obj === null || obj === undefined || typeof classFn !== \\'function\\') return false\\n    if(Object.getPrototypeOf(obj) === classFn.prototype) return true\\n\\n    return checkIfInstanceOf(Object.getPrototypeOf(obj), classFn)\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3590040,
                "title": "easy-js-solution",
                "content": "# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\"){\\n    return false;\\n  }\\n  let currPotentialPrototype = Object.getPrototypeOf(obj);\\n  while (currPotentialPrototype !== null) {\\n    if (currPotentialPrototype === classFunction.prototype){\\n       return true;\\n    }\\n    currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n  }\\n  return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\"){\\n    return false;\\n  }\\n  let currPotentialPrototype = Object.getPrototypeOf(obj);\\n  while (currPotentialPrototype !== null) {\\n    if (currPotentialPrototype === classFunction.prototype){\\n       return true;\\n    }\\n    currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n  }\\n  return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3589640,
                "title": "day-25-javascript-solution",
                "content": "# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\") return false;\\n  \\n  obj = Object.getPrototypeOf(obj);\\n  while (obj) {\\n    if (obj === classFunction.prototype) return true;\\n    obj = Object.getPrototypeOf(obj);\\n  }\\n\\n  return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\") return false;\\n  \\n  obj = Object.getPrototypeOf(obj);\\n  while (obj) {\\n    if (obj === classFunction.prototype) return true;\\n    obj = Object.getPrototypeOf(obj);\\n  }\\n\\n  return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3584812,
                "title": "checking-instance-of-an-object-with-a-class-function-in-javascript",
                "content": "# Intuition\\nThe given code is designed to check whether an object is an instance of a specified class function in JavaScript.\\n\\n# Approach\\nThe `checkIfInstanceOf` function takes two parameters: `obj` and `classFunction`. It first performs some preliminary checks to ensure that `obj` is not null or undefined and that `classFunction` is a function. If any of these conditions are not met, the function returns false.\\n\\nThe function then uses the `Object` constructor to create a new object from `obj` and checks if this new object is an instance of the `classFunction`. The `instanceof` operator is used for this purpose. If the object is an instance of the class, the function returns true; otherwise, it returns false.\\n\\n# Complexity\\n- Time complexity: The time complexity of this function is O(1) because it performs a constant number of operations regardless of the size of the input.\\n- Space complexity: The space complexity is also O(1) as the function only uses a constant amount of memory to perform the checks and comparisons.\\n\\nExample Usage:\\n```js\\ncheckIfInstanceOf(new Date(), Date); // true\\n```\\n\\nIn this example, the function is used to check if the object created by `new Date()` is an instance of the `Date` class. The function returns true because the object is indeed an instance of the `Date` class.\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction!==\\'function\\') return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\ncheckIfInstanceOf(new Date(), Date); // true\\n```\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction!==\\'function\\') return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3579433,
                "title": "js-inheritance-time-105ms-69-space-52mb-74",
                "content": "# Approach\\nWe can simply use the in-bulit instanceof function. However, we have to account for primitives, which we have to manually promote to objects (instead of instance).\\n\\n# Complexity\\n- Time complexity:\\nO(n) *, where n is the depth of the inheritance chain*\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj == null || typeof classFunction !== \"function\") return false;\\n    else return Object(obj) instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj == null || typeof classFunction !== \"function\") return false;\\n    else return Object(obj) instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3579193,
                "title": "easy-solution",
                "content": "```\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false;\\n    let inputObj = typeof obj === \\'object\\' ? obj : Object(obj);\\n    return inputObj instanceof classFunction;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false;\\n    let inputObj = typeof obj === \\'object\\' ? obj : Object(obj);\\n    return inputObj instanceof classFunction;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3578065,
                "title": "javascript-simple-solution-using-getprototypeof",
                "content": "# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    // Use the `==` to check for both `null` and `undefined`\\n    if (obj == null || typeof classFunction !== \\'function\\') {\\n        return false\\n    }\\n\\n    let objPrototype = Object.getPrototypeOf(obj)\\n    while (objPrototype) {\\n        if (objPrototype === classFunction.prototype) {\\n            return true\\n        }\\n        objPrototype = Object.getPrototypeOf(objPrototype)\\n    }\\n\\n    return false\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    // Use the `==` to check for both `null` and `undefined`\\n    if (obj == null || typeof classFunction !== \\'function\\') {\\n        return false\\n    }\\n\\n    let objPrototype = Object.getPrototypeOf(obj)\\n    while (objPrototype) {\\n        if (objPrototype === classFunction.prototype) {\\n            return true\\n        }\\n        objPrototype = Object.getPrototypeOf(objPrototype)\\n    }\\n\\n    return false\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3577962,
                "title": "well-bunch-of-conditions",
                "content": "# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n\\n    function recurse(obj, classFunction){\\n        if (obj === null) return false;\\n        if (obj.__proto__ === classFunction.prototype) return true;\\n        return recurse(obj.__proto__, classFunction);\\n    }\\n\\n    if (obj === undefined || obj === null || classFunction === null || classFunction === undefined) return false;\\n    if (typeof obj !== \\'object\\'){\\n        return recurse(obj, classFunction);\\n    }\\n    if  (!classFunction.prototype) return false;\\n    return obj instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n\\n    function recurse(obj, classFunction){\\n        if (obj === null) return false;\\n        if (obj.__proto__ === classFunction.prototype) return true;\\n        return recurse(obj.__proto__, classFunction);\\n    }\\n\\n    if (obj === undefined || obj === null || classFunction === null || classFunction === undefined) return false;\\n    if (typeof obj !== \\'object\\'){\\n        return recurse(obj, classFunction);\\n    }\\n    if  (!classFunction.prototype) return false;\\n    return obj instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3577422,
                "title": "simple-solution-using-recursion-o-n-time-o-1-space",
                "content": "# Complexity\\n- Time complexity: **O(n)** - where **n** is the length of the prototype chain\\n- Space complexity: **O(1)**\\n\\n# Code\\n```\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj === null) return false;\\n    if (obj === undefined) return false;\\n    if (typeof classFunction !== \"function\") return false;\\n    \\n    let curPrototype = Object.getPrototypeOf(obj);\\n    \\n    while (curPrototype) {\\n        if (curPrototype === classFunction.prototype) return true;\\n        curPrototype = Object.getPrototypeOf(curPrototype);\\n    }\\n    \\n    return false;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj === null) return false;\\n    if (obj === undefined) return false;\\n    if (typeof classFunction !== \"function\") return false;\\n    \\n    let curPrototype = Object.getPrototypeOf(obj);\\n    \\n    while (curPrototype) {\\n        if (curPrototype === classFunction.prototype) return true;\\n        curPrototype = Object.getPrototypeOf(curPrototype);\\n    }\\n    \\n    return false;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3576866,
                "title": "javascript-faster-than-80",
                "content": "# Intuition\\nUse `typeof` and `instanceof` operators.\\n\\n# Approach\\nIs case `typeof classFunction != \\'function\\'` or any argument is equal to null return false.\\nIs case of `typeof obj == \\'object\\'`\\n```\\nreturn obj instanceof classFunction;\\n```\\nOtherwise compare `typeof obj == classFunction.name.toLowerCase()` or\\n```\\nreturn classFunction.name == \\'Object\\';\\n```\\n\\n# Complexity\\n- Time complexity:\\n$$O(1)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  if (typeof classFunction != \\'function\\' || obj == null || classFunction == null) return false;\\n  if (typeof obj == \\'object\\'){\\n    return obj instanceof classFunction;\\n  }\\n  else{\\n    if (typeof obj == classFunction.name.toLowerCase()) return true;\\n    return classFunction.name == \\'Object\\';\\n  }\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nreturn obj instanceof classFunction;\\n```\n```\\nreturn classFunction.name == \\'Object\\';\\n```\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  if (typeof classFunction != \\'function\\' || obj == null || classFunction == null) return false;\\n  if (typeof obj == \\'object\\'){\\n    return obj instanceof classFunction;\\n  }\\n  else{\\n    if (typeof obj == classFunction.name.toLowerCase()) return true;\\n    return classFunction.name == \\'Object\\';\\n  }\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3576771,
                "title": "proto",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n    return false;\\n    let curr = obj.__proto__;\\n    while(curr) {\\n      if(curr === classFunction.prototype) return true;\\n      curr = curr.__proto__\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n    return false;\\n    let curr = obj.__proto__;\\n    while(curr) {\\n      if(curr === classFunction.prototype) return true;\\n      curr = curr.__proto__\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3576708,
                "title": "easy-javascript-solution",
                "content": "\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n    return false;\\n\\n  let inputObj = obj;\\n  if (typeof obj !== \"object\") {\\n    inputObj = Object(obj); // Make sure it\\'s an object so instanceof has direct access to the constructor function\\n  }\\n  return inputObj instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```\\n![UpvoteLeetcode.jpeg](https://assets.leetcode.com/users/images/429ac532-c668-4d47-99ce-70217c480ef7_1685391512.9136596.jpeg)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n    return false;\\n\\n  let inputObj = obj;\\n  if (typeof obj !== \"object\") {\\n    inputObj = Object(obj); // Make sure it\\'s an object so instanceof has direct access to the constructor function\\n  }\\n  return inputObj instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3576700,
                "title": "solution-typescript-javascript",
                "content": "# Code\\n``` typescript []\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\"){\\n    return false;\\n  }\\n  let currPotentialPrototype = Object.getPrototypeOf(obj);\\n  while (currPotentialPrototype) {\\n    if (currPotentialPrototype === (classFunction as Function).prototype) {\\n      return true;\\n    }\\n    currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n  }\\n  return false;\\n};\\n```\\n``` javascript []\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\"){\\n    return false;\\n  }\\n  let currPotentialPrototype = Object.getPrototypeOf(obj);\\n  while (currPotentialPrototype) {\\n    if (currPotentialPrototype === classFunction.prototype) {\\n      return true;\\n    }\\n    currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n  }\\n  return false;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "``` typescript []\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\"){\\n    return false;\\n  }\\n  let currPotentialPrototype = Object.getPrototypeOf(obj);\\n  while (currPotentialPrototype) {\\n    if (currPotentialPrototype === (classFunction as Function).prototype) {\\n      return true;\\n    }\\n    currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n  }\\n  return false;\\n};\\n```\n``` javascript []\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\"){\\n    return false;\\n  }\\n  let currPotentialPrototype = Object.getPrototypeOf(obj);\\n  while (currPotentialPrototype) {\\n    if (currPotentialPrototype === classFunction.prototype) {\\n      return true;\\n    }\\n    currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n  }\\n  return false;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3576393,
                "title": "day-25",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n  // Check for null, undefined, or invalid classFunction\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\") {\\n    return false;\\n  }\\n\\n  let inputObj = obj;\\n  \\n  if (typeof obj !== \"object\") {\\n    inputObj = Object(obj);\\n  }\\n  return inputObj instanceof classFunction;\\n};\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n  // Check for null, undefined, or invalid classFunction\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\") {\\n    return false;\\n  }\\n\\n  let inputObj = obj;\\n  \\n  if (typeof obj !== \"object\") {\\n    inputObj = Object(obj);\\n  }\\n  return inputObj instanceof classFunction;\\n};\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3576287,
                "title": "js-ts-easy-solution-easy-solution-beats-99-8-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe core logic lies in \"return inputObj instanceof classFunction;\"\\n\\nFirst if condition returns false if the input params are not of the correct form\\n\\nSecond if condition checks if the type of input obj is not object, if not then it converts that into an object form by \"Object(obj);\"\\n\\nFinally do the code for core logic.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n    return false;\\n    \\n  let inputObj = obj;\\n  if (typeof obj !== \"object\") {\\n    inputObj = Object(obj); //CONVERTING TO OBJECT\\n  }\\n  return inputObj instanceof classFunction;\\n\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n    return false;\\n    \\n  let inputObj = obj;\\n  if (typeof obj !== \"object\") {\\n    inputObj = Object(obj); //CONVERTING TO OBJECT\\n  }\\n  return inputObj instanceof classFunction;\\n\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3576116,
                "title": "simple-solution-typescript-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe `checkIfInstanceOf` function takes two parameters: `obj`, representing the object to be checked, and `classFunction`, representing the class or constructor function to compare against. The function determines if the object is an instance of the specified class by using the `instanceof` operator.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Check if `obj` is `null`, `undefined`, or if `classFunction` is not a function. If any of these conditions are met, it means the object cannot be an instance of the class, so the function returns `false`.\\n2. If none of the above conditions are met, the function continues to execute. Convert `obj` into an object using `Object(obj)`. This step ensures that the `instanceof` operator has direct access to the constructor function of the object.\\n3. Use the `instanceof` operator to check if the converted object (`inputObject`) is an instance of the specified classFunction.\\n    - The `instanceof` operator tests whether an object has in its prototype chain the prototype property of a constructor function.\\n    - The `inputObject` is checked against the `classFunction` using `inputObject instanceof classFunction`.\\n4. If the `instanceof` check returns `true`, it means that the object is an instance of the specified class, so the function returns `true`.\\n5. If the `instanceof` check returns `false`, it means that the object is not an instance of the specified class, so the function returns `false`.\\n\\n# Code\\n``` javascript []\\nfunction checkIfInstanceOf(obj, classFunction) {\\n\\tif(obj === null || obj === undefined || typeof classFunction !== \\'function\\')\\n\\t\\treturn false;\\n\\n\\tconst inputObject = Object(obj); // Make sure it\\'s an object so instanceof has direct access to the constructor function\\n\\treturn inputObject instanceof classFunction\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```\\n``` typescript []\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n\\tif(obj === null || obj === undefined || typeof classFunction !== \\'function\\')\\n\\t\\treturn false;\\n\\n\\tconst inputObject = Object(obj); // Make sure it\\'s an object so instanceof has direct access to the constructor function\\n\\treturn inputObject instanceof classFunction\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "``` javascript []\\nfunction checkIfInstanceOf(obj, classFunction) {\\n\\tif(obj === null || obj === undefined || typeof classFunction !== \\'function\\')\\n\\t\\treturn false;\\n\\n\\tconst inputObject = Object(obj); // Make sure it\\'s an object so instanceof has direct access to the constructor function\\n\\treturn inputObject instanceof classFunction\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```\n``` typescript []\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n\\tif(obj === null || obj === undefined || typeof classFunction !== \\'function\\')\\n\\t\\treturn false;\\n\\n\\tconst inputObject = Object(obj); // Make sure it\\'s an object so instanceof has direct access to the constructor function\\n\\treturn inputObject instanceof classFunction\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3575988,
                "title": "easy-solution-2618-check-if-object-instance-of-class-python",
                "content": "\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n       if (obj === null || obj === undefined || typeof classFunction !== \\'function\\'){\\n           return false;\\n       }\\n       let currPrototype = Object.getPrototypeOf(obj);\\n       while (currPrototype !== null){\\n           if (currPrototype === classFunction.prototype){\\n               return true;\\n           }\\n           currPrototype = Object.getPrototypeOf(currPrototype);\\n       }\\n       return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n       if (obj === null || obj === undefined || typeof classFunction !== \\'function\\'){\\n           return false;\\n       }\\n       let currPrototype = Object.getPrototypeOf(obj);\\n       while (currPrototype !== null){\\n           if (currPrototype === classFunction.prototype){\\n               return true;\\n           }\\n           currPrototype = Object.getPrototypeOf(currPrototype);\\n       }\\n       return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3575922,
                "title": "java-script-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj!=null)\\n    {\\n        if(obj.constructor === classFunction)\\n        {\\n            return true;\\n        }\\n\\n        obj = Object.getPrototypeOf(obj);\\n\\n    }\\n\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj!=null)\\n    {\\n        if(obj.constructor === classFunction)\\n        {\\n            return true;\\n        }\\n\\n        obj = Object.getPrototypeOf(obj);\\n\\n    }\\n\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3575842,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\'){\\n        return false\\n    } else{\\n\\n   return Object(obj) instanceof classFunction\\n    } \\n\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\'){\\n        return false\\n    } else{\\n\\n   return Object(obj) instanceof classFunction\\n    } \\n\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3575528,
                "title": "javascript-simple-javascript-typescript-solution",
                "content": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Approach 1 Using Javascript :\\n# Runtime: 115 ms, faster than 27.90% of JavaScript online submissions for Check if Object Instance of Class.\\n# Memory Usage: 51.9 MB, less than 68.89% of JavaScript online submissions for Check if Object Instance of Class.\\n\\tvar checkIfInstanceOf = function(obj, classFunction) {\\n\\n\\t\\tif(obj === null || obj === undefined || typeof classFunction !== \\'function\\'){\\n\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tconst input_object = Object(obj);\\n\\n\\t\\tif (input_object instanceof classFunction){\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\telse{\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t};\\n\\n# Approach 2 Using Typescript :\\n# Runtime: 95 ms, faster than 97.44% of TypeScript online submissions for Check if Object Instance of Class.\\n# Memory Usage: 51.7 MB, less than 94.59% of TypeScript online submissions for Check if Object Instance of Class.\\n\\n\\tfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n\\n\\t\\tif(obj === null || obj === undefined || typeof classFunction !== \\'function\\'){\\n\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tconst input_object = Object(obj);\\n\\n\\t\\tif (input_object instanceof classFunction){\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\telse{\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t};\\n\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Approach 1 Using Javascript :\\n# Runtime: 115 ms, faster than 27.90% of JavaScript online submissions for Check if Object Instance of Class.\\n# Memory Usage: 51.9 MB, less than 68.89% of JavaScript online submissions for Check if Object Instance of Class.\\n\\tvar checkIfInstanceOf = function(obj, classFunction) {\\n\\n\\t\\tif(obj === null || obj === undefined || typeof classFunction !== \\'function\\'){\\n\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tconst input_object = Object(obj);\\n\\n\\t\\tif (input_object instanceof classFunction){\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\telse{\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t};\\n\\n# Approach 2 Using Typescript :\\n# Runtime: 95 ms, faster than 97.44% of TypeScript online submissions for Check if Object Instance of Class.\\n# Memory Usage: 51.7 MB, less than 94.59% of TypeScript online submissions for Check if Object Instance of Class.\\n\\n\\tfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n\\n\\t\\tif(obj === null || obj === undefined || typeof classFunction !== \\'function\\'){\\n\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tconst input_object = Object(obj);\\n\\n\\t\\tif (input_object instanceof classFunction){\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\telse{\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t};\\n\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "codeTag": "Java"
            },
            {
                "id": 3575334,
                "title": "javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  // Check if obj is null or undefined\\n  if (obj === null || obj === undefined) {\\n    return false;\\n  }\\n\\n  // Get the prototype of obj\\n  let proto = Object.getPrototypeOf(obj);\\n\\n  // Iterate through the prototype chain\\n  while (proto !== null) {\\n    // Check if the prototype\\'s constructor is equal to the class function\\n    if (proto.constructor === classFunction) {\\n      return true;\\n    }\\n\\n    // Get the next prototype in the chain\\n    proto = Object.getPrototypeOf(proto);\\n  }\\n\\n  // If we reach the end of the prototype chain without finding a match, return false\\n  return false;\\n};\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  // Check if obj is null or undefined\\n  if (obj === null || obj === undefined) {\\n    return false;\\n  }\\n\\n  // Get the prototype of obj\\n  let proto = Object.getPrototypeOf(obj);\\n\\n  // Iterate through the prototype chain\\n  while (proto !== null) {\\n    // Check if the prototype\\'s constructor is equal to the class function\\n    if (proto.constructor === classFunction) {\\n      return true;\\n    }\\n\\n    // Get the next prototype in the chain\\n    proto = Object.getPrototypeOf(proto);\\n  }\\n\\n  // If we reach the end of the prototype chain without finding a match, return false\\n  return false;\\n};\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3575333,
                "title": "javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  // Check if obj is null or undefined\\n  if (obj === null || obj === undefined) {\\n    return false;\\n  }\\n\\n  // Get the prototype of obj\\n  let proto = Object.getPrototypeOf(obj);\\n\\n  // Iterate through the prototype chain\\n  while (proto !== null) {\\n    // Check if the prototype\\'s constructor is equal to the class function\\n    if (proto.constructor === classFunction) {\\n      return true;\\n    }\\n\\n    // Get the next prototype in the chain\\n    proto = Object.getPrototypeOf(proto);\\n  }\\n\\n  // If we reach the end of the prototype chain without finding a match, return false\\n  return false;\\n};\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  // Check if obj is null or undefined\\n  if (obj === null || obj === undefined) {\\n    return false;\\n  }\\n\\n  // Get the prototype of obj\\n  let proto = Object.getPrototypeOf(obj);\\n\\n  // Iterate through the prototype chain\\n  while (proto !== null) {\\n    // Check if the prototype\\'s constructor is equal to the class function\\n    if (proto.constructor === classFunction) {\\n      return true;\\n    }\\n\\n    // Get the next prototype in the chain\\n    proto = Object.getPrototypeOf(proto);\\n  }\\n\\n  // If we reach the end of the prototype chain without finding a match, return false\\n  return false;\\n};\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3575259,
                "title": "implementing-the-function-by-looking-up-the-prototype-chain",
                "content": "\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIt\\'s simple, just check whether the given parameters obj and classFunction are valid.\\nThen simply get the prototype of the obj and compare it with the classFunction\\'s prototype\\nIf they\\'re equal return true\\nOtherwise look for the \"prototype of the prototype\" like we \"first went for Father then grandfather\" [Sorry for this stupid analogy\\uD83D\\uDE12]\\n\\nJust for reference how a general prototype chain hierarchy looks like\\n\\nnull [grandfather] \\u2192 Object.prototype [father] \\u2192 Function.prototype [child]\\n\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n     if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n    return false;\\n  let proto = Object.getPrototypeOf(obj)\\n  while(proto!==null){\\n      if(proto === classFunction.prototype) return true\\n      proto = Object.getPrototypeOf(proto)\\n  }\\n  return false\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n     if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n    return false;\\n  let proto = Object.getPrototypeOf(obj)\\n  while(proto!==null){\\n      if(proto === classFunction.prototype) return true\\n      proto = Object.getPrototypeOf(proto)\\n  }\\n  return false\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3575179,
                "title": "easy-javascript-solution",
                "content": "```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \"function\"){\\n        return false\\n    }\\n    \\n    let currentPrototype = obj.__proto__;\\n    \\n    while(currentPrototype !== null){\\n        if(currentPrototype === classFunction.prototype) return true;\\n        currentPrototype = currentPrototype.__proto__;\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \"function\"){\\n        return false\\n    }\\n    \\n    let currentPrototype = obj.__proto__;\\n    \\n    while(currentPrototype !== null){\\n        if(currentPrototype === classFunction.prototype) return true;\\n        currentPrototype = currentPrototype.__proto__;\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3575109,
                "title": "chatgpt-code-snippet-editorial-solution",
                "content": "# Intuition:\\nThe problem requires us to determine if an object is an instance of a particular class. We need to implement a function that takes an object (`obj`) and a class (`classFunction`) as parameters and returns `true` if `obj` is an instance of `classFunction`, and `false` otherwise.\\n\\n# Approach:\\nTo solve the problem, we can use prototype chaining. In JavaScript, every object has a prototype, which is an object from which it inherits properties and methods. We can traverse the prototype chain of the `obj` and check if any of its prototypes match the `classFunction.prototype`.\\n\\nThe steps to solve the problem are as follows:\\n\\n1. Check if `obj` is null, undefined, or if `classFunction` is not a function. If any of these conditions are true, return `false` since an object cannot be an instance of a non-existent or non-function class.\\n2. Initialize a variable `currPotentialPrototype` to the prototype of `obj`.\\n3. Start a while loop that continues until `currPotentialPrototype` becomes null.\\n4. Inside the loop, check if `currPotentialPrototype` is equal to `classFunction.prototype`. If they are equal, it means `obj` is an instance of `classFunction`, so return `true`.\\n5. If `currPotentialPrototype` is not equal to `classFunction.prototype`, update `currPotentialPrototype` to its own prototype using `Object.getPrototypeOf(currPotentialPrototype)`.\\n6. After the loop ends, return `false` since no matching prototype was found in the chain.\\n\\n# Complexity:\\nThe time complexity of this approach is O(k), where k is the number of prototypes in the chain between `obj` and `classFunction.prototype`. In the worst case, this would be proportional to the depth of the prototype chain.\\n\\nThe space complexity is O(1) since we are using a constant amount of extra space.\\n\\nCode:\\n\\n```javascript\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n    return false;\\n\\n  let currPotentialPrototype = Object.getPrototypeOf(obj);\\n\\n  while (currPotentialPrototype !== null) {\\n    if (currPotentialPrototype === classFunction.prototype) return true;\\n    currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n  }\\n\\n  return false;\\n};\\n\\n/**\\n * Example usage:\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```\\n\\nThis is a simple implementation that uses prototype chaining to determine if an object is an instance of a particular class.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n    return false;\\n\\n  let currPotentialPrototype = Object.getPrototypeOf(obj);\\n\\n  while (currPotentialPrototype !== null) {\\n    if (currPotentialPrototype === classFunction.prototype) return true;\\n    currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n  }\\n\\n  return false;\\n};\\n\\n/**\\n * Example usage:\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3574973,
                "title": "javascript-easy-solution",
                "content": "# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \"function\"){\\n        return false;\\n    }\\n    let inputObj =obj;\\n    if(typeof obj !== \"object\"){\\n        inputObj = Object(obj);\\n    }\\n    return inputObj instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \"function\"){\\n        return false;\\n    }\\n    let inputObj =obj;\\n    if(typeof obj !== \"object\"){\\n        inputObj = Object(obj);\\n    }\\n    return inputObj instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3574912,
                "title": "easiest-explanation",
                "content": "\\n# Code\\n``` javaScript []\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj != null)\\n    {\\n        if(obj.constructor === classFunction) return true;\\n\\n        obj = Object.getPrototypeOf(obj);\\n\\n    }\\n\\n    return false;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "``` javaScript []\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj != null)\\n    {\\n        if(obj.constructor === classFunction) return true;\\n\\n        obj = Object.getPrototypeOf(obj);\\n\\n    }\\n\\n    return false;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3574671,
                "title": "easy-solution-o-1",
                "content": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3574574,
                "title": "easy-solution",
                "content": "# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(typeof classFunction !== \"function\" || obj===undefined) return false;\\n    if(typeof obj !== \"object\") obj = Object(obj);\\n    return obj instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(typeof classFunction !== \"function\" || obj===undefined) return false;\\n    if(typeof obj !== \"object\") obj = Object(obj);\\n    return obj instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3574433,
                "title": "day25-simple-js-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\n $$O(n)$$\\n\\n- Space complexity:\\n $$O(1)$$\\n\\n# Code\\n```\\n\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj!=null){\\n        if(obj.constructor === classFunction){\\n            return true;\\n        }\\n        obj = Object.getPrototypeOf(obj);\\n    }\\n    return false;\\n};\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj!=null){\\n        if(obj.constructor === classFunction){\\n            return true;\\n        }\\n        obj = Object.getPrototypeOf(obj);\\n    }\\n    return false;\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3574326,
                "title": "checking-object-instance-custom-approach-without-instanceof-operator",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem requires checking if a given object is an instance of a given class or superclass. One approach is to compare the prototype chain of the object with the prototype of the class.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe `checkIfInstanceOf` function takes two parameters: obj and `classFunction`.\\n\\n1. First, it checks if either `obj` or `classFunction` is `undefined` or `null`. If so, it returns `false`.\\n2. Next, it checks if `obj` itself is `null`. If it is, it also returns `false`.\\n3. Then, it retrieves the prototype of `classFunction` using `classFunction.prototype`.\\n4. It enters a loop where it checks if obj is equal to the `classPrototype`. If they are equal, it means `obj` has access to the methods of `classFunction`, and the function returns `true`.\\n5. If the loop completes without finding a match, it means `obj` does not have access to the methods of `classFunction`, and the function returns `false`.\\n\\n# Complexity\\n- Time complexity: The time complexity of this approach is dependent on the length of the prototype chain of the object. In the worst case, it can be considered as O(n), where n is the length of the prototype chain.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: The space complexity is O(1) as it does not use any additional data structures that grow with the input size.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (typeof obj === \\'undefined\\' || typeof classFunction === \\'undefined\\' || classFunction === null) {\\n        return false;\\n    }\\n    if (obj === null) {\\n        return false;\\n    }\\n\\n    var classPrototype = classFunction.prototype;\\n\\n    while (obj !== null) {\\n        if (obj === classPrototype) {\\n            return true;\\n        }\\n        obj = Object.getPrototypeOf(obj);\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (typeof obj === \\'undefined\\' || typeof classFunction === \\'undefined\\' || classFunction === null) {\\n        return false;\\n    }\\n    if (obj === null) {\\n        return false;\\n    }\\n\\n    var classPrototype = classFunction.prototype;\\n\\n    while (obj !== null) {\\n        if (obj === classPrototype) {\\n            return true;\\n        }\\n        obj = Object.getPrototypeOf(obj);\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3574270,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj===null || obj===undefined ||typeof classFunction!==\\'function\\')return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj===null || obj===undefined ||typeof classFunction!==\\'function\\')return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3574069,
                "title": "3-lines-recursive-fast-beats-95-and-easy-to-understand",
                "content": "# Intuition\\nWe can use Object.getPrototypeOf() to walk up the chain.\\nFor example:\\n```\\n> class Animal {}; class Dog extends Animal {}; class Lab extends Dog {};\\n> Object.getPrototypeOf(Lab);\\n[class Dog extends Animal]\\n> Object.getPrototypeOf(Dog);\\n[class Animal]\\n```\\n\\n# Approach\\nWalk up the chain and when true return true; otherwise, the superclass will be null; when that happens, return false;\\n\\n# Complexity\\n- Time complexity:\\nWalking through the superclass chain:\\nlet n be levels of superclass of current obj\\'s class.\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n      if (obj == null) return false;\\n      if (obj.constructor === classFunction) return true;\\n      return checkIfInstanceOf(Object.getPrototypeOf(obj), classFunction);\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n> class Animal {}; class Dog extends Animal {}; class Lab extends Dog {};\\n> Object.getPrototypeOf(Lab);\\n[class Dog extends Animal]\\n> Object.getPrototypeOf(Dog);\\n[class Animal]\\n```\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n      if (obj == null) return false;\\n      if (obj.constructor === classFunction) return true;\\n      return checkIfInstanceOf(Object.getPrototypeOf(obj), classFunction);\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3574043,
                "title": "2-line-function-to-check-object-s-class-simple-efficient",
                "content": "# Intuition\\nThe checkIfInstanceOf function is used to check if an object is an instance of a given class function.\\n# Approach\\nThe function checks if the object is null, undefined, or if the class function is not a valid function. If any of these conditions are met, the function returns false. Otherwise, it uses the Object() constructor to convert the object to an object wrapper and then checks if it is an instance of the class function using the instanceof operator.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of the function is O(1), as it performs a single check and uses the instanceof operator.\\n- Space complexity:\\n The space complexity is also O(1), as it uses only a few constant variables.\\n# Code\\n```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\n// Function to check if an object is an instance of a given class\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\') {\\n        return false;\\n    }\\n    return Object(obj) instanceof classFunction;\\n};\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```\\n\\n![please-upvote-and.jpg](https://assets.leetcode.com/users/images/b001a907-8ffa-4aa1-af81-a4bd60659fc4_1685338122.0800085.jpeg)",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\n// Function to check if an object is an instance of a given class\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\') {\\n        return false;\\n    }\\n    return Object(obj) instanceof classFunction;\\n};\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3574004,
                "title": "easy-solution-in-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\n// Function to check if an object is an instance of a given class\\nconst checkIfInstanceOf = (obj, classFunction) => {\\n  // Check if the object is null, undefined, or if classFunction is not a function\\n  if (obj===null || obj===undefined || typeof classFunction !== \\'function\\') {\\n    return false; // Return false if any of the conditions are true\\n  }\\n\\n  let prototype = Object.getPrototypeOf(obj); // Get the prototype of the object\\n\\n  while (prototype) {\\n    if (prototype === classFunction.prototype) {\\n      // Check if the current prototype matches the prototype of the given class\\n      return true; // Return true if a match is found\\n    }\\n    prototype = Object.getPrototypeOf(prototype); \\n  }\\n  return false; // Return false if no match is found in the entire prototype chain\\n};\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\n// Function to check if an object is an instance of a given class\\nconst checkIfInstanceOf = (obj, classFunction) => {\\n  // Check if the object is null, undefined, or if classFunction is not a function\\n  if (obj===null || obj===undefined || typeof classFunction !== \\'function\\') {\\n    return false; // Return false if any of the conditions are true\\n  }\\n\\n  let prototype = Object.getPrototypeOf(obj); // Get the prototype of the object\\n\\n  while (prototype) {\\n    if (prototype === classFunction.prototype) {\\n      // Check if the current prototype matches the prototype of the given class\\n      return true; // Return true if a match is found\\n    }\\n    prototype = Object.getPrototypeOf(prototype); \\n  }\\n  return false; // Return false if no match is found in the entire prototype chain\\n};\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3573901,
                "title": "fast-solution",
                "content": "Runtime 97 ms\\nBeats 90.82%\\nMemory 51.5 MB\\nBeats 84.56%\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nconst convertObject = (obj) => {\\n    const isObject = (obj) => obj != null && typeof obj == \\'object\\';\\n     if(!isObject(obj)) {\\n         if(typeof obj == \\'number\\') obj = new Number(obj);\\n         if(typeof obj == \\'string\\') obj = new String(obj);\\n         if(typeof obj == \\'boolean\\') obj = new Boolean(obj);\\n         if(typeof obj == \\'symbol\\') obj = new Object(obj);\\n     }\\n     return obj;\\n}\\n\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n     if(typeof classFunction != \\'function\\') return false;\\n //  if(obj == null || obj == undefined) return false;\\n     obj = convertObject(obj);\\n //  obj = Object(obj);\\n     return obj instanceof classFunction; \\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nconst convertObject = (obj) => {\\n    const isObject = (obj) => obj != null && typeof obj == \\'object\\';\\n     if(!isObject(obj)) {\\n         if(typeof obj == \\'number\\') obj = new Number(obj);\\n         if(typeof obj == \\'string\\') obj = new String(obj);\\n         if(typeof obj == \\'boolean\\') obj = new Boolean(obj);\\n         if(typeof obj == \\'symbol\\') obj = new Object(obj);\\n     }\\n     return obj;\\n}\\n\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n     if(typeof classFunction != \\'function\\') return false;\\n //  if(obj == null || obj == undefined) return false;\\n     obj = convertObject(obj);\\n //  obj = Object(obj);\\n     return obj instanceof classFunction; \\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3573857,
                "title": "the-instance-detective-unmasking-objects-secret-identities",
                "content": "# Intuition\\nThe provided code defines a function called checkIfInstanceOf that checks if an object is an instance of a given class. Here\\'s a breakdown of how the function works:\\n\\nThe function takes two parameters: obj (the object to be checked) and classFunction (the class or constructor function).\\n\\nThe first condition if (obj == null) checks if the object is null or undefined. If it is, the function immediately returns false, indicating that it is not an instance of the given class.\\n\\nThe second condition if (typeof classFunction !== \\'function\\') checks if the classFunction parameter is actually a function. Since JavaScript classes are essentially special types of functions, this condition ensures that the classFunction parameter is a valid constructor function. If it is not a function, the function returns false.\\n\\nThe third line of the function return Object(obj) instanceof classFunction performs the actual check for instancehood. It uses the instanceof operator to check if obj is an instance of classFunction. The instanceof operator tests if the prototype property of a constructor appears anywhere in the prototype chain of an object. If the check passes, the function returns true, indicating that obj is an instance of the given class. Otherwise, it returns false.\\n\\nTo summarize, the checkIfInstanceOf function provides a way to determine if an object is an instance of a particular class or constructor function. It considers null or undefined objects as not instances and also verifies that the provided classFunction parameter is a valid function.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nThe approach used in the checkIfInstanceOf function is relatively straightforward. Here\\'s a breakdown of the approach:\\n\\nThe function first checks if the obj parameter is null or undefined. This is done using the condition if (obj == null). If obj is null or undefined, the function immediately returns false, indicating that it is not an instance of the given class. This check helps avoid any potential errors or unexpected behavior when dealing with non-existent objects.\\n\\nNext, the function checks if the classFunction parameter is a valid function. This is done using the condition if (typeof classFunction !== \\'function\\'). It checks if the typeof the classFunction is \\'function\\', which ensures that it is a valid constructor function. If classFunction is not a function, the function returns false. This check is important because the instanceof operator requires a valid constructor function to perform the instance check.\\n\\nFinally, if the above two checks pass, the function uses the instanceof operator to determine if obj is an instance of classFunction. It does this by using the expression Object(obj) instanceof classFunction. The Object(obj) part is used to convert obj to an object, as instanceof requires the left-hand operand to be an object. If obj is an instance of classFunction, the function returns true, indicating that obj is an instance of the given class. Otherwise, it returns false.\\n\\nOverall, the approach is to perform two preliminary checks (null/undefined and valid function) and then use the instanceof operator to check the instancehood of the object.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity : O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity : O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj == null) return false;\\n    if(typeof classFunction !== \\'function\\') return false;\\n    return Object(obj) instanceof classFunction;\\n};var checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj == null) return false;\\n    if(typeof classFunction !== \\'function\\') return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj == null) return false;\\n    if(typeof classFunction !== \\'function\\') return false;\\n    return Object(obj) instanceof classFunction;\\n};var checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj == null) return false;\\n    if(typeof classFunction !== \\'function\\') return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3573784,
                "title": "day-25-solution-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nfunction* prototypeGenerator(obj) {\\n  let currPrototype = Object.getPrototypeOf(obj);\\n  while (currPrototype !== null) {\\n    yield currPrototype;\\n    currPrototype = Object.getPrototypeOf(currPrototype);\\n  }\\n}\\n\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n    return false;\\n\\n  for (const prototype of prototypeGenerator(obj)) {\\n    if (prototype === classFunction.prototype) return true;\\n  }\\n\\n  return false;\\n};\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nfunction* prototypeGenerator(obj) {\\n  let currPrototype = Object.getPrototypeOf(obj);\\n  while (currPrototype !== null) {\\n    yield currPrototype;\\n    currPrototype = Object.getPrototypeOf(currPrototype);\\n  }\\n}\\n\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n    return false;\\n\\n  for (const prototype of prototypeGenerator(obj)) {\\n    if (prototype === classFunction.prototype) return true;\\n  }\\n\\n  return false;\\n};\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3573721,
                "title": "check-if-object-instance-of-class",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\n\\n\\n\\n\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    for (; obj != null; obj = Object.getPrototypeOf(obj)) {\\n        if (obj.constructor === classFunction) {\\n            return true; // object is an instance in class\\n        }\\n    }\\n\\n    return false; // Object is not an instance in class\\n};\\n\\n\\n\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\n\\n\\n\\n\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    for (; obj != null; obj = Object.getPrototypeOf(obj)) {\\n        if (obj.constructor === classFunction) {\\n            return true; // object is an instance in class\\n        }\\n    }\\n\\n    return false; // Object is not an instance in class\\n};\\n\\n\\n\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3573598,
                "title": "using-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj!=null){\\n        if(obj.constructor===classFunction) return true;\\n        obj = Object.getPrototypeOf(obj);\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj!=null){\\n        if(obj.constructor===classFunction) return true;\\n        obj = Object.getPrototypeOf(obj);\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3573555,
                "title": "basic-javascript-solution-easy-to-understand-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n* In Javascript, inheritance is achieved with the prototype chain.We can get the prototype of an object with the\\n$$Object.getPrototypeOf(obj)$$\\nusing this compare class prototype with objects prortotype.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n* We will Traverse the entire prototype chain until we find a match or else return $$false$$.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj != null){\\n        if(obj.constructor === classFunction){\\n            return true;\\n        }\\n        obj = Object.getPrototypeOf(obj)\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj != null){\\n        if(obj.constructor === classFunction){\\n            return true;\\n        }\\n        obj = Object.getPrototypeOf(obj)\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3573478,
                "title": "prototype-chain-easy-javascript-solution-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !==  \"function\")\\n    return false;\\nlet inputObj = obj;\\n  if (typeof obj !== \"object\") {\\n    inputObj = Object(obj);\\n  }\\n  return inputObj instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !==  \"function\")\\n    return false;\\nlet inputObj = obj;\\n  if (typeof obj !== \"object\") {\\n    inputObj = Object(obj);\\n  }\\n  return inputObj instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3573470,
                "title": "typescript",
                "content": "```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    while (obj != null) {\\n        if (obj.constructor === classFunction) {\\n            return true;\\n        }\\n        \\n        obj = Object.getPrototypeOf(obj)\\n    }\\n\\n    return false\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    while (obj != null) {\\n        if (obj.constructor === classFunction) {\\n            return true;\\n        }\\n        \\n        obj = Object.getPrototypeOf(obj)\\n    }\\n\\n    return false\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3573424,
                "title": "day-25-easy-solution-in-js",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj!=null){\\n        if(obj.constructor==classFunction){\\n            return true;\\n        }\\n        obj=Object.getPrototypeOf(obj);\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj!=null){\\n        if(obj.constructor==classFunction){\\n            return true;\\n        }\\n        obj=Object.getPrototypeOf(obj);\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3573368,
                "title": "day-25-javascript",
                "content": "# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n    return false;\\n\\n  let inputObj = obj;\\n  if (typeof obj !== \"object\") {\\n    inputObj = Object(obj); // Make sure it\\'s an object so instanceof has direct access to the constructor function\\n  }\\n  return inputObj instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n  if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n    return false;\\n\\n  let inputObj = obj;\\n  if (typeof obj !== \"object\") {\\n    inputObj = Object(obj); // Make sure it\\'s an object so instanceof has direct access to the constructor function\\n  }\\n  return inputObj instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3552672,
                "title": "javascript-with-comments-begineer-friendly",
                "content": "# Code\\n```\\n// Object cannot be null or undefined\\n// classFunction must be a function\\n// If above conditions are satisfied then check instance\\n\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined) return false;\\n    if(typeof classFunction !== \"function\") return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n// Object cannot be null or undefined\\n// classFunction must be a function\\n// If above conditions are satisfied then check instance\\n\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined) return false;\\n    if(typeof classFunction !== \"function\") return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3551986,
                "title": "easy-solution",
                "content": "# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj===null || obj===undefined || typeof classFunction!==\"function\") {\\n        return false;\\n    }\\n    if(typeof(obj)==\\'number\\') {\\n        const num = new Number(obj);\\n        return num instanceof classFunction;\\n    }\\n    let inputObj = obj;\\n    if(typeof obj !== \"object\") {\\n        inputObj = Object(obj);\\n    }\\n    return inputObj instanceof classFunction;\\n};\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj===null || obj===undefined || typeof classFunction!==\"function\") {\\n        return false;\\n    }\\n    if(typeof(obj)==\\'number\\') {\\n        const num = new Number(obj);\\n        return num instanceof classFunction;\\n    }\\n    let inputObj = obj;\\n    if(typeof obj !== \"object\") {\\n        inputObj = Object(obj);\\n    }\\n    return inputObj instanceof classFunction;\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3550748,
                "title": "js-with-if-else-solution",
                "content": "# Intuition\\nUse if/else, typeof, and instanceof as the only solution I can think of right now\\n\\n# Approach\\n- check if the typeof `classFunction` is not function. If it is not, return `false`\\n- If a `classFunction` is a function, then check if the typeof `obj` is either a \"number\", \"string\", \"symbol\", or \"boolean\". If it meets one of these conditions, declare a new instance of the `obj`. \\n- return the boolean value using the $$instanceof$$ operator\\n\\n# Complexity\\n- Time complexity: O(1)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (typeof classFunction !== \\'function\\'){\\n        return false\\n    } else {\\n        if (typeof obj == \\'number\\'){\\n            const num = new Number(obj)\\n            return num instanceof classFunction\\n        } else if (typeof obj == \\'string\\'){\\n            const str = new String(obj)\\n            return str instanceof classFunction\\n        } else if (typeof obj == \\'boolean\\'){\\n            const bool = new Boolean(obj)\\n            return bool instanceof classFunction\\n        } else if (typeof obj == \\'symbol\\'){\\n            const sym = Object(obj)\\n            return sym instanceof classFunction\\n        }\\n\\n        return obj instanceof classFunction\\n    } \\n\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (typeof classFunction !== \\'function\\'){\\n        return false\\n    } else {\\n        if (typeof obj == \\'number\\'){\\n            const num = new Number(obj)\\n            return num instanceof classFunction\\n        } else if (typeof obj == \\'string\\'){\\n            const str = new String(obj)\\n            return str instanceof classFunction\\n        } else if (typeof obj == \\'boolean\\'){\\n            const bool = new Boolean(obj)\\n            return bool instanceof classFunction\\n        } else if (typeof obj == \\'symbol\\'){\\n            const sym = Object(obj)\\n            return sym instanceof classFunction\\n        }\\n\\n        return obj instanceof classFunction\\n    } \\n\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3548854,
                "title": "check-if-object-instance-of-class-js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false\\n    return Object(obj) instanceof classFunction\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false\\n    return Object(obj) instanceof classFunction\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3536060,
                "title": "object-instance-checking-unlocking-the-prototype-chain-in-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe intuition behind this solution is to leverage JavaScript\\'s prototype chain to determine if an object is an instance of a given class. By comparing the prototype of the object with the prototype of the class, we can determine if the object has access to the class\\'s methods.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach is to check if the object (`obj`) is not null or undefined. Then, we perform the following checks:\\n\\n1. Check if `classFunction` is a function or the `Object` constructor.\\n2. Check if `obj` is an instance of `classFunction`.\\n3. Check if the object wrapper created using `Object(obj)` is an instance of `classFunction`.\\n\\nIf any of these checks pass, we consider the object as an instance of the given class and return `true`. Otherwise, we return `false`.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this solution is constant because the checks performed on the object and class are independent of the size or complexity of the objects involved. It only involves simple comparisons and instanceof checks.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity is also constant since the solution does not require any additional data structures that grow with the input size. It only uses a constant amount of memory to store the function parameters and perform the necessary checks.\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  return (\\n    obj != null &&\\n    (typeof classFunction === \\'function\\' || classFunction === Object) &&\\n    (obj instanceof classFunction || Object(obj) instanceof classFunction)\\n  );\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  return (\\n    obj != null &&\\n    (typeof classFunction === \\'function\\' || classFunction === Object) &&\\n    (obj instanceof classFunction || Object(obj) instanceof classFunction)\\n  );\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3533095,
                "title": "my-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n     let ref = obj;\\n\\n    while(ref != null){\\n        if(ref.constructor == classFunction){\\n            return true;\\n        }\\n        ref = ref.__proto__;\\n    }\\n\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n     let ref = obj;\\n\\n    while(ref != null){\\n        if(ref.constructor == classFunction){\\n            return true;\\n        }\\n        ref = ref.__proto__;\\n    }\\n\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3528881,
                "title": "simple-codes-by-using-instanceof",
                "content": "\\n# Code\\n```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || typeof classFunction !== \\'function\\' || obj === undefined)\\n    {\\n        return false;\\n    }\\n\\n    return Object(obj) instanceof classFunction\\n};\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} obj\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || typeof classFunction !== \\'function\\' || obj === undefined)\\n    {\\n        return false;\\n    }\\n\\n    return Object(obj) instanceof classFunction\\n};\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3523938,
                "title": "checking-an-instance-of-a-value-without-using-the-built-in-instanceof-operator",
                "content": "# Intuition\\nI had to think of a way to come up with a solution without lazily using instanceof\\n\\n# Approach\\nSince the prototypes of objects are basically a chain, my initial thought was using some kind of loop to go through the object\\'s prototypes and end it when the nested prototype is null.\\nRecursion sounded convenient to me so i went with that, and my way of comparing was through the constructors names. i thought of using `Object.getOwnPropertyNames()` then comparing each value of the array, but that\\'s more memory tasking than just accessing the name of the constructor directly with `constructor.name`\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction checkIfInstanceOf(obj: any, classFn: any): boolean{\\n    // safety checks\\n    if(obj === null || classFn === null) return false;\\n    if(obj === undefined || classFn === undefined) return false;\\n    return instanceofClass(obj, classFn)\\n}\\nfunction instanceofClass(obj: any, classFn: any): boolean{\\n    // get the prototype of the value\\n    const objprototype = Object.getPrototypeOf(obj);\\n    // get the prototype of the passed class\\n    const classFnPrototype = classFn.prototype;\\n    // if classFnPrototype is undefined that means the passed classFn value isn\\'t a class\\n    if(!classFnPrototype) return false;\\n    // if we reach the deadend of the object\\'s prototypes, return false\\n    if(objprototype === null) return false;\\n    if(objprototype.constructor.name === classFnPrototype.constructor.name) return true;\\n    const nestedPrototype = Object.getPrototypeOf(obj);\\n    return instanceofClass(nestedPrototype, classFn)\\n}\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "TypeScript",
                    "Recursion"
                ],
                "code": "```\\nfunction checkIfInstanceOf(obj: any, classFn: any): boolean{\\n    // safety checks\\n    if(obj === null || classFn === null) return false;\\n    if(obj === undefined || classFn === undefined) return false;\\n    return instanceofClass(obj, classFn)\\n}\\nfunction instanceofClass(obj: any, classFn: any): boolean{\\n    // get the prototype of the value\\n    const objprototype = Object.getPrototypeOf(obj);\\n    // get the prototype of the passed class\\n    const classFnPrototype = classFn.prototype;\\n    // if classFnPrototype is undefined that means the passed classFn value isn\\'t a class\\n    if(!classFnPrototype) return false;\\n    // if we reach the deadend of the object\\'s prototypes, return false\\n    if(objprototype === null) return false;\\n    if(objprototype.constructor.name === classFnPrototype.constructor.name) return true;\\n    const nestedPrototype = Object.getPrototypeOf(obj);\\n    return instanceofClass(nestedPrototype, classFn)\\n}\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3514005,
                "title": "i-don-t-even-know-anymore",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n# Code\\n```\\nfunction checkIfInstanceOf(value, clazz) {\\n  if (value === null || value === undefined || typeof clazz !== \\'function\\') {\\n    return false;\\n  }\\n\\n  if (typeof value === \\'object\\') {\\n    if (value instanceof clazz) {\\n      return true;\\n    }\\n\\n    const valuePrototype = Object.getPrototypeOf(value);\\n    return isClassPrototype(valuePrototype, clazz);\\n  }\\n\\n  return isClassPrototype(Object.getPrototypeOf(Object(value)), clazz);\\n}\\n\\nfunction isClassPrototype(prototype, clazz) {\\n  if (prototype === null) {\\n    return false;\\n  }\\n\\n  if (prototype === clazz.prototype) {\\n    return true;\\n  }\\n\\n  return isClassPrototype(Object.getPrototypeOf(prototype), clazz);\\n}\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction checkIfInstanceOf(value, clazz) {\\n  if (value === null || value === undefined || typeof clazz !== \\'function\\') {\\n    return false;\\n  }\\n\\n  if (typeof value === \\'object\\') {\\n    if (value instanceof clazz) {\\n      return true;\\n    }\\n\\n    const valuePrototype = Object.getPrototypeOf(value);\\n    return isClassPrototype(valuePrototype, clazz);\\n  }\\n\\n  return isClassPrototype(Object.getPrototypeOf(Object(value)), clazz);\\n}\\n\\nfunction isClassPrototype(prototype, clazz) {\\n  if (prototype === null) {\\n    return false;\\n  }\\n\\n  if (prototype === clazz.prototype) {\\n    return true;\\n  }\\n\\n  return isClassPrototype(Object.getPrototypeOf(prototype), clazz);\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3510343,
                "title": "2-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsage of instanceof operator\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n# Code\\n```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj === null || undefined === obj ||  typeof classFunction !== \\'function\\') {\\n        return false\\n    }\\n    return Object(obj) instanceof classFunction\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj === null || undefined === obj ||  typeof classFunction !== \\'function\\') {\\n        return false\\n    }\\n    return Object(obj) instanceof classFunction\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3495547,
                "title": "basic-instanceof",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunc) {\\n    const type = typeof obj;\\n\\n    if (typeof classFunc !== \\'function\\') {\\n        return false;\\n    }\\n\\n    if (classFunc === null || classFunc === undefined) {\\n        return obj === classFunc\\n    }\\n\\n    if (obj === null || obj === undefined) {\\n        return obj instanceof classFunc\\n    }\\n\\n    if (type === \\'function\\') {\\n        return obj instanceof classFunc;\\n    }\\n\\n    if (type === \\'object\\' && classFunc) {\\n        return obj instanceof classFunc;\\n    } else if (classFunc === Object) {\\n        return true\\n    } else {\\n        return obj.constructor === classFunc;\\n    }\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunc) {\\n    const type = typeof obj;\\n\\n    if (typeof classFunc !== \\'function\\') {\\n        return false;\\n    }\\n\\n    if (classFunc === null || classFunc === undefined) {\\n        return obj === classFunc\\n    }\\n\\n    if (obj === null || obj === undefined) {\\n        return obj instanceof classFunc\\n    }\\n\\n    if (type === \\'function\\') {\\n        return obj instanceof classFunc;\\n    }\\n\\n    if (type === \\'object\\' && classFunc) {\\n        return obj instanceof classFunc;\\n    } else if (classFunc === Object) {\\n        return true\\n    } else {\\n        return obj.constructor === classFunc;\\n    }\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3493522,
                "title": "ts-solution",
                "content": "\\n```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n\\n  if(obj === null || obj === undefined) {\\n    return false\\n  }\\n\\n  if(typeof classFunction !== \\'function\\') {\\n    return false;\\n  }\\n\\n  if(classFunction === Object) {\\n    return true;\\n  }\\n  \\n  let proto = obj[\\'__proto__\\'];\\n\\n  while(proto) {\\n    if(proto === classFunction.prototype) {\\n      return true;\\n    }\\n    proto = proto[\\'__proto__\\']\\n  }\\n  \\n  return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n\\n  if(obj === null || obj === undefined) {\\n    return false\\n  }\\n\\n  if(typeof classFunction !== \\'function\\') {\\n    return false;\\n  }\\n\\n  if(classFunction === Object) {\\n    return true;\\n  }\\n  \\n  let proto = obj[\\'__proto__\\'];\\n\\n  while(proto) {\\n    if(proto === classFunction.prototype) {\\n      return true;\\n    }\\n    proto = proto[\\'__proto__\\']\\n  }\\n  \\n  return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3482355,
                "title": "strange-solution-d",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n\\n    return (obj?.__proto__ && classFunction?.prototype) ? \\n    (obj.__proto__ === classFunction.prototype || obj.__proto__ instanceof classFunction) : \\n    false\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n\\n    return (obj?.__proto__ && classFunction?.prototype) ? \\n    (obj.__proto__ === classFunction.prototype || obj.__proto__ instanceof classFunction) : \\n    false\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3481192,
                "title": "js-solution-using-getprototypeof-method",
                "content": "# Complexity\\n- Time complexity:\\nO(n^2)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n   if(obj!==undefined && classFunction!==null){ \\n       while(obj!==null ){\\n        if(obj.constructor === classFunction){\\n            return true;\\n        }\\n        obj = Object.getPrototypeOf(obj)\\n    }\\n    return false\\n    }\\n    else{\\n        return false\\n        }\\n};\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "# Complexity\\n- Time complexity:\\nO(n^2)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n   if(obj!==undefined && classFunction!==null){ \\n       while(obj!==null ){\\n        if(obj.constructor === classFunction){\\n            return true;\\n        }\\n        obj = Object.getPrototypeOf(obj)\\n    }\\n    return false\\n    }\\n    else{\\n        return false\\n        }\\n};\\n",
                "codeTag": "Java"
            },
            {
                "id": 3476786,
                "title": "easy-to-understand-2-solution-why-prototype-instanceof-method",
                "content": "\\n# Code\\n```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n\\n    while(obj!=null){\\n\\n        if(classFunction===obj.constructor)return true;\\n        obj=Object.getPrototypeOf(obj);\\n    }\\n    return false;\\n\\n        //first apporoch\\n\\n};\\n\\n```\\n\\n```\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n\\n    if(obj===null || obj===undefined || typeof classFunction !==\\'function\\')\\nreturn false;\\n\\n     return Object(obj) instanceof classFunction;\\n}\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n\\n    while(obj!=null){\\n\\n        if(classFunction===obj.constructor)return true;\\n        obj=Object.getPrototypeOf(obj);\\n    }\\n    return false;\\n\\n        //first apporoch\\n\\n};\\n\\n```\n```\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n\\n    if(obj===null || obj===undefined || typeof classFunction !==\\'function\\')\\nreturn false;\\n\\n     return Object(obj) instanceof classFunction;\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3472816,
                "title": "javascript-obj-and-class",
                "content": "# Intuition\\nuse Object.getPrototypeOf and and array to reach the solution\\n\\n# Approach\\nThe function uses `Object.getPrototypeOf()` to get the prototype of the value object, and then traverses the prototype chain by repeatedly calling `Object.getPrototypeOf()` until either it reaches the end of the chain (i.e., the prototype is null), or it finds a prototype that matches the prototype property of the classFunction.\\n# Complexity\\n- Time complexity:\\nThe time complexity of this code is O(h), where h is the height of the prototype chain from the object\\'s constructor to the Object constructor.\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n if (obj === null || obj === undefined) {\\n    return false;\\n  }\\n\\n  let currentPrototype = Object.getPrototypeOf(obj);\\n\\n  while (currentPrototype !== null) {\\n    if (currentPrototype === classFunction?.prototype) {\\n      return true;\\n    }\\n    currentPrototype = Object.getPrototypeOf(currentPrototype);\\n  }\\n\\n  return false;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n if (obj === null || obj === undefined) {\\n    return false;\\n  }\\n\\n  let currentPrototype = Object.getPrototypeOf(obj);\\n\\n  while (currentPrototype !== null) {\\n    if (currentPrototype === classFunction?.prototype) {\\n      return true;\\n    }\\n    currentPrototype = Object.getPrototypeOf(currentPrototype);\\n  }\\n\\n  return false;\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3467053,
                "title": "what-i-is-the-solutions-after-10-attempts-time-108ms-57-19-space-54-2mb-5-2",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe first thought was usage of any direct javascript attribute isinstance(obj, Class); but thought was like we have to add extra attribute to class to get it reflected into object. still i did\\'nt believed the prototype attributes were pass by referenc; so that was my last attempt; i have been trying `obj instanceof classFn;`, comparing `constructor.name` etc. then the thought directly came to check weather class attribute change will reflect in object and it worked.  \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nBy now, you might be understood how it works. \\nCreated a prototype named `foobar` (which i am confident no objects have) and assigned a function to it. But that made 2 big problem. \\n\\n- When `null` get passed as object and classFunction, `prototypes` couldnot get accessed / rewritten. \\n\\n- When I tried `checkIfInstanceOf([], Symbol)` will reflect correct output in trial run and on browsers; yet give wrong answers in Submission which caused almost 4 Wrong submissions. the issue was; reusing the same method by _executer_ gets the previous value. \\n\\n# Complexity\\n- Time complexity: 108ms (57.19%)\\n- Space complexity: 54.2MB (5.2%) \\n\\n# Code\\n```\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (typeof classFunction !== \\'function\\' || obj == null ) { \\n        return false\\n    }\\n    classFunction.prototype.foobar = () => true;\\n    let out = (obj.foobar &&  obj.foobar()) || false;\\n\\n    // I feel repeated testing makes issue there.\\n    delete classFunction.prototype.foobar;   \\n    return out\\n};\\n```\\n\\n# Improvements\\nI can maek the `classFunction.prototype.foobar = true` instead of callback; if no workaround cheat\\'s \\n\\nI am nogt much satisfied with the result. but still I believe this is the method LeetCode expected.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (typeof classFunction !== \\'function\\' || obj == null ) { \\n        return false\\n    }\\n    classFunction.prototype.foobar = () => true;\\n    let out = (obj.foobar &&  obj.foobar()) || false;\\n\\n    // I feel repeated testing makes issue there.\\n    delete classFunction.prototype.foobar;   \\n    return out\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3465161,
                "title": "object-getprototypeof-js-solution",
                "content": "\\nThe core concept of this problem teaches us about **instanceof** or **Object.getPrototypeOf()** as we work with **[[Prototype]] properties** and **inheritance**\\n\\n### Explanation\\n\\nThis problem wants us to checks whether the value is an instance of the given class or its superclass\\n\\nThis problem `obj` represent the object we are going to check and `classFunction` will represent the class or superclass to check against\\n\\n\\n\\n### Object.getPrototypeOf()\\n\\nGet the prototype of `obj` , which is an object that contains properties and methods that `obj` can use.\\n\\n `obj` prototype chain will be iterated over, checking whether the constructor of the prototype is the same as `classFunction`\\n\\nIf the constructor of the prototype is the same as `classFunction`, the function returns **true** because `obj` is an instance of `classFunction`.\\n\\nWe will return **false** if no match is found\\n\\n\\n### Code\\n```\\n// if typeof classFunction !== \\'function\\'instances cannot be created\\n// return false without iterating over the prototype chain of obj\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  if (obj === null || obj === undefined || typeof classFunction !== \\'function\\') {\\n    return false;\\n  }\\n\\n \\n  let protoChain = Object.getPrototypeOf(obj);\\n\\n  // Iterate over its prototype chain of obj\\n  while (protoChain) {\\n    if (protoChain.constructor === classFunction) {\\n      return true;\\n    }\\n\\n    // Get the next prototype in the chain\\n    protoChain = Object.getPrototypeOf(protoChain);\\n  }\\n\\n  return false;\\n};\\n```\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n// if typeof classFunction !== \\'function\\'instances cannot be created\\n// return false without iterating over the prototype chain of obj\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  if (obj === null || obj === undefined || typeof classFunction !== \\'function\\') {\\n    return false;\\n  }\\n\\n \\n  let protoChain = Object.getPrototypeOf(obj);\\n\\n  // Iterate over its prototype chain of obj\\n  while (protoChain) {\\n    if (protoChain.constructor === classFunction) {\\n      return true;\\n    }\\n\\n    // Get the next prototype in the chain\\n    protoChain = Object.getPrototypeOf(protoChain);\\n  }\\n\\n  return false;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3461990,
                "title": "check-if-an-object-is-an-instance-of-a-class",
                "content": "# Intuition\\nThe goal is to check whether a given value is an instance of a given class or superclass. We can do this by iterating through the prototype chain of the given value and checking if any of the prototypes matches the given class.\\n# Approach\\nWe use a while loop to iterate through the prototype chain of the given value. In each iteration, we check if the constructor of the current object matches the given class. If it does, we return true. If we reach the end of the prototype chain (i.e., we have iterated through all the prototypes and reached the Object.prototype), we return false.\\n# Complexity\\n- Time complexity: O(n), where n is the length of the prototype chain of the given value. \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1), since we are not using any additional data structures.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction checkIfInstanceOf(obj, cls) {\\n  if (obj === undefined || obj === null) {\\n    return false;\\n  }\\n  while (obj !== null) {\\n    if (obj.constructor === cls) {\\n      return true;\\n    }\\n    obj = Object.getPrototypeOf(obj);\\n  }\\n  return false;\\n}\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction checkIfInstanceOf(obj, cls) {\\n  if (obj === undefined || obj === null) {\\n    return false;\\n  }\\n  while (obj !== null) {\\n    if (obj.constructor === cls) {\\n      return true;\\n    }\\n    obj = Object.getPrototypeOf(obj);\\n  }\\n  return false;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3453756,
                "title": "easy-explaination-prototype-chaining-javascript",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Base Case: If any $$obj$$ or $$classFunction$$ is $$null$$, return $$false$$.\\n- let $$proto$$ of obj.\\n- Change $$proto$$ from it\\'s prototype chain untill it\\'s $$undefined$$\\n- Return true if proto matches with prototype of $$classFunction$$\\n- Otherwise return false.\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj == null || classFunction == null)\\n        return false;\\n\\n    let proto = obj.__proto__;\\n\\n    while (proto) {\\n        if (proto == classFunction.prototype)\\n            return true;\\n\\n        proto = proto.__proto__;\\n    }\\n\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (obj == null || classFunction == null)\\n        return false;\\n\\n    let proto = obj.__proto__;\\n\\n    while (proto) {\\n        if (proto == classFunction.prototype)\\n            return true;\\n\\n        proto = proto.__proto__;\\n    }\\n\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3453320,
                "title": "brandon",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj!=null)\\n    {\\n        if(obj.constructor === classFunction)\\n        {\\n            return true;\\n        }\\n\\n        obj = Object.getPrototypeOf(obj);\\n\\n    }\\n\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj!=null)\\n    {\\n        if(obj.constructor === classFunction)\\n        {\\n            return true;\\n        }\\n\\n        obj = Object.getPrototypeOf(obj);\\n\\n    }\\n\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3447220,
                "title": "chat-gpt-solution-why-is-it-wrong",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWhy is this wrong ?\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nChat GPT Solution !!!\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  if (obj instanceof classFunction) {\\n    return true;\\n  }\\n  if (classFunction === Object) {\\n    return false;\\n  }\\n  return checkIfInstanceOf(obj, Object.getPrototypeOf(classFunction));\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  if (obj instanceof classFunction) {\\n    return true;\\n  }\\n  if (classFunction === Object) {\\n    return false;\\n  }\\n  return checkIfInstanceOf(obj, Object.getPrototypeOf(classFunction));\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3442793,
                "title": "least-insane-javascript-code",
                "content": "# Intuition\\nJavaScript types are fun. \\n\\nBasics:\\n\\n1. Empty arrays are falsy: `[] == false`.\\n2. Adding two arrays gives you a string `([] + []) === \\'\\'`\\n\\nWhen you try to access an object property with `.` notation, you\\'ll get an error. But if you try to access it with `[]`, JavaScript will coerce whatever\\'s in the brackets to a string and you\\'ll just get `undefined`.\\n\\n```js\\nfalse       =>  ![]\\ntrue        =>  !![]\\n[Array[0]]  =>  [[]]\\nundefined   =>  [][[]] // trying to access [Array[0]] of an empty array []\\n```\\n\\nThat also means we can get every character by accessing constructors. \\n\\n```js\\n([]+[][\"flat\"]) => \\'function flat() { [native code] }\\'\\n([]+[][\"flat\"])[0] => \\'f\\'\\n([]+[][\"flat\"])[1] => \\'u\\'\\n([]+[][\"flat\"])[2] => \\'n\\'\\n// and so on\\n```\\n\\n# Approach\\n\\n1. Come up with a solution by checking prototype inheritance.\\n\\n```js\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    const prototype = classFunction?.prototype;\\n    while (obj != undefined) {\\n        obj = Object.getPrototypeOf(obj);\\n        if (obj === prototype) return true;\\n    }\\n    return false;\\n};\\n```\\n\\n2. Butcher it.\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nconst checkIfInstanceOf = (obj, classFunction) => {\\n    while (obj != [][[]]) {\\n        obj = obj[`${[\"__\"]+(+(211))[\"to\"+String[\"name\"]](31)[1]+(!![]+\"\")[1]+(!![]+[][\"flat\"])[10]+ (!![]+\"\")[0]+(!![]+[][\"flat\"])[10]+[\"__\"]}`];\\n        if (obj === classFunction?.[(+(211))[\"to\"+String[\"name\"]](31)[1]+(!![]+\"\")[1]+(!![]+[][\"flat\"])[10]+(!![]+\"\")[0]+(!![]+[][\"flat\"])[10]+(!![]+\"\")[0]+(+[![]]+[(+(+!+[]+(!+[]+[])[!+[]+!+[]+!+[]]+[+!+[]]+[+[]]+[+[]]+[+[]])+[])])[10]+(+(211))[\"to\"+String[\"name\"]](31)[1]+(!![]+\"\")[3]] ?? [][\"\"]) return !![];\\n        }\\n    return ![];\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\nfalse       =>  ![]\\ntrue        =>  !![]\\n[Array[0]]  =>  [[]]\\nundefined   =>  [][[]] // trying to access [Array[0]] of an empty array []\\n```\n```js\\n([]+[][\"flat\"]) => \\'function flat() { [native code] }\\'\\n([]+[][\"flat\"])[0] => \\'f\\'\\n([]+[][\"flat\"])[1] => \\'u\\'\\n([]+[][\"flat\"])[2] => \\'n\\'\\n// and so on\\n```\n```js\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    const prototype = classFunction?.prototype;\\n    while (obj != undefined) {\\n        obj = Object.getPrototypeOf(obj);\\n        if (obj === prototype) return true;\\n    }\\n    return false;\\n};\\n```\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nconst checkIfInstanceOf = (obj, classFunction) => {\\n    while (obj != [][[]]) {\\n        obj = obj[`${[\"__\"]+(+(211))[\"to\"+String[\"name\"]](31)[1]+(!![]+\"\")[1]+(!![]+[][\"flat\"])[10]+ (!![]+\"\")[0]+(!![]+[][\"flat\"])[10]+[\"__\"]}`];\\n        if (obj === classFunction?.[(+(211))[\"to\"+String[\"name\"]](31)[1]+(!![]+\"\")[1]+(!![]+[][\"flat\"])[10]+(!![]+\"\")[0]+(!![]+[][\"flat\"])[10]+(!![]+\"\")[0]+(+[![]]+[(+(+!+[]+(!+[]+[])[!+[]+!+[]+!+[]]+[+!+[]]+[+[]]+[+[]]+[+[]])+[])])[10]+(+(211))[\"to\"+String[\"name\"]](31)[1]+(!![]+\"\")[3]] ?? [][\"\"]) return !![];\\n        }\\n    return ![];\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3440173,
                "title": "simple-answer-refer-to-hint",
                "content": "# Intuition\\nRefer to Hint\\n\\n# Approach\\nAs suggested from the Hint, trace the parent type until the Object \"root\"\\n\\n# Complexity\\n- Time complexity: N/A\\n\\n- Space complexity: N/A\\n\\n# Code\\n```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    if (obj == null || classFunction == null) {\\n        //Check not null or undefined\\n        return false;\\n    }\\n    if (typeof classFunction !== \\'function\\') {\\n        //if classFunction is not object, then no need to compare\\n        return false;\\n    }\\n    if (typeof obj === \\'object\\') {\\n        //if it is a object already, simply use instanceof\\n        return obj instanceof classFunction;\\n    }\\n\\n    try {\\n        //check the object\\'s prototype\\n        let ptype = obj;\\n        do {\\n            //check it\\'s parent types\\n            ptype = Object.getPrototypeOf(ptype);\\n            if (ptype === classFunction.prototype) {\\n                return true;\\n            }\\n        }\\n        //ends at Object level\\n        while (ptype !== Object.prototype)\\n    } catch (e) {\\n        return false;\\n    }\\n    return false;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    if (obj == null || classFunction == null) {\\n        //Check not null or undefined\\n        return false;\\n    }\\n    if (typeof classFunction !== \\'function\\') {\\n        //if classFunction is not object, then no need to compare\\n        return false;\\n    }\\n    if (typeof obj === \\'object\\') {\\n        //if it is a object already, simply use instanceof\\n        return obj instanceof classFunction;\\n    }\\n\\n    try {\\n        //check the object\\'s prototype\\n        let ptype = obj;\\n        do {\\n            //check it\\'s parent types\\n            ptype = Object.getPrototypeOf(ptype);\\n            if (ptype === classFunction.prototype) {\\n                return true;\\n            }\\n        }\\n        //ends at Object level\\n        while (ptype !== Object.prototype)\\n    } catch (e) {\\n        return false;\\n    }\\n    return false;\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3437696,
                "title": "javascript-1-line-solution",
                "content": "```\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    return ![obj == null, typeof obj == null, typeof classFunction !== \\'function\\'].some(Boolean) && Object(obj) instanceof classFunction;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    return ![obj == null, typeof obj == null, typeof classFunction !== \\'function\\'].some(Boolean) && Object(obj) instanceof classFunction;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3436850,
                "title": "simple-javascript-solution",
                "content": "\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false;\\n    return Object(obj) instanceof classFunction\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} object\\n * @param {any} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false;\\n    return Object(obj) instanceof classFunction\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3434806,
                "title": "one-liner-solution",
                "content": "I was trying for a while with this challenge and realized that I shouldn\\'t use === in the condition, so using == does work.\\n```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n\\n    return (typeof obj == null || obj == null || typeof classFunction !== \\'function\\' ) ? false : Object(obj) instanceof classFunction;  \\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n\\n    return (typeof obj == null || obj == null || typeof classFunction !== \\'function\\' ) ? false : Object(obj) instanceof classFunction;  \\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3432732,
                "title": "96-short-typesrcipt-click",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    if(classFunction === undefined || classFunction === null) return false;\\n    if(obj === undefined || obj === null) return false;\\n    if(classFunction.hasOwnProperty(\"name\") === false) return false;\\n    if(classFunction.name === \"Object\") return true;\\n    if(obj === classFunction) return false\\n    if(typeof obj === \\'object\\') return obj instanceof classFunction;\\n    else return typeof obj === classFunction.name.toLowerCase()\\n};\\n    \\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\n\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    if(classFunction === undefined || classFunction === null) return false;\\n    if(obj === undefined || obj === null) return false;\\n    if(classFunction.hasOwnProperty(\"name\") === false) return false;\\n    if(classFunction.name === \"Object\") return true;\\n    if(obj === classFunction) return false\\n    if(typeof obj === \\'object\\') return obj instanceof classFunction;\\n    else return typeof obj === classFunction.name.toLowerCase()\\n};\\n    \\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3426923,
                "title": "clean-js-solution-beginner-friendly",
                "content": "##### Edge cases\\nLets explore possible edge cases\\n```\\n// 1. Check its own prototype\\ncheckIfInstanceOf(Number.prototype, Number); // false\\n\\n// 2. classFunction as undefined\\ncheckIfInstanceOf({}, undefined);\\n\\n// 3. prototype removed\\nlet obj = {};\\nObject.setPrototypeOf(obj, null);\\ncheckIfInstanceOf(obj, Object); // false\\n```\\n\\n##### Code\\n```\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (typeof classFunction !== \\'function\\') {\\n        return false;\\n    }\\n\\n    let currentObj = obj;\\n    while (currentObj != null) {\\n        if (Object.getPrototypeOf(currentObj) === classFunction.prototype) {\\n            return true;\\n        }\\n        currentObj = Object.getPrototypeOf(currentObj);\\n    }\\n\\n    return false;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n// 1. Check its own prototype\\ncheckIfInstanceOf(Number.prototype, Number); // false\\n\\n// 2. classFunction as undefined\\ncheckIfInstanceOf({}, undefined);\\n\\n// 3. prototype removed\\nlet obj = {};\\nObject.setPrototypeOf(obj, null);\\ncheckIfInstanceOf(obj, Object); // false\\n```\n```\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if (typeof classFunction !== \\'function\\') {\\n        return false;\\n    }\\n\\n    let currentObj = obj;\\n    while (currentObj != null) {\\n        if (Object.getPrototypeOf(currentObj) === classFunction.prototype) {\\n            return true;\\n        }\\n        currentObj = Object.getPrototypeOf(currentObj);\\n    }\\n\\n    return false;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3425656,
                "title": "solution-using-hints",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === undefined){\\n        return false\\n    }\\n    while(obj !== null){\\n        const expectedPrototype = Object.getPrototypeOf(obj);\\n        if(expectedPrototype === classFunction?.prototype){\\n            return true;\\n        }\\n        obj = expectedPrototype;\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === undefined){\\n        return false\\n    }\\n    while(obj !== null){\\n        const expectedPrototype = Object.getPrototypeOf(obj);\\n        if(expectedPrototype === classFunction?.prototype){\\n            return true;\\n        }\\n        obj = expectedPrototype;\\n    }\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3423872,
                "title": "js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\')      return false;\\n    return Object(obj) instanceof classFunction\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\')      return false;\\n    return Object(obj) instanceof classFunction\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3418860,
                "title": "3-lines-of-code-with-detailed-explanation-easy-to-understand",
                "content": "First, check if the object `obj` is `null` or if the `classFunction` is not a `function`. If either of these conditions is true, the function returns `false` as the object can\\'t be an instance of the specified class.\\n```\\nif (obj == null || typeof classFunction !== \"function\")\\n  return false;\\n```\\nNext, we check if the `obj`\\'s constructor property is equal to `classFunction`. The constructor property returns a reference to the constructor function that created the instance object. If the constructor property of `obj` is equal to `classFunction`, it means `obj` is an instance of `classFunction`, and the function returns `true`.\\n```\\nobj.constructor === classFunction\\n\\n```\\nIf the previous condition is not met, check if the object\\'s prototype chain contains an instance of the specified class. To do this, first convert the `obj` to an object using `Object(obj)`, then retrieve its prototype using `Object.getPrototypeOf()`. Finally, check if the prototype is an instance of `classFunction` using the `instanceof` operator. If this condition is true, the function returns `true`; otherwise, it returns `false`.\\n```\\nObject.getPrototypeOf(Object(obj)) instanceof classFunction\\n```\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nfunction checkIfInstanceOf(obj, classFunction) {\\n  if (obj == null || typeof classFunction !== \"function\")\\n    return false;\\n  return obj.constructor === classFunction || Object.getPrototypeOf(Object(obj)) instanceof classFunction;\\n}\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nif (obj == null || typeof classFunction !== \"function\")\\n  return false;\\n```\n```\\nobj.constructor === classFunction\\n\\n```\n```\\nObject.getPrototypeOf(Object(obj)) instanceof classFunction\\n```\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nfunction checkIfInstanceOf(obj, classFunction) {\\n  if (obj == null || typeof classFunction !== \"function\")\\n    return false;\\n  return obj.constructor === classFunction || Object.getPrototypeOf(Object(obj)) instanceof classFunction;\\n}\\n\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3417081,
                "title": "faster-than-94-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj == null || classFunction == null || !(classFunction instanceof Function)){return false;}\\n    return Object(obj) instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj == null || classFunction == null || !(classFunction instanceof Function)){return false;}\\n    return Object(obj) instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3416949,
                "title": "recursive-solution-using-prototype",
                "content": "Recursive Solution using Prototype\\n```\\nvar checkIfInstanceOf = function fn(obj, classFunction) {\\n    //if obj is null or undefined return false\\n    if(obj===null || obj===undefined) return false;\\n    // if obj prototype is null then return false\\n    if(obj.__proto__===null) return false;\\n    // if obj prototype constructor is classFunction then return true\\n    if(obj.__proto__.constructor==classFunction) return true;\\n    // call  function recursively with object prototype\\n    else return fn(obj.__proto__,classFunction);\\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\nvar checkIfInstanceOf = function fn(obj, classFunction) {\\n    //if obj is null or undefined return false\\n    if(obj===null || obj===undefined) return false;\\n    // if obj prototype is null then return false\\n    if(obj.__proto__===null) return false;\\n    // if obj prototype constructor is classFunction then return true\\n    if(obj.__proto__.constructor==classFunction) return true;\\n    // call  function recursively with object prototype\\n    else return fn(obj.__proto__,classFunction);\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3416389,
                "title": "js-typescript-easiest-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n```javascript []\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  if (obj === null || typeof obj === \"undefined\" || typeof classFunction !== \"function\") {\\n    return false;\\n  }\\n  var proto = Object.getPrototypeOf(obj);\\n  while (proto !== null) {\\n    if (proto.constructor === classFunction) {\\n      return true;\\n    }\\n    proto = Object.getPrototypeOf(proto);\\n  }\\n  return false;\\n};\\n```\\n```TypeScript []\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n  if (obj === null || typeof obj === \"undefined\" || typeof classFunction !== \"function\") {\\n    return false;\\n  }\\n  let proto = Object.getPrototypeOf(obj);\\n  while (proto !== null) {\\n    if (proto.constructor === classFunction) {\\n      return true;\\n    }\\n    proto = Object.getPrototypeOf(proto);\\n  }\\n  return false;\\n}\\n\\n```\\n",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```javascript []\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n  if (obj === null || typeof obj === \"undefined\" || typeof classFunction !== \"function\") {\\n    return false;\\n  }\\n  var proto = Object.getPrototypeOf(obj);\\n  while (proto !== null) {\\n    if (proto.constructor === classFunction) {\\n      return true;\\n    }\\n    proto = Object.getPrototypeOf(proto);\\n  }\\n  return false;\\n};\\n```\n```TypeScript []\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n  if (obj === null || typeof obj === \"undefined\" || typeof classFunction !== \"function\") {\\n    return false;\\n  }\\n  let proto = Object.getPrototypeOf(obj);\\n  while (proto !== null) {\\n    if (proto.constructor === classFunction) {\\n      return true;\\n    }\\n    proto = Object.getPrototypeOf(proto);\\n  }\\n  return false;\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3415915,
                "title": "solution-with-while-in-javascript",
                "content": "\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n\\n    while(obj != null)\\n    {\\n        if(obj.constructor === classFunction)\\n        {\\n            return true;\\n        }\\n\\n        obj = Object.getPrototypeOf(obj);\\n    }\\n\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n\\n    while(obj != null)\\n    {\\n        if(obj.constructor === classFunction)\\n        {\\n            return true;\\n        }\\n\\n        obj = Object.getPrototypeOf(obj);\\n    }\\n\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3414532,
                "title": "solution-using-object-getprototypeof-function",
                "content": "\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined) return false\\n    while (Object.getPrototypeOf(obj) !== null){\\n        obj = Object.getPrototypeOf(obj)\\n        if (obj.constructor === classFunction) return true\\n    }\\n    return false\\n};\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined) return false\\n    while (Object.getPrototypeOf(obj) !== null){\\n        obj = Object.getPrototypeOf(obj)\\n        if (obj.constructor === classFunction) return true\\n    }\\n    return false\\n};\\n",
                "codeTag": "Java"
            },
            {
                "id": 3413731,
                "title": "easiest-javascript-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false\\n    return Object(obj) instanceof classFunction\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false\\n    return Object(obj) instanceof classFunction\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3413509,
                "title": "very-very-very-easy-cake-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj!=null)\\n    {\\n        if(obj.constructor === classFunction)\\n        {\\n            return true;\\n        }\\n\\n        obj = Object.getPrototypeOf(obj);\\n\\n    }\\n\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj!=null)\\n    {\\n        if(obj.constructor === classFunction)\\n        {\\n            return true;\\n        }\\n\\n        obj = Object.getPrototypeOf(obj);\\n\\n    }\\n\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3413486,
                "title": "easy-simple-javascript-solution-100-fast-easily-understandable",
                "content": "# Code Explaination\\n```\\nThis code defines a function called checkIfInstanceOf, which takes in two arguments: obj and classFunction.\\n\\nThe purpose of the function is to check whether the given object obj is an instance of the specified class classFunction.\\n\\nThe function first checks whether obj is null or undefined, or whether classFunction is not a function. If any of these conditions are true, the function immediately returns false.\\n\\nOtherwise, the function uses the instanceof operator to check whether the object obj is an instance of the specified class classFunction.\\n\\nThe instanceof operator checks whether the prototype property of the specified class classFunction is in the prototype chain of obj. If this is true, then obj is considered to be an instance of classFunction.\\n\\nFinally, the function returns the result of the instanceof check as either true or false.\\n\\n```\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nThis code defines a function called checkIfInstanceOf, which takes in two arguments: obj and classFunction.\\n\\nThe purpose of the function is to check whether the given object obj is an instance of the specified class classFunction.\\n\\nThe function first checks whether obj is null or undefined, or whether classFunction is not a function. If any of these conditions are true, the function immediately returns false.\\n\\nOtherwise, the function uses the instanceof operator to check whether the object obj is an instance of the specified class classFunction.\\n\\nThe instanceof operator checks whether the prototype property of the specified class classFunction is in the prototype chain of obj. If this is true, then obj is considered to be an instance of classFunction.\\n\\nFinally, the function returns the result of the instanceof check as either true or false.\\n\\n```\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj === null || obj === undefined || typeof classFunction !== \\'function\\') return false;\\n    return Object(obj) instanceof classFunction;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3413433,
                "title": "simple-solution-by-switch",
                "content": "\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    switch(true){\\n       case typeof(classFunction)!=\\'function\\':\\n            return false;\\n       case classFunction === Object:\\n            return obj != null;\\n       case obj instanceof classFunction:\\n       case typeof(obj) == classFunction.name.toLowerCase():\\n            return true;        \\n       default: return false;\\n    }\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    switch(true){\\n       case typeof(classFunction)!=\\'function\\':\\n            return false;\\n       case classFunction === Object:\\n            return obj != null;\\n       case obj instanceof classFunction:\\n       case typeof(obj) == classFunction.name.toLowerCase():\\n            return true;        \\n       default: return false;\\n    }\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3413335,
                "title": "typescript-solution-easy-fast-explained",
                "content": "# Approach\\nJavaScript is `Prototybe Based` Language which means it handles inheritence with Prototype Chain.\\nSo we will start to ask if `Obj` & `classFunction` are the same constructor ?. if yes then `true` else we will make `obj` points to the value of it\\'s parent prototybe or in another word.\\nIf the obj isn\\'t the same as `classFunction` we will check if his father is.\\n\\nAnd so on till we either find that they are the same or break the loop when we reached the end.\\n\\n# Complexity\\n- Time complexity: $$O(N)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```ts\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    while ( obj != null ) {\\n        if ( obj.constructor === classFunction ) return true;\\n        else obj = Object.getPrototypeOf(obj);\\n    }\\n\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```ts\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    while ( obj != null ) {\\n        if ( obj.constructor === classFunction ) return true;\\n        else obj = Object.getPrototypeOf(obj);\\n    }\\n\\n    return false;\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3413115,
                "title": "direct-approach",
                "content": "# Approach\\nValidate `null` & `undefined`, then `try & catch` new Class() and Symbol().\\n\\n# Complexity\\n- Time complexity: 100ms\\n- Space complexity: 52.4mb\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nconst getProto = (obj) => Object.getPrototypeOf(obj);\\nconst validate = (obj) => ![null, undefined].includes(obj);\\n\\nconst checkIfInstanceOf = (obj, classFunction) => {\\n  if (!validate(obj) || !validate(classFunction)) return false;\\n\\n  const compareFn = (() => {\\n    try {\\n      return getProto(new classFunction());\\n    } catch {\\n      try {\\n        if (typeof classFunction() === \"symbol\") {\\n          return getProto(classFunction());\\n        }\\n      } catch {\\n        return false;\\n      }\\n\\n      return false;\\n    }\\n  })();\\n  if (compareFn === false) return false;\\n\\n  do {\\n    obj = getProto(obj);\\n    if (obj === compareFn) return true;\\n  } while (obj !== null);\\n\\n  return false;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nconst getProto = (obj) => Object.getPrototypeOf(obj);\\nconst validate = (obj) => ![null, undefined].includes(obj);\\n\\nconst checkIfInstanceOf = (obj, classFunction) => {\\n  if (!validate(obj) || !validate(classFunction)) return false;\\n\\n  const compareFn = (() => {\\n    try {\\n      return getProto(new classFunction());\\n    } catch {\\n      try {\\n        if (typeof classFunction() === \"symbol\") {\\n          return getProto(classFunction());\\n        }\\n      } catch {\\n        return false;\\n      }\\n\\n      return false;\\n    }\\n  })();\\n  if (compareFn === false) return false;\\n\\n  do {\\n    obj = getProto(obj);\\n    if (obj === compareFn) return true;\\n  } while (obj !== null);\\n\\n  return false;\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3411277,
                "title": "o-1-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj==null || classFunction==null || !classFunction.call) return false;\\n    return classFunction === Object || obj.__proto__ === classFunction.prototype || obj instanceof classFunction\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    if(obj==null || classFunction==null || !classFunction.call) return false;\\n    return classFunction === Object || obj.__proto__ === classFunction.prototype || obj instanceof classFunction\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3410764,
                "title": "very-simple-solution-javascript-must-see-kuntal",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj!=null){\\n        if(obj.constructor==classFunction)\\n            return true\\n        obj = Object.getPrototypeOf(obj);\\n    }\\n    return false\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Object} object\\n * @param {Function} classFunction\\n * @return {boolean}\\n */\\nvar checkIfInstanceOf = function(obj, classFunction) {\\n    while(obj!=null){\\n        if(obj.constructor==classFunction)\\n            return true\\n        obj = Object.getPrototypeOf(obj);\\n    }\\n    return false\\n};\\n\\n/**\\n * checkIfInstanceOf(new Date(), Date); // true\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3409845,
                "title": "check-for-falsy-values-and-typeof-classfunction",
                "content": "# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    if ([null, undefined].includes(obj) || typeof classFunction !== \\'function\\')\\n        return false;\\n    \\n    return Object(obj) instanceof classFunction;\\n}\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction checkIfInstanceOf(obj: any, classFunction: any): boolean {\\n    if ([null, undefined].includes(obj) || typeof classFunction !== \\'function\\')\\n        return false;\\n    \\n    return Object(obj) instanceof classFunction;\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1881480,
                "content": [
                    {
                        "username": "shrinivas2",
                        "content": "func = () => checkIfInstanceOf(5, Number) this should return false, yes I know the number gets auto converted to an object when you use toFixed() on it, but thats not what we are looking here for right? We are looking for if something is instance of something. and 5 is not and instance of Number, 5 is primitive not a object, and if you expect it to work, change the description and the question."
                    },
                    {
                        "username": "Jpaulsisson",
                        "content": "I'm at a complete loss on why checkInstanceOf(0, Object) is supposed to return true. \nI'm a bit of a newbie but why is a zero an object or prototype of Object?"
                    },
                    {
                        "username": "rahiljakir",
                        "content": "Object is Super class of all the classes that\\'s why any instance, is also instance of Object.  like if you know JAVA, any object can be assigned to Object type reference."
                    },
                    {
                        "username": "tifv",
                        "content": "[@Google3048](/Google3048) One should note that call `Number(0)` is not constructing a `Number` object, it just returns a primitive. To construct an actual `Number` object you have to use `new Number(0)`. It will then be an instance of `Object` (as determined by `instanceof`), but `new Number(0) === 0` will be `false`."
                    },
                    {
                        "username": "zomiib",
                        "content": "Technically a 0 is not an object because 0 is a primitive which is \"data that is not an object and has no methods or properties\" (MDN). So why does it return true then? JavaScript does something commonly known as \"auto-boxing\" which basically means the primitive gets automatically wrapped in an object. \\nSo when you call 0.toFixed() it takes the 0 puts it in a Number object {0} and calls that new objects .toFixed() method which does work.\\n\\nI dont really like this question because a primitive is NOT an object as referenced by \"instanceof\". But because of auto-boxing wrapping the primitive ( 0 ) into an object, that new object is then obviously an object so LeetCode expects true."
                    },
                    {
                        "username": "Google3048",
                        "content": "`Number(0) === 0`, Number is a builtin object. If you open a browser console you can type `Number.` and scroll through what functions are available in the autocomplete."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "This is the most non-Acceptance task (in JS topic), and i wanna help you. What do you need to do in this task? You need to know if the \"object\" argument is an instance of the given class, or an instance of the parent class of the given class, and so on. I won't give you the exact algorithm, but I will give you a hint. If the function takes two arguments (12 and Object), then the output will be true, try to understand why. Try typing in browser console  `(12).__proto__` ,` (12).__proto__.__proto__`, `Number.prototype`, `Object.prototype`  and finally `(12).__proto__.__proto__.__proto__`"
                    },
                    {
                        "username": "Mohammed312x",
                        "content": "first of all thanks for the tip it helped me learn alot of thigns. am a newbie but bear with me please. If we follow this logic in this case, doesn\\'t it mean we will divert from the point of the question ? because we will be checking the parent of the given class and not the class it self. and if it returns false for the given class and true for its parent class, doesn\\'t it mean that the object and the class that we are suppose to check are like siblings ?"
                    },
                    {
                        "username": "cupcea21",
                        "content": "() => checkIfInstanceOf(5n, Object)\n() => checkIfInstanceOf(5n, BigInt)\nboth are expected to be true, how the hell ?"
                    },
                    {
                        "username": "lindablus",
                        "content": "It\\'s a bit confusing what an instance \"has access\" to a class\\' methods means.  My interpretation is that this means \"you can read properties (or properties thereof, etc.) to get at a method in the class\". \\n\\nFor instance, accessing a static method requires accessing the constructor property and then accessing the static method on the constructor.  Getting an overridden superclass\\' staticmethod might require accessing the \"__proto__\" property of the object (which is a bit dubious whether this is really a legal way of \"accessing\" things).\\n\\nA more sane way to pose this would be \"get instanceof working correctly with primitive types\"."
                    },
                    {
                        "username": "cionx",
                        "content": "It is neither specified nor clear what it means for an object to have access to a class\\u2019s methods. From the current formulation and the given examples, I was under the impression that the test case\\n```javascript\\n() => {\\n  function Container(value) {\\n    this.value = value;\\n  }\\n  function Box(value) {\\n    this.value = value;\\n  }\\n  const b = new Box(1);\\n  return checkIfInstanceOf(b, Container);\\n}\\n```\\nshould output `true`, since `b` implements all the properties required by a `Container` object. But the expected output is `false`."
                    },
                    {
                        "username": "tifv",
                        "content": "I guess the intended formulation would be something like \\u201Cvalue `A` is an instance of class `B` if the set of methods of `A` will reflect any changes made to `B.prototype` (unless these changes happen to be overridden by some `B`\\'s subclass)\\u201D."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "`() => checkIfInstanceOf(Symbol(), Object)`\\nexpects true. \\nThe MDN docs however state that symbol returns a primitive, which is not an object. GPT also says that Symbol is not an instance of Object. Shouldn\\'t it return false? "
                    },
                    {
                        "username": "tifv",
                        "content": "The problem specifies exactly when \\u201Can object is considered an instance of a given class\\u201D, and it is different from the usual JavaScript meaning of the phrase. `Symbol()` is indeed a primitive, but it derives its methods from `Symbol` class, which is a subclass of `Object`. According to the definition given by the problem (to emphasize, a non-standard one), it means `Symbol()` is an instance of `Object`."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "```\\n() => checkIfInstanceOf(Object, Object)\\n```\\nExpected `true`?\\nReally? Are you serious?\\nBut how about the example 3:\\n\\n>Input: func = () => checkIfInstanceOf(Date, Date)\\n>Output: false\\n>Explanation: A date constructor cannot logically be an instance of itself.\\n"
                    },
                    {
                        "username": "mpingo",
                        "content": "[@tifv](/tifv) \\nThanks for this."
                    },
                    {
                        "username": "tifv",
                        "content": "[@mpingo](/mpingo) It works the same way as the original question. `Array` object is an instance of `Function` class (as all constructors are). And `Function` class is a subclass of `Object` class."
                    },
                    {
                        "username": "mpingo",
                        "content": "Also, \\n\\n    () => checkIfInstanceOf(Array, Object)\\n\\nExpected `true` ???"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) The task is wrong and unclear!\\nOne more argument:\\n\\nIf we consider that \\n\\n> an object is considered an instance of a given class if that object has access to that class\\'s methods\\n\\n...then the code below should return `true`, but it returns `false`.\\n\\n```js\\n//editorial solution\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n      return false;\\n    let currPotentialPrototype = Object.getPrototypeOf(obj);\\n    while (currPotentialPrototype !== null) {\\n      if (currPotentialPrototype === classFunction.prototype) return true;\\n      currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n    }\\n    return false;\\n};\\n\\nclass A { someMethod(){ console.log(\\'someMethod is called\\') } }\\nclass B {}\\nconst b = new B;\\n\\nb.someMethod = A.prototype.someMethod\\nb.someMethod() // outs \\'someMethod is called\\' - OK\\n\\nconsole.log( checkIfInstanceOf( b, A ) ) // false - WRONG\\n```\\nThe instance of B borrows all methods from class A and it should to be considered as instance of A because this matches to the main condition of the task.\\nAlthough, the editorial solution gives the wrong answer (like many other accepted solutions).\\n\\nAgain: the task is unclear!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) The problem is defined by its statement; examples by themselves should not provide definition (but rather eliminate its incorrect interpretations). The problem defines “an instance of” with “an object is considered an instance of a given class if that object has access to that class's methods”, and this definition actually covers it all.\n\n`Date.prototype` contains a method `.getFullYear()`, therefore any instance of `Date` has access to this method. But the `Date` object itself does not have this method. Therefore, `Date` object is not “an instance of” `Date` class.\n\nOn the other hand, `Object.prototype` defines a bunch of methods, such as `.hasOwnProperty()`. Any instance of `Object` has this method or an overridden version of it, which is considered as “having access to the method”. In particular, the `Object` object itself has all methods defined by `Function.prototype`, which in turn has all methods defined by `Object.prototype` (overriding some of them). Therefore, the `Object` object is “an instance of” `Function` class, and also “an instance of” `Object` class.\n\nSimilarly, a primitive value has no class whatsoever, but it has some methods. Primitive numbers, for example, take their methods from `Number.prototype` (for example, `(1.0).toString === Number.prototype.toString` is true), which means that a primitive number is “an instance of” `Number` class.\n\n(I'm writing “an instance of” in quotes because the way it is defined in this problem is different from what it usually means in JavaScript.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) Thanks for your answer. I understand how it resolves by JS - it\\'s illogical and ruins the OOP principles, but it\\'s the piece of the language (Class is abstraction and object is a class instance. And class cannot be an instance anyway! Neither an instance of themself nor instance of another class). \\nBut the task description does not clearly cover this.\\nAlso the 3rd example describes that we have to correct this behavior. But task not describes that for Object we have to still remain default behavior.\\n\\nAlso why primitive value is instance of Number? It is illogical, but it is task condition.\\n\\nI\\'m talking about the task is unclear and have to describe this additionally!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) Why \\u201CObject cannot be instance of Object much like Date cannot be instance of Date\\u201D? All objects in JavaScript are instances of `Object`. In this regard `Object` is quite special; `Date` simply does not possess this property. (Much like in Python `isinstance(int, int)` returns `False`, but `isinstance(type, type)` returns `True`, which is completely logical.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@vadya-coder](/vadya-coder) thanks for answer. Actually, I understand how it resolves in JS under the hood, but it is unlogical especially due to 3rd example - Object cannot be instance of Object much like Date cannot be instance of Date!\nIt requires to be fixed with additional checks in a code to be logical.\nOr the task must have an additional condition describes that.\nNow the task is very unclear! And the statistics of only 28% of acceptance rate just confirms this."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "\"Object\" it is function. `Object.__proto__ === Function.prototype`. `Object.__proto__.__proto__   ===  Object`  Return TRUE. And \"Date\" it\\'s also function `Date.__proto__.__proto__ === Object`"
                    },
                    {
                        "username": "KondratovP",
                        "content": "i wonder what is a practical use of such function"
                    },
                    {
                        "username": "JRcodesgood",
                        "content": "This feels really odd in the JS idiosyncracies. Becuase null is an instance of Object. obj = null and classFunction = Object should return true as I understand it"
                    },
                    {
                        "username": "tifv",
                        "content": "\\u201CFor this problem, an object is considered an instance of a given class if that object has access to that class\\'s methods\\u201D and `null` doesn\\'t have any methods, so\\u2026"
                    }
                ]
            },
            {
                "id": 1870199,
                "content": [
                    {
                        "username": "shrinivas2",
                        "content": "func = () => checkIfInstanceOf(5, Number) this should return false, yes I know the number gets auto converted to an object when you use toFixed() on it, but thats not what we are looking here for right? We are looking for if something is instance of something. and 5 is not and instance of Number, 5 is primitive not a object, and if you expect it to work, change the description and the question."
                    },
                    {
                        "username": "Jpaulsisson",
                        "content": "I'm at a complete loss on why checkInstanceOf(0, Object) is supposed to return true. \nI'm a bit of a newbie but why is a zero an object or prototype of Object?"
                    },
                    {
                        "username": "rahiljakir",
                        "content": "Object is Super class of all the classes that\\'s why any instance, is also instance of Object.  like if you know JAVA, any object can be assigned to Object type reference."
                    },
                    {
                        "username": "tifv",
                        "content": "[@Google3048](/Google3048) One should note that call `Number(0)` is not constructing a `Number` object, it just returns a primitive. To construct an actual `Number` object you have to use `new Number(0)`. It will then be an instance of `Object` (as determined by `instanceof`), but `new Number(0) === 0` will be `false`."
                    },
                    {
                        "username": "zomiib",
                        "content": "Technically a 0 is not an object because 0 is a primitive which is \"data that is not an object and has no methods or properties\" (MDN). So why does it return true then? JavaScript does something commonly known as \"auto-boxing\" which basically means the primitive gets automatically wrapped in an object. \\nSo when you call 0.toFixed() it takes the 0 puts it in a Number object {0} and calls that new objects .toFixed() method which does work.\\n\\nI dont really like this question because a primitive is NOT an object as referenced by \"instanceof\". But because of auto-boxing wrapping the primitive ( 0 ) into an object, that new object is then obviously an object so LeetCode expects true."
                    },
                    {
                        "username": "Google3048",
                        "content": "`Number(0) === 0`, Number is a builtin object. If you open a browser console you can type `Number.` and scroll through what functions are available in the autocomplete."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "This is the most non-Acceptance task (in JS topic), and i wanna help you. What do you need to do in this task? You need to know if the \"object\" argument is an instance of the given class, or an instance of the parent class of the given class, and so on. I won't give you the exact algorithm, but I will give you a hint. If the function takes two arguments (12 and Object), then the output will be true, try to understand why. Try typing in browser console  `(12).__proto__` ,` (12).__proto__.__proto__`, `Number.prototype`, `Object.prototype`  and finally `(12).__proto__.__proto__.__proto__`"
                    },
                    {
                        "username": "Mohammed312x",
                        "content": "first of all thanks for the tip it helped me learn alot of thigns. am a newbie but bear with me please. If we follow this logic in this case, doesn\\'t it mean we will divert from the point of the question ? because we will be checking the parent of the given class and not the class it self. and if it returns false for the given class and true for its parent class, doesn\\'t it mean that the object and the class that we are suppose to check are like siblings ?"
                    },
                    {
                        "username": "cupcea21",
                        "content": "() => checkIfInstanceOf(5n, Object)\n() => checkIfInstanceOf(5n, BigInt)\nboth are expected to be true, how the hell ?"
                    },
                    {
                        "username": "lindablus",
                        "content": "It\\'s a bit confusing what an instance \"has access\" to a class\\' methods means.  My interpretation is that this means \"you can read properties (or properties thereof, etc.) to get at a method in the class\". \\n\\nFor instance, accessing a static method requires accessing the constructor property and then accessing the static method on the constructor.  Getting an overridden superclass\\' staticmethod might require accessing the \"__proto__\" property of the object (which is a bit dubious whether this is really a legal way of \"accessing\" things).\\n\\nA more sane way to pose this would be \"get instanceof working correctly with primitive types\"."
                    },
                    {
                        "username": "cionx",
                        "content": "It is neither specified nor clear what it means for an object to have access to a class\\u2019s methods. From the current formulation and the given examples, I was under the impression that the test case\\n```javascript\\n() => {\\n  function Container(value) {\\n    this.value = value;\\n  }\\n  function Box(value) {\\n    this.value = value;\\n  }\\n  const b = new Box(1);\\n  return checkIfInstanceOf(b, Container);\\n}\\n```\\nshould output `true`, since `b` implements all the properties required by a `Container` object. But the expected output is `false`."
                    },
                    {
                        "username": "tifv",
                        "content": "I guess the intended formulation would be something like \\u201Cvalue `A` is an instance of class `B` if the set of methods of `A` will reflect any changes made to `B.prototype` (unless these changes happen to be overridden by some `B`\\'s subclass)\\u201D."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "`() => checkIfInstanceOf(Symbol(), Object)`\\nexpects true. \\nThe MDN docs however state that symbol returns a primitive, which is not an object. GPT also says that Symbol is not an instance of Object. Shouldn\\'t it return false? "
                    },
                    {
                        "username": "tifv",
                        "content": "The problem specifies exactly when \\u201Can object is considered an instance of a given class\\u201D, and it is different from the usual JavaScript meaning of the phrase. `Symbol()` is indeed a primitive, but it derives its methods from `Symbol` class, which is a subclass of `Object`. According to the definition given by the problem (to emphasize, a non-standard one), it means `Symbol()` is an instance of `Object`."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "```\\n() => checkIfInstanceOf(Object, Object)\\n```\\nExpected `true`?\\nReally? Are you serious?\\nBut how about the example 3:\\n\\n>Input: func = () => checkIfInstanceOf(Date, Date)\\n>Output: false\\n>Explanation: A date constructor cannot logically be an instance of itself.\\n"
                    },
                    {
                        "username": "mpingo",
                        "content": "[@tifv](/tifv) \\nThanks for this."
                    },
                    {
                        "username": "tifv",
                        "content": "[@mpingo](/mpingo) It works the same way as the original question. `Array` object is an instance of `Function` class (as all constructors are). And `Function` class is a subclass of `Object` class."
                    },
                    {
                        "username": "mpingo",
                        "content": "Also, \\n\\n    () => checkIfInstanceOf(Array, Object)\\n\\nExpected `true` ???"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) The task is wrong and unclear!\\nOne more argument:\\n\\nIf we consider that \\n\\n> an object is considered an instance of a given class if that object has access to that class\\'s methods\\n\\n...then the code below should return `true`, but it returns `false`.\\n\\n```js\\n//editorial solution\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n      return false;\\n    let currPotentialPrototype = Object.getPrototypeOf(obj);\\n    while (currPotentialPrototype !== null) {\\n      if (currPotentialPrototype === classFunction.prototype) return true;\\n      currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n    }\\n    return false;\\n};\\n\\nclass A { someMethod(){ console.log(\\'someMethod is called\\') } }\\nclass B {}\\nconst b = new B;\\n\\nb.someMethod = A.prototype.someMethod\\nb.someMethod() // outs \\'someMethod is called\\' - OK\\n\\nconsole.log( checkIfInstanceOf( b, A ) ) // false - WRONG\\n```\\nThe instance of B borrows all methods from class A and it should to be considered as instance of A because this matches to the main condition of the task.\\nAlthough, the editorial solution gives the wrong answer (like many other accepted solutions).\\n\\nAgain: the task is unclear!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) The problem is defined by its statement; examples by themselves should not provide definition (but rather eliminate its incorrect interpretations). The problem defines “an instance of” with “an object is considered an instance of a given class if that object has access to that class's methods”, and this definition actually covers it all.\n\n`Date.prototype` contains a method `.getFullYear()`, therefore any instance of `Date` has access to this method. But the `Date` object itself does not have this method. Therefore, `Date` object is not “an instance of” `Date` class.\n\nOn the other hand, `Object.prototype` defines a bunch of methods, such as `.hasOwnProperty()`. Any instance of `Object` has this method or an overridden version of it, which is considered as “having access to the method”. In particular, the `Object` object itself has all methods defined by `Function.prototype`, which in turn has all methods defined by `Object.prototype` (overriding some of them). Therefore, the `Object` object is “an instance of” `Function` class, and also “an instance of” `Object` class.\n\nSimilarly, a primitive value has no class whatsoever, but it has some methods. Primitive numbers, for example, take their methods from `Number.prototype` (for example, `(1.0).toString === Number.prototype.toString` is true), which means that a primitive number is “an instance of” `Number` class.\n\n(I'm writing “an instance of” in quotes because the way it is defined in this problem is different from what it usually means in JavaScript.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) Thanks for your answer. I understand how it resolves by JS - it\\'s illogical and ruins the OOP principles, but it\\'s the piece of the language (Class is abstraction and object is a class instance. And class cannot be an instance anyway! Neither an instance of themself nor instance of another class). \\nBut the task description does not clearly cover this.\\nAlso the 3rd example describes that we have to correct this behavior. But task not describes that for Object we have to still remain default behavior.\\n\\nAlso why primitive value is instance of Number? It is illogical, but it is task condition.\\n\\nI\\'m talking about the task is unclear and have to describe this additionally!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) Why \\u201CObject cannot be instance of Object much like Date cannot be instance of Date\\u201D? All objects in JavaScript are instances of `Object`. In this regard `Object` is quite special; `Date` simply does not possess this property. (Much like in Python `isinstance(int, int)` returns `False`, but `isinstance(type, type)` returns `True`, which is completely logical.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@vadya-coder](/vadya-coder) thanks for answer. Actually, I understand how it resolves in JS under the hood, but it is unlogical especially due to 3rd example - Object cannot be instance of Object much like Date cannot be instance of Date!\nIt requires to be fixed with additional checks in a code to be logical.\nOr the task must have an additional condition describes that.\nNow the task is very unclear! And the statistics of only 28% of acceptance rate just confirms this."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "\"Object\" it is function. `Object.__proto__ === Function.prototype`. `Object.__proto__.__proto__   ===  Object`  Return TRUE. And \"Date\" it\\'s also function `Date.__proto__.__proto__ === Object`"
                    },
                    {
                        "username": "KondratovP",
                        "content": "i wonder what is a practical use of such function"
                    },
                    {
                        "username": "JRcodesgood",
                        "content": "This feels really odd in the JS idiosyncracies. Becuase null is an instance of Object. obj = null and classFunction = Object should return true as I understand it"
                    },
                    {
                        "username": "tifv",
                        "content": "\\u201CFor this problem, an object is considered an instance of a given class if that object has access to that class\\'s methods\\u201D and `null` doesn\\'t have any methods, so\\u2026"
                    }
                ]
            },
            {
                "id": 1885128,
                "content": [
                    {
                        "username": "shrinivas2",
                        "content": "func = () => checkIfInstanceOf(5, Number) this should return false, yes I know the number gets auto converted to an object when you use toFixed() on it, but thats not what we are looking here for right? We are looking for if something is instance of something. and 5 is not and instance of Number, 5 is primitive not a object, and if you expect it to work, change the description and the question."
                    },
                    {
                        "username": "Jpaulsisson",
                        "content": "I'm at a complete loss on why checkInstanceOf(0, Object) is supposed to return true. \nI'm a bit of a newbie but why is a zero an object or prototype of Object?"
                    },
                    {
                        "username": "rahiljakir",
                        "content": "Object is Super class of all the classes that\\'s why any instance, is also instance of Object.  like if you know JAVA, any object can be assigned to Object type reference."
                    },
                    {
                        "username": "tifv",
                        "content": "[@Google3048](/Google3048) One should note that call `Number(0)` is not constructing a `Number` object, it just returns a primitive. To construct an actual `Number` object you have to use `new Number(0)`. It will then be an instance of `Object` (as determined by `instanceof`), but `new Number(0) === 0` will be `false`."
                    },
                    {
                        "username": "zomiib",
                        "content": "Technically a 0 is not an object because 0 is a primitive which is \"data that is not an object and has no methods or properties\" (MDN). So why does it return true then? JavaScript does something commonly known as \"auto-boxing\" which basically means the primitive gets automatically wrapped in an object. \\nSo when you call 0.toFixed() it takes the 0 puts it in a Number object {0} and calls that new objects .toFixed() method which does work.\\n\\nI dont really like this question because a primitive is NOT an object as referenced by \"instanceof\". But because of auto-boxing wrapping the primitive ( 0 ) into an object, that new object is then obviously an object so LeetCode expects true."
                    },
                    {
                        "username": "Google3048",
                        "content": "`Number(0) === 0`, Number is a builtin object. If you open a browser console you can type `Number.` and scroll through what functions are available in the autocomplete."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "This is the most non-Acceptance task (in JS topic), and i wanna help you. What do you need to do in this task? You need to know if the \"object\" argument is an instance of the given class, or an instance of the parent class of the given class, and so on. I won't give you the exact algorithm, but I will give you a hint. If the function takes two arguments (12 and Object), then the output will be true, try to understand why. Try typing in browser console  `(12).__proto__` ,` (12).__proto__.__proto__`, `Number.prototype`, `Object.prototype`  and finally `(12).__proto__.__proto__.__proto__`"
                    },
                    {
                        "username": "Mohammed312x",
                        "content": "first of all thanks for the tip it helped me learn alot of thigns. am a newbie but bear with me please. If we follow this logic in this case, doesn\\'t it mean we will divert from the point of the question ? because we will be checking the parent of the given class and not the class it self. and if it returns false for the given class and true for its parent class, doesn\\'t it mean that the object and the class that we are suppose to check are like siblings ?"
                    },
                    {
                        "username": "cupcea21",
                        "content": "() => checkIfInstanceOf(5n, Object)\n() => checkIfInstanceOf(5n, BigInt)\nboth are expected to be true, how the hell ?"
                    },
                    {
                        "username": "lindablus",
                        "content": "It\\'s a bit confusing what an instance \"has access\" to a class\\' methods means.  My interpretation is that this means \"you can read properties (or properties thereof, etc.) to get at a method in the class\". \\n\\nFor instance, accessing a static method requires accessing the constructor property and then accessing the static method on the constructor.  Getting an overridden superclass\\' staticmethod might require accessing the \"__proto__\" property of the object (which is a bit dubious whether this is really a legal way of \"accessing\" things).\\n\\nA more sane way to pose this would be \"get instanceof working correctly with primitive types\"."
                    },
                    {
                        "username": "cionx",
                        "content": "It is neither specified nor clear what it means for an object to have access to a class\\u2019s methods. From the current formulation and the given examples, I was under the impression that the test case\\n```javascript\\n() => {\\n  function Container(value) {\\n    this.value = value;\\n  }\\n  function Box(value) {\\n    this.value = value;\\n  }\\n  const b = new Box(1);\\n  return checkIfInstanceOf(b, Container);\\n}\\n```\\nshould output `true`, since `b` implements all the properties required by a `Container` object. But the expected output is `false`."
                    },
                    {
                        "username": "tifv",
                        "content": "I guess the intended formulation would be something like \\u201Cvalue `A` is an instance of class `B` if the set of methods of `A` will reflect any changes made to `B.prototype` (unless these changes happen to be overridden by some `B`\\'s subclass)\\u201D."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "`() => checkIfInstanceOf(Symbol(), Object)`\\nexpects true. \\nThe MDN docs however state that symbol returns a primitive, which is not an object. GPT also says that Symbol is not an instance of Object. Shouldn\\'t it return false? "
                    },
                    {
                        "username": "tifv",
                        "content": "The problem specifies exactly when \\u201Can object is considered an instance of a given class\\u201D, and it is different from the usual JavaScript meaning of the phrase. `Symbol()` is indeed a primitive, but it derives its methods from `Symbol` class, which is a subclass of `Object`. According to the definition given by the problem (to emphasize, a non-standard one), it means `Symbol()` is an instance of `Object`."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "```\\n() => checkIfInstanceOf(Object, Object)\\n```\\nExpected `true`?\\nReally? Are you serious?\\nBut how about the example 3:\\n\\n>Input: func = () => checkIfInstanceOf(Date, Date)\\n>Output: false\\n>Explanation: A date constructor cannot logically be an instance of itself.\\n"
                    },
                    {
                        "username": "mpingo",
                        "content": "[@tifv](/tifv) \\nThanks for this."
                    },
                    {
                        "username": "tifv",
                        "content": "[@mpingo](/mpingo) It works the same way as the original question. `Array` object is an instance of `Function` class (as all constructors are). And `Function` class is a subclass of `Object` class."
                    },
                    {
                        "username": "mpingo",
                        "content": "Also, \\n\\n    () => checkIfInstanceOf(Array, Object)\\n\\nExpected `true` ???"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) The task is wrong and unclear!\\nOne more argument:\\n\\nIf we consider that \\n\\n> an object is considered an instance of a given class if that object has access to that class\\'s methods\\n\\n...then the code below should return `true`, but it returns `false`.\\n\\n```js\\n//editorial solution\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n      return false;\\n    let currPotentialPrototype = Object.getPrototypeOf(obj);\\n    while (currPotentialPrototype !== null) {\\n      if (currPotentialPrototype === classFunction.prototype) return true;\\n      currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n    }\\n    return false;\\n};\\n\\nclass A { someMethod(){ console.log(\\'someMethod is called\\') } }\\nclass B {}\\nconst b = new B;\\n\\nb.someMethod = A.prototype.someMethod\\nb.someMethod() // outs \\'someMethod is called\\' - OK\\n\\nconsole.log( checkIfInstanceOf( b, A ) ) // false - WRONG\\n```\\nThe instance of B borrows all methods from class A and it should to be considered as instance of A because this matches to the main condition of the task.\\nAlthough, the editorial solution gives the wrong answer (like many other accepted solutions).\\n\\nAgain: the task is unclear!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) The problem is defined by its statement; examples by themselves should not provide definition (but rather eliminate its incorrect interpretations). The problem defines “an instance of” with “an object is considered an instance of a given class if that object has access to that class's methods”, and this definition actually covers it all.\n\n`Date.prototype` contains a method `.getFullYear()`, therefore any instance of `Date` has access to this method. But the `Date` object itself does not have this method. Therefore, `Date` object is not “an instance of” `Date` class.\n\nOn the other hand, `Object.prototype` defines a bunch of methods, such as `.hasOwnProperty()`. Any instance of `Object` has this method or an overridden version of it, which is considered as “having access to the method”. In particular, the `Object` object itself has all methods defined by `Function.prototype`, which in turn has all methods defined by `Object.prototype` (overriding some of them). Therefore, the `Object` object is “an instance of” `Function` class, and also “an instance of” `Object` class.\n\nSimilarly, a primitive value has no class whatsoever, but it has some methods. Primitive numbers, for example, take their methods from `Number.prototype` (for example, `(1.0).toString === Number.prototype.toString` is true), which means that a primitive number is “an instance of” `Number` class.\n\n(I'm writing “an instance of” in quotes because the way it is defined in this problem is different from what it usually means in JavaScript.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) Thanks for your answer. I understand how it resolves by JS - it\\'s illogical and ruins the OOP principles, but it\\'s the piece of the language (Class is abstraction and object is a class instance. And class cannot be an instance anyway! Neither an instance of themself nor instance of another class). \\nBut the task description does not clearly cover this.\\nAlso the 3rd example describes that we have to correct this behavior. But task not describes that for Object we have to still remain default behavior.\\n\\nAlso why primitive value is instance of Number? It is illogical, but it is task condition.\\n\\nI\\'m talking about the task is unclear and have to describe this additionally!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) Why \\u201CObject cannot be instance of Object much like Date cannot be instance of Date\\u201D? All objects in JavaScript are instances of `Object`. In this regard `Object` is quite special; `Date` simply does not possess this property. (Much like in Python `isinstance(int, int)` returns `False`, but `isinstance(type, type)` returns `True`, which is completely logical.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@vadya-coder](/vadya-coder) thanks for answer. Actually, I understand how it resolves in JS under the hood, but it is unlogical especially due to 3rd example - Object cannot be instance of Object much like Date cannot be instance of Date!\nIt requires to be fixed with additional checks in a code to be logical.\nOr the task must have an additional condition describes that.\nNow the task is very unclear! And the statistics of only 28% of acceptance rate just confirms this."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "\"Object\" it is function. `Object.__proto__ === Function.prototype`. `Object.__proto__.__proto__   ===  Object`  Return TRUE. And \"Date\" it\\'s also function `Date.__proto__.__proto__ === Object`"
                    },
                    {
                        "username": "KondratovP",
                        "content": "i wonder what is a practical use of such function"
                    },
                    {
                        "username": "JRcodesgood",
                        "content": "This feels really odd in the JS idiosyncracies. Becuase null is an instance of Object. obj = null and classFunction = Object should return true as I understand it"
                    },
                    {
                        "username": "tifv",
                        "content": "\\u201CFor this problem, an object is considered an instance of a given class if that object has access to that class\\'s methods\\u201D and `null` doesn\\'t have any methods, so\\u2026"
                    }
                ]
            },
            {
                "id": 2052450,
                "content": [
                    {
                        "username": "shrinivas2",
                        "content": "func = () => checkIfInstanceOf(5, Number) this should return false, yes I know the number gets auto converted to an object when you use toFixed() on it, but thats not what we are looking here for right? We are looking for if something is instance of something. and 5 is not and instance of Number, 5 is primitive not a object, and if you expect it to work, change the description and the question."
                    },
                    {
                        "username": "Jpaulsisson",
                        "content": "I'm at a complete loss on why checkInstanceOf(0, Object) is supposed to return true. \nI'm a bit of a newbie but why is a zero an object or prototype of Object?"
                    },
                    {
                        "username": "rahiljakir",
                        "content": "Object is Super class of all the classes that\\'s why any instance, is also instance of Object.  like if you know JAVA, any object can be assigned to Object type reference."
                    },
                    {
                        "username": "tifv",
                        "content": "[@Google3048](/Google3048) One should note that call `Number(0)` is not constructing a `Number` object, it just returns a primitive. To construct an actual `Number` object you have to use `new Number(0)`. It will then be an instance of `Object` (as determined by `instanceof`), but `new Number(0) === 0` will be `false`."
                    },
                    {
                        "username": "zomiib",
                        "content": "Technically a 0 is not an object because 0 is a primitive which is \"data that is not an object and has no methods or properties\" (MDN). So why does it return true then? JavaScript does something commonly known as \"auto-boxing\" which basically means the primitive gets automatically wrapped in an object. \\nSo when you call 0.toFixed() it takes the 0 puts it in a Number object {0} and calls that new objects .toFixed() method which does work.\\n\\nI dont really like this question because a primitive is NOT an object as referenced by \"instanceof\". But because of auto-boxing wrapping the primitive ( 0 ) into an object, that new object is then obviously an object so LeetCode expects true."
                    },
                    {
                        "username": "Google3048",
                        "content": "`Number(0) === 0`, Number is a builtin object. If you open a browser console you can type `Number.` and scroll through what functions are available in the autocomplete."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "This is the most non-Acceptance task (in JS topic), and i wanna help you. What do you need to do in this task? You need to know if the \"object\" argument is an instance of the given class, or an instance of the parent class of the given class, and so on. I won't give you the exact algorithm, but I will give you a hint. If the function takes two arguments (12 and Object), then the output will be true, try to understand why. Try typing in browser console  `(12).__proto__` ,` (12).__proto__.__proto__`, `Number.prototype`, `Object.prototype`  and finally `(12).__proto__.__proto__.__proto__`"
                    },
                    {
                        "username": "Mohammed312x",
                        "content": "first of all thanks for the tip it helped me learn alot of thigns. am a newbie but bear with me please. If we follow this logic in this case, doesn\\'t it mean we will divert from the point of the question ? because we will be checking the parent of the given class and not the class it self. and if it returns false for the given class and true for its parent class, doesn\\'t it mean that the object and the class that we are suppose to check are like siblings ?"
                    },
                    {
                        "username": "cupcea21",
                        "content": "() => checkIfInstanceOf(5n, Object)\n() => checkIfInstanceOf(5n, BigInt)\nboth are expected to be true, how the hell ?"
                    },
                    {
                        "username": "lindablus",
                        "content": "It\\'s a bit confusing what an instance \"has access\" to a class\\' methods means.  My interpretation is that this means \"you can read properties (or properties thereof, etc.) to get at a method in the class\". \\n\\nFor instance, accessing a static method requires accessing the constructor property and then accessing the static method on the constructor.  Getting an overridden superclass\\' staticmethod might require accessing the \"__proto__\" property of the object (which is a bit dubious whether this is really a legal way of \"accessing\" things).\\n\\nA more sane way to pose this would be \"get instanceof working correctly with primitive types\"."
                    },
                    {
                        "username": "cionx",
                        "content": "It is neither specified nor clear what it means for an object to have access to a class\\u2019s methods. From the current formulation and the given examples, I was under the impression that the test case\\n```javascript\\n() => {\\n  function Container(value) {\\n    this.value = value;\\n  }\\n  function Box(value) {\\n    this.value = value;\\n  }\\n  const b = new Box(1);\\n  return checkIfInstanceOf(b, Container);\\n}\\n```\\nshould output `true`, since `b` implements all the properties required by a `Container` object. But the expected output is `false`."
                    },
                    {
                        "username": "tifv",
                        "content": "I guess the intended formulation would be something like \\u201Cvalue `A` is an instance of class `B` if the set of methods of `A` will reflect any changes made to `B.prototype` (unless these changes happen to be overridden by some `B`\\'s subclass)\\u201D."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "`() => checkIfInstanceOf(Symbol(), Object)`\\nexpects true. \\nThe MDN docs however state that symbol returns a primitive, which is not an object. GPT also says that Symbol is not an instance of Object. Shouldn\\'t it return false? "
                    },
                    {
                        "username": "tifv",
                        "content": "The problem specifies exactly when \\u201Can object is considered an instance of a given class\\u201D, and it is different from the usual JavaScript meaning of the phrase. `Symbol()` is indeed a primitive, but it derives its methods from `Symbol` class, which is a subclass of `Object`. According to the definition given by the problem (to emphasize, a non-standard one), it means `Symbol()` is an instance of `Object`."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "```\\n() => checkIfInstanceOf(Object, Object)\\n```\\nExpected `true`?\\nReally? Are you serious?\\nBut how about the example 3:\\n\\n>Input: func = () => checkIfInstanceOf(Date, Date)\\n>Output: false\\n>Explanation: A date constructor cannot logically be an instance of itself.\\n"
                    },
                    {
                        "username": "mpingo",
                        "content": "[@tifv](/tifv) \\nThanks for this."
                    },
                    {
                        "username": "tifv",
                        "content": "[@mpingo](/mpingo) It works the same way as the original question. `Array` object is an instance of `Function` class (as all constructors are). And `Function` class is a subclass of `Object` class."
                    },
                    {
                        "username": "mpingo",
                        "content": "Also, \\n\\n    () => checkIfInstanceOf(Array, Object)\\n\\nExpected `true` ???"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) The task is wrong and unclear!\\nOne more argument:\\n\\nIf we consider that \\n\\n> an object is considered an instance of a given class if that object has access to that class\\'s methods\\n\\n...then the code below should return `true`, but it returns `false`.\\n\\n```js\\n//editorial solution\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n      return false;\\n    let currPotentialPrototype = Object.getPrototypeOf(obj);\\n    while (currPotentialPrototype !== null) {\\n      if (currPotentialPrototype === classFunction.prototype) return true;\\n      currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n    }\\n    return false;\\n};\\n\\nclass A { someMethod(){ console.log(\\'someMethod is called\\') } }\\nclass B {}\\nconst b = new B;\\n\\nb.someMethod = A.prototype.someMethod\\nb.someMethod() // outs \\'someMethod is called\\' - OK\\n\\nconsole.log( checkIfInstanceOf( b, A ) ) // false - WRONG\\n```\\nThe instance of B borrows all methods from class A and it should to be considered as instance of A because this matches to the main condition of the task.\\nAlthough, the editorial solution gives the wrong answer (like many other accepted solutions).\\n\\nAgain: the task is unclear!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) The problem is defined by its statement; examples by themselves should not provide definition (but rather eliminate its incorrect interpretations). The problem defines “an instance of” with “an object is considered an instance of a given class if that object has access to that class's methods”, and this definition actually covers it all.\n\n`Date.prototype` contains a method `.getFullYear()`, therefore any instance of `Date` has access to this method. But the `Date` object itself does not have this method. Therefore, `Date` object is not “an instance of” `Date` class.\n\nOn the other hand, `Object.prototype` defines a bunch of methods, such as `.hasOwnProperty()`. Any instance of `Object` has this method or an overridden version of it, which is considered as “having access to the method”. In particular, the `Object` object itself has all methods defined by `Function.prototype`, which in turn has all methods defined by `Object.prototype` (overriding some of them). Therefore, the `Object` object is “an instance of” `Function` class, and also “an instance of” `Object` class.\n\nSimilarly, a primitive value has no class whatsoever, but it has some methods. Primitive numbers, for example, take their methods from `Number.prototype` (for example, `(1.0).toString === Number.prototype.toString` is true), which means that a primitive number is “an instance of” `Number` class.\n\n(I'm writing “an instance of” in quotes because the way it is defined in this problem is different from what it usually means in JavaScript.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) Thanks for your answer. I understand how it resolves by JS - it\\'s illogical and ruins the OOP principles, but it\\'s the piece of the language (Class is abstraction and object is a class instance. And class cannot be an instance anyway! Neither an instance of themself nor instance of another class). \\nBut the task description does not clearly cover this.\\nAlso the 3rd example describes that we have to correct this behavior. But task not describes that for Object we have to still remain default behavior.\\n\\nAlso why primitive value is instance of Number? It is illogical, but it is task condition.\\n\\nI\\'m talking about the task is unclear and have to describe this additionally!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) Why \\u201CObject cannot be instance of Object much like Date cannot be instance of Date\\u201D? All objects in JavaScript are instances of `Object`. In this regard `Object` is quite special; `Date` simply does not possess this property. (Much like in Python `isinstance(int, int)` returns `False`, but `isinstance(type, type)` returns `True`, which is completely logical.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@vadya-coder](/vadya-coder) thanks for answer. Actually, I understand how it resolves in JS under the hood, but it is unlogical especially due to 3rd example - Object cannot be instance of Object much like Date cannot be instance of Date!\nIt requires to be fixed with additional checks in a code to be logical.\nOr the task must have an additional condition describes that.\nNow the task is very unclear! And the statistics of only 28% of acceptance rate just confirms this."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "\"Object\" it is function. `Object.__proto__ === Function.prototype`. `Object.__proto__.__proto__   ===  Object`  Return TRUE. And \"Date\" it\\'s also function `Date.__proto__.__proto__ === Object`"
                    },
                    {
                        "username": "KondratovP",
                        "content": "i wonder what is a practical use of such function"
                    },
                    {
                        "username": "JRcodesgood",
                        "content": "This feels really odd in the JS idiosyncracies. Becuase null is an instance of Object. obj = null and classFunction = Object should return true as I understand it"
                    },
                    {
                        "username": "tifv",
                        "content": "\\u201CFor this problem, an object is considered an instance of a given class if that object has access to that class\\'s methods\\u201D and `null` doesn\\'t have any methods, so\\u2026"
                    }
                ]
            },
            {
                "id": 2024340,
                "content": [
                    {
                        "username": "shrinivas2",
                        "content": "func = () => checkIfInstanceOf(5, Number) this should return false, yes I know the number gets auto converted to an object when you use toFixed() on it, but thats not what we are looking here for right? We are looking for if something is instance of something. and 5 is not and instance of Number, 5 is primitive not a object, and if you expect it to work, change the description and the question."
                    },
                    {
                        "username": "Jpaulsisson",
                        "content": "I'm at a complete loss on why checkInstanceOf(0, Object) is supposed to return true. \nI'm a bit of a newbie but why is a zero an object or prototype of Object?"
                    },
                    {
                        "username": "rahiljakir",
                        "content": "Object is Super class of all the classes that\\'s why any instance, is also instance of Object.  like if you know JAVA, any object can be assigned to Object type reference."
                    },
                    {
                        "username": "tifv",
                        "content": "[@Google3048](/Google3048) One should note that call `Number(0)` is not constructing a `Number` object, it just returns a primitive. To construct an actual `Number` object you have to use `new Number(0)`. It will then be an instance of `Object` (as determined by `instanceof`), but `new Number(0) === 0` will be `false`."
                    },
                    {
                        "username": "zomiib",
                        "content": "Technically a 0 is not an object because 0 is a primitive which is \"data that is not an object and has no methods or properties\" (MDN). So why does it return true then? JavaScript does something commonly known as \"auto-boxing\" which basically means the primitive gets automatically wrapped in an object. \\nSo when you call 0.toFixed() it takes the 0 puts it in a Number object {0} and calls that new objects .toFixed() method which does work.\\n\\nI dont really like this question because a primitive is NOT an object as referenced by \"instanceof\". But because of auto-boxing wrapping the primitive ( 0 ) into an object, that new object is then obviously an object so LeetCode expects true."
                    },
                    {
                        "username": "Google3048",
                        "content": "`Number(0) === 0`, Number is a builtin object. If you open a browser console you can type `Number.` and scroll through what functions are available in the autocomplete."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "This is the most non-Acceptance task (in JS topic), and i wanna help you. What do you need to do in this task? You need to know if the \"object\" argument is an instance of the given class, or an instance of the parent class of the given class, and so on. I won't give you the exact algorithm, but I will give you a hint. If the function takes two arguments (12 and Object), then the output will be true, try to understand why. Try typing in browser console  `(12).__proto__` ,` (12).__proto__.__proto__`, `Number.prototype`, `Object.prototype`  and finally `(12).__proto__.__proto__.__proto__`"
                    },
                    {
                        "username": "Mohammed312x",
                        "content": "first of all thanks for the tip it helped me learn alot of thigns. am a newbie but bear with me please. If we follow this logic in this case, doesn\\'t it mean we will divert from the point of the question ? because we will be checking the parent of the given class and not the class it self. and if it returns false for the given class and true for its parent class, doesn\\'t it mean that the object and the class that we are suppose to check are like siblings ?"
                    },
                    {
                        "username": "cupcea21",
                        "content": "() => checkIfInstanceOf(5n, Object)\n() => checkIfInstanceOf(5n, BigInt)\nboth are expected to be true, how the hell ?"
                    },
                    {
                        "username": "lindablus",
                        "content": "It\\'s a bit confusing what an instance \"has access\" to a class\\' methods means.  My interpretation is that this means \"you can read properties (or properties thereof, etc.) to get at a method in the class\". \\n\\nFor instance, accessing a static method requires accessing the constructor property and then accessing the static method on the constructor.  Getting an overridden superclass\\' staticmethod might require accessing the \"__proto__\" property of the object (which is a bit dubious whether this is really a legal way of \"accessing\" things).\\n\\nA more sane way to pose this would be \"get instanceof working correctly with primitive types\"."
                    },
                    {
                        "username": "cionx",
                        "content": "It is neither specified nor clear what it means for an object to have access to a class\\u2019s methods. From the current formulation and the given examples, I was under the impression that the test case\\n```javascript\\n() => {\\n  function Container(value) {\\n    this.value = value;\\n  }\\n  function Box(value) {\\n    this.value = value;\\n  }\\n  const b = new Box(1);\\n  return checkIfInstanceOf(b, Container);\\n}\\n```\\nshould output `true`, since `b` implements all the properties required by a `Container` object. But the expected output is `false`."
                    },
                    {
                        "username": "tifv",
                        "content": "I guess the intended formulation would be something like \\u201Cvalue `A` is an instance of class `B` if the set of methods of `A` will reflect any changes made to `B.prototype` (unless these changes happen to be overridden by some `B`\\'s subclass)\\u201D."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "`() => checkIfInstanceOf(Symbol(), Object)`\\nexpects true. \\nThe MDN docs however state that symbol returns a primitive, which is not an object. GPT also says that Symbol is not an instance of Object. Shouldn\\'t it return false? "
                    },
                    {
                        "username": "tifv",
                        "content": "The problem specifies exactly when \\u201Can object is considered an instance of a given class\\u201D, and it is different from the usual JavaScript meaning of the phrase. `Symbol()` is indeed a primitive, but it derives its methods from `Symbol` class, which is a subclass of `Object`. According to the definition given by the problem (to emphasize, a non-standard one), it means `Symbol()` is an instance of `Object`."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "```\\n() => checkIfInstanceOf(Object, Object)\\n```\\nExpected `true`?\\nReally? Are you serious?\\nBut how about the example 3:\\n\\n>Input: func = () => checkIfInstanceOf(Date, Date)\\n>Output: false\\n>Explanation: A date constructor cannot logically be an instance of itself.\\n"
                    },
                    {
                        "username": "mpingo",
                        "content": "[@tifv](/tifv) \\nThanks for this."
                    },
                    {
                        "username": "tifv",
                        "content": "[@mpingo](/mpingo) It works the same way as the original question. `Array` object is an instance of `Function` class (as all constructors are). And `Function` class is a subclass of `Object` class."
                    },
                    {
                        "username": "mpingo",
                        "content": "Also, \\n\\n    () => checkIfInstanceOf(Array, Object)\\n\\nExpected `true` ???"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) The task is wrong and unclear!\\nOne more argument:\\n\\nIf we consider that \\n\\n> an object is considered an instance of a given class if that object has access to that class\\'s methods\\n\\n...then the code below should return `true`, but it returns `false`.\\n\\n```js\\n//editorial solution\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n      return false;\\n    let currPotentialPrototype = Object.getPrototypeOf(obj);\\n    while (currPotentialPrototype !== null) {\\n      if (currPotentialPrototype === classFunction.prototype) return true;\\n      currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n    }\\n    return false;\\n};\\n\\nclass A { someMethod(){ console.log(\\'someMethod is called\\') } }\\nclass B {}\\nconst b = new B;\\n\\nb.someMethod = A.prototype.someMethod\\nb.someMethod() // outs \\'someMethod is called\\' - OK\\n\\nconsole.log( checkIfInstanceOf( b, A ) ) // false - WRONG\\n```\\nThe instance of B borrows all methods from class A and it should to be considered as instance of A because this matches to the main condition of the task.\\nAlthough, the editorial solution gives the wrong answer (like many other accepted solutions).\\n\\nAgain: the task is unclear!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) The problem is defined by its statement; examples by themselves should not provide definition (but rather eliminate its incorrect interpretations). The problem defines “an instance of” with “an object is considered an instance of a given class if that object has access to that class's methods”, and this definition actually covers it all.\n\n`Date.prototype` contains a method `.getFullYear()`, therefore any instance of `Date` has access to this method. But the `Date` object itself does not have this method. Therefore, `Date` object is not “an instance of” `Date` class.\n\nOn the other hand, `Object.prototype` defines a bunch of methods, such as `.hasOwnProperty()`. Any instance of `Object` has this method or an overridden version of it, which is considered as “having access to the method”. In particular, the `Object` object itself has all methods defined by `Function.prototype`, which in turn has all methods defined by `Object.prototype` (overriding some of them). Therefore, the `Object` object is “an instance of” `Function` class, and also “an instance of” `Object` class.\n\nSimilarly, a primitive value has no class whatsoever, but it has some methods. Primitive numbers, for example, take their methods from `Number.prototype` (for example, `(1.0).toString === Number.prototype.toString` is true), which means that a primitive number is “an instance of” `Number` class.\n\n(I'm writing “an instance of” in quotes because the way it is defined in this problem is different from what it usually means in JavaScript.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) Thanks for your answer. I understand how it resolves by JS - it\\'s illogical and ruins the OOP principles, but it\\'s the piece of the language (Class is abstraction and object is a class instance. And class cannot be an instance anyway! Neither an instance of themself nor instance of another class). \\nBut the task description does not clearly cover this.\\nAlso the 3rd example describes that we have to correct this behavior. But task not describes that for Object we have to still remain default behavior.\\n\\nAlso why primitive value is instance of Number? It is illogical, but it is task condition.\\n\\nI\\'m talking about the task is unclear and have to describe this additionally!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) Why \\u201CObject cannot be instance of Object much like Date cannot be instance of Date\\u201D? All objects in JavaScript are instances of `Object`. In this regard `Object` is quite special; `Date` simply does not possess this property. (Much like in Python `isinstance(int, int)` returns `False`, but `isinstance(type, type)` returns `True`, which is completely logical.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@vadya-coder](/vadya-coder) thanks for answer. Actually, I understand how it resolves in JS under the hood, but it is unlogical especially due to 3rd example - Object cannot be instance of Object much like Date cannot be instance of Date!\nIt requires to be fixed with additional checks in a code to be logical.\nOr the task must have an additional condition describes that.\nNow the task is very unclear! And the statistics of only 28% of acceptance rate just confirms this."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "\"Object\" it is function. `Object.__proto__ === Function.prototype`. `Object.__proto__.__proto__   ===  Object`  Return TRUE. And \"Date\" it\\'s also function `Date.__proto__.__proto__ === Object`"
                    },
                    {
                        "username": "KondratovP",
                        "content": "i wonder what is a practical use of such function"
                    },
                    {
                        "username": "JRcodesgood",
                        "content": "This feels really odd in the JS idiosyncracies. Becuase null is an instance of Object. obj = null and classFunction = Object should return true as I understand it"
                    },
                    {
                        "username": "tifv",
                        "content": "\\u201CFor this problem, an object is considered an instance of a given class if that object has access to that class\\'s methods\\u201D and `null` doesn\\'t have any methods, so\\u2026"
                    }
                ]
            },
            {
                "id": 1915340,
                "content": [
                    {
                        "username": "shrinivas2",
                        "content": "func = () => checkIfInstanceOf(5, Number) this should return false, yes I know the number gets auto converted to an object when you use toFixed() on it, but thats not what we are looking here for right? We are looking for if something is instance of something. and 5 is not and instance of Number, 5 is primitive not a object, and if you expect it to work, change the description and the question."
                    },
                    {
                        "username": "Jpaulsisson",
                        "content": "I'm at a complete loss on why checkInstanceOf(0, Object) is supposed to return true. \nI'm a bit of a newbie but why is a zero an object or prototype of Object?"
                    },
                    {
                        "username": "rahiljakir",
                        "content": "Object is Super class of all the classes that\\'s why any instance, is also instance of Object.  like if you know JAVA, any object can be assigned to Object type reference."
                    },
                    {
                        "username": "tifv",
                        "content": "[@Google3048](/Google3048) One should note that call `Number(0)` is not constructing a `Number` object, it just returns a primitive. To construct an actual `Number` object you have to use `new Number(0)`. It will then be an instance of `Object` (as determined by `instanceof`), but `new Number(0) === 0` will be `false`."
                    },
                    {
                        "username": "zomiib",
                        "content": "Technically a 0 is not an object because 0 is a primitive which is \"data that is not an object and has no methods or properties\" (MDN). So why does it return true then? JavaScript does something commonly known as \"auto-boxing\" which basically means the primitive gets automatically wrapped in an object. \\nSo when you call 0.toFixed() it takes the 0 puts it in a Number object {0} and calls that new objects .toFixed() method which does work.\\n\\nI dont really like this question because a primitive is NOT an object as referenced by \"instanceof\". But because of auto-boxing wrapping the primitive ( 0 ) into an object, that new object is then obviously an object so LeetCode expects true."
                    },
                    {
                        "username": "Google3048",
                        "content": "`Number(0) === 0`, Number is a builtin object. If you open a browser console you can type `Number.` and scroll through what functions are available in the autocomplete."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "This is the most non-Acceptance task (in JS topic), and i wanna help you. What do you need to do in this task? You need to know if the \"object\" argument is an instance of the given class, or an instance of the parent class of the given class, and so on. I won't give you the exact algorithm, but I will give you a hint. If the function takes two arguments (12 and Object), then the output will be true, try to understand why. Try typing in browser console  `(12).__proto__` ,` (12).__proto__.__proto__`, `Number.prototype`, `Object.prototype`  and finally `(12).__proto__.__proto__.__proto__`"
                    },
                    {
                        "username": "Mohammed312x",
                        "content": "first of all thanks for the tip it helped me learn alot of thigns. am a newbie but bear with me please. If we follow this logic in this case, doesn\\'t it mean we will divert from the point of the question ? because we will be checking the parent of the given class and not the class it self. and if it returns false for the given class and true for its parent class, doesn\\'t it mean that the object and the class that we are suppose to check are like siblings ?"
                    },
                    {
                        "username": "cupcea21",
                        "content": "() => checkIfInstanceOf(5n, Object)\n() => checkIfInstanceOf(5n, BigInt)\nboth are expected to be true, how the hell ?"
                    },
                    {
                        "username": "lindablus",
                        "content": "It\\'s a bit confusing what an instance \"has access\" to a class\\' methods means.  My interpretation is that this means \"you can read properties (or properties thereof, etc.) to get at a method in the class\". \\n\\nFor instance, accessing a static method requires accessing the constructor property and then accessing the static method on the constructor.  Getting an overridden superclass\\' staticmethod might require accessing the \"__proto__\" property of the object (which is a bit dubious whether this is really a legal way of \"accessing\" things).\\n\\nA more sane way to pose this would be \"get instanceof working correctly with primitive types\"."
                    },
                    {
                        "username": "cionx",
                        "content": "It is neither specified nor clear what it means for an object to have access to a class\\u2019s methods. From the current formulation and the given examples, I was under the impression that the test case\\n```javascript\\n() => {\\n  function Container(value) {\\n    this.value = value;\\n  }\\n  function Box(value) {\\n    this.value = value;\\n  }\\n  const b = new Box(1);\\n  return checkIfInstanceOf(b, Container);\\n}\\n```\\nshould output `true`, since `b` implements all the properties required by a `Container` object. But the expected output is `false`."
                    },
                    {
                        "username": "tifv",
                        "content": "I guess the intended formulation would be something like \\u201Cvalue `A` is an instance of class `B` if the set of methods of `A` will reflect any changes made to `B.prototype` (unless these changes happen to be overridden by some `B`\\'s subclass)\\u201D."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "`() => checkIfInstanceOf(Symbol(), Object)`\\nexpects true. \\nThe MDN docs however state that symbol returns a primitive, which is not an object. GPT also says that Symbol is not an instance of Object. Shouldn\\'t it return false? "
                    },
                    {
                        "username": "tifv",
                        "content": "The problem specifies exactly when \\u201Can object is considered an instance of a given class\\u201D, and it is different from the usual JavaScript meaning of the phrase. `Symbol()` is indeed a primitive, but it derives its methods from `Symbol` class, which is a subclass of `Object`. According to the definition given by the problem (to emphasize, a non-standard one), it means `Symbol()` is an instance of `Object`."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "```\\n() => checkIfInstanceOf(Object, Object)\\n```\\nExpected `true`?\\nReally? Are you serious?\\nBut how about the example 3:\\n\\n>Input: func = () => checkIfInstanceOf(Date, Date)\\n>Output: false\\n>Explanation: A date constructor cannot logically be an instance of itself.\\n"
                    },
                    {
                        "username": "mpingo",
                        "content": "[@tifv](/tifv) \\nThanks for this."
                    },
                    {
                        "username": "tifv",
                        "content": "[@mpingo](/mpingo) It works the same way as the original question. `Array` object is an instance of `Function` class (as all constructors are). And `Function` class is a subclass of `Object` class."
                    },
                    {
                        "username": "mpingo",
                        "content": "Also, \\n\\n    () => checkIfInstanceOf(Array, Object)\\n\\nExpected `true` ???"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) The task is wrong and unclear!\\nOne more argument:\\n\\nIf we consider that \\n\\n> an object is considered an instance of a given class if that object has access to that class\\'s methods\\n\\n...then the code below should return `true`, but it returns `false`.\\n\\n```js\\n//editorial solution\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n      return false;\\n    let currPotentialPrototype = Object.getPrototypeOf(obj);\\n    while (currPotentialPrototype !== null) {\\n      if (currPotentialPrototype === classFunction.prototype) return true;\\n      currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n    }\\n    return false;\\n};\\n\\nclass A { someMethod(){ console.log(\\'someMethod is called\\') } }\\nclass B {}\\nconst b = new B;\\n\\nb.someMethod = A.prototype.someMethod\\nb.someMethod() // outs \\'someMethod is called\\' - OK\\n\\nconsole.log( checkIfInstanceOf( b, A ) ) // false - WRONG\\n```\\nThe instance of B borrows all methods from class A and it should to be considered as instance of A because this matches to the main condition of the task.\\nAlthough, the editorial solution gives the wrong answer (like many other accepted solutions).\\n\\nAgain: the task is unclear!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) The problem is defined by its statement; examples by themselves should not provide definition (but rather eliminate its incorrect interpretations). The problem defines “an instance of” with “an object is considered an instance of a given class if that object has access to that class's methods”, and this definition actually covers it all.\n\n`Date.prototype` contains a method `.getFullYear()`, therefore any instance of `Date` has access to this method. But the `Date` object itself does not have this method. Therefore, `Date` object is not “an instance of” `Date` class.\n\nOn the other hand, `Object.prototype` defines a bunch of methods, such as `.hasOwnProperty()`. Any instance of `Object` has this method or an overridden version of it, which is considered as “having access to the method”. In particular, the `Object` object itself has all methods defined by `Function.prototype`, which in turn has all methods defined by `Object.prototype` (overriding some of them). Therefore, the `Object` object is “an instance of” `Function` class, and also “an instance of” `Object` class.\n\nSimilarly, a primitive value has no class whatsoever, but it has some methods. Primitive numbers, for example, take their methods from `Number.prototype` (for example, `(1.0).toString === Number.prototype.toString` is true), which means that a primitive number is “an instance of” `Number` class.\n\n(I'm writing “an instance of” in quotes because the way it is defined in this problem is different from what it usually means in JavaScript.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) Thanks for your answer. I understand how it resolves by JS - it\\'s illogical and ruins the OOP principles, but it\\'s the piece of the language (Class is abstraction and object is a class instance. And class cannot be an instance anyway! Neither an instance of themself nor instance of another class). \\nBut the task description does not clearly cover this.\\nAlso the 3rd example describes that we have to correct this behavior. But task not describes that for Object we have to still remain default behavior.\\n\\nAlso why primitive value is instance of Number? It is illogical, but it is task condition.\\n\\nI\\'m talking about the task is unclear and have to describe this additionally!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) Why \\u201CObject cannot be instance of Object much like Date cannot be instance of Date\\u201D? All objects in JavaScript are instances of `Object`. In this regard `Object` is quite special; `Date` simply does not possess this property. (Much like in Python `isinstance(int, int)` returns `False`, but `isinstance(type, type)` returns `True`, which is completely logical.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@vadya-coder](/vadya-coder) thanks for answer. Actually, I understand how it resolves in JS under the hood, but it is unlogical especially due to 3rd example - Object cannot be instance of Object much like Date cannot be instance of Date!\nIt requires to be fixed with additional checks in a code to be logical.\nOr the task must have an additional condition describes that.\nNow the task is very unclear! And the statistics of only 28% of acceptance rate just confirms this."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "\"Object\" it is function. `Object.__proto__ === Function.prototype`. `Object.__proto__.__proto__   ===  Object`  Return TRUE. And \"Date\" it\\'s also function `Date.__proto__.__proto__ === Object`"
                    },
                    {
                        "username": "KondratovP",
                        "content": "i wonder what is a practical use of such function"
                    },
                    {
                        "username": "JRcodesgood",
                        "content": "This feels really odd in the JS idiosyncracies. Becuase null is an instance of Object. obj = null and classFunction = Object should return true as I understand it"
                    },
                    {
                        "username": "tifv",
                        "content": "\\u201CFor this problem, an object is considered an instance of a given class if that object has access to that class\\'s methods\\u201D and `null` doesn\\'t have any methods, so\\u2026"
                    }
                ]
            },
            {
                "id": 1909928,
                "content": [
                    {
                        "username": "shrinivas2",
                        "content": "func = () => checkIfInstanceOf(5, Number) this should return false, yes I know the number gets auto converted to an object when you use toFixed() on it, but thats not what we are looking here for right? We are looking for if something is instance of something. and 5 is not and instance of Number, 5 is primitive not a object, and if you expect it to work, change the description and the question."
                    },
                    {
                        "username": "Jpaulsisson",
                        "content": "I'm at a complete loss on why checkInstanceOf(0, Object) is supposed to return true. \nI'm a bit of a newbie but why is a zero an object or prototype of Object?"
                    },
                    {
                        "username": "rahiljakir",
                        "content": "Object is Super class of all the classes that\\'s why any instance, is also instance of Object.  like if you know JAVA, any object can be assigned to Object type reference."
                    },
                    {
                        "username": "tifv",
                        "content": "[@Google3048](/Google3048) One should note that call `Number(0)` is not constructing a `Number` object, it just returns a primitive. To construct an actual `Number` object you have to use `new Number(0)`. It will then be an instance of `Object` (as determined by `instanceof`), but `new Number(0) === 0` will be `false`."
                    },
                    {
                        "username": "zomiib",
                        "content": "Technically a 0 is not an object because 0 is a primitive which is \"data that is not an object and has no methods or properties\" (MDN). So why does it return true then? JavaScript does something commonly known as \"auto-boxing\" which basically means the primitive gets automatically wrapped in an object. \\nSo when you call 0.toFixed() it takes the 0 puts it in a Number object {0} and calls that new objects .toFixed() method which does work.\\n\\nI dont really like this question because a primitive is NOT an object as referenced by \"instanceof\". But because of auto-boxing wrapping the primitive ( 0 ) into an object, that new object is then obviously an object so LeetCode expects true."
                    },
                    {
                        "username": "Google3048",
                        "content": "`Number(0) === 0`, Number is a builtin object. If you open a browser console you can type `Number.` and scroll through what functions are available in the autocomplete."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "This is the most non-Acceptance task (in JS topic), and i wanna help you. What do you need to do in this task? You need to know if the \"object\" argument is an instance of the given class, or an instance of the parent class of the given class, and so on. I won't give you the exact algorithm, but I will give you a hint. If the function takes two arguments (12 and Object), then the output will be true, try to understand why. Try typing in browser console  `(12).__proto__` ,` (12).__proto__.__proto__`, `Number.prototype`, `Object.prototype`  and finally `(12).__proto__.__proto__.__proto__`"
                    },
                    {
                        "username": "Mohammed312x",
                        "content": "first of all thanks for the tip it helped me learn alot of thigns. am a newbie but bear with me please. If we follow this logic in this case, doesn\\'t it mean we will divert from the point of the question ? because we will be checking the parent of the given class and not the class it self. and if it returns false for the given class and true for its parent class, doesn\\'t it mean that the object and the class that we are suppose to check are like siblings ?"
                    },
                    {
                        "username": "cupcea21",
                        "content": "() => checkIfInstanceOf(5n, Object)\n() => checkIfInstanceOf(5n, BigInt)\nboth are expected to be true, how the hell ?"
                    },
                    {
                        "username": "lindablus",
                        "content": "It\\'s a bit confusing what an instance \"has access\" to a class\\' methods means.  My interpretation is that this means \"you can read properties (or properties thereof, etc.) to get at a method in the class\". \\n\\nFor instance, accessing a static method requires accessing the constructor property and then accessing the static method on the constructor.  Getting an overridden superclass\\' staticmethod might require accessing the \"__proto__\" property of the object (which is a bit dubious whether this is really a legal way of \"accessing\" things).\\n\\nA more sane way to pose this would be \"get instanceof working correctly with primitive types\"."
                    },
                    {
                        "username": "cionx",
                        "content": "It is neither specified nor clear what it means for an object to have access to a class\\u2019s methods. From the current formulation and the given examples, I was under the impression that the test case\\n```javascript\\n() => {\\n  function Container(value) {\\n    this.value = value;\\n  }\\n  function Box(value) {\\n    this.value = value;\\n  }\\n  const b = new Box(1);\\n  return checkIfInstanceOf(b, Container);\\n}\\n```\\nshould output `true`, since `b` implements all the properties required by a `Container` object. But the expected output is `false`."
                    },
                    {
                        "username": "tifv",
                        "content": "I guess the intended formulation would be something like \\u201Cvalue `A` is an instance of class `B` if the set of methods of `A` will reflect any changes made to `B.prototype` (unless these changes happen to be overridden by some `B`\\'s subclass)\\u201D."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "`() => checkIfInstanceOf(Symbol(), Object)`\\nexpects true. \\nThe MDN docs however state that symbol returns a primitive, which is not an object. GPT also says that Symbol is not an instance of Object. Shouldn\\'t it return false? "
                    },
                    {
                        "username": "tifv",
                        "content": "The problem specifies exactly when \\u201Can object is considered an instance of a given class\\u201D, and it is different from the usual JavaScript meaning of the phrase. `Symbol()` is indeed a primitive, but it derives its methods from `Symbol` class, which is a subclass of `Object`. According to the definition given by the problem (to emphasize, a non-standard one), it means `Symbol()` is an instance of `Object`."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "```\\n() => checkIfInstanceOf(Object, Object)\\n```\\nExpected `true`?\\nReally? Are you serious?\\nBut how about the example 3:\\n\\n>Input: func = () => checkIfInstanceOf(Date, Date)\\n>Output: false\\n>Explanation: A date constructor cannot logically be an instance of itself.\\n"
                    },
                    {
                        "username": "mpingo",
                        "content": "[@tifv](/tifv) \\nThanks for this."
                    },
                    {
                        "username": "tifv",
                        "content": "[@mpingo](/mpingo) It works the same way as the original question. `Array` object is an instance of `Function` class (as all constructors are). And `Function` class is a subclass of `Object` class."
                    },
                    {
                        "username": "mpingo",
                        "content": "Also, \\n\\n    () => checkIfInstanceOf(Array, Object)\\n\\nExpected `true` ???"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) The task is wrong and unclear!\\nOne more argument:\\n\\nIf we consider that \\n\\n> an object is considered an instance of a given class if that object has access to that class\\'s methods\\n\\n...then the code below should return `true`, but it returns `false`.\\n\\n```js\\n//editorial solution\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n      return false;\\n    let currPotentialPrototype = Object.getPrototypeOf(obj);\\n    while (currPotentialPrototype !== null) {\\n      if (currPotentialPrototype === classFunction.prototype) return true;\\n      currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n    }\\n    return false;\\n};\\n\\nclass A { someMethod(){ console.log(\\'someMethod is called\\') } }\\nclass B {}\\nconst b = new B;\\n\\nb.someMethod = A.prototype.someMethod\\nb.someMethod() // outs \\'someMethod is called\\' - OK\\n\\nconsole.log( checkIfInstanceOf( b, A ) ) // false - WRONG\\n```\\nThe instance of B borrows all methods from class A and it should to be considered as instance of A because this matches to the main condition of the task.\\nAlthough, the editorial solution gives the wrong answer (like many other accepted solutions).\\n\\nAgain: the task is unclear!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) The problem is defined by its statement; examples by themselves should not provide definition (but rather eliminate its incorrect interpretations). The problem defines “an instance of” with “an object is considered an instance of a given class if that object has access to that class's methods”, and this definition actually covers it all.\n\n`Date.prototype` contains a method `.getFullYear()`, therefore any instance of `Date` has access to this method. But the `Date` object itself does not have this method. Therefore, `Date` object is not “an instance of” `Date` class.\n\nOn the other hand, `Object.prototype` defines a bunch of methods, such as `.hasOwnProperty()`. Any instance of `Object` has this method or an overridden version of it, which is considered as “having access to the method”. In particular, the `Object` object itself has all methods defined by `Function.prototype`, which in turn has all methods defined by `Object.prototype` (overriding some of them). Therefore, the `Object` object is “an instance of” `Function` class, and also “an instance of” `Object` class.\n\nSimilarly, a primitive value has no class whatsoever, but it has some methods. Primitive numbers, for example, take their methods from `Number.prototype` (for example, `(1.0).toString === Number.prototype.toString` is true), which means that a primitive number is “an instance of” `Number` class.\n\n(I'm writing “an instance of” in quotes because the way it is defined in this problem is different from what it usually means in JavaScript.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) Thanks for your answer. I understand how it resolves by JS - it\\'s illogical and ruins the OOP principles, but it\\'s the piece of the language (Class is abstraction and object is a class instance. And class cannot be an instance anyway! Neither an instance of themself nor instance of another class). \\nBut the task description does not clearly cover this.\\nAlso the 3rd example describes that we have to correct this behavior. But task not describes that for Object we have to still remain default behavior.\\n\\nAlso why primitive value is instance of Number? It is illogical, but it is task condition.\\n\\nI\\'m talking about the task is unclear and have to describe this additionally!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) Why \\u201CObject cannot be instance of Object much like Date cannot be instance of Date\\u201D? All objects in JavaScript are instances of `Object`. In this regard `Object` is quite special; `Date` simply does not possess this property. (Much like in Python `isinstance(int, int)` returns `False`, but `isinstance(type, type)` returns `True`, which is completely logical.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@vadya-coder](/vadya-coder) thanks for answer. Actually, I understand how it resolves in JS under the hood, but it is unlogical especially due to 3rd example - Object cannot be instance of Object much like Date cannot be instance of Date!\nIt requires to be fixed with additional checks in a code to be logical.\nOr the task must have an additional condition describes that.\nNow the task is very unclear! And the statistics of only 28% of acceptance rate just confirms this."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "\"Object\" it is function. `Object.__proto__ === Function.prototype`. `Object.__proto__.__proto__   ===  Object`  Return TRUE. And \"Date\" it\\'s also function `Date.__proto__.__proto__ === Object`"
                    },
                    {
                        "username": "KondratovP",
                        "content": "i wonder what is a practical use of such function"
                    },
                    {
                        "username": "JRcodesgood",
                        "content": "This feels really odd in the JS idiosyncracies. Becuase null is an instance of Object. obj = null and classFunction = Object should return true as I understand it"
                    },
                    {
                        "username": "tifv",
                        "content": "\\u201CFor this problem, an object is considered an instance of a given class if that object has access to that class\\'s methods\\u201D and `null` doesn\\'t have any methods, so\\u2026"
                    }
                ]
            },
            {
                "id": 1909762,
                "content": [
                    {
                        "username": "shrinivas2",
                        "content": "func = () => checkIfInstanceOf(5, Number) this should return false, yes I know the number gets auto converted to an object when you use toFixed() on it, but thats not what we are looking here for right? We are looking for if something is instance of something. and 5 is not and instance of Number, 5 is primitive not a object, and if you expect it to work, change the description and the question."
                    },
                    {
                        "username": "Jpaulsisson",
                        "content": "I'm at a complete loss on why checkInstanceOf(0, Object) is supposed to return true. \nI'm a bit of a newbie but why is a zero an object or prototype of Object?"
                    },
                    {
                        "username": "rahiljakir",
                        "content": "Object is Super class of all the classes that\\'s why any instance, is also instance of Object.  like if you know JAVA, any object can be assigned to Object type reference."
                    },
                    {
                        "username": "tifv",
                        "content": "[@Google3048](/Google3048) One should note that call `Number(0)` is not constructing a `Number` object, it just returns a primitive. To construct an actual `Number` object you have to use `new Number(0)`. It will then be an instance of `Object` (as determined by `instanceof`), but `new Number(0) === 0` will be `false`."
                    },
                    {
                        "username": "zomiib",
                        "content": "Technically a 0 is not an object because 0 is a primitive which is \"data that is not an object and has no methods or properties\" (MDN). So why does it return true then? JavaScript does something commonly known as \"auto-boxing\" which basically means the primitive gets automatically wrapped in an object. \\nSo when you call 0.toFixed() it takes the 0 puts it in a Number object {0} and calls that new objects .toFixed() method which does work.\\n\\nI dont really like this question because a primitive is NOT an object as referenced by \"instanceof\". But because of auto-boxing wrapping the primitive ( 0 ) into an object, that new object is then obviously an object so LeetCode expects true."
                    },
                    {
                        "username": "Google3048",
                        "content": "`Number(0) === 0`, Number is a builtin object. If you open a browser console you can type `Number.` and scroll through what functions are available in the autocomplete."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "This is the most non-Acceptance task (in JS topic), and i wanna help you. What do you need to do in this task? You need to know if the \"object\" argument is an instance of the given class, or an instance of the parent class of the given class, and so on. I won't give you the exact algorithm, but I will give you a hint. If the function takes two arguments (12 and Object), then the output will be true, try to understand why. Try typing in browser console  `(12).__proto__` ,` (12).__proto__.__proto__`, `Number.prototype`, `Object.prototype`  and finally `(12).__proto__.__proto__.__proto__`"
                    },
                    {
                        "username": "Mohammed312x",
                        "content": "first of all thanks for the tip it helped me learn alot of thigns. am a newbie but bear with me please. If we follow this logic in this case, doesn\\'t it mean we will divert from the point of the question ? because we will be checking the parent of the given class and not the class it self. and if it returns false for the given class and true for its parent class, doesn\\'t it mean that the object and the class that we are suppose to check are like siblings ?"
                    },
                    {
                        "username": "cupcea21",
                        "content": "() => checkIfInstanceOf(5n, Object)\n() => checkIfInstanceOf(5n, BigInt)\nboth are expected to be true, how the hell ?"
                    },
                    {
                        "username": "lindablus",
                        "content": "It\\'s a bit confusing what an instance \"has access\" to a class\\' methods means.  My interpretation is that this means \"you can read properties (or properties thereof, etc.) to get at a method in the class\". \\n\\nFor instance, accessing a static method requires accessing the constructor property and then accessing the static method on the constructor.  Getting an overridden superclass\\' staticmethod might require accessing the \"__proto__\" property of the object (which is a bit dubious whether this is really a legal way of \"accessing\" things).\\n\\nA more sane way to pose this would be \"get instanceof working correctly with primitive types\"."
                    },
                    {
                        "username": "cionx",
                        "content": "It is neither specified nor clear what it means for an object to have access to a class\\u2019s methods. From the current formulation and the given examples, I was under the impression that the test case\\n```javascript\\n() => {\\n  function Container(value) {\\n    this.value = value;\\n  }\\n  function Box(value) {\\n    this.value = value;\\n  }\\n  const b = new Box(1);\\n  return checkIfInstanceOf(b, Container);\\n}\\n```\\nshould output `true`, since `b` implements all the properties required by a `Container` object. But the expected output is `false`."
                    },
                    {
                        "username": "tifv",
                        "content": "I guess the intended formulation would be something like \\u201Cvalue `A` is an instance of class `B` if the set of methods of `A` will reflect any changes made to `B.prototype` (unless these changes happen to be overridden by some `B`\\'s subclass)\\u201D."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "`() => checkIfInstanceOf(Symbol(), Object)`\\nexpects true. \\nThe MDN docs however state that symbol returns a primitive, which is not an object. GPT also says that Symbol is not an instance of Object. Shouldn\\'t it return false? "
                    },
                    {
                        "username": "tifv",
                        "content": "The problem specifies exactly when \\u201Can object is considered an instance of a given class\\u201D, and it is different from the usual JavaScript meaning of the phrase. `Symbol()` is indeed a primitive, but it derives its methods from `Symbol` class, which is a subclass of `Object`. According to the definition given by the problem (to emphasize, a non-standard one), it means `Symbol()` is an instance of `Object`."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "```\\n() => checkIfInstanceOf(Object, Object)\\n```\\nExpected `true`?\\nReally? Are you serious?\\nBut how about the example 3:\\n\\n>Input: func = () => checkIfInstanceOf(Date, Date)\\n>Output: false\\n>Explanation: A date constructor cannot logically be an instance of itself.\\n"
                    },
                    {
                        "username": "mpingo",
                        "content": "[@tifv](/tifv) \\nThanks for this."
                    },
                    {
                        "username": "tifv",
                        "content": "[@mpingo](/mpingo) It works the same way as the original question. `Array` object is an instance of `Function` class (as all constructors are). And `Function` class is a subclass of `Object` class."
                    },
                    {
                        "username": "mpingo",
                        "content": "Also, \\n\\n    () => checkIfInstanceOf(Array, Object)\\n\\nExpected `true` ???"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) The task is wrong and unclear!\\nOne more argument:\\n\\nIf we consider that \\n\\n> an object is considered an instance of a given class if that object has access to that class\\'s methods\\n\\n...then the code below should return `true`, but it returns `false`.\\n\\n```js\\n//editorial solution\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n      return false;\\n    let currPotentialPrototype = Object.getPrototypeOf(obj);\\n    while (currPotentialPrototype !== null) {\\n      if (currPotentialPrototype === classFunction.prototype) return true;\\n      currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n    }\\n    return false;\\n};\\n\\nclass A { someMethod(){ console.log(\\'someMethod is called\\') } }\\nclass B {}\\nconst b = new B;\\n\\nb.someMethod = A.prototype.someMethod\\nb.someMethod() // outs \\'someMethod is called\\' - OK\\n\\nconsole.log( checkIfInstanceOf( b, A ) ) // false - WRONG\\n```\\nThe instance of B borrows all methods from class A and it should to be considered as instance of A because this matches to the main condition of the task.\\nAlthough, the editorial solution gives the wrong answer (like many other accepted solutions).\\n\\nAgain: the task is unclear!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) The problem is defined by its statement; examples by themselves should not provide definition (but rather eliminate its incorrect interpretations). The problem defines “an instance of” with “an object is considered an instance of a given class if that object has access to that class's methods”, and this definition actually covers it all.\n\n`Date.prototype` contains a method `.getFullYear()`, therefore any instance of `Date` has access to this method. But the `Date` object itself does not have this method. Therefore, `Date` object is not “an instance of” `Date` class.\n\nOn the other hand, `Object.prototype` defines a bunch of methods, such as `.hasOwnProperty()`. Any instance of `Object` has this method or an overridden version of it, which is considered as “having access to the method”. In particular, the `Object` object itself has all methods defined by `Function.prototype`, which in turn has all methods defined by `Object.prototype` (overriding some of them). Therefore, the `Object` object is “an instance of” `Function` class, and also “an instance of” `Object` class.\n\nSimilarly, a primitive value has no class whatsoever, but it has some methods. Primitive numbers, for example, take their methods from `Number.prototype` (for example, `(1.0).toString === Number.prototype.toString` is true), which means that a primitive number is “an instance of” `Number` class.\n\n(I'm writing “an instance of” in quotes because the way it is defined in this problem is different from what it usually means in JavaScript.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) Thanks for your answer. I understand how it resolves by JS - it\\'s illogical and ruins the OOP principles, but it\\'s the piece of the language (Class is abstraction and object is a class instance. And class cannot be an instance anyway! Neither an instance of themself nor instance of another class). \\nBut the task description does not clearly cover this.\\nAlso the 3rd example describes that we have to correct this behavior. But task not describes that for Object we have to still remain default behavior.\\n\\nAlso why primitive value is instance of Number? It is illogical, but it is task condition.\\n\\nI\\'m talking about the task is unclear and have to describe this additionally!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) Why \\u201CObject cannot be instance of Object much like Date cannot be instance of Date\\u201D? All objects in JavaScript are instances of `Object`. In this regard `Object` is quite special; `Date` simply does not possess this property. (Much like in Python `isinstance(int, int)` returns `False`, but `isinstance(type, type)` returns `True`, which is completely logical.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@vadya-coder](/vadya-coder) thanks for answer. Actually, I understand how it resolves in JS under the hood, but it is unlogical especially due to 3rd example - Object cannot be instance of Object much like Date cannot be instance of Date!\nIt requires to be fixed with additional checks in a code to be logical.\nOr the task must have an additional condition describes that.\nNow the task is very unclear! And the statistics of only 28% of acceptance rate just confirms this."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "\"Object\" it is function. `Object.__proto__ === Function.prototype`. `Object.__proto__.__proto__   ===  Object`  Return TRUE. And \"Date\" it\\'s also function `Date.__proto__.__proto__ === Object`"
                    },
                    {
                        "username": "KondratovP",
                        "content": "i wonder what is a practical use of such function"
                    },
                    {
                        "username": "JRcodesgood",
                        "content": "This feels really odd in the JS idiosyncracies. Becuase null is an instance of Object. obj = null and classFunction = Object should return true as I understand it"
                    },
                    {
                        "username": "tifv",
                        "content": "\\u201CFor this problem, an object is considered an instance of a given class if that object has access to that class\\'s methods\\u201D and `null` doesn\\'t have any methods, so\\u2026"
                    }
                ]
            },
            {
                "id": 1999848,
                "content": [
                    {
                        "username": "shrinivas2",
                        "content": "func = () => checkIfInstanceOf(5, Number) this should return false, yes I know the number gets auto converted to an object when you use toFixed() on it, but thats not what we are looking here for right? We are looking for if something is instance of something. and 5 is not and instance of Number, 5 is primitive not a object, and if you expect it to work, change the description and the question."
                    },
                    {
                        "username": "Jpaulsisson",
                        "content": "I'm at a complete loss on why checkInstanceOf(0, Object) is supposed to return true. \nI'm a bit of a newbie but why is a zero an object or prototype of Object?"
                    },
                    {
                        "username": "rahiljakir",
                        "content": "Object is Super class of all the classes that\\'s why any instance, is also instance of Object.  like if you know JAVA, any object can be assigned to Object type reference."
                    },
                    {
                        "username": "tifv",
                        "content": "[@Google3048](/Google3048) One should note that call `Number(0)` is not constructing a `Number` object, it just returns a primitive. To construct an actual `Number` object you have to use `new Number(0)`. It will then be an instance of `Object` (as determined by `instanceof`), but `new Number(0) === 0` will be `false`."
                    },
                    {
                        "username": "zomiib",
                        "content": "Technically a 0 is not an object because 0 is a primitive which is \"data that is not an object and has no methods or properties\" (MDN). So why does it return true then? JavaScript does something commonly known as \"auto-boxing\" which basically means the primitive gets automatically wrapped in an object. \\nSo when you call 0.toFixed() it takes the 0 puts it in a Number object {0} and calls that new objects .toFixed() method which does work.\\n\\nI dont really like this question because a primitive is NOT an object as referenced by \"instanceof\". But because of auto-boxing wrapping the primitive ( 0 ) into an object, that new object is then obviously an object so LeetCode expects true."
                    },
                    {
                        "username": "Google3048",
                        "content": "`Number(0) === 0`, Number is a builtin object. If you open a browser console you can type `Number.` and scroll through what functions are available in the autocomplete."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "This is the most non-Acceptance task (in JS topic), and i wanna help you. What do you need to do in this task? You need to know if the \"object\" argument is an instance of the given class, or an instance of the parent class of the given class, and so on. I won't give you the exact algorithm, but I will give you a hint. If the function takes two arguments (12 and Object), then the output will be true, try to understand why. Try typing in browser console  `(12).__proto__` ,` (12).__proto__.__proto__`, `Number.prototype`, `Object.prototype`  and finally `(12).__proto__.__proto__.__proto__`"
                    },
                    {
                        "username": "Mohammed312x",
                        "content": "first of all thanks for the tip it helped me learn alot of thigns. am a newbie but bear with me please. If we follow this logic in this case, doesn\\'t it mean we will divert from the point of the question ? because we will be checking the parent of the given class and not the class it self. and if it returns false for the given class and true for its parent class, doesn\\'t it mean that the object and the class that we are suppose to check are like siblings ?"
                    },
                    {
                        "username": "cupcea21",
                        "content": "() => checkIfInstanceOf(5n, Object)\n() => checkIfInstanceOf(5n, BigInt)\nboth are expected to be true, how the hell ?"
                    },
                    {
                        "username": "lindablus",
                        "content": "It\\'s a bit confusing what an instance \"has access\" to a class\\' methods means.  My interpretation is that this means \"you can read properties (or properties thereof, etc.) to get at a method in the class\". \\n\\nFor instance, accessing a static method requires accessing the constructor property and then accessing the static method on the constructor.  Getting an overridden superclass\\' staticmethod might require accessing the \"__proto__\" property of the object (which is a bit dubious whether this is really a legal way of \"accessing\" things).\\n\\nA more sane way to pose this would be \"get instanceof working correctly with primitive types\"."
                    },
                    {
                        "username": "cionx",
                        "content": "It is neither specified nor clear what it means for an object to have access to a class\\u2019s methods. From the current formulation and the given examples, I was under the impression that the test case\\n```javascript\\n() => {\\n  function Container(value) {\\n    this.value = value;\\n  }\\n  function Box(value) {\\n    this.value = value;\\n  }\\n  const b = new Box(1);\\n  return checkIfInstanceOf(b, Container);\\n}\\n```\\nshould output `true`, since `b` implements all the properties required by a `Container` object. But the expected output is `false`."
                    },
                    {
                        "username": "tifv",
                        "content": "I guess the intended formulation would be something like \\u201Cvalue `A` is an instance of class `B` if the set of methods of `A` will reflect any changes made to `B.prototype` (unless these changes happen to be overridden by some `B`\\'s subclass)\\u201D."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "`() => checkIfInstanceOf(Symbol(), Object)`\\nexpects true. \\nThe MDN docs however state that symbol returns a primitive, which is not an object. GPT also says that Symbol is not an instance of Object. Shouldn\\'t it return false? "
                    },
                    {
                        "username": "tifv",
                        "content": "The problem specifies exactly when \\u201Can object is considered an instance of a given class\\u201D, and it is different from the usual JavaScript meaning of the phrase. `Symbol()` is indeed a primitive, but it derives its methods from `Symbol` class, which is a subclass of `Object`. According to the definition given by the problem (to emphasize, a non-standard one), it means `Symbol()` is an instance of `Object`."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "```\\n() => checkIfInstanceOf(Object, Object)\\n```\\nExpected `true`?\\nReally? Are you serious?\\nBut how about the example 3:\\n\\n>Input: func = () => checkIfInstanceOf(Date, Date)\\n>Output: false\\n>Explanation: A date constructor cannot logically be an instance of itself.\\n"
                    },
                    {
                        "username": "mpingo",
                        "content": "[@tifv](/tifv) \\nThanks for this."
                    },
                    {
                        "username": "tifv",
                        "content": "[@mpingo](/mpingo) It works the same way as the original question. `Array` object is an instance of `Function` class (as all constructors are). And `Function` class is a subclass of `Object` class."
                    },
                    {
                        "username": "mpingo",
                        "content": "Also, \\n\\n    () => checkIfInstanceOf(Array, Object)\\n\\nExpected `true` ???"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) The task is wrong and unclear!\\nOne more argument:\\n\\nIf we consider that \\n\\n> an object is considered an instance of a given class if that object has access to that class\\'s methods\\n\\n...then the code below should return `true`, but it returns `false`.\\n\\n```js\\n//editorial solution\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n      return false;\\n    let currPotentialPrototype = Object.getPrototypeOf(obj);\\n    while (currPotentialPrototype !== null) {\\n      if (currPotentialPrototype === classFunction.prototype) return true;\\n      currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n    }\\n    return false;\\n};\\n\\nclass A { someMethod(){ console.log(\\'someMethod is called\\') } }\\nclass B {}\\nconst b = new B;\\n\\nb.someMethod = A.prototype.someMethod\\nb.someMethod() // outs \\'someMethod is called\\' - OK\\n\\nconsole.log( checkIfInstanceOf( b, A ) ) // false - WRONG\\n```\\nThe instance of B borrows all methods from class A and it should to be considered as instance of A because this matches to the main condition of the task.\\nAlthough, the editorial solution gives the wrong answer (like many other accepted solutions).\\n\\nAgain: the task is unclear!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) The problem is defined by its statement; examples by themselves should not provide definition (but rather eliminate its incorrect interpretations). The problem defines “an instance of” with “an object is considered an instance of a given class if that object has access to that class's methods”, and this definition actually covers it all.\n\n`Date.prototype` contains a method `.getFullYear()`, therefore any instance of `Date` has access to this method. But the `Date` object itself does not have this method. Therefore, `Date` object is not “an instance of” `Date` class.\n\nOn the other hand, `Object.prototype` defines a bunch of methods, such as `.hasOwnProperty()`. Any instance of `Object` has this method or an overridden version of it, which is considered as “having access to the method”. In particular, the `Object` object itself has all methods defined by `Function.prototype`, which in turn has all methods defined by `Object.prototype` (overriding some of them). Therefore, the `Object` object is “an instance of” `Function` class, and also “an instance of” `Object` class.\n\nSimilarly, a primitive value has no class whatsoever, but it has some methods. Primitive numbers, for example, take their methods from `Number.prototype` (for example, `(1.0).toString === Number.prototype.toString` is true), which means that a primitive number is “an instance of” `Number` class.\n\n(I'm writing “an instance of” in quotes because the way it is defined in this problem is different from what it usually means in JavaScript.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) Thanks for your answer. I understand how it resolves by JS - it\\'s illogical and ruins the OOP principles, but it\\'s the piece of the language (Class is abstraction and object is a class instance. And class cannot be an instance anyway! Neither an instance of themself nor instance of another class). \\nBut the task description does not clearly cover this.\\nAlso the 3rd example describes that we have to correct this behavior. But task not describes that for Object we have to still remain default behavior.\\n\\nAlso why primitive value is instance of Number? It is illogical, but it is task condition.\\n\\nI\\'m talking about the task is unclear and have to describe this additionally!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) Why \\u201CObject cannot be instance of Object much like Date cannot be instance of Date\\u201D? All objects in JavaScript are instances of `Object`. In this regard `Object` is quite special; `Date` simply does not possess this property. (Much like in Python `isinstance(int, int)` returns `False`, but `isinstance(type, type)` returns `True`, which is completely logical.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@vadya-coder](/vadya-coder) thanks for answer. Actually, I understand how it resolves in JS under the hood, but it is unlogical especially due to 3rd example - Object cannot be instance of Object much like Date cannot be instance of Date!\nIt requires to be fixed with additional checks in a code to be logical.\nOr the task must have an additional condition describes that.\nNow the task is very unclear! And the statistics of only 28% of acceptance rate just confirms this."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "\"Object\" it is function. `Object.__proto__ === Function.prototype`. `Object.__proto__.__proto__   ===  Object`  Return TRUE. And \"Date\" it\\'s also function `Date.__proto__.__proto__ === Object`"
                    },
                    {
                        "username": "KondratovP",
                        "content": "i wonder what is a practical use of such function"
                    },
                    {
                        "username": "JRcodesgood",
                        "content": "This feels really odd in the JS idiosyncracies. Becuase null is an instance of Object. obj = null and classFunction = Object should return true as I understand it"
                    },
                    {
                        "username": "tifv",
                        "content": "\\u201CFor this problem, an object is considered an instance of a given class if that object has access to that class\\'s methods\\u201D and `null` doesn\\'t have any methods, so\\u2026"
                    }
                ]
            },
            {
                "id": 2008354,
                "content": [
                    {
                        "username": "shrinivas2",
                        "content": "func = () => checkIfInstanceOf(5, Number) this should return false, yes I know the number gets auto converted to an object when you use toFixed() on it, but thats not what we are looking here for right? We are looking for if something is instance of something. and 5 is not and instance of Number, 5 is primitive not a object, and if you expect it to work, change the description and the question."
                    },
                    {
                        "username": "Jpaulsisson",
                        "content": "I'm at a complete loss on why checkInstanceOf(0, Object) is supposed to return true. \nI'm a bit of a newbie but why is a zero an object or prototype of Object?"
                    },
                    {
                        "username": "rahiljakir",
                        "content": "Object is Super class of all the classes that\\'s why any instance, is also instance of Object.  like if you know JAVA, any object can be assigned to Object type reference."
                    },
                    {
                        "username": "tifv",
                        "content": "[@Google3048](/Google3048) One should note that call `Number(0)` is not constructing a `Number` object, it just returns a primitive. To construct an actual `Number` object you have to use `new Number(0)`. It will then be an instance of `Object` (as determined by `instanceof`), but `new Number(0) === 0` will be `false`."
                    },
                    {
                        "username": "zomiib",
                        "content": "Technically a 0 is not an object because 0 is a primitive which is \"data that is not an object and has no methods or properties\" (MDN). So why does it return true then? JavaScript does something commonly known as \"auto-boxing\" which basically means the primitive gets automatically wrapped in an object. \\nSo when you call 0.toFixed() it takes the 0 puts it in a Number object {0} and calls that new objects .toFixed() method which does work.\\n\\nI dont really like this question because a primitive is NOT an object as referenced by \"instanceof\". But because of auto-boxing wrapping the primitive ( 0 ) into an object, that new object is then obviously an object so LeetCode expects true."
                    },
                    {
                        "username": "Google3048",
                        "content": "`Number(0) === 0`, Number is a builtin object. If you open a browser console you can type `Number.` and scroll through what functions are available in the autocomplete."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "This is the most non-Acceptance task (in JS topic), and i wanna help you. What do you need to do in this task? You need to know if the \"object\" argument is an instance of the given class, or an instance of the parent class of the given class, and so on. I won't give you the exact algorithm, but I will give you a hint. If the function takes two arguments (12 and Object), then the output will be true, try to understand why. Try typing in browser console  `(12).__proto__` ,` (12).__proto__.__proto__`, `Number.prototype`, `Object.prototype`  and finally `(12).__proto__.__proto__.__proto__`"
                    },
                    {
                        "username": "Mohammed312x",
                        "content": "first of all thanks for the tip it helped me learn alot of thigns. am a newbie but bear with me please. If we follow this logic in this case, doesn\\'t it mean we will divert from the point of the question ? because we will be checking the parent of the given class and not the class it self. and if it returns false for the given class and true for its parent class, doesn\\'t it mean that the object and the class that we are suppose to check are like siblings ?"
                    },
                    {
                        "username": "cupcea21",
                        "content": "() => checkIfInstanceOf(5n, Object)\n() => checkIfInstanceOf(5n, BigInt)\nboth are expected to be true, how the hell ?"
                    },
                    {
                        "username": "lindablus",
                        "content": "It\\'s a bit confusing what an instance \"has access\" to a class\\' methods means.  My interpretation is that this means \"you can read properties (or properties thereof, etc.) to get at a method in the class\". \\n\\nFor instance, accessing a static method requires accessing the constructor property and then accessing the static method on the constructor.  Getting an overridden superclass\\' staticmethod might require accessing the \"__proto__\" property of the object (which is a bit dubious whether this is really a legal way of \"accessing\" things).\\n\\nA more sane way to pose this would be \"get instanceof working correctly with primitive types\"."
                    },
                    {
                        "username": "cionx",
                        "content": "It is neither specified nor clear what it means for an object to have access to a class\\u2019s methods. From the current formulation and the given examples, I was under the impression that the test case\\n```javascript\\n() => {\\n  function Container(value) {\\n    this.value = value;\\n  }\\n  function Box(value) {\\n    this.value = value;\\n  }\\n  const b = new Box(1);\\n  return checkIfInstanceOf(b, Container);\\n}\\n```\\nshould output `true`, since `b` implements all the properties required by a `Container` object. But the expected output is `false`."
                    },
                    {
                        "username": "tifv",
                        "content": "I guess the intended formulation would be something like \\u201Cvalue `A` is an instance of class `B` if the set of methods of `A` will reflect any changes made to `B.prototype` (unless these changes happen to be overridden by some `B`\\'s subclass)\\u201D."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "`() => checkIfInstanceOf(Symbol(), Object)`\\nexpects true. \\nThe MDN docs however state that symbol returns a primitive, which is not an object. GPT also says that Symbol is not an instance of Object. Shouldn\\'t it return false? "
                    },
                    {
                        "username": "tifv",
                        "content": "The problem specifies exactly when \\u201Can object is considered an instance of a given class\\u201D, and it is different from the usual JavaScript meaning of the phrase. `Symbol()` is indeed a primitive, but it derives its methods from `Symbol` class, which is a subclass of `Object`. According to the definition given by the problem (to emphasize, a non-standard one), it means `Symbol()` is an instance of `Object`."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "```\\n() => checkIfInstanceOf(Object, Object)\\n```\\nExpected `true`?\\nReally? Are you serious?\\nBut how about the example 3:\\n\\n>Input: func = () => checkIfInstanceOf(Date, Date)\\n>Output: false\\n>Explanation: A date constructor cannot logically be an instance of itself.\\n"
                    },
                    {
                        "username": "mpingo",
                        "content": "[@tifv](/tifv) \\nThanks for this."
                    },
                    {
                        "username": "tifv",
                        "content": "[@mpingo](/mpingo) It works the same way as the original question. `Array` object is an instance of `Function` class (as all constructors are). And `Function` class is a subclass of `Object` class."
                    },
                    {
                        "username": "mpingo",
                        "content": "Also, \\n\\n    () => checkIfInstanceOf(Array, Object)\\n\\nExpected `true` ???"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) The task is wrong and unclear!\\nOne more argument:\\n\\nIf we consider that \\n\\n> an object is considered an instance of a given class if that object has access to that class\\'s methods\\n\\n...then the code below should return `true`, but it returns `false`.\\n\\n```js\\n//editorial solution\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n      return false;\\n    let currPotentialPrototype = Object.getPrototypeOf(obj);\\n    while (currPotentialPrototype !== null) {\\n      if (currPotentialPrototype === classFunction.prototype) return true;\\n      currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n    }\\n    return false;\\n};\\n\\nclass A { someMethod(){ console.log(\\'someMethod is called\\') } }\\nclass B {}\\nconst b = new B;\\n\\nb.someMethod = A.prototype.someMethod\\nb.someMethod() // outs \\'someMethod is called\\' - OK\\n\\nconsole.log( checkIfInstanceOf( b, A ) ) // false - WRONG\\n```\\nThe instance of B borrows all methods from class A and it should to be considered as instance of A because this matches to the main condition of the task.\\nAlthough, the editorial solution gives the wrong answer (like many other accepted solutions).\\n\\nAgain: the task is unclear!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) The problem is defined by its statement; examples by themselves should not provide definition (but rather eliminate its incorrect interpretations). The problem defines “an instance of” with “an object is considered an instance of a given class if that object has access to that class's methods”, and this definition actually covers it all.\n\n`Date.prototype` contains a method `.getFullYear()`, therefore any instance of `Date` has access to this method. But the `Date` object itself does not have this method. Therefore, `Date` object is not “an instance of” `Date` class.\n\nOn the other hand, `Object.prototype` defines a bunch of methods, such as `.hasOwnProperty()`. Any instance of `Object` has this method or an overridden version of it, which is considered as “having access to the method”. In particular, the `Object` object itself has all methods defined by `Function.prototype`, which in turn has all methods defined by `Object.prototype` (overriding some of them). Therefore, the `Object` object is “an instance of” `Function` class, and also “an instance of” `Object` class.\n\nSimilarly, a primitive value has no class whatsoever, but it has some methods. Primitive numbers, for example, take their methods from `Number.prototype` (for example, `(1.0).toString === Number.prototype.toString` is true), which means that a primitive number is “an instance of” `Number` class.\n\n(I'm writing “an instance of” in quotes because the way it is defined in this problem is different from what it usually means in JavaScript.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) Thanks for your answer. I understand how it resolves by JS - it\\'s illogical and ruins the OOP principles, but it\\'s the piece of the language (Class is abstraction and object is a class instance. And class cannot be an instance anyway! Neither an instance of themself nor instance of another class). \\nBut the task description does not clearly cover this.\\nAlso the 3rd example describes that we have to correct this behavior. But task not describes that for Object we have to still remain default behavior.\\n\\nAlso why primitive value is instance of Number? It is illogical, but it is task condition.\\n\\nI\\'m talking about the task is unclear and have to describe this additionally!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) Why \\u201CObject cannot be instance of Object much like Date cannot be instance of Date\\u201D? All objects in JavaScript are instances of `Object`. In this regard `Object` is quite special; `Date` simply does not possess this property. (Much like in Python `isinstance(int, int)` returns `False`, but `isinstance(type, type)` returns `True`, which is completely logical.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@vadya-coder](/vadya-coder) thanks for answer. Actually, I understand how it resolves in JS under the hood, but it is unlogical especially due to 3rd example - Object cannot be instance of Object much like Date cannot be instance of Date!\nIt requires to be fixed with additional checks in a code to be logical.\nOr the task must have an additional condition describes that.\nNow the task is very unclear! And the statistics of only 28% of acceptance rate just confirms this."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "\"Object\" it is function. `Object.__proto__ === Function.prototype`. `Object.__proto__.__proto__   ===  Object`  Return TRUE. And \"Date\" it\\'s also function `Date.__proto__.__proto__ === Object`"
                    },
                    {
                        "username": "KondratovP",
                        "content": "i wonder what is a practical use of such function"
                    },
                    {
                        "username": "JRcodesgood",
                        "content": "This feels really odd in the JS idiosyncracies. Becuase null is an instance of Object. obj = null and classFunction = Object should return true as I understand it"
                    },
                    {
                        "username": "tifv",
                        "content": "\\u201CFor this problem, an object is considered an instance of a given class if that object has access to that class\\'s methods\\u201D and `null` doesn\\'t have any methods, so\\u2026"
                    }
                ]
            },
            {
                "id": 1881480,
                "content": [
                    {
                        "username": "shrinivas2",
                        "content": "func = () => checkIfInstanceOf(5, Number) this should return false, yes I know the number gets auto converted to an object when you use toFixed() on it, but thats not what we are looking here for right? We are looking for if something is instance of something. and 5 is not and instance of Number, 5 is primitive not a object, and if you expect it to work, change the description and the question."
                    },
                    {
                        "username": "Jpaulsisson",
                        "content": "I'm at a complete loss on why checkInstanceOf(0, Object) is supposed to return true. \nI'm a bit of a newbie but why is a zero an object or prototype of Object?"
                    },
                    {
                        "username": "rahiljakir",
                        "content": "Object is Super class of all the classes that\\'s why any instance, is also instance of Object.  like if you know JAVA, any object can be assigned to Object type reference."
                    },
                    {
                        "username": "tifv",
                        "content": "[@Google3048](/Google3048) One should note that call `Number(0)` is not constructing a `Number` object, it just returns a primitive. To construct an actual `Number` object you have to use `new Number(0)`. It will then be an instance of `Object` (as determined by `instanceof`), but `new Number(0) === 0` will be `false`."
                    },
                    {
                        "username": "zomiib",
                        "content": "Technically a 0 is not an object because 0 is a primitive which is \"data that is not an object and has no methods or properties\" (MDN). So why does it return true then? JavaScript does something commonly known as \"auto-boxing\" which basically means the primitive gets automatically wrapped in an object. \\nSo when you call 0.toFixed() it takes the 0 puts it in a Number object {0} and calls that new objects .toFixed() method which does work.\\n\\nI dont really like this question because a primitive is NOT an object as referenced by \"instanceof\". But because of auto-boxing wrapping the primitive ( 0 ) into an object, that new object is then obviously an object so LeetCode expects true."
                    },
                    {
                        "username": "Google3048",
                        "content": "`Number(0) === 0`, Number is a builtin object. If you open a browser console you can type `Number.` and scroll through what functions are available in the autocomplete."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "This is the most non-Acceptance task (in JS topic), and i wanna help you. What do you need to do in this task? You need to know if the \"object\" argument is an instance of the given class, or an instance of the parent class of the given class, and so on. I won't give you the exact algorithm, but I will give you a hint. If the function takes two arguments (12 and Object), then the output will be true, try to understand why. Try typing in browser console  `(12).__proto__` ,` (12).__proto__.__proto__`, `Number.prototype`, `Object.prototype`  and finally `(12).__proto__.__proto__.__proto__`"
                    },
                    {
                        "username": "Mohammed312x",
                        "content": "first of all thanks for the tip it helped me learn alot of thigns. am a newbie but bear with me please. If we follow this logic in this case, doesn\\'t it mean we will divert from the point of the question ? because we will be checking the parent of the given class and not the class it self. and if it returns false for the given class and true for its parent class, doesn\\'t it mean that the object and the class that we are suppose to check are like siblings ?"
                    },
                    {
                        "username": "cupcea21",
                        "content": "() => checkIfInstanceOf(5n, Object)\n() => checkIfInstanceOf(5n, BigInt)\nboth are expected to be true, how the hell ?"
                    },
                    {
                        "username": "lindablus",
                        "content": "It\\'s a bit confusing what an instance \"has access\" to a class\\' methods means.  My interpretation is that this means \"you can read properties (or properties thereof, etc.) to get at a method in the class\". \\n\\nFor instance, accessing a static method requires accessing the constructor property and then accessing the static method on the constructor.  Getting an overridden superclass\\' staticmethod might require accessing the \"__proto__\" property of the object (which is a bit dubious whether this is really a legal way of \"accessing\" things).\\n\\nA more sane way to pose this would be \"get instanceof working correctly with primitive types\"."
                    },
                    {
                        "username": "cionx",
                        "content": "It is neither specified nor clear what it means for an object to have access to a class\\u2019s methods. From the current formulation and the given examples, I was under the impression that the test case\\n```javascript\\n() => {\\n  function Container(value) {\\n    this.value = value;\\n  }\\n  function Box(value) {\\n    this.value = value;\\n  }\\n  const b = new Box(1);\\n  return checkIfInstanceOf(b, Container);\\n}\\n```\\nshould output `true`, since `b` implements all the properties required by a `Container` object. But the expected output is `false`."
                    },
                    {
                        "username": "tifv",
                        "content": "I guess the intended formulation would be something like \\u201Cvalue `A` is an instance of class `B` if the set of methods of `A` will reflect any changes made to `B.prototype` (unless these changes happen to be overridden by some `B`\\'s subclass)\\u201D."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "`() => checkIfInstanceOf(Symbol(), Object)`\\nexpects true. \\nThe MDN docs however state that symbol returns a primitive, which is not an object. GPT also says that Symbol is not an instance of Object. Shouldn\\'t it return false? "
                    },
                    {
                        "username": "tifv",
                        "content": "The problem specifies exactly when \\u201Can object is considered an instance of a given class\\u201D, and it is different from the usual JavaScript meaning of the phrase. `Symbol()` is indeed a primitive, but it derives its methods from `Symbol` class, which is a subclass of `Object`. According to the definition given by the problem (to emphasize, a non-standard one), it means `Symbol()` is an instance of `Object`."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "```\\n() => checkIfInstanceOf(Object, Object)\\n```\\nExpected `true`?\\nReally? Are you serious?\\nBut how about the example 3:\\n\\n>Input: func = () => checkIfInstanceOf(Date, Date)\\n>Output: false\\n>Explanation: A date constructor cannot logically be an instance of itself.\\n"
                    },
                    {
                        "username": "mpingo",
                        "content": "[@tifv](/tifv) \\nThanks for this."
                    },
                    {
                        "username": "tifv",
                        "content": "[@mpingo](/mpingo) It works the same way as the original question. `Array` object is an instance of `Function` class (as all constructors are). And `Function` class is a subclass of `Object` class."
                    },
                    {
                        "username": "mpingo",
                        "content": "Also, \\n\\n    () => checkIfInstanceOf(Array, Object)\\n\\nExpected `true` ???"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) The task is wrong and unclear!\\nOne more argument:\\n\\nIf we consider that \\n\\n> an object is considered an instance of a given class if that object has access to that class\\'s methods\\n\\n...then the code below should return `true`, but it returns `false`.\\n\\n```js\\n//editorial solution\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n      return false;\\n    let currPotentialPrototype = Object.getPrototypeOf(obj);\\n    while (currPotentialPrototype !== null) {\\n      if (currPotentialPrototype === classFunction.prototype) return true;\\n      currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n    }\\n    return false;\\n};\\n\\nclass A { someMethod(){ console.log(\\'someMethod is called\\') } }\\nclass B {}\\nconst b = new B;\\n\\nb.someMethod = A.prototype.someMethod\\nb.someMethod() // outs \\'someMethod is called\\' - OK\\n\\nconsole.log( checkIfInstanceOf( b, A ) ) // false - WRONG\\n```\\nThe instance of B borrows all methods from class A and it should to be considered as instance of A because this matches to the main condition of the task.\\nAlthough, the editorial solution gives the wrong answer (like many other accepted solutions).\\n\\nAgain: the task is unclear!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) The problem is defined by its statement; examples by themselves should not provide definition (but rather eliminate its incorrect interpretations). The problem defines “an instance of” with “an object is considered an instance of a given class if that object has access to that class's methods”, and this definition actually covers it all.\n\n`Date.prototype` contains a method `.getFullYear()`, therefore any instance of `Date` has access to this method. But the `Date` object itself does not have this method. Therefore, `Date` object is not “an instance of” `Date` class.\n\nOn the other hand, `Object.prototype` defines a bunch of methods, such as `.hasOwnProperty()`. Any instance of `Object` has this method or an overridden version of it, which is considered as “having access to the method”. In particular, the `Object` object itself has all methods defined by `Function.prototype`, which in turn has all methods defined by `Object.prototype` (overriding some of them). Therefore, the `Object` object is “an instance of” `Function` class, and also “an instance of” `Object` class.\n\nSimilarly, a primitive value has no class whatsoever, but it has some methods. Primitive numbers, for example, take their methods from `Number.prototype` (for example, `(1.0).toString === Number.prototype.toString` is true), which means that a primitive number is “an instance of” `Number` class.\n\n(I'm writing “an instance of” in quotes because the way it is defined in this problem is different from what it usually means in JavaScript.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) Thanks for your answer. I understand how it resolves by JS - it\\'s illogical and ruins the OOP principles, but it\\'s the piece of the language (Class is abstraction and object is a class instance. And class cannot be an instance anyway! Neither an instance of themself nor instance of another class). \\nBut the task description does not clearly cover this.\\nAlso the 3rd example describes that we have to correct this behavior. But task not describes that for Object we have to still remain default behavior.\\n\\nAlso why primitive value is instance of Number? It is illogical, but it is task condition.\\n\\nI\\'m talking about the task is unclear and have to describe this additionally!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) Why \\u201CObject cannot be instance of Object much like Date cannot be instance of Date\\u201D? All objects in JavaScript are instances of `Object`. In this regard `Object` is quite special; `Date` simply does not possess this property. (Much like in Python `isinstance(int, int)` returns `False`, but `isinstance(type, type)` returns `True`, which is completely logical.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@vadya-coder](/vadya-coder) thanks for answer. Actually, I understand how it resolves in JS under the hood, but it is unlogical especially due to 3rd example - Object cannot be instance of Object much like Date cannot be instance of Date!\nIt requires to be fixed with additional checks in a code to be logical.\nOr the task must have an additional condition describes that.\nNow the task is very unclear! And the statistics of only 28% of acceptance rate just confirms this."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "\"Object\" it is function. `Object.__proto__ === Function.prototype`. `Object.__proto__.__proto__   ===  Object`  Return TRUE. And \"Date\" it\\'s also function `Date.__proto__.__proto__ === Object`"
                    },
                    {
                        "username": "KondratovP",
                        "content": "i wonder what is a practical use of such function"
                    },
                    {
                        "username": "JRcodesgood",
                        "content": "This feels really odd in the JS idiosyncracies. Becuase null is an instance of Object. obj = null and classFunction = Object should return true as I understand it"
                    },
                    {
                        "username": "tifv",
                        "content": "\\u201CFor this problem, an object is considered an instance of a given class if that object has access to that class\\'s methods\\u201D and `null` doesn\\'t have any methods, so\\u2026"
                    }
                ]
            },
            {
                "id": 1870199,
                "content": [
                    {
                        "username": "shrinivas2",
                        "content": "func = () => checkIfInstanceOf(5, Number) this should return false, yes I know the number gets auto converted to an object when you use toFixed() on it, but thats not what we are looking here for right? We are looking for if something is instance of something. and 5 is not and instance of Number, 5 is primitive not a object, and if you expect it to work, change the description and the question."
                    },
                    {
                        "username": "Jpaulsisson",
                        "content": "I'm at a complete loss on why checkInstanceOf(0, Object) is supposed to return true. \nI'm a bit of a newbie but why is a zero an object or prototype of Object?"
                    },
                    {
                        "username": "rahiljakir",
                        "content": "Object is Super class of all the classes that\\'s why any instance, is also instance of Object.  like if you know JAVA, any object can be assigned to Object type reference."
                    },
                    {
                        "username": "tifv",
                        "content": "[@Google3048](/Google3048) One should note that call `Number(0)` is not constructing a `Number` object, it just returns a primitive. To construct an actual `Number` object you have to use `new Number(0)`. It will then be an instance of `Object` (as determined by `instanceof`), but `new Number(0) === 0` will be `false`."
                    },
                    {
                        "username": "zomiib",
                        "content": "Technically a 0 is not an object because 0 is a primitive which is \"data that is not an object and has no methods or properties\" (MDN). So why does it return true then? JavaScript does something commonly known as \"auto-boxing\" which basically means the primitive gets automatically wrapped in an object. \\nSo when you call 0.toFixed() it takes the 0 puts it in a Number object {0} and calls that new objects .toFixed() method which does work.\\n\\nI dont really like this question because a primitive is NOT an object as referenced by \"instanceof\". But because of auto-boxing wrapping the primitive ( 0 ) into an object, that new object is then obviously an object so LeetCode expects true."
                    },
                    {
                        "username": "Google3048",
                        "content": "`Number(0) === 0`, Number is a builtin object. If you open a browser console you can type `Number.` and scroll through what functions are available in the autocomplete."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "This is the most non-Acceptance task (in JS topic), and i wanna help you. What do you need to do in this task? You need to know if the \"object\" argument is an instance of the given class, or an instance of the parent class of the given class, and so on. I won't give you the exact algorithm, but I will give you a hint. If the function takes two arguments (12 and Object), then the output will be true, try to understand why. Try typing in browser console  `(12).__proto__` ,` (12).__proto__.__proto__`, `Number.prototype`, `Object.prototype`  and finally `(12).__proto__.__proto__.__proto__`"
                    },
                    {
                        "username": "Mohammed312x",
                        "content": "first of all thanks for the tip it helped me learn alot of thigns. am a newbie but bear with me please. If we follow this logic in this case, doesn\\'t it mean we will divert from the point of the question ? because we will be checking the parent of the given class and not the class it self. and if it returns false for the given class and true for its parent class, doesn\\'t it mean that the object and the class that we are suppose to check are like siblings ?"
                    },
                    {
                        "username": "cupcea21",
                        "content": "() => checkIfInstanceOf(5n, Object)\n() => checkIfInstanceOf(5n, BigInt)\nboth are expected to be true, how the hell ?"
                    },
                    {
                        "username": "lindablus",
                        "content": "It\\'s a bit confusing what an instance \"has access\" to a class\\' methods means.  My interpretation is that this means \"you can read properties (or properties thereof, etc.) to get at a method in the class\". \\n\\nFor instance, accessing a static method requires accessing the constructor property and then accessing the static method on the constructor.  Getting an overridden superclass\\' staticmethod might require accessing the \"__proto__\" property of the object (which is a bit dubious whether this is really a legal way of \"accessing\" things).\\n\\nA more sane way to pose this would be \"get instanceof working correctly with primitive types\"."
                    },
                    {
                        "username": "cionx",
                        "content": "It is neither specified nor clear what it means for an object to have access to a class\\u2019s methods. From the current formulation and the given examples, I was under the impression that the test case\\n```javascript\\n() => {\\n  function Container(value) {\\n    this.value = value;\\n  }\\n  function Box(value) {\\n    this.value = value;\\n  }\\n  const b = new Box(1);\\n  return checkIfInstanceOf(b, Container);\\n}\\n```\\nshould output `true`, since `b` implements all the properties required by a `Container` object. But the expected output is `false`."
                    },
                    {
                        "username": "tifv",
                        "content": "I guess the intended formulation would be something like \\u201Cvalue `A` is an instance of class `B` if the set of methods of `A` will reflect any changes made to `B.prototype` (unless these changes happen to be overridden by some `B`\\'s subclass)\\u201D."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "`() => checkIfInstanceOf(Symbol(), Object)`\\nexpects true. \\nThe MDN docs however state that symbol returns a primitive, which is not an object. GPT also says that Symbol is not an instance of Object. Shouldn\\'t it return false? "
                    },
                    {
                        "username": "tifv",
                        "content": "The problem specifies exactly when \\u201Can object is considered an instance of a given class\\u201D, and it is different from the usual JavaScript meaning of the phrase. `Symbol()` is indeed a primitive, but it derives its methods from `Symbol` class, which is a subclass of `Object`. According to the definition given by the problem (to emphasize, a non-standard one), it means `Symbol()` is an instance of `Object`."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "```\\n() => checkIfInstanceOf(Object, Object)\\n```\\nExpected `true`?\\nReally? Are you serious?\\nBut how about the example 3:\\n\\n>Input: func = () => checkIfInstanceOf(Date, Date)\\n>Output: false\\n>Explanation: A date constructor cannot logically be an instance of itself.\\n"
                    },
                    {
                        "username": "mpingo",
                        "content": "[@tifv](/tifv) \\nThanks for this."
                    },
                    {
                        "username": "tifv",
                        "content": "[@mpingo](/mpingo) It works the same way as the original question. `Array` object is an instance of `Function` class (as all constructors are). And `Function` class is a subclass of `Object` class."
                    },
                    {
                        "username": "mpingo",
                        "content": "Also, \\n\\n    () => checkIfInstanceOf(Array, Object)\\n\\nExpected `true` ???"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) The task is wrong and unclear!\\nOne more argument:\\n\\nIf we consider that \\n\\n> an object is considered an instance of a given class if that object has access to that class\\'s methods\\n\\n...then the code below should return `true`, but it returns `false`.\\n\\n```js\\n//editorial solution\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n      return false;\\n    let currPotentialPrototype = Object.getPrototypeOf(obj);\\n    while (currPotentialPrototype !== null) {\\n      if (currPotentialPrototype === classFunction.prototype) return true;\\n      currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n    }\\n    return false;\\n};\\n\\nclass A { someMethod(){ console.log(\\'someMethod is called\\') } }\\nclass B {}\\nconst b = new B;\\n\\nb.someMethod = A.prototype.someMethod\\nb.someMethod() // outs \\'someMethod is called\\' - OK\\n\\nconsole.log( checkIfInstanceOf( b, A ) ) // false - WRONG\\n```\\nThe instance of B borrows all methods from class A and it should to be considered as instance of A because this matches to the main condition of the task.\\nAlthough, the editorial solution gives the wrong answer (like many other accepted solutions).\\n\\nAgain: the task is unclear!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) The problem is defined by its statement; examples by themselves should not provide definition (but rather eliminate its incorrect interpretations). The problem defines “an instance of” with “an object is considered an instance of a given class if that object has access to that class's methods”, and this definition actually covers it all.\n\n`Date.prototype` contains a method `.getFullYear()`, therefore any instance of `Date` has access to this method. But the `Date` object itself does not have this method. Therefore, `Date` object is not “an instance of” `Date` class.\n\nOn the other hand, `Object.prototype` defines a bunch of methods, such as `.hasOwnProperty()`. Any instance of `Object` has this method or an overridden version of it, which is considered as “having access to the method”. In particular, the `Object` object itself has all methods defined by `Function.prototype`, which in turn has all methods defined by `Object.prototype` (overriding some of them). Therefore, the `Object` object is “an instance of” `Function` class, and also “an instance of” `Object` class.\n\nSimilarly, a primitive value has no class whatsoever, but it has some methods. Primitive numbers, for example, take their methods from `Number.prototype` (for example, `(1.0).toString === Number.prototype.toString` is true), which means that a primitive number is “an instance of” `Number` class.\n\n(I'm writing “an instance of” in quotes because the way it is defined in this problem is different from what it usually means in JavaScript.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) Thanks for your answer. I understand how it resolves by JS - it\\'s illogical and ruins the OOP principles, but it\\'s the piece of the language (Class is abstraction and object is a class instance. And class cannot be an instance anyway! Neither an instance of themself nor instance of another class). \\nBut the task description does not clearly cover this.\\nAlso the 3rd example describes that we have to correct this behavior. But task not describes that for Object we have to still remain default behavior.\\n\\nAlso why primitive value is instance of Number? It is illogical, but it is task condition.\\n\\nI\\'m talking about the task is unclear and have to describe this additionally!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) Why \\u201CObject cannot be instance of Object much like Date cannot be instance of Date\\u201D? All objects in JavaScript are instances of `Object`. In this regard `Object` is quite special; `Date` simply does not possess this property. (Much like in Python `isinstance(int, int)` returns `False`, but `isinstance(type, type)` returns `True`, which is completely logical.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@vadya-coder](/vadya-coder) thanks for answer. Actually, I understand how it resolves in JS under the hood, but it is unlogical especially due to 3rd example - Object cannot be instance of Object much like Date cannot be instance of Date!\nIt requires to be fixed with additional checks in a code to be logical.\nOr the task must have an additional condition describes that.\nNow the task is very unclear! And the statistics of only 28% of acceptance rate just confirms this."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "\"Object\" it is function. `Object.__proto__ === Function.prototype`. `Object.__proto__.__proto__   ===  Object`  Return TRUE. And \"Date\" it\\'s also function `Date.__proto__.__proto__ === Object`"
                    },
                    {
                        "username": "KondratovP",
                        "content": "i wonder what is a practical use of such function"
                    },
                    {
                        "username": "JRcodesgood",
                        "content": "This feels really odd in the JS idiosyncracies. Becuase null is an instance of Object. obj = null and classFunction = Object should return true as I understand it"
                    },
                    {
                        "username": "tifv",
                        "content": "\\u201CFor this problem, an object is considered an instance of a given class if that object has access to that class\\'s methods\\u201D and `null` doesn\\'t have any methods, so\\u2026"
                    }
                ]
            },
            {
                "id": 1885128,
                "content": [
                    {
                        "username": "shrinivas2",
                        "content": "func = () => checkIfInstanceOf(5, Number) this should return false, yes I know the number gets auto converted to an object when you use toFixed() on it, but thats not what we are looking here for right? We are looking for if something is instance of something. and 5 is not and instance of Number, 5 is primitive not a object, and if you expect it to work, change the description and the question."
                    },
                    {
                        "username": "Jpaulsisson",
                        "content": "I'm at a complete loss on why checkInstanceOf(0, Object) is supposed to return true. \nI'm a bit of a newbie but why is a zero an object or prototype of Object?"
                    },
                    {
                        "username": "rahiljakir",
                        "content": "Object is Super class of all the classes that\\'s why any instance, is also instance of Object.  like if you know JAVA, any object can be assigned to Object type reference."
                    },
                    {
                        "username": "tifv",
                        "content": "[@Google3048](/Google3048) One should note that call `Number(0)` is not constructing a `Number` object, it just returns a primitive. To construct an actual `Number` object you have to use `new Number(0)`. It will then be an instance of `Object` (as determined by `instanceof`), but `new Number(0) === 0` will be `false`."
                    },
                    {
                        "username": "zomiib",
                        "content": "Technically a 0 is not an object because 0 is a primitive which is \"data that is not an object and has no methods or properties\" (MDN). So why does it return true then? JavaScript does something commonly known as \"auto-boxing\" which basically means the primitive gets automatically wrapped in an object. \\nSo when you call 0.toFixed() it takes the 0 puts it in a Number object {0} and calls that new objects .toFixed() method which does work.\\n\\nI dont really like this question because a primitive is NOT an object as referenced by \"instanceof\". But because of auto-boxing wrapping the primitive ( 0 ) into an object, that new object is then obviously an object so LeetCode expects true."
                    },
                    {
                        "username": "Google3048",
                        "content": "`Number(0) === 0`, Number is a builtin object. If you open a browser console you can type `Number.` and scroll through what functions are available in the autocomplete."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "This is the most non-Acceptance task (in JS topic), and i wanna help you. What do you need to do in this task? You need to know if the \"object\" argument is an instance of the given class, or an instance of the parent class of the given class, and so on. I won't give you the exact algorithm, but I will give you a hint. If the function takes two arguments (12 and Object), then the output will be true, try to understand why. Try typing in browser console  `(12).__proto__` ,` (12).__proto__.__proto__`, `Number.prototype`, `Object.prototype`  and finally `(12).__proto__.__proto__.__proto__`"
                    },
                    {
                        "username": "Mohammed312x",
                        "content": "first of all thanks for the tip it helped me learn alot of thigns. am a newbie but bear with me please. If we follow this logic in this case, doesn\\'t it mean we will divert from the point of the question ? because we will be checking the parent of the given class and not the class it self. and if it returns false for the given class and true for its parent class, doesn\\'t it mean that the object and the class that we are suppose to check are like siblings ?"
                    },
                    {
                        "username": "cupcea21",
                        "content": "() => checkIfInstanceOf(5n, Object)\n() => checkIfInstanceOf(5n, BigInt)\nboth are expected to be true, how the hell ?"
                    },
                    {
                        "username": "lindablus",
                        "content": "It\\'s a bit confusing what an instance \"has access\" to a class\\' methods means.  My interpretation is that this means \"you can read properties (or properties thereof, etc.) to get at a method in the class\". \\n\\nFor instance, accessing a static method requires accessing the constructor property and then accessing the static method on the constructor.  Getting an overridden superclass\\' staticmethod might require accessing the \"__proto__\" property of the object (which is a bit dubious whether this is really a legal way of \"accessing\" things).\\n\\nA more sane way to pose this would be \"get instanceof working correctly with primitive types\"."
                    },
                    {
                        "username": "cionx",
                        "content": "It is neither specified nor clear what it means for an object to have access to a class\\u2019s methods. From the current formulation and the given examples, I was under the impression that the test case\\n```javascript\\n() => {\\n  function Container(value) {\\n    this.value = value;\\n  }\\n  function Box(value) {\\n    this.value = value;\\n  }\\n  const b = new Box(1);\\n  return checkIfInstanceOf(b, Container);\\n}\\n```\\nshould output `true`, since `b` implements all the properties required by a `Container` object. But the expected output is `false`."
                    },
                    {
                        "username": "tifv",
                        "content": "I guess the intended formulation would be something like \\u201Cvalue `A` is an instance of class `B` if the set of methods of `A` will reflect any changes made to `B.prototype` (unless these changes happen to be overridden by some `B`\\'s subclass)\\u201D."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "`() => checkIfInstanceOf(Symbol(), Object)`\\nexpects true. \\nThe MDN docs however state that symbol returns a primitive, which is not an object. GPT also says that Symbol is not an instance of Object. Shouldn\\'t it return false? "
                    },
                    {
                        "username": "tifv",
                        "content": "The problem specifies exactly when \\u201Can object is considered an instance of a given class\\u201D, and it is different from the usual JavaScript meaning of the phrase. `Symbol()` is indeed a primitive, but it derives its methods from `Symbol` class, which is a subclass of `Object`. According to the definition given by the problem (to emphasize, a non-standard one), it means `Symbol()` is an instance of `Object`."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "```\\n() => checkIfInstanceOf(Object, Object)\\n```\\nExpected `true`?\\nReally? Are you serious?\\nBut how about the example 3:\\n\\n>Input: func = () => checkIfInstanceOf(Date, Date)\\n>Output: false\\n>Explanation: A date constructor cannot logically be an instance of itself.\\n"
                    },
                    {
                        "username": "mpingo",
                        "content": "[@tifv](/tifv) \\nThanks for this."
                    },
                    {
                        "username": "tifv",
                        "content": "[@mpingo](/mpingo) It works the same way as the original question. `Array` object is an instance of `Function` class (as all constructors are). And `Function` class is a subclass of `Object` class."
                    },
                    {
                        "username": "mpingo",
                        "content": "Also, \\n\\n    () => checkIfInstanceOf(Array, Object)\\n\\nExpected `true` ???"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) The task is wrong and unclear!\\nOne more argument:\\n\\nIf we consider that \\n\\n> an object is considered an instance of a given class if that object has access to that class\\'s methods\\n\\n...then the code below should return `true`, but it returns `false`.\\n\\n```js\\n//editorial solution\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n      return false;\\n    let currPotentialPrototype = Object.getPrototypeOf(obj);\\n    while (currPotentialPrototype !== null) {\\n      if (currPotentialPrototype === classFunction.prototype) return true;\\n      currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n    }\\n    return false;\\n};\\n\\nclass A { someMethod(){ console.log(\\'someMethod is called\\') } }\\nclass B {}\\nconst b = new B;\\n\\nb.someMethod = A.prototype.someMethod\\nb.someMethod() // outs \\'someMethod is called\\' - OK\\n\\nconsole.log( checkIfInstanceOf( b, A ) ) // false - WRONG\\n```\\nThe instance of B borrows all methods from class A and it should to be considered as instance of A because this matches to the main condition of the task.\\nAlthough, the editorial solution gives the wrong answer (like many other accepted solutions).\\n\\nAgain: the task is unclear!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) The problem is defined by its statement; examples by themselves should not provide definition (but rather eliminate its incorrect interpretations). The problem defines “an instance of” with “an object is considered an instance of a given class if that object has access to that class's methods”, and this definition actually covers it all.\n\n`Date.prototype` contains a method `.getFullYear()`, therefore any instance of `Date` has access to this method. But the `Date` object itself does not have this method. Therefore, `Date` object is not “an instance of” `Date` class.\n\nOn the other hand, `Object.prototype` defines a bunch of methods, such as `.hasOwnProperty()`. Any instance of `Object` has this method or an overridden version of it, which is considered as “having access to the method”. In particular, the `Object` object itself has all methods defined by `Function.prototype`, which in turn has all methods defined by `Object.prototype` (overriding some of them). Therefore, the `Object` object is “an instance of” `Function` class, and also “an instance of” `Object` class.\n\nSimilarly, a primitive value has no class whatsoever, but it has some methods. Primitive numbers, for example, take their methods from `Number.prototype` (for example, `(1.0).toString === Number.prototype.toString` is true), which means that a primitive number is “an instance of” `Number` class.\n\n(I'm writing “an instance of” in quotes because the way it is defined in this problem is different from what it usually means in JavaScript.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) Thanks for your answer. I understand how it resolves by JS - it\\'s illogical and ruins the OOP principles, but it\\'s the piece of the language (Class is abstraction and object is a class instance. And class cannot be an instance anyway! Neither an instance of themself nor instance of another class). \\nBut the task description does not clearly cover this.\\nAlso the 3rd example describes that we have to correct this behavior. But task not describes that for Object we have to still remain default behavior.\\n\\nAlso why primitive value is instance of Number? It is illogical, but it is task condition.\\n\\nI\\'m talking about the task is unclear and have to describe this additionally!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) Why \\u201CObject cannot be instance of Object much like Date cannot be instance of Date\\u201D? All objects in JavaScript are instances of `Object`. In this regard `Object` is quite special; `Date` simply does not possess this property. (Much like in Python `isinstance(int, int)` returns `False`, but `isinstance(type, type)` returns `True`, which is completely logical.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@vadya-coder](/vadya-coder) thanks for answer. Actually, I understand how it resolves in JS under the hood, but it is unlogical especially due to 3rd example - Object cannot be instance of Object much like Date cannot be instance of Date!\nIt requires to be fixed with additional checks in a code to be logical.\nOr the task must have an additional condition describes that.\nNow the task is very unclear! And the statistics of only 28% of acceptance rate just confirms this."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "\"Object\" it is function. `Object.__proto__ === Function.prototype`. `Object.__proto__.__proto__   ===  Object`  Return TRUE. And \"Date\" it\\'s also function `Date.__proto__.__proto__ === Object`"
                    },
                    {
                        "username": "KondratovP",
                        "content": "i wonder what is a practical use of such function"
                    },
                    {
                        "username": "JRcodesgood",
                        "content": "This feels really odd in the JS idiosyncracies. Becuase null is an instance of Object. obj = null and classFunction = Object should return true as I understand it"
                    },
                    {
                        "username": "tifv",
                        "content": "\\u201CFor this problem, an object is considered an instance of a given class if that object has access to that class\\'s methods\\u201D and `null` doesn\\'t have any methods, so\\u2026"
                    }
                ]
            },
            {
                "id": 2052450,
                "content": [
                    {
                        "username": "shrinivas2",
                        "content": "func = () => checkIfInstanceOf(5, Number) this should return false, yes I know the number gets auto converted to an object when you use toFixed() on it, but thats not what we are looking here for right? We are looking for if something is instance of something. and 5 is not and instance of Number, 5 is primitive not a object, and if you expect it to work, change the description and the question."
                    },
                    {
                        "username": "Jpaulsisson",
                        "content": "I'm at a complete loss on why checkInstanceOf(0, Object) is supposed to return true. \nI'm a bit of a newbie but why is a zero an object or prototype of Object?"
                    },
                    {
                        "username": "rahiljakir",
                        "content": "Object is Super class of all the classes that\\'s why any instance, is also instance of Object.  like if you know JAVA, any object can be assigned to Object type reference."
                    },
                    {
                        "username": "tifv",
                        "content": "[@Google3048](/Google3048) One should note that call `Number(0)` is not constructing a `Number` object, it just returns a primitive. To construct an actual `Number` object you have to use `new Number(0)`. It will then be an instance of `Object` (as determined by `instanceof`), but `new Number(0) === 0` will be `false`."
                    },
                    {
                        "username": "zomiib",
                        "content": "Technically a 0 is not an object because 0 is a primitive which is \"data that is not an object and has no methods or properties\" (MDN). So why does it return true then? JavaScript does something commonly known as \"auto-boxing\" which basically means the primitive gets automatically wrapped in an object. \\nSo when you call 0.toFixed() it takes the 0 puts it in a Number object {0} and calls that new objects .toFixed() method which does work.\\n\\nI dont really like this question because a primitive is NOT an object as referenced by \"instanceof\". But because of auto-boxing wrapping the primitive ( 0 ) into an object, that new object is then obviously an object so LeetCode expects true."
                    },
                    {
                        "username": "Google3048",
                        "content": "`Number(0) === 0`, Number is a builtin object. If you open a browser console you can type `Number.` and scroll through what functions are available in the autocomplete."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "This is the most non-Acceptance task (in JS topic), and i wanna help you. What do you need to do in this task? You need to know if the \"object\" argument is an instance of the given class, or an instance of the parent class of the given class, and so on. I won't give you the exact algorithm, but I will give you a hint. If the function takes two arguments (12 and Object), then the output will be true, try to understand why. Try typing in browser console  `(12).__proto__` ,` (12).__proto__.__proto__`, `Number.prototype`, `Object.prototype`  and finally `(12).__proto__.__proto__.__proto__`"
                    },
                    {
                        "username": "Mohammed312x",
                        "content": "first of all thanks for the tip it helped me learn alot of thigns. am a newbie but bear with me please. If we follow this logic in this case, doesn\\'t it mean we will divert from the point of the question ? because we will be checking the parent of the given class and not the class it self. and if it returns false for the given class and true for its parent class, doesn\\'t it mean that the object and the class that we are suppose to check are like siblings ?"
                    },
                    {
                        "username": "cupcea21",
                        "content": "() => checkIfInstanceOf(5n, Object)\n() => checkIfInstanceOf(5n, BigInt)\nboth are expected to be true, how the hell ?"
                    },
                    {
                        "username": "lindablus",
                        "content": "It\\'s a bit confusing what an instance \"has access\" to a class\\' methods means.  My interpretation is that this means \"you can read properties (or properties thereof, etc.) to get at a method in the class\". \\n\\nFor instance, accessing a static method requires accessing the constructor property and then accessing the static method on the constructor.  Getting an overridden superclass\\' staticmethod might require accessing the \"__proto__\" property of the object (which is a bit dubious whether this is really a legal way of \"accessing\" things).\\n\\nA more sane way to pose this would be \"get instanceof working correctly with primitive types\"."
                    },
                    {
                        "username": "cionx",
                        "content": "It is neither specified nor clear what it means for an object to have access to a class\\u2019s methods. From the current formulation and the given examples, I was under the impression that the test case\\n```javascript\\n() => {\\n  function Container(value) {\\n    this.value = value;\\n  }\\n  function Box(value) {\\n    this.value = value;\\n  }\\n  const b = new Box(1);\\n  return checkIfInstanceOf(b, Container);\\n}\\n```\\nshould output `true`, since `b` implements all the properties required by a `Container` object. But the expected output is `false`."
                    },
                    {
                        "username": "tifv",
                        "content": "I guess the intended formulation would be something like \\u201Cvalue `A` is an instance of class `B` if the set of methods of `A` will reflect any changes made to `B.prototype` (unless these changes happen to be overridden by some `B`\\'s subclass)\\u201D."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "`() => checkIfInstanceOf(Symbol(), Object)`\\nexpects true. \\nThe MDN docs however state that symbol returns a primitive, which is not an object. GPT also says that Symbol is not an instance of Object. Shouldn\\'t it return false? "
                    },
                    {
                        "username": "tifv",
                        "content": "The problem specifies exactly when \\u201Can object is considered an instance of a given class\\u201D, and it is different from the usual JavaScript meaning of the phrase. `Symbol()` is indeed a primitive, but it derives its methods from `Symbol` class, which is a subclass of `Object`. According to the definition given by the problem (to emphasize, a non-standard one), it means `Symbol()` is an instance of `Object`."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "```\\n() => checkIfInstanceOf(Object, Object)\\n```\\nExpected `true`?\\nReally? Are you serious?\\nBut how about the example 3:\\n\\n>Input: func = () => checkIfInstanceOf(Date, Date)\\n>Output: false\\n>Explanation: A date constructor cannot logically be an instance of itself.\\n"
                    },
                    {
                        "username": "mpingo",
                        "content": "[@tifv](/tifv) \\nThanks for this."
                    },
                    {
                        "username": "tifv",
                        "content": "[@mpingo](/mpingo) It works the same way as the original question. `Array` object is an instance of `Function` class (as all constructors are). And `Function` class is a subclass of `Object` class."
                    },
                    {
                        "username": "mpingo",
                        "content": "Also, \\n\\n    () => checkIfInstanceOf(Array, Object)\\n\\nExpected `true` ???"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) The task is wrong and unclear!\\nOne more argument:\\n\\nIf we consider that \\n\\n> an object is considered an instance of a given class if that object has access to that class\\'s methods\\n\\n...then the code below should return `true`, but it returns `false`.\\n\\n```js\\n//editorial solution\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n      return false;\\n    let currPotentialPrototype = Object.getPrototypeOf(obj);\\n    while (currPotentialPrototype !== null) {\\n      if (currPotentialPrototype === classFunction.prototype) return true;\\n      currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n    }\\n    return false;\\n};\\n\\nclass A { someMethod(){ console.log(\\'someMethod is called\\') } }\\nclass B {}\\nconst b = new B;\\n\\nb.someMethod = A.prototype.someMethod\\nb.someMethod() // outs \\'someMethod is called\\' - OK\\n\\nconsole.log( checkIfInstanceOf( b, A ) ) // false - WRONG\\n```\\nThe instance of B borrows all methods from class A and it should to be considered as instance of A because this matches to the main condition of the task.\\nAlthough, the editorial solution gives the wrong answer (like many other accepted solutions).\\n\\nAgain: the task is unclear!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) The problem is defined by its statement; examples by themselves should not provide definition (but rather eliminate its incorrect interpretations). The problem defines “an instance of” with “an object is considered an instance of a given class if that object has access to that class's methods”, and this definition actually covers it all.\n\n`Date.prototype` contains a method `.getFullYear()`, therefore any instance of `Date` has access to this method. But the `Date` object itself does not have this method. Therefore, `Date` object is not “an instance of” `Date` class.\n\nOn the other hand, `Object.prototype` defines a bunch of methods, such as `.hasOwnProperty()`. Any instance of `Object` has this method or an overridden version of it, which is considered as “having access to the method”. In particular, the `Object` object itself has all methods defined by `Function.prototype`, which in turn has all methods defined by `Object.prototype` (overriding some of them). Therefore, the `Object` object is “an instance of” `Function` class, and also “an instance of” `Object` class.\n\nSimilarly, a primitive value has no class whatsoever, but it has some methods. Primitive numbers, for example, take their methods from `Number.prototype` (for example, `(1.0).toString === Number.prototype.toString` is true), which means that a primitive number is “an instance of” `Number` class.\n\n(I'm writing “an instance of” in quotes because the way it is defined in this problem is different from what it usually means in JavaScript.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) Thanks for your answer. I understand how it resolves by JS - it\\'s illogical and ruins the OOP principles, but it\\'s the piece of the language (Class is abstraction and object is a class instance. And class cannot be an instance anyway! Neither an instance of themself nor instance of another class). \\nBut the task description does not clearly cover this.\\nAlso the 3rd example describes that we have to correct this behavior. But task not describes that for Object we have to still remain default behavior.\\n\\nAlso why primitive value is instance of Number? It is illogical, but it is task condition.\\n\\nI\\'m talking about the task is unclear and have to describe this additionally!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) Why \\u201CObject cannot be instance of Object much like Date cannot be instance of Date\\u201D? All objects in JavaScript are instances of `Object`. In this regard `Object` is quite special; `Date` simply does not possess this property. (Much like in Python `isinstance(int, int)` returns `False`, but `isinstance(type, type)` returns `True`, which is completely logical.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@vadya-coder](/vadya-coder) thanks for answer. Actually, I understand how it resolves in JS under the hood, but it is unlogical especially due to 3rd example - Object cannot be instance of Object much like Date cannot be instance of Date!\nIt requires to be fixed with additional checks in a code to be logical.\nOr the task must have an additional condition describes that.\nNow the task is very unclear! And the statistics of only 28% of acceptance rate just confirms this."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "\"Object\" it is function. `Object.__proto__ === Function.prototype`. `Object.__proto__.__proto__   ===  Object`  Return TRUE. And \"Date\" it\\'s also function `Date.__proto__.__proto__ === Object`"
                    },
                    {
                        "username": "KondratovP",
                        "content": "i wonder what is a practical use of such function"
                    },
                    {
                        "username": "JRcodesgood",
                        "content": "This feels really odd in the JS idiosyncracies. Becuase null is an instance of Object. obj = null and classFunction = Object should return true as I understand it"
                    },
                    {
                        "username": "tifv",
                        "content": "\\u201CFor this problem, an object is considered an instance of a given class if that object has access to that class\\'s methods\\u201D and `null` doesn\\'t have any methods, so\\u2026"
                    }
                ]
            },
            {
                "id": 2024340,
                "content": [
                    {
                        "username": "shrinivas2",
                        "content": "func = () => checkIfInstanceOf(5, Number) this should return false, yes I know the number gets auto converted to an object when you use toFixed() on it, but thats not what we are looking here for right? We are looking for if something is instance of something. and 5 is not and instance of Number, 5 is primitive not a object, and if you expect it to work, change the description and the question."
                    },
                    {
                        "username": "Jpaulsisson",
                        "content": "I'm at a complete loss on why checkInstanceOf(0, Object) is supposed to return true. \nI'm a bit of a newbie but why is a zero an object or prototype of Object?"
                    },
                    {
                        "username": "rahiljakir",
                        "content": "Object is Super class of all the classes that\\'s why any instance, is also instance of Object.  like if you know JAVA, any object can be assigned to Object type reference."
                    },
                    {
                        "username": "tifv",
                        "content": "[@Google3048](/Google3048) One should note that call `Number(0)` is not constructing a `Number` object, it just returns a primitive. To construct an actual `Number` object you have to use `new Number(0)`. It will then be an instance of `Object` (as determined by `instanceof`), but `new Number(0) === 0` will be `false`."
                    },
                    {
                        "username": "zomiib",
                        "content": "Technically a 0 is not an object because 0 is a primitive which is \"data that is not an object and has no methods or properties\" (MDN). So why does it return true then? JavaScript does something commonly known as \"auto-boxing\" which basically means the primitive gets automatically wrapped in an object. \\nSo when you call 0.toFixed() it takes the 0 puts it in a Number object {0} and calls that new objects .toFixed() method which does work.\\n\\nI dont really like this question because a primitive is NOT an object as referenced by \"instanceof\". But because of auto-boxing wrapping the primitive ( 0 ) into an object, that new object is then obviously an object so LeetCode expects true."
                    },
                    {
                        "username": "Google3048",
                        "content": "`Number(0) === 0`, Number is a builtin object. If you open a browser console you can type `Number.` and scroll through what functions are available in the autocomplete."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "This is the most non-Acceptance task (in JS topic), and i wanna help you. What do you need to do in this task? You need to know if the \"object\" argument is an instance of the given class, or an instance of the parent class of the given class, and so on. I won't give you the exact algorithm, but I will give you a hint. If the function takes two arguments (12 and Object), then the output will be true, try to understand why. Try typing in browser console  `(12).__proto__` ,` (12).__proto__.__proto__`, `Number.prototype`, `Object.prototype`  and finally `(12).__proto__.__proto__.__proto__`"
                    },
                    {
                        "username": "Mohammed312x",
                        "content": "first of all thanks for the tip it helped me learn alot of thigns. am a newbie but bear with me please. If we follow this logic in this case, doesn\\'t it mean we will divert from the point of the question ? because we will be checking the parent of the given class and not the class it self. and if it returns false for the given class and true for its parent class, doesn\\'t it mean that the object and the class that we are suppose to check are like siblings ?"
                    },
                    {
                        "username": "cupcea21",
                        "content": "() => checkIfInstanceOf(5n, Object)\n() => checkIfInstanceOf(5n, BigInt)\nboth are expected to be true, how the hell ?"
                    },
                    {
                        "username": "lindablus",
                        "content": "It\\'s a bit confusing what an instance \"has access\" to a class\\' methods means.  My interpretation is that this means \"you can read properties (or properties thereof, etc.) to get at a method in the class\". \\n\\nFor instance, accessing a static method requires accessing the constructor property and then accessing the static method on the constructor.  Getting an overridden superclass\\' staticmethod might require accessing the \"__proto__\" property of the object (which is a bit dubious whether this is really a legal way of \"accessing\" things).\\n\\nA more sane way to pose this would be \"get instanceof working correctly with primitive types\"."
                    },
                    {
                        "username": "cionx",
                        "content": "It is neither specified nor clear what it means for an object to have access to a class\\u2019s methods. From the current formulation and the given examples, I was under the impression that the test case\\n```javascript\\n() => {\\n  function Container(value) {\\n    this.value = value;\\n  }\\n  function Box(value) {\\n    this.value = value;\\n  }\\n  const b = new Box(1);\\n  return checkIfInstanceOf(b, Container);\\n}\\n```\\nshould output `true`, since `b` implements all the properties required by a `Container` object. But the expected output is `false`."
                    },
                    {
                        "username": "tifv",
                        "content": "I guess the intended formulation would be something like \\u201Cvalue `A` is an instance of class `B` if the set of methods of `A` will reflect any changes made to `B.prototype` (unless these changes happen to be overridden by some `B`\\'s subclass)\\u201D."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "`() => checkIfInstanceOf(Symbol(), Object)`\\nexpects true. \\nThe MDN docs however state that symbol returns a primitive, which is not an object. GPT also says that Symbol is not an instance of Object. Shouldn\\'t it return false? "
                    },
                    {
                        "username": "tifv",
                        "content": "The problem specifies exactly when \\u201Can object is considered an instance of a given class\\u201D, and it is different from the usual JavaScript meaning of the phrase. `Symbol()` is indeed a primitive, but it derives its methods from `Symbol` class, which is a subclass of `Object`. According to the definition given by the problem (to emphasize, a non-standard one), it means `Symbol()` is an instance of `Object`."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "```\\n() => checkIfInstanceOf(Object, Object)\\n```\\nExpected `true`?\\nReally? Are you serious?\\nBut how about the example 3:\\n\\n>Input: func = () => checkIfInstanceOf(Date, Date)\\n>Output: false\\n>Explanation: A date constructor cannot logically be an instance of itself.\\n"
                    },
                    {
                        "username": "mpingo",
                        "content": "[@tifv](/tifv) \\nThanks for this."
                    },
                    {
                        "username": "tifv",
                        "content": "[@mpingo](/mpingo) It works the same way as the original question. `Array` object is an instance of `Function` class (as all constructors are). And `Function` class is a subclass of `Object` class."
                    },
                    {
                        "username": "mpingo",
                        "content": "Also, \\n\\n    () => checkIfInstanceOf(Array, Object)\\n\\nExpected `true` ???"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) The task is wrong and unclear!\\nOne more argument:\\n\\nIf we consider that \\n\\n> an object is considered an instance of a given class if that object has access to that class\\'s methods\\n\\n...then the code below should return `true`, but it returns `false`.\\n\\n```js\\n//editorial solution\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n      return false;\\n    let currPotentialPrototype = Object.getPrototypeOf(obj);\\n    while (currPotentialPrototype !== null) {\\n      if (currPotentialPrototype === classFunction.prototype) return true;\\n      currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n    }\\n    return false;\\n};\\n\\nclass A { someMethod(){ console.log(\\'someMethod is called\\') } }\\nclass B {}\\nconst b = new B;\\n\\nb.someMethod = A.prototype.someMethod\\nb.someMethod() // outs \\'someMethod is called\\' - OK\\n\\nconsole.log( checkIfInstanceOf( b, A ) ) // false - WRONG\\n```\\nThe instance of B borrows all methods from class A and it should to be considered as instance of A because this matches to the main condition of the task.\\nAlthough, the editorial solution gives the wrong answer (like many other accepted solutions).\\n\\nAgain: the task is unclear!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) The problem is defined by its statement; examples by themselves should not provide definition (but rather eliminate its incorrect interpretations). The problem defines “an instance of” with “an object is considered an instance of a given class if that object has access to that class's methods”, and this definition actually covers it all.\n\n`Date.prototype` contains a method `.getFullYear()`, therefore any instance of `Date` has access to this method. But the `Date` object itself does not have this method. Therefore, `Date` object is not “an instance of” `Date` class.\n\nOn the other hand, `Object.prototype` defines a bunch of methods, such as `.hasOwnProperty()`. Any instance of `Object` has this method or an overridden version of it, which is considered as “having access to the method”. In particular, the `Object` object itself has all methods defined by `Function.prototype`, which in turn has all methods defined by `Object.prototype` (overriding some of them). Therefore, the `Object` object is “an instance of” `Function` class, and also “an instance of” `Object` class.\n\nSimilarly, a primitive value has no class whatsoever, but it has some methods. Primitive numbers, for example, take their methods from `Number.prototype` (for example, `(1.0).toString === Number.prototype.toString` is true), which means that a primitive number is “an instance of” `Number` class.\n\n(I'm writing “an instance of” in quotes because the way it is defined in this problem is different from what it usually means in JavaScript.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) Thanks for your answer. I understand how it resolves by JS - it\\'s illogical and ruins the OOP principles, but it\\'s the piece of the language (Class is abstraction and object is a class instance. And class cannot be an instance anyway! Neither an instance of themself nor instance of another class). \\nBut the task description does not clearly cover this.\\nAlso the 3rd example describes that we have to correct this behavior. But task not describes that for Object we have to still remain default behavior.\\n\\nAlso why primitive value is instance of Number? It is illogical, but it is task condition.\\n\\nI\\'m talking about the task is unclear and have to describe this additionally!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) Why \\u201CObject cannot be instance of Object much like Date cannot be instance of Date\\u201D? All objects in JavaScript are instances of `Object`. In this regard `Object` is quite special; `Date` simply does not possess this property. (Much like in Python `isinstance(int, int)` returns `False`, but `isinstance(type, type)` returns `True`, which is completely logical.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@vadya-coder](/vadya-coder) thanks for answer. Actually, I understand how it resolves in JS under the hood, but it is unlogical especially due to 3rd example - Object cannot be instance of Object much like Date cannot be instance of Date!\nIt requires to be fixed with additional checks in a code to be logical.\nOr the task must have an additional condition describes that.\nNow the task is very unclear! And the statistics of only 28% of acceptance rate just confirms this."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "\"Object\" it is function. `Object.__proto__ === Function.prototype`. `Object.__proto__.__proto__   ===  Object`  Return TRUE. And \"Date\" it\\'s also function `Date.__proto__.__proto__ === Object`"
                    },
                    {
                        "username": "KondratovP",
                        "content": "i wonder what is a practical use of such function"
                    },
                    {
                        "username": "JRcodesgood",
                        "content": "This feels really odd in the JS idiosyncracies. Becuase null is an instance of Object. obj = null and classFunction = Object should return true as I understand it"
                    },
                    {
                        "username": "tifv",
                        "content": "\\u201CFor this problem, an object is considered an instance of a given class if that object has access to that class\\'s methods\\u201D and `null` doesn\\'t have any methods, so\\u2026"
                    }
                ]
            },
            {
                "id": 1915340,
                "content": [
                    {
                        "username": "shrinivas2",
                        "content": "func = () => checkIfInstanceOf(5, Number) this should return false, yes I know the number gets auto converted to an object when you use toFixed() on it, but thats not what we are looking here for right? We are looking for if something is instance of something. and 5 is not and instance of Number, 5 is primitive not a object, and if you expect it to work, change the description and the question."
                    },
                    {
                        "username": "Jpaulsisson",
                        "content": "I'm at a complete loss on why checkInstanceOf(0, Object) is supposed to return true. \nI'm a bit of a newbie but why is a zero an object or prototype of Object?"
                    },
                    {
                        "username": "rahiljakir",
                        "content": "Object is Super class of all the classes that\\'s why any instance, is also instance of Object.  like if you know JAVA, any object can be assigned to Object type reference."
                    },
                    {
                        "username": "tifv",
                        "content": "[@Google3048](/Google3048) One should note that call `Number(0)` is not constructing a `Number` object, it just returns a primitive. To construct an actual `Number` object you have to use `new Number(0)`. It will then be an instance of `Object` (as determined by `instanceof`), but `new Number(0) === 0` will be `false`."
                    },
                    {
                        "username": "zomiib",
                        "content": "Technically a 0 is not an object because 0 is a primitive which is \"data that is not an object and has no methods or properties\" (MDN). So why does it return true then? JavaScript does something commonly known as \"auto-boxing\" which basically means the primitive gets automatically wrapped in an object. \\nSo when you call 0.toFixed() it takes the 0 puts it in a Number object {0} and calls that new objects .toFixed() method which does work.\\n\\nI dont really like this question because a primitive is NOT an object as referenced by \"instanceof\". But because of auto-boxing wrapping the primitive ( 0 ) into an object, that new object is then obviously an object so LeetCode expects true."
                    },
                    {
                        "username": "Google3048",
                        "content": "`Number(0) === 0`, Number is a builtin object. If you open a browser console you can type `Number.` and scroll through what functions are available in the autocomplete."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "This is the most non-Acceptance task (in JS topic), and i wanna help you. What do you need to do in this task? You need to know if the \"object\" argument is an instance of the given class, or an instance of the parent class of the given class, and so on. I won't give you the exact algorithm, but I will give you a hint. If the function takes two arguments (12 and Object), then the output will be true, try to understand why. Try typing in browser console  `(12).__proto__` ,` (12).__proto__.__proto__`, `Number.prototype`, `Object.prototype`  and finally `(12).__proto__.__proto__.__proto__`"
                    },
                    {
                        "username": "Mohammed312x",
                        "content": "first of all thanks for the tip it helped me learn alot of thigns. am a newbie but bear with me please. If we follow this logic in this case, doesn\\'t it mean we will divert from the point of the question ? because we will be checking the parent of the given class and not the class it self. and if it returns false for the given class and true for its parent class, doesn\\'t it mean that the object and the class that we are suppose to check are like siblings ?"
                    },
                    {
                        "username": "cupcea21",
                        "content": "() => checkIfInstanceOf(5n, Object)\n() => checkIfInstanceOf(5n, BigInt)\nboth are expected to be true, how the hell ?"
                    },
                    {
                        "username": "lindablus",
                        "content": "It\\'s a bit confusing what an instance \"has access\" to a class\\' methods means.  My interpretation is that this means \"you can read properties (or properties thereof, etc.) to get at a method in the class\". \\n\\nFor instance, accessing a static method requires accessing the constructor property and then accessing the static method on the constructor.  Getting an overridden superclass\\' staticmethod might require accessing the \"__proto__\" property of the object (which is a bit dubious whether this is really a legal way of \"accessing\" things).\\n\\nA more sane way to pose this would be \"get instanceof working correctly with primitive types\"."
                    },
                    {
                        "username": "cionx",
                        "content": "It is neither specified nor clear what it means for an object to have access to a class\\u2019s methods. From the current formulation and the given examples, I was under the impression that the test case\\n```javascript\\n() => {\\n  function Container(value) {\\n    this.value = value;\\n  }\\n  function Box(value) {\\n    this.value = value;\\n  }\\n  const b = new Box(1);\\n  return checkIfInstanceOf(b, Container);\\n}\\n```\\nshould output `true`, since `b` implements all the properties required by a `Container` object. But the expected output is `false`."
                    },
                    {
                        "username": "tifv",
                        "content": "I guess the intended formulation would be something like \\u201Cvalue `A` is an instance of class `B` if the set of methods of `A` will reflect any changes made to `B.prototype` (unless these changes happen to be overridden by some `B`\\'s subclass)\\u201D."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "`() => checkIfInstanceOf(Symbol(), Object)`\\nexpects true. \\nThe MDN docs however state that symbol returns a primitive, which is not an object. GPT also says that Symbol is not an instance of Object. Shouldn\\'t it return false? "
                    },
                    {
                        "username": "tifv",
                        "content": "The problem specifies exactly when \\u201Can object is considered an instance of a given class\\u201D, and it is different from the usual JavaScript meaning of the phrase. `Symbol()` is indeed a primitive, but it derives its methods from `Symbol` class, which is a subclass of `Object`. According to the definition given by the problem (to emphasize, a non-standard one), it means `Symbol()` is an instance of `Object`."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "```\\n() => checkIfInstanceOf(Object, Object)\\n```\\nExpected `true`?\\nReally? Are you serious?\\nBut how about the example 3:\\n\\n>Input: func = () => checkIfInstanceOf(Date, Date)\\n>Output: false\\n>Explanation: A date constructor cannot logically be an instance of itself.\\n"
                    },
                    {
                        "username": "mpingo",
                        "content": "[@tifv](/tifv) \\nThanks for this."
                    },
                    {
                        "username": "tifv",
                        "content": "[@mpingo](/mpingo) It works the same way as the original question. `Array` object is an instance of `Function` class (as all constructors are). And `Function` class is a subclass of `Object` class."
                    },
                    {
                        "username": "mpingo",
                        "content": "Also, \\n\\n    () => checkIfInstanceOf(Array, Object)\\n\\nExpected `true` ???"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) The task is wrong and unclear!\\nOne more argument:\\n\\nIf we consider that \\n\\n> an object is considered an instance of a given class if that object has access to that class\\'s methods\\n\\n...then the code below should return `true`, but it returns `false`.\\n\\n```js\\n//editorial solution\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n      return false;\\n    let currPotentialPrototype = Object.getPrototypeOf(obj);\\n    while (currPotentialPrototype !== null) {\\n      if (currPotentialPrototype === classFunction.prototype) return true;\\n      currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n    }\\n    return false;\\n};\\n\\nclass A { someMethod(){ console.log(\\'someMethod is called\\') } }\\nclass B {}\\nconst b = new B;\\n\\nb.someMethod = A.prototype.someMethod\\nb.someMethod() // outs \\'someMethod is called\\' - OK\\n\\nconsole.log( checkIfInstanceOf( b, A ) ) // false - WRONG\\n```\\nThe instance of B borrows all methods from class A and it should to be considered as instance of A because this matches to the main condition of the task.\\nAlthough, the editorial solution gives the wrong answer (like many other accepted solutions).\\n\\nAgain: the task is unclear!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) The problem is defined by its statement; examples by themselves should not provide definition (but rather eliminate its incorrect interpretations). The problem defines “an instance of” with “an object is considered an instance of a given class if that object has access to that class's methods”, and this definition actually covers it all.\n\n`Date.prototype` contains a method `.getFullYear()`, therefore any instance of `Date` has access to this method. But the `Date` object itself does not have this method. Therefore, `Date` object is not “an instance of” `Date` class.\n\nOn the other hand, `Object.prototype` defines a bunch of methods, such as `.hasOwnProperty()`. Any instance of `Object` has this method or an overridden version of it, which is considered as “having access to the method”. In particular, the `Object` object itself has all methods defined by `Function.prototype`, which in turn has all methods defined by `Object.prototype` (overriding some of them). Therefore, the `Object` object is “an instance of” `Function` class, and also “an instance of” `Object` class.\n\nSimilarly, a primitive value has no class whatsoever, but it has some methods. Primitive numbers, for example, take their methods from `Number.prototype` (for example, `(1.0).toString === Number.prototype.toString` is true), which means that a primitive number is “an instance of” `Number` class.\n\n(I'm writing “an instance of” in quotes because the way it is defined in this problem is different from what it usually means in JavaScript.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) Thanks for your answer. I understand how it resolves by JS - it\\'s illogical and ruins the OOP principles, but it\\'s the piece of the language (Class is abstraction and object is a class instance. And class cannot be an instance anyway! Neither an instance of themself nor instance of another class). \\nBut the task description does not clearly cover this.\\nAlso the 3rd example describes that we have to correct this behavior. But task not describes that for Object we have to still remain default behavior.\\n\\nAlso why primitive value is instance of Number? It is illogical, but it is task condition.\\n\\nI\\'m talking about the task is unclear and have to describe this additionally!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) Why \\u201CObject cannot be instance of Object much like Date cannot be instance of Date\\u201D? All objects in JavaScript are instances of `Object`. In this regard `Object` is quite special; `Date` simply does not possess this property. (Much like in Python `isinstance(int, int)` returns `False`, but `isinstance(type, type)` returns `True`, which is completely logical.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@vadya-coder](/vadya-coder) thanks for answer. Actually, I understand how it resolves in JS under the hood, but it is unlogical especially due to 3rd example - Object cannot be instance of Object much like Date cannot be instance of Date!\nIt requires to be fixed with additional checks in a code to be logical.\nOr the task must have an additional condition describes that.\nNow the task is very unclear! And the statistics of only 28% of acceptance rate just confirms this."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "\"Object\" it is function. `Object.__proto__ === Function.prototype`. `Object.__proto__.__proto__   ===  Object`  Return TRUE. And \"Date\" it\\'s also function `Date.__proto__.__proto__ === Object`"
                    },
                    {
                        "username": "KondratovP",
                        "content": "i wonder what is a practical use of such function"
                    },
                    {
                        "username": "JRcodesgood",
                        "content": "This feels really odd in the JS idiosyncracies. Becuase null is an instance of Object. obj = null and classFunction = Object should return true as I understand it"
                    },
                    {
                        "username": "tifv",
                        "content": "\\u201CFor this problem, an object is considered an instance of a given class if that object has access to that class\\'s methods\\u201D and `null` doesn\\'t have any methods, so\\u2026"
                    }
                ]
            },
            {
                "id": 1909928,
                "content": [
                    {
                        "username": "shrinivas2",
                        "content": "func = () => checkIfInstanceOf(5, Number) this should return false, yes I know the number gets auto converted to an object when you use toFixed() on it, but thats not what we are looking here for right? We are looking for if something is instance of something. and 5 is not and instance of Number, 5 is primitive not a object, and if you expect it to work, change the description and the question."
                    },
                    {
                        "username": "Jpaulsisson",
                        "content": "I'm at a complete loss on why checkInstanceOf(0, Object) is supposed to return true. \nI'm a bit of a newbie but why is a zero an object or prototype of Object?"
                    },
                    {
                        "username": "rahiljakir",
                        "content": "Object is Super class of all the classes that\\'s why any instance, is also instance of Object.  like if you know JAVA, any object can be assigned to Object type reference."
                    },
                    {
                        "username": "tifv",
                        "content": "[@Google3048](/Google3048) One should note that call `Number(0)` is not constructing a `Number` object, it just returns a primitive. To construct an actual `Number` object you have to use `new Number(0)`. It will then be an instance of `Object` (as determined by `instanceof`), but `new Number(0) === 0` will be `false`."
                    },
                    {
                        "username": "zomiib",
                        "content": "Technically a 0 is not an object because 0 is a primitive which is \"data that is not an object and has no methods or properties\" (MDN). So why does it return true then? JavaScript does something commonly known as \"auto-boxing\" which basically means the primitive gets automatically wrapped in an object. \\nSo when you call 0.toFixed() it takes the 0 puts it in a Number object {0} and calls that new objects .toFixed() method which does work.\\n\\nI dont really like this question because a primitive is NOT an object as referenced by \"instanceof\". But because of auto-boxing wrapping the primitive ( 0 ) into an object, that new object is then obviously an object so LeetCode expects true."
                    },
                    {
                        "username": "Google3048",
                        "content": "`Number(0) === 0`, Number is a builtin object. If you open a browser console you can type `Number.` and scroll through what functions are available in the autocomplete."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "This is the most non-Acceptance task (in JS topic), and i wanna help you. What do you need to do in this task? You need to know if the \"object\" argument is an instance of the given class, or an instance of the parent class of the given class, and so on. I won't give you the exact algorithm, but I will give you a hint. If the function takes two arguments (12 and Object), then the output will be true, try to understand why. Try typing in browser console  `(12).__proto__` ,` (12).__proto__.__proto__`, `Number.prototype`, `Object.prototype`  and finally `(12).__proto__.__proto__.__proto__`"
                    },
                    {
                        "username": "Mohammed312x",
                        "content": "first of all thanks for the tip it helped me learn alot of thigns. am a newbie but bear with me please. If we follow this logic in this case, doesn\\'t it mean we will divert from the point of the question ? because we will be checking the parent of the given class and not the class it self. and if it returns false for the given class and true for its parent class, doesn\\'t it mean that the object and the class that we are suppose to check are like siblings ?"
                    },
                    {
                        "username": "cupcea21",
                        "content": "() => checkIfInstanceOf(5n, Object)\n() => checkIfInstanceOf(5n, BigInt)\nboth are expected to be true, how the hell ?"
                    },
                    {
                        "username": "lindablus",
                        "content": "It\\'s a bit confusing what an instance \"has access\" to a class\\' methods means.  My interpretation is that this means \"you can read properties (or properties thereof, etc.) to get at a method in the class\". \\n\\nFor instance, accessing a static method requires accessing the constructor property and then accessing the static method on the constructor.  Getting an overridden superclass\\' staticmethod might require accessing the \"__proto__\" property of the object (which is a bit dubious whether this is really a legal way of \"accessing\" things).\\n\\nA more sane way to pose this would be \"get instanceof working correctly with primitive types\"."
                    },
                    {
                        "username": "cionx",
                        "content": "It is neither specified nor clear what it means for an object to have access to a class\\u2019s methods. From the current formulation and the given examples, I was under the impression that the test case\\n```javascript\\n() => {\\n  function Container(value) {\\n    this.value = value;\\n  }\\n  function Box(value) {\\n    this.value = value;\\n  }\\n  const b = new Box(1);\\n  return checkIfInstanceOf(b, Container);\\n}\\n```\\nshould output `true`, since `b` implements all the properties required by a `Container` object. But the expected output is `false`."
                    },
                    {
                        "username": "tifv",
                        "content": "I guess the intended formulation would be something like \\u201Cvalue `A` is an instance of class `B` if the set of methods of `A` will reflect any changes made to `B.prototype` (unless these changes happen to be overridden by some `B`\\'s subclass)\\u201D."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "`() => checkIfInstanceOf(Symbol(), Object)`\\nexpects true. \\nThe MDN docs however state that symbol returns a primitive, which is not an object. GPT also says that Symbol is not an instance of Object. Shouldn\\'t it return false? "
                    },
                    {
                        "username": "tifv",
                        "content": "The problem specifies exactly when \\u201Can object is considered an instance of a given class\\u201D, and it is different from the usual JavaScript meaning of the phrase. `Symbol()` is indeed a primitive, but it derives its methods from `Symbol` class, which is a subclass of `Object`. According to the definition given by the problem (to emphasize, a non-standard one), it means `Symbol()` is an instance of `Object`."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "```\\n() => checkIfInstanceOf(Object, Object)\\n```\\nExpected `true`?\\nReally? Are you serious?\\nBut how about the example 3:\\n\\n>Input: func = () => checkIfInstanceOf(Date, Date)\\n>Output: false\\n>Explanation: A date constructor cannot logically be an instance of itself.\\n"
                    },
                    {
                        "username": "mpingo",
                        "content": "[@tifv](/tifv) \\nThanks for this."
                    },
                    {
                        "username": "tifv",
                        "content": "[@mpingo](/mpingo) It works the same way as the original question. `Array` object is an instance of `Function` class (as all constructors are). And `Function` class is a subclass of `Object` class."
                    },
                    {
                        "username": "mpingo",
                        "content": "Also, \\n\\n    () => checkIfInstanceOf(Array, Object)\\n\\nExpected `true` ???"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) The task is wrong and unclear!\\nOne more argument:\\n\\nIf we consider that \\n\\n> an object is considered an instance of a given class if that object has access to that class\\'s methods\\n\\n...then the code below should return `true`, but it returns `false`.\\n\\n```js\\n//editorial solution\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n      return false;\\n    let currPotentialPrototype = Object.getPrototypeOf(obj);\\n    while (currPotentialPrototype !== null) {\\n      if (currPotentialPrototype === classFunction.prototype) return true;\\n      currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n    }\\n    return false;\\n};\\n\\nclass A { someMethod(){ console.log(\\'someMethod is called\\') } }\\nclass B {}\\nconst b = new B;\\n\\nb.someMethod = A.prototype.someMethod\\nb.someMethod() // outs \\'someMethod is called\\' - OK\\n\\nconsole.log( checkIfInstanceOf( b, A ) ) // false - WRONG\\n```\\nThe instance of B borrows all methods from class A and it should to be considered as instance of A because this matches to the main condition of the task.\\nAlthough, the editorial solution gives the wrong answer (like many other accepted solutions).\\n\\nAgain: the task is unclear!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) The problem is defined by its statement; examples by themselves should not provide definition (but rather eliminate its incorrect interpretations). The problem defines “an instance of” with “an object is considered an instance of a given class if that object has access to that class's methods”, and this definition actually covers it all.\n\n`Date.prototype` contains a method `.getFullYear()`, therefore any instance of `Date` has access to this method. But the `Date` object itself does not have this method. Therefore, `Date` object is not “an instance of” `Date` class.\n\nOn the other hand, `Object.prototype` defines a bunch of methods, such as `.hasOwnProperty()`. Any instance of `Object` has this method or an overridden version of it, which is considered as “having access to the method”. In particular, the `Object` object itself has all methods defined by `Function.prototype`, which in turn has all methods defined by `Object.prototype` (overriding some of them). Therefore, the `Object` object is “an instance of” `Function` class, and also “an instance of” `Object` class.\n\nSimilarly, a primitive value has no class whatsoever, but it has some methods. Primitive numbers, for example, take their methods from `Number.prototype` (for example, `(1.0).toString === Number.prototype.toString` is true), which means that a primitive number is “an instance of” `Number` class.\n\n(I'm writing “an instance of” in quotes because the way it is defined in this problem is different from what it usually means in JavaScript.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) Thanks for your answer. I understand how it resolves by JS - it\\'s illogical and ruins the OOP principles, but it\\'s the piece of the language (Class is abstraction and object is a class instance. And class cannot be an instance anyway! Neither an instance of themself nor instance of another class). \\nBut the task description does not clearly cover this.\\nAlso the 3rd example describes that we have to correct this behavior. But task not describes that for Object we have to still remain default behavior.\\n\\nAlso why primitive value is instance of Number? It is illogical, but it is task condition.\\n\\nI\\'m talking about the task is unclear and have to describe this additionally!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) Why \\u201CObject cannot be instance of Object much like Date cannot be instance of Date\\u201D? All objects in JavaScript are instances of `Object`. In this regard `Object` is quite special; `Date` simply does not possess this property. (Much like in Python `isinstance(int, int)` returns `False`, but `isinstance(type, type)` returns `True`, which is completely logical.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@vadya-coder](/vadya-coder) thanks for answer. Actually, I understand how it resolves in JS under the hood, but it is unlogical especially due to 3rd example - Object cannot be instance of Object much like Date cannot be instance of Date!\nIt requires to be fixed with additional checks in a code to be logical.\nOr the task must have an additional condition describes that.\nNow the task is very unclear! And the statistics of only 28% of acceptance rate just confirms this."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "\"Object\" it is function. `Object.__proto__ === Function.prototype`. `Object.__proto__.__proto__   ===  Object`  Return TRUE. And \"Date\" it\\'s also function `Date.__proto__.__proto__ === Object`"
                    },
                    {
                        "username": "KondratovP",
                        "content": "i wonder what is a practical use of such function"
                    },
                    {
                        "username": "JRcodesgood",
                        "content": "This feels really odd in the JS idiosyncracies. Becuase null is an instance of Object. obj = null and classFunction = Object should return true as I understand it"
                    },
                    {
                        "username": "tifv",
                        "content": "\\u201CFor this problem, an object is considered an instance of a given class if that object has access to that class\\'s methods\\u201D and `null` doesn\\'t have any methods, so\\u2026"
                    }
                ]
            },
            {
                "id": 1909762,
                "content": [
                    {
                        "username": "shrinivas2",
                        "content": "func = () => checkIfInstanceOf(5, Number) this should return false, yes I know the number gets auto converted to an object when you use toFixed() on it, but thats not what we are looking here for right? We are looking for if something is instance of something. and 5 is not and instance of Number, 5 is primitive not a object, and if you expect it to work, change the description and the question."
                    },
                    {
                        "username": "Jpaulsisson",
                        "content": "I'm at a complete loss on why checkInstanceOf(0, Object) is supposed to return true. \nI'm a bit of a newbie but why is a zero an object or prototype of Object?"
                    },
                    {
                        "username": "rahiljakir",
                        "content": "Object is Super class of all the classes that\\'s why any instance, is also instance of Object.  like if you know JAVA, any object can be assigned to Object type reference."
                    },
                    {
                        "username": "tifv",
                        "content": "[@Google3048](/Google3048) One should note that call `Number(0)` is not constructing a `Number` object, it just returns a primitive. To construct an actual `Number` object you have to use `new Number(0)`. It will then be an instance of `Object` (as determined by `instanceof`), but `new Number(0) === 0` will be `false`."
                    },
                    {
                        "username": "zomiib",
                        "content": "Technically a 0 is not an object because 0 is a primitive which is \"data that is not an object and has no methods or properties\" (MDN). So why does it return true then? JavaScript does something commonly known as \"auto-boxing\" which basically means the primitive gets automatically wrapped in an object. \\nSo when you call 0.toFixed() it takes the 0 puts it in a Number object {0} and calls that new objects .toFixed() method which does work.\\n\\nI dont really like this question because a primitive is NOT an object as referenced by \"instanceof\". But because of auto-boxing wrapping the primitive ( 0 ) into an object, that new object is then obviously an object so LeetCode expects true."
                    },
                    {
                        "username": "Google3048",
                        "content": "`Number(0) === 0`, Number is a builtin object. If you open a browser console you can type `Number.` and scroll through what functions are available in the autocomplete."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "This is the most non-Acceptance task (in JS topic), and i wanna help you. What do you need to do in this task? You need to know if the \"object\" argument is an instance of the given class, or an instance of the parent class of the given class, and so on. I won't give you the exact algorithm, but I will give you a hint. If the function takes two arguments (12 and Object), then the output will be true, try to understand why. Try typing in browser console  `(12).__proto__` ,` (12).__proto__.__proto__`, `Number.prototype`, `Object.prototype`  and finally `(12).__proto__.__proto__.__proto__`"
                    },
                    {
                        "username": "Mohammed312x",
                        "content": "first of all thanks for the tip it helped me learn alot of thigns. am a newbie but bear with me please. If we follow this logic in this case, doesn\\'t it mean we will divert from the point of the question ? because we will be checking the parent of the given class and not the class it self. and if it returns false for the given class and true for its parent class, doesn\\'t it mean that the object and the class that we are suppose to check are like siblings ?"
                    },
                    {
                        "username": "cupcea21",
                        "content": "() => checkIfInstanceOf(5n, Object)\n() => checkIfInstanceOf(5n, BigInt)\nboth are expected to be true, how the hell ?"
                    },
                    {
                        "username": "lindablus",
                        "content": "It\\'s a bit confusing what an instance \"has access\" to a class\\' methods means.  My interpretation is that this means \"you can read properties (or properties thereof, etc.) to get at a method in the class\". \\n\\nFor instance, accessing a static method requires accessing the constructor property and then accessing the static method on the constructor.  Getting an overridden superclass\\' staticmethod might require accessing the \"__proto__\" property of the object (which is a bit dubious whether this is really a legal way of \"accessing\" things).\\n\\nA more sane way to pose this would be \"get instanceof working correctly with primitive types\"."
                    },
                    {
                        "username": "cionx",
                        "content": "It is neither specified nor clear what it means for an object to have access to a class\\u2019s methods. From the current formulation and the given examples, I was under the impression that the test case\\n```javascript\\n() => {\\n  function Container(value) {\\n    this.value = value;\\n  }\\n  function Box(value) {\\n    this.value = value;\\n  }\\n  const b = new Box(1);\\n  return checkIfInstanceOf(b, Container);\\n}\\n```\\nshould output `true`, since `b` implements all the properties required by a `Container` object. But the expected output is `false`."
                    },
                    {
                        "username": "tifv",
                        "content": "I guess the intended formulation would be something like \\u201Cvalue `A` is an instance of class `B` if the set of methods of `A` will reflect any changes made to `B.prototype` (unless these changes happen to be overridden by some `B`\\'s subclass)\\u201D."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "`() => checkIfInstanceOf(Symbol(), Object)`\\nexpects true. \\nThe MDN docs however state that symbol returns a primitive, which is not an object. GPT also says that Symbol is not an instance of Object. Shouldn\\'t it return false? "
                    },
                    {
                        "username": "tifv",
                        "content": "The problem specifies exactly when \\u201Can object is considered an instance of a given class\\u201D, and it is different from the usual JavaScript meaning of the phrase. `Symbol()` is indeed a primitive, but it derives its methods from `Symbol` class, which is a subclass of `Object`. According to the definition given by the problem (to emphasize, a non-standard one), it means `Symbol()` is an instance of `Object`."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "```\\n() => checkIfInstanceOf(Object, Object)\\n```\\nExpected `true`?\\nReally? Are you serious?\\nBut how about the example 3:\\n\\n>Input: func = () => checkIfInstanceOf(Date, Date)\\n>Output: false\\n>Explanation: A date constructor cannot logically be an instance of itself.\\n"
                    },
                    {
                        "username": "mpingo",
                        "content": "[@tifv](/tifv) \\nThanks for this."
                    },
                    {
                        "username": "tifv",
                        "content": "[@mpingo](/mpingo) It works the same way as the original question. `Array` object is an instance of `Function` class (as all constructors are). And `Function` class is a subclass of `Object` class."
                    },
                    {
                        "username": "mpingo",
                        "content": "Also, \\n\\n    () => checkIfInstanceOf(Array, Object)\\n\\nExpected `true` ???"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) The task is wrong and unclear!\\nOne more argument:\\n\\nIf we consider that \\n\\n> an object is considered an instance of a given class if that object has access to that class\\'s methods\\n\\n...then the code below should return `true`, but it returns `false`.\\n\\n```js\\n//editorial solution\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n      return false;\\n    let currPotentialPrototype = Object.getPrototypeOf(obj);\\n    while (currPotentialPrototype !== null) {\\n      if (currPotentialPrototype === classFunction.prototype) return true;\\n      currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n    }\\n    return false;\\n};\\n\\nclass A { someMethod(){ console.log(\\'someMethod is called\\') } }\\nclass B {}\\nconst b = new B;\\n\\nb.someMethod = A.prototype.someMethod\\nb.someMethod() // outs \\'someMethod is called\\' - OK\\n\\nconsole.log( checkIfInstanceOf( b, A ) ) // false - WRONG\\n```\\nThe instance of B borrows all methods from class A and it should to be considered as instance of A because this matches to the main condition of the task.\\nAlthough, the editorial solution gives the wrong answer (like many other accepted solutions).\\n\\nAgain: the task is unclear!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) The problem is defined by its statement; examples by themselves should not provide definition (but rather eliminate its incorrect interpretations). The problem defines “an instance of” with “an object is considered an instance of a given class if that object has access to that class's methods”, and this definition actually covers it all.\n\n`Date.prototype` contains a method `.getFullYear()`, therefore any instance of `Date` has access to this method. But the `Date` object itself does not have this method. Therefore, `Date` object is not “an instance of” `Date` class.\n\nOn the other hand, `Object.prototype` defines a bunch of methods, such as `.hasOwnProperty()`. Any instance of `Object` has this method or an overridden version of it, which is considered as “having access to the method”. In particular, the `Object` object itself has all methods defined by `Function.prototype`, which in turn has all methods defined by `Object.prototype` (overriding some of them). Therefore, the `Object` object is “an instance of” `Function` class, and also “an instance of” `Object` class.\n\nSimilarly, a primitive value has no class whatsoever, but it has some methods. Primitive numbers, for example, take their methods from `Number.prototype` (for example, `(1.0).toString === Number.prototype.toString` is true), which means that a primitive number is “an instance of” `Number` class.\n\n(I'm writing “an instance of” in quotes because the way it is defined in this problem is different from what it usually means in JavaScript.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) Thanks for your answer. I understand how it resolves by JS - it\\'s illogical and ruins the OOP principles, but it\\'s the piece of the language (Class is abstraction and object is a class instance. And class cannot be an instance anyway! Neither an instance of themself nor instance of another class). \\nBut the task description does not clearly cover this.\\nAlso the 3rd example describes that we have to correct this behavior. But task not describes that for Object we have to still remain default behavior.\\n\\nAlso why primitive value is instance of Number? It is illogical, but it is task condition.\\n\\nI\\'m talking about the task is unclear and have to describe this additionally!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) Why \\u201CObject cannot be instance of Object much like Date cannot be instance of Date\\u201D? All objects in JavaScript are instances of `Object`. In this regard `Object` is quite special; `Date` simply does not possess this property. (Much like in Python `isinstance(int, int)` returns `False`, but `isinstance(type, type)` returns `True`, which is completely logical.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@vadya-coder](/vadya-coder) thanks for answer. Actually, I understand how it resolves in JS under the hood, but it is unlogical especially due to 3rd example - Object cannot be instance of Object much like Date cannot be instance of Date!\nIt requires to be fixed with additional checks in a code to be logical.\nOr the task must have an additional condition describes that.\nNow the task is very unclear! And the statistics of only 28% of acceptance rate just confirms this."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "\"Object\" it is function. `Object.__proto__ === Function.prototype`. `Object.__proto__.__proto__   ===  Object`  Return TRUE. And \"Date\" it\\'s also function `Date.__proto__.__proto__ === Object`"
                    },
                    {
                        "username": "KondratovP",
                        "content": "i wonder what is a practical use of such function"
                    },
                    {
                        "username": "JRcodesgood",
                        "content": "This feels really odd in the JS idiosyncracies. Becuase null is an instance of Object. obj = null and classFunction = Object should return true as I understand it"
                    },
                    {
                        "username": "tifv",
                        "content": "\\u201CFor this problem, an object is considered an instance of a given class if that object has access to that class\\'s methods\\u201D and `null` doesn\\'t have any methods, so\\u2026"
                    }
                ]
            },
            {
                "id": 1999848,
                "content": [
                    {
                        "username": "shrinivas2",
                        "content": "func = () => checkIfInstanceOf(5, Number) this should return false, yes I know the number gets auto converted to an object when you use toFixed() on it, but thats not what we are looking here for right? We are looking for if something is instance of something. and 5 is not and instance of Number, 5 is primitive not a object, and if you expect it to work, change the description and the question."
                    },
                    {
                        "username": "Jpaulsisson",
                        "content": "I'm at a complete loss on why checkInstanceOf(0, Object) is supposed to return true. \nI'm a bit of a newbie but why is a zero an object or prototype of Object?"
                    },
                    {
                        "username": "rahiljakir",
                        "content": "Object is Super class of all the classes that\\'s why any instance, is also instance of Object.  like if you know JAVA, any object can be assigned to Object type reference."
                    },
                    {
                        "username": "tifv",
                        "content": "[@Google3048](/Google3048) One should note that call `Number(0)` is not constructing a `Number` object, it just returns a primitive. To construct an actual `Number` object you have to use `new Number(0)`. It will then be an instance of `Object` (as determined by `instanceof`), but `new Number(0) === 0` will be `false`."
                    },
                    {
                        "username": "zomiib",
                        "content": "Technically a 0 is not an object because 0 is a primitive which is \"data that is not an object and has no methods or properties\" (MDN). So why does it return true then? JavaScript does something commonly known as \"auto-boxing\" which basically means the primitive gets automatically wrapped in an object. \\nSo when you call 0.toFixed() it takes the 0 puts it in a Number object {0} and calls that new objects .toFixed() method which does work.\\n\\nI dont really like this question because a primitive is NOT an object as referenced by \"instanceof\". But because of auto-boxing wrapping the primitive ( 0 ) into an object, that new object is then obviously an object so LeetCode expects true."
                    },
                    {
                        "username": "Google3048",
                        "content": "`Number(0) === 0`, Number is a builtin object. If you open a browser console you can type `Number.` and scroll through what functions are available in the autocomplete."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "This is the most non-Acceptance task (in JS topic), and i wanna help you. What do you need to do in this task? You need to know if the \"object\" argument is an instance of the given class, or an instance of the parent class of the given class, and so on. I won't give you the exact algorithm, but I will give you a hint. If the function takes two arguments (12 and Object), then the output will be true, try to understand why. Try typing in browser console  `(12).__proto__` ,` (12).__proto__.__proto__`, `Number.prototype`, `Object.prototype`  and finally `(12).__proto__.__proto__.__proto__`"
                    },
                    {
                        "username": "Mohammed312x",
                        "content": "first of all thanks for the tip it helped me learn alot of thigns. am a newbie but bear with me please. If we follow this logic in this case, doesn\\'t it mean we will divert from the point of the question ? because we will be checking the parent of the given class and not the class it self. and if it returns false for the given class and true for its parent class, doesn\\'t it mean that the object and the class that we are suppose to check are like siblings ?"
                    },
                    {
                        "username": "cupcea21",
                        "content": "() => checkIfInstanceOf(5n, Object)\n() => checkIfInstanceOf(5n, BigInt)\nboth are expected to be true, how the hell ?"
                    },
                    {
                        "username": "lindablus",
                        "content": "It\\'s a bit confusing what an instance \"has access\" to a class\\' methods means.  My interpretation is that this means \"you can read properties (or properties thereof, etc.) to get at a method in the class\". \\n\\nFor instance, accessing a static method requires accessing the constructor property and then accessing the static method on the constructor.  Getting an overridden superclass\\' staticmethod might require accessing the \"__proto__\" property of the object (which is a bit dubious whether this is really a legal way of \"accessing\" things).\\n\\nA more sane way to pose this would be \"get instanceof working correctly with primitive types\"."
                    },
                    {
                        "username": "cionx",
                        "content": "It is neither specified nor clear what it means for an object to have access to a class\\u2019s methods. From the current formulation and the given examples, I was under the impression that the test case\\n```javascript\\n() => {\\n  function Container(value) {\\n    this.value = value;\\n  }\\n  function Box(value) {\\n    this.value = value;\\n  }\\n  const b = new Box(1);\\n  return checkIfInstanceOf(b, Container);\\n}\\n```\\nshould output `true`, since `b` implements all the properties required by a `Container` object. But the expected output is `false`."
                    },
                    {
                        "username": "tifv",
                        "content": "I guess the intended formulation would be something like \\u201Cvalue `A` is an instance of class `B` if the set of methods of `A` will reflect any changes made to `B.prototype` (unless these changes happen to be overridden by some `B`\\'s subclass)\\u201D."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "`() => checkIfInstanceOf(Symbol(), Object)`\\nexpects true. \\nThe MDN docs however state that symbol returns a primitive, which is not an object. GPT also says that Symbol is not an instance of Object. Shouldn\\'t it return false? "
                    },
                    {
                        "username": "tifv",
                        "content": "The problem specifies exactly when \\u201Can object is considered an instance of a given class\\u201D, and it is different from the usual JavaScript meaning of the phrase. `Symbol()` is indeed a primitive, but it derives its methods from `Symbol` class, which is a subclass of `Object`. According to the definition given by the problem (to emphasize, a non-standard one), it means `Symbol()` is an instance of `Object`."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "```\\n() => checkIfInstanceOf(Object, Object)\\n```\\nExpected `true`?\\nReally? Are you serious?\\nBut how about the example 3:\\n\\n>Input: func = () => checkIfInstanceOf(Date, Date)\\n>Output: false\\n>Explanation: A date constructor cannot logically be an instance of itself.\\n"
                    },
                    {
                        "username": "mpingo",
                        "content": "[@tifv](/tifv) \\nThanks for this."
                    },
                    {
                        "username": "tifv",
                        "content": "[@mpingo](/mpingo) It works the same way as the original question. `Array` object is an instance of `Function` class (as all constructors are). And `Function` class is a subclass of `Object` class."
                    },
                    {
                        "username": "mpingo",
                        "content": "Also, \\n\\n    () => checkIfInstanceOf(Array, Object)\\n\\nExpected `true` ???"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) The task is wrong and unclear!\\nOne more argument:\\n\\nIf we consider that \\n\\n> an object is considered an instance of a given class if that object has access to that class\\'s methods\\n\\n...then the code below should return `true`, but it returns `false`.\\n\\n```js\\n//editorial solution\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n      return false;\\n    let currPotentialPrototype = Object.getPrototypeOf(obj);\\n    while (currPotentialPrototype !== null) {\\n      if (currPotentialPrototype === classFunction.prototype) return true;\\n      currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n    }\\n    return false;\\n};\\n\\nclass A { someMethod(){ console.log(\\'someMethod is called\\') } }\\nclass B {}\\nconst b = new B;\\n\\nb.someMethod = A.prototype.someMethod\\nb.someMethod() // outs \\'someMethod is called\\' - OK\\n\\nconsole.log( checkIfInstanceOf( b, A ) ) // false - WRONG\\n```\\nThe instance of B borrows all methods from class A and it should to be considered as instance of A because this matches to the main condition of the task.\\nAlthough, the editorial solution gives the wrong answer (like many other accepted solutions).\\n\\nAgain: the task is unclear!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) The problem is defined by its statement; examples by themselves should not provide definition (but rather eliminate its incorrect interpretations). The problem defines “an instance of” with “an object is considered an instance of a given class if that object has access to that class's methods”, and this definition actually covers it all.\n\n`Date.prototype` contains a method `.getFullYear()`, therefore any instance of `Date` has access to this method. But the `Date` object itself does not have this method. Therefore, `Date` object is not “an instance of” `Date` class.\n\nOn the other hand, `Object.prototype` defines a bunch of methods, such as `.hasOwnProperty()`. Any instance of `Object` has this method or an overridden version of it, which is considered as “having access to the method”. In particular, the `Object` object itself has all methods defined by `Function.prototype`, which in turn has all methods defined by `Object.prototype` (overriding some of them). Therefore, the `Object` object is “an instance of” `Function` class, and also “an instance of” `Object` class.\n\nSimilarly, a primitive value has no class whatsoever, but it has some methods. Primitive numbers, for example, take their methods from `Number.prototype` (for example, `(1.0).toString === Number.prototype.toString` is true), which means that a primitive number is “an instance of” `Number` class.\n\n(I'm writing “an instance of” in quotes because the way it is defined in this problem is different from what it usually means in JavaScript.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) Thanks for your answer. I understand how it resolves by JS - it\\'s illogical and ruins the OOP principles, but it\\'s the piece of the language (Class is abstraction and object is a class instance. And class cannot be an instance anyway! Neither an instance of themself nor instance of another class). \\nBut the task description does not clearly cover this.\\nAlso the 3rd example describes that we have to correct this behavior. But task not describes that for Object we have to still remain default behavior.\\n\\nAlso why primitive value is instance of Number? It is illogical, but it is task condition.\\n\\nI\\'m talking about the task is unclear and have to describe this additionally!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) Why \\u201CObject cannot be instance of Object much like Date cannot be instance of Date\\u201D? All objects in JavaScript are instances of `Object`. In this regard `Object` is quite special; `Date` simply does not possess this property. (Much like in Python `isinstance(int, int)` returns `False`, but `isinstance(type, type)` returns `True`, which is completely logical.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@vadya-coder](/vadya-coder) thanks for answer. Actually, I understand how it resolves in JS under the hood, but it is unlogical especially due to 3rd example - Object cannot be instance of Object much like Date cannot be instance of Date!\nIt requires to be fixed with additional checks in a code to be logical.\nOr the task must have an additional condition describes that.\nNow the task is very unclear! And the statistics of only 28% of acceptance rate just confirms this."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "\"Object\" it is function. `Object.__proto__ === Function.prototype`. `Object.__proto__.__proto__   ===  Object`  Return TRUE. And \"Date\" it\\'s also function `Date.__proto__.__proto__ === Object`"
                    },
                    {
                        "username": "KondratovP",
                        "content": "i wonder what is a practical use of such function"
                    },
                    {
                        "username": "JRcodesgood",
                        "content": "This feels really odd in the JS idiosyncracies. Becuase null is an instance of Object. obj = null and classFunction = Object should return true as I understand it"
                    },
                    {
                        "username": "tifv",
                        "content": "\\u201CFor this problem, an object is considered an instance of a given class if that object has access to that class\\'s methods\\u201D and `null` doesn\\'t have any methods, so\\u2026"
                    }
                ]
            },
            {
                "id": 2008354,
                "content": [
                    {
                        "username": "shrinivas2",
                        "content": "func = () => checkIfInstanceOf(5, Number) this should return false, yes I know the number gets auto converted to an object when you use toFixed() on it, but thats not what we are looking here for right? We are looking for if something is instance of something. and 5 is not and instance of Number, 5 is primitive not a object, and if you expect it to work, change the description and the question."
                    },
                    {
                        "username": "Jpaulsisson",
                        "content": "I'm at a complete loss on why checkInstanceOf(0, Object) is supposed to return true. \nI'm a bit of a newbie but why is a zero an object or prototype of Object?"
                    },
                    {
                        "username": "rahiljakir",
                        "content": "Object is Super class of all the classes that\\'s why any instance, is also instance of Object.  like if you know JAVA, any object can be assigned to Object type reference."
                    },
                    {
                        "username": "tifv",
                        "content": "[@Google3048](/Google3048) One should note that call `Number(0)` is not constructing a `Number` object, it just returns a primitive. To construct an actual `Number` object you have to use `new Number(0)`. It will then be an instance of `Object` (as determined by `instanceof`), but `new Number(0) === 0` will be `false`."
                    },
                    {
                        "username": "zomiib",
                        "content": "Technically a 0 is not an object because 0 is a primitive which is \"data that is not an object and has no methods or properties\" (MDN). So why does it return true then? JavaScript does something commonly known as \"auto-boxing\" which basically means the primitive gets automatically wrapped in an object. \\nSo when you call 0.toFixed() it takes the 0 puts it in a Number object {0} and calls that new objects .toFixed() method which does work.\\n\\nI dont really like this question because a primitive is NOT an object as referenced by \"instanceof\". But because of auto-boxing wrapping the primitive ( 0 ) into an object, that new object is then obviously an object so LeetCode expects true."
                    },
                    {
                        "username": "Google3048",
                        "content": "`Number(0) === 0`, Number is a builtin object. If you open a browser console you can type `Number.` and scroll through what functions are available in the autocomplete."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "This is the most non-Acceptance task (in JS topic), and i wanna help you. What do you need to do in this task? You need to know if the \"object\" argument is an instance of the given class, or an instance of the parent class of the given class, and so on. I won't give you the exact algorithm, but I will give you a hint. If the function takes two arguments (12 and Object), then the output will be true, try to understand why. Try typing in browser console  `(12).__proto__` ,` (12).__proto__.__proto__`, `Number.prototype`, `Object.prototype`  and finally `(12).__proto__.__proto__.__proto__`"
                    },
                    {
                        "username": "Mohammed312x",
                        "content": "first of all thanks for the tip it helped me learn alot of thigns. am a newbie but bear with me please. If we follow this logic in this case, doesn\\'t it mean we will divert from the point of the question ? because we will be checking the parent of the given class and not the class it self. and if it returns false for the given class and true for its parent class, doesn\\'t it mean that the object and the class that we are suppose to check are like siblings ?"
                    },
                    {
                        "username": "cupcea21",
                        "content": "() => checkIfInstanceOf(5n, Object)\n() => checkIfInstanceOf(5n, BigInt)\nboth are expected to be true, how the hell ?"
                    },
                    {
                        "username": "lindablus",
                        "content": "It\\'s a bit confusing what an instance \"has access\" to a class\\' methods means.  My interpretation is that this means \"you can read properties (or properties thereof, etc.) to get at a method in the class\". \\n\\nFor instance, accessing a static method requires accessing the constructor property and then accessing the static method on the constructor.  Getting an overridden superclass\\' staticmethod might require accessing the \"__proto__\" property of the object (which is a bit dubious whether this is really a legal way of \"accessing\" things).\\n\\nA more sane way to pose this would be \"get instanceof working correctly with primitive types\"."
                    },
                    {
                        "username": "cionx",
                        "content": "It is neither specified nor clear what it means for an object to have access to a class\\u2019s methods. From the current formulation and the given examples, I was under the impression that the test case\\n```javascript\\n() => {\\n  function Container(value) {\\n    this.value = value;\\n  }\\n  function Box(value) {\\n    this.value = value;\\n  }\\n  const b = new Box(1);\\n  return checkIfInstanceOf(b, Container);\\n}\\n```\\nshould output `true`, since `b` implements all the properties required by a `Container` object. But the expected output is `false`."
                    },
                    {
                        "username": "tifv",
                        "content": "I guess the intended formulation would be something like \\u201Cvalue `A` is an instance of class `B` if the set of methods of `A` will reflect any changes made to `B.prototype` (unless these changes happen to be overridden by some `B`\\'s subclass)\\u201D."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "`() => checkIfInstanceOf(Symbol(), Object)`\\nexpects true. \\nThe MDN docs however state that symbol returns a primitive, which is not an object. GPT also says that Symbol is not an instance of Object. Shouldn\\'t it return false? "
                    },
                    {
                        "username": "tifv",
                        "content": "The problem specifies exactly when \\u201Can object is considered an instance of a given class\\u201D, and it is different from the usual JavaScript meaning of the phrase. `Symbol()` is indeed a primitive, but it derives its methods from `Symbol` class, which is a subclass of `Object`. According to the definition given by the problem (to emphasize, a non-standard one), it means `Symbol()` is an instance of `Object`."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "```\\n() => checkIfInstanceOf(Object, Object)\\n```\\nExpected `true`?\\nReally? Are you serious?\\nBut how about the example 3:\\n\\n>Input: func = () => checkIfInstanceOf(Date, Date)\\n>Output: false\\n>Explanation: A date constructor cannot logically be an instance of itself.\\n"
                    },
                    {
                        "username": "mpingo",
                        "content": "[@tifv](/tifv) \\nThanks for this."
                    },
                    {
                        "username": "tifv",
                        "content": "[@mpingo](/mpingo) It works the same way as the original question. `Array` object is an instance of `Function` class (as all constructors are). And `Function` class is a subclass of `Object` class."
                    },
                    {
                        "username": "mpingo",
                        "content": "Also, \\n\\n    () => checkIfInstanceOf(Array, Object)\\n\\nExpected `true` ???"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) The task is wrong and unclear!\\nOne more argument:\\n\\nIf we consider that \\n\\n> an object is considered an instance of a given class if that object has access to that class\\'s methods\\n\\n...then the code below should return `true`, but it returns `false`.\\n\\n```js\\n//editorial solution\\nvar checkIfInstanceOf = function (obj, classFunction) {\\n    if (obj === null || obj === undefined || typeof classFunction !== \"function\")\\n      return false;\\n    let currPotentialPrototype = Object.getPrototypeOf(obj);\\n    while (currPotentialPrototype !== null) {\\n      if (currPotentialPrototype === classFunction.prototype) return true;\\n      currPotentialPrototype = Object.getPrototypeOf(currPotentialPrototype);\\n    }\\n    return false;\\n};\\n\\nclass A { someMethod(){ console.log(\\'someMethod is called\\') } }\\nclass B {}\\nconst b = new B;\\n\\nb.someMethod = A.prototype.someMethod\\nb.someMethod() // outs \\'someMethod is called\\' - OK\\n\\nconsole.log( checkIfInstanceOf( b, A ) ) // false - WRONG\\n```\\nThe instance of B borrows all methods from class A and it should to be considered as instance of A because this matches to the main condition of the task.\\nAlthough, the editorial solution gives the wrong answer (like many other accepted solutions).\\n\\nAgain: the task is unclear!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) The problem is defined by its statement; examples by themselves should not provide definition (but rather eliminate its incorrect interpretations). The problem defines “an instance of” with “an object is considered an instance of a given class if that object has access to that class's methods”, and this definition actually covers it all.\n\n`Date.prototype` contains a method `.getFullYear()`, therefore any instance of `Date` has access to this method. But the `Date` object itself does not have this method. Therefore, `Date` object is not “an instance of” `Date` class.\n\nOn the other hand, `Object.prototype` defines a bunch of methods, such as `.hasOwnProperty()`. Any instance of `Object` has this method or an overridden version of it, which is considered as “having access to the method”. In particular, the `Object` object itself has all methods defined by `Function.prototype`, which in turn has all methods defined by `Object.prototype` (overriding some of them). Therefore, the `Object` object is “an instance of” `Function` class, and also “an instance of” `Object` class.\n\nSimilarly, a primitive value has no class whatsoever, but it has some methods. Primitive numbers, for example, take their methods from `Number.prototype` (for example, `(1.0).toString === Number.prototype.toString` is true), which means that a primitive number is “an instance of” `Number` class.\n\n(I'm writing “an instance of” in quotes because the way it is defined in this problem is different from what it usually means in JavaScript.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@tifv](/tifv) Thanks for your answer. I understand how it resolves by JS - it\\'s illogical and ruins the OOP principles, but it\\'s the piece of the language (Class is abstraction and object is a class instance. And class cannot be an instance anyway! Neither an instance of themself nor instance of another class). \\nBut the task description does not clearly cover this.\\nAlso the 3rd example describes that we have to correct this behavior. But task not describes that for Object we have to still remain default behavior.\\n\\nAlso why primitive value is instance of Number? It is illogical, but it is task condition.\\n\\nI\\'m talking about the task is unclear and have to describe this additionally!"
                    },
                    {
                        "username": "tifv",
                        "content": "[@Vlad_Ku](/Vlad_Ku) Why \\u201CObject cannot be instance of Object much like Date cannot be instance of Date\\u201D? All objects in JavaScript are instances of `Object`. In this regard `Object` is quite special; `Date` simply does not possess this property. (Much like in Python `isinstance(int, int)` returns `False`, but `isinstance(type, type)` returns `True`, which is completely logical.)"
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "[@vadya-coder](/vadya-coder) thanks for answer. Actually, I understand how it resolves in JS under the hood, but it is unlogical especially due to 3rd example - Object cannot be instance of Object much like Date cannot be instance of Date!\nIt requires to be fixed with additional checks in a code to be logical.\nOr the task must have an additional condition describes that.\nNow the task is very unclear! And the statistics of only 28% of acceptance rate just confirms this."
                    },
                    {
                        "username": "vadya-coder",
                        "content": "\"Object\" it is function. `Object.__proto__ === Function.prototype`. `Object.__proto__.__proto__   ===  Object`  Return TRUE. And \"Date\" it\\'s also function `Date.__proto__.__proto__ === Object`"
                    },
                    {
                        "username": "KondratovP",
                        "content": "i wonder what is a practical use of such function"
                    },
                    {
                        "username": "JRcodesgood",
                        "content": "This feels really odd in the JS idiosyncracies. Becuase null is an instance of Object. obj = null and classFunction = Object should return true as I understand it"
                    },
                    {
                        "username": "tifv",
                        "content": "\\u201CFor this problem, an object is considered an instance of a given class if that object has access to that class\\'s methods\\u201D and `null` doesn\\'t have any methods, so\\u2026"
                    }
                ]
            }
        ]
    }
]