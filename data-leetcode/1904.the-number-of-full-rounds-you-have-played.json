[
    {
        "title": "The Number of Full Rounds You Have Played",
        "question_content": "You are participating in an online chess tournament. There is a chess round that starts every 15 minutes. The first round of the day starts at 00:00, and after every 15 minutes, a new round starts.\n\n\tFor example, the second round starts at 00:15, the fourth round starts at 00:45, and the seventh round starts at 01:30.\n\nYou are given two strings loginTime and logoutTime where:\n\n\tloginTime is the time you will login to the game, and\n\tlogoutTime is the time you will logout from the game.\n\nIf logoutTime is earlier than loginTime, this means you have played from loginTime to midnight and from midnight to logoutTime.\nReturn the number of full chess rounds you have played in the tournament.\nNote:&nbsp;All the given times follow the 24-hour clock. That means the first round of the day starts at 00:00 and the last round of the day starts at 23:45.\n&nbsp;\nExample 1:\n\nInput: loginTime = \"09:31\", logoutTime = \"10:14\"\nOutput: 1\nExplanation: You played one full round from 09:45 to 10:00.\nYou did not play the full round from 09:30 to 09:45 because you logged in at 09:31 after it began.\nYou did not play the full round from 10:00 to 10:15 because you logged out at 10:14 before it ended.\n\nExample 2:\n\nInput: loginTime = \"21:30\", logoutTime = \"03:00\"\nOutput: 22\nExplanation: You played 10 full rounds from 21:30 to 00:00 and 12 full rounds from 00:00 to 03:00.\n10 + 12 = 22.\n\n&nbsp;\nConstraints:\n\n\tloginTime and logoutTime are in the format hh:mm.\n\t00 <= hh <= 23\n\t00 <= mm <= 59\n\tloginTime and logoutTime are not equal.",
        "solutions": [
            {
                "id": 1284240,
                "title": "c-straightforward-3-lines",
                "content": "See my latest update in repo [LeetCode](https://github.com/lzl124631x/LeetCode)\\n## Solution 1.\\n\\n1. Convert the `startTime` and `finishTime` into minutes.\\n2. If `startTime > finishTime`, add 24 hours to `finishTime` because we played overnight.\\n3. Divide `startTime` and `finishTime` by 15, and round them UP and DOWN respectively. In this way we round the `startTime` and `endTime` to their next/previous closest 15-minute rounds, respectively. So `floor(finish / 15) - ceil(start / 15)` is number of rounds inbetween. \\n\\nNote that if `startTime` and `finishTime` are in the same 15-minute round, the above returns `-1`. We should return `max(0, floor(finish / 15) - ceil(start / 15))`\\n\\n```cpp\\n// OJ: https://leetcode.com/contest/weekly-contest-246/problems/the-number-of-full-rounds-you-have-played/\\n// Author: github.com/lzl124631x\\n// Time: O(1)\\n// Space: O(1)\\nclass Solution {\\npublic:\\n    int numberOfRounds(string s, string f) {\\n        int start = 60 * stoi(s.substr(0, 2)) + stoi(s.substr(3)), finish = 60 * stoi(f.substr(0, 2)) + stoi(f.substr(3));\\n        if (start > finish) finish += 60 * 24; // If `finishTime` is earlier than `startTime`, add 24 hours to `finishTime`.\\n        return max(0, finish / 15 - (start + 14) / 15); // max(0, floor(finish / 15) - ceil(start / 15))\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\n// OJ: https://leetcode.com/contest/weekly-contest-246/problems/the-number-of-full-rounds-you-have-played/\\n// Author: github.com/lzl124631x\\n// Time: O(1)\\n// Space: O(1)\\nclass Solution {\\npublic:\\n    int numberOfRounds(string s, string f) {\\n        int start = 60 * stoi(s.substr(0, 2)) + stoi(s.substr(3)), finish = 60 * stoi(f.substr(0, 2)) + stoi(f.substr(3));\\n        if (start > finish) finish += 60 * 24; // If `finishTime` is earlier than `startTime`, add 24 hours to `finishTime`.\\n        return max(0, finish / 15 - (start + 14) / 15); // max(0, floor(finish / 15) - ceil(start / 15))\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284518,
                "title": "clean-java-o-1",
                "content": "Well, at least I claim this is clean/readable: :-)\\n\\n```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int start = toMinutes(startTime);\\n        int end = toMinutes(finishTime);\\n        \\n        int roundedStart = toNextQuarter(start);\\n        int roundedEnd = toPreviousQuarter(end);\\n        \\n        if (start < end) {\\n            return Math.max(0, (roundedEnd - roundedStart) / 15);\\n        }\\n        \\n        return (24 * 60 - roundedStart + roundedEnd) / 15;\\n    }\\n    \\n    public static int toMinutes(String s) {\\n        return Integer.parseInt(s.substring(0, 2)) * 60\\n            + Integer.parseInt(s.substring(3, 5));\\n    }\\n    \\n    public static int toNextQuarter(int time) {\\n        return ((time + 14) / 15) * 15;\\n    }\\n\\n    public static int toPreviousQuarter(int time) {\\n        return (time / 15) * 15;\\n    }\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int start = toMinutes(startTime);\\n        int end = toMinutes(finishTime);\\n        \\n        int roundedStart = toNextQuarter(start);\\n        int roundedEnd = toPreviousQuarter(end);\\n        \\n        if (start < end) {\\n            return Math.max(0, (roundedEnd - roundedStart) / 15);\\n        }\\n        \\n        return (24 * 60 - roundedStart + roundedEnd) / 15;\\n    }\\n    \\n    public static int toMinutes(String s) {\\n        return Integer.parseInt(s.substring(0, 2)) * 60\\n            + Integer.parseInt(s.substring(3, 5));\\n    }\\n    \\n    public static int toNextQuarter(int time) {\\n        return ((time + 14) / 15) * 15;\\n    }\\n\\n    public static int toPreviousQuarter(int time) {\\n        return (time / 15) * 15;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284279,
                "title": "python3-math-ish",
                "content": "\\n```\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        hs, ms = (int(x) for x in startTime.split(\":\"))\\n        ts = 60 * hs + ms\\n        hf, mf = (int(x) for x in finishTime.split(\":\"))\\n        tf = 60 * hf + mf\\n        if 0 <= tf - ts < 15: return 0 # edge case \\n        return tf//15 - (ts+14)//15 + (ts>tf)*96\\n```\\n\\n```\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        ts = 60 * int(startTime[:2]) + int(startTime[-2:])\\n        tf = 60 * int(finishTime[:2]) + int(finishTime[-2:])\\n        if 0 <= tf - ts < 15: return 0 # edge case \\n        return tf//15 - (ts+14)//15 + (ts>tf)*96\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        hs, ms = (int(x) for x in startTime.split(\":\"))\\n        ts = 60 * hs + ms\\n        hf, mf = (int(x) for x in finishTime.split(\":\"))\\n        tf = 60 * hf + mf\\n        if 0 <= tf - ts < 15: return 0 # edge case \\n        return tf//15 - (ts+14)//15 + (ts>tf)*96\\n```\n```\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        ts = 60 * int(startTime[:2]) + int(startTime[-2:])\\n        tf = 60 * int(finishTime[:2]) + int(finishTime[-2:])\\n        if 0 <= tf - ts < 15: return 0 # edge case \\n        return tf//15 - (ts+14)//15 + (ts>tf)*96\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284627,
                "title": "java-o-1-100-faster",
                "content": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        Integer startHH = Integer.parseInt(startTime.substring(0,2));\\n        Integer startMM = Integer.parseInt(startTime.substring(3));\\n        Integer finishHH = Integer.parseInt(finishTime.substring(0,2));\\n        Integer finishMM = Integer.parseInt(finishTime.substring(3));\\n        \\n        int start = startHH*60 +startMM;\\n        int end = finishHH*60 +finishMM;\\n        if (start > end) {\\n           end += 24*60;\\n        }\\n        \\n        return (int) Math.floor(end / 15.00) - (int) Math.ceil(start / 15.00);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        Integer startHH = Integer.parseInt(startTime.substring(0,2));\\n        Integer startMM = Integer.parseInt(startTime.substring(3));\\n        Integer finishHH = Integer.parseInt(finishTime.substring(0,2));\\n        Integer finishMM = Integer.parseInt(finishTime.substring(3));\\n        \\n        int start = startHH*60 +startMM;\\n        int end = finishHH*60 +finishMM;\\n        if (start > end) {\\n           end += 24*60;\\n        }\\n        \\n        return (int) Math.floor(end / 15.00) - (int) Math.ceil(start / 15.00);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284647,
                "title": "c-easy-with-explained-solution-passing-all-edge-cases",
                "content": "**1. To handle the case where our startTime is greater then endTime we add a period of 24 hrs ie 24*60.\\n2. To handle the case were startTime must be in the range of [15:30:45:60] we can add 14 to start time in that way we can skip [0 to 14] time interval\\n3. To Handle the edge case we have to convert the time to minute by multiplying by 60 sec.**\\n```\\nclass Solution {\\n    public:\\n        int numberOfRounds(string s, string f) {\\n            \\n\\t\\tint startT = 60 * stoi(s.substr(0,2)) + stoi(s.substr(3));\\n\\t\\tint finishT = 60 * stoi(f.substr(0,2)) + stoi(f.substr(3));\\n\\n\\t\\tif (startT > finishT)\\n\\t\\t\\tfinishT += 24 * 60;\\n\\n\\t\\treturn max(0, (finishT / 15) - (startT + 14) / 15);\\n            \\n        }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\n    public:\\n        int numberOfRounds(string s, string f) {\\n            \\n\\t\\tint startT = 60 * stoi(s.substr(0,2)) + stoi(s.substr(3));\\n\\t\\tint finishT = 60 * stoi(f.substr(0,2)) + stoi(f.substr(3));\\n\\n\\t\\tif (startT > finishT)\\n\\t\\t\\tfinishT += 24 * 60;\\n\\n\\t\\treturn max(0, (finishT / 15) - (startT + 14) / 15);\\n            \\n        }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284277,
                "title": "clean-python-3-straightforward",
                "content": "Time: `O(1)`\\nSpace: `O(1)`\\n```\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        if finishTime < startTime:\\n            return self.numberOfRounds(startTime, \\'24:00\\') + self.numberOfRounds(\\'00:00\\', finishTime)\\n        sHH, sMM = map(int, startTime.split(\\':\\'))\\n        fHH, fMM = map(int, finishTime.split(\\':\\'))\\n        start = sHH * 60 + sMM\\n        finish = fHH * 60 + fMM\\n        return max(0, finish // 15 - (start // 15 + (start % 15 > 0))) # thanks migeater for the case 12:01 - 12:02\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        if finishTime < startTime:\\n            return self.numberOfRounds(startTime, \\'24:00\\') + self.numberOfRounds(\\'00:00\\', finishTime)\\n        sHH, sMM = map(int, startTime.split(\\':\\'))\\n        fHH, fMM = map(int, finishTime.split(\\':\\'))\\n        start = sHH * 60 + sMM\\n        finish = fHH * 60 + fMM\\n        return max(0, finish // 15 - (start // 15 + (start % 15 > 0))) # thanks migeater for the case 12:01 - 12:02\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284225,
                "title": "very-simple-c-solution",
                "content": "Updated solution to preserve the original logic as much as possible,\\n\\n```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string startTime, string finishTime) {\\n        int a = stoi(startTime.substr(0, 2));\\n        int b = stoi(startTime.substr(3, 2));\\n        int c = stoi(finishTime.substr(0, 2));\\n        int d = stoi(finishTime.substr(3, 2));\\n        \\n        a = a*60+b;\\n        c = c*60+d;\\n\\n        if(c < a)\\n            c += 60*24;\\n        \\n        if(a%15 != 0)\\n            a += (15-(a%15));\\n        if(c%15 != 0)\\n            c -= (c%15);\\n        \\n        int val = (c-a)/15;\\n        return max(0, val);\\n    }\\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string startTime, string finishTime) {\\n        int a = stoi(startTime.substr(0, 2));\\n        int b = stoi(startTime.substr(3, 2));\\n        int c = stoi(finishTime.substr(0, 2));\\n        int d = stoi(finishTime.substr(3, 2));\\n        \\n        a = a*60+b;\\n        c = c*60+d;\\n\\n        if(c < a)\\n            c += 60*24;\\n        \\n        if(a%15 != 0)\\n            a += (15-(a%15));\\n        if(c%15 != 0)\\n            c -= (c%15);\\n        \\n        int val = (c-a)/15;\\n        return max(0, val);\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284235,
                "title": "js-solution-date-function",
                "content": "\\nuse ceil to get the valid start time.\\n```\\nvar numberOfRounds = function(startTime, finishTime) {\\n    var s = new Date(`2020-01-01T${startTime}:00Z`);\\n    var e;\\n    if(finishTime < startTime)\\n        e = new Date(`2020-01-02T${finishTime}:00Z`);\\n    else\\n        e = new Date(`2020-01-01T${finishTime}:00Z`);\\n    var st = Math.ceil(s.getTime() / 15 / 60000) * 15 * 60000;\\n    return Math.floor((e.getTime() - st) / (15 * 60000));\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar numberOfRounds = function(startTime, finishTime) {\\n    var s = new Date(`2020-01-01T${startTime}:00Z`);\\n    var e;\\n    if(finishTime < startTime)\\n        e = new Date(`2020-01-02T${finishTime}:00Z`);\\n    else\\n        e = new Date(`2020-01-01T${finishTime}:00Z`);\\n    var st = Math.ceil(s.getTime() / 15 / 60000) * 15 * 60000;\\n    return Math.floor((e.getTime() - st) / (15 * 60000));\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1284622,
                "title": "java-super-simple-sol",
                "content": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int start = timeInMinute(startTime); //convert start time to minutes\\n        int end = timeInMinute(finishTime); //Convert end time to minutes\\n        \\n        if(end < start)\\n            end += 24*60;\\n        \\n        if(start % 15 != 0)\\n            start += 15 - (start % 15); // make the starting point from the multiple of 15\\n        \\n        if(end % 15 != 0)\\n            end -= end % 15; // make the ending point multiple of 15\\n        \\n        if(end < start)\\n            return 0;\\n        \\n        return (end-start)/15;\\n        \\n    }\\n    \\n    private int timeInMinute(String s){\\n        int h = Integer.parseInt(s.substring(0,2));\\n        int m = Integer.parseInt(s.substring(3));\\n        \\n        return (h*60)+m;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int start = timeInMinute(startTime); //convert start time to minutes\\n        int end = timeInMinute(finishTime); //Convert end time to minutes\\n        \\n        if(end < start)\\n            end += 24*60;\\n        \\n        if(start % 15 != 0)\\n            start += 15 - (start % 15); // make the starting point from the multiple of 15\\n        \\n        if(end % 15 != 0)\\n            end -= end % 15; // make the ending point multiple of 15\\n        \\n        if(end < start)\\n            return 0;\\n        \\n        return (end-start)/15;\\n        \\n    }\\n    \\n    private int timeInMinute(String s){\\n        int h = Integer.parseInt(s.substring(0,2));\\n        int m = Integer.parseInt(s.substring(3));\\n        \\n        return (h*60)+m;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1286826,
                "title": "easy-o-1-c-solution-with-explanation",
                "content": "Consider the testcase `startTime = \\'12:01\\'` and  `finishTIme = \\'13:44\\'`\\n\\n```\\n     ceil                  floor  \\n     |->                     <-|\\n\\t|---|---|---|---|---|---|---|---|\\n\\t|               |               |\\n\\t12:00           13:00           14:00\\n```\\n\\n\\n\\nSolution:\\n- Convert `startTime` and `finishTime` to minutes\\n\\n- find the ceil of `startTime` to get the beginning of the first round.\\n\\n   `(start + 14) / 15)`  \\n   Here we add 14 to get to the first round played.\\n   `HH:00`, `HH:15`, `HH:30` and `HH:45` will stay in the same round while all other cases will skip the incomplete first round.\\n\\n- find the floor of `finishTime` to get the end of the last round in the given range.\\n\\n\\t`(finish / 15)`\\n\\n- Their difference gives the number of  rounds played.\\n\\n\\n\\nSubmission:\\n\\n```\\nclass Solution {\\n    public:\\n        int numberOfRounds(string s, string f) {\\n            \\n\\t\\tint start = 60 * stoi(s.substr(0,2)) + stoi(s.substr(3));\\n\\t\\tint finish = 60 * stoi(f.substr(0,2)) + stoi(f.substr(3));\\n\\n\\t\\tif (start > finish)\\n\\t\\t\\tfinish += 24 * 60;\\n\\n\\t\\treturn max(0, (finish / 15) - (start + 14) / 15);\\n            \\n        }\\n    };\\n```\\n",
                "solutionTags": [],
                "code": "```\\n     ceil                  floor  \\n     |->                     <-|\\n\\t|---|---|---|---|---|---|---|---|\\n\\t|               |               |\\n\\t12:00           13:00           14:00\\n```\n```\\nclass Solution {\\n    public:\\n        int numberOfRounds(string s, string f) {\\n            \\n\\t\\tint start = 60 * stoi(s.substr(0,2)) + stoi(s.substr(3));\\n\\t\\tint finish = 60 * stoi(f.substr(0,2)) + stoi(f.substr(3));\\n\\n\\t\\tif (start > finish)\\n\\t\\t\\tfinish += 24 * 60;\\n\\n\\t\\treturn max(0, (finish / 15) - (start + 14) / 15);\\n            \\n        }\\n    };\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284591,
                "title": "java-o-1-solution-with-comments-in-the-code-for-better-understanding",
                "content": "Here we\\'re basically converting the startTime and endTime to minutes and then calculating then result.\\n```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        \\n        int finMin = Integer.parseInt(finishTime.substring(3, 5));\\n        int startMin = Integer.parseInt(startTime.substring(3,5));\\n        int finHr = Integer.parseInt(finishTime.substring(0, 2));\\n        int startHr = Integer.parseInt(startTime.substring(0, 2));\\n        \\n        int start = startHr * 60 + startMin; //converting start time to minutes\\n        int end = finHr * 60 + finMin;  // converting endtime to minutes\\n        \\n        if(start % 15 != 0) {     // making start to next multiple of 15 \\n            int div = start/15;   // doing this because in start time for example of 03:10(190 mins), \\n            start = 15 * (div + 1);  //we can join the contest at 03:15(195 mins) only and 195 is next multiple of 15 after 190.\\n        }\\n        \\n        if(end % 15 != 0) {  //doing the same here but instead of finding the next multiple we\\'re rounding off to previous multiple of 15\\n            int div = end/15; // as ending time of for example 03:10 we have to count till 03:00 because at 03:00 new game starts\\n            end = 15 * div; // but it ends at 03:15 but our end time is 03:10\\n        }\\n        \\n        if(end < start) end = end + 24*60;  //here if ending time < start time. see example 2 of the provided test cases.\\n                                            // basically the game ends at next day so we added 24 more hours\\n        \\n        \\n        return Math.abs(end - start) / 15; // now to find the number of games played we divide the time difference by 15\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        \\n        int finMin = Integer.parseInt(finishTime.substring(3, 5));\\n        int startMin = Integer.parseInt(startTime.substring(3,5));\\n        int finHr = Integer.parseInt(finishTime.substring(0, 2));\\n        int startHr = Integer.parseInt(startTime.substring(0, 2));\\n        \\n        int start = startHr * 60 + startMin; //converting start time to minutes\\n        int end = finHr * 60 + finMin;  // converting endtime to minutes\\n        \\n        if(start % 15 != 0) {     // making start to next multiple of 15 \\n            int div = start/15;   // doing this because in start time for example of 03:10(190 mins), \\n            start = 15 * (div + 1);  //we can join the contest at 03:15(195 mins) only and 195 is next multiple of 15 after 190.\\n        }\\n        \\n        if(end % 15 != 0) {  //doing the same here but instead of finding the next multiple we\\'re rounding off to previous multiple of 15\\n            int div = end/15; // as ending time of for example 03:10 we have to count till 03:00 because at 03:00 new game starts\\n            end = 15 * div; // but it ends at 03:15 but our end time is 03:10\\n        }\\n        \\n        if(end < start) end = end + 24*60;  //here if ending time < start time. see example 2 of the provided test cases.\\n                                            // basically the game ends at next day so we added 24 more hours\\n        \\n        \\n        return Math.abs(end - start) / 15; // now to find the number of games played we divide the time difference by 15\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284523,
                "title": "python-play-with-numbers",
                "content": "The main idea behind this solution was :\\n1.Convert times to numbers\\n2.Find the first time where a play can start\\n3.If the end time is less than start, go on untill 2400 and make start-index to 0\\n3.Go on untill we reach the end time\\n\\nThe main point to be remembered here is 10:60 is treated same as 11:00.\\n~~~\\nclass Solution:\\n    def numberOfRounds(self, s: str, f: str) -> int:\\n        si=int(s[:2]+s[3:]) #start integer\\n        ei=int(f[:2]+f[3:]) #end integer\\n        while((si%100)%15!=0):si+=1 #if last two digits are divisible by 15 then it\\'s start time\\n        count=0\\n        if(ei<si): #end integer is less than start integer\\n            while(si<=2360): #if end time is less than start time\\n\\t\\t#if we reached a perfect hour we need to go to next hour + 15\\n\\t\\t#that is if we are at 10:60 and if we add 40 we go to 11:00 but 11:00 is same as 10:60, \\n\\t\\t#so increment by another 15 = 40+15=55\\n                if((si%100)==60):si+=55 \\n                else:si+=15 #increment time by 15 minutes indicating completion of a time slot\\n                count+=1\\n            count-=1 #As we moved one step ahead(<=2360) decrementing the count\\n            si=0 #setting start time as 0\\n        while(si<=ei):\\n            count+=1\\n            if((si%100)==60):si+=55 #same above logic applies here\\n            else:si+=15\\n        count-=1\\n        return count\\n~~~",
                "solutionTags": [],
                "code": "The main idea behind this solution was :\\n1.Convert times to numbers\\n2.Find the first time where a play can start\\n3.If the end time is less than start, go on untill 2400 and make start-index to 0\\n3.Go on untill we reach the end time\\n\\nThe main point to be remembered here is 10:60 is treated same as 11:00.\\n~~~\\nclass Solution:\\n    def numberOfRounds(self, s: str, f: str) -> int:\\n        si=int(s[:2]+s[3:]) #start integer\\n        ei=int(f[:2]+f[3:]) #end integer\\n        while((si%100)%15!=0):si+=1 #if last two digits are divisible by 15 then it\\'s start time\\n        count=0\\n        if(ei<si): #end integer is less than start integer\\n            while(si<=2360): #if end time is less than start time\\n\\t\\t#if we reached a perfect hour we need to go to next hour + 15\\n\\t\\t#that is if we are at 10:60 and if we add 40 we go to 11:00 but 11:00 is same as 10:60, \\n\\t\\t#so increment by another 15 = 40+15=55\\n                if((si%100)==60):si+=55 \\n                else:si+=15 #increment time by 15 minutes indicating completion of a time slot\\n                count+=1\\n            count-=1 #As we moved one step ahead(<=2360) decrementing the count\\n            si=0 #setting start time as 0\\n        while(si<=ei):\\n            count+=1\\n            if((si%100)==60):si+=55 #same above logic applies here\\n            else:si+=15\\n        count-=1\\n        return count\\n~~~",
                "codeTag": "Java"
            },
            {
                "id": 1284465,
                "title": "python-brute-force-constant-time-and-space",
                "content": "Idea: Split the time into hours and minutes.\\n\\nif start hour == end hour, and start min < end min, this simply means start time is less than end time.\\nso, get the difference between the  number of games he/she can play witin that time. \\nNote: if start min = 1 and end min = 46, then our games played will be only 2 from 15-30 min and 30 - 45 min.\\nSo, **do not do (end min - start min)//15** because it will give you (46-1)//15 = 3 which is not true.\\n\\nSo, just take care of such things and it can be solved easily.\\n\\nI guess the code is self explanatory. Kindly go through it. Incase of any doubts, feel free to comment down below.\\n\\nHave a great day!\\n\\n```\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        sh, sm = startTime.split(\":\")\\n        eh, em = finishTime.split(\":\")\\n\\t\\t\\n        # sh - hour part of the start time\\n\\t\\t# sm - minute part of the start time\\n\\t\\t# eh - hour part of the finish time\\n\\t\\t# em = minute part of the finish time\\n        sh, sm, eh, em = int(sh), int(sm), int(eh), int(em)\\n        \\n        if sh == eh:\\n            if sm <= em:\\n                return em//15 - (sm//15 + 1)\\n            else:\\n                val = 0\\n                sm = 60 - sm\\n                val += sm//15\\n                val += em//15\\n                return 23*4 + val \\n        else:\\n            if eh < sh:\\n                eh += 24\\n            val = 0\\n            sm = 60 - sm\\n            val += sm//15\\n            val += em//15\\n            sh += 1\\n            return (eh-sh)*4 + val\\n```\\nTime = Space = O(1)",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        sh, sm = startTime.split(\":\")\\n        eh, em = finishTime.split(\":\")\\n\\t\\t\\n        # sh - hour part of the start time\\n\\t\\t# sm - minute part of the start time\\n\\t\\t# eh - hour part of the finish time\\n\\t\\t# em = minute part of the finish time\\n        sh, sm, eh, em = int(sh), int(sm), int(eh), int(em)\\n        \\n        if sh == eh:\\n            if sm <= em:\\n                return em//15 - (sm//15 + 1)\\n            else:\\n                val = 0\\n                sm = 60 - sm\\n                val += sm//15\\n                val += em//15\\n                return 23*4 + val \\n        else:\\n            if eh < sh:\\n                eh += 24\\n            val = 0\\n            sm = 60 - sm\\n            val += sm//15\\n            val += em//15\\n            sh += 1\\n            return (eh-sh)*4 + val\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284401,
                "title": "c-no-bullshit",
                "content": "JUST CHECK IF FINISH TIME IS MULTIPLE OF 15.TAKES CARE OF ALL CASES\\n```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string st, string ft) {\\n        int s=0;\\n        s=(st[0]-\\'0\\')*1000+(st[1]-\\'0\\')*100+(st[3]-\\'0\\')*10+st[4]-\\'0\\';\\n        int f=0;\\n        f=(ft[0]-\\'0\\')*1000+(ft[1]-\\'0\\')*100+(ft[3]-\\'0\\')*10+ft[4]-\\'0\\';\\n        int ans=0;\\n        if(((f%100)%15)==0)ans++;\\n        while(s!=f)\\n        {\\n          \\n            if(((s%100)%15)==0)\\n                ans++;\\n            if((s%100)==59)\\n            {\\n                s=s/100;\\n                if(s==23)s=0;\\n                else{\\n                    s++;\\n                    s=s*100;\\n                }\\n            }\\n            else\\n                s++;\\n        }\\n        return ans-1;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int numberOfRounds(string st, string ft) {\\n        int s=0;\\n        s=(st[0]-\\'0\\')*1000+(st[1]-\\'0\\')*100+(st[3]-\\'0\\')*10+st[4]-\\'0\\';\\n        int f=0;\\n        f=(ft[0]-\\'0\\')*1000+(ft[1]-\\'0\\')*100+(ft[3]-\\'0\\')*10+ft[4]-\\'0\\';\\n        int ans=0;\\n        if(((f%100)%15)==0)ans++;\\n        while(s!=f)\\n        {\\n          \\n            if(((s%100)%15)==0)\\n                ans++;\\n            if((s%100)==59)\\n            {\\n                s=s/100;\\n                if(s==23)s=0;\\n                else{\\n                    s++;\\n                    s=s*100;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1881800,
                "title": "java-simple-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        String[] arr1 = loginTime.split(\":\");\\n        String[] arr2 = logoutTime.split(\":\");  \\n        \\n        int time1 = Integer.parseInt(arr1[0])*60 + Integer.parseInt(arr1[1]);\\n        int time2 = Integer.parseInt(arr2[0])*60 + Integer.parseInt(arr2[1]);\\n\\n        if(time1 > time2) time2 = time2 + 24*60;\\n        if(time1%15 != 0) time1 = time1 + 15-time1%15;\\n        \\n        return (time2 - time1)/15;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        String[] arr1 = loginTime.split(\":\");\\n        String[] arr2 = logoutTime.split(\":\");  \\n        \\n        int time1 = Integer.parseInt(arr1[0])*60 + Integer.parseInt(arr1[1]);\\n        int time2 = Integer.parseInt(arr2[0])*60 + Integer.parseInt(arr2[1]);\\n\\n        if(time1 > time2) time2 = time2 + 24*60;\\n        if(time1%15 != 0) time1 = time1 + 15-time1%15;\\n        \\n        return (time2 - time1)/15;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1284988,
                "title": "very-easy-method-c",
                "content": "class Solution {\\npublic:\\n   \\n   int numberOfRounds(string s, string f) {\\n        int h1,h2,m1,m2;\\n        h1=(s[0]-\\'0\\')*10+(s[1]-\\'0\\');\\n        m1=(s[3]-\\'0\\')*10+(s[4]-\\'0\\');\\n        h2=(f[0]-\\'0\\')*10+(f[1]-\\'0\\');\\n        m2=(f[3]-\\'0\\')*10+(f[4]-\\'0\\');\\n        int cnt=0,cnt1=0,hh=0;\\n        if(h2>=h1){\\n            hh=abs(h1-h2);\\n        }\\n        else{\\n            hh=h2+24-h1;\\n        }\\n        if(m1%15==0)\\n            cnt=m1/15;\\n        else\\n            cnt=(m1/15)+1;\\n        cnt1=m2/15;\\n        int ans=hh*4+(cnt1-cnt);\\n        if(ans<0)\\n            ans+=96;\\n        return ans;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n   \\n   int numberOfRounds(string s, string f) {\\n        int h1,h2,m1,m2;\\n        h1=(s[0]-\\'0\\')*10+(s[1]-\\'0\\');\\n        m1=(s[3]-\\'0\\')*10+(s[4]-\\'0\\');\\n        h2=(f[0]-\\'0\\')*10+(f[1]-\\'0\\');\\n        m2=(f[3]-\\'0\\')*10+(f[4]-\\'0\\');\\n        int cnt=0,cnt1=0,hh=0;\\n        if(h2>=h1){\\n            hh=abs(h1-h2);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1284469,
                "title": "c-with-comments-examples-o-1-100-faster",
                "content": "#### Handling just 2 cases takes care of every corner case. And by seeing some common parts in code and, you can make code shorter ,but I think its easy to understand this way\\n```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string s, string f) {\\n\\t\\t//Just Some preprocessing :-/\\n        int sh = (s[0]-\\'0\\')*10 + (s[1]-\\'0\\');    //start hour\\n        double sm = (s[3]-\\'0\\')*10 + (s[4]-\\'0\\'); //start minute\\n        int fh = (f[0]-\\'0\\')*10 + (f[1]-\\'0\\');    //final hour\\n        double fm = (f[3]-\\'0\\')*10 + (f[4]-\\'0\\'); //final minute\\n        \\n\\t\\t//changing the minutes bounds \\n        sm = ceil(sm/15) * 15;  // for 12:01 it will become 12:15\\n        fm = floor(fm/15) *15;  // for 14:07 it will become 14:00\\n        int ret = 0;\\n\\t\\t\\n\\t\\t//preprocessing ends\\n\\t\\t//condition of finish time higher than start time\\n        if(fh>sh || (fh == sh && fm>=sm)){\\n            if(fh == sh){ \\n                // for 12:01(scales up to 12:15) - 12:44(scaled downto 12:30)  return (30 -15)/15;\\n                return (fm -sm)/15;    \\n            }\\n            // for 12:05 {==> 12:15} - 14:22 {==> 14:15 } \\n            \\n            ret = ret + 4*(fh-(sh+1));           // calculate from (14 to 12+1)\\n            ret = ret + (60-sm)/15 + fm/15;      // add minutes from 12:15 - 13:00 && 14:00 - 14:15\\n        }\\n        else{\\n            // ex : 20:15 - 6:42 { becomes 6:30}\\n            // add hours from 20:00 - 24:00 (added extra round 20:00 - 20:15 , so have to substract it)\\n            //add hours from 24:00 - 6:00 \\n            ret = ret + 4*(24 - sh) + 4*fh;\\n            \\n            //substracting the extra round and adding extra round from 6:00 - 6:30\\n            ret = ret - (sm)/15 + fm/15;\\n            \\n        }\\n        return ret;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string s, string f) {\\n\\t\\t//Just Some preprocessing :-/\\n        int sh = (s[0]-\\'0\\')*10 + (s[1]-\\'0\\');    //start hour\\n        double sm = (s[3]-\\'0\\')*10 + (s[4]-\\'0\\'); //start minute\\n        int fh = (f[0]-\\'0\\')*10 + (f[1]-\\'0\\');    //final hour\\n        double fm = (f[3]-\\'0\\')*10 + (f[4]-\\'0\\'); //final minute\\n        \\n\\t\\t//changing the minutes bounds \\n        sm = ceil(sm/15) * 15;  // for 12:01 it will become 12:15\\n        fm = floor(fm/15) *15;  // for 14:07 it will become 14:00\\n        int ret = 0;\\n\\t\\t\\n\\t\\t//preprocessing ends\\n\\t\\t//condition of finish time higher than start time\\n        if(fh>sh || (fh == sh && fm>=sm)){\\n            if(fh == sh){ \\n                // for 12:01(scales up to 12:15) - 12:44(scaled downto 12:30)  return (30 -15)/15;\\n                return (fm -sm)/15;    \\n            }\\n            // for 12:05 {==> 12:15} - 14:22 {==> 14:15 } \\n            \\n            ret = ret + 4*(fh-(sh+1));           // calculate from (14 to 12+1)\\n            ret = ret + (60-sm)/15 + fm/15;      // add minutes from 12:15 - 13:00 && 14:00 - 14:15\\n        }\\n        else{\\n            // ex : 20:15 - 6:42 { becomes 6:30}\\n            // add hours from 20:00 - 24:00 (added extra round 20:00 - 20:15 , so have to substract it)\\n            //add hours from 24:00 - 6:00 \\n            ret = ret + 4*(24 - sh) + 4*fh;\\n            \\n            //substracting the extra round and adding extra round from 6:00 - 6:30\\n            ret = ret - (sm)/15 + fm/15;\\n            \\n        }\\n        return ret;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284262,
                "title": "python-java-convert-to-minutes",
                "content": "**Python**\\n```python\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        def convert(s):\\n            return int(s[:2])*60+int(s[3:])\\n        \\n        st = convert(startTime)\\n        ft = convert(finishTime)\\n        \\n        if ft < st:\\n            ft += 1440\\n        \\n        if st % 15 != 0:\\n            st += 15-(st%15)\\n \\n        return int((ft-st)/15)\\n\\n```\\n---\\n\\n**Java**\\n```java\\nclass Solution {\\n    int convert(String s){\\n        String[] ss = s.split(\":\");\\n        return (Integer.parseInt(ss[0])*60) + (Integer.parseInt(ss[1]));\\n    }\\n    \\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int st = convert(startTime);\\n        int ft =convert(finishTime);\\n        \\n        if (ft < st){\\n            ft += 1440;\\n        }\\n        if (st % 15 != 0){\\n            st += (15-st%15);\\n        }\\n        return (ft-st)/15;\\n        \\n    }\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        def convert(s):\\n            return int(s[:2])*60+int(s[3:])\\n        \\n        st = convert(startTime)\\n        ft = convert(finishTime)\\n        \\n        if ft < st:\\n            ft += 1440\\n        \\n        if st % 15 != 0:\\n            st += 15-(st%15)\\n \\n        return int((ft-st)/15)\\n\\n```\n```java\\nclass Solution {\\n    int convert(String s){\\n        String[] ss = s.split(\":\");\\n        return (Integer.parseInt(ss[0])*60) + (Integer.parseInt(ss[1]));\\n    }\\n    \\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int st = convert(startTime);\\n        int ft =convert(finishTime);\\n        \\n        if (ft < st){\\n            ft += 1440;\\n        }\\n        if (st % 15 != 0){\\n            st += (15-st%15);\\n        }\\n        return (ft-st)/15;\\n        \\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2772350,
                "title": "c-easy-short",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        int INtime = ((loginTime[0]-\\'0\\')*10+loginTime[1]-\\'0\\')*60 + (loginTime[3]-\\'0\\')*10+loginTime[4]-\\'0\\';\\n        int OUTtime = ((logoutTime[0]-\\'0\\')*10+logoutTime[1]-\\'0\\')*60 + (logoutTime[3]-\\'0\\')*10+logoutTime[4]-\\'0\\';\\n        if(OUTtime < INtime)\\n        {\\n            OUTtime += 1440;\\n        }\\n        if(INtime%15 != 0)\\n        {\\n            int val = INtime/15;\\n            INtime = (val+1)*15;  \\n        }\\n        return abs(OUTtime-INtime)/15;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        int INtime = ((loginTime[0]-\\'0\\')*10+loginTime[1]-\\'0\\')*60 + (loginTime[3]-\\'0\\')*10+loginTime[4]-\\'0\\';\\n        int OUTtime = ((logoutTime[0]-\\'0\\')*10+logoutTime[1]-\\'0\\')*60 + (logoutTime[3]-\\'0\\')*10+logoutTime[4]-\\'0\\';\\n        if(OUTtime < INtime)\\n        {\\n            OUTtime += 1440;\\n        }\\n        if(INtime%15 != 0)\\n        {\\n            int val = INtime/15;\\n            INtime = (val+1)*15;  \\n        }\\n        return abs(OUTtime-INtime)/15;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2519765,
                "title": "c-simple-c-code-o-1-time",
                "content": "\\n# **If you like the implementation then Please help me by increasing my reputation. By clicking the up arrow on the left of my image.**\\n```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        int INtime = ((loginTime[0]-\\'0\\')*10+loginTime[1]-\\'0\\')*60 + (loginTime[3]-\\'0\\')*10+loginTime[4]-\\'0\\';\\n        int OUTtime = ((logoutTime[0]-\\'0\\')*10+logoutTime[1]-\\'0\\')*60 + (logoutTime[3]-\\'0\\')*10+logoutTime[4]-\\'0\\';\\n        if(OUTtime < INtime)\\n        {\\n            OUTtime += 1440;\\n        }\\n        if(INtime%15 != 0)\\n        {\\n            int val = INtime/15;\\n            INtime = (val+1)*15;  \\n        }\\n        return abs(OUTtime-INtime)/15;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        int INtime = ((loginTime[0]-\\'0\\')*10+loginTime[1]-\\'0\\')*60 + (loginTime[3]-\\'0\\')*10+loginTime[4]-\\'0\\';\\n        int OUTtime = ((logoutTime[0]-\\'0\\')*10+logoutTime[1]-\\'0\\')*60 + (logoutTime[3]-\\'0\\')*10+logoutTime[4]-\\'0\\';\\n        if(OUTtime < INtime)\\n        {\\n            OUTtime += 1440;\\n        }\\n        if(INtime%15 != 0)\\n        {\\n            int val = INtime/15;\\n            INtime = (val+1)*15;  \\n        }\\n        return abs(OUTtime-INtime)/15;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1290168,
                "title": "python-7-lines-simple",
                "content": "```python\\ndef numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n    s = int(startTime[:2]) * 60 + int(startTime[-2:])\\n    t = int(finishTime[:2]) * 60 + int(finishTime[-2:])\\n    if s > t:\\n        t += 24 * 60\\n    q, r = divmod(s, 15)\\n    s, t = q + int(r > 0), t // 15\\n    return max(0, t - s)\\n```\\nVote up if you find this helpful, thanks!",
                "solutionTags": [
                    "Python"
                ],
                "code": "```python\\ndef numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n    s = int(startTime[:2]) * 60 + int(startTime[-2:])\\n    t = int(finishTime[:2]) * 60 + int(finishTime[-2:])\\n    if s > t:\\n        t += 24 * 60\\n    q, r = divmod(s, 15)\\n    s, t = q + int(r > 0), t // 15\\n    return max(0, t - s)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1284460,
                "title": "o-1-time-complexity-easy-to-understand-2-solutions",
                "content": "O(1) time complexity and O(1) space complexity\\ncode is self explanatory. Kindly go through it. Incase of any doubts, feel free to comment.\\n\\n```\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n\\n        start=startTime.split(\":\")\\n        startHour,startMin=int(start[0]),int(start[1])\\n        \\n        end=finishTime.split(\":\")\\n        endHour,endMin=int(end[0]),int(end[1])\\n        # if start time is greater than endtime, calculate round till 00:00 and then till finish time\\n        if (startHour>endHour ) or (startHour==endHour and startMin >endMin):\\n            return (24-startHour-1)*4+(60-startMin)//15 +self.numberOfRounds(\"00:00\",finishTime)\\n        else:\\n            if startMin not in [0,15,30,45]:\\n                if startMin<15:startMin=15\\n                elif startMin<30:startMin=30\\n                elif startMin<45:startMin=45\\n                elif startHour!=23:\\n                    startMin=0\\n                    startHour+=1\\n                else:\\n                    startMin=0\\n                    startHour=0\\n\\n            if endHour==startHour:return (endMin-startMin)//15\\n            else:\\n                return (endHour-startHour)*4+(endMin-startMin)//15\\n        \\n```\\nSolution 2\\n```\\nstart=startTime.split(\":\")\\n        startHour,startMin=int(start[0]),int(start[1])\\n        startTotalMins=startHour*60+startMin\\n        \\n        end=finishTime.split(\":\")\\n        endHour,endMin=int(end[0]),int(end[1])\\n        endTotalMins=endHour*60+endMin\\n\\t\\t# adding 14 in startMins to neglect rounds which started just after 0,15,30,45 mins\\n\\t\\t# for example \"00:01\" \"00:44\" => 44//15-(01+14)//15+0==1\\n\\t\\t# if we don\\'t add 14 then round starting from 1 will also be calculated \\n        return endTotalMins//15-(startTotalMins+14)//15 + (startTotalMins>endTotalMins)*96\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n\\n        start=startTime.split(\":\")\\n        startHour,startMin=int(start[0]),int(start[1])\\n        \\n        end=finishTime.split(\":\")\\n        endHour,endMin=int(end[0]),int(end[1])\\n        # if start time is greater than endtime, calculate round till 00:00 and then till finish time\\n        if (startHour>endHour ) or (startHour==endHour and startMin >endMin):\\n            return (24-startHour-1)*4+(60-startMin)//15 +self.numberOfRounds(\"00:00\",finishTime)\\n        else:\\n            if startMin not in [0,15,30,45]:\\n                if startMin<15:startMin=15\\n                elif startMin<30:startMin=30\\n                elif startMin<45:startMin=45\\n                elif startHour!=23:\\n                    startMin=0\\n                    startHour+=1\\n                else:\\n                    startMin=0\\n                    startHour=0\\n\\n            if endHour==startHour:return (endMin-startMin)//15\\n            else:\\n                return (endHour-startHour)*4+(endMin-startMin)//15\\n        \\n```\n```\\nstart=startTime.split(\":\")\\n        startHour,startMin=int(start[0]),int(start[1])\\n        startTotalMins=startHour*60+startMin\\n        \\n        end=finishTime.split(\":\")\\n        endHour,endMin=int(end[0]),int(end[1])\\n        endTotalMins=endHour*60+endMin\\n\\t\\t# adding 14 in startMins to neglect rounds which started just after 0,15,30,45 mins\\n\\t\\t# for example \"00:01\" \"00:44\" => 44//15-(01+14)//15+0==1\\n\\t\\t# if we don\\'t add 14 then round starting from 1 will also be calculated \\n        return endTotalMins//15-(startTotalMins+14)//15 + (startTotalMins>endTotalMins)*96\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284283,
                "title": "two-tricks",
                "content": "1. Check if the end time is tomorrow.\\n2. Round the start time up to 15-minute mark, and round the end time down.\\n\\n**C++**\\n```cpp\\nint numberOfRounds(string a, string b) {\\n    auto nn = [](const string &s, int i){ \\n        return (s[i] - \\'0\\') * 10 + s[i + 1] - \\'0\\'; };\\n    int m1 = nn(a, 0) * 60 + nn(a, 3), m2 = nn(b, 0) * 60 + nn(b, 3);\\n    if (m2 < m1)\\n        m2 += 24 * 60;\\n    return max(0, (m2 / 15) - (m1 + 14) / 15);\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nint numberOfRounds(string a, string b) {\\n    auto nn = [](const string &s, int i){ \\n        return (s[i] - \\'0\\') * 10 + s[i + 1] - \\'0\\'; };\\n    int m1 = nn(a, 0) * 60 + nn(a, 3), m2 = nn(b, 0) * 60 + nn(b, 3);\\n    if (m2 < m1)\\n        m2 += 24 * 60;\\n    return max(0, (m2 / 15) - (m1 + 14) / 15);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1284206,
                "title": "java-o-1",
                "content": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int[] start = getTime(startTime), end = getTime(finishTime);\\n        if(end[0] < start[0] || end[0] == start[0] && end[1] < start[1]) end[0] += 24; // Midnight case\\n        return (end[0] * 4 + end[1]/15) - (start[0] * 4 + ((int)Math.ceil((double)start[1]/15)));\\n    }\\n    private int[] getTime(String t) {\\n        return new int[] {(t.charAt(0) - \\'0\\') * 10 + (t.charAt(1) - \\'0\\'), (t.charAt(3) - \\'0\\') * 10 + (t.charAt(4) - \\'0\\')};\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int[] start = getTime(startTime), end = getTime(finishTime);\\n        if(end[0] < start[0] || end[0] == start[0] && end[1] < start[1]) end[0] += 24; // Midnight case\\n        return (end[0] * 4 + end[1]/15) - (start[0] * 4 + ((int)Math.ceil((double)start[1]/15)));\\n    }\\n    private int[] getTime(String t) {\\n        return new int[] {(t.charAt(0) - \\'0\\') * 10 + (t.charAt(1) - \\'0\\'), (t.charAt(3) - \\'0\\') * 10 + (t.charAt(4) - \\'0\\')};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3904355,
                "title": "100-fast-simple-short-code-with-easy-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThink of playing chess rounds like taking steps. Every 15 minutes, a new round starts. The code takes your start and end times, and it figures out how many steps you took in terms of these 15-minute rounds:\\n-> It checks when you started and stopped.\\n-> If you played through midnight, it adds extra steps for the time after midnight.\\n-> If you didn\\'t start right at the beginning of a round, it moves you to the next round\\'s starting point.\\n-> Then, it simply counts the steps you took between your start and end.\\n\\n---\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- **Convert Time to Minutes:**\\nThe minConvert function takes a time string (like \"hh:mm\") and converts it to the equivalent number of minutes in a day.\\n\\n- **Calculate Rounds Played:**\\nIn the numberOfRounds function, we convert both login and logout times to minutes using minConvert.\\n\\n- **Adjust for Next Day:**\\nIf the login time is later than the logout time, it means we\\'ve played across midnight. So, we add 24 hours\\' worth of minutes (1440) to the logout time.\\n\\n- **Round to Nearest 15 Minutes:**\\nIf the login time is not at a 15-minute mark, we round it up to the next 15-minute interval.\\n\\n- **Calculate Rounds:**\\nWe find the absolute difference between logout and login times and divide it by 15. This gives us the number of 15-minute rounds played.\\n\\n- **Return the Result:**\\nThe calculated number of rounds played is the answer we return\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minConvert(string &time){\\n        return stoi(time.substr(0,2))*60 + stoi(time.substr(3,2));\\n    }\\n\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        int start = minConvert(loginTime), end = minConvert(logoutTime);\\n\\n        if (start > end) end += 1440;\\n        if (start % 15) start=(start/15 + 1)*15;\\n        \\n        return abs(end - start)/15; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minConvert(string &time){\\n        return stoi(time.substr(0,2))*60 + stoi(time.substr(3,2));\\n    }\\n\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        int start = minConvert(loginTime), end = minConvert(logoutTime);\\n\\n        if (start > end) end += 1440;\\n        if (start % 15) start=(start/15 + 1)*15;\\n        \\n        return abs(end - start)/15; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3788660,
                "title": "java-straightforward-bruteforce-33-lines",
                "content": "```java\\npublic class Solution {\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        int start = convert(loginTime);\\n        int end = convert(logoutTime);\\n        \\n        if (start > end) {\\n            return numberOfRounds(loginTime, \"24:00\") + numberOfRounds(\"00:00\", logoutTime);\\n        }\\n        \\n        int round_start = 0;\\n        int round_end = 24 * 60;\\n        \\n        int count = 0;\\n        \\n        while (round_start <= round_end) {\\n            if (start <= round_start && round_start <= end && \\n                start <= round_start + 15 && round_start + 15 <= end) {\\n                count++;\\n            }\\n            \\n            round_start += 15;\\n        }\\n        \\n        return count;\\n    }\\n    \\n    private int convert(String time) {\\n        String[] parts = time.split(\":\");\\n        int hour = Integer.parseInt(parts[0]);\\n        int mins = Integer.parseInt(parts[1]);\\n        return hour * 60 + mins;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\npublic class Solution {\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        int start = convert(loginTime);\\n        int end = convert(logoutTime);\\n        \\n        if (start > end) {\\n            return numberOfRounds(loginTime, \"24:00\") + numberOfRounds(\"00:00\", logoutTime);\\n        }\\n        \\n        int round_start = 0;\\n        int round_end = 24 * 60;\\n        \\n        int count = 0;\\n        \\n        while (round_start <= round_end) {\\n            if (start <= round_start && round_start <= end && \\n                start <= round_start + 15 && round_start + 15 <= end) {\\n                count++;\\n            }\\n            \\n            round_start += 15;\\n        }\\n        \\n        return count;\\n    }\\n    \\n    private int convert(String time) {\\n        String[] parts = time.split(\":\");\\n        int hour = Integer.parseInt(parts[0]);\\n        int mins = Integer.parseInt(parts[1]);\\n        return hour * 60 + mins;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2463141,
                "title": "python3",
                "content": "```\\nclass Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        a=int(loginTime[0]+loginTime[1])*60+int(loginTime[3]+loginTime[4])\\n        b=int(logoutTime[0]+logoutTime[1])*60+int(logoutTime[3]+logoutTime[4])\\n        if (a>b):b+=24*60\\n        q, r = divmod(a, 15)\\n        a, b = q + int(r > 0), b // 15\\n        return max(0, b - a)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        a=int(loginTime[0]+loginTime[1])*60+int(loginTime[3]+loginTime[4])\\n        b=int(logoutTime[0]+logoutTime[1])*60+int(logoutTime[3]+logoutTime[4])\\n        if (a>b):b+=24*60\\n        q, r = divmod(a, 15)\\n        a, b = q + int(r > 0), b // 15\\n        return max(0, b - a)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2298680,
                "title": "c-easy-solution-comments",
                "content": "```\\n int n1=l1.length();\\n        int n2=l2.length();\\n        string s1=l1.substr(0,2);\\n        string s2=l2.substr(0,2);\\n        string t1=l1.substr(3,n1);\\n        string t2=l2.substr(3,n2);\\n        int res1=stoi(s1);\\n        int res2=stoi(s2);\\n        int tt1=stoi(t1);\\n        int tt2=stoi(t2);\\n        int ans=0;\\n      if(res1>res2){\\n          res2+=24;\\n       }\\n        if(res1==res2&&tt1>tt2){\\n            res2+=24;\\n        }\\n        //this is case is for when starting time is greater then ending time\\n        res1++;\\n        int temp1=res2-res1;\\n        temp1=temp1*60;\\n        temp1=temp1/15;\\n        ans+=temp1;\\n        //calculating  the no of games possible in between hr \\n        int temp2=60-tt1;\\n        temp2=temp2/15;\\n        ans+=temp2;\\n        //temp2 is calculated by subracting from 60 because res1 is is increased by 1;\\n        //calculting the no of possible games in min\\n        int temp3=tt2/15;\\n        ans+=temp3;\\n        \\n       if(ans==-1){\\n           return 0;\\n       }\\n        \\n       \\n            \\n        return ans;",
                "solutionTags": [],
                "code": "```\\n int n1=l1.length();\\n        int n2=l2.length();\\n        string s1=l1.substr(0,2);\\n        string s2=l2.substr(0,2);\\n        string t1=l1.substr(3,n1);\\n        string t2=l2.substr(3,n2);\\n        int res1=stoi(s1);\\n        int res2=stoi(s2);\\n        int tt1=stoi(t1);\\n        int tt2=stoi(t2);\\n        int ans=0;\\n      if(res1>res2){\\n          res2+=24;\\n       }\\n        if(res1==res2&&tt1>tt2){\\n            res2+=24;\\n        }\\n        //this is case is for when starting time is greater then ending time\\n        res1++;\\n        int temp1=res2-res1;\\n        temp1=temp1*60;\\n        temp1=temp1/15;\\n        ans+=temp1;\\n        //calculating  the no of games possible in between hr \\n        int temp2=60-tt1;\\n        temp2=temp2/15;\\n        ans+=temp2;\\n        //temp2 is calculated by subracting from 60 because res1 is is increased by 1;\\n        //calculting the no of possible games in min\\n        int temp3=tt2/15;\\n        ans+=temp3;\\n        \\n       if(ans==-1){\\n           return 0;\\n       }\\n        \\n       \\n            \\n        return ans;",
                "codeTag": "Unknown"
            },
            {
                "id": 2196398,
                "title": "python-straightforward-parse-string",
                "content": "```\\nclass Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        login = self.to_min(loginTime)\\n        logout = self.to_min(logoutTime)\\n        \\n        if logout < login:  # new day after midnight\\n            logout = logout + 24 * 60\\n            \\n        if logout - login < 15:\\n            return 0\\n        \\n        login = self.round_login(login)\\n        logout = self.round_logout(logout)\\n        \\n        return (logout - login) // 15\\n    \\n    \\n    def to_min(self, current_time: str) -> int:\\n        h, m = map(int, current_time.split(\":\"))\\n        return h * 60 + m\\n    \\n    def round_login(self, m: int):\\n        return m if m % 15 == 0 else m + (15 - m % 15)\\n    \\n    def round_logout(self, m: int):\\n        return m if m % 15 == 0 else m - (m % 15)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        login = self.to_min(loginTime)\\n        logout = self.to_min(logoutTime)\\n        \\n        if logout < login:  # new day after midnight\\n            logout = logout + 24 * 60\\n            \\n        if logout - login < 15:\\n            return 0\\n        \\n        login = self.round_login(login)\\n        logout = self.round_logout(logout)\\n        \\n        return (logout - login) // 15\\n    \\n    \\n    def to_min(self, current_time: str) -> int:\\n        h, m = map(int, current_time.split(\":\"))\\n        return h * 60 + m\\n    \\n    def round_login(self, m: int):\\n        return m if m % 15 == 0 else m + (15 - m % 15)\\n    \\n    def round_logout(self, m: int):\\n        return m if m % 15 == 0 else m - (m % 15)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1707019,
                "title": "c-the-number-of-full-rounds-you-have-played",
                "content": "```\\nclass Solution {\\npublic:\\n    int solve(string s)\\n    {\\n        int hour=stoi(s.substr(0,2));\\n        int min=stoi(s.substr(3,5));\\n        return hour*60+min;\\n    }\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        int st=solve(loginTime);\\n        int et=solve(logoutTime);\\n        int ans=0;\\n        if(st>et) et=et+1440;\\n        if(st%15!=0) st=st+(15-st%15);\\n        ans=(et-st)/15;\\n        return ans;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int solve(string s)\\n    {\\n        int hour=stoi(s.substr(0,2));\\n        int min=stoi(s.substr(3,5));\\n        return hour*60+min;\\n    }\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        int st=solve(loginTime);\\n        int et=solve(logoutTime);\\n        int ans=0;\\n        if(st>et) et=et+1440;\\n        if(st%15!=0) st=st+(15-st%15);\\n        ans=(et-st)/15;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1656060,
                "title": "c-100-fast-simulation",
                "content": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n         string liHr = loginTime.substr(0,2);\\n         string lgHr = logoutTime.substr(0,2);\\n        \\n         string liMt = loginTime.substr(3,4);\\n         string lgMt = logoutTime.substr(3,4);\\n         \\n         int total_logInTime = stoi(liHr) * 60 + stoi(liMt);\\n         int total_logOutTime = 0;\\n        \\n          if(liHr > lgHr || (liHr==lgHr && liMt>lgMt)){\\n                total_logOutTime = 24;\\n          }\\n        \\n          total_logOutTime = (total_logOutTime + stoi(lgHr)) * 60 + stoi(lgMt);\\n        \\n          if(total_logInTime % 15 != 0){\\n              total_logInTime += 15 - (total_logInTime % 15);\\n          }\\n        \\n          int ans = 0;\\n        \\n          for(int i=total_logInTime ; i<=total_logOutTime; i+=15){\\n              if(i+15 <= total_logOutTime)\\n                ans++;   \\n          }\\n        \\n          return ans;\\n          \\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Simulation"
                ],
                "code": "class Solution {\\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n         string liHr = loginTime.substr(0,2);\\n         string lgHr = logoutTime.substr(0,2);\\n        \\n         string liMt = loginTime.substr(3,4);\\n         string lgMt = logoutTime.substr(3,4);\\n         \\n         int total_logInTime = stoi(liHr) * 60 + stoi(liMt);\\n         int total_logOutTime = 0;\\n        \\n          if(liHr > lgHr || (liHr==lgHr && liMt>lgMt)){\\n                total_logOutTime = 24;\\n          }",
                "codeTag": "Java"
            },
            {
                "id": 1653216,
                "title": "simple-c-straight-forward-math-solution-0-ms-faster-than-100-short-code",
                "content": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string login, string logout) {\\n        int h1,m1,h2,m2;\\n        string s=\"\";\\n       s=login.substr(0,2);\\n        h1=stoi(s);\\n        s=login.substr(3,2);\\n        m1=stoi(s);\\n         s=logout.substr(0,2);\\n        h2=stoi(s);\\n         s=logout.substr(3,2);\\n        m2=stoi(s);\\n    int x1=m1,x2=m2;///storing original minutes in var\\n        if(m1%15!=0)\\n        {\\n            int p=m1/15;\\n            p++;\\n            m1=p*15;\\n        }\\n         if(m2%15!=0)\\n        {\\n            int p=m2/15;\\n            m2=p*15;\\n        }\\n        if(h1==h2 && x1<x2)  // special case if hour are equal \\n        {\\n            if(m2-m1<0)\\n                return 0;\\n            else\\n                return (m2-m1)/15;\\n        }\\n        int sum1=h1*60+m1;\\n        int sum2=h2*60+m2;\\n       // cout<<sum1<<\" \"<<sum2;\\n        if(sum1<=sum2)\\n        {\\n            return (sum2-sum1)/15;\\n        }\\n        else\\n        {\\n            sum1=1440-sum1;\\n            return(sum1+sum2)/15;\\n        }\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string login, string logout) {\\n        int h1,m1,h2,m2;\\n        string s=\"\";\\n       s=login.substr(0,2);\\n        h1=stoi(s);\\n        s=login.substr(3,2);\\n        m1=stoi(s);\\n         s=logout.substr(0,2);\\n        h2=stoi(s);\\n         s=logout.substr(3,2);\\n        m2=stoi(s);\\n    int x1=m1,x2=m2;///storing original minutes in var\\n        if(m1%15!=0)\\n        {\\n            int p=m1/15;\\n            p++;\\n            m1=p*15;\\n        }\\n         if(m2%15!=0)\\n        {\\n            int p=m2/15;\\n            m2=p*15;\\n        }\\n        if(h1==h2 && x1<x2)  // special case if hour are equal \\n        {\\n            if(m2-m1<0)\\n                return 0;\\n            else\\n                return (m2-m1)/15;\\n        }\\n        int sum1=h1*60+m1;\\n        int sum2=h2*60+m2;\\n       // cout<<sum1<<\" \"<<sum2;\\n        if(sum1<=sum2)\\n        {\\n            return (sum2-sum1)/15;\\n        }\\n        else\\n        {\\n            sum1=1440-sum1;\\n            return(sum1+sum2)/15;\\n        }\\n        \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1550908,
                "title": "python-3-solution",
                "content": "```\\ndef numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n\\tstartTime = int(startTime[:2])*60+int(startTime[3:])\\n\\tfinishTime = int(finishTime[:2])*60+int(finishTime[3:])\\n\\n\\tstart, finish = math.ceil(startTime/15)*15, math.floor(finishTime/15)*15\\n\\n\\tif finishTime>=startTime:\\n\\t\\tplayed = (finish-start)//15\\n\\t\\treturn max(0, played)\\n\\treturn (1440-start+finish)//15\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\ndef numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n\\tstartTime = int(startTime[:2])*60+int(startTime[3:])\\n\\tfinishTime = int(finishTime[:2])*60+int(finishTime[3:])\\n\\n\\tstart, finish = math.ceil(startTime/15)*15, math.floor(finishTime/15)*15\\n\\n\\tif finishTime>=startTime:\\n\\t\\tplayed = (finish-start)//15\\n\\t\\treturn max(0, played)\\n\\treturn (1440-start+finish)//15\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1413931,
                "title": "0ms-runtime-c-solution",
                "content": "```\\n\\nclass Solution {\\npublic:\\n    int numberOfRounds(string s, string f) {\\n        string h = \"\", m = \"\", h1 = \"\", m1 = \"\";\\n        int j, count = 0;\\n        for(int i = 0; i<s.length(); i++){\\n            if(s[i]==\\':\\'){j = i;break;}\\n            h+=s[i];\\n        }\\n        for(int i = j+1; i<s.length(); i++){\\n            m+=s[i];\\n        }\\n        for(int i = 0; i<f.length(); i++){\\n            if(f[i]==\\':\\'){j = i;break;}\\n            h1+=f[i];\\n        }\\n        for(int i = j+1; i<f.length(); i++){\\n            m1+=f[i];\\n        }\\n        string d = \"00\";\\n        if(!m.compare(d)&&!m1.compare(d)){\\n            int l = stoi(h);\\n            int e = stoi(h1);\\n            if(e<l){\\n                e+=24;\\n                return(4*(e-l));\\n            }else{return(4*(e-l));}\\n        }if(m.compare(d)!=0){\\n            int l = 60 - stoi(m);\\n            int e = l/15;\\n            count+=e;\\n            if(m1.compare(d)!=0){\\n                int z = stoi(m1)-0;\\n                count+=(z/15);\\n                int n = stoi(h);\\n                int o = stoi(h1);\\n                if(o<n){\\n                    o+=24;\\n                    count+=4*(o-1 - (n));\\n                }else if(o==n){\\n                    if(stoi(m1)<stoi(m)){\\n                        o+=24;\\n                        count+=4*(o-1 - (n));\\n                    }else{\\n                      if(stoi(m1)%15==0||stoi(m)%15==0){\\n                          count = (stoi(m1) - stoi(m))/15;\\n                      }\\n                        else{\\n                            if(stoi(m1) - stoi(m)<15){count=0;}\\n                            else{\\n                               int y = stoi(m);\\n                                while(y%15!=0){y++;}\\n                                count = (stoi(m1) - y)/15;\\n                            }\\n                            \\n                        }\\n                      \\n                    }\\n                    \\n                }\\n                else{\\n                    count+=4*(o-1 - (n));\\n                }\\n            }else{\\n                int n = stoi(h);\\n                int o = stoi(h1);\\n                 if(o<n){\\n                    o+=24;\\n                    count+=4*(o-1 - (n));\\n                }else if(o==n){\\n                    if(stoi(m1)<stoi(m)){\\n                        o+=24;\\n                        count+=4*(o-1 - (n));\\n                    }else{\\n                      count+=4*(o-1 - (n));  \\n                    }\\n                    \\n                }\\n                else{\\n                    count+=4*(o-1-(n));\\n                }\\n            }\\n        }\\n      else if(m1.compare(d)!=0){\\n            int l = stoi(m1)-0;\\n            int e = l/15;\\n            count+=e;\\n            if(m.compare(d)!=0){\\n                int z = stoi(m)-0;\\n                count+=(z/15);\\n                int n = stoi(h);\\n                int o = stoi(h1);\\n                 if(o<n){\\n                    o+=24;\\n                    count+=4*(o-1 - (n));\\n                }else if(o==n){\\n                    if(stoi(m1)<stoi(m)){\\n                        o+=24;\\n                        count+=4*(o-1 - (n));\\n                    }else{\\n                      count+=4*(o-1 - (n));  \\n                    }\\n                    \\n                }\\n                else{\\n                    count+=4*(o-1 - n);\\n                }\\n            }else{\\n                int n = stoi(h);\\n                int o = stoi(h1);\\n                 if(o<n){\\n                    o+=24;\\n                    count+=4*(o - (n));\\n                }else if(o==n){\\n                    if(stoi(m1)<stoi(m)){\\n                        o+=24;\\n                        count+=4*(o - (n));\\n                    }else{\\n                        \\n                      count+=4*(o - (n));  \\n                    }\\n                    \\n                }else{\\n                     \\n                     count+=4*(o - (n));\\n                 }\\n            }\\n        }\\n        return count;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int numberOfRounds(string s, string f) {\\n        string h = \"\", m = \"\", h1 = \"\", m1 = \"\";\\n        int j, count = 0;\\n        for(int i = 0; i<s.length(); i++){\\n            if(s[i]==\\':\\'){j = i;break;}",
                "codeTag": "Java"
            },
            {
                "id": 1398306,
                "title": "c-straightforward",
                "content": "For a given time point `h:m`, we can calculate the number of full round between `00:00` to `h:m` easily, which is `N(h, m) = h * 4 + m / 15`.\\nNow let `startTime` be `h0:m0` and finishTime be `h1:m1`, we calculate their difference `N(h1,m1) - N(h0,m0)`. Furthermore, if `m0 % 15 != 0`, we should remove 1 round, as the player does not fully play the first round.\\nThere are two edge cases:\\n1. when `h1:m1 < h0:m0`, the player is playing overnight, we can just replace `h1` with `h1 + 24`.\\n2. when `N(h1,m1) - N(h0,m0) == 0`, in this case we should not remove the first round whne `m0 % 15 != 0` as `-1` will not be a valid answer. In this case we just return `0`.\\n\\n```\\nclass Solution {\\npublic:\\n    int fullRoundBefore(int h, int m) {\\n        return h * 4 + m / 15;    \\n    }\\n    \\n    int numberOfRounds(string startTime, string finishTime) {\\n\\t\\t// Time O(1), Space O(1)\\n        int h0 = stoi(startTime.substr(0,2));\\n        int m0 = stoi(startTime.substr(3,2));\\n        int h1 = stoi(finishTime.substr(0,2));\\n        int m1 = stoi(finishTime.substr(3,2));\\n        if (h1 < h0 or (h1 == h0 and m1 < m0)) {\\n            h1 += 24;\\n        }\\n        return max(0, fullRoundBefore(h1, m1) - fullRoundBefore(h0, m0) - (m0 % 15 != 0));\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int fullRoundBefore(int h, int m) {\\n        return h * 4 + m / 15;    \\n    }\\n    \\n    int numberOfRounds(string startTime, string finishTime) {\\n\\t\\t// Time O(1), Space O(1)\\n        int h0 = stoi(startTime.substr(0,2));\\n        int m0 = stoi(startTime.substr(3,2));\\n        int h1 = stoi(finishTime.substr(0,2));\\n        int m1 = stoi(finishTime.substr(3,2));\\n        if (h1 < h0 or (h1 == h0 and m1 < m0)) {\\n            h1 += 24;\\n        }\\n        return max(0, fullRoundBefore(h1, m1) - fullRoundBefore(h0, m0) - (m0 % 15 != 0));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1356633,
                "title": "c-calculate-round-for-start-and-finish-time-respectively",
                "content": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string startTime, string finishTime) {\\n        int startHour, startMin, stopHour, stopMin;\\n        \\n        startHour = stoi(startTime.substr(0, 2));\\n        startMin = stoi(startTime.substr(3, 2));\\n        stopHour = stoi(finishTime.substr(0, 2));\\n        stopMin = stoi(finishTime.substr(3, 2));\\n        \\n        int start = startHour * 60 + startMin;\\n        int stop = stopHour * 60 + stopMin;\\n        \\n        if (start > stop) {\\n            stop += 24 * 60;\\n        }\\n        \\n        start = (start / 15) + (start % 15 > 0);\\n        stop /= 15;\\n        \\n        return max(stop - start, 0);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string startTime, string finishTime) {\\n        int startHour, startMin, stopHour, stopMin;\\n        \\n        startHour = stoi(startTime.substr(0, 2));\\n        startMin = stoi(startTime.substr(3, 2));\\n        stopHour = stoi(finishTime.substr(0, 2));\\n        stopMin = stoi(finishTime.substr(3, 2));\\n        \\n        int start = startHour * 60 + startMin;\\n        int stop = stopHour * 60 + stopMin;\\n        \\n        if (start > stop) {\\n            stop += 24 * 60;\\n        }\\n        \\n        start = (start / 15) + (start % 15 > 0);\\n        stop /= 15;\\n        \\n        return max(stop - start, 0);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1356191,
                "title": "simple-java-code",
                "content": "```java\\n// AC: Runtime: 1 ms, faster than 63.13% of Java online submissions for The Number of Full Rounds You Have Played.\\n// Memory Usage: 37.2 MB, less than 74.19% of Java online submissions for The Number of Full Rounds You Have Played.\\n// .\\n// T:O(len(startTime) + len(finishTime)), S:O(1)\\n//\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        String[] arr1 = startTime.split(\":\"), arr2 = finishTime.split(\":\");\\n        int hour1 = Integer.parseInt(arr1[0]), minute1 = Integer.parseInt(arr1[1]), hour2 = Integer.parseInt(arr2[0]), minute2 = Integer.parseInt(arr2[1]);\\n        if (hour1 > hour2 || (hour1 == hour2 && minute1 > minute2)) {\\n            hour2 += 24;\\n        }\\n        int ret = 0;\\n        // gap at least one hour\\n        if (hour2 - hour1 >= 1) {\\n            ret += (hour2 - hour1 - 1) * 4;\\n            ret += (60 - minute1) / 15 + minute2 / 15;\\n        }\\n        // in same hour, compare minute.\\n        // notice if minute2 % 15 != 0 and ret > 0, will cause one quarter invalid.\\n        else {\\n            ret += (60 - minute1) / 15 - (60 - minute2) / 15;\\n            if (ret > 0 && minute2 % 15 != 0) {\\n                ret -= 1;\\n            }\\n        }\\n\\n        return ret;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\n// AC: Runtime: 1 ms, faster than 63.13% of Java online submissions for The Number of Full Rounds You Have Played.\\n// Memory Usage: 37.2 MB, less than 74.19% of Java online submissions for The Number of Full Rounds You Have Played.\\n// .\\n// T:O(len(startTime) + len(finishTime)), S:O(1)\\n//\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        String[] arr1 = startTime.split(\":\"), arr2 = finishTime.split(\":\");\\n        int hour1 = Integer.parseInt(arr1[0]), minute1 = Integer.parseInt(arr1[1]), hour2 = Integer.parseInt(arr2[0]), minute2 = Integer.parseInt(arr2[1]);\\n        if (hour1 > hour2 || (hour1 == hour2 && minute1 > minute2)) {\\n            hour2 += 24;\\n        }\\n        int ret = 0;\\n        // gap at least one hour\\n        if (hour2 - hour1 >= 1) {\\n            ret += (hour2 - hour1 - 1) * 4;\\n            ret += (60 - minute1) / 15 + minute2 / 15;\\n        }\\n        // in same hour, compare minute.\\n        // notice if minute2 % 15 != 0 and ret > 0, will cause one quarter invalid.\\n        else {\\n            ret += (60 - minute1) / 15 - (60 - minute2) / 15;\\n            if (ret > 0 && minute2 % 15 != 0) {\\n                ret -= 1;\\n            }\\n        }\\n\\n        return ret;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1315959,
                "title": "swift-the-number-of-full-rounds-you-have-played-test-cases",
                "content": "```swift\\nclass Solution {\\n    private func timeStr2Int(_ time: String) -> Int {\\n        let split = time.split(separator: \":\")\\n        return (Int(split[0]) ?? 0) * 60 + (Int(split[1]) ?? 0)\\n    }\\n    func numberOfRounds(_ startTime: String, _ finishTime: String) -> Int {\\n        var s = timeStr2Int(startTime), f = timeStr2Int(finishTime)\\n        if f < s { f += 24 * 60 }\\n        var result = 0\\n        for t in s...f where t % 15 == 0 && f-t >= 15 { result += 1 }\\n        return result\\n    }\\n}\\n```\\n\\n```swift\\nimport XCTest\\n\\n// Executed 3 tests, with 0 failures (0 unexpected) in 0.034 (0.036) seconds\\n\\nclass Tests: XCTestCase {\\n    private let s = Solution()\\n    func test1() {\\n        let result = s.numberOfRounds(\"12:01\", \"12:44\")\\n        XCTAssertEqual(result, 1)\\n    }\\n    func test2() {\\n        let result = s.numberOfRounds(\"20:00\", \"06:00\")\\n        XCTAssertEqual(result, 40)\\n    }\\n    func test3() {\\n        let result = s.numberOfRounds(\"00:00\", \"23:59\")\\n        XCTAssertEqual(result, 95)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```swift\\nclass Solution {\\n    private func timeStr2Int(_ time: String) -> Int {\\n        let split = time.split(separator: \":\")\\n        return (Int(split[0]) ?? 0) * 60 + (Int(split[1]) ?? 0)\\n    }\\n    func numberOfRounds(_ startTime: String, _ finishTime: String) -> Int {\\n        var s = timeStr2Int(startTime), f = timeStr2Int(finishTime)\\n        if f < s { f += 24 * 60 }\\n        var result = 0\\n        for t in s...f where t % 15 == 0 && f-t >= 15 { result += 1 }\\n        return result\\n    }\\n}\\n```\n```swift\\nimport XCTest\\n\\n// Executed 3 tests, with 0 failures (0 unexpected) in 0.034 (0.036) seconds\\n\\nclass Tests: XCTestCase {\\n    private let s = Solution()\\n    func test1() {\\n        let result = s.numberOfRounds(\"12:01\", \"12:44\")\\n        XCTAssertEqual(result, 1)\\n    }\\n    func test2() {\\n        let result = s.numberOfRounds(\"20:00\", \"06:00\")\\n        XCTAssertEqual(result, 40)\\n    }\\n    func test3() {\\n        let result = s.numberOfRounds(\"00:00\", \"23:59\")\\n        XCTAssertEqual(result, 95)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1311924,
                "title": "c-simple-o-1-time-o-1-space-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    /// 0 ms, faster than 100.00% of C++\\n    /// 6 MB, less than 11.60% of C++\\n    int numberOfRounds(string st, string ft)\\n    {\\n\\t    /// both start and finish will be = hours * 60 + minutes\\n        int start = ((st[0]-\\'0\\')*10 + (st[1]-\\'0\\')) * 60 + ((st[3]-\\'0\\')*10 + (st[4]-\\'0\\'));\\n        int finish = ((ft[0]-\\'0\\')*10 + (ft[1]-\\'0\\')) * 60 + ((ft[3]-\\'0\\')*10 + (ft[4]-\\'0\\'));\\n\\t\\t/// if finish is earlier than the start => add a full day\\n        if (finish < start)\\n            finish += 24*60;\\n\\t\\t/// make sure that we use 15-minute intervals\\n        if (start % 15)\\n            start += 15 - (start % 15);\\n        if (finish % 15)\\n            finish -= (start % 15);\\n        return (finish - start) / 15;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    /// 0 ms, faster than 100.00% of C++\\n    /// 6 MB, less than 11.60% of C++\\n    int numberOfRounds(string st, string ft)\\n    {\\n\\t    /// both start and finish will be = hours * 60 + minutes\\n        int start = ((st[0]-\\'0\\')*10 + (st[1]-\\'0\\')) * 60 + ((st[3]-\\'0\\')*10 + (st[4]-\\'0\\'));\\n        int finish = ((ft[0]-\\'0\\')*10 + (ft[1]-\\'0\\')) * 60 + ((ft[3]-\\'0\\')*10 + (ft[4]-\\'0\\'));\\n\\t\\t/// if finish is earlier than the start => add a full day\\n        if (finish < start)\\n            finish += 24*60;\\n\\t\\t/// make sure that we use 15-minute intervals\\n        if (start % 15)\\n            start += 15 - (start % 15);\\n        if (finish % 15)\\n            finish -= (start % 15);\\n        return (finish - start) / 15;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1304420,
                "title": "c-o-1-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string s, string f) {\\n        int S = stoi(s.substr(0,2))*60 + stoi(s.substr(3));\\n        int F = stoi(f.substr(0,2))*60 + stoi(f.substr(3));\\n        \\n        if(S<F && F-S<15)\\n        {\\n            return 0;\\n        }\\n        \\n        S = 15*((S+14)/15);\\n        F = 15*(F/15);\\n        \\n        int H;\\n        if(S>F)\\n        {\\n            H=24*60 - S + F;\\n        }\\n        else\\n        {\\n            H=F-S;\\n        }\\n        return H/15;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string s, string f) {\\n        int S = stoi(s.substr(0,2))*60 + stoi(s.substr(3));\\n        int F = stoi(f.substr(0,2))*60 + stoi(f.substr(3));\\n        \\n        if(S<F && F-S<15)\\n        {\\n            return 0;\\n        }\\n        \\n        S = 15*((S+14)/15);\\n        F = 15*(F/15);\\n        \\n        int H;\\n        if(S>F)\\n        {\\n            H=24*60 - S + F;\\n        }\\n        else\\n        {\\n            H=F-S;\\n        }\\n        return H/15;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1300630,
                "title": "java-100-time-97-space",
                "content": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        byte start_hour = Byte.parseByte(startTime.substring(0,2));\\n        byte start_min = Byte.parseByte(startTime.substring(3,5));\\n        byte end_hour = Byte.parseByte(finishTime.substring(0,2));\\n        byte end_min = Byte.parseByte(finishTime.substring(3,5));\\n        \\n        byte value = (byte)(end_hour*4 + end_min/15 - start_hour*4 - (start_min+14)/15);\\n        if (start_hour>end_hour || (start_hour==end_hour && start_min>end_min)){\\n            value+=96;\\n        }\\n        \\n        return value<0?0:value;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        byte start_hour = Byte.parseByte(startTime.substring(0,2));\\n        byte start_min = Byte.parseByte(startTime.substring(3,5));\\n        byte end_hour = Byte.parseByte(finishTime.substring(0,2));\\n        byte end_min = Byte.parseByte(finishTime.substring(3,5));\\n        \\n        byte value = (byte)(end_hour*4 + end_min/15 - start_hour*4 - (start_min+14)/15);\\n        if (start_hour>end_hour || (start_hour==end_hour && start_min>end_min)){\\n            value+=96;\\n        }\\n        \\n        return value<0?0:value;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1290939,
                "title": "java-simple-solution",
                "content": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int start = convert2Min(startTime);\\n        int finish = convert2Min(finishTime);\\n        if(finish > start && finish - start < 15){\\n            return 0;\\n        }\\n     \\n        start = (start + 14) / 15 * 15;\\n        finish = finish / 15 * 15;\\n       \\n        int diff = finish - start;\\n        diff = (diff < 0) ? diff + 24 * 60 : diff;\\n        return diff / 15;\\n    }\\n    \\n    private int convert2Min(String time){\\n        String[] t = time.split(\":\");\\n        return Integer.parseInt(t[0]) * 60 + Integer.parseInt(t[1]);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int start = convert2Min(startTime);\\n        int finish = convert2Min(finishTime);\\n        if(finish > start && finish - start < 15){\\n            return 0;\\n        }\\n     \\n        start = (start + 14) / 15 * 15;\\n        finish = finish / 15 * 15;\\n       \\n        int diff = finish - start;\\n        diff = (diff < 0) ? diff + 24 * 60 : diff;\\n        return diff / 15;\\n    }\\n    \\n    private int convert2Min(String time){\\n        String[] t = time.split(\":\");\\n        return Integer.parseInt(t[0]) * 60 + Integer.parseInt(t[1]);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1290090,
                "title": "swift-solution",
                "content": "Swift solution\\n```\\nclass Solution {\\n    func time2Int(_ time: String) -> Int {\\n        let split = time.split(separator: \":\")\\n        return (Int(split[0]) ?? 0) * 60 + (Int(split[1]) ?? 0)\\n    }\\n    func numberOfRounds(_ startTime: String, _ finishTime: String) -> Int {\\n        let roundTime = 15, startTime = time2Int(startTime), tpmTime = time2Int(finishTime), finishTime = tpmTime > startTime ? tpmTime : (tpmTime + time2Int(\"24:00\"))\\n        var result = 0\\n        for roundStartTime in stride(from: 0, to: 2 * 24 * 60, by: roundTime) where startTime <= roundStartTime && finishTime >= (roundStartTime + roundTime) {\\n            result += 1\\n        }\\n        return result\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func time2Int(_ time: String) -> Int {\\n        let split = time.split(separator: \":\")\\n        return (Int(split[0]) ?? 0) * 60 + (Int(split[1]) ?? 0)\\n    }\\n    func numberOfRounds(_ startTime: String, _ finishTime: String) -> Int {\\n        let roundTime = 15, startTime = time2Int(startTime), tpmTime = time2Int(finishTime), finishTime = tpmTime > startTime ? tpmTime : (tpmTime + time2Int(\"24:00\"))\\n        var result = 0\\n        for roundStartTime in stride(from: 0, to: 2 * 24 * 60, by: roundTime) where startTime <= roundStartTime && finishTime >= (roundStartTime + roundTime) {\\n            result += 1\\n        }\\n        return result\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1286243,
                "title": "c-long-but-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string startTime, string finishTime) {\\n        int start_hh = stoi(startTime.substr(0,2));\\n        int start_mm = stoi(startTime.substr(3,2));\\n        \\n        int end_hh = stoi(finishTime.substr(0,2));\\n        int end_mm = stoi(finishTime.substr(3,2));\\n        \\n        std::function<void(int,int)> roundIt = [&](int hh, int mm){\\n            if(1<=mm && mm<15){\\n                start_mm=15;\\n            }\\n            else if(15<mm && mm<30){\\n                start_mm=30;\\n            }\\n            else if(30<mm && mm<45){\\n                start_mm=45;\\n            }\\n            else if(45<mm && mm<=59){\\n                start_mm=00;\\n                if(start_hh==23){\\n                    start_hh=0;\\n                }\\n                else{\\n                    start_hh++;\\n                }\\n            }\\n        };\\n        \\n        std::function<void()> move = [&](){\\n            if(start_hh==23){\\n                if(start_mm==0){\\n                    start_mm+=15;\\n                }\\n                else if(start_mm==15){\\n                    start_mm+=15;\\n                }\\n                else if(start_mm==30){\\n                    start_mm+=15;\\n                }\\n                else if(start_mm==45){\\n                    start_mm=0;\\n                    start_hh=0;\\n                }\\n            }\\n            else{\\n                if(start_mm==0){\\n                    start_mm+=15;\\n                }\\n                else if(start_mm==15){\\n                    start_mm+=15;\\n                }\\n                else if(start_mm==30){\\n                    start_mm+=15;\\n                }\\n                else if(start_mm==45){\\n                    start_mm=0;\\n                    start_hh++;\\n                }\\n            }\\n        };\\n        \\n        int cnt = 0;\\n        \\n        if(start_hh<end_hh){\\n            roundIt(start_hh,start_mm);\\n            if(start_hh==end_hh){\\n                while((end_mm-start_mm)>=15){\\n                    move();\\n                    cnt++;\\n                }\\n            }\\n            else{\\n                while(start_hh<end_hh){\\n                    move();\\n                    cnt++;\\n                }\\n                while((end_mm-start_mm)>=15){\\n                    move();\\n                    cnt++;\\n                }\\n            }\\n        }\\n        else if(start_hh==end_hh && start_mm<end_mm){\\n            roundIt(start_hh,start_mm);\\n            if(start_mm>=end_mm)\\n                return 0;\\n            while((end_mm-start_mm)>=15){\\n                move();\\n                cnt++;\\n            }\\n        }\\n        else if(start_hh==end_hh && start_mm==end_mm){\\n            return 96;\\n        }\\n        else if(start_hh==end_hh && start_mm>end_mm){\\n            roundIt(start_hh,start_mm);\\n            while((start_hh!=0)||(start_mm!=0)){\\n                // cout<<start_hh<<\" \"<<start_mm<<endl;\\n                move();\\n                cnt++;\\n            }\\n            while(start_hh<end_hh){\\n                move();\\n                cnt++;\\n            }\\n            while((end_mm-start_mm)>=15){\\n                move();\\n                cnt++;\\n            }\\n        }\\n        else if(start_hh>end_hh){\\n            roundIt(start_hh,start_mm);\\n            while((start_hh!=0)||(start_mm!=0)){\\n                move();\\n                cnt++;\\n            }\\n            while(start_hh<end_hh){\\n                move();\\n                cnt++;\\n            }\\n            while((end_mm-start_mm)>=15){\\n                move();\\n                cnt++;\\n            }\\n        }\\n        \\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string startTime, string finishTime) {\\n        int start_hh = stoi(startTime.substr(0,2));\\n        int start_mm = stoi(startTime.substr(3,2));\\n        \\n        int end_hh = stoi(finishTime.substr(0,2));\\n        int end_mm = stoi(finishTime.substr(3,2));\\n        \\n        std::function<void(int,int)> roundIt = [&](int hh, int mm){\\n            if(1<=mm && mm<15){\\n                start_mm=15;\\n            }\\n            else if(15<mm && mm<30){\\n                start_mm=30;\\n            }\\n            else if(30<mm && mm<45){\\n                start_mm=45;\\n            }\\n            else if(45<mm && mm<=59){\\n                start_mm=00;\\n                if(start_hh==23){\\n                    start_hh=0;\\n                }\\n                else{\\n                    start_hh++;\\n                }\\n            }\\n        };\\n        \\n        std::function<void()> move = [&](){\\n            if(start_hh==23){\\n                if(start_mm==0){\\n                    start_mm+=15;\\n                }\\n                else if(start_mm==15){\\n                    start_mm+=15;\\n                }\\n                else if(start_mm==30){\\n                    start_mm+=15;\\n                }\\n                else if(start_mm==45){\\n                    start_mm=0;\\n                    start_hh=0;\\n                }\\n            }\\n            else{\\n                if(start_mm==0){\\n                    start_mm+=15;\\n                }\\n                else if(start_mm==15){\\n                    start_mm+=15;\\n                }\\n                else if(start_mm==30){\\n                    start_mm+=15;\\n                }\\n                else if(start_mm==45){\\n                    start_mm=0;\\n                    start_hh++;\\n                }\\n            }\\n        };\\n        \\n        int cnt = 0;\\n        \\n        if(start_hh<end_hh){\\n            roundIt(start_hh,start_mm);\\n            if(start_hh==end_hh){\\n                while((end_mm-start_mm)>=15){\\n                    move();\\n                    cnt++;\\n                }\\n            }\\n            else{\\n                while(start_hh<end_hh){\\n                    move();\\n                    cnt++;\\n                }\\n                while((end_mm-start_mm)>=15){\\n                    move();\\n                    cnt++;\\n                }\\n            }\\n        }\\n        else if(start_hh==end_hh && start_mm<end_mm){\\n            roundIt(start_hh,start_mm);\\n            if(start_mm>=end_mm)\\n                return 0;\\n            while((end_mm-start_mm)>=15){\\n                move();\\n                cnt++;\\n            }\\n        }\\n        else if(start_hh==end_hh && start_mm==end_mm){\\n            return 96;\\n        }\\n        else if(start_hh==end_hh && start_mm>end_mm){\\n            roundIt(start_hh,start_mm);\\n            while((start_hh!=0)||(start_mm!=0)){\\n                // cout<<start_hh<<\" \"<<start_mm<<endl;\\n                move();\\n                cnt++;\\n            }\\n            while(start_hh<end_hh){\\n                move();\\n                cnt++;\\n            }\\n            while((end_mm-start_mm)>=15){\\n                move();\\n                cnt++;\\n            }\\n        }\\n        else if(start_hh>end_hh){\\n            roundIt(start_hh,start_mm);\\n            while((start_hh!=0)||(start_mm!=0)){\\n                move();\\n                cnt++;\\n            }\\n            while(start_hh<end_hh){\\n                move();\\n                cnt++;\\n            }\\n            while((end_mm-start_mm)>=15){\\n                move();\\n                cnt++;\\n            }\\n        }\\n        \\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1285942,
                "title": "java-solution-with-visual-explanation",
                "content": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        // think of a day as units of time, each unit consists 15 minutes \\n        // so within a day, there will be 24 * 4 = 96 units (4 15-min units per hour)\\n\\n        // 0----15min----1----15min----2----15min----3----15min----4 \\n        \\n        // re-represent the statTime and endTime using this new unit of time, \\n        // the number of units between them will be the number of full rounds one can play\\n        \\n        //  0--------1--------2--------3--------4   \\n        //      ^                            ^       2 units in between\\n        //    start                         end\\n        \\n        //  0--------1--------2--------3--------4   \\n        //  ^                               ^        3 units in between\\n        //  start                          end\\n        \\n        //  0--------1--------2--------3--------4   \\n        //  ^                                   ^    4 units in between\\n        //  start                              end\\n        \\n        int startH = Integer.parseInt(startTime.substring(0, 2));\\n        int startM = Integer.parseInt(startTime.substring(3));\\n        int endH = Integer.parseInt(finishTime.substring(0, 2));\\n        int endM = Integer.parseInt(finishTime.substring(3));\\n        \\n        int start = startH * 60 + startM;\\n        int end = endH * 60 + endM;\\n        \\n        // when start > end (play overnight), we can simply shift the end time by 24 hours\\n        \\n        //  0--------1--------2--------3--------4   \\n        //         ^                        ^    \\n        //        end                      start\\n        \\n        //  0--------1--------2--------3--------4-------...... 96--------97   \\n        //                                  ^            end of day1   ^   \\n        //                                 start                      end\\n           \\n        if (start > end) end += 24 * 60;\\n        \\n        return (int) (Math.floor(end / 15f) - Math.ceil(start / 15f));\\n  \\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        // think of a day as units of time, each unit consists 15 minutes \\n        // so within a day, there will be 24 * 4 = 96 units (4 15-min units per hour)\\n\\n        // 0----15min----1----15min----2----15min----3----15min----4 \\n        \\n        // re-represent the statTime and endTime using this new unit of time, \\n        // the number of units between them will be the number of full rounds one can play\\n        \\n        //  0--------1--------2--------3--------4   \\n        //      ^                            ^       2 units in between\\n        //    start                         end\\n        \\n        //  0--------1--------2--------3--------4   \\n        //  ^                               ^        3 units in between\\n        //  start                          end\\n        \\n        //  0--------1--------2--------3--------4   \\n        //  ^                                   ^    4 units in between\\n        //  start                              end\\n        \\n        int startH = Integer.parseInt(startTime.substring(0, 2));\\n        int startM = Integer.parseInt(startTime.substring(3));\\n        int endH = Integer.parseInt(finishTime.substring(0, 2));\\n        int endM = Integer.parseInt(finishTime.substring(3));\\n        \\n        int start = startH * 60 + startM;\\n        int end = endH * 60 + endM;\\n        \\n        // when start > end (play overnight), we can simply shift the end time by 24 hours\\n        \\n        //  0--------1--------2--------3--------4   \\n        //         ^                        ^    \\n        //        end                      start\\n        \\n        //  0--------1--------2--------3--------4-------...... 96--------97   \\n        //                                  ^            end of day1   ^   \\n        //                                 start                      end\\n           \\n        if (start > end) end += 24 * 60;\\n        \\n        return (int) (Math.floor(end / 15f) - Math.ceil(start / 15f));\\n  \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1285556,
                "title": "javascript-simple-100-time-100-space",
                "content": "Approach:\\nConvert everything to minute and run a loop from start time in minutes to finish time in minutes\\nAdd 24*60 minutes if finish time is less than start time\\nIncrement the answer(except for the first occurrance) by 1 whenever minute count is multiple of 15\\n\\n```\\n/**\\n * @param {string} startTime\\n * @param {string} finishTime\\n * @return {number}\\n */\\nvar numberOfRounds = function(startTime, finishTime) {\\n\\n    let startH,startM,finishH,finishM,start=-1,ans=0,addition=0,startInMin,finishInMin;\\n    startH = parseInt(startTime.substring(0,2));\\n    startM = parseInt(startTime.substring(3));\\n    finishH = parseInt(finishTime.substring(0,2));\\n    finishM = parseInt(finishTime.substring(3));\\n    \\n    if(finishH<startH || (finishH===startH && finishM<startM)){//Add 24*60 minutes if finish time is less than start time\\n        addition = 24*60;\\n    }\\n    \\n    startInMin = startH*60+startM;\\n    finishInMin = finishH*60+finishM+addition;\\n    \\n    for(let i=startInMin;i<=finishInMin;i++){\\n        if(i%15===0){\\n            if(start===-1){\\n                start=1;\\n            }else{\\n                ans++;\\n            }\\n        }\\n    }\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} startTime\\n * @param {string} finishTime\\n * @return {number}\\n */\\nvar numberOfRounds = function(startTime, finishTime) {\\n\\n    let startH,startM,finishH,finishM,start=-1,ans=0,addition=0,startInMin,finishInMin;\\n    startH = parseInt(startTime.substring(0,2));\\n    startM = parseInt(startTime.substring(3));\\n    finishH = parseInt(finishTime.substring(0,2));\\n    finishM = parseInt(finishTime.substring(3));\\n    \\n    if(finishH<startH || (finishH===startH && finishM<startM)){//Add 24*60 minutes if finish time is less than start time\\n        addition = 24*60;\\n    }\\n    \\n    startInMin = startH*60+startM;\\n    finishInMin = finishH*60+finishM+addition;\\n    \\n    for(let i=startInMin;i<=finishInMin;i++){\\n        if(i%15===0){\\n            if(start===-1){\\n                start=1;\\n            }else{\\n                ans++;\\n            }\\n        }\\n    }\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1285504,
                "title": "python-100-time-and-100-space",
                "content": "`\\nclass Solution:\\n\\n\\tdef numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n\\t\\ts1=int(startTime[:2])\\n        s2=int(startTime[3:])\\n        e1=int(finishTime[:2])\\n        e2=int(finishTime[3:])\\n        sT=s1*60 + s2\\n        eT=e1*60 + e2\\n        if sT%15==0:\\n            pass\\n        else:\\n            sT+=15-sT%15\\n        if eT%15==0:\\n            pass\\n        else:\\n            eT-=eT%15\\n        if sT<=eT:\\n            return (abs(sT-eT)//15)\\n        else:\\n            return 96 - (abs(sT-eT)//15)\\n`\\n\\n1) We calculate both the times with respect to \"00:00\"\\n2) We adjust the values be be either starting or ending times\\n3) We calculate the number of Sessions by diving the times by duration of sessions",
                "solutionTags": [
                    "Python"
                ],
                "code": "`\\nclass Solution:\\n\\n\\tdef numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n\\t\\ts1=int(startTime[:2])\\n        s2=int(startTime[3:])\\n        e1=int(finishTime[:2])\\n        e2=int(finishTime[3:])\\n        sT=s1*60 + s2\\n        eT=e1*60 + e2\\n        if sT%15==0:\\n            pass\\n        else:\\n            sT+=15-sT%15\\n        if eT%15==0:\\n            pass\\n        else:\\n            eT-=eT%15\\n        if sT<=eT:\\n            return (abs(sT-eT)//15)\\n        else:\\n            return 96 - (abs(sT-eT)//15)\\n`\\n\\n1) We calculate both the times with respect to \"00:00\"\\n2) We adjust the values be be either starting or ending times\\n3) We calculate the number of Sessions by diving the times by duration of sessions",
                "codeTag": "Java"
            },
            {
                "id": 1284978,
                "title": "java-clean-easy-to-think-of-very-clear-explanation",
                "content": "I am fresh here. Using the most stupid way to solve this problem. Include the special cases need to solve \\n```\\nclass Solution {\\n    public int numberOfRounds(String start, String finish){\\n        \\n        //I am a fresh java user, do not know other ways to split the string\\n        \\n        // here we want sh = start hour, eh = end hour, sm = start min, em = end min\\n        String[] res = start.split(\":\");\\n        int sh = Integer.parseInt(res[0]);\\n        int sm = Integer.parseInt(res[1]);\\n        String[] res2 = finish.split(\":\");\\n        int eh = Integer.parseInt(res2[0]);\\n        int em = Integer.parseInt(res2[1]);\\n        \\n        //first we resolve the special case that he plays overnight, \\n\\t\\t//that\\'s the end hour is even bigger than the start hour, we plus 24\\n        if(eh < sh)\\n            eh = eh + 24;\\n        \\n        // the secpnd special case. The start and end hour is the same, but the minutes are different\\n        if(eh == sh){\\n            \\n            // the first sub case, end is smaller than the start min, \\n\\t\\t\\t//we add 24 to the end hour, becasue it is playing overnight\\n            if(em < sm)\\n                eh = eh + 24;  \\n            else{\\n                \\n                //the second sub case, end is bigger than the start min\\n\\t\\t\\t\\t//we find the time left in the start hour for him to play for the start time\\n\\t\\t\\t\\t//and the time he could play if he only have the end time\\n\\t\\t\\t\\t//add these two together and subtract 4 ( it means 60 / 15) \\n\\t\\t\\t\\t//can we get exactlly how many runs can he play in this hour\\n\\t\\t\\t\\t\\n                sm = (60 - sm) / 15;\\n                em = em / 15;\\n                return em + sm - 4;\\n            \\n            }      \\n        }\\n        \\n        //for other cases, including the previous adding 24 hours cases, \\n\\t\\t//we can consider the remaining time for him to play in the start hour\\n\\t\\t//and the runs he can play in the end hour, and then \\n\\t\\t//add the hours between the start and the end and subtract 1\\n\\t\\t\\n        int run1 = (60 - sm) / 15;\\n        int run2 = em / 15;\\n        int run = (eh - sh - 1) * 4 + (run1 + run2);\\n        return run;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String start, String finish){\\n        \\n        //I am a fresh java user, do not know other ways to split the string\\n        \\n        // here we want sh = start hour, eh = end hour, sm = start min, em = end min\\n        String[] res = start.split(\":\");\\n        int sh = Integer.parseInt(res[0]);\\n        int sm = Integer.parseInt(res[1]);\\n        String[] res2 = finish.split(\":\");\\n        int eh = Integer.parseInt(res2[0]);\\n        int em = Integer.parseInt(res2[1]);\\n        \\n        //first we resolve the special case that he plays overnight, \\n\\t\\t//that\\'s the end hour is even bigger than the start hour, we plus 24\\n        if(eh < sh)\\n            eh = eh + 24;\\n        \\n        // the secpnd special case. The start and end hour is the same, but the minutes are different\\n        if(eh == sh){\\n            \\n            // the first sub case, end is smaller than the start min, \\n\\t\\t\\t//we add 24 to the end hour, becasue it is playing overnight\\n            if(em < sm)\\n                eh = eh + 24;  \\n            else{\\n                \\n                //the second sub case, end is bigger than the start min\\n\\t\\t\\t\\t//we find the time left in the start hour for him to play for the start time\\n\\t\\t\\t\\t//and the time he could play if he only have the end time\\n\\t\\t\\t\\t//add these two together and subtract 4 ( it means 60 / 15) \\n\\t\\t\\t\\t//can we get exactlly how many runs can he play in this hour\\n\\t\\t\\t\\t\\n                sm = (60 - sm) / 15;\\n                em = em / 15;\\n                return em + sm - 4;\\n            \\n            }      \\n        }\\n        \\n        //for other cases, including the previous adding 24 hours cases, \\n\\t\\t//we can consider the remaining time for him to play in the start hour\\n\\t\\t//and the runs he can play in the end hour, and then \\n\\t\\t//add the hours between the start and the end and subtract 1\\n\\t\\t\\n        int run1 = (60 - sm) / 15;\\n        int run2 = em / 15;\\n        int run = (eh - sh - 1) * 4 + (run1 + run2);\\n        return run;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284756,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        String s[] = startTime.split(\":\");\\n        int sh = Integer.parseInt(s[0]), sm =  Integer.parseInt(s[1]);\\n        String f[] = finishTime.split(\":\");\\n        int fh = Integer.parseInt(f[0]), fm =  Integer.parseInt(f[1]);\\n        int res = 0;\\n        if(sh > fh || (sh==fh && sm>fm))\\n            res = computeRounds(sh,sm,23,60) + computeRounds(0,0,fh,fm);\\n        else\\n            res = computeRounds(sh,sm,fh,fm);\\n        return res;\\n    }\\n    \\n    int computeRounds(int sh,int sm,int fh,int fm){\\n        int r = 0;\\n        if (sh!=fh){\\n            r = Math.max(0, (fh-sh-1)*4) + (60-sm)/15 + fm/15;\\n        }\\n        else\\n            r = Math.max(0,fm/15-sm/15-(sm%15==0?0:1));\\n        return r;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        String s[] = startTime.split(\":\");\\n        int sh = Integer.parseInt(s[0]), sm =  Integer.parseInt(s[1]);\\n        String f[] = finishTime.split(\":\");\\n        int fh = Integer.parseInt(f[0]), fm =  Integer.parseInt(f[1]);\\n        int res = 0;\\n        if(sh > fh || (sh==fh && sm>fm))\\n            res = computeRounds(sh,sm,23,60) + computeRounds(0,0,fh,fm);\\n        else\\n            res = computeRounds(sh,sm,fh,fm);\\n        return res;\\n    }\\n    \\n    int computeRounds(int sh,int sm,int fh,int fm){\\n        int r = 0;\\n        if (sh!=fh){\\n            r = Math.max(0, (fh-sh-1)*4) + (60-sm)/15 + fm/15;\\n        }\\n        else\\n            r = Math.max(0,fm/15-sm/15-(sm%15==0?0:1));\\n        return r;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284739,
                "title": "no-math-and-magic-numbers-bs-just-check-intersection-of-time-ranges",
                "content": "TLDR: The algorithm is just checking intersection of time ranges. Not as efficient as the math approach, but easier to understand from pure algorithms perspective.\\n\\nTrying to do the math and accomodate corner cases gets a little messy in my opinion, hence I let the in-built string comparisons do to the heavy lifting for us. \\nThe solution is easy to understand, we just have to check whether the quarters fall in the time range. Therefore, generate all the quarters and for each one of them check if they fall in between the start and endTime. \\n\\n```python\\nclass Solution:\\n      \\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        res = 0\\n        if startTime > finishTime:\\n          res += self.find_intersecting_rounds(startTime, \\'24:00\\')\\n          res += self.find_intersecting_rounds(\\'00:00\\', finishTime)\\n        else:\\n          res += self.find_intersecting_rounds(startTime, finishTime)\\n        return res\\n  \\n    def find_intersecting_rounds(self, start, end):\\n          start_hour, _   = [int(x) for x in start.split(\\':\\')]\\n          end_hour, _     = [int(x) for x in end.split(\\':\\')]\\n          count = 0\\n          for current_hour in range(start_hour, end_hour+1):\\n            quarters = [0, 15, 30, 45, 60]\\n            for i in range(len(quarters) - 1):\\n              first_q  = \\'%02d:%02d\\' % (current_hour, quarters[i])\\n              second_q = \\'%02d:%02d\\' % (current_hour, quarters[i+1])\\n              # 00:00 <= 00:15 <= 23:59 and 00:00 <= 00:30 <= 23.59\\n              if (start <= first_q <= end) and (start <= second_q <= end):\\n                count += 1\\n          return count\\n        \\n```\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```python\\nclass Solution:\\n      \\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        res = 0\\n        if startTime > finishTime:\\n          res += self.find_intersecting_rounds(startTime, \\'24:00\\')\\n          res += self.find_intersecting_rounds(\\'00:00\\', finishTime)\\n        else:\\n          res += self.find_intersecting_rounds(startTime, finishTime)\\n        return res\\n  \\n    def find_intersecting_rounds(self, start, end):\\n          start_hour, _   = [int(x) for x in start.split(\\':\\')]\\n          end_hour, _     = [int(x) for x in end.split(\\':\\')]\\n          count = 0\\n          for current_hour in range(start_hour, end_hour+1):\\n            quarters = [0, 15, 30, 45, 60]\\n            for i in range(len(quarters) - 1):\\n              first_q  = \\'%02d:%02d\\' % (current_hour, quarters[i])\\n              second_q = \\'%02d:%02d\\' % (current_hour, quarters[i+1])\\n              # 00:00 <= 00:15 <= 23:59 and 00:00 <= 00:30 <= 23.59\\n              if (start <= first_q <= end) and (start <= second_q <= end):\\n                count += 1\\n          return count\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284657,
                "title": "easy-to-read-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string startTime, string finishTime) {\\n        int startCnt = getCnt(startTime, true), endCnt = getCnt(finishTime, false);\\n        int res = endCnt - startCnt;\\n        return startCnt > endCnt ? 24 * 4 + res : res;\\n    }\\n    \\n    int getCnt(string time, bool start)\\n    {\\n        int h = stoi(time.substr(0, 2)), m = stoi(time.substr(3, 2));\\n        if (start)\\n            m = (m + 15 - 1) / 15;\\n        else\\n            m /= 15;\\n        \\n        return h * 4 + m;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string startTime, string finishTime) {\\n        int startCnt = getCnt(startTime, true), endCnt = getCnt(finishTime, false);\\n        int res = endCnt - startCnt;\\n        return startCnt > endCnt ? 24 * 4 + res : res;\\n    }\\n    \\n    int getCnt(string time, bool start)\\n    {\\n        int h = stoi(time.substr(0, 2)), m = stoi(time.substr(3, 2));\\n        if (start)\\n            m = (m + 15 - 1) / 15;\\n        else\\n            m /= 15;\\n        \\n        return h * 4 + m;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284561,
                "title": "simple-brute-force-approach",
                "content": "The approach is quite straightforward, we simply try to imitate a clock. The complete steps of the algorithm are :\\n1. We will iterate over the minutes, starting from the ```startTime```\\'s minute, and increament minute at each step.Also maintaine a `play` variable showing the number of rounds we played.\\n2. **Caution with iteration** : \\n\\ta. Since the minutes can\\'t be more than ```59```, so when ```minutes == 60```, we would reset back ```minutes``` to ```0``` and increase `hour` by ```1```.\\n\\tb. Also since `hour <= 23` so when ```hour == 24``` we would reset ```hour``` to `0`, signifying we are in the next day.\\n3. Every time, we hit the condition ```minute % 15 == 0``` we would increase `play` by `1`.\\n4. End the loop when our timer becomes equal to ```endTime```.\\n\\nBelow is the Java implementation of above logic \\uD83D\\uDC47\\n\\n```java\\nclass Solution {\\n    public int numberOfRounds(String startTime, String endTime) {\\n        int play = 0;\\n\\t\\t\\n\\t\\t// for easier working, startTime is converted to start[] and endTime is converted to end[]\\n\\t\\t// where start[0] = startTime.hour, start[1] = startTime.minute\\n\\t\\t// similarly end[0] = endTime.hour, end[1] = endTime.minute\\n\\t\\t\\n        int start[] = new int[2];\\n        int end[] = new int[2];\\n        start[0] = (startTime.charAt(0) - \\'0\\') * 10 + (startTime.charAt(1) - \\'0\\');\\n        start[1] = (startTime.charAt(3) - \\'0\\') * 10 + (startTime.charAt(4) - \\'0\\');\\n        end[0] = (endTime.charAt(0) - \\'0\\') * 10 + (endTime.charAt(1) - \\'0\\');\\n        end[1] = (endTime.charAt(3) - \\'0\\') * 10 + (endTime.charAt(4) - \\'0\\');\\n        \\n        int hr = start[0];\\n        for(int min = start[1]; ; min++) {\\n            if(min % 15 == 0) play++;\\n            if(min == 60) {\\n                hr++;\\n                min = 0;\\n            }\\n            if(hr == 24) {\\n                hr = 0;\\n            }\\n            if(hr == end[0] && min == end[1]) {\\n                break;\\n            }\\n        }\\n        return (play < 1) ? 0 : play - 1;\\n\\t\\t// returning play - 1 because play shows number of instances where minutes was divisible by 15, \\n\\t\\t// and for every 2 consecutive instances you play 1 game, so play - 1.\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```startTime```\n```59```\n```minutes == 60```\n```minutes```\n```0```\n```1```\n```hour == 24```\n```hour```\n```minute % 15 == 0```\n```endTime```\n```java\\nclass Solution {\\n    public int numberOfRounds(String startTime, String endTime) {\\n        int play = 0;\\n\\t\\t\\n\\t\\t// for easier working, startTime is converted to start[] and endTime is converted to end[]\\n\\t\\t// where start[0] = startTime.hour, start[1] = startTime.minute\\n\\t\\t// similarly end[0] = endTime.hour, end[1] = endTime.minute\\n\\t\\t\\n        int start[] = new int[2];\\n        int end[] = new int[2];\\n        start[0] = (startTime.charAt(0) - \\'0\\') * 10 + (startTime.charAt(1) - \\'0\\');\\n        start[1] = (startTime.charAt(3) - \\'0\\') * 10 + (startTime.charAt(4) - \\'0\\');\\n        end[0] = (endTime.charAt(0) - \\'0\\') * 10 + (endTime.charAt(1) - \\'0\\');\\n        end[1] = (endTime.charAt(3) - \\'0\\') * 10 + (endTime.charAt(4) - \\'0\\');\\n        \\n        int hr = start[0];\\n        for(int min = start[1]; ; min++) {\\n            if(min % 15 == 0) play++;\\n            if(min == 60) {\\n                hr++;\\n                min = 0;\\n            }\\n            if(hr == 24) {\\n                hr = 0;\\n            }\\n            if(hr == end[0] && min == end[1]) {\\n                break;\\n            }\\n        }\\n        return (play < 1) ? 0 : play - 1;\\n\\t\\t// returning play - 1 because play shows number of instances where minutes was divisible by 15, \\n\\t\\t// and for every 2 consecutive instances you play 1 game, so play - 1.\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284512,
                "title": "c-intuitive-solution",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string startTime, string finishTime) {\\n        int res = 0;\\n        int h1, m1, h2, m2;\\n        h1 = stoi(startTime.substr(0,2));\\n        m1 = stoi(startTime.substr(3));\\n        \\n        h2 = stoi(finishTime.substr(0,2));\\n        m2 = stoi(finishTime.substr(3));\\n        res = (h2 - h1) * 4 - ((m1 + 14) /15) + (m2 /15) ;\\n        return (res + 96)%96;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int numberOfRounds(string startTime, string finishTime) {\\n        int res = 0;\\n        int h1, m1, h2, m2;\\n        h1 = stoi(startTime.substr(0,2));\\n        m1 = stoi(startTime.substr(3));\\n        \\n        h2 = stoi(finishTime.substr(0,2));\\n        m2 = stoi(finishTime.substr(3));\\n        res = (h2 - h1) * 4 - ((m1 + 14) /15) + (m2 /15) ;\\n        return (res + 96)%96;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1284505,
                "title": "o-1-0ms-faster-than-100",
                "content": "```\\nfunc numberOfRounds(startTime string, finishTime string) int {\\n\\t//Converting to Numbers\\n\\tsH, sM := convertTimeToInts(startTime)\\n\\tfH, fM := convertTimeToInts(finishTime)\\n\\t//I change the values for the convenience of calculation\\n\\tfM, sM = fM-fM%15, sM+(60-sM)%15\\n\\ttotalH, totalM := fH-sH, fM-sM\\n\\tif totalM < 0 {\\n\\t\\ttotalH--\\n\\t\\tfM = fM + 60\\n\\t\\ttotalM = fM - sM\\n\\t}\\n\\t//I get how many matches there can be during these minutes\\n\\tinMins := totalM / 15\\n\\tif totalH < 0 {\\n\\t\\ttotalH = 24 + totalH\\n\\t}\\n\\tresult := 4*totalH + inMins\\n\\treturn result\\n}\\n\\nfunc convertTimeToInts(hh_mm string) (int, int) {\\n\\th := int(hh_mm[0]-48)*10 + int(hh_mm[1]-48)\\n\\tm := int(hh_mm[3]-48)*10 + int(hh_mm[4]-48)\\n\\treturn h, m\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc numberOfRounds(startTime string, finishTime string) int {\\n\\t//Converting to Numbers\\n\\tsH, sM := convertTimeToInts(startTime)\\n\\tfH, fM := convertTimeToInts(finishTime)\\n\\t//I change the values for the convenience of calculation\\n\\tfM, sM = fM-fM%15, sM+(60-sM)%15\\n\\ttotalH, totalM := fH-sH, fM-sM\\n\\tif totalM < 0 {\\n\\t\\ttotalH--\\n\\t\\tfM = fM + 60\\n\\t\\ttotalM = fM - sM\\n\\t}\\n\\t//I get how many matches there can be during these minutes\\n\\tinMins := totalM / 15\\n\\tif totalH < 0 {\\n\\t\\ttotalH = 24 + totalH\\n\\t}\\n\\tresult := 4*totalH + inMins\\n\\treturn result\\n}\\n\\nfunc convertTimeToInts(hh_mm string) (int, int) {\\n\\th := int(hh_mm[0]-48)*10 + int(hh_mm[1]-48)\\n\\tm := int(hh_mm[3]-48)*10 + int(hh_mm[4]-48)\\n\\treturn h, m\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1284494,
                "title": "python-solution-with-explanatory-comments",
                "content": "```\\n\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        # First extract the Starting hour and the Starting minutes\\n        startingHour = int(startTime[:2])\\n        startingMins = int(startTime[3:])\\n        \\n        # Then extract the Finishing hour and the Finishing minutes\\n        finishingHour = int(finishTime[:2])\\n        finishingMins = int(finishTime[3:])\\n        \\n        # Define a count variable with initial value 0\\n        count = 0\\n        \\n        # Check if the Starting and the Finishing hours are equal or not\\n        if finishingHour == startingHour:\\n            # Then check if Finishing minute is greater than the Starting minute or not\\n            if finishingMins > startingMins:\\n                # If Yes, then, count the number of round can be possible and add it to \\'count\\'\\n                # A loop that will only iterate 3 times, no matter what the inputs are. So, it has a constant runtime\\n                for j in range(0, 46, 15):\\n                    # Check if the Starting and the Finishing times are inside the range a round\\n                    if j >= startingMins and j+15 <= finishingMins:\\n                        # If Yes, then add 1 to \\'count\\'\\n                        count += 1\\n            # Else, if the Finishing minute is less than or equal to the Starting minute\\n            else:\\n                # Then, the player has played overnight, so add the rounds possible for atleast 23 hours\\n                # And, then add the rounds for the minutes (if any)\\n                count = 23*4 + (60-startingMins)//15 + (finishingMins//15)\\n        # Else Check if the Finishing hour is greater than the Starting hour or not\\n        elif finishingHour > startingHour:\\n            # If Yes, then the player has played atleast (finishingHour-startingHour-1) hours, so add rounds for that\\n            # And, then add the rounds for the minutes (if any)\\n            count = (finishingHour-startingHour-1)*4 + (60-startingMins)//15 + (finishingMins//15)\\n        # Else Check if the Finishing hour is less than the Starting hour or not\\n        else:\\n            # If Yes, then the player has played overnight and that is atleast (23-(startingHour-finishingHour)) hours\\n            # So, add rounds for that. And, then add the rounds for the minutes (if any)\\n            count = (23-(startingHour-finishingHour))*4 + (60-startingMins)//15 + (finishingMins//15)\\n        \\n        # Finally, return the value of \\'count\\'\\n        return count\\n    \\n  \\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        # First extract the Starting hour and the Starting minutes\\n        startingHour = int(startTime[:2])\\n        startingMins = int(startTime[3:])\\n        \\n        # Then extract the Finishing hour and the Finishing minutes\\n        finishingHour = int(finishTime[:2])\\n        finishingMins = int(finishTime[3:])\\n        \\n        # Define a count variable with initial value 0\\n        count = 0\\n        \\n        # Check if the Starting and the Finishing hours are equal or not\\n        if finishingHour == startingHour:\\n            # Then check if Finishing minute is greater than the Starting minute or not\\n            if finishingMins > startingMins:\\n                # If Yes, then, count the number of round can be possible and add it to \\'count\\'\\n                # A loop that will only iterate 3 times, no matter what the inputs are. So, it has a constant runtime\\n                for j in range(0, 46, 15):\\n                    # Check if the Starting and the Finishing times are inside the range a round\\n                    if j >= startingMins and j+15 <= finishingMins:\\n                        # If Yes, then add 1 to \\'count\\'\\n                        count += 1\\n            # Else, if the Finishing minute is less than or equal to the Starting minute\\n            else:\\n                # Then, the player has played overnight, so add the rounds possible for atleast 23 hours\\n                # And, then add the rounds for the minutes (if any)\\n                count = 23*4 + (60-startingMins)//15 + (finishingMins//15)\\n        # Else Check if the Finishing hour is greater than the Starting hour or not\\n        elif finishingHour > startingHour:\\n            # If Yes, then the player has played atleast (finishingHour-startingHour-1) hours, so add rounds for that\\n            # And, then add the rounds for the minutes (if any)\\n            count = (finishingHour-startingHour-1)*4 + (60-startingMins)//15 + (finishingMins//15)\\n        # Else Check if the Finishing hour is less than the Starting hour or not\\n        else:\\n            # If Yes, then the player has played overnight and that is atleast (23-(startingHour-finishingHour)) hours\\n            # So, add rounds for that. And, then add the rounds for the minutes (if any)\\n            count = (23-(startingHour-finishingHour))*4 + (60-startingMins)//15 + (finishingMins//15)\\n        \\n        # Finally, return the value of \\'count\\'\\n        return count\\n    \\n  \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284459,
                "title": "python-3-simple-math",
                "content": "Function ```f``` returns The Number of Full Rounds correctly when ```startTime<=finishTime```\\nIf ```startTime>finishTime``` we are dividing it on two intervals:\\nfrom ```startTime``` until midnight\\nand from midnight until ```finishTime```\\n\\n```\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        sh,sm=map(int,startTime.split(\\':\\'))\\n        fh,fm=map(int,finishTime.split(\\':\\'))\\n        \\n        def f(sh,sm,fh,fm):\\n            answ=(fh-sh-1)*4 + fm//15 +(60-sm)//15\\n            answ=max(answ,0)\\n            return answ\\n        \\n        if startTime>finishTime:\\n            return f(sh,sm,23,60) + f(0,0,fh,fm)\\n        else: \\n            return f(sh,sm,fh,fm)\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```f```\n```startTime<=finishTime```\n```startTime>finishTime```\n```startTime```\n```finishTime```\n```\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        sh,sm=map(int,startTime.split(\\':\\'))\\n        fh,fm=map(int,finishTime.split(\\':\\'))\\n        \\n        def f(sh,sm,fh,fm):\\n            answ=(fh-sh-1)*4 + fm//15 +(60-sm)//15\\n            answ=max(answ,0)\\n            return answ\\n        \\n        if startTime>finishTime:\\n            return f(sh,sm,23,60) + f(0,0,fh,fm)\\n        else: \\n            return f(sh,sm,fh,fm)\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284452,
                "title": "4-lines-javascript-solution",
                "content": "\\n**JavaScript 0(1) Solution**\\n\\n\\n![image](https://assets.leetcode.com/users/images/64b3fd37-bc2b-43cc-a0bf-b63ee7f31876_1624162827.384518.png)\\n\\n```\\nvar numberOfRounds = function(startTime, finishTime) {\\n    var start=60*parseInt(startTime.slice(0,2))+parseInt(startTime.slice(3))\\n    var end=60*parseInt(finishTime.slice(0,2))+parseInt(finishTime.slice(3))\\n    if(start>end) end+=24*60\\n    return Math.floor(end/15) - Math.ceil(start/15)\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Math"
                ],
                "code": "```\\nvar numberOfRounds = function(startTime, finishTime) {\\n    var start=60*parseInt(startTime.slice(0,2))+parseInt(startTime.slice(3))\\n    var end=60*parseInt(finishTime.slice(0,2))+parseInt(finishTime.slice(3))\\n    if(start>end) end+=24*60\\n    return Math.floor(end/15) - Math.ceil(start/15)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1284438,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string st, string ft) {\\n        int t1 = stoi(st.substr(0, 2));\\n        int t2 = stoi(ft.substr(0, 2));\\n        int m1 = stoi(st.substr(3, 2));\\n        int m2 = stoi(ft.substr(3, 2));\\n        int cnt = 0;\\n        if(t1 == t2 && m1 == m2)\\n            return cnt;\\n        if(t1 == t2 && m1 < m2)\\n        {\\n            if(m1 > 0 && m1 < 15)\\n                m1 = 15;\\n            else if(m1 > 15 && m1 < 30)\\n                m1 = 30;\\n            else if(m1 > 30 && m1 < 45)\\n                m1 = 45;\\n            else if(m1 > 45 && m1 <= 59)\\n                m1 = 0;\\n            if(m2 > 0 && m2 < 15)\\n                m2 = 0;\\n            else if(m2 > 15 && m2 < 30)\\n                m2 = 15;\\n            else if(m2 > 30 && m2 < 45)\\n                m2 = 30;\\n            else if(m2 > 45 && m2 <= 59)\\n                m2 = 45;\\n            if(m1 < m2)\\n            {\\n                while(m1 < m2)\\n                {\\n                    cnt += 1;\\n                    m1 += 15;\\n                }\\n            }\\n            else\\n                goto a;\\n            return cnt;\\n        }\\n        a:\\n        if(m1 > 0 && m1 < 15)\\n            m1 = 15;\\n        else if(m1 > 15 && m1 < 30)\\n            m1 = 30;\\n        else if(m1 > 30 && m1 < 45)\\n            m1 = 45;\\n        else if(m1 > 45 && m1 <= 59)\\n        {\\n            m1 = 0;\\n            t1 = (t1 + 1) % 24;\\n        }\\n        if(m2 > 0 && m2 < 15)\\n            m2 = 0;\\n        else if(m2 > 15 && m2 < 30)\\n            m2 = 15;\\n        else if(m2 > 30 && m2 < 45)\\n            m2 = 30;\\n        else if(m2 > 45 && m2 <= 59)\\n            m2 = 45;\\n        while(1)\\n        {\\n            if(t1 == t2 && m1 == m2)\\n                return cnt;\\n            cnt += 1;\\n            m1 = (m1 + 15) % 60;\\n            if(m1 == 0)\\n                t1 = (t1 + 1) % 24;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string st, string ft) {\\n        int t1 = stoi(st.substr(0, 2));\\n        int t2 = stoi(ft.substr(0, 2));\\n        int m1 = stoi(st.substr(3, 2));\\n        int m2 = stoi(ft.substr(3, 2));\\n        int cnt = 0;\\n        if(t1 == t2 && m1 == m2)\\n            return cnt;\\n        if(t1 == t2 && m1 < m2)\\n        {\\n            if(m1 > 0 && m1 < 15)\\n                m1 = 15;\\n            else if(m1 > 15 && m1 < 30)\\n                m1 = 30;\\n            else if(m1 > 30 && m1 < 45)\\n                m1 = 45;\\n            else if(m1 > 45 && m1 <= 59)\\n                m1 = 0;\\n            if(m2 > 0 && m2 < 15)\\n                m2 = 0;\\n            else if(m2 > 15 && m2 < 30)\\n                m2 = 15;\\n            else if(m2 > 30 && m2 < 45)\\n                m2 = 30;\\n            else if(m2 > 45 && m2 <= 59)\\n                m2 = 45;\\n            if(m1 < m2)\\n            {\\n                while(m1 < m2)\\n                {\\n                    cnt += 1;\\n                    m1 += 15;\\n                }\\n            }\\n            else\\n                goto a;\\n            return cnt;\\n        }\\n        a:\\n        if(m1 > 0 && m1 < 15)\\n            m1 = 15;\\n        else if(m1 > 15 && m1 < 30)\\n            m1 = 30;\\n        else if(m1 > 30 && m1 < 45)\\n            m1 = 45;\\n        else if(m1 > 45 && m1 <= 59)\\n        {\\n            m1 = 0;\\n            t1 = (t1 + 1) % 24;\\n        }\\n        if(m2 > 0 && m2 < 15)\\n            m2 = 0;\\n        else if(m2 > 15 && m2 < 30)\\n            m2 = 15;\\n        else if(m2 > 30 && m2 < 45)\\n            m2 = 30;\\n        else if(m2 > 45 && m2 <= 59)\\n            m2 = 45;\\n        while(1)\\n        {\\n            if(t1 == t2 && m1 == m2)\\n                return cnt;\\n            cnt += 1;\\n            m1 = (m1 + 15) % 60;\\n            if(m1 == 0)\\n                t1 = (t1 + 1) % 24;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284409,
                "title": "meaningful-variable-names-easy-to-understand-straightforward-and-clean-java",
                "content": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int startHour = Integer.parseInt(startTime.substring(0, 2));\\n        int startMinute = Integer.parseInt(startTime.substring(3, 5));\\n\\n\\n        int finishHour = Integer.parseInt(finishTime.substring(0, 2));\\n        int finishMinute = Integer.parseInt(finishTime.substring(3, 5));\\n\\n        if (finishHour < startHour || finishHour == startHour && finishMinute < startMinute) {\\n            finishHour += 24;\\n        }\\n        int startCount = (int)Math.ceil(startMinute / 15.0);\\n        int finishCount = (int)Math.floor(finishMinute / 15.0);\\n        return Math.max(0, finishHour * 4 + finishCount - (startHour * 4 + startCount));\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int startHour = Integer.parseInt(startTime.substring(0, 2));\\n        int startMinute = Integer.parseInt(startTime.substring(3, 5));\\n\\n\\n        int finishHour = Integer.parseInt(finishTime.substring(0, 2));\\n        int finishMinute = Integer.parseInt(finishTime.substring(3, 5));\\n\\n        if (finishHour < startHour || finishHour == startHour && finishMinute < startMinute) {\\n            finishHour += 24;\\n        }\\n        int startCount = (int)Math.ceil(startMinute / 15.0);\\n        int finishCount = (int)Math.floor(finishMinute / 15.0);\\n        return Math.max(0, finishHour * 4 + finishCount - (startHour * 4 + startCount));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284399,
                "title": "simple-cpp-code",
                "content": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for The Number of Full Rounds You Have Played.\\nMemory Usage: 5.9 MB, less than 57.14% of C++ online submissions for The Number of Full Rounds You Have Played.\\n\\n\\n\\n```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string startTime, string finishTime) {\\n       \\n                                                                                                                  \\n        int firstMin = (startTime[3] - \\'0\\') * 10 + (startTime[4] - \\'0\\');\\n        int firstHr = (startTime[0] - \\'0\\') * 10 + (startTime[1] - \\'0\\');\\n        \\n        int lastMin = (finishTime[3] - \\'0\\') * 10 + (finishTime[4] - \\'0\\');\\n        int lastHr = (finishTime[0] - \\'0\\') * 10 + (finishTime[1] - \\'0\\');\\n                                                    \\n        if(firstMin > 0 && firstMin < 15)\\n            firstMin = 15;\\n        if(firstMin > 15 && firstMin < 30)\\n            firstMin = 30;\\n        if(firstMin > 30 && firstMin < 45)\\n            firstMin = 45;\\n        if(firstMin > 45) {\\n             firstMin = 0; firstHr += 1;\\n             if(firstHr > 23)\\n                 firstHr = 0;\\n        }\\n                                                    \\n                                                    \\n        if(lastMin > 0 && lastMin < 15)\\n              lastMin = 0;  \\n        if(lastMin > 15 && lastMin < 30)\\n            lastMin = 15;\\n        if(lastMin > 30 && lastMin < 45)\\n            lastMin = 30;\\n        if(lastMin > 45)\\n             lastMin = 45;\\n        \\n        int firstTime = firstHr * 60 + firstMin;\\n        int lastTime = lastHr * 60 + lastMin;\\n                                                    \\n        int ans = 0;\\n                                                    \\n        if(firstTime <= lastTime) {\\n            ans = (lastTime - firstTime) / 15;\\n        }\\n        else {\\n            ans += (1440 - firstTime) / 15 + (lastTime) / 15;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string startTime, string finishTime) {\\n       \\n                                                                                                                  \\n        int firstMin = (startTime[3] - \\'0\\') * 10 + (startTime[4] - \\'0\\');\\n        int firstHr = (startTime[0] - \\'0\\') * 10 + (startTime[1] - \\'0\\');\\n        \\n        int lastMin = (finishTime[3] - \\'0\\') * 10 + (finishTime[4] - \\'0\\');\\n        int lastHr = (finishTime[0] - \\'0\\') * 10 + (finishTime[1] - \\'0\\');\\n                                                    \\n        if(firstMin > 0 && firstMin < 15)\\n            firstMin = 15;\\n        if(firstMin > 15 && firstMin < 30)\\n            firstMin = 30;\\n        if(firstMin > 30 && firstMin < 45)\\n            firstMin = 45;\\n        if(firstMin > 45) {\\n             firstMin = 0; firstHr += 1;\\n             if(firstHr > 23)\\n                 firstHr = 0;\\n        }\\n                                                    \\n                                                    \\n        if(lastMin > 0 && lastMin < 15)\\n              lastMin = 0;  \\n        if(lastMin > 15 && lastMin < 30)\\n            lastMin = 15;\\n        if(lastMin > 30 && lastMin < 45)\\n            lastMin = 30;\\n        if(lastMin > 45)\\n             lastMin = 45;\\n        \\n        int firstTime = firstHr * 60 + firstMin;\\n        int lastTime = lastHr * 60 + lastMin;\\n                                                    \\n        int ans = 0;\\n                                                    \\n        if(firstTime <= lastTime) {\\n            ans = (lastTime - firstTime) / 15;\\n        }\\n        else {\\n            ans += (1440 - firstTime) / 15 + (lastTime) / 15;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284208,
                "title": "simple-java-solution",
                "content": "```\\n/**\\n*   1. Convert the time into mins\\n*   2. Adjust the time by 15 mins frame. For StartTime + next 15 Multiplier & For EndTime = last 15 multiplier\\n*   3. If endTime > startTime simply getDifference/15. But if startTime > endTime Ex. 8pm - 2am then (12am - 8pm) + (2am - 12am)\\n*/\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int startHour = Integer.parseInt(startTime.substring(0,2));\\n        int startMins = Integer.parseInt(startTime.substring(3,5));\\n        int endHour = Integer.parseInt(finishTime.substring(0,2));\\n        int endMins = Integer.parseInt(finishTime.substring(3,5));\\n        startMins = (startHour * 60 + startMins);\\n        endMins = (endHour * 60 + endMins);\\n        \\n        if(startMins % 15 != 0){\\n            int lastMultiplier = startMins / 15;\\n            startMins = 15 *(lastMultiplier + 1);\\n        }\\n        if(endMins % 15 != 0){\\n            int lastMultiplier = endMins / 15;\\n            endMins = 15 * lastMultiplier;\\n        }\\n\\n        int totalGap = 0;\\n        if(startMins > endMins){\\n            int tillMidnight = (24 * 60) - startMins;\\n            totalGap =  tillMidnight + endMins;\\n        }else{\\n           totalGap = endMins - startMins;\\n        }\\n        return totalGap / 15;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n*   1. Convert the time into mins\\n*   2. Adjust the time by 15 mins frame. For StartTime + next 15 Multiplier & For EndTime = last 15 multiplier\\n*   3. If endTime > startTime simply getDifference/15. But if startTime > endTime Ex. 8pm - 2am then (12am - 8pm) + (2am - 12am)\\n*/\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int startHour = Integer.parseInt(startTime.substring(0,2));\\n        int startMins = Integer.parseInt(startTime.substring(3,5));\\n        int endHour = Integer.parseInt(finishTime.substring(0,2));\\n        int endMins = Integer.parseInt(finishTime.substring(3,5));\\n        startMins = (startHour * 60 + startMins);\\n        endMins = (endHour * 60 + endMins);\\n        \\n        if(startMins % 15 != 0){\\n            int lastMultiplier = startMins / 15;\\n            startMins = 15 *(lastMultiplier + 1);\\n        }\\n        if(endMins % 15 != 0){\\n            int lastMultiplier = endMins / 15;\\n            endMins = 15 * lastMultiplier;\\n        }\\n\\n        int totalGap = 0;\\n        if(startMins > endMins){\\n            int tillMidnight = (24 * 60) - startMins;\\n            totalGap =  tillMidnight + endMins;\\n        }else{\\n           totalGap = endMins - startMins;\\n        }\\n        return totalGap / 15;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3905638,
                "title": "java-solution-beats-100-java-users-in-time-complexity",
                "content": "# Approach\\n- Changing hours:mins to just mins came to me as my first thought\\n- I then had to take care of the case of playing through to the next day\\n- About the `( A ? B : C )` : It basically means if A is true then B, else C\\n- At first I return the whole `(start % 15 != 0 ? (end/15 - start/15 - 1) : (end/15 - start/15))` instead of assigining it to the var `result`, but there\\'re some cases where the # of full rounds played is actually 0 (e.g. in = `00:43` and out = `00:57`)\\n=> There I had to assign to `result` and return a conditional statement\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        int loginHr = Integer.parseInt(loginTime.substring(0, 2));\\n        int loginMin = Integer.parseInt(loginTime.substring(3));\\n        int logoutHr = Integer.parseInt(logoutTime.substring(0, 2));\\n        int logoutMin = Integer.parseInt(logoutTime.substring(3));\\n        \\n        // converting log time to minutes\\n        int start = loginHr * 60 + loginMin;\\n        int end = logoutHr * 60 + logoutMin;\\n\\n        // case of playing thru to the next day\\n        if (loginHr > logoutHr || (loginHr == logoutHr && loginMin > logoutMin)) {\\n            end += 24 * 60;\\n        }\\n\\n        int result = (start % 15 != 0 ? (end/15 - start/15 - 1) : (end/15 - start/15));\\n        \\n        // result < 0 represents the case where there\\'s no full round played\\n        return (result < 0 ? 0 : result);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        int loginHr = Integer.parseInt(loginTime.substring(0, 2));\\n        int loginMin = Integer.parseInt(loginTime.substring(3));\\n        int logoutHr = Integer.parseInt(logoutTime.substring(0, 2));\\n        int logoutMin = Integer.parseInt(logoutTime.substring(3));\\n        \\n        // converting log time to minutes\\n        int start = loginHr * 60 + loginMin;\\n        int end = logoutHr * 60 + logoutMin;\\n\\n        // case of playing thru to the next day\\n        if (loginHr > logoutHr || (loginHr == logoutHr && loginMin > logoutMin)) {\\n            end += 24 * 60;\\n        }\\n\\n        int result = (start % 15 != 0 ? (end/15 - start/15 - 1) : (end/15 - start/15));\\n        \\n        // result < 0 represents the case where there\\'s no full round played\\n        return (result < 0 ? 0 : result);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3896559,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n    \\n    public int numberOfRounds(String login, String logout) {\\n\\n        int a1 = Integer.valueOf(login.substring(0,2));\\n        int b1 = Integer.valueOf(login.substring(3));\\n        int a2 = Integer.valueOf(logout.substring(0,2));\\n        int b2 = Integer.valueOf(logout.substring(3));\\n\\n        int st = a1*60+b1;\\n        int end = a2*60+b2;\\n\\n        if(st>end) end+=24*60;\\n\\n        int ans = (int)Math.floor(end/15.00)-(int)Math.ceil(st/15.00);\\n\\n        if(ans<0) return 0;\\n        else return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\n    \\n    public int numberOfRounds(String login, String logout) {\\n\\n        int a1 = Integer.valueOf(login.substring(0,2));\\n        int b1 = Integer.valueOf(login.substring(3));\\n        int a2 = Integer.valueOf(logout.substring(0,2));\\n        int b2 = Integer.valueOf(logout.substring(3));\\n\\n        int st = a1*60+b1;\\n        int end = a2*60+b2;\\n\\n        if(st>end) end+=24*60;\\n\\n        int ans = (int)Math.floor(end/15.00)-(int)Math.ceil(st/15.00);\\n\\n        if(ans<0) return 0;\\n        else return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3873553,
                "title": "cpp-solution-using-simple-math",
                "content": "# Intuition\\nconvert the time into minutes and then solve it\\n\\n# Approach\\nafter converting the time into minutes calculate number of rounds as **logout/15 - (login + 14)/15** , (14 is added in login time because round always start from it\\'s next multiple of 15)\\n\\nand also check if above equation gives -1 then simply return 0  because you haven\\'t played any round\\n\\nif logout minutes are less than login minutes then add **24*60** minutes in logout.\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        string hr = loginTime.substr(0,2); //first two characters are hour and last two characters are minutes\\n        string mi = loginTime.substr(3);\\n        int login = stoi(hr)*60 + stoi(mi);\\n\\n        hr = logoutTime.substr(0,2);\\n        mi = logoutTime.substr(3);\\n        int logout = stoi(hr)*60 + stoi(mi);\\n        \\n        if(logout < login){\\n            logout += 24*60;\\n        }\\n        \\n        int ans = logout/15 - (login + 14)/15;\\n        return max(0,ans);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        string hr = loginTime.substr(0,2); //first two characters are hour and last two characters are minutes\\n        string mi = loginTime.substr(3);\\n        int login = stoi(hr)*60 + stoi(mi);\\n\\n        hr = logoutTime.substr(0,2);\\n        mi = logoutTime.substr(3);\\n        int logout = stoi(hr)*60 + stoi(mi);\\n        \\n        if(logout < login){\\n            logout += 24*60;\\n        }\\n        \\n        int ans = logout/15 - (login + 14)/15;\\n        return max(0,ans);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3792067,
                "title": "java-code-o-1-beats-100-percent-users",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n         Integer startHH = Integer.parseInt(startTime.substring(0,2));\\n                 Integer startMM = Integer.parseInt(startTime.substring(3));\\n                         Integer finishHH = Integer.parseInt(finishTime.substring(0,2));\\n                                 Integer finishMM = Integer.parseInt(finishTime.substring(3));\\n\\n           int start = startHH*60 +startMM;\\n                   int end = finishHH*60 +finishMM;\\n        if(start>end){\\n            end+=24*60;\\n        }\\n\\n        if((end-start)<15){\\n            return 0;\\n        }\\n    if(start%15!=0)\\n    start+=15-(start%15);\\n    if(end%15!=0)\\n    end-=(end%15);\\n    return ((end-start)/15);\\n\\n                                        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n         Integer startHH = Integer.parseInt(startTime.substring(0,2));\\n                 Integer startMM = Integer.parseInt(startTime.substring(3));\\n                         Integer finishHH = Integer.parseInt(finishTime.substring(0,2));\\n                                 Integer finishMM = Integer.parseInt(finishTime.substring(3));\\n\\n           int start = startHH*60 +startMM;\\n                   int end = finishHH*60 +finishMM;\\n        if(start>end){\\n            end+=24*60;\\n        }\\n\\n        if((end-start)<15){\\n            return 0;\\n        }\\n    if(start%15!=0)\\n    start+=15-(start%15);\\n    if(end%15!=0)\\n    end-=(end%15);\\n    return ((end-start)/15);\\n\\n                                        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3632104,
                "title": "java-clean-and-readable",
                "content": "```\\nclass Solution {\\n    public int numberOfRounds(String login, String logout) {\\n        int from = toMins(login), to = toMins(logout);\\n        if (from>to) to+=24*60;\\n        if (to-from<15) return 0;\\n        return (roundL(to)-roundR(from))/15;\\n    }\\n    \\n    public int toMins(String s){\\n        var mins = 0;\\n        mins += (s.charAt(0)-\\'0\\')*60*10;\\n        mins += (s.charAt(1)-\\'0\\')*60;\\n        mins += (s.charAt(3)-\\'0\\')*10;\\n        mins += (s.charAt(4)-\\'0\\')*1;\\n        return mins;\\n    }\\n    \\n    public int roundL(int num){\\n        return num%15==0?num:num-num%15;\\n    }\\n    \\n    public int roundR(int num){\\n        return num%15==0?num:num+15-num%15;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String login, String logout) {\\n        int from = toMins(login), to = toMins(logout);\\n        if (from>to) to+=24*60;\\n        if (to-from<15) return 0;\\n        return (roundL(to)-roundR(from))/15;\\n    }\\n    \\n    public int toMins(String s){\\n        var mins = 0;\\n        mins += (s.charAt(0)-\\'0\\')*60*10;\\n        mins += (s.charAt(1)-\\'0\\')*60;\\n        mins += (s.charAt(3)-\\'0\\')*10;\\n        mins += (s.charAt(4)-\\'0\\')*1;\\n        return mins;\\n    }\\n    \\n    public int roundL(int num){\\n        return num%15==0?num:num-num%15;\\n    }\\n    \\n    public int roundR(int num){\\n        return num%15==0?num:num+15-num%15;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3424907,
                "title": "c-math",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        int index1 = loginTime.find(\":\");\\n        int index2 = logoutTime.find(\":\");\\n        int t1 = stoi(loginTime.substr(0, index1)) * 60 + stoi(loginTime.substr(index1 + 1));\\n        int t2 = stoi(logoutTime.substr(0, index1)) * 60 + stoi(logoutTime.substr(index1 + 1));\\n        if(t1 > t2) t2 += 60 * 24;\\n        return max(0, (int)floor(t2 / 15.0) - (int)ceil(t1 / 15.0));\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        int index1 = loginTime.find(\":\");\\n        int index2 = logoutTime.find(\":\");\\n        int t1 = stoi(loginTime.substr(0, index1)) * 60 + stoi(loginTime.substr(index1 + 1));\\n        int t2 = stoi(logoutTime.substr(0, index1)) * 60 + stoi(logoutTime.substr(index1 + 1));\\n        if(t1 > t2) t2 += 60 * 24;\\n        return max(0, (int)floor(t2 / 15.0) - (int)ceil(t1 / 15.0));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3410035,
                "title": "ruby-solution",
                "content": "# Code\\n```\\n# @param {String} login_time\\n# @param {String} logout_time\\n# @return {Integer}\\nSESSION_TIME = 15\\nHOUR_MIN = 60\\nDAY_MIN = 1440\\n\\ndef number_of_rounds(login_time, logout_time)\\n  login_min = to_min(login_time)\\n  login_min_start = to_max_start_time(login_min)\\n  logout_min = to_min(logout_time)\\n  logout_min_start = to_min_start_time(logout_min)\\n  day_part_min = logout_min < login_min ? DAY_MIN - login_min : 0\\n  day_part_min_start = to_min_start_time(day_part_min)\\n  logout_min_start = login_min_start if logout_min_start < login_min_start && day_part_min.zero?\\n  all_times_min = if day_part_min.positive?\\n                    day_part_min_start + logout_min_start\\n                  else\\n                    logout_min_start - login_min_start\\n                  end\\n  all_times_min / SESSION_TIME\\nend\\n\\ndef to_min(str_time)\\n  parts = str_time.split(\\':\\').map(&:to_i)\\n  parts.first * HOUR_MIN + parts.last\\nend\\n\\ndef to_max_start_time(time_min)\\n  parts = time_min % SESSION_TIME\\n  time_min + (parts.zero? ? 0 : (SESSION_TIME - parts))\\nend\\n\\ndef to_min_start_time(time_min)\\n  parts = time_min % SESSION_TIME\\n  time_min - (parts.zero? ? 0 : parts)\\nend\\n\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\n# @param {String} login_time\\n# @param {String} logout_time\\n# @return {Integer}\\nSESSION_TIME = 15\\nHOUR_MIN = 60\\nDAY_MIN = 1440\\n\\ndef number_of_rounds(login_time, logout_time)\\n  login_min = to_min(login_time)\\n  login_min_start = to_max_start_time(login_min)\\n  logout_min = to_min(logout_time)\\n  logout_min_start = to_min_start_time(logout_min)\\n  day_part_min = logout_min < login_min ? DAY_MIN - login_min : 0\\n  day_part_min_start = to_min_start_time(day_part_min)\\n  logout_min_start = login_min_start if logout_min_start < login_min_start && day_part_min.zero?\\n  all_times_min = if day_part_min.positive?\\n                    day_part_min_start + logout_min_start\\n                  else\\n                    logout_min_start - login_min_start\\n                  end\\n  all_times_min / SESSION_TIME\\nend\\n\\ndef to_min(str_time)\\n  parts = str_time.split(\\':\\').map(&:to_i)\\n  parts.first * HOUR_MIN + parts.last\\nend\\n\\ndef to_max_start_time(time_min)\\n  parts = time_min % SESSION_TIME\\n  time_min + (parts.zero? ? 0 : (SESSION_TIME - parts))\\nend\\n\\ndef to_min_start_time(time_min)\\n  parts = time_min % SESSION_TIME\\n  time_min - (parts.zero? ? 0 : parts)\\nend\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3376812,
                "title": "consider-the-length-of-day-as-48-hours-2880-minutes",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nConsider the length of day as 48 hours == 2880 minutes\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        int sh = Integer.parseInt(loginTime.substring(0, 2));\\n        int sm = Integer.parseInt(loginTime.substring(3));\\n\\n        int eh = Integer.parseInt(logoutTime.substring(0, 2));\\n        int em = Integer.parseInt(logoutTime.substring(3));\\n\\n        int startTime = sh * 60 + sm;\\n        int endTime = eh * 60 + em;\\n        endTime = startTime > endTime ? eh * 60 + em + 1440: endTime;\\n        int actualStartTime = startTime % 15 == 0 ? startTime : ((startTime / 15) + 1) * 15;\\n        return (endTime - actualStartTime) / 15;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        int sh = Integer.parseInt(loginTime.substring(0, 2));\\n        int sm = Integer.parseInt(loginTime.substring(3));\\n\\n        int eh = Integer.parseInt(logoutTime.substring(0, 2));\\n        int em = Integer.parseInt(logoutTime.substring(3));\\n\\n        int startTime = sh * 60 + sm;\\n        int endTime = eh * 60 + em;\\n        endTime = startTime > endTime ? eh * 60 + em + 1440: endTime;\\n        int actualStartTime = startTime % 15 == 0 ? startTime : ((startTime / 15) + 1) * 15;\\n        return (endTime - actualStartTime) / 15;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3355362,
                "title": "java-easy-solution-with-explanation",
                "content": "**If you like my solution, Please Upvote!!**\\n\\n# Approach\\n 1. convert start time to minutes\\n 2. convert end time to minutes\\n 3. If  finish time is greater than start time and there difference is less than 15 , for example start time - 00:47 and finish time - 00:57 then we will return 0.\\n 4. If the start time is 9:31 then we will start the count from 9:45\\n 5. add a day (1440 minutes) if end time is before start time\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        \\n        int startHour = Integer.parseInt(loginTime.substring(0,2));\\n        int startMin = Integer.parseInt(loginTime.substring(3));\\n        int finishHour = Integer.parseInt(logoutTime.substring(0,2));\\n        int finishMin = Integer.parseInt(logoutTime.substring(3));\\n\\n        //convert start time to minutes\\n        int totalStartMin = startHour*60+startMin;\\n        //convert finish time to minutes\\n        int totalFinishMin = finishHour*60+finishMin;\\n\\n        int diff = totalFinishMin - totalStartMin;\\n\\n       // If  finish time is greater than start time and there difference is less than 15 , for example start time - 00:47 and finish time - 00:57 then we will return 0.\\n\\n        if(totalFinishMin>totalStartMin && diff<15){\\n              return 0;\\n        }\\n        \\n// If the start time is 9:31 then we will start the count from 9:45\\n         if(totalStartMin%15!=0){\\n             totalStartMin += (15-totalStartMin%15);\\n         }\\n\\n//add a day (1440 minutes) if end time is before start time\\n         if(totalStartMin>totalFinishMin){\\n             totalFinishMin += 24*60;\\n         }\\n         int round = (totalFinishMin - totalStartMin)/15;\\n\\n         return round;\\n\\n\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        \\n        int startHour = Integer.parseInt(loginTime.substring(0,2));\\n        int startMin = Integer.parseInt(loginTime.substring(3));\\n        int finishHour = Integer.parseInt(logoutTime.substring(0,2));\\n        int finishMin = Integer.parseInt(logoutTime.substring(3));\\n\\n        //convert start time to minutes\\n        int totalStartMin = startHour*60+startMin;\\n        //convert finish time to minutes\\n        int totalFinishMin = finishHour*60+finishMin;\\n\\n        int diff = totalFinishMin - totalStartMin;\\n\\n       // If  finish time is greater than start time and there difference is less than 15 , for example start time - 00:47 and finish time - 00:57 then we will return 0.\\n\\n        if(totalFinishMin>totalStartMin && diff<15){\\n              return 0;\\n        }\\n        \\n// If the start time is 9:31 then we will start the count from 9:45\\n         if(totalStartMin%15!=0){\\n             totalStartMin += (15-totalStartMin%15);\\n         }\\n\\n//add a day (1440 minutes) if end time is before start time\\n         if(totalStartMin>totalFinishMin){\\n             totalFinishMin += 24*60;\\n         }\\n         int round = (totalFinishMin - totalStartMin)/15;\\n\\n         return round;\\n\\n\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3338771,
                "title": "c",
                "content": "```\\nint numberOfRounds(char * loginTime, char * logoutTime){\\n    int start = ((loginTime[0]-\\'0\\')* 10 + loginTime[1]- \\'0\\') * 60  + \\\\\\n                (loginTime[3]-\\'0\\')* 10 + loginTime[4] - \\'0\\' ;\\n\\n    int end = ((logoutTime[0]-\\'0\\')* 10 + logoutTime[1] - \\'0\\') * 60  + \\\\\\n                (logoutTime[3]-\\'0\\')* 10 + logoutTime[4] - \\'0\\' ;\\n\\n    if(end < start)\\n        end += 24*60 ;\\n    \\n    start = (start + 14)/15 *15 ;    \\n    end = end/15 * 15 ;\\n    //special case:\\n    //  start : \"00:47\"  ==> 00: 60\\n    //  end   : \"00:57\"  ==> 00: 45\\n    if(end <= start)\\n        return 0 ;\\n    return  (end - start)/15 ;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint numberOfRounds(char * loginTime, char * logoutTime){\\n    int start = ((loginTime[0]-\\'0\\')* 10 + loginTime[1]- \\'0\\') * 60  + \\\\\\n                (loginTime[3]-\\'0\\')* 10 + loginTime[4] - \\'0\\' ;\\n\\n    int end = ((logoutTime[0]-\\'0\\')* 10 + logoutTime[1] - \\'0\\') * 60  + \\\\\\n                (logoutTime[3]-\\'0\\')* 10 + logoutTime[4] - \\'0\\' ;\\n\\n    if(end < start)\\n        end += 24*60 ;\\n    \\n    start = (start + 14)/15 *15 ;    \\n    end = end/15 * 15 ;\\n    //special case:\\n    //  start : \"00:47\"  ==> 00: 60\\n    //  end   : \"00:57\"  ==> 00: 45\\n    if(end <= start)\\n        return 0 ;\\n    return  (end - start)/15 ;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3300411,
                "title": "o-1-complexity-java-100-faster",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        boolean toadd = false;\\n        int start = Integer.parseInt(loginTime.substring(0,2));\\n        int end = Integer.parseInt(logoutTime.substring(0,2));\\n        if(start==end){\\n            start = Integer.parseInt(loginTime.substring(3,5));\\n            end = Integer.parseInt(logoutTime.substring(3,5));\\n            if(start>end){\\n                toadd=true;\\n            }\\n        }\\n        start = Integer.parseInt(loginTime.substring(3,5));\\n        if(start!=15 && start!=45 && start!=30 && start!=0){\\n            if(start<15)    start=15;\\n            else if(start<30)    start=30;\\n            else if(start<45)   start=45;\\n            else    start=60;\\n        }\\n        start+= Integer.parseInt(loginTime.substring(0,2)) * 60;\\n        end = Integer.parseInt(logoutTime.substring(3,5));\\n        if(end!=15 && end!=45 && end!=0 && end!=30){\\n            if(end>45)    end=45;\\n            else if(end>30)    end=30;\\n            else if(end>15)   end=15;\\n            else    end=0;\\n        }\\n        if(toadd)   end+=1440;\\n        else if(Integer.parseInt(loginTime.substring(0,2))>Integer.parseInt(logoutTime.substring(0,2)))    end+=1440;\\n        end+= Integer.parseInt(logoutTime.substring(0,2)) * 60;\\n        return end>start?(end-start)/15:0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        boolean toadd = false;\\n        int start = Integer.parseInt(loginTime.substring(0,2));\\n        int end = Integer.parseInt(logoutTime.substring(0,2));\\n        if(start==end){\\n            start = Integer.parseInt(loginTime.substring(3,5));\\n            end = Integer.parseInt(logoutTime.substring(3,5));\\n            if(start>end){\\n                toadd=true;\\n            }\\n        }\\n        start = Integer.parseInt(loginTime.substring(3,5));\\n        if(start!=15 && start!=45 && start!=30 && start!=0){\\n            if(start<15)    start=15;\\n            else if(start<30)    start=30;\\n            else if(start<45)   start=45;\\n            else    start=60;\\n        }\\n        start+= Integer.parseInt(loginTime.substring(0,2)) * 60;\\n        end = Integer.parseInt(logoutTime.substring(3,5));\\n        if(end!=15 && end!=45 && end!=0 && end!=30){\\n            if(end>45)    end=45;\\n            else if(end>30)    end=30;\\n            else if(end>15)   end=15;\\n            else    end=0;\\n        }\\n        if(toadd)   end+=1440;\\n        else if(Integer.parseInt(loginTime.substring(0,2))>Integer.parseInt(logoutTime.substring(0,2)))    end+=1440;\\n        end+= Integer.parseInt(logoutTime.substring(0,2)) * 60;\\n        return end>start?(end-start)/15:0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3239132,
                "title": "just-a-runnable-solution",
                "content": "# Code\\n```\\nimpl Solution {\\n    pub fn number_of_rounds(login_time: String, logout_time: String) -> i32 {\\n        let login_time = login_time.as_bytes();\\n        let logout_time = logout_time.as_bytes();\\n        let zero = \\'0\\' as i32;\\n        let mut in_time = ((login_time[0] as i32 - zero) * 10 + login_time[1] as i32 - zero) * 60\\n            + (login_time[3] as i32 - zero) * 10\\n            + login_time[4] as i32\\n            - zero;\\n        let mut out_time = ((logout_time[0] as i32 - zero) * 10 + logout_time[1] as i32 - zero) * 60\\n            + (logout_time[3] as i32 - zero) * 10\\n            + logout_time[4] as i32\\n            - zero;\\n        if out_time < in_time {\\n            out_time += 1440;\\n        }\\n        if in_time % 15 != 0 {\\n            let val = in_time / 15;\\n            in_time = (val + 1) * 15;\\n        }\\n        (out_time - in_time) / 15\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn number_of_rounds(login_time: String, logout_time: String) -> i32 {\\n        let login_time = login_time.as_bytes();\\n        let logout_time = logout_time.as_bytes();\\n        let zero = \\'0\\' as i32;\\n        let mut in_time = ((login_time[0] as i32 - zero) * 10 + login_time[1] as i32 - zero) * 60\\n            + (login_time[3] as i32 - zero) * 10\\n            + login_time[4] as i32\\n            - zero;\\n        let mut out_time = ((logout_time[0] as i32 - zero) * 10 + logout_time[1] as i32 - zero) * 60\\n            + (logout_time[3] as i32 - zero) * 10\\n            + logout_time[4] as i32\\n            - zero;\\n        if out_time < in_time {\\n            out_time += 1440;\\n        }\\n        if in_time % 15 != 0 {\\n            let val = in_time / 15;\\n            in_time = (val + 1) * 15;\\n        }\\n        (out_time - in_time) / 15\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3223791,
                "title": "easy-python-d",
                "content": "\\n```\\nclass Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        def time_to_minutes(time_str: str) -> int:\\n            h, m = map(int, time_str.split(\":\"))\\n            return h * 60 + m\\n\\n        login = time_to_minutes(loginTime)\\n        logout = time_to_minutes(logoutTime)\\n\\n        if logout < login:\\n            logout += 60 * 24\\n\\n        res = (logout // 15) - ((login + 14) // 15)\\n        return max(res, 0)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        def time_to_minutes(time_str: str) -> int:\\n            h, m = map(int, time_str.split(\":\"))\\n            return h * 60 + m\\n\\n        login = time_to_minutes(loginTime)\\n        logout = time_to_minutes(logoutTime)\\n\\n        if logout < login:\\n            logout += 60 * 24\\n\\n        res = (logout // 15) - ((login + 14) // 15)\\n        return max(res, 0)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3188273,
                "title": "another-java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n\\n        int sHr = Integer.valueOf(loginTime.substring(0,2));\\n        int sMin = Integer.valueOf(loginTime.substring(3,5));\\n        \\n        int eHr = Integer.valueOf(logoutTime.substring(0,2));\\n        int eMin = Integer.valueOf(logoutTime.substring(3,5));\\n\\n        int start = (sHr*4 + ((sMin%15 == 0) ? sMin/15 : sMin/15+1));\\n        int end = (eHr*4 + eMin/15);\\n\\n        int result = 0;\\n        if(sHr*60+sMin < eHr*60+eMin){\\n            result = Math.max(0, end-start);\\n        } else {\\n            result = 96 - start + end ;\\n        }\\n\\n      return result;        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n\\n        int sHr = Integer.valueOf(loginTime.substring(0,2));\\n        int sMin = Integer.valueOf(loginTime.substring(3,5));\\n        \\n        int eHr = Integer.valueOf(logoutTime.substring(0,2));\\n        int eMin = Integer.valueOf(logoutTime.substring(3,5));\\n\\n        int start = (sHr*4 + ((sMin%15 == 0) ? sMin/15 : sMin/15+1));\\n        int end = (eHr*4 + eMin/15);\\n\\n        int result = 0;\\n        if(sHr*60+sMin < eHr*60+eMin){\\n            result = Math.max(0, end-start);\\n        } else {\\n            result = 96 - start + end ;\\n        }\\n\\n      return result;        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2993041,
                "title": "python-mod-15",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        h, m = loginTime.split(\":\")\\n        login = int(h)*60 + int(m)\\n        h, m = logoutTime.split(\":\")\\n        logout = int(h)*60 + int(m)\\n        res = (logout+(24*60 if logout < login else 0))//15 - (login + 14)//15\\n        return res if res > 0 else 0\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        h, m = loginTime.split(\":\")\\n        login = int(h)*60 + int(m)\\n        h, m = logoutTime.split(\":\")\\n        logout = int(h)*60 + int(m)\\n        res = (logout+(24*60 if logout < login else 0))//15 - (login + 14)//15\\n        return res if res > 0 else 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2992958,
                "title": "python-bruteforce-easy-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        h, m = loginTime.split(\":\")\\n        login = int(h)*60 + int(m)\\n        h, m = logoutTime.split(\":\")\\n        logout = int(h)*60 + int(m)\\n        if logout < login:\\n            logout += 60*24\\n        res = 0\\n        start = False\\n        for i in range(login, logout + 1):\\n            if not i%15:\\n                if start:\\n                    res += 1\\n                else:\\n                    start = True\\n        return res\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        h, m = loginTime.split(\":\")\\n        login = int(h)*60 + int(m)\\n        h, m = logoutTime.split(\":\")\\n        logout = int(h)*60 + int(m)\\n        if logout < login:\\n            logout += 60*24\\n        res = 0\\n        start = False\\n        for i in range(login, logout + 1):\\n            if not i%15:\\n                if start:\\n                    res += 1\\n                else:\\n                    start = True\\n        return res\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2917143,
                "title": "c-simple-basic-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity 0(1)\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:o(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        int lin=0,lout=0;\\n        for(auto x:loginTime){\\n            if(x==\\':\\')\\n                continue;\\n            lin*=10;\\n            lin+=x-\\'0\\';\\n            \\n        }\\n        for(auto x:logoutTime){\\n            if(x==\\':\\')\\n                continue;\\n            lout*=10;\\n            lout+=x-\\'0\\';\\n            \\n        }\\n        if(lin<lout && lout-lin<15){// just need to remember this case\\n            return 0;\\n        }\\n        if(lin%100%15!=0)\\n            lin=lin+15-lin%100%15;\\n        if(lout%100%15!=0)\\n            lout=lout-lout%100%15;\\n        if(lin>lout){\\n            return (24-lin/100+lout/100)*4-(lin%100-lout%100)/15;\\n        }\\n        return (lout/100-lin/100)*4+(lout%100-lin%100)/15;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        int lin=0,lout=0;\\n        for(auto x:loginTime){\\n            if(x==\\':\\')\\n                continue;\\n            lin*=10;\\n            lin+=x-\\'0\\';\\n            \\n        }\\n        for(auto x:logoutTime){\\n            if(x==\\':\\')\\n                continue;\\n            lout*=10;\\n            lout+=x-\\'0\\';\\n            \\n        }\\n        if(lin<lout && lout-lin<15){// just need to remember this case\\n            return 0;\\n        }\\n        if(lin%100%15!=0)\\n            lin=lin+15-lin%100%15;\\n        if(lout%100%15!=0)\\n            lout=lout-lout%100%15;\\n        if(lin>lout){\\n            return (24-lin/100+lout/100)*4-(lin%100-lout%100)/15;\\n        }\\n        return (lout/100-lin/100)*4+(lout%100-lin%100)/15;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2916593,
                "title": "easy-solution-in-java",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        String[] login = loginTime.split(\":\");\\n        int loginHour = Integer.parseInt(login[0]);\\n        int loginMin = Integer.parseInt(login[1]);\\n        String[] logout = logoutTime.split(\":\");\\n        int logoutHour = Integer.parseInt(logout[0]);\\n        int logoutMin = Integer.parseInt(logout[1]);\\n        if(loginHour > logoutHour || (loginHour == logoutHour && loginMin > logoutMin)){\\n            logoutHour += 24;\\n        }\\n        int loginMins = loginHour*60 + loginMin;\\n        int logoutMins = logoutHour*60 + logoutMin;\\n        int c = 0;\\n        for (int i = 0; i <= 48*60; i+=15) {\\n            if(loginMins <= i && logoutMins >= i+15){\\n                c++;\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        String[] login = loginTime.split(\":\");\\n        int loginHour = Integer.parseInt(login[0]);\\n        int loginMin = Integer.parseInt(login[1]);\\n        String[] logout = logoutTime.split(\":\");\\n        int logoutHour = Integer.parseInt(logout[0]);\\n        int logoutMin = Integer.parseInt(logout[1]);\\n        if(loginHour > logoutHour || (loginHour == logoutHour && loginMin > logoutMin)){\\n            logoutHour += 24;\\n        }\\n        int loginMins = loginHour*60 + loginMin;\\n        int logoutMins = logoutHour*60 + logoutMin;\\n        int c = 0;\\n        for (int i = 0; i <= 48*60; i+=15) {\\n            if(loginMins <= i && logoutMins >= i+15){\\n                c++;\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2837069,
                "title": "c-simple-solution",
                "content": "# Complexity\\n- Time complexity:\\n$$o(1)$$\\n\\n- Space complexity:\\n$$o(1)$$\\n\\n# Code\\n```\\npublic class Solution {\\n    public int NumberOfRounds(string loginTime, string logoutTime) {\\n        var t1 = ToInt(loginTime);\\n        var t2 = ToInt(logoutTime);\\n        if (t2 < t1)\\n            t2 += 60*24;\\n        if (t1%15 != 0)\\n            t1 += 15-t1%15;\\n        if (t2 % 15 != 0)\\n            t2 = (t2/15) * 15;\\n        if (t1 > t2)\\n            return 0;\\n        return (t2-t1) / 15;\\n    }\\n\\n    private int ToInt(string time) {\\n        var sp = time.Split(\":\");\\n        return int.Parse(sp[0]) * 60 + int.Parse(sp[1]);\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int NumberOfRounds(string loginTime, string logoutTime) {\\n        var t1 = ToInt(loginTime);\\n        var t2 = ToInt(logoutTime);\\n        if (t2 < t1)\\n            t2 += 60*24;\\n        if (t1%15 != 0)\\n            t1 += 15-t1%15;\\n        if (t2 % 15 != 0)\\n            t2 = (t2/15) * 15;\\n        if (t1 > t2)\\n            return 0;\\n        return (t2-t1) / 15;\\n    }\\n\\n    private int ToInt(string time) {\\n        var sp = time.Split(\":\");\\n        return int.Parse(sp[0]) * 60 + int.Parse(sp[1]);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2795233,
                "title": "number-of-full-rounds-simple-math-o-1",
                "content": "# Approach\\n1. Convert the time string to minutes\\n2. handle logout time for next day\\n3. Calculate number of full rounds\\n    - for login.. Full round starts after next iteration (`ceil`)\\n    - for logout.. Consider last round only if it\\'s full (`floor`)\\n4. Handle edge case - If user logs in and out in the same round\\n4. Return difference between rounds\\n\\nTime Complexity: `O(1)`\\n\\n# Code\\n```py\\nfrom math import ceil\\n\\nclass Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        loginTime = int(loginTime[:2])*60 + int(loginTime[-2:])\\n        logoutTime = int(logoutTime[:2])*60 + int(logoutTime[-2:])\\n\\n        if logoutTime < loginTime:\\n            logoutTime += 24*60\\n\\n        loginRound = ceil(loginTime / 15)\\n        logoutRound = logoutTime // 15\\n\\n        rounds = logoutRound - loginRound\\n\\n        return 0 if rounds < 0 else rounds\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```py\\nfrom math import ceil\\n\\nclass Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        loginTime = int(loginTime[:2])*60 + int(loginTime[-2:])\\n        logoutTime = int(logoutTime[:2])*60 + int(logoutTime[-2:])\\n\\n        if logoutTime < loginTime:\\n            logoutTime += 24*60\\n\\n        loginRound = ceil(loginTime / 15)\\n        logoutRound = logoutTime // 15\\n\\n        rounds = logoutRound - loginRound\\n\\n        return 0 if rounds < 0 else rounds\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2791999,
                "title": "c-short-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string l1, string l2) {\\n        auto fun = [](string t)->int {\\n            return 60*((t[0]-\\'0\\')*10+(t[1]-\\'0\\'))+(t[3]-\\'0\\')*10+(t[4]-\\'0\\');\\n        };\\n        int t1 = fun(l1), t2 = fun(l2);\\n        if(t2 < t1) t2 += 24*60;\\n        return max(0, t2/15-t1/15-(t1%15 != 0));\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string l1, string l2) {\\n        auto fun = [](string t)->int {\\n            return 60*((t[0]-\\'0\\')*10+(t[1]-\\'0\\'))+(t[3]-\\'0\\')*10+(t[4]-\\'0\\');\\n        };\\n        int t1 = fun(l1), t2 = fun(l2);\\n        if(t2 < t1) t2 += 24*60;\\n        return max(0, t2/15-t1/15-(t1%15 != 0));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2716644,
                "title": "the-number-of-full-rounds-you-have-played-2ms",
                "content": "```\\npublic static int numberOfRounds(String loginTime, String logoutTime) {\\n        int startHH = Integer.parseInt((loginTime.substring(0, 2)));\\n        int startMM = Integer.parseInt((loginTime.substring(3)));\\n        int endHH = Integer.parseInt((logoutTime.substring(0, 2)));\\n        int endMM = Integer.parseInt((logoutTime.substring(3)));\\n\\n        int start = startHH * 60 + startMM;\\n        int end = endHH * 60 + endMM;\\n        if (start > end) {\\n            end += 24 * 60;\\n        }\\n        int a = (int)Math.floor(end / 15.00);\\n        int b = (int) Math.ceil(start / 15.00);\\n        return Math.max(a - b, 0);\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic static int numberOfRounds(String loginTime, String logoutTime) {\\n        int startHH = Integer.parseInt((loginTime.substring(0, 2)));\\n        int startMM = Integer.parseInt((loginTime.substring(3)));\\n        int endHH = Integer.parseInt((logoutTime.substring(0, 2)));\\n        int endMM = Integer.parseInt((logoutTime.substring(3)));\\n\\n        int start = startHH * 60 + startMM;\\n        int end = endHH * 60 + endMM;\\n        if (start > end) {\\n            end += 24 * 60;\\n        }\\n        int a = (int)Math.floor(end / 15.00);\\n        int b = (int) Math.ceil(start / 15.00);\\n        return Math.max(a - b, 0);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2689858,
                "title": "python-solution-98-faster",
                "content": "\\tclass Solution:\\n\\t\\tdef numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n\\t\\t\\tts = 60 * int(startTime[:2]) + int(startTime[-2:])\\n\\t\\t\\ttf = 60 * int(finishTime[:2]) + int(finishTime[-2:])\\n\\t\\t\\tif 0 <= tf - ts < 15: return 0 # edge case \\n\\t\\t\\treturn tf//15 - (ts+14)//15 + (ts>tf)*96",
                "solutionTags": [],
                "code": "\\tclass Solution:\\n\\t\\tdef numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n\\t\\t\\tts = 60 * int(startTime[:2]) + int(startTime[-2:])\\n\\t\\t\\ttf = 60 * int(finishTime[:2]) + int(finishTime[-2:])\\n\\t\\t\\tif 0 <= tf - ts < 15: return 0 # edge case \\n\\t\\t\\treturn tf//15 - (ts+14)//15 + (ts>tf)*96",
                "codeTag": "Java"
            },
            {
                "id": 2661680,
                "title": "python-simple-solution",
                "content": "```\\nclass Solution(object):\\n    def numberOfRounds(self, loginTime, logoutTime):\\n        \"\"\"\\n        :type loginTime: str\\n        :type logoutTime: str\\n        :rtype: int\\n        \"\"\"\\n        begin = [0, 15, 30, 45]\\n        login = loginTime.split(\\':\\')\\n        in_hour, in_min = int(login[0]), int(login[1])\\n        logout = logoutTime.split(\\':\\')\\n        out_hour, out_min = int(logout[0]), int(logout[1])\\n        \\n        if in_hour == out_hour:\\n            if out_min > in_min:\\n                if in_min in begin:\\n                    return out_min // 15 - in_min // 15\\n                else:\\n                    return out_min // 15 - in_min // 15 - 1 if out_min // 15 - in_min // 15 - 1 > 0 else 0 \\n            elif out_min < in_min:\\n                return 23 * 4 + (60-in_min) // 15 + out_min // 15\\n        elif in_hour < out_hour:\\n            temp = (60 - in_min) // 15 \\n            return (out_hour - in_hour - 1) * 4 + temp + out_min // 15 \\n        else:\\n            temp = (60 - in_min) // 15  \\n            return (23 - in_hour) * 4 + temp + out_hour * 4 + out_min // 15\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def numberOfRounds(self, loginTime, logoutTime):\\n        \"\"\"\\n        :type loginTime: str\\n        :type logoutTime: str\\n        :rtype: int\\n        \"\"\"\\n        begin = [0, 15, 30, 45]\\n        login = loginTime.split(\\':\\')\\n        in_hour, in_min = int(login[0]), int(login[1])\\n        logout = logoutTime.split(\\':\\')\\n        out_hour, out_min = int(logout[0]), int(logout[1])\\n        \\n        if in_hour == out_hour:\\n            if out_min > in_min:\\n                if in_min in begin:\\n                    return out_min // 15 - in_min // 15\\n                else:\\n                    return out_min // 15 - in_min // 15 - 1 if out_min // 15 - in_min // 15 - 1 > 0 else 0 \\n            elif out_min < in_min:\\n                return 23 * 4 + (60-in_min) // 15 + out_min // 15\\n        elif in_hour < out_hour:\\n            temp = (60 - in_min) // 15 \\n            return (out_hour - in_hour - 1) * 4 + temp + out_min // 15 \\n        else:\\n            temp = (60 - in_min) // 15  \\n            return (23 - in_hour) * 4 + temp + out_hour * 4 + out_min // 15\\n",
                "codeTag": "Java"
            },
            {
                "id": 2639922,
                "title": "python-solution-beat-85-submission",
                "content": "```\\nclass Solution(object):\\n    def numberOfRounds(self, login, logout):\\n        \"\"\"\\n        :type loginTime: str\\n        :type logoutTime: str\\n        :rtype: int\\n        \"\"\"\\n        if int(logout.split(\":\")[0]) * 60 + int(logout.split(\":\")[-1]) > int(login.split(\":\")[0]) * 60 + int(login.split(\":\")[-1]) and (int(logout.split(\":\")[0]) * 60 + int(logout.split(\":\")[-1])) - (int(login.split(\":\")[0]) * 60 + int(login.split(\":\")[-1])) < 15: \\n            return 0\\n        \\n        login_t = ((int(login.split(\":\")[0]) * 60 + int(login.split(\":\")[-1])) // 15 + 1)*15 if (int(login.split(\":\")[0]) * 60 + int(login.split(\":\")[-1])) % 15 !=  0 else (int(login.split(\":\")[0]) * 60 + int(login.split(\":\")[-1])) \\n        logout_t = ((int(logout.split(\":\")[0]) * 60 + int(logout.split(\":\")[-1])) // 15) * 15 \\n        \\n        if int(logout.split(\":\")[0]) * 60 + int(logout.split(\":\")[-1]) < int(login.split(\":\")[0]) * 60 + int(login.split(\":\")[-1]): \\n            logout_t = 24 * 60 + logout_t\\n        times = int((logout_t-login_t)/15)\\n\\n        return times\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def numberOfRounds(self, login, logout):\\n        \"\"\"\\n        :type loginTime: str\\n        :type logoutTime: str\\n        :rtype: int\\n        \"\"\"\\n        if int(logout.split(\":\")[0]) * 60 + int(logout.split(\":\")[-1]) > int(login.split(\":\")[0]) * 60 + int(login.split(\":\")[-1]) and (int(logout.split(\":\")[0]) * 60 + int(logout.split(\":\")[-1])) - (int(login.split(\":\")[0]) * 60 + int(login.split(\":\")[-1])) < 15: \\n            return 0\\n        \\n        login_t = ((int(login.split(\":\")[0]) * 60 + int(login.split(\":\")[-1])) // 15 + 1)*15 if (int(login.split(\":\")[0]) * 60 + int(login.split(\":\")[-1])) % 15 !=  0 else (int(login.split(\":\")[0]) * 60 + int(login.split(\":\")[-1])) \\n        logout_t = ((int(logout.split(\":\")[0]) * 60 + int(logout.split(\":\")[-1])) // 15) * 15 \\n        \\n        if int(logout.split(\":\")[0]) * 60 + int(logout.split(\":\")[-1]) < int(login.split(\":\")[0]) * 60 + int(login.split(\":\")[-1]): \\n            logout_t = 24 * 60 + logout_t\\n        times = int((logout_t-login_t)/15)\\n\\n        return times\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2631895,
                "title": "100-faster-c-submission",
                "content": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        \\n        string s=\"\";\\n        s+=loginTime[0];\\n        s+=loginTime[1];\\n        int sh=stoi(s);\\n        s=\"\";\\n        s+=loginTime[3];\\n        s+=loginTime[4];\\n        int sm=stoi(s);\\n        s=\"\";\\n        s+=logoutTime[0];\\n        s+=logoutTime[1];\\n        int eh=stoi(s);\\n        s=\"\";\\n        s+=logoutTime[3];\\n        s+=logoutTime[4];\\n        int em=stoi(s);\\n        \\n        int ans=0;\\n        if(eh==sh)\\n        {\\n            if(sm<=em)\\n            {\\n                if(sm>0 && sm<=15)\\n                {\\n                    sm=15;\\n                }\\n                else if(sm>15 && sm<=30)\\n                {\\n                    sm=30;\\n                }\\n                else if(sm>30 && sm<=45){\\n                    sm=45;\\n                }\\n                else if(sm>45){\\n                    sm=60;\\n                }\\n                int dif=em-sm;\\n                if(dif>=0)\\n                {\\n                    ans+=floor(dif/15);\\n                }\\n            }\\n            else{\\n                \\n                if(sm>0 && sm<=15)\\n                {\\n                    sm=15;\\n                }\\n                else if(sm>15 && sm<=30)\\n                {\\n                    sm=30;\\n                }\\n                else if(sm>30 && sm<=45){\\n                    sm=45;\\n                }\\n                else{\\n                    sm=60;\\n                }\\n               ans+=floor((60-sm)/15);\\n                ans+=floor(em/15);\\n                \\n                ans+=23*4;\\n            }\\n            return ans;\\n        }\\n        else{\\n            \\n            if(eh<sh)\\n            {\\n              int h=24-sh-1+eh;\\n              ans+=h*4;\\n              ans+=floor((60-sm)/15);\\n              ans+=floor(em/15);\\n            }\\n            else{\\n                \\n                int h=eh-sh-1;\\n                ans+=h*4;\\n                ans+=floor((60-sm)/15);\\n                ans+=floor(em/15);\\n                \\n            }\\n            \\n        }\\n        \\n        return ans;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        \\n        string s=\"\";\\n        s+=loginTime[0];\\n        s+=loginTime[1];\\n        int sh=stoi(s);\\n        s=\"\";\\n        s+=loginTime[3];\\n        s+=loginTime[4];\\n        int sm=stoi(s);\\n        s=\"\";\\n        s+=logoutTime[0];\\n        s+=logoutTime[1];\\n        int eh=stoi(s);\\n        s=\"\";\\n        s+=logoutTime[3];\\n        s+=logoutTime[4];\\n        int em=stoi(s);\\n        \\n        int ans=0;\\n        if(eh==sh)\\n        {\\n            if(sm<=em)\\n            {\\n                if(sm>0 && sm<=15)\\n                {\\n                    sm=15;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2497281,
                "title": "python-4-line-simple-solution",
                "content": "```\\ndef numberOfRounds(self, t1: str, t2: str) -> int:\\n\\tt1 = int(t1[:2])*60+int(t1[3:])\\n\\tt2 = int(t2[:2])*60+int(t2[3:])\\n\\tt2 += int(t1>t2)*1440\\n\\treturn max(0, t2//15-ceil(t1/15))\\n```",
                "solutionTags": [],
                "code": "```\\ndef numberOfRounds(self, t1: str, t2: str) -> int:\\n\\tt1 = int(t1[:2])*60+int(t1[3:])\\n\\tt2 = int(t2[:2])*60+int(t2[3:])\\n\\tt2 += int(t1>t2)*1440\\n\\treturn max(0, t2//15-ceil(t1/15))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2415582,
                "title": "python3-easy-to-understand-no-math-magic",
                "content": "```\\nclass Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        h1, m1 = map(int, loginTime.split(\\':\\'))\\n        h2, m2 = map(int, logoutTime.split(\\':\\'))\\n        \\n        # Corner case like 23:47 and 23:57\\n        if 0 <= (h2*60 + m2 - (h1*60 + m1)) < 15:\\n            return 0\\n        \\n        while m1 % 15:\\n            m1 += 1\\n        \\n        if m1 == 60:\\n            m1 = 0\\n            h1 = (h1 + 1) % 24\\n     \\n        while m2 % 15:\\n            m2 -= 1\\n        \\n        minutes_played = (h2-h1) * 60 + (m2-m1)\\n        if minutes_played < 0:\\n            minutes_played += 24 * 60 \\n\\n        return minutes_played // 15\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        h1, m1 = map(int, loginTime.split(\\':\\'))\\n        h2, m2 = map(int, logoutTime.split(\\':\\'))\\n        \\n        # Corner case like 23:47 and 23:57\\n        if 0 <= (h2*60 + m2 - (h1*60 + m1)) < 15:\\n            return 0\\n        \\n        while m1 % 15:\\n            m1 += 1\\n        \\n        if m1 == 60:\\n            m1 = 0\\n            h1 = (h1 + 1) % 24\\n     \\n        while m2 % 15:\\n            m2 -= 1\\n        \\n        minutes_played = (h2-h1) * 60 + (m2-m1)\\n        if minutes_played < 0:\\n            minutes_played += 24 * 60 \\n\\n        return minutes_played // 15\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2384918,
                "title": "c-modulo-arithmetics",
                "content": "We can turn string into corresponding minutes (which is now `int`) and then use *modulo arithmetics*:\\n\\n```\\npublic class Solution {\\n    \\n    private static int ToMinutes(string time) {\\n        var items = time.Split(\\':\\');\\n        \\n        return int.Parse(items[0]) * 60 + int.Parse(items[1]);\\n    }\\n    \\n    public int NumberOfRounds(string startTime, string finishTime) {\\n        int t1 = ToMinutes(startTime);\\n        int t2 = ToMinutes(finishTime);\\n        \\n        if (t1 > t2)\\n            t2 += 24 * 60;\\n        \\n        return Math.Clamp(t2 / 15 - (t1 / 15 + Math.Clamp(t1 % 15, 0, 1)), 0, int.MaxValue);\\n    }\\n    \\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    \\n    private static int ToMinutes(string time) {\\n        var items = time.Split(\\':\\');\\n        \\n        return int.Parse(items[0]) * 60 + int.Parse(items[1]);\\n    }\\n    \\n    public int NumberOfRounds(string startTime, string finishTime) {\\n        int t1 = ToMinutes(startTime);\\n        int t2 = ToMinutes(finishTime);\\n        \\n        if (t1 > t2)\\n            t2 += 24 * 60;\\n        \\n        return Math.Clamp(t2 / 15 - (t1 / 15 + Math.Clamp(t1 % 15, 0, 1)), 0, int.MaxValue);\\n    }\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2341013,
                "title": "c-maths-easy-0ms",
                "content": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string it, string ot) {\\n        int sh=(it[0]-\\'0\\')*10+(it[1]-\\'0\\');\\n        int sm=(it[3]-\\'0\\')*10+(it[4]-\\'0\\');\\n        int eh=(ot[0]-\\'0\\')*10+(ot[1]-\\'0\\');\\n        int em=(ot[3]-\\'0\\')*10+(ot[4]-\\'0\\');\\n        int min=0;\\n         if(it>ot){\\n            min=(24-abs(eh-sh))*60+em-sm;\\n         }\\n        else{\\n            min=(eh-sh)*60+em-sm;\\n        }\\n        int x=(((sm/15)+1)*15)-sm;\\n        min-=((x%15)+(em%15));\\n        if(min<0) return 0;\\n        return min/15;\\n        \\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string it, string ot) {\\n        int sh=(it[0]-\\'0\\')*10+(it[1]-\\'0\\');\\n        int sm=(it[3]-\\'0\\')*10+(it[4]-\\'0\\');\\n        int eh=(ot[0]-\\'0\\')*10+(ot[1]-\\'0\\');\\n        int em=(ot[3]-\\'0\\')*10+(ot[4]-\\'0\\');\\n        int min=0;\\n         if(it>ot){\\n            min=(24-abs(eh-sh))*60+em-sm;\\n         }\\n        else{\\n            min=(eh-sh)*60+em-sm;\\n        }\\n        int x=(((sm/15)+1)*15)-sm;\\n        min-=((x%15)+(em%15));\\n        if(min<0) return 0;\\n        return min/15;\\n        \\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2340949,
                "title": "c-simple-passes-all-test-cases-2022",
                "content": "```\\nclass Solution {\\npublic:\\n    int d[4] = {0,15,30,45};\\n    int solve(int a,int f)\\n    {\\n        if(f==0)\\n        {\\n            int ans = 0;\\n            for(int k = 0;k<4;k++)\\n            {\\n                if(a<=d[k])ans++;\\n            }\\n            return ans;\\n        }\\n        else\\n        {\\n            int ans = 0;\\n            for(int k = 0;k<4;k++)\\n            {\\n                if(d[k]<=a)\\n                    ans++;\\n            }\\n            return ans-1;\\n        }\\n    }\\n    \\n    int getval(int s,int e)\\n    {\\n        int ans = 0;\\n        for(int i = s;i<=e;i++)\\n        {\\n            if(i==0 or i==15 or i==30 or i==45)\\n                ans++;\\n        }\\n        if(ans==0)return 0;\\n        return ans - 1;\\n    }\\n    int numberOfRounds(string lit, string lot) {\\n        string str1 = lit.substr(0,2);\\n        string str2 = lot.substr(0,2);\\n        \\n        int s = stoi(str1);\\n        int e = stoi(str2);\\n        \\n        string fstart_lit = lit.substr(3);\\n        string fend_lot = lot.substr(3);\\n        int fsl = stoi(fstart_lit);\\n        int fse = stoi(fend_lot);\\n        \\n        // cout<<str1<<\" \"<<str2<<\" \"<<s<<\" \"<<e<<endl;\\n        int t1 = 0, t2 = 0;\\n        if(e==0)\\n            e = 24;\\n        if(s==0)\\n            s = 24;\\n        t1 = s*60 + fsl;\\n        t2 = e*60 + fse;\\n        int ans = 0;\\n        if(s==e and t1<t2)\\n        {\\n            cout<<\"case 1 \"<<endl;\\n            string start_lit = lit.substr(3);\\n            string end_lot = lot.substr(3);\\n            int sl = stoi(start_lit);\\n            int se = stoi(end_lot);\\n            ans = getval(sl,se);\\n            return ans;\\n        }\\n        else if(s<e)\\n        {\\n            s++;\\n            ans += (e-s)*4;\\n            string start_lit = lit.substr(3);\\n            string end_lot = lot.substr(3);\\n            int sl = stoi(start_lit);\\n            int se = stoi(end_lot);\\n            ans += solve(sl,0) + solve(se,1);\\n            return ans;\\n        }\\n        else\\n        {\\n            cout<<\"here\";\\n            if(s==23)\\n                s = 24;\\n            else s++;\\n            ans += (24 + e - s)*4;\\n            string start_lit = lit.substr(3);\\n            string end_lot = lot.substr(3);\\n            int sl = stoi(start_lit);\\n            int se = stoi(end_lot);\\n            ans += solve(sl,0) + solve(se,1);\\n            return ans;\\n        }\\n        return ans;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int d[4] = {0,15,30,45};\\n    int solve(int a,int f)\\n    {\\n        if(f==0)\\n        {\\n            int ans = 0;\\n            for(int k = 0;k<4;k++)\\n            {\\n                if(a<=d[k])ans++;\\n            }\\n            return ans;\\n        }\\n        else\\n        {\\n            int ans = 0;\\n            for(int k = 0;k<4;k++)\\n            {\\n                if(d[k]<=a)\\n                    ans++;\\n            }\\n            return ans-1;\\n        }\\n    }\\n    \\n    int getval(int s,int e)\\n    {\\n        int ans = 0;\\n        for(int i = s;i<=e;i++)\\n        {\\n            if(i==0 or i==15 or i==30 or i==45)\\n                ans++;\\n        }\\n        if(ans==0)return 0;\\n        return ans - 1;\\n    }\\n    int numberOfRounds(string lit, string lot) {\\n        string str1 = lit.substr(0,2);\\n        string str2 = lot.substr(0,2);\\n        \\n        int s = stoi(str1);\\n        int e = stoi(str2);\\n        \\n        string fstart_lit = lit.substr(3);\\n        string fend_lot = lot.substr(3);\\n        int fsl = stoi(fstart_lit);\\n        int fse = stoi(fend_lot);\\n        \\n        // cout<<str1<<\" \"<<str2<<\" \"<<s<<\" \"<<e<<endl;\\n        int t1 = 0, t2 = 0;\\n        if(e==0)\\n            e = 24;\\n        if(s==0)\\n            s = 24;\\n        t1 = s*60 + fsl;\\n        t2 = e*60 + fse;\\n        int ans = 0;\\n        if(s==e and t1<t2)\\n        {\\n            cout<<\"case 1 \"<<endl;\\n            string start_lit = lit.substr(3);\\n            string end_lot = lot.substr(3);\\n            int sl = stoi(start_lit);\\n            int se = stoi(end_lot);\\n            ans = getval(sl,se);\\n            return ans;\\n        }\\n        else if(s<e)\\n        {\\n            s++;\\n            ans += (e-s)*4;\\n            string start_lit = lit.substr(3);\\n            string end_lot = lot.substr(3);\\n            int sl = stoi(start_lit);\\n            int se = stoi(end_lot);\\n            ans += solve(sl,0) + solve(se,1);\\n            return ans;\\n        }\\n        else\\n        {\\n            cout<<\"here\";\\n            if(s==23)\\n                s = 24;\\n            else s++;\\n            ans += (24 + e - s)*4;\\n            string start_lit = lit.substr(3);\\n            string end_lot = lot.substr(3);\\n            int sl = stoi(start_lit);\\n            int se = stoi(end_lot);\\n            ans += solve(sl,0) + solve(se,1);\\n            return ans;\\n        }\\n        return ans;\\n    }\\n};\\n\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2303895,
                "title": "intuitive-simulation",
                "content": "```\\nclass Solution {\\n    \\n    static constexpr int kRoundInDay = 60 * 24 / 15;\\n    \\n    struct TimePoint {\\n        int hour;\\n        int minutes;\\n        friend bool operator<(const TimePoint& lhs, const TimePoint& rhs) {\\n            return lhs.hour == rhs.hour ? lhs.minutes < rhs.minutes : lhs.hour < rhs.hour;\\n        }\\n        friend bool operator==(const TimePoint& lhs, const TimePoint& rhs) {\\n            return lhs.hour == rhs.hour and lhs.minutes == rhs.minutes;\\n        }\\n        int total_minutes() { return hour * 60 + minutes; }\\n        int in_round() { return (total_minutes() + 14) / 15; }\\n        int out_round() { return (total_minutes()) / 15; }\\n    };\\n    \\n    TimePoint make_time_point(string time) {\\n        int pos_of_comma = time.find(\\':\\');\\n        int hour = stoi(time.substr(0, pos_of_comma));\\n        int minute = stoi(time.substr(pos_of_comma + 1));\\n        return {hour, minute};\\n    }\\n    \\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        auto login = make_time_point(loginTime);\\n        auto logout = make_time_point(logoutTime);\\n        auto in_round = login.in_round();\\n        auto out_round = logout.out_round();\\n        if (login < logout) {\\n            return max(0, out_round - in_round);\\n        } else if (login == logout) {\\n            return 0;\\n        } else {\\n            return max(0, kRoundInDay - in_round + out_round);\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n    \\n    static constexpr int kRoundInDay = 60 * 24 / 15;\\n    \\n    struct TimePoint {\\n        int hour;\\n        int minutes;\\n        friend bool operator<(const TimePoint& lhs, const TimePoint& rhs) {\\n            return lhs.hour == rhs.hour ? lhs.minutes < rhs.minutes : lhs.hour < rhs.hour;\\n        }\\n        friend bool operator==(const TimePoint& lhs, const TimePoint& rhs) {\\n            return lhs.hour == rhs.hour and lhs.minutes == rhs.minutes;\\n        }\\n        int total_minutes() { return hour * 60 + minutes; }\\n        int in_round() { return (total_minutes() + 14) / 15; }\\n        int out_round() { return (total_minutes()) / 15; }\\n    };\\n    \\n    TimePoint make_time_point(string time) {\\n        int pos_of_comma = time.find(\\':\\');\\n        int hour = stoi(time.substr(0, pos_of_comma));\\n        int minute = stoi(time.substr(pos_of_comma + 1));\\n        return {hour, minute};\\n    }\\n    \\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        auto login = make_time_point(loginTime);\\n        auto logout = make_time_point(logoutTime);\\n        auto in_round = login.in_round();\\n        auto out_round = logout.out_round();\\n        if (login < logout) {\\n            return max(0, out_round - in_round);\\n        } else if (login == logout) {\\n            return 0;\\n        } else {\\n            return max(0, kRoundInDay - in_round + out_round);\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2281458,
                "title": "java-maths",
                "content": "```\\nclass Solution {\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        String[] ins = loginTime.split(\":\");\\n        int inhrs = Integer.parseInt(ins[0]);\\n        int inmins = Integer.parseInt(ins[1]);\\n        int totalInMins = inhrs * 60 + inmins;\\n        \\n        String[] outs = logoutTime.split(\":\");\\n        int outhrs = Integer.parseInt(outs[0]);\\n        int outmins = Integer.parseInt(outs[1]);\\n        int totalOutMins = outhrs * 60 + outmins;\\n        \\n        if(totalInMins == totalOutMins) {\\n            return 0;\\n        } else if(totalInMins > totalOutMins) {\\n            totalOutMins += 1440;\\n        }\\n        \\n        int rTotalInMins = totalInMins % 15;\\n        int rTotalOutMins = totalOutMins % 15;\\n        if(rTotalInMins > 0) {\\n            totalInMins += (15 - rTotalInMins);\\n        }\\n        if(rTotalOutMins > 0) {\\n            totalOutMins -= rTotalOutMins;\\n        }\\n        if(totalInMins >= totalOutMins) {\\n            return 0;\\n        } else {\\n            return (totalOutMins - totalInMins) / 15;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        String[] ins = loginTime.split(\":\");\\n        int inhrs = Integer.parseInt(ins[0]);\\n        int inmins = Integer.parseInt(ins[1]);\\n        int totalInMins = inhrs * 60 + inmins;\\n        \\n        String[] outs = logoutTime.split(\":\");\\n        int outhrs = Integer.parseInt(outs[0]);\\n        int outmins = Integer.parseInt(outs[1]);\\n        int totalOutMins = outhrs * 60 + outmins;\\n        \\n        if(totalInMins == totalOutMins) {\\n            return 0;\\n        } else if(totalInMins > totalOutMins) {\\n            totalOutMins += 1440;\\n        }\\n        \\n        int rTotalInMins = totalInMins % 15;\\n        int rTotalOutMins = totalOutMins % 15;\\n        if(rTotalInMins > 0) {\\n            totalInMins += (15 - rTotalInMins);\\n        }\\n        if(rTotalOutMins > 0) {\\n            totalOutMins -= rTotalOutMins;\\n        }\\n        if(totalInMins >= totalOutMins) {\\n            return 0;\\n        } else {\\n            return (totalOutMins - totalInMins) / 15;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2265883,
                "title": "java-easy-understand",
                "content": "class Solution {\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        String[] logIn = loginTime.split(\":\");\\n        String[] logOut = logoutTime.split(\":\");\\n        int loginhr = Integer.valueOf(logIn[0]);\\n        int loginmin = Integer.valueOf(logIn[1]);\\n        int logouthr = Integer.valueOf(logOut[0]);\\n        int logoutmin = Integer.valueOf(logOut[1]);\\n        int res=0;\\n        if(logouthr>loginhr){\\n        \\n            res=(60-loginmin)/15+logoutmin/15 + (logouthr-loginhr-1)*4;\\n        }\\n        else if(logouthr==loginhr && logoutmin>loginmin){\\n            res =Math.max(logoutmin/15-(loginmin%15==0? loginmin/15:(loginmin/15+1)),0);\\n        }\\n        else{\\n            res = (60-loginmin)/15 + (24-1-loginhr)*4 + logoutmin/15 + logouthr*4;\\n        }\\n        return res;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        String[] logIn = loginTime.split(\":\");\\n        String[] logOut = logoutTime.split(\":\");\\n        int loginhr = Integer.valueOf(logIn[0]);\\n        int loginmin = Integer.valueOf(logIn[1]);\\n        int logouthr = Integer.valueOf(logOut[0]);\\n        int logoutmin = Integer.valueOf(logOut[1]);\\n        int res=0;\\n        if(logouthr>loginhr){\\n        \\n            res=(60-loginmin)/15+logoutmin/15 + (logouthr-loginhr-1)*4;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2188482,
                "title": "c-clear-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string l, string lo) {\\n        int a=stoi(l.substr(0,2));\\n        int b=stoi(l.substr(3,2));\\n        int c=stoi(lo.substr(0,2));\\n        int d=stoi(lo.substr(3,2));\\n        if(a==c && b<d)\\n        { \\n            //If hours are same  and login<logout same we need to find intervals in between\\n            if(b>0 && b%15!=0)\\n            {//Make b to start of next interval if this interval is already disturbed\\n                b=b+(15-b%15);\\n            }\\n            \\n            return ((d-b)/15)>0?((d-b)/15):0;\\n        }\\n        if(b)\\n        {\\n            //count intervals beween a& a+1 hrs and store them in b & increase a to a+1\\n            a++;\\n             b=(60-b)/15;\\n        }\\n       \\n        d=d/15;//count intervals after c hrs and store stem in d\\n        \\n        int a1=0;\\n        int a2=0;\\n        if(lo<l)\\n        {\\n            return (((24-a)+c)*4)+b+d;//simply find difference in number of hrs each hr contains 4 full intervals & add b and d\\n        }\\n        else if(lo>l)\\n        {\\n            \\n            return (c-a)*4+b+d;////simply find difference in number of hrs each hr contains 4 full intervals & add b and d\\n        }\\n        else \\n        {\\n            return 0;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string l, string lo) {\\n        int a=stoi(l.substr(0,2));\\n        int b=stoi(l.substr(3,2));\\n        int c=stoi(lo.substr(0,2));\\n        int d=stoi(lo.substr(3,2));\\n        if(a==c && b<d)\\n        { \\n            //If hours are same  and login<logout same we need to find intervals in between\\n            if(b>0 && b%15!=0)\\n            {//Make b to start of next interval if this interval is already disturbed\\n                b=b+(15-b%15);\\n            }\\n            \\n            return ((d-b)/15)>0?((d-b)/15):0;\\n        }\\n        if(b)\\n        {\\n            //count intervals beween a& a+1 hrs and store them in b & increase a to a+1\\n            a++;\\n             b=(60-b)/15;\\n        }\\n       \\n        d=d/15;//count intervals after c hrs and store stem in d\\n        \\n        int a1=0;\\n        int a2=0;\\n        if(lo<l)\\n        {\\n            return (((24-a)+c)*4)+b+d;//simply find difference in number of hrs each hr contains 4 full intervals & add b and d\\n        }\\n        else if(lo>l)\\n        {\\n            \\n            return (c-a)*4+b+d;////simply find difference in number of hrs each hr contains 4 full intervals & add b and d\\n        }\\n        else \\n        {\\n            return 0;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2137228,
                "title": "clear-easy-to-understand-c-solution",
                "content": "Was coding for 20 minutes, submitted one time, accepted.\\n\\nIf login hour != logout hour, divide hours into login hour + hours in-between + logout hour and calculate rounds for each stage, then sum the result.\\nIf login hour == logout hour, iterate possible results.\\n\\n```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        if (logoutTime == \"00:00\") logoutTime = \"24:00\";\\n        \\n        // Login / Logout Hour\\n        int inh = getHour(loginTime), outh = getHour(logoutTime);\\n        // Login / Logout Minute\\n        int inm = getMinute(loginTime), outm = getMinute(logoutTime);\\n        \\n        if (inh == outh)\\n            if (inm <= outm) {\\n                // Iterate all possible rounds.\\n                int res = 0;\\n                if (inm <= 0 && outm >= 15) res++;\\n                if (inm <= 15 && outm >= 30) res++;\\n                if (inm <= 30 && outm >= 45) res++;\\n                return res;\\n            } else {\\n                // In this case, you played for more than 23 hours.\\n                return 23 * 4 + getRoundsTo60(outm) + getRoundsFrom0(inm);\\n            }\\n        \\n        int res = getRoundsTo60(outm) + getRoundsFrom0(inm);\\n        if (inh < outh) {\\n            res += 4 * (outh - inh - 1);\\n        } else {\\n            // In this case, outh > inh.\\n            if (loginTime == \"00:00\")   // Be careful with corner case here.\\n                res += 4 * outh;\\n            else\\n                res += 4 * (outh + 24 - inh - 1); \\n        }\\n        return res;\\n    }\\n    \\n    // Get how many rounds you play from minute 0 to current minute in an hour.\\n    int getRoundsFrom0(int minute){\\n        if (minute == 0) return 4;\\n        if (minute >= 1 && minute <= 15) return 3;\\n        if (minute >= 16 && minute <= 30) return 2;\\n        if (minute >= 31 && minute <= 45) return 1;\\n        return 0;\\n    }\\n    \\n    // Get how many rounds you play from current minute to minute 60 in an hour.\\n    int getRoundsTo60(int minute){\\n        if (minute >= 0 && minute <= 14) return 0;\\n        if (minute >= 15 && minute <= 29) return 1;\\n        if (minute >= 30 && minute <= 44) return 2;\\n        if (minute >= 45 && minute <= 59) return 3;\\n        return 4;\\n    }\\n    \\n    int getHour(string time) {\\n        return stoi(time.substr(0, 2));\\n    }\\n    \\n    int getMinute(string time) {\\n        return stoi(time.substr(3, 2));\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        if (logoutTime == \"00:00\") logoutTime = \"24:00\";\\n        \\n        // Login / Logout Hour\\n        int inh = getHour(loginTime), outh = getHour(logoutTime);\\n        // Login / Logout Minute\\n        int inm = getMinute(loginTime), outm = getMinute(logoutTime);\\n        \\n        if (inh == outh)\\n            if (inm <= outm) {\\n                // Iterate all possible rounds.\\n                int res = 0;\\n                if (inm <= 0 && outm >= 15) res++;\\n                if (inm <= 15 && outm >= 30) res++;\\n                if (inm <= 30 && outm >= 45) res++;\\n                return res;\\n            } else {\\n                // In this case, you played for more than 23 hours.\\n                return 23 * 4 + getRoundsTo60(outm) + getRoundsFrom0(inm);\\n            }\\n        \\n        int res = getRoundsTo60(outm) + getRoundsFrom0(inm);\\n        if (inh < outh) {\\n            res += 4 * (outh - inh - 1);\\n        } else {\\n            // In this case, outh > inh.\\n            if (loginTime == \"00:00\")   // Be careful with corner case here.\\n                res += 4 * outh;\\n            else\\n                res += 4 * (outh + 24 - inh - 1); \\n        }\\n        return res;\\n    }\\n    \\n    // Get how many rounds you play from minute 0 to current minute in an hour.\\n    int getRoundsFrom0(int minute){\\n        if (minute == 0) return 4;\\n        if (minute >= 1 && minute <= 15) return 3;\\n        if (minute >= 16 && minute <= 30) return 2;\\n        if (minute >= 31 && minute <= 45) return 1;\\n        return 0;\\n    }\\n    \\n    // Get how many rounds you play from current minute to minute 60 in an hour.\\n    int getRoundsTo60(int minute){\\n        if (minute >= 0 && minute <= 14) return 0;\\n        if (minute >= 15 && minute <= 29) return 1;\\n        if (minute >= 30 && minute <= 44) return 2;\\n        if (minute >= 45 && minute <= 59) return 3;\\n        return 4;\\n    }\\n    \\n    int getHour(string time) {\\n        return stoi(time.substr(0, 2));\\n    }\\n    \\n    int getMinute(string time) {\\n        return stoi(time.substr(3, 2));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2125589,
                "title": "c-solution-faster-than-100",
                "content": "```\\n#define ll long long\\n#define vb vector<bool>\\n#define vi vector<int>\\n#define vl vector<long long>\\n#define vvb vector<vector<bool>>\\n#define vvi vector<vector<int>>\\n#define vvl vector<vector<long long>>\\n#define pii pair<int,int>\\n#define all(i) i.begin(),i.end()\\n#define f(i,s,e) for(int i = s; i < e; i++)\\n#define b(i,s,e) for(int i = s; i >= e; i--)\\ninline int getMid(int i,int j) { return i+(j-i)/2; }\\n\\nclass Solution {\\npublic:\\n    int parse(string t) {\\n        return stoi(t.substr(0,2))*60+stoi(t.substr(3,2));\\n    }\\n\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        int login = parse(loginTime), logout = parse(logoutTime);\\n        int _login = login; login += (15-login%15)%15;\\n        if(_login < logout and login <= logout) return (logout-login)/15;\\n        else if(_login < logout and login > logout) return 0;\\n        return (24*60-login+logout)/15;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n#define ll long long\\n#define vb vector<bool>\\n#define vi vector<int>\\n#define vl vector<long long>\\n#define vvb vector<vector<bool>>\\n#define vvi vector<vector<int>>\\n#define vvl vector<vector<long long>>\\n#define pii pair<int,int>\\n#define all(i) i.begin(),i.end()\\n#define f(i,s,e) for(int i = s; i < e; i++)\\n#define b(i,s,e) for(int i = s; i >= e; i--)\\ninline int getMid(int i,int j) { return i+(j-i)/2; }\\n\\nclass Solution {\\npublic:\\n    int parse(string t) {\\n        return stoi(t.substr(0,2))*60+stoi(t.substr(3,2));\\n    }\\n\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        int login = parse(loginTime), logout = parse(logoutTime);\\n        int _login = login; login += (15-login%15)%15;\\n        if(_login < logout and login <= logout) return (logout-login)/15;\\n        else if(_login < logout and login > logout) return 0;\\n        return (24*60-login+logout)/15;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2119894,
                "title": "python-100-space-efficient-90-time-efficient",
                "content": "Can anyone can suggest better logic to avoid multiple if-else in the case when the hour is same,edge cases for same hour are really frustrating..\\n\\nMy Explanation:\\nFirstly I divided my code into 3 cases:\\n1) when the loginHr = logoutHr\\n2) when,the loginHr>logoutHr\\n3) when, the loginHr<logoutHr\\n and just solved each cases,\\n If you have doubt please comment down,will reply soon.\\n```\\nclass Solution(object):\\n    def numberOfRounds(self, loginTime, logoutTime):\\n        \"\"\"\\n        :type loginTime: str\\n        :type logoutTime: str\\n        :rtype: int\\n        \"\"\"\\n        \\n        loginHr = int(loginTime[:2])\\n        loginMin = int(loginTime[-2:])\\n        logoutHr = int(logoutTime[:2])\\n        logoutMin = int(logoutTime[-2:])\\n        count_ = 0\\n        if((loginHr == logoutHr)):\\n            if(loginMin>logoutMin):\\n                count_+=92\\n                count_ += ((60-loginMin)//15 + (logoutMin//15))\\n            else:\\n                print(loginMin)\\n                if(loginMin == 0):\\n                    count_+=logoutMin//15\\n                if(0<loginMin <=15):\\n                    count_+=(logoutMin-15)//15\\n                elif(15<loginMin<=30):\\n                    count_+=(logoutMin-30)//15\\n                elif(30<loginMin<=45):\\n                    count_+=(logoutMin-45)//15\\n                else:\\n                    pass\\n                if(count_<0):\\n                    count_ = 0\\n                \\n              \\n        elif(loginHr>logoutHr):\\n            count_+=((24-loginHr-1)+logoutHr)*4\\n            count_+=((60-loginMin)//15+(logoutMin//15))\\n            pass\\n        else:\\n            count_+=(logoutHr-loginHr-1)*4\\n            count_+=((60-loginMin)//15+(logoutMin//15))\\n        return count_\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def numberOfRounds(self, loginTime, logoutTime):\\n        \"\"\"\\n        :type loginTime: str\\n        :type logoutTime: str\\n        :rtype: int\\n        \"\"\"\\n        \\n        loginHr = int(loginTime[:2])\\n        loginMin = int(loginTime[-2:])\\n        logoutHr = int(logoutTime[:2])\\n        logoutMin = int(logoutTime[-2:])\\n        count_ = 0\\n        if((loginHr == logoutHr)):\\n            if(loginMin>logoutMin):\\n                count_+=92\\n                count_ += ((60-loginMin)//15 + (logoutMin//15))\\n            else:\\n                print(loginMin)\\n                if(loginMin == 0):\\n                    count_+=logoutMin//15\\n                if(0<loginMin <=15):\\n                    count_+=(logoutMin-15)//15\\n                elif(15<loginMin<=30):\\n                    count_+=(logoutMin-30)//15\\n                elif(30<loginMin<=45):\\n                    count_+=(logoutMin-45)//15\\n                else:\\n                    pass\\n                if(count_<0):\\n                    count_ = 0\\n                \\n              \\n        elif(loginHr>logoutHr):\\n            count_+=((24-loginHr-1)+logoutHr)*4\\n            count_+=((60-loginMin)//15+(logoutMin//15))\\n            pass\\n        else:\\n            count_+=(logoutHr-loginHr-1)*4\\n            count_+=((60-loginMin)//15+(logoutMin//15))\\n        return count_\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2075810,
                "title": "to-minutes",
                "content": "```\\n    int numberOfRounds(string B, string E)\\n    {\\n        int b = ((B[0]-\\'0\\')*10+B[1]-\\'0\\')*60+(B[3]-\\'0\\')*10+B[4]-\\'0\\',\\n            e = ((E[0]-\\'0\\')*10+E[1]-\\'0\\')*60+(E[3]-\\'0\\')*10+E[4]-\\'0\\';\\n        return max(0, e/15-b/15-!!(b%15)+(e<=b)*96);\\n    }\\n```\\n`96=24*60/15`\\n`!!(b%15)=bool((b%15)>0)`",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n    int numberOfRounds(string B, string E)\\n    {\\n        int b = ((B[0]-\\'0\\')*10+B[1]-\\'0\\')*60+(B[3]-\\'0\\')*10+B[4]-\\'0\\',\\n            e = ((E[0]-\\'0\\')*10+E[1]-\\'0\\')*60+(E[3]-\\'0\\')*10+E[4]-\\'0\\';\\n        return max(0, e/15-b/15-!!(b%15)+(e<=b)*96);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2000395,
                "title": "java-logic-simple-intuitive-o-1",
                "content": "class Solution {\\n    \\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        Integer loginHour = Integer.parseInt(loginTime.split(\":\")[0]);\\n        Integer loginMinutes = Integer.parseInt(loginTime.split(\":\")[1]);\\n        \\n        Integer logoutHour = Integer.parseInt(logoutTime.split(\":\")[0]);\\n        Integer logoutMinutes = Integer.parseInt(logoutTime.split(\":\")[1]);\\n        \\n        Integer hoursPlayed;\\n        if(loginHour > logoutHour) {\\n            hoursPlayed = 24 - loginHour + logoutHour;\\n        } \\n        else if(loginHour == logoutHour && loginMinutes > logoutMinutes) {\\n            hoursPlayed = 24;\\n        }\\n        else {\\n            hoursPlayed = logoutHour - loginHour;\\n        }\\n        System.out.println(hoursPlayed);\\n        Integer minusTheseGames = 0;\\n        if(loginMinutes > 0) {\\n            if(loginMinutes <= 15){\\n               minusTheseGames = 1; \\n            } else if(loginMinutes <= 30){\\n               minusTheseGames = 2; \\n            } else if(loginMinutes <= 45){\\n               minusTheseGames = 3; \\n            } else {\\n                minusTheseGames = 4; \\n            }\\n            System.out.println(minusTheseGames);\\n        }\\n        \\n        Integer addTheseGames = 0;\\n        if(logoutMinutes > 0) {\\n            if(logoutMinutes >= 45){\\n               addThisGames = 3; \\n            } else if(logoutMinutes >= 30){\\n               addTheseGames = 2; \\n            } else if(logoutMinutes >= 15){\\n               addTheseGames = 1; \\n            }\\n            System.out.println(addTheseGames);\\n        }\\n        \\n        Integer playerPlayed = hoursPlayed * 4 + addTheseGames - minusTheseGames;\\n        return playerPlayed< 0? 0: playerPlayed;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    \\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        Integer loginHour = Integer.parseInt(loginTime.split(\":\")[0]);\\n        Integer loginMinutes = Integer.parseInt(loginTime.split(\":\")[1]);\\n        \\n        Integer logoutHour = Integer.parseInt(logoutTime.split(\":\")[0]);\\n        Integer logoutMinutes = Integer.parseInt(logoutTime.split(\":\")[1]);\\n        \\n        Integer hoursPlayed;\\n        if(loginHour > logoutHour) {\\n            hoursPlayed = 24 - loginHour + logoutHour;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1995910,
                "title": "clear-python-floor-ceil-approach",
                "content": "```class Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        start_total = self.cal_time_total(loginTime)\\n        end_total = self.cal_time_total(logoutTime)\\n        if start_total > end_total:\\n            return self.numberOfRounds(loginTime, \\'24:00\\') + self.numberOfRounds(\\'00:00\\', logoutTime)\\n        res = floor(end_total / 15.0) - ceil(start_total / 15.0)\\n        if res < 0:\\n            return 0\\n        else:\\n            return res\\n        \\n    def cal_time_total(self, time: str) -> int:\\n        hour, minute = [int(x) for x in time.split(\":\")]\\n        return 60 * hour + minute\\n        \\n        \\n  ```",
                "solutionTags": [],
                "code": "```class Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        start_total = self.cal_time_total(loginTime)\\n        end_total = self.cal_time_total(logoutTime)\\n        if start_total > end_total:\\n            return self.numberOfRounds(loginTime, \\'24:00\\') + self.numberOfRounds(\\'00:00\\', logoutTime)\\n        res = floor(end_total / 15.0) - ceil(start_total / 15.0)\\n        if res < 0:\\n            return 0\\n        else:\\n            return res\\n        \\n    def cal_time_total(self, time: str) -> int:\\n        hour, minute = [int(x) for x in time.split(\":\")]\\n        return 60 * hour + minute\\n        \\n        \\n  ```",
                "codeTag": "Java"
            },
            {
                "id": 1992249,
                "title": "clean-code-java",
                "content": "The general idea is simple. We want to calculate three things.\\n1. When the user actually started their first game\\n2. When the user actually ended their last game\\n3. Was there a time shift involved\\n\\nTo calculate the first two things, we create the `gameStartTime` and `gameEndTime` methods. There are a couple of edge cases in the `gameStartTime` method. \\n* What happens when the user logs in at 2:46?\\n\\t* We shift the start time to 3:00 (update hr along with min)\\n* What happens when user logs in at 2:00 or 2:01?\\n\\t* We make no shifts if it is exactly at 2:00 (no updates)\\n\\t* We shift the start time to 2:15 if user started at 2:01 (update only min)\\n\\nTo handle time shift, we use two different cases.\\n* What happens if the user started at 2:46 and stopped at 2:55?\\n\\t* We use a boolean flag to check if the original start time was before original end time.\\n\\t* This is critical because if we first readjust the start time to 3:00 and end time to 2:45 we end up incorrectly assuming the user played for nearly 24 hours.\\n\\t\\n* What happens if user played from 23:00 to 2:00?\\n\\t* We first check if we need to update the boolean flag (which is yes in this case).\\n\\t* We then add 1440 (24* 60) min to the end time before computing the games played.\\n\\nIn general, this question is all about handling edge cases that come from time shift, and when the game actually started and ended. Space and time is both constant.\\n\\n```\\nclass Solution {\\n    boolean updateTimeFlag = false;\\n    \\n    public int numberOfRounds(String loginTime, String logoutTime) {        \\n        // login hours and min\\n        int loginHr = Integer.valueOf(loginTime.split(\":\")[0]);\\n        int loginMin = Integer.valueOf(loginTime.split(\":\")[1]);\\n        \\n        // logout hours and min\\n        int logoutHr = Integer.valueOf(logoutTime.split(\":\")[0]);\\n        int logoutMin = Integer.valueOf(logoutTime.split(\":\")[1]);\\n        \\n        // check if logout happened after login\\n        if (loginHr <= logoutHr && loginMin < logoutMin) \\n\\t\\t\\tupdateTimeFlag = false;\\n        else \\n\\t\\t\\tupdateTimeFlag = true;\\n        \\n        // calculate when the first game actually starts\\n        int[] beginTimes = gameStartTime(loginHr, loginMin);\\n        loginHr = beginTimes[0];\\n        loginMin = beginTimes[1];\\n        \\n        // calculate when the last game ends\\n        logoutMin = gameEndTime(logoutMin);\\n        \\n        return gamesPlayed(loginHr, loginMin, logoutHr, logoutMin);\\n    }\\n    \\n    private int[] gameStartTime(int loginHr, int loginMin) {\\n        if (loginMin > 0 && loginMin <= 15) return new int[]{loginHr, 15};\\n        if (loginMin > 15 && loginMin <= 30) return new int[]{loginHr, 30};\\n        if (loginMin > 30 && loginMin <= 45) return new int[]{loginHr, 45};\\n        if (loginMin > 45 && loginMin <= 60) return new int[]{loginHr + 1, 0};\\n        return new int[]{loginHr, 0};\\n    }\\n    \\n    private int gameEndTime(int logoutMin) {\\n        if (logoutMin >= 0 && logoutMin < 15) return 0;\\n        if (logoutMin >= 15 && logoutMin < 30) return 15;\\n        if (logoutMin >= 30 && logoutMin < 45) return 30;\\n        \\n        return 45;\\n    }\\n    \\n    private int gamesPlayed(int startHr, int startMin, int endHr, int endMin) {\\n        int startTime = startHr * 60 + startMin;\\n        int endTime = endHr * 60 + endMin;\\n        \\n        // update the time only if the end happens after start\\n        if (updateTimeFlag && startTime > endTime) endTime += 1440; \\n        \\n        return (endTime - startTime)/15 >= 0 ? (endTime - startTime)/15 : 0;\\n    }\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    boolean updateTimeFlag = false;\\n    \\n    public int numberOfRounds(String loginTime, String logoutTime) {        \\n        // login hours and min\\n        int loginHr = Integer.valueOf(loginTime.split(\":\")[0]);\\n        int loginMin = Integer.valueOf(loginTime.split(\":\")[1]);\\n        \\n        // logout hours and min\\n        int logoutHr = Integer.valueOf(logoutTime.split(\":\")[0]);\\n        int logoutMin = Integer.valueOf(logoutTime.split(\":\")[1]);\\n        \\n        // check if logout happened after login\\n        if (loginHr <= logoutHr && loginMin < logoutMin) \\n\\t\\t\\tupdateTimeFlag = false;\\n        else \\n\\t\\t\\tupdateTimeFlag = true;\\n        \\n        // calculate when the first game actually starts\\n        int[] beginTimes = gameStartTime(loginHr, loginMin);\\n        loginHr = beginTimes[0];\\n        loginMin = beginTimes[1];\\n        \\n        // calculate when the last game ends\\n        logoutMin = gameEndTime(logoutMin);\\n        \\n        return gamesPlayed(loginHr, loginMin, logoutHr, logoutMin);\\n    }\\n    \\n    private int[] gameStartTime(int loginHr, int loginMin) {\\n        if (loginMin > 0 && loginMin <= 15) return new int[]{loginHr, 15};\\n        if (loginMin > 15 && loginMin <= 30) return new int[]{loginHr, 30};\\n        if (loginMin > 30 && loginMin <= 45) return new int[]{loginHr, 45};\\n        if (loginMin > 45 && loginMin <= 60) return new int[]{loginHr + 1, 0};\\n        return new int[]{loginHr, 0};\\n    }\\n    \\n    private int gameEndTime(int logoutMin) {\\n        if (logoutMin >= 0 && logoutMin < 15) return 0;\\n        if (logoutMin >= 15 && logoutMin < 30) return 15;\\n        if (logoutMin >= 30 && logoutMin < 45) return 30;\\n        \\n        return 45;\\n    }\\n    \\n    private int gamesPlayed(int startHr, int startMin, int endHr, int endMin) {\\n        int startTime = startHr * 60 + startMin;\\n        int endTime = endHr * 60 + endMin;\\n        \\n        // update the time only if the end happens after start\\n        if (updateTimeFlag && startTime > endTime) endTime += 1440; \\n        \\n        return (endTime - startTime)/15 >= 0 ? (endTime - startTime)/15 : 0;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1961114,
                "title": "python-easy-solution",
                "content": "```\\nclass Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        def calc(start):\\n            if str(start).endswith(\"45\"):\\n                return round(start + .55, 2)\\n            return round(start + 0.15, 2)\\n\\n        # playtime start values\\n        play_time = [\"00\", \"15\", \"30\", \"45\"]\\n        login = list(map(int, loginTime.split(\":\")))\\n        # calculate div mod of login minutes\\n        div = divmod(login[1], 15)\\n        # calculate the start minutes for star time\\n        start = play_time[div[0]] if div[1] == 0 else play_time[(div[0]+1)%4]\\n        start_time = float(f\"{login[0]}.{start}\")\\n        \\n        logout_time = float(logoutTime.replace(\":\", \".\"))\\n\\n        res = 0\\n        # calculate the logout time by checking if logout value if less than login value then increase time by 24\\n        logout_time = float(logout_time + 24.00) if logout_time < float(loginTime.replace(\":\", \".\")) else logout_time\\n        \\n        # if start minutes are 0 and divmod value was greater then 0 so we need to increase the hour as well\\n        if start == \"00\" and div[1] != 0:\\n            start_time += 1.00\\n\\n        while start_time < logout_time:\\n\\n            start_time = calc(start_time)\\n            if start_time <= logout_time:\\n                res += 1\\n            \\n        return res\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        def calc(start):\\n            if str(start).endswith(\"45\"):\\n                return round(start + .55, 2)\\n            return round(start + 0.15, 2)\\n\\n        # playtime start values\\n        play_time = [\"00\", \"15\", \"30\", \"45\"]\\n        login = list(map(int, loginTime.split(\":\")))\\n        # calculate div mod of login minutes\\n        div = divmod(login[1], 15)\\n        # calculate the start minutes for star time\\n        start = play_time[div[0]] if div[1] == 0 else play_time[(div[0]+1)%4]\\n        start_time = float(f\"{login[0]}.{start}\")\\n        \\n        logout_time = float(logoutTime.replace(\":\", \".\"))\\n\\n        res = 0\\n        # calculate the logout time by checking if logout value if less than login value then increase time by 24\\n        logout_time = float(logout_time + 24.00) if logout_time < float(loginTime.replace(\":\", \".\")) else logout_time\\n        \\n        # if start minutes are 0 and divmod value was greater then 0 so we need to increase the hour as well\\n        if start == \"00\" and div[1] != 0:\\n            start_time += 1.00\\n\\n        while start_time < logout_time:\\n\\n            start_time = calc(start_time)\\n            if start_time <= logout_time:\\n                res += 1\\n            \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1943552,
                "title": "javascript-solution",
                "content": "```\\nvar numberOfRounds = function(loginTime, logoutTime) {\\n    const start = toMins(loginTime);\\n    const end = toMins(logoutTime);\\n\\n    let roundStart = Math.ceil(start / 15);\\n    let roundEnd = Math.floor(end / 15);\\n\\n    if (start < end) {\\n        return Math.max(0, roundEnd - roundStart); \\n    } \\n    else {\\n        roundEnd += 96;\\n        return roundEnd - roundStart;\\n    }\\n\\n\\n    function toMins(timeStr) {\\n        const [hh, mm] = timeStr.split(\":\");\\n\\n        let totMins = 0;\\n\\n        totMins += parseInt(hh) * 60;\\n        totMins += parseInt(mm);\\n\\n        return totMins;\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar numberOfRounds = function(loginTime, logoutTime) {\\n    const start = toMins(loginTime);\\n    const end = toMins(logoutTime);\\n\\n    let roundStart = Math.ceil(start / 15);\\n    let roundEnd = Math.floor(end / 15);\\n\\n    if (start < end) {\\n        return Math.max(0, roundEnd - roundStart); \\n    } \\n    else {\\n        roundEnd += 96;\\n        return roundEnd - roundStart;\\n    }\\n\\n\\n    function toMins(timeStr) {\\n        const [hh, mm] = timeStr.split(\":\");\\n\\n        let totMins = 0;\\n\\n        totMins += parseInt(hh) * 60;\\n        totMins += parseInt(mm);\\n\\n        return totMins;\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1913804,
                "title": "python3-simple-o-1-multiples-of-15",
                "content": "* just get the start and end times in minutes (don\\'t forget to add 24*60 to end if start>end) and return max(0,n-1) where n=multiples of 15 in the range(start,end+1)\\n```\\nclass Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        start=int(loginTime[:2])*60+int(loginTime[3:])\\n        end=int(logoutTime[:2])*60+int(logoutTime[3:])\\n        if start>end:\\n            end+=24*60\\n        res=-1\\n        for i in range(start,end+1):\\n            if i%15==0: res+=1\\n        return max(res,0)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        start=int(loginTime[:2])*60+int(loginTime[3:])\\n        end=int(logoutTime[:2])*60+int(logoutTime[3:])\\n        if start>end:\\n            end+=24*60\\n        res=-1\\n        for i in range(start,end+1):\\n            if i%15==0: res+=1\\n        return max(res,0)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1892105,
                "title": "the-number-of-full-rounds-you-have-played",
                "content": "```\\nclass Solution \\n{\\n public:\\n    int numberOfRounds(string st, string fi) \\n    {\\n        int h1=0, m1=0, h2=0, m2=0, ans=0;\\n\\t\\th1 = st[0]-\\'0\\';\\n        h1 = h1*10 + (st[1]-\\'0\\');\\n        m1 = st[3]-\\'0\\';\\n        m1 = m1*10 + (st[4]-\\'0\\');\\n        h2 = fi[0]-\\'0\\';\\n        h2 = h2*10 + (fi[1]-\\'0\\');\\n        m2 = fi[3]-\\'0\\';\\n        m2 = m2*10 + (fi[4]-\\'0\\');\\n\\t\\tif(h1>h2 || h1==h2 && m1>m2) \\n            h2+=24;        \\n        if(h1==h2)\\n        {\\n            if(m1==0)\\n                return m2/15;\\n            else if(m1>0 && m1<=15)\\n                return (m2-15)/15;\\n            else if(m1>15 && m1<=30)\\n                return (m2-30)/15;\\n            else if(m1>30 && m1<=45)\\n                return (m2-45)/15;\\n            else\\n                return 0;\\n            \\n        }\\n        int x=(60-m1)/15;\\n        int y=(h2-h1-1)*4;\\n        int z=m2/15;\\n        return x+y+z;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution \\n{\\n public:\\n    int numberOfRounds(string st, string fi) \\n    {\\n        int h1=0, m1=0, h2=0, m2=0, ans=0;\\n\\t\\th1 = st[0]-\\'0\\';\\n        h1 = h1*10 + (st[1]-\\'0\\');\\n        m1 = st[3]-\\'0\\';\\n        m1 = m1*10 + (st[4]-\\'0\\');\\n        h2 = fi[0]-\\'0\\';\\n        h2 = h2*10 + (fi[1]-\\'0\\');\\n        m2 = fi[3]-\\'0\\';\\n        m2 = m2*10 + (fi[4]-\\'0\\');\\n\\t\\tif(h1>h2 || h1==h2 && m1>m2) \\n            h2+=24;        \\n        if(h1==h2)\\n        {\\n            if(m1==0)\\n                return m2/15;\\n            else if(m1>0 && m1<=15)\\n                return (m2-15)/15;\\n            else if(m1>15 && m1<=30)\\n                return (m2-30)/15;\\n            else if(m1>30 && m1<=45)\\n                return (m2-45)/15;\\n            else\\n                return 0;\\n            \\n        }\\n        int x=(60-m1)/15;\\n        int y=(h2-h1-1)*4;\\n        int z=m2/15;\\n        return x+y+z;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1859070,
                "title": "java-clean-modular-code-tc-o-1",
                "content": "* I have first try to convert time representation from String to int. This time is represented in hour:min format which I have serialize/convert to same unit. \\n* Here by Serialize, means converting hours & minutes into same units.\\n* I have try to find out the upper bound of login and lower bound of logout with respect to ROUND_INTERVAL.\\nIn the end, just calculate FullRounds.\\n   \\n```\\n    \\n    private final int MID_NIGHT_END = 1440;\\n    private final int MID_NIGHT_START = 0;\\n    private final int ROUND_INTERVAL = 15;\\n    \\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        int loginSerializeTime = serializeTime(loginTime);\\n        int logoutSerializeTime = serializeTime(logoutTime);\\n        if (logoutSerializeTime - 14 < loginSerializeTime && logoutSerializeTime > loginSerializeTime) return 0; \\n        loginSerializeTime = maskSerializeTime(loginSerializeTime, 14); \\n        logoutSerializeTime = maskSerializeTime(logoutSerializeTime, 0); \\n        if (loginSerializeTime == logoutSerializeTime) return 0;\\n        if (loginSerializeTime > logoutSerializeTime + 14) {\\n            return calculateFullRounds(loginSerializeTime, MID_NIGHT_END) + calculateFullRounds(MID_NIGHT_START, logoutSerializeTime);\\n        }\\n        return calculateFullRounds(loginSerializeTime, logoutSerializeTime);\\n    }\\n    \\n    private int maskSerializeTime(int serializeTime, int mask) {\\n        return (serializeTime + mask) / ROUND_INTERVAL * ROUND_INTERVAL;\\n    }\\n   \\n    private int serializeTime(String time) {\\n        return Integer.parseInt(time.substring(0, 2)) * 60 + Integer.parseInt(time.substring(3, 5));\\n    }\\n    \\n    private int calculateFullRounds(int login, int logout) {\\n        return (logout - login) / ROUND_INTERVAL;\\n    }\\n    \\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n    \\n    private final int MID_NIGHT_END = 1440;\\n    private final int MID_NIGHT_START = 0;\\n    private final int ROUND_INTERVAL = 15;\\n    \\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        int loginSerializeTime = serializeTime(loginTime);\\n        int logoutSerializeTime = serializeTime(logoutTime);\\n        if (logoutSerializeTime - 14 < loginSerializeTime && logoutSerializeTime > loginSerializeTime) return 0; \\n        loginSerializeTime = maskSerializeTime(loginSerializeTime, 14); \\n        logoutSerializeTime = maskSerializeTime(logoutSerializeTime, 0); \\n        if (loginSerializeTime == logoutSerializeTime) return 0;\\n        if (loginSerializeTime > logoutSerializeTime + 14) {\\n            return calculateFullRounds(loginSerializeTime, MID_NIGHT_END) + calculateFullRounds(MID_NIGHT_START, logoutSerializeTime);\\n        }\\n        return calculateFullRounds(loginSerializeTime, logoutSerializeTime);\\n    }\\n    \\n    private int maskSerializeTime(int serializeTime, int mask) {\\n        return (serializeTime + mask) / ROUND_INTERVAL * ROUND_INTERVAL;\\n    }\\n   \\n    private int serializeTime(String time) {\\n        return Integer.parseInt(time.substring(0, 2)) * 60 + Integer.parseInt(time.substring(3, 5));\\n    }\\n    \\n    private int calculateFullRounds(int login, int logout) {\\n        return (logout - login) / ROUND_INTERVAL;\\n    }\\n    \\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1853831,
                "title": "c-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        int hi = atoi(loginTime.substr(0,2).c_str());\\n        int mi = atoi(loginTime.substr(3,2).c_str());\\n        int ho = atoi(logoutTime.substr(0,2).c_str());\\n        int mo = atoi(logoutTime.substr(3,2).c_str());\\n        int ans = 0; \\n        if (hi>ho || (hi == ho && mi>mo))\\n            ho += 24; \\n        ans += max((ho - hi - 1) * 4, 0);\\n        if (hi != ho)\\n            ans += (60-mi)/15 + mo/15;\\n        else\\n            ans += (mo - (mi/15+ ((mi%15)==0?0:1))*15)/15;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        int hi = atoi(loginTime.substr(0,2).c_str());\\n        int mi = atoi(loginTime.substr(3,2).c_str());\\n        int ho = atoi(logoutTime.substr(0,2).c_str());\\n        int mo = atoi(logoutTime.substr(3,2).c_str());\\n        int ans = 0; \\n        if (hi>ho || (hi == ho && mi>mo))\\n            ho += 24; \\n        ans += max((ho - hi - 1) * 4, 0);\\n        if (hi != ho)\\n            ans += (60-mi)/15 + mo/15;\\n        else\\n            ans += (mo - (mi/15+ ((mi%15)==0?0:1))*15)/15;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1844701,
                "title": "python-solution",
                "content": "```\\nclass Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        loginMin, loginHour = int(loginTime.split(\\':\\')[1]), int(loginTime.split(\\':\\')[0])\\n        logoutMin, logoutHour = int(logoutTime.split(\\':\\')[1]), int(logoutTime.split(\\':\\')[0])\\n        \\n        startRound = loginHour*4 + loginMin//15 + (loginMin%15 > 0)*1\\n        endRound = logoutHour*4 + logoutMin//15\\n        \\n        if endRound >= startRound:\\n            return endRound - startRound\\n        else:\\n            if loginHour == logoutHour and logoutMin > loginMin:\\n                return 0\\n            return 96 - startRound + endRound",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:\\n        loginMin, loginHour = int(loginTime.split(\\':\\')[1]), int(loginTime.split(\\':\\')[0])\\n        logoutMin, logoutHour = int(logoutTime.split(\\':\\')[1]), int(logoutTime.split(\\':\\')[0])\\n        \\n        startRound = loginHour*4 + loginMin//15 + (loginMin%15 > 0)*1\\n        endRound = logoutHour*4 + logoutMin//15\\n        \\n        if endRound >= startRound:\\n            return endRound - startRound\\n        else:\\n            if loginHour == logoutHour and logoutMin > loginMin:\\n                return 0\\n            return 96 - startRound + endRound",
                "codeTag": "Java"
            },
            {
                "id": 1808412,
                "title": "the-number-of-full-rounds-you-have-played",
                "content": "int numberOfRounds(string loginTime, string logoutTime) {\\n        \\n        int res=0;\\n        \\n        int time[]={0,15,30,45};\\n        \\n        int firstTime=stoi(loginTime.substr(3,2));\\n        int i;\\n        for( i=0;i<4;i++){\\n            if(time[i]>=firstTime) break;\\n        }\\n        res=4-i;\\n       cout<<res<<endl;\\n        if(stoi(loginTime.substr(0,2))>stoi(logoutTime.substr(0,2))||(stoi(loginTime.substr(0,2))==stoi(logoutTime.substr(0,2))&&stoi(loginTime.substr(3,2))>stoi(logoutTime.substr(3,2)))){\\n            res+=(24-stoi(loginTime.substr(0,2))-1)*4;\\n             cout<<res<<endl;\\n            res+=(stoi(logoutTime.substr(0,2)))*4;\\n            cout<<res<<endl;\\n            // cout<<\"inside this\";\\n        }\\n        else{\\n            res+=4*(stoi(logoutTime.substr(0,2))-stoi(loginTime.substr(0,2))-1);           \\n        }\\n        firstTime=stoi(logoutTime.substr(3,2));\\n       \\n        res+=firstTime/15;\\n        return res==-1?0:res;\\n    }",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "int numberOfRounds(string loginTime, string logoutTime) {\\n        \\n        int res=0;\\n        \\n        int time[]={0,15,30,45};\\n        \\n        int firstTime=stoi(loginTime.substr(3,2));\\n        int i;\\n        for( i=0;i<4;i++){\\n            if(time[i]>=firstTime) break;\\n        }\\n        res=4-i;\\n       cout<<res<<endl;\\n        if(stoi(loginTime.substr(0,2))>stoi(logoutTime.substr(0,2))||(stoi(loginTime.substr(0,2))==stoi(logoutTime.substr(0,2))&&stoi(loginTime.substr(3,2))>stoi(logoutTime.substr(3,2)))){\\n            res+=(24-stoi(loginTime.substr(0,2))-1)*4;\\n             cout<<res<<endl;\\n            res+=(stoi(logoutTime.substr(0,2)))*4;\\n            cout<<res<<endl;\\n            // cout<<\"inside this\";\\n        }\\n        else{\\n            res+=4*(stoi(logoutTime.substr(0,2))-stoi(loginTime.substr(0,2))-1);           \\n        }\\n        firstTime=stoi(logoutTime.substr(3,2));\\n       \\n        res+=firstTime/15;\\n        return res==-1?0:res;\\n    }",
                "codeTag": "C++"
            },
            {
                "id": 1792595,
                "title": "typescript-100-faster-straight-forward-solution",
                "content": "```\\n// Login Time 20:23 ==> First game start at 20:30 (20 slot 2)\\nfunction roundUp(hour: number, minute: number) {\\n    if (minute === 0) return {hour: hour, slot: 0};\\n    if (minute <= 15) return {hour: hour, slot: 1};\\n    if (minute <= 30) return {hour: hour, slot: 2};\\n    if (minute <= 45) return {hour: hour, slot: 3};\\n    \\n    return {hour: (hour + 1) % 24, slot: 0};\\n}\\n\\n// Logout Time 21:23 ==> Last game end at 21:15 (21 slot 1)\\nfunction roundDown(hour: number, minute: number) {\\n    if (minute <= 14) return {hour: hour, slot: 0};\\n    if (minute <= 29) return {hour: hour, slot: 1};\\n    if (minute <= 44) return {hour: hour, slot: 2};\\n    if (minute <= 59) return {hour: hour, slot: 3};\\n}\\n\\nfunction numberOfRounds(loginTime: string, logoutTime: string): number {\\n    \\n    var [hour1, minute1] = loginTime.split(\\':\\').map(function(x) {return Number(x);});\\n    var [hour2, minute2] = logoutTime.split(\\':\\').map(function(x) {return Number(x);});\\n    \\n    // Edge cases such as \\n    // Start Time 00:05 round up to 00:15 \\n    // Start Time 00:10 round down to 00:00\\n    // This will cause the simulation to around to the next day so we want to return right away\\n    if (hour1 === hour2 && minute2 - minute1 < 15 && minute2 - minute1 >= 0) { return 0; }\\n    \\n    var roundedLoginTime = roundUp(hour1, minute1);\\n    var roundedLogoutTime = roundDown(hour2, minute2);\\n    \\n    var count = 0;\\n    while (roundedLoginTime.hour !== roundedLogoutTime.hour || roundedLoginTime.slot !== roundedLogoutTime.slot) {\\n        \\n        // Run the clock\\n        // 20/2 (20:30 to 20:45): 0 game\\n        // 20/3 (20:45 to 21:00): 1 game\\n        // 21/0 (21:00 to 21:15): 2 games\\n        // 21/1 (21:15 to 21:30): 3 games, Logout time \\n        \\n        // This handles midnight cases so no need concern if login < logout or login > logout\\n        roundedLoginTime.slot += 1\\n        if (roundedLoginTime.slot === 4) {\\n            roundedLoginTime.slot = 0;\\n            roundedLoginTime.hour = (roundedLoginTime.hour + 1) % 24\\n        }\\n        count += 1;\\n    }    \\n    return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\n// Login Time 20:23 ==> First game start at 20:30 (20 slot 2)\\nfunction roundUp(hour: number, minute: number) {\\n    if (minute === 0) return {hour: hour, slot: 0};\\n    if (minute <= 15) return {hour: hour, slot: 1};\\n    if (minute <= 30) return {hour: hour, slot: 2};\\n    if (minute <= 45) return {hour: hour, slot: 3};\\n    \\n    return {hour: (hour + 1) % 24, slot: 0};\\n}\\n\\n// Logout Time 21:23 ==> Last game end at 21:15 (21 slot 1)\\nfunction roundDown(hour: number, minute: number) {\\n    if (minute <= 14) return {hour: hour, slot: 0};\\n    if (minute <= 29) return {hour: hour, slot: 1};\\n    if (minute <= 44) return {hour: hour, slot: 2};\\n    if (minute <= 59) return {hour: hour, slot: 3};\\n}\\n\\nfunction numberOfRounds(loginTime: string, logoutTime: string): number {\\n    \\n    var [hour1, minute1] = loginTime.split(\\':\\').map(function(x) {return Number(x);});\\n    var [hour2, minute2] = logoutTime.split(\\':\\').map(function(x) {return Number(x);});\\n    \\n    // Edge cases such as \\n    // Start Time 00:05 round up to 00:15 \\n    // Start Time 00:10 round down to 00:00\\n    // This will cause the simulation to around to the next day so we want to return right away\\n    if (hour1 === hour2 && minute2 - minute1 < 15 && minute2 - minute1 >= 0) { return 0; }\\n    \\n    var roundedLoginTime = roundUp(hour1, minute1);\\n    var roundedLogoutTime = roundDown(hour2, minute2);\\n    \\n    var count = 0;\\n    while (roundedLoginTime.hour !== roundedLogoutTime.hour || roundedLoginTime.slot !== roundedLogoutTime.slot) {\\n        \\n        // Run the clock\\n        // 20/2 (20:30 to 20:45): 0 game\\n        // 20/3 (20:45 to 21:00): 1 game\\n        // 21/0 (21:00 to 21:15): 2 games\\n        // 21/1 (21:15 to 21:30): 3 games, Logout time \\n        \\n        // This handles midnight cases so no need concern if login < logout or login > logout\\n        roundedLoginTime.slot += 1\\n        if (roundedLoginTime.slot === 4) {\\n            roundedLoginTime.slot = 0;\\n            roundedLoginTime.hour = (roundedLoginTime.hour + 1) % 24\\n        }\\n        count += 1;\\n    }    \\n    return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1759511,
                "title": "c-easy",
                "content": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        int login=stoi(loginTime.substr(0,2))*60+stoi(loginTime.substr(3)),logout=stoi(logoutTime.substr(0,2))*60+stoi(logoutTime.substr(3));\\n        if(login>logout)logout+=(24*60);\\n        if(login%15)login+=15-(login%15);\\n        return (logout-login)/15;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string loginTime, string logoutTime) {\\n        int login=stoi(loginTime.substr(0,2))*60+stoi(loginTime.substr(3)),logout=stoi(logoutTime.substr(0,2))*60+stoi(logoutTime.substr(3));\\n        if(login>logout)logout+=(24*60);\\n        if(login%15)login+=15-(login%15);\\n        return (logout-login)/15;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1644406,
                "title": "java-bring-to-minutes-15-multiple-rounding-don-t-handle-through-midnight-case",
                "content": "- parse all inputs to integers\\n- convert login and logout into minutes representation\\n- if we handle \"through-the-midnight\" case then add + 24 * 60 minutes to logout \\n- round login to the next 15-multiple (or remain login as is if login is 15-multiple already)\\n- round logout to the previous 15-multiple (or remain logout as is if logout is 15-multiple already)\\n- find the difference in 15 minutes ranges\\n```\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        int loginH = Integer.valueOf(loginTime.substring(0,2));\\n        int loginM = Integer.valueOf(loginTime.substring(3));\\n        int logoutH = Integer.valueOf(logoutTime.substring(0,2));\\n        int logoutM = Integer.valueOf(logoutTime.substring(3));\\n        int loginInMinutes = 60*loginH+loginM;\\n        int logoutInMinutes = 60*logoutH+logoutM;\\n\\n        if(logoutInMinutes < loginInMinutes)  //if the range includes midnight, then add the entire day in minutes to logout\\n            logoutInMinutes += 24*60;\\n\\n        loginInMinutes += 14;\\n        loginInMinutes -= loginInMinutes%15;   //round login to the higher 15-multiple \\n        logoutInMinutes -= logoutInMinutes%15; //round logout to the lower 15-multiple\\n\\n        int res = (logoutInMinutes-loginInMinutes)/15;\\n        return res ==-1 ? 0 : res;  //negative res is possible in case of {\"00:47\",\"00:57\"} inputs\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int numberOfRounds(String loginTime, String logoutTime) {\\n        int loginH = Integer.valueOf(loginTime.substring(0,2));\\n        int loginM = Integer.valueOf(loginTime.substring(3));\\n        int logoutH = Integer.valueOf(logoutTime.substring(0,2));\\n        int logoutM = Integer.valueOf(logoutTime.substring(3));\\n        int loginInMinutes = 60*loginH+loginM;\\n        int logoutInMinutes = 60*logoutH+logoutM;\\n\\n        if(logoutInMinutes < loginInMinutes)  //if the range includes midnight, then add the entire day in minutes to logout\\n            logoutInMinutes += 24*60;\\n\\n        loginInMinutes += 14;\\n        loginInMinutes -= loginInMinutes%15;   //round login to the higher 15-multiple \\n        logoutInMinutes -= logoutInMinutes%15; //round logout to the lower 15-multiple\\n\\n        int res = (logoutInMinutes-loginInMinutes)/15;\\n        return res ==-1 ? 0 : res;  //negative res is possible in case of {\"00:47\",\"00:57\"} inputs\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1580756,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        //convert this into minutes\\n        //step 1 if starttime < end time no issues\\n        //step2 if starttime > end time then time = [start time to 00:00] and [00:00 to end time] and perform the same step1\\n        int start = convert(startTime);\\n        int end = convert(finishTime);\\n        if (start <= end){\\n            return check(start, end);\\n        } else {//break it into pre + post midnight\\n            return check(start, 24*60) + check(0, end);\\n        }\\n    }\\n    public int convert(String s){\\n        String[] splits = s.split(\":\");//simple parser code to make into minutes\\n        \\n        return Integer.parseInt(splits[0])*60 + Integer.parseInt(splits[1]);\\n    }\\n    public int check(int start, int end){\\n        //System.out.println(String.format(\"start:%d end:%d\", start, end));\\n        int play = 0;\\n        for(int i = 0; i <= 24*60; i=i+15){\\n            if (start <= i && end >= i + 15){\\n                play++;\\n            }\\n            if (i > end){\\n                break;\\n            }\\n        }\\n        return play;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        //convert this into minutes\\n        //step 1 if starttime < end time no issues\\n        //step2 if starttime > end time then time = [start time to 00:00] and [00:00 to end time] and perform the same step1\\n        int start = convert(startTime);\\n        int end = convert(finishTime);\\n        if (start <= end){\\n            return check(start, end);\\n        } else {//break it into pre + post midnight\\n            return check(start, 24*60) + check(0, end);\\n        }\\n    }\\n    public int convert(String s){\\n        String[] splits = s.split(\":\");//simple parser code to make into minutes\\n        \\n        return Integer.parseInt(splits[0])*60 + Integer.parseInt(splits[1]);\\n    }\\n    public int check(int start, int end){\\n        //System.out.println(String.format(\"start:%d end:%d\", start, end));\\n        int play = 0;\\n        for(int i = 0; i <= 24*60; i=i+15){\\n            if (start <= i && end >= i + 15){\\n                play++;\\n            }\\n            if (i > end){\\n                break;\\n            }\\n        }\\n        return play;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525879,
                "title": "java-solution",
                "content": "\\tclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) \\n    {\\n        String[] start = startTime.split(\":\");\\n        String[] end = finishTime.split(\":\");\\n        \\n        int startHour = Integer.parseInt(start[0]);\\n        int startMinute = Integer.parseInt(start[1]);\\n        int endHour = Integer.parseInt(end[0]);\\n        int endMinute = Integer.parseInt(end[1]);\\n        \\n        int totalRounds = 0;\\n        int hourDiff = 0;\\n        if(startHour > endHour)\\n        {\\n            hourDiff = (24-startHour) + endHour;\\n        }\\n        else if(endHour > startHour)\\n        {\\n            hourDiff = endHour - startHour;\\n        }\\n        else if(startMinute > endMinute)\\n        {\\n            hourDiff = 24;\\n        }\\n        else\\n        {\\n            hourDiff = 0;\\n        }\\n        \\n        if(hourDiff >= 1)\\n        {\\n            totalRounds += (hourDiff-1)*4;\\n            if(startMinute == 0)\\n            {\\n                totalRounds += 4;\\n            }\\n            else if(startMinute <= 15)\\n            {\\n                totalRounds += 3;\\n            }\\n            else if(startMinute <= 30)\\n            {\\n                totalRounds += 2;\\n            }\\n            else if(startMinute <= 45)\\n            {\\n                totalRounds += 1;\\n            }\\n        \\n            if(endMinute >= 45)\\n            {\\n                totalRounds += 3;\\n            }\\n            else if(endMinute >= 30)\\n            {\\n                totalRounds += 2;\\n            }\\n            else if(endMinute >= 15)\\n            {\\n                totalRounds += 1;\\n            }\\n        }\\n        else\\n        {\\n            if(startMinute == 0 && endMinute >= 15)\\n            {\\n                totalRounds += 1;\\n            }\\n            \\n            if(startMinute <= 15 && endMinute >= 30)\\n            {\\n                totalRounds += 1;\\n            }\\n            \\n            if(startMinute <= 30 && endMinute >= 45)\\n            {\\n                totalRounds += 1;\\n            }\\n        }\\n        \\n        return totalRounds;\\n    }\\n\\t}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int numberOfRounds(String startTime, String finishTime) \\n    {\\n        String[] start = startTime.split(\":\");\\n        String[] end = finishTime.split(\":\");\\n        \\n        int startHour = Integer.parseInt(start[0]);\\n        int startMinute = Integer.parseInt(start[1]);\\n        int endHour = Integer.parseInt(end[0]);\\n        int endMinute = Integer.parseInt(end[1]);\\n        \\n        int totalRounds = 0;\\n        int hourDiff = 0;\\n        if(startHour > endHour)\\n        {\\n            hourDiff = (24-startHour) + endHour;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1470054,
                "title": "java-easy-clean-and-detailed-solution",
                "content": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        String[] t1 = startTime.split(\":\");\\n        int h1 = Integer.parseInt(t1[0]);\\n        int m1 = Integer.parseInt(t1[1]);\\n        \\n        t1 = finishTime.split(\":\");\\n        int h2 = Integer.parseInt(t1[0]);\\n        int m2 = Integer.parseInt(t1[1]);\\n        \\n        if(h1 == h2 && m2 - m1 < 15 && m2 - m1 >= 0)\\n            return 0;\\n        if(m1 > 0 && m1 <= 14)\\n        \\tm1 = 15;\\n        else if(m1 > 15 && m1 < 30)\\n        \\tm1 = 30;\\n        else if(m1 > 30 && m1 < 45)\\n        \\tm1 = 45;\\n        else if(m1 > 45 && m1 <= 59) {\\n        \\tm1 = 0;\\n        \\th1++;\\n        }\\n        \\n        if(m2 > 0 && m2 <= 14)\\n        \\tm2 = 0;\\n        else if(m2 > 15 && m2 < 30)\\n        \\tm2 = 15;\\n        else if(m2 > 30 && m2 < 45)\\n        \\tm2 = 30;\\n        else if(m2 > 45 && m2 <= 59) {\\n        \\tm2 = 45;\\n        }\\n        \\n        int x = h1 * 60 + m1;\\n        int y = h2 * 60 + m2;\\n        \\n        if(y >= x)\\n        \\treturn (y - x) / 15;\\n        else\\n        \\treturn (((24 * 60) - x) + y) / 15;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        String[] t1 = startTime.split(\":\");\\n        int h1 = Integer.parseInt(t1[0]);\\n        int m1 = Integer.parseInt(t1[1]);\\n        \\n        t1 = finishTime.split(\":\");\\n        int h2 = Integer.parseInt(t1[0]);\\n        int m2 = Integer.parseInt(t1[1]);\\n        \\n        if(h1 == h2 && m2 - m1 < 15 && m2 - m1 >= 0)\\n            return 0;\\n        if(m1 > 0 && m1 <= 14)\\n        \\tm1 = 15;\\n        else if(m1 > 15 && m1 < 30)\\n        \\tm1 = 30;\\n        else if(m1 > 30 && m1 < 45)\\n        \\tm1 = 45;\\n        else if(m1 > 45 && m1 <= 59) {\\n        \\tm1 = 0;\\n        \\th1++;\\n        }\\n        \\n        if(m2 > 0 && m2 <= 14)\\n        \\tm2 = 0;\\n        else if(m2 > 15 && m2 < 30)\\n        \\tm2 = 15;\\n        else if(m2 > 30 && m2 < 45)\\n        \\tm2 = 30;\\n        else if(m2 > 45 && m2 <= 59) {\\n        \\tm2 = 45;\\n        }\\n        \\n        int x = h1 * 60 + m1;\\n        int y = h2 * 60 + m2;\\n        \\n        if(y >= x)\\n        \\treturn (y - x) / 15;\\n        else\\n        \\treturn (((24 * 60) - x) + y) / 15;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1449444,
                "title": "basic-python-solution",
                "content": "Tried to finish this problem completely on my own. This is my \"ugly\" verison, but it works.  \\n```\\nclass Solution(object):\\n    def numberOfRounds(self, startTime, finishTime):\\n        \"\"\"\\n        :type startTime: str\\n        :type finishTime: str\\n        :rtype: int\\n        \"\"\"\\n        total_mins = 0\\n        H_finish = int(finishTime[:2])\\n        H_start = int(startTime[:2])\\n        \\n        m_finish = int(finishTime[3:])\\n        m_start = int(startTime[3:])\\n        \\n        if (H_finish - H_start) == 0 and (m_finish - m_start) < 15 and (m_finish - m_start) >=0:\\n            return 0\\n        \\n        l = [0,15,30,45]\\n        if m_start not in l:\\n            for i in range(len(l)-1):\\n                if m_start > l[i] and m_start <l[i+1]:\\n                    m_start = l[i+1]\\n        \\n        H_dif = (H_finish - H_start)\\n        m_dif = (m_finish - m_start)\\n        \\n        \\n        if m_start > l[-1] and (H_dif != 0 or m_dif <0):\\n            m_start = 0\\n            H_start += 1\\n            if H_start > 24:\\n                H_start = 0\\n            m_dif = (m_finish - m_start)\\n            H_dif = (H_finish - H_start)\\n\\n        #print(m_dif)\\n        if m_dif < 0:\\n            if H_dif <= 0:\\n                H_dif = (H_finish+23 - H_start)\\n            elif H_dif > 0:\\n                H_dif -= 1 \\n        else:\\n            if H_dif < 0:\\n                H_dif = (H_finish+24 - H_start)\\n            \\n        total_mins += (H_dif * 60)\\n        #print(total_mins)\\n        \\n        if m_dif < 0:\\n            m_dif = (60 - m_start + m_finish)\\n        #print(m_dif)\\n        total_mins += m_dif\\n\\n        return total_mins // 15\\n        \\n        \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def numberOfRounds(self, startTime, finishTime):\\n        \"\"\"\\n        :type startTime: str\\n        :type finishTime: str\\n        :rtype: int\\n        \"\"\"\\n        total_mins = 0\\n        H_finish = int(finishTime[:2])\\n        H_start = int(startTime[:2])\\n        \\n        m_finish = int(finishTime[3:])\\n        m_start = int(startTime[3:])\\n        \\n        if (H_finish - H_start) == 0 and (m_finish - m_start) < 15 and (m_finish - m_start) >=0:\\n            return 0\\n        \\n        l = [0,15,30,45]\\n        if m_start not in l:\\n            for i in range(len(l)-1):\\n                if m_start > l[i] and m_start <l[i+1]:\\n                    m_start = l[i+1]\\n        \\n        H_dif = (H_finish - H_start)\\n        m_dif = (m_finish - m_start)\\n        \\n        \\n        if m_start > l[-1] and (H_dif != 0 or m_dif <0):\\n            m_start = 0\\n            H_start += 1\\n            if H_start > 24:\\n                H_start = 0\\n            m_dif = (m_finish - m_start)\\n            H_dif = (H_finish - H_start)\\n\\n        #print(m_dif)\\n        if m_dif < 0:\\n            if H_dif <= 0:\\n                H_dif = (H_finish+23 - H_start)\\n            elif H_dif > 0:\\n                H_dif -= 1 \\n        else:\\n            if H_dif < 0:\\n                H_dif = (H_finish+24 - H_start)\\n            \\n        total_mins += (H_dif * 60)\\n        #print(total_mins)\\n        \\n        if m_dif < 0:\\n            m_dif = (60 - m_start + m_finish)\\n        #print(m_dif)\\n        total_mins += m_dif\\n\\n        return total_mins // 15\\n        \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1367079,
                "title": "simple-c-solution",
                "content": "```\\nclass Solution {\\npublic: \\n    int rm(int m){\\n        if(m==0){\\n            return 4;\\n        }else if(m<=15){\\n            return 3;\\n        }else if(m<=30)\\n            return 2;\\n        else if(m<=45)\\n            return 1;\\n        return 0;\\n    }\\n    \\n    \\n    int calH(int sh, int eh, int sm, int em){\\n        int ans =0;\\n        \\n        if( (eh==sh && sm>em) || eh<sh){\\n            ans = ans + ((24-(sh+1)) + eh)*4;\\n             ans = ans + rm(sm) + rm(60-em);\\n            \\n        }else{\\n            if(eh>sh){\\n                ans = ans + (eh - (sh+1))*4;\\n                ans = ans + rm(sm) + rm(60-em);\\n            }else if(eh==sh){\\n                if((rm(60-em) - (4-rm(sm)))>=0)\\n                     ans = ans + (rm(60-em) - (4-rm(sm)));\\n               \\n            }\\n        }\\n        return ans;\\n    }\\n    \\n    int numberOfRounds(string startTime, string finishTime) {\\n        int sh = stoi(startTime.substr(0,2));\\n        int sm = stoi(startTime.substr(3,2));\\n        int eh = stoi(finishTime.substr(0,2));\\n        int em = stoi(finishTime.substr(3,2));\\n        if(eh==sh && em==sm)\\n            return 0;\\n       return calH(sh,eh,sm,em);\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic: \\n    int rm(int m){\\n        if(m==0){\\n            return 4;\\n        }else if(m<=15){\\n            return 3;\\n        }else if(m<=30)\\n            return 2;\\n        else if(m<=45)\\n            return 1;\\n        return 0;\\n    }\\n    \\n    \\n    int calH(int sh, int eh, int sm, int em){\\n        int ans =0;\\n        \\n        if( (eh==sh && sm>em) || eh<sh){\\n            ans = ans + ((24-(sh+1)) + eh)*4;\\n             ans = ans + rm(sm) + rm(60-em);\\n            \\n        }else{\\n            if(eh>sh){\\n                ans = ans + (eh - (sh+1))*4;\\n                ans = ans + rm(sm) + rm(60-em);\\n            }else if(eh==sh){\\n                if((rm(60-em) - (4-rm(sm)))>=0)\\n                     ans = ans + (rm(60-em) - (4-rm(sm)));\\n               \\n            }\\n        }\\n        return ans;\\n    }\\n    \\n    int numberOfRounds(string startTime, string finishTime) {\\n        int sh = stoi(startTime.substr(0,2));\\n        int sm = stoi(startTime.substr(3,2));\\n        int eh = stoi(finishTime.substr(0,2));\\n        int em = stoi(finishTime.substr(3,2));\\n        if(eh==sh && em==sm)\\n            return 0;\\n       return calH(sh,eh,sm,em);\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1328122,
                "title": "javascript-simple-solution-97-18",
                "content": "Runtime: 64 ms, faster than 97.18% of JavaScript online submissions for The Number of Full Rounds You Have Played.\\nMemory Usage: 38.9 MB, less than 18.64% of JavaScript online submissions for The Number of Full Rounds You Have Played.\\n```\\nvar numberOfRounds = function(startTime, finishTime) {\\n    let a = +startTime.slice(0,2);\\n    let b = +finishTime.slice(0,2);\\n    let c = +startTime.slice(3,5);\\n    let d = +finishTime.slice(3,5);\\n    if(a>b) b+=24;\\n    if(a===b && c>d) b+=24;\\n    c = Math.ceil(c/15); \\n    d = Math.floor(d/15); \\n    return Math.max((b - a) * 4 + d - c, 0);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar numberOfRounds = function(startTime, finishTime) {\\n    let a = +startTime.slice(0,2);\\n    let b = +finishTime.slice(0,2);\\n    let c = +startTime.slice(3,5);\\n    let d = +finishTime.slice(3,5);\\n    if(a>b) b+=24;\\n    if(a===b && c>d) b+=24;\\n    c = Math.ceil(c/15); \\n    d = Math.floor(d/15); \\n    return Math.max((b - a) * 4 + d - c, 0);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1311530,
                "title": "golang-0ms-solution",
                "content": "```go\\nfunc numberOfRounds(startTime string, finishTime string) int {\\n\\tstartHour, _ := strconv.Atoi(startTime[:2])\\n\\tfinishHour, _ := strconv.Atoi(finishTime[:2])\\n\\tstartMinute, _ := strconv.Atoi(startTime[3:])\\n\\tfinishMinute, _ := strconv.Atoi(finishTime[3:])\\n\\tif startTime < finishTime {\\n\\t\\treturn helper(startHour, finishHour, startMinute, finishMinute)\\n\\t}\\n\\t// overnight\\n\\trounds := helper(startHour, 24, startMinute, 0)\\n\\trounds += helper(0, finishHour, 0, finishMinute)\\n\\treturn rounds\\n}\\n\\nfunc helper(startHour, finishHour, startMinute, finishMinute int) int {\\n\\tif startHour == finishHour {\\n\\t\\trounds := finishMinute / 15 - startMinute / 15\\n\\t\\tif rounds > 0 && startMinute % 15 != 0 {\\n\\t\\t\\trounds--\\n\\t\\t}\\n\\t\\treturn rounds\\n\\t}\\n\\trounds := (finishHour - startHour - 1) * 4\\n\\trounds += finishMinute / 15\\n\\trounds += (60-startMinute) / 15\\n\\treturn rounds\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc numberOfRounds(startTime string, finishTime string) int {\\n\\tstartHour, _ := strconv.Atoi(startTime[:2])\\n\\tfinishHour, _ := strconv.Atoi(finishTime[:2])\\n\\tstartMinute, _ := strconv.Atoi(startTime[3:])\\n\\tfinishMinute, _ := strconv.Atoi(finishTime[3:])\\n\\tif startTime < finishTime {\\n\\t\\treturn helper(startHour, finishHour, startMinute, finishMinute)\\n\\t}\\n\\t// overnight\\n\\trounds := helper(startHour, 24, startMinute, 0)\\n\\trounds += helper(0, finishHour, 0, finishMinute)\\n\\treturn rounds\\n}\\n\\nfunc helper(startHour, finishHour, startMinute, finishMinute int) int {\\n\\tif startHour == finishHour {\\n\\t\\trounds := finishMinute / 15 - startMinute / 15\\n\\t\\tif rounds > 0 && startMinute % 15 != 0 {\\n\\t\\t\\trounds--\\n\\t\\t}\\n\\t\\treturn rounds\\n\\t}\\n\\trounds := (finishHour - startHour - 1) * 4\\n\\trounds += finishMinute / 15\\n\\trounds += (60-startMinute) / 15\\n\\treturn rounds\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1307355,
                "title": "java-o-1-solution-using-the-provided-hints",
                "content": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int startHr = Integer.parseInt(startTime.substring(0, 2));\\n        int startMin = Integer.parseInt(startTime.substring(3, 5));\\n        \\n        int finishHr = Integer.parseInt(finishTime.substring(0, 2));\\n        int finishMin = Integer.parseInt(finishTime.substring(3, 5));\\n        \\n\\t\\t/* We use 48 hours day to make our life easier. If the finishing time is less than starting time, \\n\\t\\twe can add 24 hours to the finishing time. */\\n        if (finishHr < startHr || (finishHr == startHr && finishMin < startMin)) {\\n            finishHr += 24;\\n        }\\n          \\n        int count = 0;\\n        \\n\\t\\t/* Iterate over all possible rounds and compare each round\\'s start and finish times\\n\\t\\twith our starting and finishing times. */\\n        for (int roundStartHr = 0; roundStartHr < 48; roundStartHr++) {\\n            for (int roundStartMin = 0; roundStartMin < 60; roundStartMin += 15) {\\n                int roundFinishMin = (roundStartMin + 15) % 60;\\n                int roundFinishHr = roundStartHr;\\n                \\n                if (roundFinishMin == 0)\\n                    roundFinishHr++;\\n                \\n                boolean a = startHr < roundStartHr;\\n                a |= startHr == roundStartHr && startMin <= roundStartMin;\\n                \\n                boolean b = roundFinishHr < finishHr;\\n                b |= roundFinishHr == finishHr && roundFinishMin <= finishMin;\\n                    \\n                count += a & b ? 1 : 0;\\n            }\\n        }\\n        \\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int startHr = Integer.parseInt(startTime.substring(0, 2));\\n        int startMin = Integer.parseInt(startTime.substring(3, 5));\\n        \\n        int finishHr = Integer.parseInt(finishTime.substring(0, 2));\\n        int finishMin = Integer.parseInt(finishTime.substring(3, 5));\\n        \\n\\t\\t/* We use 48 hours day to make our life easier. If the finishing time is less than starting time, \\n\\t\\twe can add 24 hours to the finishing time. */\\n        if (finishHr < startHr || (finishHr == startHr && finishMin < startMin)) {\\n            finishHr += 24;\\n        }\\n          \\n        int count = 0;\\n        \\n\\t\\t/* Iterate over all possible rounds and compare each round\\'s start and finish times\\n\\t\\twith our starting and finishing times. */\\n        for (int roundStartHr = 0; roundStartHr < 48; roundStartHr++) {\\n            for (int roundStartMin = 0; roundStartMin < 60; roundStartMin += 15) {\\n                int roundFinishMin = (roundStartMin + 15) % 60;\\n                int roundFinishHr = roundStartHr;\\n                \\n                if (roundFinishMin == 0)\\n                    roundFinishHr++;\\n                \\n                boolean a = startHr < roundStartHr;\\n                a |= startHr == roundStartHr && startMin <= roundStartMin;\\n                \\n                boolean b = roundFinishHr < finishHr;\\n                b |= roundFinishHr == finishHr && roundFinishMin <= finishMin;\\n                    \\n                count += a & b ? 1 : 0;\\n            }\\n        }\\n        \\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1297307,
                "title": "java-o-1-solution",
                "content": "Time Complexity : `O(1)`\\nSpace Complexity : `O(1)`\\n\\nThe solution is straight forward.\\n\\n```\\nclass Solution {\\n    private static int DAY_START = 0;\\n    private static int DAY_END = 24 * 60;\\n    private static int ROUND_MINUTES = 15;\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int startMinutes = getTimeInMinutes(startTime);\\n        int finishMinutes = getTimeInMinutes(finishTime);\\n        return finishMinutes < startMinutes ? getFullRounds(startMinutes, DAY_END) + getFullRounds(DAY_START, finishMinutes): getFullRounds(startMinutes, finishMinutes);// end < start means played past midnight. Hence calcualte full rounds on separate days\\n    }\\n    \\n    private int getTimeInMinutes (String timeString) {//convert time to minutes from the start of the day\\n        char[] time = timeString.toCharArray();\\n        int hours = (time[0] - \\'0\\') * 10 + (time[1] - \\'0\\');\\n        int minutes = (time[3] - \\'0\\') * 10 + (time[4] - \\'0\\');\\n        return hours * 60 + minutes;\\n    }\\n    \\n    private int getFullRounds(int start, int end) {\\n        if(start + ROUND_MINUTES > end){// total time played is less than one complete round\\n            return 0;\\n        }\\n        if (start % ROUND_MINUTES != 0) {//start time is not at quarter-hour -> change start to next quarter-hour\\n            start = ((start/ROUND_MINUTES) + 1 ) * ROUND_MINUTES;\\n        }\\n        if (end % ROUND_MINUTES != 0){//end time is not at quarter-hour -> change end to previous quarter-hour\\n            end = ((end/ROUND_MINUTES)) * ROUND_MINUTES;\\n        }\\n        return (end - start)/ROUND_MINUTES;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    private static int DAY_START = 0;\\n    private static int DAY_END = 24 * 60;\\n    private static int ROUND_MINUTES = 15;\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int startMinutes = getTimeInMinutes(startTime);\\n        int finishMinutes = getTimeInMinutes(finishTime);\\n        return finishMinutes < startMinutes ? getFullRounds(startMinutes, DAY_END) + getFullRounds(DAY_START, finishMinutes): getFullRounds(startMinutes, finishMinutes);// end < start means played past midnight. Hence calcualte full rounds on separate days\\n    }\\n    \\n    private int getTimeInMinutes (String timeString) {//convert time to minutes from the start of the day\\n        char[] time = timeString.toCharArray();\\n        int hours = (time[0] - \\'0\\') * 10 + (time[1] - \\'0\\');\\n        int minutes = (time[3] - \\'0\\') * 10 + (time[4] - \\'0\\');\\n        return hours * 60 + minutes;\\n    }\\n    \\n    private int getFullRounds(int start, int end) {\\n        if(start + ROUND_MINUTES > end){// total time played is less than one complete round\\n            return 0;\\n        }\\n        if (start % ROUND_MINUTES != 0) {//start time is not at quarter-hour -> change start to next quarter-hour\\n            start = ((start/ROUND_MINUTES) + 1 ) * ROUND_MINUTES;\\n        }\\n        if (end % ROUND_MINUTES != 0){//end time is not at quarter-hour -> change end to previous quarter-hour\\n            end = ((end/ROUND_MINUTES)) * ROUND_MINUTES;\\n        }\\n        return (end - start)/ROUND_MINUTES;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1291101,
                "title": "c-implementation",
                "content": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string s, string e) {\\n        int h1 = (s[0] - \\'0\\')*10 + s[1] - \\'0\\';\\n        int m1 = (s[3] - \\'0\\')*10 + s[4] - \\'0\\';\\n        int h2 = (e[0] - \\'0\\')*10 + e[1] - \\'0\\';\\n        int m2 = (e[3] - \\'0\\')*10 + e[4] - \\'0\\';\\n        int ans = 0 ;\\n       \\n        if((h1 < h2 && m1 >= m2)|| (h1 < h2 && m1 < m2)) \\n        { \\n             int y = (h2 - h1);\\n             ans+=y*4;\\n             int t = 60 - m1 ;\\n             ans+=(t/15 - 4 );\\n             ans+=(m2 / 15);\\n        }\\n        \\n        if((h1 > h2 && m1 >= m2)||(h1 > h2 && m1< m2))\\n        { \\n             int y = (24-h1) + h2;\\n             ans+=y*4;\\n             int t = 60 - m1 ;\\n             ans+=(t/15 - 4 );\\n             ans+=(m2 / 15);\\n        }\\n     \\n        \\n       if(h1 == h2 && m1 > m2)\\n       {  int y = (24-h1) + h2;\\n             ans+=y*4;\\n             int t = 60 - m1 ;\\n             ans+=(t/15 - 4 );\\n             ans+=(m2 / 15);\\n           \\n       }\\n      if(h1 == h2 && m1 < m2)\\n      {\\n          if(m1 <= 0 && m2 >= 15)ans++;\\n          if(m1 <= 15 && m2 >= 30)ans++;\\n          if(m1 <= 30 && m2 >= 45)ans++;\\n      }\\n        return ans;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int numberOfRounds(string s, string e) {\\n        int h1 = (s[0] - \\'0\\')*10 + s[1] - \\'0\\';\\n        int m1 = (s[3] - \\'0\\')*10 + s[4] - \\'0\\';\\n        int h2 = (e[0] - \\'0\\')*10 + e[1] - \\'0\\';\\n        int m2 = (e[3] - \\'0\\')*10 + e[4] - \\'0\\';\\n        int ans = 0 ;\\n       \\n        if((h1 < h2 && m1 >= m2)|| (h1 < h2 && m1 < m2)) \\n        { \\n             int y = (h2 - h1);\\n             ans+=y*4;\\n             int t = 60 - m1 ;\\n             ans+=(t/15 - 4 );\\n             ans+=(m2 / 15);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1290908,
                "title": "scala-functional-programming-style",
                "content": "```scala \\n\\n  def numberOfRounds(start: String, finish: String): Int = {\\n    if (start equals finish) 0\\n    else {\\n      val f  = (s: String) => s.split(\":\")\\n      val sh = f(start)(0).toInt\\n      val sm = f(start)(1).toInt\\n      val fh = f(finish)(0).toInt\\n      val fm = f(finish)(1).toInt\\n\\n      ((sh == fh && sm < fm) || sh < fh) match {\\n        case true => {\\n          var count = 0\\n          if (sh == fh) {\\n            if (fm - sm < 15) return 0\\n            var start = if (sm % 15 == 0) sm else ((sm / 15) + 1) * 15\\n            while (start + 15 <= fm) {\\n              start += 15\\n              count += 1\\n            }\\n          } else {\\n            var start = if (sm % 15 == 0) sm else ((sm / 15) + 1) * 15\\n            while (start + 15 <= 60) {\\n              start += 15\\n              count += 1\\n            }\\n            count += 4 * (fh - sh - 1)\\n            start = 0\\n            while (start + 15 <= fm) {\\n              start += 15\\n              count += 1\\n            }\\n          }\\n          count\\n        }\\n        case _ => numberOfRounds(start, \"23:60\") + numberOfRounds(\"00:00\", finish)\\n      }\\n\\n    }\\n\\n  }\\n```",
                "solutionTags": [],
                "code": "```scala \\n\\n  def numberOfRounds(start: String, finish: String): Int = {\\n    if (start equals finish) 0\\n    else {\\n      val f  = (s: String) => s.split(\":\")\\n      val sh = f(start)(0).toInt\\n      val sm = f(start)(1).toInt\\n      val fh = f(finish)(0).toInt\\n      val fm = f(finish)(1).toInt\\n\\n      ((sh == fh && sm < fm) || sh < fh) match {\\n        case true => {\\n          var count = 0\\n          if (sh == fh) {\\n            if (fm - sm < 15) return 0\\n            var start = if (sm % 15 == 0) sm else ((sm / 15) + 1) * 15\\n            while (start + 15 <= fm) {\\n              start += 15\\n              count += 1\\n            }\\n          } else {\\n            var start = if (sm % 15 == 0) sm else ((sm / 15) + 1) * 15\\n            while (start + 15 <= 60) {\\n              start += 15\\n              count += 1\\n            }\\n            count += 4 * (fh - sh - 1)\\n            start = 0\\n            while (start + 15 <= fm) {\\n              start += 15\\n              count += 1\\n            }\\n          }\\n          count\\n        }\\n        case _ => numberOfRounds(start, \"23:60\") + numberOfRounds(\"00:00\", finish)\\n      }\\n\\n    }\\n\\n  }\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1289133,
                "title": "c",
                "content": "class Solution {\\npublic:\\n    int numberOfRounds(string startTime, string finishTime) {\\n        \\n        int s1=0,s2=0;\\n        int r=0;\\n        s1= stoi(startTime.substr(0,2))*60+stoi(startTime.substr(3,2));\\n        s2= stoi(finishTime.substr(0,2))*60+stoi(finishTime.substr(3,2));\\n        if(s1<s2)\\n        {\\n            int x= s1%15;\\n            int y;\\n            if(x!=0)\\n            {\\n             y= s1+15-x;\\n            }\\n            else\\n            {\\n                y=s1;\\n            }\\n            \\n            int u= s2-y;\\n            \\n            int v=u%15;\\n            int z= u-v;        \\n        }\\n        else\\n        {\\n            int x= s1%15;       \\n            int y;\\n            if(x!=0)\\n            {\\n             y= s1+15-x;\\n            }\\n            else\\n            {\\n                y=s1;\\n            }\\n            \\n            int u = 24*60- y +s2;            \\n            int v= u%15;\\n            int z= u-v;     \\n        }\\n        r=z/15;\\n        return r;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int numberOfRounds(string startTime, string finishTime) {\\n        \\n        int s1=0,s2=0;\\n        int r=0;\\n        s1= stoi(startTime.substr(0,2))*60+stoi(startTime.substr(3,2));\\n        s2= stoi(finishTime.substr(0,2))*60+stoi(finishTime.substr(3,2));\\n        if(s1<s2)\\n        {\\n            int x= s1%15;\\n            int y;\\n            if(x!=0)\\n            {\\n             y= s1+15-x;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1289007,
                "title": "easy-to-understand",
                "content": "\\'\\'\\'\\'\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        startList = []\\n        startWholeList = \"\"\\n        finishList = []\\n        finishWholeList = \"\"\\n        startResult = []\\n        finishResult = []\\n        count = 0\\n        overnight = 0\\n        startList = startTime.split(\":\")\\n        finishList = finishTime.split(\":\")\\n        startWholeList = startList[0] + startList[1]\\n        finishWholeList = finishList[0] + finishList[1]\\n        print(startWholeList)\\n        print(finishWholeList)\\n        for i, j in zip(startList, finishList):\\n            startResult.append(int(i))\\n            finishResult.append(int(j))\\n        \\n        if (startResult[0] < finishResult[0]):\\n            count = (finishResult[0] - startResult[0]) * 4\\n            if (startResult[1]!= 0 and startResult[1] <= 15):\\n                count -= 1\\n            if (startResult[1]> 15 and startResult[1] <= 30):\\n                count -= 2\\n            if (startResult[1]> 30 and startResult[1] <= 45):\\n                count -= 3\\n            if (startResult[1]> 45):\\n                count -= 4\\n            \\n            if (finishResult[1] <= 59 and  finishResult[1] > 45):\\n                count -= 1\\n            if (finishResult[1] < 45 and  finishResult[1] >= 30):\\n                count -= 2\\n            if (finishResult[1] < 30 and  finishResult[1] >= 15):\\n                count -= 3\\n            if (finishResult[1] < 15):\\n                count -= 4\\n            count += 4\\n        \\n        if (startResult[0] == finishResult[0] and startResult[1] < finishResult[1]):\\n            count = 4\\n\\n            if (startResult[1] <= 15):\\n                if (startResult[1]!= 0 ):\\n                    count -= 1\\n                    if (finishResult[1] <= 59 and  finishResult[1] >= 45):\\n                        count -= 1\\n                    if (finishResult[1] < 45 and  finishResult[1] >= 30):\\n                        count -= 2\\n                    if (finishResult[1] < 30):\\n                        count -= 3\\n                if (startResult[1] == 0 ):\\n                    if (finishResult[1] <= 59 and  finishResult[1] >= 45):\\n                        count -= 1\\n                    if (finishResult[1] < 45 and  finishResult[1] >= 30):\\n                        count -= 2\\n                    if (finishResult[1] < 30):\\n                        count -= 3\\n            if (startResult[1]> 15 and startResult[1] <= 30):\\n                count -= 2\\n                if (finishResult[1] <= 59 and  finishResult[1] > 45):\\n                    count -= 1\\n                if (finishResult[1] < 45):\\n                    count -= 2\\n            if (startResult[1] > 30):\\n                count -= 3\\n                if (finishResult[1] <= 59):\\n                    count -= 1\\n\\n        \\n        if (int(startWholeList) > int(finishWholeList)): \\n            overnight = 24 - startResult[0] + finishResult[0]\\n            count = overnight * 4\\n            if (startResult[1]!= 0 and startResult[1] <= 15):\\n                count -= 1\\n            if (startResult[1]> 15 and startResult[1] <= 30):\\n                count -= 2\\n            if (startResult[1]> 30 and startResult[1] <= 45):\\n                count -= 3\\n            if (startResult[1]> 45):\\n                count -= 4\\n            \\n            if (finishResult[1] <= 59 and  finishResult[1] >= 45):\\n                count -= 1\\n            if (finishResult[1] < 45 and  finishResult[1] >= 30):\\n                count -= 2\\n            if (finishResult[1] < 30 and  finishResult[1] >= 15):\\n                count -= 3\\n            if (finishResult[1] < 15):\\n                count -= 4\\n            count += 4\\n            \\n        return count\\n\\n\\'\\'\\'\\'",
                "solutionTags": [],
                "code": "\\'\\'\\'\\'\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        startList = []\\n        startWholeList = \"\"\\n        finishList = []\\n        finishWholeList = \"\"\\n        startResult = []\\n        finishResult = []\\n        count = 0\\n        overnight = 0\\n        startList = startTime.split(\":\")\\n        finishList = finishTime.split(\":\")\\n        startWholeList = startList[0] + startList[1]\\n        finishWholeList = finishList[0] + finishList[1]\\n        print(startWholeList)\\n        print(finishWholeList)\\n        for i, j in zip(startList, finishList):\\n            startResult.append(int(i))\\n            finishResult.append(int(j))\\n        \\n        if (startResult[0] < finishResult[0]):\\n            count = (finishResult[0] - startResult[0]) * 4\\n            if (startResult[1]!= 0 and startResult[1] <= 15):\\n                count -= 1\\n            if (startResult[1]> 15 and startResult[1] <= 30):\\n                count -= 2\\n            if (startResult[1]> 30 and startResult[1] <= 45):\\n                count -= 3\\n            if (startResult[1]> 45):\\n                count -= 4\\n            \\n            if (finishResult[1] <= 59 and  finishResult[1] > 45):\\n                count -= 1\\n            if (finishResult[1] < 45 and  finishResult[1] >= 30):\\n                count -= 2\\n            if (finishResult[1] < 30 and  finishResult[1] >= 15):\\n                count -= 3\\n            if (finishResult[1] < 15):\\n                count -= 4\\n            count += 4\\n        \\n        if (startResult[0] == finishResult[0] and startResult[1] < finishResult[1]):\\n            count = 4\\n\\n            if (startResult[1] <= 15):\\n                if (startResult[1]!= 0 ):\\n                    count -= 1\\n                    if (finishResult[1] <= 59 and  finishResult[1] >= 45):\\n                        count -= 1\\n                    if (finishResult[1] < 45 and  finishResult[1] >= 30):\\n                        count -= 2\\n                    if (finishResult[1] < 30):\\n                        count -= 3\\n                if (startResult[1] == 0 ):\\n                    if (finishResult[1] <= 59 and  finishResult[1] >= 45):\\n                        count -= 1\\n                    if (finishResult[1] < 45 and  finishResult[1] >= 30):\\n                        count -= 2\\n                    if (finishResult[1] < 30):\\n                        count -= 3\\n            if (startResult[1]> 15 and startResult[1] <= 30):\\n                count -= 2\\n                if (finishResult[1] <= 59 and  finishResult[1] > 45):\\n                    count -= 1\\n                if (finishResult[1] < 45):\\n                    count -= 2\\n            if (startResult[1] > 30):\\n                count -= 3\\n                if (finishResult[1] <= 59):\\n                    count -= 1\\n\\n        \\n        if (int(startWholeList) > int(finishWholeList)): \\n            overnight = 24 - startResult[0] + finishResult[0]\\n            count = overnight * 4\\n            if (startResult[1]!= 0 and startResult[1] <= 15):\\n                count -= 1\\n            if (startResult[1]> 15 and startResult[1] <= 30):\\n                count -= 2\\n            if (startResult[1]> 30 and startResult[1] <= 45):\\n                count -= 3\\n            if (startResult[1]> 45):\\n                count -= 4\\n            \\n            if (finishResult[1] <= 59 and  finishResult[1] >= 45):\\n                count -= 1\\n            if (finishResult[1] < 45 and  finishResult[1] >= 30):\\n                count -= 2\\n            if (finishResult[1] < 30 and  finishResult[1] >= 15):\\n                count -= 3\\n            if (finishResult[1] < 15):\\n                count -= 4\\n            count += 4\\n            \\n        return count\\n\\n\\'\\'\\'\\'",
                "codeTag": "Java"
            },
            {
                "id": 1288734,
                "title": "testcase-was-weak",
                "content": "As you all would already know that test case was weak during contest.\\n\\nI noticed by this comment\\nhttps://leetcode.com/problems/the-number-of-full-rounds-you-have-played/discuss/1284240/C++-straightforward-3-lines/980609\\n\\n```\\n    startTime = \"12:01\"\\n    finishTime = \"12:02\"\\n```\\n\\nIt looks this is solved already as of 2021-06-21 11pm UTC.\\n",
                "solutionTags": [],
                "code": "```\\n    startTime = \"12:01\"\\n    finishTime = \"12:02\"\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1287337,
                "title": "java-clean-readable-code-1ms",
                "content": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int start = getMinutes(startTime);\\n        int end = getMinutes(finishTime);\\n        \\n        if(end < start){\\n            end += (24 * 60);\\n        }\\n        \\n        start = getNextStartTime(start);\\n        end = getPreviousCloseTime(end);\\n        \\n        return (end - start) / 15;\\n    }\\n    \\n    private int getPreviousCloseTime(int time){\\n        if(time % 15 != 0){\\n            return time - (time % 15);\\n        }else\\n            return time;\\n    }\\n    \\n    private int getNextStartTime(int time){\\n        if(time % 15 != 0){\\n            return time + (15 - (time % 15));\\n        }else\\n            return time;\\n    }\\n    \\n    private int getMinutes(String s){\\n        String[] parts = s.split(\":\");\\n        int time = 60 * Integer.parseInt(parts[0]);\\n        time += Integer.parseInt(parts[1]);\\n        \\n        return time;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int start = getMinutes(startTime);\\n        int end = getMinutes(finishTime);\\n        \\n        if(end < start){\\n            end += (24 * 60);\\n        }\\n        \\n        start = getNextStartTime(start);\\n        end = getPreviousCloseTime(end);\\n        \\n        return (end - start) / 15;\\n    }\\n    \\n    private int getPreviousCloseTime(int time){\\n        if(time % 15 != 0){\\n            return time - (time % 15);\\n        }else\\n            return time;\\n    }\\n    \\n    private int getNextStartTime(int time){\\n        if(time % 15 != 0){\\n            return time + (15 - (time % 15));\\n        }else\\n            return time;\\n    }\\n    \\n    private int getMinutes(String s){\\n        String[] parts = s.split(\":\");\\n        int time = 60 * Integer.parseInt(parts[0]);\\n        time += Integer.parseInt(parts[1]);\\n        \\n        return time;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1287313,
                "title": "javascript-solution",
                "content": "```\\n/**\\n * @param {string} startTime\\n * @param {string} finishTime\\n * @return {number}\\n */\\nvar numberOfRounds = function(startTime, finishTime) {\\n    function valueOf(time) {\\n        let [hour, minute] = time.split(\\':\\').map(Number)\\n        return hour * 60 + minute\\n    }\\n    const midNightValue = valueOf(\\'24:00\\')\\n    \\n    \\n    function* makeIterator(startTime) {\\n        let value = valueOf(startTime)\\n        const remainder = value % 15\\n        if (remainder)\\n            value += 15 - remainder\\n        \\n        while (value <= midNightValue) {\\n            yield value\\n            value += 15\\n        }\\n            \\n    }\\n    \\n    function count(startTime, finishTime) {\\n        const itor = makeIterator(startTime)\\n        const finishValue = valueOf(finishTime)\\n        \\n        let result = 0\\n        for (const value of itor) {\\n            if (value + 15 <= finishValue) {\\n                result++\\n            } else {\\n                break\\n            }\\n        }\\n        \\n        return result\\n    }\\n    \\n    \\n    if (finishTime > startTime) {\\n        return count(startTime, finishTime)\\n    } else {\\n        return count(startTime, \\'24:00\\') + count(\\'00:00\\', finishTime)\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {string} startTime\\n * @param {string} finishTime\\n * @return {number}\\n */\\nvar numberOfRounds = function(startTime, finishTime) {\\n    function valueOf(time) {\\n        let [hour, minute] = time.split(\\':\\').map(Number)\\n        return hour * 60 + minute\\n    }\\n    const midNightValue = valueOf(\\'24:00\\')\\n    \\n    \\n    function* makeIterator(startTime) {\\n        let value = valueOf(startTime)\\n        const remainder = value % 15\\n        if (remainder)\\n            value += 15 - remainder\\n        \\n        while (value <= midNightValue) {\\n            yield value\\n            value += 15\\n        }\\n            \\n    }\\n    \\n    function count(startTime, finishTime) {\\n        const itor = makeIterator(startTime)\\n        const finishValue = valueOf(finishTime)\\n        \\n        let result = 0\\n        for (const value of itor) {\\n            if (value + 15 <= finishValue) {\\n                result++\\n            } else {\\n                break\\n            }\\n        }\\n        \\n        return result\\n    }\\n    \\n    \\n    if (finishTime > startTime) {\\n        return count(startTime, finishTime)\\n    } else {\\n        return count(startTime, \\'24:00\\') + count(\\'00:00\\', finishTime)\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1287253,
                "title": "c-simple-and-precise-solution-0-ms-fully-explained-solution",
                "content": "1) imagine 24 hour format in a circle like \\n ![image](https://assets.leetcode.com/users/images/7398b6c5-3206-4b34-b43a-979a4b3b18af_1624262638.6507823.png)\\n\\n2) First we convert the given time into minutes, because at last we\\'ll do subtraction so keeping things only in 1 unit will make it easy.\\n3)  24 hour format time actually tells that **how much time has elapsed from starting (00:00) of current day till now**. \\n4)  s=startTime , f=finishTime\\n5)  current day - the day in which s lies.\\n6)  When s <= f, both lie in the same day and both are giving duration w.r.t to same day\\'s starting. \\n7)  And **when s > f then actually f now belongs to next day**, so it shows the **duration elapsed till then from next day\\'s 00:00.** But s shows duration w.r.t to current day\\'s starting. So **to find duration b/w any 2 times they must show duration w.r.t same reference point**. That\\'s why **we\\'ll add 24 hrs (24*60 minutes) to f.** \\n6)  Now both s and f always show duration elapsed w.r.t current day starting. \\n7)  Let\\'s do some math now. Say a is a no. ( / shows actual division here)\\n\\t1.     multiple of m just greater than or equal to a  is (m * ceil(a/m))\\n\\t2.     multiple of m just smaller than or equal to a  is (m * floor(a/m))\\n\\n10. We want multiple of 15 just greater than or equal to s.\\n      And multiple of 15 just smaller than or equal to e.\\n\\t  These give us effective starting and end times.\\n11. Subtract effective start from effective end, and divide by 15.\\n\\nBelow is my code :\\n```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string start, string finish) {\\n        int s = stoi(start.substr(0,2))*60 + stoi(start.substr(3,2)); //start minutes\\n        int f = stoi(finish.substr(0,2))*60 + stoi(finish.substr(3,2));//finish minutes\\n\\n        if(s > f) f += (24*60);//add 24 hrs i.e. 24*60 minutes\\n        \\n        //now s and f show duration w.r.t same reference point\\n        int es = (ceil(s/15.0) * 15); //effective start time in minutes\\n        int ef = (floor(f/15.0) * 15);\\n        \\n        return (ef-es)/15;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string start, string finish) {\\n        int s = stoi(start.substr(0,2))*60 + stoi(start.substr(3,2)); //start minutes\\n        int f = stoi(finish.substr(0,2))*60 + stoi(finish.substr(3,2));//finish minutes\\n\\n        if(s > f) f += (24*60);//add 24 hrs i.e. 24*60 minutes\\n        \\n        //now s and f show duration w.r.t same reference point\\n        int es = (ceil(s/15.0) * 15); //effective start time in minutes\\n        int ef = (floor(f/15.0) * 15);\\n        \\n        return (ef-es)/15;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1287135,
                "title": "c-easy-solution-100-beat",
                "content": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string startTime, string finishTime) {\\n        int v = startTime[3]-\\'0\\';\\n        v=v*10 + (startTime[4]-\\'0\\');\\n        int hr1 = startTime[0]-\\'0\\';\\n        hr1=hr1*10 + (startTime[1]-\\'0\\');\\n        int y = finishTime[3]-\\'0\\';\\n        y=y*10 + (finishTime[4]-\\'0\\');\\n        int hr2 = (finishTime[0]-\\'0\\');\\n        hr2 = hr2*10 + (finishTime[1]-\\'0\\');\\n        vector<int>r;\\n        r.push_back(0);\\n        r.push_back(15);\\n        r.push_back(30);\\n        r.push_back(45);\\n        r.push_back(60);\\n        for(int i=0;i<r.size();i++)\\n        {\\n            if(r[i]<v)\\n            {\\n                continue;\\n            }\\n            else\\n            {\\n                v=r[i];\\n                break;\\n            }\\n        }\\n        if(v==60)\\n        {\\n            hr1=(hr1+1)%24;\\n            v=0;\\n        }\\n        for(int i=0;i<r.size();i++)\\n        {\\n            if(r[i]<y)\\n            {\\n                continue;\\n            }\\n            else if(r[i]==y)\\n            {\\n                break;\\n            }\\n            else if(i-1>0)\\n            {\\n                y=r[i-1];\\n                break;\\n            }\\n            else\\n            {\\n                break;\\n            }\\n        }\\n        int ii = hr2-hr1;\\n        if(ii<0 || (ii==0 && v>y))\\n        {\\n            ii+=24;\\n        }\\n        int dd = ii*60;\\n        dd+=(y-v);\\n        dd=dd/15;\\n        return dd;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string startTime, string finishTime) {\\n        int v = startTime[3]-\\'0\\';\\n        v=v*10 + (startTime[4]-\\'0\\');\\n        int hr1 = startTime[0]-\\'0\\';\\n        hr1=hr1*10 + (startTime[1]-\\'0\\');\\n        int y = finishTime[3]-\\'0\\';\\n        y=y*10 + (finishTime[4]-\\'0\\');\\n        int hr2 = (finishTime[0]-\\'0\\');\\n        hr2 = hr2*10 + (finishTime[1]-\\'0\\');\\n        vector<int>r;\\n        r.push_back(0);\\n        r.push_back(15);\\n        r.push_back(30);\\n        r.push_back(45);\\n        r.push_back(60);\\n        for(int i=0;i<r.size();i++)\\n        {\\n            if(r[i]<v)\\n            {\\n                continue;\\n            }\\n            else\\n            {\\n                v=r[i];\\n                break;\\n            }\\n        }\\n        if(v==60)\\n        {\\n            hr1=(hr1+1)%24;\\n            v=0;\\n        }\\n        for(int i=0;i<r.size();i++)\\n        {\\n            if(r[i]<y)\\n            {\\n                continue;\\n            }\\n            else if(r[i]==y)\\n            {\\n                break;\\n            }\\n            else if(i-1>0)\\n            {\\n                y=r[i-1];\\n                break;\\n            }\\n            else\\n            {\\n                break;\\n            }\\n        }\\n        int ii = hr2-hr1;\\n        if(ii<0 || (ii==0 && v>y))\\n        {\\n            ii+=24;\\n        }\\n        int dd = ii*60;\\n        dd+=(y-v);\\n        dd=dd/15;\\n        return dd;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1287098,
                "title": "1904-deal-hours-mins-separately",
                "content": "---\\n\\nAt first this is easy looking.\\nThen we know its not that easy - if we take wrong route :D\\n\\n---\\n\\n**Algo:**\\n- Intial thought was deal with hours & mins seperately, then I got new ideas which went into wrong directions :D\\n- **Try1**\\n  - 05:01, convert into 501 (5hr 1min), when we reach 560, add +40 as 61 wont be there, so it goes to 600 (6hr 0min)\\n  - Good case of if start time (say 5.30) < endtime (5.45) - PASS\\n  - Reverse case of if start time (say 5.**5**0) > endtime (5.45) - FAIL\\n  - After 10mins, still FAIL, gave up\\n- **Try2**\\n  - Instead of going +1, which is kind of too slow & not good for debugging (as it print more logs), we can try to increment +15\\n  - But to do this, we can need to check last 2 digits - being divisible by 15 - like `(startTime % 100) % 15`\\n  - This works, again reverse case of if start time (say 5.**5**0) > endtime (5.45) - was again difficult, too many logs even for 15 mins gaps\\n  - Good case - PASS\\n  - Reverse case - FAIL again\\n- **Try3**\\n  - Now felt to deal with hours and minutes seperately - This is same as the intial idea :)\\n  - For 05:01, hours=5, minutes is 1\\n  - Code was very little, logs were less, I could clearly see what was happening in 10 lines or so\\n  - For a good case, make it into 3 parts\\n    - say 05:01 to 9:31\\n      - part 1 (intial) : 05:01 to 6:00 ----- this move 1 min to next 15 mins, then its only divide by 15 = 1, then 4-1 = 3 rounds\\n      - part 2 (mid) :   6:00 to 9:00 --------- this is simple 9-6  = 3, and then multiply by 4, 3 * 4 = 12 rounds\\n      - part 3 (final):   9:00 to 9:31 -- similar to intial, but we move the endTime mins back, 31 ->30, then divide by 15 = 30/15=2, then that is same as required rounds = 2\\n  - Good case - Pass\\n  - Reverse case of startTime > endTime, strangely I found that the answer for Good case came out to be `negative` for Reverse case, so I though to add something, that something was how many rounds can be in total of 24 hours ? 24 * 4 per hours = 96, so I have added `96` to that `negative`\\n  - Reverse case - Pass - Just by recognising what to add to `negative`\\n  - Thought I had to do a lot of work for negative again, but it was already solved.\\n\\nLesson learnt - Write a program that produces less logs, so it can be debugged/ verified easily.\\n\\nHope it is simple to understand.\\n\\n---\\n\\n```\\nvar numberOfRounds = function(startTime, endTime) {\\n    let [shr, smin] = (startTime.split(\":\").map(x => +x))\\n    let [ehr, emin] = (endTime.split(\":\").map(x => +x))\\n\\n    let reverse = false;\\n    if (shr > ehr || (shr === ehr && smin > emin))\\n        reverse = true;\\n\\n    // in between rounds\\n    let inbet = (ehr - (shr + 1)) * 4\\n\\n    // initial rounds\\n    smin =\\n        Math.trunc(smin / 15) +\\n        ((smin / 15 !== Math.trunc(smin / 15)) ? 1 : 0)\\n    smin = 4 - smin\\n\\n    // final rounds\\n    emin = Math.trunc(emin / 15);\\n\\n    // answer\\n    let ans = inbet + smin + emin;\\n    return reverse ? 96 + ans : ans\\n}\\n```\\n\\n---\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar numberOfRounds = function(startTime, endTime) {\\n    let [shr, smin] = (startTime.split(\":\").map(x => +x))\\n    let [ehr, emin] = (endTime.split(\":\").map(x => +x))\\n\\n    let reverse = false;\\n    if (shr > ehr || (shr === ehr && smin > emin))\\n        reverse = true;\\n\\n    // in between rounds\\n    let inbet = (ehr - (shr + 1)) * 4\\n\\n    // initial rounds\\n    smin =\\n        Math.trunc(smin / 15) +\\n        ((smin / 15 !== Math.trunc(smin / 15)) ? 1 : 0)\\n    smin = 4 - smin\\n\\n    // final rounds\\n    emin = Math.trunc(emin / 15);\\n\\n    // answer\\n    let ans = inbet + smin + emin;\\n    return reverse ? 96 + ans : ans\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1286956,
                "title": "c-solution",
                "content": "Time O(1), Space O(1)\\n```\\n    public int NumberOfRounds(string startTime, string finishTime) {\\n        int sh=int.Parse(startTime.Substring(0,2));\\n        int sm=int.Parse(startTime.Substring(3,2));\\n        int fh=int.Parse(finishTime.Substring(0,2));\\n        int fm=int.Parse(finishTime.Substring(3,2));\\n        int h=sh<=fh?fh-sh:fh+24-sh;\\n        if(sh==fh&&fm<sm)h=24;\\n        int m=fm/15-(sm+14)/15;\\n        return h*4+m;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int NumberOfRounds(string startTime, string finishTime) {\\n        int sh=int.Parse(startTime.Substring(0,2));\\n        int sm=int.Parse(startTime.Substring(3,2));\\n        int fh=int.Parse(finishTime.Substring(0,2));\\n        int fm=int.Parse(finishTime.Substring(3,2));\\n        int h=sh<=fh?fh-sh:fh+24-sh;\\n        if(sh==fh&&fm<sm)h=24;\\n        int m=fm/15-(sm+14)/15;\\n        return h*4+m;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1286795,
                "title": "java",
                "content": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int hr1 = Integer.valueOf(startTime.substring(0,2));\\n        int hr2 = Integer.valueOf(finishTime.substring(0,2));\\n        if(startTime.compareTo(finishTime) > 0) hr2 += 24;\\n        int endMin = Integer.valueOf(finishTime.substring(3));\\n        endMin -= endMin%15;\\n        int startMin = Integer.valueOf(startTime.substring(3));\\n        startMin += startMin%15!=0 ? 15-startMin%15 : 0;\\n        if(hr1==hr2) \\n            return endMin>startMin ? (endMin-startMin)/15 : 0;\\n        else\\n            return (hr2-hr1-1)*4 + (60-startMin)/15 + endMin/15;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int hr1 = Integer.valueOf(startTime.substring(0,2));\\n        int hr2 = Integer.valueOf(finishTime.substring(0,2));\\n        if(startTime.compareTo(finishTime) > 0) hr2 += 24;\\n        int endMin = Integer.valueOf(finishTime.substring(3));\\n        endMin -= endMin%15;\\n        int startMin = Integer.valueOf(startTime.substring(3));\\n        startMin += startMin%15!=0 ? 15-startMin%15 : 0;\\n        if(hr1==hr2) \\n            return endMin>startMin ? (endMin-startMin)/15 : 0;\\n        else\\n            return (hr2-hr1-1)*4 + (60-startMin)/15 + endMin/15;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1286749,
                "title": "go-golang-simple-math",
                "content": "```\\nfunc numberOfRounds(startTime string, finishTime string) int {\\n\\tstartH, _ := strconv.Atoi(startTime[:2])\\n\\tstartM, _ := strconv.Atoi(startTime[3:])\\n\\tfinishH, _ := strconv.Atoi(finishTime[:2])\\n\\tfinishM, _ := strconv.Atoi(finishTime[3:])\\n\\n\\tstart := startH*60 + startM\\n\\tfinish := finishH*60 + finishM\\n\\tif finish < start {\\n\\t\\tfinish += 1440\\n\\t}\\n\\n\\tif remainder := finish % 15; remainder != 0 {\\n\\t\\tfinish -= remainder\\n\\t}\\n\\n\\treturn (finish - start) / 15\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nfunc numberOfRounds(startTime string, finishTime string) int {\\n\\tstartH, _ := strconv.Atoi(startTime[:2])\\n\\tstartM, _ := strconv.Atoi(startTime[3:])\\n\\tfinishH, _ := strconv.Atoi(finishTime[:2])\\n\\tfinishM, _ := strconv.Atoi(finishTime[3:])\\n\\n\\tstart := startH*60 + startM\\n\\tfinish := finishH*60 + finishM\\n\\tif finish < start {\\n\\t\\tfinish += 1440\\n\\t}\\n\\n\\tif remainder := finish % 15; remainder != 0 {\\n\\t\\tfinish -= remainder\\n\\t}\\n\\n\\treturn (finish - start) / 15\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1286564,
                "title": "c-simple-brute-approach-100-time",
                "content": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string st, string fi) {\\n        int h1=0, m1=0, h2=0, m2=0, ans=0;\\n\\t\\t//Extracting the hour and minute individually\\n        h1 = st[0]-\\'0\\';\\n        h1 = h1*10 + (st[1]-\\'0\\');\\n        m1 = st[3]-\\'0\\';\\n        m1 = m1*10 + (st[4]-\\'0\\');\\n        h2 = fi[0]-\\'0\\';\\n        h2 = h2*10 + (fi[1]-\\'0\\');\\n        m2 = fi[3]-\\'0\\';\\n        m2 = m2*10 + (fi[4]-\\'0\\');\\n\\t\\t//If start time is arithmetically greater than end time, we need to adjust by adding 24 hours to end time\\n\\t\\t//this would not affect the result - food for thought ;)\\n        if(h1>h2 || h1==h2 && m1>m2) h2+=24;        \\n\\t\\t//approximating m1 and m2 to the nearest 15th minute\\n        m1 += (m1%15==0 ? 0: 15-m1%15);\\n        m2 -= (m2%15==0 ? 0 : m2%15);\\n\\t\\t//now that we have all the necessary information, we convert time (hours and minutes) to minutes (imagine a time system which only functions on minutes, agnostic of everything else)\\n        int time1 = h1*4 + m1/15, time2 = h2*4 + m2/15;\\n        return (time2-time1<0 ? 0 : time2-time1);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string st, string fi) {\\n        int h1=0, m1=0, h2=0, m2=0, ans=0;\\n\\t\\t//Extracting the hour and minute individually\\n        h1 = st[0]-\\'0\\';\\n        h1 = h1*10 + (st[1]-\\'0\\');\\n        m1 = st[3]-\\'0\\';\\n        m1 = m1*10 + (st[4]-\\'0\\');\\n        h2 = fi[0]-\\'0\\';\\n        h2 = h2*10 + (fi[1]-\\'0\\');\\n        m2 = fi[3]-\\'0\\';\\n        m2 = m2*10 + (fi[4]-\\'0\\');\\n\\t\\t//If start time is arithmetically greater than end time, we need to adjust by adding 24 hours to end time\\n\\t\\t//this would not affect the result - food for thought ;)\\n        if(h1>h2 || h1==h2 && m1>m2) h2+=24;        \\n\\t\\t//approximating m1 and m2 to the nearest 15th minute\\n        m1 += (m1%15==0 ? 0: 15-m1%15);\\n        m2 -= (m2%15==0 ? 0 : m2%15);\\n\\t\\t//now that we have all the necessary information, we convert time (hours and minutes) to minutes (imagine a time system which only functions on minutes, agnostic of everything else)\\n        int time1 = h1*4 + m1/15, time2 = h2*4 + m2/15;\\n        return (time2-time1<0 ? 0 : time2-time1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1286562,
                "title": "python-solution-hope-this-helps-someone",
                "content": "```\\n\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:        \\n        start_time_in_minutes = int(startTime[0:2]) * 60 + int(startTime[3:5])\\n        finish_time_in_minutes = int(finishTime[0:2]) * 60 + int(finishTime[3:5])\\n        \\n        if start_time_in_minutes > finish_time_in_minutes:\\n            finish_time_in_minutes += (24*60)\\n\\n        return math.floor(finish_time_in_minutes / 15) - math.ceil(start_time_in_minutes / 15)\\n```",
                "solutionTags": [],
                "code": "```\\n\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:        \\n        start_time_in_minutes = int(startTime[0:2]) * 60 + int(startTime[3:5])\\n        finish_time_in_minutes = int(finishTime[0:2]) * 60 + int(finishTime[3:5])\\n        \\n        if start_time_in_minutes > finish_time_in_minutes:\\n            finish_time_in_minutes += (24*60)\\n\\n        return math.floor(finish_time_in_minutes / 15) - math.ceil(start_time_in_minutes / 15)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1286515,
                "title": "c-1904-the-number-of-full-rounds-you-have-played",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string startTime, string finishTime) {\\n        int ts = 60 * stoi(startTime.substr(0, 2)) + stoi(startTime.substr(3, 2)); \\n        int tf = 60 * stoi(finishTime.substr(0, 2)) + stoi(finishTime.substr(3, 2)); \\n        if (0 <= tf - ts && tf - ts < 15) return 0; \\n        return tf/15 - (ts + 14)/15 + (ts > tf)*96; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string startTime, string finishTime) {\\n        int ts = 60 * stoi(startTime.substr(0, 2)) + stoi(startTime.substr(3, 2)); \\n        int tf = 60 * stoi(finishTime.substr(0, 2)) + stoi(finishTime.substr(3, 2)); \\n        if (0 <= tf - ts && tf - ts < 15) return 0; \\n        return tf/15 - (ts + 14)/15 + (ts > tf)*96; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1286304,
                "title": "javascript-easy-to-understand-solution",
                "content": "```\\n/**\\n * @param {string} startTime\\n * @param {string} finishTime\\n * @return {number}\\n */\\nvar numberOfRounds = function(startTime, finishTime) {    \\n    const [startHour, startMin] = startTime.split(\\':\\');\\n    const [finHour, finMin] = finishTime.split(\\':\\');  \\n    let overNight = false;\\n\\t\\n\\t//check if overnight calcualations need to be handled\\n    if(+finHour < +startHour || ( +finHour === +startHour && +finMin < +startMin) )\\n        overNight = true;\\n   \\n    if(!overNight)\\n        return Helper(+startHour, +startMin, +finHour, +finMin);    \\n    else{\\n\\t\\t// if overnight then I divide into two parts for easy calcuation\\n        let c = 0;\\n        c += Helper(+startHour, +startMin, 24, 0);     \\n        c += Helper(0,0, +finHour, +finMin);\\n        return c;\\n    }\\n};\\n\\nconst Helper = (startHour, startMin, finHour, finMin) => {\\n\\t// adjust initial startMin\\n    let count = 0;  \\n    if(startMin === 0)\\n        startMin = 0;\\n     else if(startMin <= 15)\\n        startMin = 15;\\n     else if(startMin <= 30)\\n        startMin = 30;\\n    else if(startMin <= 45)\\n        startMin = 45;  \\n    else if(startMin <= 59 ){\\n        startMin = 0;\\n        startHour = (startHour + 1) % 25;\\n    }\\n \\n\\t // run while until startTime is equal to finishTime\\n    while(finHour === startHour?startMin < finMin: (finHour >= startHour  ) ){      \\n        startMin += 15;\\n        count++;\\n        startMin =  startMin % 60;\\n        if(startMin === 0)\\n            startHour = (startHour + 1) % 25;\\n        \\n        if((finHour === startHour && finMin < startMin) || finHour < startHour) {\\n            count--;\\n            break;\\n        }           \\n    }        \\n    return count;        \\n}\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {string} startTime\\n * @param {string} finishTime\\n * @return {number}\\n */\\nvar numberOfRounds = function(startTime, finishTime) {    \\n    const [startHour, startMin] = startTime.split(\\':\\');\\n    const [finHour, finMin] = finishTime.split(\\':\\');  \\n    let overNight = false;\\n\\t\\n\\t//check if overnight calcualations need to be handled\\n    if(+finHour < +startHour || ( +finHour === +startHour && +finMin < +startMin) )\\n        overNight = true;\\n   \\n    if(!overNight)\\n        return Helper(+startHour, +startMin, +finHour, +finMin);    \\n    else{\\n\\t\\t// if overnight then I divide into two parts for easy calcuation\\n        let c = 0;\\n        c += Helper(+startHour, +startMin, 24, 0);     \\n        c += Helper(0,0, +finHour, +finMin);\\n        return c;\\n    }\\n};\\n\\nconst Helper = (startHour, startMin, finHour, finMin) => {\\n\\t// adjust initial startMin\\n    let count = 0;  \\n    if(startMin === 0)\\n        startMin = 0;\\n     else if(startMin <= 15)\\n        startMin = 15;\\n     else if(startMin <= 30)\\n        startMin = 30;\\n    else if(startMin <= 45)\\n        startMin = 45;  \\n    else if(startMin <= 59 ){\\n        startMin = 0;\\n        startHour = (startHour + 1) % 25;\\n    }\\n \\n\\t // run while until startTime is equal to finishTime\\n    while(finHour === startHour?startMin < finMin: (finHour >= startHour  ) ){      \\n        startMin += 15;\\n        count++;\\n        startMin =  startMin % 60;\\n        if(startMin === 0)\\n            startHour = (startHour + 1) % 25;\\n        \\n        if((finHour === startHour && finMin < startMin) || finHour < startHour) {\\n            count--;\\n            break;\\n        }           \\n    }        \\n    return count;        \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1286124,
                "title": "golang-solution",
                "content": "```\\nfunc numberOfRounds(startTime string, finishTime string) int {\\n    //convert to minutes:\\n    st := strings.Split(startTime,\":\")[0]+\"h\"+strings.Split(startTime,\":\")[1]+\"m\"\\n    ft := strings.Split(finishTime,\":\")[0]+\"h\"+strings.Split(finishTime,\":\")[1]+\"m\"\\n    \\n    startInMinutes, _ := time.ParseDuration(st)\\n    sminutes := startInMinutes.Minutes()\\n    \\t\\n\\tfinishInMinutes, _ := time.ParseDuration(ft)\\n    fminutes := finishInMinutes.Minutes()\\n    \\n    s:=int(sminutes)\\n    f:=int(fminutes)\\n    \\n    if s>f {\\n        f+=1440\\n    }\\n    if (s%15) != 0 {\\n        s+=15-(s%15)\\n    }\\n    \\n    f-=(f%15)\\n    return (f-s)/15\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nfunc numberOfRounds(startTime string, finishTime string) int {\\n    //convert to minutes:\\n    st := strings.Split(startTime,\":\")[0]+\"h\"+strings.Split(startTime,\":\")[1]+\"m\"\\n    ft := strings.Split(finishTime,\":\")[0]+\"h\"+strings.Split(finishTime,\":\")[1]+\"m\"\\n    \\n    startInMinutes, _ := time.ParseDuration(st)\\n    sminutes := startInMinutes.Minutes()\\n    \\t\\n\\tfinishInMinutes, _ := time.ParseDuration(ft)\\n    fminutes := finishInMinutes.Minutes()\\n    \\n    s:=int(sminutes)\\n    f:=int(fminutes)\\n    \\n    if s>f {\\n        f+=1440\\n    }\\n    if (s%15) != 0 {\\n        s+=15-(s%15)\\n    }\\n    \\n    f-=(f%15)\\n    return (f-s)/15\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1286099,
                "title": "detailed-java-explanation-on-page-and-with-comments",
                "content": "**Please Upvote if you liked the post**\\n*On Page Explanation is mine based on code of original author* \\nCode taken from : https://leetcode.com/sting__112/\\n\\n```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int start = timeInMinute(startTime); //convert start time to minutes\\n        int end = timeInMinute(finishTime); //Convert end time to minutes\\n        \\n        if(end < start) //it means we have already played 1 day i.e 24*60 minutes\\n            end += 24*60;\\n        \\n        if(start % 15 != 0)\\n            start += 15 - (start % 15); // make the starting point from the multiple of 15\\n        \\n        if(end % 15 != 0)\\n            end -= end % 15; // make the ending point multiple of 15\\n        \\n        return (end-start)/15;\\n        \\n    }\\n    \\n    private int timeInMinute(String s){\\n        int h = Integer.parseInt(s.substring(0,2));\\n        int m = Integer.parseInt(s.substring(3));\\n        \\n        return (h*60)+m;\\n    }\\n}\\nLINK TO FULL PAGE EXPLANATION WITH DIAGRAM GIVEN BELOW\\n![image](https://assets.leetcode.com/users/images/c938788e-230f-40ee-a581-62ca7dcfc10a_1624213857.144349.jpeg)\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        int start = timeInMinute(startTime); //convert start time to minutes\\n        int end = timeInMinute(finishTime); //Convert end time to minutes\\n        \\n        if(end < start) //it means we have already played 1 day i.e 24*60 minutes\\n            end += 24*60;\\n        \\n        if(start % 15 != 0)\\n            start += 15 - (start % 15); // make the starting point from the multiple of 15\\n        \\n        if(end % 15 != 0)\\n            end -= end % 15; // make the ending point multiple of 15\\n        \\n        return (end-start)/15;\\n        \\n    }\\n    \\n    private int timeInMinute(String s){\\n        int h = Integer.parseInt(s.substring(0,2));\\n        int m = Integer.parseInt(s.substring(3));\\n        \\n        return (h*60)+m;\\n    }\\n}\\nLINK TO FULL PAGE EXPLANATION WITH DIAGRAM GIVEN BELOW\\n![image](https://assets.leetcode.com/users/images/c938788e-230f-40ee-a581-62ca7dcfc10a_1624213857.144349.jpeg)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1286059,
                "title": "java",
                "content": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        String[] start = startTime.split(\":\");\\n        int a = Integer.valueOf(start[0]);\\n        int b = Integer.valueOf(start[1]);\\n        String[] end = finishTime.split(\":\");\\n        int c = Integer.valueOf(end[0]);\\n        int d = Integer.valueOf(end[1]);\\n        int hour = 0;\\n        int res = 0;\\n        List<Pair<Integer, Integer>> list = new ArrayList<>();\\n        list.add(new Pair(0, 15));\\n        list.add(new Pair(15, 30));\\n        list.add(new Pair(30, 45));\\n        list.add(new Pair(45, 60));\\n        if(a == c && b <= d){\\n            for(Pair<Integer, Integer> p : list){\\n                if(b <= p.getKey() && d >= p.getValue()){\\n                    res++;\\n                }\\n            }\\n            return res;\\n        }else{\\n            Pair<Integer, Integer> p1 = new Pair(b, 60);\\n            Pair<Integer, Integer> p2 = new Pair(0, d);\\n            for(Pair<Integer, Integer> p : list){\\n                if(p1.getKey() <= p.getKey() && p1.getValue() >= p.getValue()){\\n                    res++;\\n                }\\n                if(p2.getKey() <= p.getKey() && p2.getValue() >= p.getValue()){\\n                    res++;\\n                }\\n            }\\n            a++;\\n        }\\n        \\n        if(a < c){\\n            res += (c - a) * 4;\\n        }else if(a > c){\\n            res += (24 - a + c) * 4;\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        String[] start = startTime.split(\":\");\\n        int a = Integer.valueOf(start[0]);\\n        int b = Integer.valueOf(start[1]);\\n        String[] end = finishTime.split(\":\");\\n        int c = Integer.valueOf(end[0]);\\n        int d = Integer.valueOf(end[1]);\\n        int hour = 0;\\n        int res = 0;\\n        List<Pair<Integer, Integer>> list = new ArrayList<>();\\n        list.add(new Pair(0, 15));\\n        list.add(new Pair(15, 30));\\n        list.add(new Pair(30, 45));\\n        list.add(new Pair(45, 60));\\n        if(a == c && b <= d){\\n            for(Pair<Integer, Integer> p : list){\\n                if(b <= p.getKey() && d >= p.getValue()){\\n                    res++;\\n                }\\n            }\\n            return res;\\n        }else{\\n            Pair<Integer, Integer> p1 = new Pair(b, 60);\\n            Pair<Integer, Integer> p2 = new Pair(0, d);\\n            for(Pair<Integer, Integer> p : list){\\n                if(p1.getKey() <= p.getKey() && p1.getValue() >= p.getValue()){\\n                    res++;\\n                }\\n                if(p2.getKey() <= p.getKey() && p2.getValue() >= p.getValue()){\\n                    res++;\\n                }\\n            }\\n            a++;\\n        }\\n        \\n        if(a < c){\\n            res += (c - a) * 4;\\n        }else if(a > c){\\n            res += (24 - a + c) * 4;\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1285835,
                "title": "python3-accumulate-independently",
                "content": "```\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        \\n        \\n        # transfer to hour and minute\\n        # accumulate them independently\\n        # if finishTime is smaller than startTime, add 24 hour to finishTime\\n        \\n        dict_time_diff = {0: 0, 15: 1, 30: 2, 45: 3, 61:4}\\n          \\n        ans = 0\\n                          \\n        hour_start = int(startTime.split(\":\")[0])\\n        min_start = int(startTime.split(\":\")[1])\\n                          \\n        hour_end = int(finishTime.split(\":\")[0])\\n        min_end = int(finishTime.split(\":\")[1])\\n               \\n        if hour_end*60 + min_end < hour_start * 60 + min_start:    #  if finishTime is smaller than startTime, add 24 hour to finishTime\\n            hour_end += 24\\n                 \\n        # for hour\\n        ans += 4*(hour_end - hour_start)\\n                          \\n        # for min         \\n        begin_indx = 0\\n        begin_flag = True\\n        \\n        end_indx = 0\\n        end_flag = True\\n        for k, v in dict_time_diff.items():\\n            if min_start <= k and begin_flag:\\n                begin_indx = v\\n                begin_flag = False\\n                \\n            if min_end < k and end_flag:\\n                end_indx = v-1\\n                end_flag = False\\n        \\n        #print(\"end_indx: \", end_indx, begin_indx)\\n        ans += end_indx - begin_indx\\n        \\n        return ans\\n\\n        \\n                       \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        \\n        \\n        # transfer to hour and minute\\n        # accumulate them independently\\n        # if finishTime is smaller than startTime, add 24 hour to finishTime\\n        \\n        dict_time_diff = {0: 0, 15: 1, 30: 2, 45: 3, 61:4}\\n          \\n        ans = 0\\n                          \\n        hour_start = int(startTime.split(\":\")[0])\\n        min_start = int(startTime.split(\":\")[1])\\n                          \\n        hour_end = int(finishTime.split(\":\")[0])\\n        min_end = int(finishTime.split(\":\")[1])\\n               \\n        if hour_end*60 + min_end < hour_start * 60 + min_start:    #  if finishTime is smaller than startTime, add 24 hour to finishTime\\n            hour_end += 24\\n                 \\n        # for hour\\n        ans += 4*(hour_end - hour_start)\\n                          \\n        # for min         \\n        begin_indx = 0\\n        begin_flag = True\\n        \\n        end_indx = 0\\n        end_flag = True\\n        for k, v in dict_time_diff.items():\\n            if min_start <= k and begin_flag:\\n                begin_indx = v\\n                begin_flag = False\\n                \\n            if min_end < k and end_flag:\\n                end_indx = v-1\\n                end_flag = False\\n        \\n        #print(\"end_indx: \", end_indx, begin_indx)\\n        ans += end_indx - begin_indx\\n        \\n        return ans\\n\\n        \\n                       \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1285669,
                "title": "c-solution-100-faster-0ms",
                "content": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string startTime, string finishTime) {\\n        string startHour = \"\";\\n        startHour.push_back(startTime[0]);\\n        startHour.push_back(startTime[1]);\\n        int sh = stoi(startHour);\\n        string startMin = \"\";\\n        startMin.push_back(startTime[3]);\\n        startMin.push_back(startTime[4]);\\n        int sm = stoi(startMin);\\n        string EndHour = \"\";\\n        EndHour.push_back(finishTime[0]);\\n        EndHour.push_back(finishTime[1]);\\n        int eh = stoi(EndHour);\\n        string endMin = \"\";\\n        endMin.push_back(finishTime[3]);\\n        endMin.push_back(finishTime[4]);\\n        int em = stoi(endMin);\\n        \\n        int min;\\n        if(sm == 0) {\\n            min = 0;\\n        }\\n        else if(sm < 15) {\\n            min = 1;\\n        }\\n        else if(sm == 15) {\\n            min = 2;\\n        }\\n        else if(sm < 30) {\\n            min = 3;\\n        }\\n        else if(sm == 30) {\\n            min = 4;\\n        }\\n        else if(sm < 45) {\\n            min = 5;\\n        }\\n        else if(sm == 45) {\\n            min = 6;\\n        }\\n        else if(sm < 60) {\\n            min = 7;\\n        }\\n        int emin;\\n        if(em == 0) {\\n            emin = 0;\\n        }\\n        else if(em < 15) {\\n            emin = 1;\\n        }\\n        else if(em == 15) {\\n            emin = 2;\\n        }\\n        else if(em < 30) {\\n            emin = 3;\\n        }\\n        else if(em == 30) {\\n            emin = 4;\\n        }\\n        else if(em < 45) {\\n            emin = 5;\\n        }\\n        else if(em == 45) {\\n            emin = 6;\\n        }\\n        else if(em < 60) {\\n            emin = 7;\\n        }\\n        if(eh == sh) {\\n            if(em > sm) {\\n                emin--;\\n                return (emin-min)/2;\\n            }\\n            int ans = 4*23;\\n            ans += (8-min)/2;\\n            ans += emin/2;\\n            return ans;\\n        }\\n        if(eh > sh) {\\n            int ans=0;\\n            ans += 4*(eh-sh-1);\\n            ans += (8-min)/2;\\n            ans += emin/2;\\n            return ans;\\n        }\\n        int ans = 0;\\n        ans += (8-min)/2;\\n        ans += emin/2;\\n        ans += 4*(23-sh);\\n        ans += 4*(eh);\\n        return ans;\\n         \\n    }\\n   \\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int numberOfRounds(string startTime, string finishTime) {\\n        string startHour = \"\";\\n        startHour.push_back(startTime[0]);\\n        startHour.push_back(startTime[1]);\\n        int sh = stoi(startHour);\\n        string startMin = \"\";\\n        startMin.push_back(startTime[3]);\\n        startMin.push_back(startTime[4]);\\n        int sm = stoi(startMin);\\n        string EndHour = \"\";\\n        EndHour.push_back(finishTime[0]);\\n        EndHour.push_back(finishTime[1]);\\n        int eh = stoi(EndHour);\\n        string endMin = \"\";\\n        endMin.push_back(finishTime[3]);\\n        endMin.push_back(finishTime[4]);\\n        int em = stoi(endMin);\\n        \\n        int min;\\n        if(sm == 0) {\\n            min = 0;\\n        }\\n        else if(sm < 15) {\\n            min = 1;\\n        }\\n        else if(sm == 15) {\\n            min = 2;\\n        }\\n        else if(sm < 30) {\\n            min = 3;\\n        }\\n        else if(sm == 30) {\\n            min = 4;\\n        }\\n        else if(sm < 45) {\\n            min = 5;\\n        }\\n        else if(sm == 45) {\\n            min = 6;\\n        }\\n        else if(sm < 60) {\\n            min = 7;\\n        }\\n        int emin;\\n        if(em == 0) {\\n            emin = 0;\\n        }\\n        else if(em < 15) {\\n            emin = 1;\\n        }\\n        else if(em == 15) {\\n            emin = 2;\\n        }\\n        else if(em < 30) {\\n            emin = 3;\\n        }\\n        else if(em == 30) {\\n            emin = 4;\\n        }\\n        else if(em < 45) {\\n            emin = 5;\\n        }\\n        else if(em == 45) {\\n            emin = 6;\\n        }\\n        else if(em < 60) {\\n            emin = 7;\\n        }\\n        if(eh == sh) {\\n            if(em > sm) {\\n                emin--;\\n                return (emin-min)/2;\\n            }\\n            int ans = 4*23;\\n            ans += (8-min)/2;\\n            ans += emin/2;\\n            return ans;\\n        }\\n        if(eh > sh) {\\n            int ans=0;\\n            ans += 4*(eh-sh-1);\\n            ans += (8-min)/2;\\n            ans += emin/2;\\n            return ans;\\n        }\\n        int ans = 0;\\n        ans += (8-min)/2;\\n        ans += emin/2;\\n        ans += 4*(23-sh);\\n        ans += 4*(eh);\\n        return ans;\\n         \\n    }\\n   \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1285666,
                "title": "modular-readable-python3-code",
                "content": "1. Round up the start time to the nearest 15 minute interval\\n2. Round down the finish time to the nearest 15 minute interval\\n3. Difference is calculated as (difference in hours*4) + (difference in minutes/15)\\n4. edge cases:\\n\\ta. rounding up start time\\n\\tb. finish time < start time\\n\\n```python\\ndef roundUp(h, m):\\n    if m % 15 == 0:\\n        return h, m\\n    if m > 45:\\n        if h == 23:\\n            return 0, 0\\n        return h+1, 0\\n    return h, m+(15-(m % 15))\\n\\n\\ndef roundDown(h, m):\\n    if m % 15 == 0:\\n        return h, m\\n    if m < 15:\\n        return h, 0\\n    return h, m-(m % 15)\\n\\n\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        h_s, m_s = list(map(int, startTime.split(\":\")))\\n        h_f, m_f = list(map(int, finishTime.split(\":\")))\\n        \\n\\t\\th_start, m_start = roundUp(h_s, m_s)\\n        h_finish, m_finish = roundDown(h_f, m_f)\\n        \\n\\t\\trounds = (h_finish-h_start)*4 + (m_finish-m_start)/15\\n        \\n\\t\\tif rounds < 0:\\n            return int((24*4)+rounds)\\n        return int(rounds)\\n\\n```",
                "solutionTags": [],
                "code": "```python\\ndef roundUp(h, m):\\n    if m % 15 == 0:\\n        return h, m\\n    if m > 45:\\n        if h == 23:\\n            return 0, 0\\n        return h+1, 0\\n    return h, m+(15-(m % 15))\\n\\n\\ndef roundDown(h, m):\\n    if m % 15 == 0:\\n        return h, m\\n    if m < 15:\\n        return h, 0\\n    return h, m-(m % 15)\\n\\n\\nclass Solution:\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        h_s, m_s = list(map(int, startTime.split(\":\")))\\n        h_f, m_f = list(map(int, finishTime.split(\":\")))\\n        \\n\\t\\th_start, m_start = roundUp(h_s, m_s)\\n        h_finish, m_finish = roundDown(h_f, m_f)\\n        \\n\\t\\trounds = (h_finish-h_start)*4 + (m_finish-m_start)/15\\n        \\n\\t\\tif rounds < 0:\\n            return int((24*4)+rounds)\\n        return int(rounds)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1285595,
                "title": "long-python-solution-bad-maths",
                "content": "```\\ndef numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        time1 = list(map(int,startTime.split(\":\")))\\n        time2 = list(map(int,finishTime.split(\":\")))\\n        \\n        if time1[0] == time2[0]:\\n            if time1[1]>time2[1]:\\n                startM = 60 - time1[1]\\n                endM = time2[1]\\n                return 23 * 4 + startM//15 + endM//15\\n            else:\\n                if time1[1]%15 == 0:\\n                    return time2[1]//15 - time1[1]//15\\n                else:\\n                    return time2[1]//15 - time1[1]//15 - 1\\n            \\n        \\n        if time1[0]>time2[0]:\\n            totalHours = 24-time1[0]-1+time2[0]\\n        else:\\n            totalHours = time2[0]-time1[0]-1\\n            \\n            \\n        startMinutes = 60 - time1[1]\\n        endMinutes = time2[1]\\n        \\n        totalRounds = totalHours*4 + startMinutes//15 + endMinutes//15\\n        return totalRounds\\n```",
                "solutionTags": [],
                "code": "```\\ndef numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        time1 = list(map(int,startTime.split(\":\")))\\n        time2 = list(map(int,finishTime.split(\":\")))\\n        \\n        if time1[0] == time2[0]:\\n            if time1[1]>time2[1]:\\n                startM = 60 - time1[1]\\n                endM = time2[1]\\n                return 23 * 4 + startM//15 + endM//15\\n            else:\\n                if time1[1]%15 == 0:\\n                    return time2[1]//15 - time1[1]//15\\n                else:\\n                    return time2[1]//15 - time1[1]//15 - 1\\n            \\n        \\n        if time1[0]>time2[0]:\\n            totalHours = 24-time1[0]-1+time2[0]\\n        else:\\n            totalHours = time2[0]-time1[0]-1\\n            \\n            \\n        startMinutes = 60 - time1[1]\\n        endMinutes = time2[1]\\n        \\n        totalRounds = totalHours*4 + startMinutes//15 + endMinutes//15\\n        return totalRounds\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1285467,
                "title": "java-simple-solution",
                "content": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        \\n        Integer startHH = Integer.parseInt(startTime.substring(0,2));\\n        Integer startMM = Integer.parseInt(startTime.substring(3,5));\\n        \\n        Integer finishHH = Integer.parseInt(finishTime.substring(0,2));\\n        Integer finishMM = Integer.parseInt(finishTime.substring(3,5));\\n        \\n        int start = startHH * 60 + startMM;\\n        int end = finishHH * 60 + finishMM;\\n        \\n        if(start>end)\\n        {\\n            //Because 2nd day as well played.\\n            end =  end + (24* 60);\\n        }\\n        \\n        return (int) Math.floor(end / 15.00) - (int) Math.ceil(start / 15.00);\\n        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int numberOfRounds(String startTime, String finishTime) {\\n        \\n        Integer startHH = Integer.parseInt(startTime.substring(0,2));\\n        Integer startMM = Integer.parseInt(startTime.substring(3,5));\\n        \\n        Integer finishHH = Integer.parseInt(finishTime.substring(0,2));\\n        Integer finishMM = Integer.parseInt(finishTime.substring(3,5));\\n        \\n        int start = startHH * 60 + startMM;\\n        int end = finishHH * 60 + finishMM;\\n        \\n        if(start>end)\\n        {\\n            //Because 2nd day as well played.\\n            end =  end + (24* 60);\\n        }\\n        \\n        return (int) Math.floor(end / 15.00) - (int) Math.ceil(start / 15.00);\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1285442,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int find(string s)\\n    {\\n        return ((s[0]-\\'0\\')*10+s[1]-\\'0\\')*60+(s[3]-\\'0\\')*10+s[4]-\\'0\\';\\n    }\\n    int numberOfRounds(string s, string f)\\n    {\\n        int val1=find(s);\\n        int val2=find(f);\\n        if(val1>val2)\\n        {\\n            val2=val2+1440;\\n        }\\n        int count=0;\\n        while(val1!=val2)\\n        {\\n            if(val1%15==0&&val1+15<=val2)\\n            {\\n                count++;\\n            }\\n            val1++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int find(string s)\\n    {\\n        return ((s[0]-\\'0\\')*10+s[1]-\\'0\\')*60+(s[3]-\\'0\\')*10+s[4]-\\'0\\';\\n    }\\n    int numberOfRounds(string s, string f)\\n    {\\n        int val1=find(s);\\n        int val2=find(f);\\n        if(val1>val2)\\n        {\\n            val2=val2+1440;\\n        }\\n        int count=0;\\n        while(val1!=val2)\\n        {\\n            if(val1%15==0&&val1+15<=val2)\\n            {\\n                count++;\\n            }\\n            val1++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1285419,
                "title": "simple-python3-solution-faster-than-100",
                "content": "class Solution:\\n\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        h1=int(startTime[:2])\\n        s1=int(startTime[3:])\\n        h2=int(finishTime[:2])\\n        s2=int(finishTime[3:])\\n        while(s1%15!=0):\\n            s1+=1\\n        while(s2%15!=0):\\n            s2-=1\\n        #print(h1,s1,\" \",h2,s2)\\n        if h1>h2 or (h1>=h2 and s1>s2):\\n            h2+=24\\n            #print(h2)\\n            #print(\"j\")\\n            \\n        \\n        if s1<=s2:\\n            c=(s2-s1)//15\\n            #print(c)\\n        else:\\n            s2=s2+60\\n            h2=h2-1\\n            c=(s2-s1)//15\\n            #print(c,h1,s1,h2,s2)\\n            \\n        x=(h2-h1)*4\\n        return c+x",
                "solutionTags": [],
                "code": "class Solution:\\n\\n    def numberOfRounds(self, startTime: str, finishTime: str) -> int:\\n        h1=int(startTime[:2])\\n        s1=int(startTime[3:])\\n        h2=int(finishTime[:2])\\n        s2=int(finishTime[3:])\\n        while(s1%15!=0):\\n            s1+=1\\n        while(s2%15!=0):\\n            s2-=1\\n        #print(h1,s1,\" \",h2,s2)\\n        if h1>h2 or (h1>=h2 and s1>s2):\\n            h2+=24\\n            #print(h2)\\n            #print(\"j\")\\n            \\n        \\n        if s1<=s2:\\n            c=(s2-s1)//15\\n            #print(c)\\n        else:\\n            s2=s2+60\\n            h2=h2-1\\n            c=(s2-s1)//15\\n            #print(c,h1,s1,h2,s2)\\n            \\n        x=(h2-h1)*4\\n        return c+x",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1575442,
                "content": [
                    {
                        "username": "lbjlc",
                        "content": "The test case is weak, true. But the problem should not be rejudged after finished."
                    },
                    {
                        "username": "huikinglam02",
                        "content": "ceiling and floor division haha"
                    },
                    {
                        "username": "gs33",
                        "content": "Medium??"
                    },
                    {
                        "username": "geekyshark",
                        "content": "A very good problem indeed"
                    }
                ]
            },
            {
                "id": 2066626,
                "content": [
                    {
                        "username": "lbjlc",
                        "content": "The test case is weak, true. But the problem should not be rejudged after finished."
                    },
                    {
                        "username": "huikinglam02",
                        "content": "ceiling and floor division haha"
                    },
                    {
                        "username": "gs33",
                        "content": "Medium??"
                    },
                    {
                        "username": "geekyshark",
                        "content": "A very good problem indeed"
                    }
                ]
            },
            {
                "id": 1997412,
                "content": [
                    {
                        "username": "lbjlc",
                        "content": "The test case is weak, true. But the problem should not be rejudged after finished."
                    },
                    {
                        "username": "huikinglam02",
                        "content": "ceiling and floor division haha"
                    },
                    {
                        "username": "gs33",
                        "content": "Medium??"
                    },
                    {
                        "username": "geekyshark",
                        "content": "A very good problem indeed"
                    }
                ]
            },
            {
                "id": 1957229,
                "content": [
                    {
                        "username": "lbjlc",
                        "content": "The test case is weak, true. But the problem should not be rejudged after finished."
                    },
                    {
                        "username": "huikinglam02",
                        "content": "ceiling and floor division haha"
                    },
                    {
                        "username": "gs33",
                        "content": "Medium??"
                    },
                    {
                        "username": "geekyshark",
                        "content": "A very good problem indeed"
                    }
                ]
            }
        ]
    }
]