[
    {
        "title": "Delete Columns to Make Sorted",
        "question_content": "You are given an array of n strings strs, all of the same length.\nThe strings can be arranged such that there is one on each line, making a grid.\n\n\tFor example, strs = [\"abc\", \"bce\", \"cae\"] can be arranged as follows:\n\nabc\nbce\ncae\n\nYou want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 ('a', 'b', 'c') and 2 ('c', 'e', 'e') are sorted, while column 1 ('b', 'c', 'a') is not, so you would delete column 1.\nReturn the number of columns that you will delete.\n&nbsp;\nExample 1:\n\nInput: strs = [\"cba\",\"daf\",\"ghi\"]\nOutput: 1\nExplanation: The grid looks as follows:\n  cba\n  daf\n  ghi\nColumns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.\n\nExample 2:\n\nInput: strs = [\"a\",\"b\"]\nOutput: 0\nExplanation: The grid looks as follows:\n  a\n  b\nColumn 0 is the only column and is sorted, so you will not delete any columns.\n\nExample 3:\n\nInput: strs = [\"zyx\",\"wvu\",\"tsr\"]\nOutput: 3\nExplanation: The grid looks as follows:\n  zyx\n  wvu\n  tsr\nAll 3 columns are not sorted, so you will delete all 3.\n\n&nbsp;\nConstraints:\n\n\tn == strs.length\n\t1 <= n <= 100\n\t1 <= strs[i].length <= 1000\n\tstrs[i] consists of lowercase English letters.",
        "solutions": [
            {
                "id": 2989470,
                "title": "easiest-c-solution-with-detailed-explanation",
                "content": "**PLEASE UPVOTE IF YOU FIND MY APPROACH HELPFUL, MEANS A LOT \\uD83D\\uDE0A**\\n\\n**Intuition:** use a counter and if each char is lexicographically sorted column-wise.\\n\\n**Approach:**\\nFirst lets observe the given test example\\n![image](https://assets.leetcode.com/users/images/507a5d35-64d3-459c-a1bd-da9e768f0ded_1672712407.6624835.png)\\n* We can see that we are going through all the columns for comparision, so this is point 1. \\n* We need to compare the current char with the next char row-wise thus traversing will row-1, so this is point 2.\\n* If we find at any traversal that the order is not maintained, we need to delete the column according to the ques. So increment the counter and use break since the order is broken and we do not want to check that column any more, this is point 3.\\n* That\\'s it, just return the counter value now.\\n\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int delete_count=0;\\n        int row = strs.size();\\n        int col = strs[0].size();\\n        \\n        for(int j=0; j<col; j++)\\n        {\\n            for(int i=0; i<row-1; i++)\\n            {\\n                if(strs[i][j]>strs[i+1][j])\\n                {\\n                    delete_count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return delete_count;\\n    }\\n};\\n```\\n**Time Complexity** => `O(row * col)`\\n**Space Complexity** => `O(1)`\\n\\n![image](https://assets.leetcode.com/users/images/025a6e75-7e39-4bdd-8ecd-ea9c6023729a_1672712882.8563874.png)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int delete_count=0;\\n        int row = strs.size();\\n        int col = strs[0].size();\\n        \\n        for(int j=0; j<col; j++)\\n        {\\n            for(int i=0; i<row-1; i++)\\n            {\\n                if(strs[i][j]>strs[i+1][j])\\n                {\\n                    delete_count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return delete_count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989644,
                "title": "simple-java-solution-with-comments",
                "content": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        // Initialize the delete count to 0\\n        int deleteCount = 0;\\n        // Get the number of rows and columns in the grid\\n        int n = strs.length;\\n        int m = strs[0].length();\\n        // Iterate through each column of the grid\\n        for (int i = 0; i < m; i++) {\\n            // Iterate through each element in the column\\n            for (int j = 1; j < n; j++) {\\n                // If the current element is lexicographically smaller than the previous element,\\n                // increment the delete count and break out of the loop\\n                if (strs[j].charAt(i) < strs[j - 1].charAt(i)) {\\n                    deleteCount++;\\n                    break;\\n                }\\n            }\\n        }\\n        // Return the delete count\\n        return deleteCount;\\n    }\\n}\\n```\\n\\n\\n# Code\\n```\\nclass Solution{\\npublic int minDeletionSize(String[] strs) {\\n    // Return 0 if the input array is null or empty\\n    if (strs == null || strs.length == 0) {\\n        return 0;\\n    }\\n    // Initialize the number of columns to the length of the first string\\n    int numColumns = strs[0].length();\\n    int numColumnsToDelete = 0;\\n    // Iterate through each column of the grid\\n    for (int i = 0; i < numColumns; i++) {\\n        // Initialize the current character to the first character in the column\\n        char currChar = strs[0].charAt(i);\\n        // Iterate through each element in the column\\n        for (int j = 1; j < strs.length; j++) {\\n            // If the current element is lexicographically smaller than the previous element,\\n            // increment the number of columns to delete and break out of the loop\\n            if (strs[j].charAt(i) < currChar) {\\n                numColumnsToDelete++;\\n                break;\\n            }\\n            // Otherwise, update the current character to the current element\\n            currChar = strs[j].charAt(i);\\n        }\\n    }\\n    // Return the number of columns to delete\\n    return numColumnsToDelete;\\n  }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        // Initialize the delete count to 0\\n        int deleteCount = 0;\\n        // Get the number of rows and columns in the grid\\n        int n = strs.length;\\n        int m = strs[0].length();\\n        // Iterate through each column of the grid\\n        for (int i = 0; i < m; i++) {\\n            // Iterate through each element in the column\\n            for (int j = 1; j < n; j++) {\\n                // If the current element is lexicographically smaller than the previous element,\\n                // increment the delete count and break out of the loop\\n                if (strs[j].charAt(i) < strs[j - 1].charAt(i)) {\\n                    deleteCount++;\\n                    break;\\n                }\\n            }\\n        }\\n        // Return the delete count\\n        return deleteCount;\\n    }\\n}\\n```\n```\\nclass Solution{\\npublic int minDeletionSize(String[] strs) {\\n    // Return 0 if the input array is null or empty\\n    if (strs == null || strs.length == 0) {\\n        return 0;\\n    }\\n    // Initialize the number of columns to the length of the first string\\n    int numColumns = strs[0].length();\\n    int numColumnsToDelete = 0;\\n    // Iterate through each column of the grid\\n    for (int i = 0; i < numColumns; i++) {\\n        // Initialize the current character to the first character in the column\\n        char currChar = strs[0].charAt(i);\\n        // Iterate through each element in the column\\n        for (int j = 1; j < strs.length; j++) {\\n            // If the current element is lexicographically smaller than the previous element,\\n            // increment the number of columns to delete and break out of the loop\\n            if (strs[j].charAt(i) < currChar) {\\n                numColumnsToDelete++;\\n                break;\\n            }\\n            // Otherwise, update the current character to the current element\\n            currChar = strs[j].charAt(i);\\n        }\\n    }\\n    // Return the number of columns to delete\\n    return numColumnsToDelete;\\n  }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 194919,
                "title": "python-count-unsorted-columns",
                "content": "Just count unsorted column numbers. \\n\\n`O(NlogNM)`, with `N <= 100`\\n```\\n    def minDeletionSize(self, A):\\n        return sum(list(col) != sorted(col) for col in zip(*A))\\n```\\n`O(NM)`\\n```\\n    def minDeletionSize(self, A):\\n        return sum(any(a > b for a, b in zip(col, col[1:])) for col in zip(*A))\\n```",
                "solutionTags": [],
                "code": "```\\n    def minDeletionSize(self, A):\\n        return sum(list(col) != sorted(col) for col in zip(*A))\\n```\n```\\n    def minDeletionSize(self, A):\\n        return sum(any(a > b for a, b in zip(col, col[1:])) for col in zip(*A))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2989395,
                "title": "3-different-java-codes",
                "content": "**If you find it useful please upvote it means a lot to me \\uD83D\\uDE0A**\\n\\n\\n# 84 % Fast\\n```\\npublic int minDeletionSize(String[] arr) {\\n    int count = 0;\\n    for(int i=0; i<arr[0].length(); i++){\\n        for(int j=1; j<arr.length; j++){\\n            if(arr[j].charAt(i) < arr[j-1].charAt(i)){\\n                count++;\\n                break;\\n            }\\n        }\\n    }     \\n    return count;\\n}\\n```\\n# 99.9 % Fast\\n```\\npublic int minDeletionSize(String[] strs) \\n{\\n    int len = strs.length;\\n    int wordlen = strs[0].length();\\n    int ans = 0;\\n        \\n    for(int i=0; i<wordlen; i++)\\n    {\\n        char prev = strs[0].charAt(i);\\n        for(int j=1; j<len; j++)\\n        {\\n            char ch = strs[j].charAt(i);\\n             if(ch < prev) \\n            {\\n                ans++;\\n                break;\\n            }\\n            prev = ch;\\n        }\\n    }\\n    return ans;       \\n}\\n```\\n![image.png](https://assets.leetcode.com/users/images/4d2ab3d9-4005-4ab5-8d40-b7c9eebad0b2_1672714083.5173585.png)\\n![UPVOTE MEME.jpg](https://assets.leetcode.com/users/images/c0e14b52-4f1e-4328-be55-9c3d894b7f7f_1672715067.254083.jpeg)\\n\\n# Not Fastest But Cool \\n```\\nclass Solution {\\n    public static int minDeletionSize(String[] S)\\n    {\\n        int answer = 0;\\n        int n = S.length;       \\n        int m = S[0].length(); \\n        char[][] matrix = new char[n][m];\\n        for(int i=0; i<n; i++){\\n            for(int j=0; j<m; j++){\\n                matrix[i][j] = S[i].charAt(j);\\n            }\\n        }\\n        for(int col=0; col<m; col++){\\n            for(int row=1; row<n; row++){\\n                int min = matrix[row-1][col];\\n                if(matrix[row][col] < min){\\n                    answer++;\\n                    break;\\n                }\\n            }\\n        }\\n        return answer;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int minDeletionSize(String[] arr) {\\n    int count = 0;\\n    for(int i=0; i<arr[0].length(); i++){\\n        for(int j=1; j<arr.length; j++){\\n            if(arr[j].charAt(i) < arr[j-1].charAt(i)){\\n                count++;\\n                break;\\n            }\\n        }\\n    }     \\n    return count;\\n}\\n```\n```\\npublic int minDeletionSize(String[] strs) \\n{\\n    int len = strs.length;\\n    int wordlen = strs[0].length();\\n    int ans = 0;\\n        \\n    for(int i=0; i<wordlen; i++)\\n    {\\n        char prev = strs[0].charAt(i);\\n        for(int j=1; j<len; j++)\\n        {\\n            char ch = strs[j].charAt(i);\\n             if(ch < prev) \\n            {\\n                ans++;\\n                break;\\n            }\\n            prev = ch;\\n        }\\n    }\\n    return ans;       \\n}\\n```\n```\\nclass Solution {\\n    public static int minDeletionSize(String[] S)\\n    {\\n        int answer = 0;\\n        int n = S.length;       \\n        int m = S[0].length(); \\n        char[][] matrix = new char[n][m];\\n        for(int i=0; i<n; i++){\\n            for(int j=0; j<m; j++){\\n                matrix[i][j] = S[i].charAt(j);\\n            }\\n        }\\n        for(int col=0; col<m; col++){\\n            for(int row=1; row<n; row++){\\n                int min = matrix[row-1][col];\\n                if(matrix[row][col] < min){\\n                    answer++;\\n                    break;\\n                }\\n            }\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989165,
                "title": "python3-one-liner-iterative",
                "content": "**Solution 1:** Simply go though each column and check if the column is sorted or not by comparing it with its sorted version. Same as [lee215](https://leetcode.com/problems/delete-columns-to-make-sorted/discuss/194919/Python-Count-Unsorted-Columns)\\n\\n```python\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        return sum(list(column) != sorted(column) for column in zip(*strs))\\n```\\n\\n**Solution 2:** Iterativelly go through each column, and compare each element with the previous one in this column, if the current element is smaller than the previous one, this column is not sorted, so increase the result and don\\'t look farther in this column. Same as [Vlad](https://leetcode.com/problems/delete-columns-to-make-sorted/discuss/194916/C%2B%2B-brute-force-O(n-*-m))\\n```python\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        res = 0\\n        \\n        # for each column index\\n        for j in range(len(strs[0])):\\n            \\n            # for each row index start from 1, since we need to compare with the previous one.\\n            for i in range(1,len(strs)):\\n\\n                # this column is not sorted, don\\'t look farther.\\n                if strs[i][j] < strs[i-1][j]:\\n                    res += 1\\n                    break\\n        return res\\n```\\n\\n**Solution 3:** one-liner iterative from [SunnyvaleCA](https://leetcode.com/SunnyvaleCA/)\\'s comment below.\\n```python\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        return sum( any( strs[i][j]<strs[i-1][j] for i in range(1,len(strs)) ) for j in range(len(strs[0])))\\n```\\n\\n**Upvote** if you like this post.\\n\\n**Connect with me on [LinkedIn](https://www.linkedin.com/in/meida-chen-938a265b/)** if you\\'d like to discuss other related topics\\n\\nJust in case if you are working on **ML/DL 3D data-related projects** or are interested in the topic, please check out our project **[HERE](https://github.com/meidachen/STPLS3D)**\\n\\n",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        return sum(list(column) != sorted(column) for column in zip(*strs))\\n```\n```python\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        res = 0\\n        \\n        # for each column index\\n        for j in range(len(strs[0])):\\n            \\n            # for each row index start from 1, since we need to compare with the previous one.\\n            for i in range(1,len(strs)):\\n\\n                # this column is not sorted, don\\'t look farther.\\n                if strs[i][j] < strs[i-1][j]:\\n                    res += 1\\n                    break\\n        return res\\n```\n```python\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        return sum( any( strs[i][j]<strs[i-1][j] for i in range(1,len(strs)) ) for j in range(len(strs[0])))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 194916,
                "title": "c-brute-force-o-n-m",
                "content": "Go column by column ```c```, then row by row ```i```. If ```A[i - 1][c] > A[i][c]```, then that column is unsorted - we increase the number of deleted columns and go to the next column.\\n```\\nint minDeletionSize(vector<string>& A, int res = 0) {\\n    if (A.empty()) return res;\\n    for (auto c = 0; c < A[0].size(); ++c)\\n        for (auto i = 1; i < A.size(); ++i) {\\n            if (A[i - 1][c] > A[i][c]) {\\n                ++res;\\n                break;\\n            }\\n        }\\n    return res;\\n}\\n```",
                "solutionTags": [],
                "code": "```c```\n```i```\n```A[i - 1][c] > A[i][c]```\n```\\nint minDeletionSize(vector<string>& A, int res = 0) {\\n    if (A.empty()) return res;\\n    for (auto c = 0; c < A[0].size(); ++c)\\n        for (auto i = 1; i < A.size(); ++i) {\\n            if (A[i - 1][c] > A[i][c]) {\\n                ++res;\\n                break;\\n            }\\n        }\\n    return res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2989277,
                "title": "c-o-nm-easy-to-understand-with-in-depth-explanation-and-examples",
                "content": "#### Table of Contents\\n\\n- [TL;DR](#tldr)\\n  - [Code](#code)\\n  - [Complexity](#complexity)\\n- [In Depth Analysis](#in-depth-analysis)\\n  - [Intuition](#intuition)\\n  - [Approach](#approach)\\n  - [Example](#example)\\n\\n# TL;DR\\n\\nCheck each column to ensure that it is in sorted order. If any elements breaks the sorting, increase the answer by one and move onto the next column\\n\\n## Code\\n\\n```c++\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        const int n = strs.size(), m = strs[0].size();\\n\\n        int ans = 0;\\n        for (int j = 0; j < m; j++)\\n            for (int i = 1; i < n; i++)\\n                if (strs[i][j] < strs[i - 1][j]) {\\n                    ans++;\\n                    break;\\n                }\\n\\n        return ans;\\n    }\\n};\\n```\\n\\n## Complexity\\n\\n**Time Complexity:** $$O(NM)$$ where $$N$$ is the number of rows and $$M$$ is the number of columns\\n**Space Complexity:** $$O(1)$$\\n\\n**PLEASE UPVOTE IF YOU FIND MY POST HELPFUL!! \\uD83E\\uDD7A\\uD83D\\uDE01**\\n\\n---\\n\\n# In Depth Analysis\\n\\n## Intuition\\n\\nIterate in column major order (the outer loop is columns, inner loop is rows) and make sure that each element in the column is greater than or equal to the one before it. In other words, ensure that `strs[i][j] >= str[i - 1][j]`. If any element breaks this rule, then we delete the column and move on\\n\\n## Approach \\n\\nIterate in column major order but starting at the second row each time. If any element is less than the the element in the previous row, we increase the answer and break out of the loop since we don\\'t need to check the rest of them. \\n\\nIn other words, we just check to see if `strs[i][j] < strs[i - 1][j]` at any point. If it is, we know it isn\\'t sorted properly and we want to delete the column. We just return `ans` at the end.\\n\\n## Example\\n\\nLets use the second example, where `strs = [\"cba\",\"daf\",\"ghi\"]`\\n\\n* Col = 0\\n  * Row = 1\\n    Check if `strs[i][j] < strs[i - 1][j] = strs[1][0] < strs[0][0] = \\'d\\' < \\'c\\'`, which is `false` so we go to the next row\\n  * Row = 2\\n    Check if `strs[i][j] < strs[i - 1][j] = strs[2][0] < strs[1][0] = \\'g\\' < \\'d\\'`, which is `false` so we go to the next column\\n* Col = 1\\n  * Row = 1\\n    Check if `strs[i][j] < strs[i - 1][j] = strs[1][1] < strs[0][1] = \\'a\\' < \\'b\\'`, which is `true` so we delete the row and move to the next column\\n* Col = 2\\n  * Row = 1\\n    Check if `strs[i][j] < strs[i - 1][j] = strs[1][2] < strs[0][2] = \\'f\\' < \\'a\\'`, which is `false` so we go to the next row\\n  * Row = 2\\n    Check if `strs[i][j] < strs[i - 1][j] = strs[2][2] < strs[1][2] = \\'i\\' < \\'f\\'`, which is `false` so we exit the loop\\n\\nAt the end, `ans = 1` which is correct\\n\\n**PLEASE UPVOTE IF YOU FIND MY POST HELPFUL!! \\uD83E\\uDD7A\\uD83D\\uDE01**",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String"
                ],
                "code": "```c++\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        const int n = strs.size(), m = strs[0].size();\\n\\n        int ans = 0;\\n        for (int j = 0; j < m; j++)\\n            for (int i = 1; i < n; i++)\\n                if (strs[i][j] < strs[i - 1][j]) {\\n                    ans++;\\n                    break;\\n                }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1223870,
                "title": "python3-efficient-and-concise-without-sorting",
                "content": "```python\\n\\tdef minDeletionSize(self, strs: List[str]) -> int:\\n        m, n = len(strs), len(strs[0])\\n        count = 0\\n        \\n        for i in range(n):\\n            for j in range(1,m):\\n                if strs[j][i] < strs[j-1][i]:\\n                    count += 1\\n                    break\\n        \\n        return count\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```python\\n\\tdef minDeletionSize(self, strs: List[str]) -> int:\\n        m, n = len(strs), len(strs[0])\\n        count = 0\\n        \\n        for i in range(n):\\n            for j in range(1,m):\\n                if strs[j][i] < strs[j-1][i]:\\n                    count += 1\\n                    break\\n        \\n        return count\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2991965,
                "title": "c-solution-with-detailed-explanations",
                "content": "## Explanation:\\n\\n### Solution 01\\n\\n- Here we\\u2019ve to find the no of columns which are not sorted.\\n- First, we\\u2019ll take row & column numbers in ***n & m.***\\n- Then we\\u2019ll compare the column elements one by one in the for loop.\\n- If we find any one column is not in sorted order we\\u2019ll increase the *********ans********* count & break it.\\n- Return the ans.\\n- **Time complexity:** O(n*m).\\n\\n---\\n\\n## Code:\\n\\n```cpp\\n//Solution 01:\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int n = strs.size();\\n        int m = strs[0].size();\\n        int ans = 0;\\n\\n        for(int i=0; i<m; i++){\\n            for(int j=0; j<n-1; j++){\\n                if(strs[j][i] > strs[j+1][i]){\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n```\\n\\n---\\n\\n> **Please upvote this solution**\\n>",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String",
                    "String Matching",
                    "Matrix"
                ],
                "code": "```cpp\\n//Solution 01:\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int n = strs.size();\\n        int m = strs[0].size();\\n        int ans = 0;\\n\\n        for(int i=0; i<m; i++){\\n            for(int j=0; j<n-1; j++){\\n                if(strs[j][i] > strs[j+1][i]){\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989202,
                "title": "python-one-line",
                "content": "```python []\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        return sum(col != sorted(col) for col in map(list, zip(*strs)))\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```python []\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        return sum(col != sorted(col) for col in map(list, zip(*strs)))\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 197402,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n    public int minDeletionSize(String[] A) {\\n        int count = 0;\\n        for (int i = 0; i < A[0].length(); i++) {\\n            for (int j = 1; j < A.length; j++) {\\n                if (A[j-1].charAt(i) > A[j].charAt(i)) {\\n                    count++;\\n                    break;\\n                }\\n            }\\n         }\\n        \\n        return count;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int minDeletionSize(String[] A) {\\n        int count = 0;\\n        for (int i = 0; i < A[0].length(); i++) {\\n            for (int j = 1; j < A.length; j++) {\\n                if (A[j-1].charAt(i) > A[j].charAt(i)) {\\n                    count++;\\n                    break;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 422457,
                "title": "javascript-beats-98-w-comments",
                "content": "```javascript\\nvar minDeletionSize = function(A) {\\n    //number of deletions\\n    var deletions = 0;\\n    \\n    //iterate through first word in array\\n    for (var index = 0; index < A[0].length; index++) {\\n        \\n        //now iterate through array\\n        for (var i = 0; i < A.length - 1; i++) {\\n            \\n            //check if the character at the index in this word is greater than the next\\n            if (A[i].charAt(index) > A[i + 1].charAt(index)) {\\n                //increment deletions (we would need to delete this char to make it sorted)\\n                deletions++;\\n                \\n                //break out of current for loop\\n                break;\\n            }\\n            \\n        }\\n    }\\n    \\n    //result\\n    return deletions;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\nvar minDeletionSize = function(A) {\\n    //number of deletions\\n    var deletions = 0;\\n    \\n    //iterate through first word in array\\n    for (var index = 0; index < A[0].length; index++) {\\n        \\n        //now iterate through array\\n        for (var i = 0; i < A.length - 1; i++) {\\n            \\n            //check if the character at the index in this word is greater than the next\\n            if (A[i].charAt(index) > A[i + 1].charAt(index)) {\\n                //increment deletions (we would need to delete this char to make it sorted)\\n                deletions++;\\n                \\n                //break out of current for loop\\n                break;\\n            }\\n            \\n        }\\n    }\\n    \\n    //result\\n    return deletions;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2989456,
                "title": "leetcode-the-hard-way-explained-line-by-line",
                "content": "\\uD83D\\uDD34 Check out [LeetCode The Hard Way](https://wingkwong.github.io/leetcode-the-hard-way/) for more solution explanations and tutorials. \\n\\uD83D\\uDFE0 Check out our [Discord](https://discord.gg/Nqm4jJcyBf) for live discussion.\\n\\uD83D\\uDFE2 Give a star on [Github Repository](https://github.com/wingkwong/leetcode-the-hard-way) and upvote this post if you like it.\\n\\uD83D\\uDD35 Check out [Screencast](https://www.youtube.com/watch?v=JTA_WgDqx8o&list=PLBu4Bche1aEWMj1TdpymXbD8Tn8xKVYwj&index=3) if you are interested.\\n\\n---\\n\\n# Intuition\\nCompare two characters in adjacent row in the same column to see if they are sorted, we can delete that column if they are not sorted.\\n\\n# Approach\\nBrute Force. First we iterate the columns, then iterate the rows. If the character in the previous row is greater than the character in the current row, then we can delete this column. \\n\\n# Complexity\\n- Time complexity: $$O(n * m)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& s) {\\n        int ans = 0;\\n        // iterate cols\\n        for (int col = 0; col < s[0].size(); col++) {\\n            // iterate rows\\n            for (int row = 1; row < s.size(); row++) {\\n                // if the character in the previous row is greater than the character in the current row\\n                // then we can delete this column\\n                if (s[row - 1][col] > s[row][col]) {\\n                    ans += 1;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& s) {\\n        int ans = 0;\\n        // iterate cols\\n        for (int col = 0; col < s[0].size(); col++) {\\n            // iterate rows\\n            for (int row = 1; row < s.size(); row++) {\\n                // if the character in the previous row is greater than the character in the current row\\n                // then we can delete this column\\n                if (s[row - 1][col] > s[row][col]) {\\n                    ans += 1;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 209807,
                "title": "88ms-python-1-liner",
                "content": "```\\nclass Solution(object):\\n    def minDeletionSize(self, A):\\n        \"\"\"\\n        :type A: List[str]\\n        :rtype: int\\n        \"\"\"\\n        return len([s for s in zip(*A) if list(s) != sorted(s)])\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def minDeletionSize(self, A):\\n        \"\"\"\\n        :type A: List[str]\\n        :rtype: int\\n        \"\"\"\\n        return len([s for s in zip(*A) if list(s) != sorted(s)])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2990398,
                "title": "c-intuitive-explained",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        \\n        int n = strs.size();\\n        int m = strs[0].size();\\n        int dlt = 0;\\n\\n        for( int j=0 ; j<m ; j++ ){\\n            // store every current column\\n            string currCol = \"\";\\n\\n            for( int i=0 ; i<n ; i++ ){\\n                currCol += strs[i][j];\\n            }\\n\\n            // check that columns is lexicographically sorted or not \\n            string revCol = currCol;\\n            sort( currCol.begin(), currCol.end() );\\n            if( revCol != currCol ) dlt++;\\n        }\\n\\n        return dlt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Sorting",
                    "String Matching"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        \\n        int n = strs.size();\\n        int m = strs[0].size();\\n        int dlt = 0;\\n\\n        for( int j=0 ; j<m ; j++ ){\\n            // store every current column\\n            string currCol = \"\";\\n\\n            for( int i=0 ; i<n ; i++ ){\\n                currCol += strs[i][j];\\n            }\\n\\n            // check that columns is lexicographically sorted or not \\n            string revCol = currCol;\\n            sort( currCol.begin(), currCol.end() );\\n            if( revCol != currCol ) dlt++;\\n        }\\n\\n        return dlt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 244899,
                "title": "java-straightforward-solution",
                "content": "**Well, Example 2 is really bad, so I used it as my special consition in line 3:**\\n```\\n if(A.length <= 1 || A[0].length() <= 1) return 0;\\n```\\n**Then use two for loop to go Straightforward!**\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] A) {\\n        if(A.length <= 1 || A[0].length() <= 1) return 0;\\n        int res = 0;\\n        for(int i = 0; i < A[0].length(); i++){\\n            for(int j = 1; j < A.length; j++){\\n                if(A[j].charAt(i) < A[j-1].charAt(i)){\\n                    res++;\\n                    break;\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n if(A.length <= 1 || A[0].length() <= 1) return 0;\\n```\n```\\nclass Solution {\\n    public int minDeletionSize(String[] A) {\\n        if(A.length <= 1 || A[0].length() <= 1) return 0;\\n        int res = 0;\\n        for(int i = 0; i < A[0].length(); i++){\\n            for(int j = 1; j < A.length; j++){\\n                if(A[j].charAt(i) < A[j-1].charAt(i)){\\n                    res++;\\n                    break;\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2991429,
                "title": "another-linq-solution-super-simple",
                "content": "1. For each column `i`, construct the column:\\n  `col = strs.Select(s => s[i])`\\n2. Then check whether the column matches its sorted form:\\n  `col.OrderBy(c => c).SequenceEqual(col)`\\n```csharp\\npublic class Solution\\n{\\n    public int MinDeletionSize(string[] strs)\\n    {\\n        int res = 0;\\n\\n        for (int i = 0; i < strs[0].Length; i++)\\n        {\\n            var col = strs.Select(s => s[i]);\\n            if (!col.OrderBy(c => c).SequenceEqual(col)) res++;\\n        }\\n\\n        return res;\\n    }\\n}\\n```\\n\\nIn the latest version of C#, this part\\n`col.OrderBy(c => c).SequenceEqual(col)`\\ncan be shortened to:\\n`col.Order().SequenceEqual(col)`\\n\\nI don\\'t like the negated `if` condition. Here is how to get rid of it:\\n```csharp\\npublic class Solution\\n{\\n    public int MinDeletionSize(string[] strs)\\n    {\\n        int res = strs[0].Length;\\n\\n        for (int i = 0; i < strs[0].Length; i++)\\n        {\\n            var col = strs.Select(s => s[i]);\\n            if (col.OrderBy(c => c).SequenceEqual(col)) res--;\\n        }\\n\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```csharp\\npublic class Solution\\n{\\n    public int MinDeletionSize(string[] strs)\\n    {\\n        int res = 0;\\n\\n        for (int i = 0; i < strs[0].Length; i++)\\n        {\\n            var col = strs.Select(s => s[i]);\\n            if (!col.OrderBy(c => c).SequenceEqual(col)) res++;\\n        }\\n\\n        return res;\\n    }\\n}\\n```\n```csharp\\npublic class Solution\\n{\\n    public int MinDeletionSize(string[] strs)\\n    {\\n        int res = strs[0].Length;\\n\\n        for (int i = 0; i < strs[0].Length; i++)\\n        {\\n            var col = strs.Select(s => s[i]);\\n            if (col.OrderBy(c => c).SequenceEqual(col)) res--;\\n        }\\n\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989760,
                "title": "python-simple-solution",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        c=0\\n        for col in range(len(strs[0])):\\n            for row in range(len(strs)-1):\\n                if ord(strs[row][col])>ord(strs[row+1][col]):\\n                    print(strs[row][col],strs[row+1][col])\\n                    c+=1\\n                    break\\n        return c\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        c=0\\n        for col in range(len(strs[0])):\\n            for row in range(len(strs)-1):\\n                if ord(strs[row][col])>ord(strs[row+1][col]):\\n                    print(strs[row][col],strs[row+1][col])\\n                    c+=1\\n                    break\\n        return c\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1723450,
                "title": "short-clean-java-javascript-solution",
                "content": "``` java []\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0;\\n        for(int i=0; i<strs[0].length(); i++){\\n            for(int j=0; j<strs.length-1; j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```\\n```javascript []\\nvar minDeletionSize = function(strs) {\\n    let count = 0;\\n    for(let i=0; i<strs[0].length; i++){\\n        for(let j=0; j<strs.length-1; j++){\\n            if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                count++;\\n                break;\\n            }\\n        }\\n    }\\n    return count;\\n};\\n```",
                "solutionTags": [
                    "Java",
                    "JavaScript"
                ],
                "code": "``` java []\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0;\\n        for(int i=0; i<strs[0].length(); i++){\\n            for(int j=0; j<strs.length-1; j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```\n```javascript []\\nvar minDeletionSize = function(strs) {\\n    let count = 0;\\n    for(let i=0; i<strs[0].length; i++){\\n        for(let j=0; j<strs.length-1; j++){\\n            if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                count++;\\n                break;\\n            }\\n        }\\n    }\\n    return count;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2991557,
                "title": "javascript-solutions-step-by-step",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nMerge and compare strings in each column\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThis is a function that counts how many columns of characters in a string array do not satisfy the order from smallest to largest.\\n\\nThe variable minDeletionSize is the name of the function. It takes in a parameter strs, which represents the string array to be checked.\\n\\nThe variable count is used to count how many columns of characters do not satisfy the order from smallest to largest. It is initialized to 0.\\n\\nNext is a loop that iterates through each character (i.e., each column) of strs[0].\\n\\nThe variable str is used to store the characters of the current column. It is initialized to an empty string.\\n\\nNext is another loop that iterates through each string (i.e., each row) in strs. For each string, it adds the character of the current column to str.\\n\\nThen, the variable check is used to store whether the characters of the current column satisfy the order from smallest to largest. This is done by converting the string str to a character array, sorting the character array, and then converting the sorted character array back to a string and comparing it with the original string.\\n\\nIf the value of check is false, it means that the characters of the current column do not satisfy the order from smallest to largest. In this case, count is incremented by 1.\\n\\nFinally, the function returns count.\\n# Complexity\\n- Time complexity:\\n$$O(n^2)$$\\n\\n- Space complexity:\\n$$O(L)$$\\nL is strs length\\n\\n# Code\\n```\\n/**\\n * @param {string[]} strs\\n * @return {number}\\n */\\nvar minDeletionSize = function(strs) {\\n    let count = 0\\n    for(let i = 0; i < strs[0].length; i++){\\n        let str = \\'\\'\\n        for(let j = 0; j < strs.length; j++){\\n            str += strs[j][i]\\n        }\\n        let check = str.split(\\'\\').sort().join(\\'\\') == str\\n        if(!check){\\n            count += 1\\n        }\\n    }\\n    return count\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "String"
                ],
                "code": "```\\n/**\\n * @param {string[]} strs\\n * @return {number}\\n */\\nvar minDeletionSize = function(strs) {\\n    let count = 0\\n    for(let i = 0; i < strs[0].length; i++){\\n        let str = \\'\\'\\n        for(let j = 0; j < strs.length; j++){\\n            str += strs[j][i]\\n        }\\n        let check = str.split(\\'\\').sort().join(\\'\\') == str\\n        if(!check){\\n            count += 1\\n        }\\n    }\\n    return count\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2990824,
                "title": "simplest-c-approach-easy-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(row*col)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n      \\n        int count=0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0; j<strs.size();j++){\\n                if( j+1 < strs.size() && strs[j][i] > strs[j+1][i]){\\n                    count++;\\n                    break;\\n                }\\n            }\\n         \\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n      \\n        int count=0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0; j<strs.size();j++){\\n                if( j+1 < strs.size() && strs[j][i] > strs[j+1][i]){\\n                    count++;\\n                    break;\\n                }\\n            }\\n         \\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2990400,
                "title": "java-short-and-explained-beats-93-3",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIterate over the columns from 0 to strLen-1, for each column col:\\n\\n- Iterate over the rows row from 1 to n - 1:\\n\\n  - If the character at index col in the string strs[row] is smaller than the character at index col in the string strs[row - 1], then increment the counter variable answer. Also, we can break the inner loop here as we find the current column unsorted.\\n  - Otherwise, we check the next row.\\n\\n# Complexity\\n- Time complexity: $$O(N*K)$$ . As, you can see there are two nested for loops. **K** is the `strLen` and **N** is the `strs` array length.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$ . We haven\\'t used any extra space. The spaces taken here are constant. Meaning they do not depend on the size of the input parameters.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Submission link: \\nhttps://leetcode.com/problems/delete-columns-to-make-sorted/submissions/870222049/\\n\\n# Code\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        // number of columns..\\n        int strLen = strs[0].length();\\n        // cols to be deleted.. \\n        int dels = 0;\\n\\n        for(int col=0; col<strLen; col++){\\n            // by default take \\'0\\' as it is the smallest character\\n            char prev = \\'0\\';\\n            for(String str : strs){\\n                char cur = str.charAt(col);\\n                // compare with prev. if prev was bigger than cur,\\n                // it is unsorted. so, increase count and break;\\n                if(cur<prev){\\n                    dels++;\\n                    break;\\n                }\\n                prev = cur;\\n            }\\n        }\\n        return dels;\\n    }\\n}\\n```\\n\\n\\n![image.png](https://assets.leetcode.com/users/images/9a1fce67-3636-4da5-8a8a-52f395f24a50_1672725016.0186899.png)\\n",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        // number of columns..\\n        int strLen = strs[0].length();\\n        // cols to be deleted.. \\n        int dels = 0;\\n\\n        for(int col=0; col<strLen; col++){\\n            // by default take \\'0\\' as it is the smallest character\\n            char prev = \\'0\\';\\n            for(String str : strs){\\n                char cur = str.charAt(col);\\n                // compare with prev. if prev was bigger than cur,\\n                // it is unsorted. so, increase count and break;\\n                if(cur<prev){\\n                    dels++;\\n                    break;\\n                }\\n                prev = cur;\\n            }\\n        }\\n        return dels;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2990299,
                "title": "super-easy-to-understand-fully-explained-different-approach-java",
                "content": "# Request \\uD83D\\uDE0A :\\n```\\nIf you find these solutions easy to understand and helpful, then\\nPlease Upvote\\uD83D\\uDC4D\\uD83D\\uDC4D.\\n```\\n# Approach [Explained in Comments] :\\n```\\nclass Solution \\n{\\n    public int minDeletionSize(String[] strs) \\n    {\\n        if(strs==null||strs.length==0)\\n            return 0;//base case\\n        int res=0;//result\\n        int n=strs[0].length();//for longest column length\\n        for(int i=0;i<n;i++)\\n        {\\n            int j=0;//should be 0 every time i increases\\n            for(;j<strs.length-1;j++)\\n            {\\n                if(strs[j].charAt(i)>strs[j+1].charAt(i))\\n                    break;\\n            }\\n            if(j!=strs.length-1)// j not reach charcter of lowest string since break came\\n                res++;//one column not sorted found\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nIf you find these solutions easy to understand and helpful, then\\nPlease Upvote\\uD83D\\uDC4D\\uD83D\\uDC4D.\\n```\n```\\nclass Solution \\n{\\n    public int minDeletionSize(String[] strs) \\n    {\\n        if(strs==null||strs.length==0)\\n            return 0;//base case\\n        int res=0;//result\\n        int n=strs[0].length();//for longest column length\\n        for(int i=0;i<n;i++)\\n        {\\n            int j=0;//should be 0 every time i increases\\n            for(;j<strs.length-1;j++)\\n            {\\n                if(strs[j].charAt(i)>strs[j+1].charAt(i))\\n                    break;\\n            }\\n            if(j!=strs.length-1)// j not reach charcter of lowest string since break came\\n                res++;//one column not sorted found\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989143,
                "title": "daily-leetcoding-challenge-january-day-3",
                "content": "This problem is the Daily LeetCoding Challenge for January, Day 3.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/delete-columns-to-make-sorted/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 0 approach in the official solution</summary>\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>",
                "solutionTags": [],
                "code": "  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/delete-columns-to-make-sorted/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />",
                "codeTag": "Unknown"
            },
            {
                "id": 517343,
                "title": "python-99-easy-to-read",
                "content": "Yes, technically sorted should have worse O() than a linear scan, but in this particular context it delivers better performance (>99%) and a shorter code.\\n\\nWe basically take a slice of A, store in c and compare against sorted c.\\n\\n```\\nclass Solution(object):\\n    def minDeletionSize(self, A):\\n\\n        ret = 0\\n        \\n        for c in zip(*A): \\n            if list(c) != sorted(c): \\n                ret += 1\\n                \\n        return ret \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def minDeletionSize(self, A):\\n\\n        ret = 0\\n        \\n        for c in zip(*A): \\n            if list(c) != sorted(c): \\n                ret += 1\\n                \\n        return ret \\n```",
                "codeTag": "Java"
            },
            {
                "id": 385630,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public int minDeletionSize(String[] A) {\\n        int count = 0;\\n        \\n        // Go through each char column\\n        for (int j = 0; j < A[0].length(); j++) {\\n            // Go through each string\\n            for (int i = 0; i < A.length - 1; i++) {\\n                // If column\\'s char is decreasing on the next string,\\n                // count as deletion index\\n                if (A[i].charAt(j) > A[i + 1].charAt(j)) {\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        \\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] A) {\\n        int count = 0;\\n        \\n        // Go through each char column\\n        for (int j = 0; j < A[0].length(); j++) {\\n            // Go through each string\\n            for (int i = 0; i < A.length - 1; i++) {\\n                // If column\\'s char is decreasing on the next string,\\n                // count as deletion index\\n                if (A[i].charAt(j) > A[i + 1].charAt(j)) {\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        \\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2991674,
                "title": "python-easy-beats-97-multiple-approaches",
                "content": "# Approach 1\\nUse a loop with zip and *strs. *strs will convert lists into tuple and zip will create another tuple with all the values at first index in each tuple in a tuple at first index.\\n**For Example:**\\n> Lets say there is a list with [[\"abc\"],[\"cdf\"]] then *strs will create a tuple ((\"abc\"),(\"cdf\")) and zip will convert them in ((\"ac\"),(\"bd\"),(\"cf\")).\\n\\nNow check if the tuple converted into a list and sorted tuple that would also return a sorted list aren\\'t equal. if they are not equal then count+=1. return count.\\n\\n# Complexity\\n- Time complexity: **Not sure what these convertion will take.**\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n\\n        counter = 0\\n\\n        for i in zip(*strs):\\n            if list(i)!=sorted(i):\\n                counter+=1\\n\\n        return counter              \\n```\\n\\n# Approach 2\\nWe can create a grid with all the strings as list then create another list to store the transpose of the grid. after that we can create another list to store the sorted list of that transposed grid and compare it with transpose of grid if it is not equal then we can simply increment the counter. (**This is too listy, i guess :D**)\\n\\n\\n# Complexity\\n- Time complexity: $$O(n*m)$$\\n\\n# Code\\n\\n```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n\\n        grid = []\\n\\n        for i in range(len(strs)):\\n            grid.append(list(strs[i]))\\n\\n\\n        result = [[grid[j][i] for j in range(len(grid))] for i in range(len(grid[0]))] \\n\\n\\n        new = []\\n\\n        for i in range(len(result)):\\n            new.append(\"\".join(sorted(result[i])))\\n\\n        count = 0\\n\\n        for i in range(len(result)):\\n            if \"\".join(result[i])!=new[i]:\\n                count+=1\\n        \\n       \\n\\n        return count           \\n\\n```\\n\\n\\n\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n\\n        counter = 0\\n\\n        for i in zip(*strs):\\n            if list(i)!=sorted(i):\\n                counter+=1\\n\\n        return counter              \\n```\n```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n\\n        grid = []\\n\\n        for i in range(len(strs)):\\n            grid.append(list(strs[i]))\\n\\n\\n        result = [[grid[j][i] for j in range(len(grid))] for i in range(len(grid[0]))] \\n\\n\\n        new = []\\n\\n        for i in range(len(result)):\\n            new.append(\"\".join(sorted(result[i])))\\n\\n        count = 0\\n\\n        for i in range(len(result)):\\n            if \"\".join(result[i])!=new[i]:\\n                count+=1\\n        \\n       \\n\\n        return count           \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2990789,
                "title": "easy-c-solution",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $O(n^2)$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $O(1)$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int result = 0;\\n\\n        for(int i=0; i<strs[0].size(); ++i)\\n            for(int j=1; j<strs.size(); ++j)\\n                if(strs[j][i] < strs[j-1][i]){\\n                    ++result;\\n                    break;\\n                }\\n        \\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int result = 0;\\n\\n        for(int i=0; i<strs[0].size(); ++i)\\n            for(int j=1; j<strs.size(); ++j)\\n                if(strs[j][i] < strs[j-1][i]){\\n                    ++result;\\n                    break;\\n                }\\n        \\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2990685,
                "title": "c-simple-logic-row-and-col-space-o-1-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) \\n    {\\n        int n = strs.size();\\n        int m = strs[0].size();\\n        \\n        int ans=0;\\n        \\n        // just check for each column, and if we got wrong lexicographically order just remove that and incraese count by 1\\n        for(int j=0;j<m;j++)        // each column\\n        {\\n            for(int i=1;i<n;i++)    // each row\\n            {\\n                if(strs[i-1][j] > strs[i][j])\\n                {\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) \\n    {\\n        int n = strs.size();\\n        int m = strs[0].size();\\n        \\n        int ans=0;\\n        \\n        // just check for each column, and if we got wrong lexicographically order just remove that and incraese count by 1\\n        for(int j=0;j<m;j++)        // each column\\n        {\\n            for(int i=1;i<n;i++)    // each row\\n            {\\n                if(strs[i-1][j] > strs[i][j])\\n                {\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989260,
                "title": "brute-force-approach-python-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe simply traverse the matrix column wise, when we encounter that two consecutive elements of the column are not in lexicographic order, we add the column number in a temporary list `c`.\\nAfter Traversing the whole list of strings, there\\'s a high chance of having redundant values in the list `c`. Thus , we typecaste the list `c` to a set, which will drop any redundant values in the list and have distinct column numbers to be deleted. At the end we will simply return the length of the set `c`.\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        c = []\\n        for i in range(len(strs)-1):\\n            for j in range(len(strs[0])):\\n                if strs[i][j] > strs[i+1][j]:\\n                    c.append(j)\\n        return len(set(c))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        c = []\\n        for i in range(len(strs)-1):\\n            for j in range(len(strs[0])):\\n                if strs[i][j] > strs[i+1][j]:\\n                    c.append(j)\\n        return len(set(c))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2991057,
                "title": "c-easy-fully-explained-in-hindi",
                "content": "# Intuition\\nJaisa question m bola h waisa he krna h (check for all char)\\n\\n# Approach\\nham sabse phle first word pr jayenge or uske first, second...nd all character ko remaining word ke first second ..nd all character se match krenge(how ??check if condition in my code) agar koi character condition satisfy nahi kr rha h to hmare count jo initially 0 tha usme increament krenge or loop ko break kr lenge for that char only.\\nwe will use 2 for loop for that\\n\\n# Complexity\\n- Time complexity:\\nO(N^2)Constraints bhut chote h\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>&s) {\\n        int ans=0;\\n        for(int i=0;i<s[0].size();i++)\\n            for(int j=1;j<s.size();j++)\\n             if(s[j][i]<s[j-1][i]){\\n                ans++;\\n                break;\\n             }\\n             return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>&s) {\\n        int ans=0;\\n        for(int i=0;i<s[0].size();i++)\\n            for(int j=1;j<s.size();j++)\\n             if(s[j][i]<s[j-1][i]){\\n                ans++;\\n                break;\\n             }\\n             return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989849,
                "title": "c-java-and-javascript-o-n-solution-easy-to-understand",
                "content": "# Java Code\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int row=strs.length;\\n        int col=strs[0].length();\\n        int ans=0;\\n\\n        for(int i=0;i<col;i++)\\n        {\\n            for(int j=0;j<row-1;j++)\\n            {\\n                if(strs[j].charAt(i)>strs[j+1].charAt(i))\\n                {\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```\\n\\n# C++ Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& s) {\\n        int col=s[0].length();\\n        int row=s.size();\\n        int ans=0;\\n        for(int i=0;i<col;i++)\\n        {\\n            for(int j=0;j<row-1;j++)\\n            {\\n                if(s[j][i]>s[j+1][i])\\n                {\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n# JavaScript Code\\n```\\n/**\\n * @param {string[]} strs\\n * @return {number}\\n */\\nvar minDeletionSize = function(strs) {\\n    const row=strs.length;\\n    const col=strs[0].length;\\n    let ans=0;\\n    for(let i=0;i<col;i++)\\n    {\\n        for(let j=0;j<row-1;j++)\\n        {\\n            if(strs[j][i]>strs[j+1][i])\\n            {\\n                ans++;\\n                break;\\n            }\\n        }\\n    }\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "JavaScript"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int row=strs.length;\\n        int col=strs[0].length();\\n        int ans=0;\\n\\n        for(int i=0;i<col;i++)\\n        {\\n            for(int j=0;j<row-1;j++)\\n            {\\n                if(strs[j].charAt(i)>strs[j+1].charAt(i))\\n                {\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& s) {\\n        int col=s[0].length();\\n        int row=s.size();\\n        int ans=0;\\n        for(int i=0;i<col;i++)\\n        {\\n            for(int j=0;j<row-1;j++)\\n            {\\n                if(s[j][i]>s[j+1][i])\\n                {\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\n```\\n/**\\n * @param {string[]} strs\\n * @return {number}\\n */\\nvar minDeletionSize = function(strs) {\\n    const row=strs.length;\\n    const col=strs[0].length;\\n    let ans=0;\\n    for(let i=0;i<col;i++)\\n    {\\n        for(let j=0;j<row-1;j++)\\n        {\\n            if(strs[j][i]>strs[j+1][i])\\n            {\\n                ans++;\\n                break;\\n            }\\n        }\\n    }\\n    return ans;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989543,
                "title": "simple-java-solution-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- Since we are talking about a grid, we might need a nested loop to solve the problem.\\n- One way to solve this problem would be iterating over a particular column in a grid and checking whether that particular column in sorted.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Create a variable to keep track of the number of columns to be deleted. Let\\'s call it `colsDelete`. \\n- Have an outer loop to iterate over the length of any string in `strs`. (Since all the strings in `strs` have same length)\\n- The inner loop will iterate over all the strings in `strs` i.e. `strs.length`. This ensures that we are traversing columnwise. \\n- Now check whether `(strs[j].charAt(i) < strs[j-1].charAt(i))`. This means we are checking whether two adjacent rows in a column are lexiographically sorted or not.\\n- If not then increment `colsDelete` and `break` the inner loop as we do not need to check further whether that column is sorted.\\n- Finally, after checking for all columns, return `colsDelete`\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int colsDelete = 0; \\n\\n        //Iterating over the length of any string in strs. Here we took strs[0]\\n        for(int i=0; i<strs[0].length(); i++){\\n\\n            //Iterating over all the strings in strs\\n            for(int j=1; j<strs.length; j++){\\n\\n                if(strs[j].charAt(i) < strs[j-1].charAt(i)){\\n                    colsDelete++;\\n                    break;\\n                } \\n            }\\n        }\\n        return colsDelete;\\n    }\\n}\\n```\\n\\n**Please do Upvote if found helpful**",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int colsDelete = 0; \\n\\n        //Iterating over the length of any string in strs. Here we took strs[0]\\n        for(int i=0; i<strs[0].length(); i++){\\n\\n            //Iterating over all the strings in strs\\n            for(int j=1; j<strs.length; j++){\\n\\n                if(strs[j].charAt(i) < strs[j-1].charAt(i)){\\n                    colsDelete++;\\n                    break;\\n                } \\n            }\\n        }\\n        return colsDelete;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989304,
                "title": "c-c-java-python-brute-force",
                "content": "\\n```C++ []\\nint minDeletionSize(vector<string>& strs) {\\n    int remove = 0;\\n    for(int i=0 ; i<strs[0].size();++i)\\n        for(int j=0;j<strs.size()-1;++j)\\n            if(strs[j][i] > strs[j+1][i]){\\n                ++remove;\\n                break;\\n            }\\n    return remove;\\n```\\n```java []\\npublic int minDeletionSize(String[] strs) {\\n    int remove = 0;\\n    for(int i=0 ; i<strs[0].length();i++)\\n        for(int j=0;j<strs.length-1;j++)\\n            if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                ++remove;\\n                break;\\n            }\\n    return remove;\\n```\\n```c []\\nint minDeletionSize(char ** strs, int strsSize){\\n    int remove = 0;\\n    for(int i=0 ; i<strlen(strs[0]);++i)\\n        for(int j=0;j<strsSize-1;++j)\\n            if(strs[j][i] > strs[j+1][i]){\\n                ++remove;\\n                break;\\n            }\\n    return remove;\\n```\\n```python []\\ndef minDeletionSize(self, strs):\\n    remove = 0\\n    for i in range(len(strs[0])):\\n        for j in range(len(strs)-1):\\n            if(strs[j][i] > strs[j+1][i]):\\n                remove += 1\\n                break\\n    return remove \\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```C++ []\\nint minDeletionSize(vector<string>& strs) {\\n    int remove = 0;\\n    for(int i=0 ; i<strs[0].size();++i)\\n        for(int j=0;j<strs.size()-1;++j)\\n            if(strs[j][i] > strs[j+1][i]){\\n                ++remove;\\n                break;\\n            }\\n    return remove;\\n```\n```java []\\npublic int minDeletionSize(String[] strs) {\\n    int remove = 0;\\n    for(int i=0 ; i<strs[0].length();i++)\\n        for(int j=0;j<strs.length-1;j++)\\n            if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                ++remove;\\n                break;\\n            }\\n    return remove;\\n```\n```c []\\nint minDeletionSize(char ** strs, int strsSize){\\n    int remove = 0;\\n    for(int i=0 ; i<strlen(strs[0]);++i)\\n        for(int j=0;j<strsSize-1;++j)\\n            if(strs[j][i] > strs[j+1][i]){\\n                ++remove;\\n                break;\\n            }\\n    return remove;\\n```\n```python []\\ndef minDeletionSize(self, strs):\\n    remove = 0\\n    for i in range(len(strs[0])):\\n        for j in range(len(strs)-1):\\n            if(strs[j][i] > strs[j+1][i]):\\n                remove += 1\\n                break\\n    return remove \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2989210,
                "title": "python-o-m-n",
                "content": "# Code\\n```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        del_col = 0\\n        for c in range(len(strs[0])):\\n            for r in range(len(strs)-1):\\n                if strs[r][c] > strs[r+1][c]:\\n                    del_col += 1\\n                    break\\n        return del_col\\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        del_col = 0\\n        for c in range(len(strs[0])):\\n            for r in range(len(strs)-1):\\n                if strs[r][c] > strs[r+1][c]:\\n                    del_col += 1\\n                    break\\n        return del_col\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1249501,
                "title": "golang-solution-with-quick-explanation",
                "content": "This solution loops through every column, and then if the previous letter in the column is greater than the current letter, we know that this column can be removed.\\n\\n``` go\\nfunc minDeletionSize(strs []string) int {\\n\\tres := 0\\n\\tfor i := 0; i < len(strs[0]); i++ {\\n\\t\\tfor j := 1; j < len(strs); j++ {\\n\\t\\t\\tif strs[j][i] < strs[j-1][i] {\\n\\t\\t\\t\\tres++\\n\\t\\t\\t\\tbreak\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn res\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "``` go\\nfunc minDeletionSize(strs []string) int {\\n\\tres := 0\\n\\tfor i := 0; i < len(strs[0]); i++ {\\n\\t\\tfor j := 1; j < len(strs); j++ {\\n\\t\\t\\tif strs[j][i] < strs[j-1][i] {\\n\\t\\t\\t\\tres++\\n\\t\\t\\t\\tbreak\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn res\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2995674,
                "title": "easy-solution-short-simple-best-method-easy-to-understand",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int ans=0;\\n        for(int i=0;i<strs[0].size();i++)\\n        {\\n            for(int j=1;j<strs.size();j++)\\n            {\\n                if(strs[j][i]<strs[j-1][i])\\n                {\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int ans=0;\\n        for(int i=0;i<strs[0].size();i++)\\n        {\\n            for(int j=1;j<strs.size();j++)\\n            {\\n                if(strs[j][i]<strs[j-1][i])\\n                {\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2993186,
                "title": "easy-c-solution-with-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUsing a counter and increment it every time we got lexicographically unsorted characters.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. We are going through all the columns, so this is outer loop.\\n2. We need to compare the current character with character at next row of same column, so traversal will be less than row-1.\\n3. If current character is greater than next row character, then increment counter and break from loop.\\n4. At last, return counter value.\\n\\n# Complexity\\n- Time complexity: O(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        \\n        int deletedCount = 0;\\n        int r = strs.size();\\n        int c = strs[0].size();\\n\\n        /*\\n        1. We are going through all the columns, so this is outer loop.\\n        2. We need to compare the currentChar with char at next row of same column, so traversal will be < row-1.\\n        3. If current char is > next row char, then increment deletedCount and break from loop.\\n        4. At last, return deletedCount.\\n        */\\n        \\n        for(int j=0; j<c; j++){\\n            for(int i=0; i<r-1; i++){\\n                if(strs[i][j] > strs[i+1][j]){\\n                    deletedCount++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return deletedCount;\\n    }\\n};\\n```\\n**Do UPVOTE, if you find this approach helpful.**\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        \\n        int deletedCount = 0;\\n        int r = strs.size();\\n        int c = strs[0].size();\\n\\n        /*\\n        1. We are going through all the columns, so this is outer loop.\\n        2. We need to compare the currentChar with char at next row of same column, so traversal will be < row-1.\\n        3. If current char is > next row char, then increment deletedCount and break from loop.\\n        4. At last, return deletedCount.\\n        */\\n        \\n        for(int j=0; j<c; j++){\\n            for(int i=0; i<r-1; i++){\\n                if(strs[i][j] > strs[i+1][j]){\\n                    deletedCount++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return deletedCount;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2992494,
                "title": "easy-c-solution",
                "content": "Here is the code for the question:\\n\\n``` C++ []\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int strlen = strs[0].length(), n = strs.size();\\n        int count{0};\\n        for (int i{0}; i<strlen; i++) {\\n            int a = \\'a\\';\\n            for (int j{0}; j<n; j++) {\\n                if (a <= strs[j][i]) {\\n                    a=strs[j][i];\\n                }\\n                else {\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return count;\\n    }\\n};\\n```\\n\\n*Upvote if it helped!*",
                "solutionTags": [
                    "C++"
                ],
                "code": "``` C++ []\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int strlen = strs[0].length(), n = strs.size();\\n        int count{0};\\n        for (int i{0}; i<strlen; i++) {\\n            int a = \\'a\\';\\n            for (int j{0}; j<n; j++) {\\n                if (a <= strs[j][i]) {\\n                    a=strs[j][i];\\n                }\\n                else {\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2992451,
                "title": "java-easiest-solution-possible",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int x = strs[0].length(), n = strs.length;\\n        int ans = 0;\\n        for (int j = 0; j < x; ++j) {\\n            for (int i = 1; i < n; ++i) {\\n                if (strs[i].charAt(j) < strs[i - 1].charAt(j)) {\\n                    ++ans;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int x = strs[0].length(), n = strs.length;\\n        int ans = 0;\\n        for (int j = 0; j < x; ++j) {\\n            for (int i = 1; i < n; ++i) {\\n                if (strs[i].charAt(j) < strs[i - 1].charAt(j)) {\\n                    ++ans;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2990754,
                "title": "c-most-optimized-easy-short-clean-code",
                "content": "![image](https://assets.leetcode.com/users/images/ebb1f9d3-e025-4a0f-9f5d-6e49e414e63b_1672728455.6099532.png)\\n\\n**T->O(m * n) [Worst Case Complexity] && S->O(1)**\\n\\n\\tclass Solution {\\n\\t\\tpublic:\\n\\t\\t\\tint minDeletionSize(vector<string>& strs) {\\n\\t\\t\\t\\tint n = strs.size();\\n\\t\\t\\t\\tint m = strs[0].size();\\n\\t\\t\\t\\tint count = 0;\\n\\t\\t\\t\\tfor(int col = 0 ; col < m ; col++){\\n\\t\\t\\t\\t\\tfor(int row = 0 ; row < n-1 ; row++){\\n\\t\\t\\t\\t\\t\\tif(strs[row][col] > strs[row+1][col]){\\n\\t\\t\\t\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn count;\\n\\t\\t\\t}\\n\\t\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\t\\tpublic:\\n\\t\\t\\tint minDeletionSize(vector<string>& strs) {\\n\\t\\t\\t\\tint n = strs.size();\\n\\t\\t\\t\\tint m = strs[0].size();\\n\\t\\t\\t\\tint count = 0;\\n\\t\\t\\t\\tfor(int col = 0 ; col < m ; col++){\\n\\t\\t\\t\\t\\tfor(int row = 0 ; row < n-1 ; row++){\\n\\t\\t\\t\\t\\t\\tif(strs[row][col] > strs[row+1][col]){\\n\\t\\t\\t\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2990652,
                "title": "c-simple-approach",
                "content": "# Complexity\\n- Time complexity:\\nO(nxs)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution \\n{\\npublic:\\n    int minDeletionSize(vector<string>& strs) \\n    {\\n        int n=strs.size(), sz=strs[0].size();\\n        int cnt=0;\\n        for(int j=0; j<sz; j++)\\n        {\\n            for(int i=1; i<n; i++)\\n            {\\n                if(strs[i][j] < strs[i-1][j]) \\n                {\\n                    cnt++;\\n                    break;\\n                }\\n            }\\n        }\\n        return cnt;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    int minDeletionSize(vector<string>& strs) \\n    {\\n        int n=strs.size(), sz=strs[0].size();\\n        int cnt=0;\\n        for(int j=0; j<sz; j++)\\n        {\\n            for(int i=1; i<n; i++)\\n            {\\n                if(strs[i][j] < strs[i-1][j]) \\n                {\\n                    cnt++;\\n                    break;\\n                }\\n            }\\n        }\\n        return cnt;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2990516,
                "title": "5ms-speed-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nBased on the Aschii values we can justify wether it is sorted or not.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nHere i have created a count varibale for storing the answer value and a for loop for each coloum and then declared a temp variable which stores the temperory value of previous aschi value of the character, with this \\'temp\\' i have chechked whether the present character value is greater then the previous one. In case of failure the loop is terminated and the count value is increased.\\n# Complexity\\n- Time complexity: 5 ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 42.8MB\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0;\\n        for(int i=0;i<strs[0].length();i++) {\\n        \\tint temp = 0;\\n        \\tfor(int j=0;j<strs.length;j++) {\\n        \\t\\tint a = strs[j].charAt(i);\\n        \\t\\tif(a>=temp) {\\n        \\t\\t\\ttemp = a;\\n        \\t\\t}else {\\n        \\t\\t\\tcount++;\\n        \\t\\t\\tbreak;\\n        \\t\\t}\\n        \\t}\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0;\\n        for(int i=0;i<strs[0].length();i++) {\\n        \\tint temp = 0;\\n        \\tfor(int j=0;j<strs.length;j++) {\\n        \\t\\tint a = strs[j].charAt(i);\\n        \\t\\tif(a>=temp) {\\n        \\t\\t\\ttemp = a;\\n        \\t\\t}else {\\n        \\t\\t\\tcount++;\\n        \\t\\t\\tbreak;\\n        \\t\\t}\\n        \\t}\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2990389,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n       bool check(string st)\\n        {\\n            int count=0;\\n            for(int i=1; i<st.length(); i++)\\n                if(st[i]<st[i-1])\\n                    return 1;   \\n            return 0;\\n        }\\n    int minDeletionSize(vector<string>& str) {\\n        int count=0;\\n        int col = str[0].size();\\n        for(int j=0; j<col; j++)\\n            {\\n                string str1 = \"\";\\n                for(int i=0; i<str.size(); i++)\\n                    str1 += str[i][j];\\n                if(check(str1)) count++;\\n            }\\n            return count;\\n        }\\n    };\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n       bool check(string st)\\n        {\\n            int count=0;\\n            for(int i=1; i<st.length(); i++)\\n                if(st[i]<st[i-1])\\n                    return 1;   \\n            return 0;\\n        }\\n    int minDeletionSize(vector<string>& str) {\\n        int count=0;\\n        int col = str[0].size();\\n        for(int j=0; j<col; j++)\\n            {\\n                string str1 = \"\";\\n                for(int i=0; i<str.size(); i++)\\n                    str1 += str[i][j];\\n                if(check(str1)) count++;\\n            }\\n            return count;\\n        }\\n    };\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2990169,
                "title": "using-map-short-easy-c",
                "content": "\\nThis can be done in a single pass! Look at the code.\\nn: strs.size() , m = strs[0].size()\\n# Complexity\\n- Time complexity: O(n*m)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(m)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n    int minDeletionSize(vector<string>& strs) {\\n        unordered_map<int,bool> column;   //** store column to be deleted \\n\\n        for(int i =1;i<strs.size();i++)\\n            for(int j=0;j<strs[i].size();j++)\\n                if(strs[i][j]<strs[i-1][j])column[j]=true;\\n            \\n        return column.size();\\n    }\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n    int minDeletionSize(vector<string>& strs) {\\n        unordered_map<int,bool> column;   //** store column to be deleted \\n\\n        for(int i =1;i<strs.size();i++)\\n            for(int j=0;j<strs[i].size();j++)\\n                if(strs[i][j]<strs[i-1][j])column[j]=true;\\n            \\n        return column.size();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2989628,
                "title": "java-easy-iterative-solution",
                "content": "# Approach\\nWe use nested for loop.\\nWe take the column number in the outer loop\\nand the row number in the inner loop.\\nWe use the ascii values to check the lexicographic order.\\n\\n\\n# Complexity\\n- Time complexity:\\nO(m x n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public static int minDeletionSize(String[] strs) {\\n        int c=0;\\n        int l = strs.length;\\n        for (int i = 0; i < strs[0].length(); i++) {\\n            for (int j = 0; j <l-1 ; j++) {\\n                if((int)strs[j].charAt(i)>(int)strs[j+1].charAt(i))\\n                {\\n                    c++;\\n                    break;\\n                }\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public static int minDeletionSize(String[] strs) {\\n        int c=0;\\n        int l = strs.length;\\n        for (int i = 0; i < strs[0].length(); i++) {\\n            for (int j = 0; j <l-1 ; j++) {\\n                if((int)strs[j].charAt(i)>(int)strs[j+1].charAt(i))\\n                {\\n                    c++;\\n                    break;\\n                }\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989497,
                "title": "c-easiest-possible-approach-100-efficient-in-memory-simple-loop",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& A) {\\n        int cnt = 0; // keep the track of non-ordered columns\\n        \\n        for(int i=0; i<A[0].length(); i++){\\n            bool flag = false;\\n            for(int j=1; j<A.size(); j++){\\n                if(A[j][i] < A[j-1][i])\\n                    flag = true; //mark true if found in non decreasing order\\n            }\\n            if(flag)\\n                cnt++; //update count\\n        }\\n        return cnt;\\n    }\\n};\\n```\\n\\n# Please upvote if you find this helpful.\\uD83D\\uDE4F\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& A) {\\n        int cnt = 0; // keep the track of non-ordered columns\\n        \\n        for(int i=0; i<A[0].length(); i++){\\n            bool flag = false;\\n            for(int j=1; j<A.size(); j++){\\n                if(A[j][i] < A[j-1][i])\\n                    flag = true; //mark true if found in non decreasing order\\n            }\\n            if(flag)\\n                cnt++; //update count\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989460,
                "title": "iterative-approach-c-easy",
                "content": "\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(m x n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(m x n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int c=0;\\n        for(int i=0;i<strs[0].size();i++){\\n            for(int k=0;k<strs.size()-1;k++){\\n                if(strs[k][i]>strs[k+1][i]){\\n                    c++;break;\\n                }\\n            }\\n        }\\n        return c;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int c=0;\\n        for(int i=0;i<strs[0].size();i++){\\n            for(int k=0;k<strs.size()-1;k++){\\n                if(strs[k][i]>strs[k+1][i]){\\n                    c++;break;\\n                }\\n            }\\n        }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989419,
                "title": "c-code-using-brute-force",
                "content": "# Intuition\\n- Brute Force \\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n- Iterate in column major order but starting at the second row each time. If any element is less than the the element in the previous row, we increase the count and break out of the loop since we don\\'t need to check the rest of them.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:$$O(n*m)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Codestr\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int count=0;\\n        for(int i=0;i<strs[0].length();i++)\\n        {\\n            for(int j=0;j<strs.size()-1;j++)\\n            {\\n                if(strs[j][i]>strs[j+1][i])\\n                {\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int count=0;\\n        for(int i=0;i<strs[0].length();i++)\\n        {\\n            for(int j=0;j<strs.size()-1;j++)\\n            {\\n                if(strs[j][i]>strs[j+1][i])\\n                {\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989406,
                "title": "swift-one-liner",
                "content": "**One-Liner, terse (accepted answer)**\\n```\\nclass Solution {\\n    func minDeletionSize(_ strs: [String]) -> Int {\\n        strs.reduce(Array(repeating:\"a\", count:strs[0].count)) { zip($0,$1).map { $0.0 > $0.1 ? \"~\" : $0.1 }}.filter { $0 == \"~\" }.count\\n    }\\n}\\n```\\n**NOTE:** This technically qualifies as a one-liner, since the `return` keyword was omitted.\\n\\n---\\n\\n**One-Liner, expanded and annotated (accepted answer)**\\n```\\nclass Solution {\\n    func minDeletionSize(_ strs: [String]) -> Int {\\n        strs.reduce(Array(repeating:\"a\", count:strs[0].count)) { columns, str in\\n\\t\\t\\t// Approach:\\n\\t\\t\\t// - Replace column element with `~` where lexographic order not maintained.\\n\\t\\t\\t// - At the end, return count of `~` in `columns`\\n            zip(columns, str)\\n            .map {\\n                // $0.0 is `columns` element \\n                // $0.1 is `str` element\\n                $0.0 > $0.1 ? \"~\" : $0.1  // `~` is (arbitrarily-chosen) larger ASCII value than `z`\\n            }\\n        }\\n        .filter { ch in ch == \"~\" }\\n        .count\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func minDeletionSize(_ strs: [String]) -> Int {\\n        strs.reduce(Array(repeating:\"a\", count:strs[0].count)) { zip($0,$1).map { $0.0 > $0.1 ? \"~\" : $0.1 }}.filter { $0 == \"~\" }.count\\n    }\\n}\\n```\n```\\nclass Solution {\\n    func minDeletionSize(_ strs: [String]) -> Int {\\n        strs.reduce(Array(repeating:\"a\", count:strs[0].count)) { columns, str in\\n\\t\\t\\t// Approach:\\n\\t\\t\\t// - Replace column element with `~` where lexographic order not maintained.\\n\\t\\t\\t// - At the end, return count of `~` in `columns`\\n            zip(columns, str)\\n            .map {\\n                // $0.0 is `columns` element \\n                // $0.1 is `str` element\\n                $0.0 > $0.1 ? \"~\" : $0.1  // `~` is (arbitrarily-chosen) larger ASCII value than `z`\\n            }\\n        }\\n        .filter { ch in ch == \"~\" }\\n        .count\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2635180,
                "title": "without-zip-function-in-python-faster-than-82-o-n-2",
                "content": "```\\n        c= 0\\n        for i in range(len(strs[0])):\\n             for j in range(1,len(strs)):\\n                if strs[j-1][i] > strs[j][i]:\\n                    c+= 1\\n                    break\\n        return c\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n        c= 0\\n        for i in range(len(strs[0])):\\n             for j in range(1,len(strs)):\\n                if strs[j-1][i] > strs[j][i]:\\n                    c+= 1\\n                    break\\n        return c\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1854921,
                "title": "easy-solution-o-nk-faster-than-others",
                "content": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int delete_count=0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.size()-1;j++){\\n                if(strs[j][i]>strs[j+1][i]){\\n                    delete_count++;\\n                    break;\\n                }\\n                    \\n            }\\n        }\\n        return delete_count;\\n        \\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int delete_count=0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.size()-1;j++){\\n                if(strs[j][i]>strs[j+1][i]){\\n                    delete_count++;\\n                    break;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1080827,
                "title": "c-easy-solution-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& A) {\\n        int cnt = 0;\\n        \\n        for(int i=0; i<A[0].length(); i++){\\n            bool flag = false;\\n            for(int j=1; j<A.size(); j++){\\n                if(A[j][i] < A[j-1][i])\\n                    flag = true;\\n            }\\n            if(flag)\\n                cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```\\n\\nKindly upvote if this helps you!! :)",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& A) {\\n        int cnt = 0;\\n        \\n        for(int i=0; i<A[0].length(); i++){\\n            bool flag = false;\\n            for(int j=1; j<A.size(); j++){\\n                if(A[j][i] < A[j-1][i])\\n                    flag = true;\\n            }\\n            if(flag)\\n                cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 907550,
                "title": "java-5-ms",
                "content": "```\\nclass Solution {\\n    public int minDeletionSize(String[] A) {\\n        int result = 0;\\n        char[][] aToChars = new char[A.length][A[0].length()];\\n        int k = 0;\\n        \\n        for(String s: A){\\n            aToChars[k] = s.toCharArray();\\n            k++;\\n        }\\n        \\n        for(int i = 0; i< A[0].length(); i++){\\n            for(int j = 1; j < A.length; j++){\\n                if(aToChars[j-1][i] > aToChars[j][i]){\\n                    result++;\\n                    break;\\n                }\\n            }\\n        }\\n        \\n       return result;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int minDeletionSize(String[] A) {\\n        int result = 0;\\n        char[][] aToChars = new char[A.length][A[0].length()];\\n        int k = 0;\\n        \\n        for(String s: A){\\n            aToChars[k] = s.toCharArray();\\n            k++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 751152,
                "title": "python-3-submission",
                "content": "```\\nclass Solution:\\n    def minDeletionSize(self, A: List[str]) -> int:\\n        strings = []\\n        for i in range(0,len(A[0])):\\n            temp = \"\".join([item[i] for item in A])\\n            if \"\".join(sorted(temp)) == temp:\\n                pass\\n            else:\\n                strings.append(1)\\n        return len(strings)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minDeletionSize(self, A: List[str]) -> int:\\n        strings = []\\n        for i in range(0,len(A[0])):\\n            temp = \"\".join([item[i] for item in A])\\n            if \"\".join(sorted(temp)) == temp:\\n                pass\\n            else:\\n                strings.append(1)\\n        return len(strings)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 741397,
                "title": "c-one-liner",
                "content": "```csharp\\npublic int MinDeletionSize(string[] A) {\\n\\treturn Enumerable\\n\\t\\t.Range(0, A[0].Length)\\n\\t\\t.Select(i => new string(A.Select(s => s[i]).ToArray()))\\n\\t\\t.Count(col => new string(col.OrderBy(c => c).ToArray()) != col);\\n}\\n```",
                "solutionTags": [],
                "code": "```csharp\\npublic int MinDeletionSize(string[] A) {\\n\\treturn Enumerable\\n\\t\\t.Range(0, A[0].Length)\\n\\t\\t.Select(i => new string(A.Select(s => s[i]).ToArray()))\\n\\t\\t.Count(col => new string(col.OrderBy(c => c).ToArray()) != col);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 427225,
                "title": "python3-6-line-96ms-beats-99-easy-to-understand",
                "content": "```\\nclass Solution:\\n    def minDeletionSize(self, A: List[str]) -> int:\\n        zipped=list(map(list,zip(*A)))\\n        count=0\\n        for item in zipped:\\n            if item!=sorted(item):\\n                count+=1\\n        return count\\n```",
                "solutionTags": [
                    "Python3",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def minDeletionSize(self, A: List[str]) -> int:\\n        zipped=list(map(list,zip(*A)))\\n        count=0\\n        for item in zipped:\\n            if item!=sorted(item):\\n                count+=1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 240225,
                "title": "python-128-ms",
                "content": "```\\n check =0\\n        for i in range(len(A[0])):\\n            stack=[ord(x[i]) for x in A]\\n            if stack != sorted(stack):\\n                check += 1\\n            \\n        return check\\n\\t```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n check =0\\n        for i in range(len(A[0])):\\n            stack=[ord(x[i]) for x in A]\\n            if stack != sorted(stack):\\n                check += 1\\n            \\n        return check\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 198993,
                "title": "simple-javascript-solution-with-comments",
                "content": "@LeetCode please stop using/allowing single capital letters for param names. It is literally non-existent in real code.\\nSome people might even take note and start using it themselves.\\n\\n```\\nvar minDeletionSize = function(A) {\\n    \\n    // increment this if we find a\\n    // column that is out of order\\n    let numColumnsToDelete = 0;\\n\\n    // all strings in the array\\n    // are the same length\\n    const strLength = A[0].length;\\n\\n    // outer loop checks entire string\\n    for (let i = 0; i < strLength; i++) {\\n\\n        // inner loop checks the colunns\\n        for (let j = 0; j < A.length - 1; j++) {\\n\\n            const top = A[j][i];\\n            const bottom = A[j + 1][i];\\n\\n            if (top > bottom) {\\n                numColumnsToDelete++;\\n                break;\\n            }\\n        }\\n    }\\n\\n    return numColumnsToDelete;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar minDeletionSize = function(A) {\\n    \\n    // increment this if we find a\\n    // column that is out of order\\n    let numColumnsToDelete = 0;\\n\\n    // all strings in the array\\n    // are the same length\\n    const strLength = A[0].length;\\n\\n    // outer loop checks entire string\\n    for (let i = 0; i < strLength; i++) {\\n\\n        // inner loop checks the colunns\\n        for (let j = 0; j < A.length - 1; j++) {\\n\\n            const top = A[j][i];\\n            const bottom = A[j + 1][i];\\n\\n            if (top > bottom) {\\n                numColumnsToDelete++;\\n                break;\\n            }\\n        }\\n    }\\n\\n    return numColumnsToDelete;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 194896,
                "title": "stl-overkill",
                "content": "```\\nclass Solution {\\n    public:\\n        int minDeletionSize(vector<string>& A) {\\n            vector<string> s(A.front().size(), string(A.size(), \\' \\'));\\n            for (int r = 0; r < A.size(); ++r) {\\n                for (int c = 0; c < A[r].size(); ++c) {\\n                    s[c][r] = A[r][c];\\n                }\\n            }\\n            return count_if(s.begin(), s.end(), [](auto & p) {\\n                return !is_sorted(p.begin(), p.end());\\n            });\\n        }\\n    };\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public:\\n        int minDeletionSize(vector<string>& A) {\\n            vector<string> s(A.front().size(), string(A.size(), \\' \\'));\\n            for (int r = 0; r < A.size(); ++r) {\\n                for (int c = 0; c < A[r].size(); ++c) {\\n                    s[c][r] = A[r][c];\\n                }\\n            }\\n            return count_if(s.begin(), s.end(), [](auto & p) {\\n                return !is_sorted(p.begin(), p.end());\\n            });\\n        }\\n    };\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3339326,
                "title": "best-solution-98-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe use an array to keep track of which columns need to be deleted. Initially, all columns are marked for deletion, and we mark columns as not needing to be deleted as we check each column. At the end, we return the count of columns that are marked for deletion.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string[]} strs\\n * @return {number}\\n */\\nvar minDeletionSize = function(strs) {\\n    const sortedCols = new Array(strs[0].length).fill(true);\\n    let count = 0;\\n    for(let i = 0; i < strs[0].length; i++){\\n        for(let j = 1; j < strs.length; j++){\\n            if(strs[j][i] < strs[j-1][i]){\\n                sortedCols[i] = false;\\n                break;\\n            }\\n        }\\n        if(!sortedCols[i]){\\n            count++;\\n        }\\n    }\\n    return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} strs\\n * @return {number}\\n */\\nvar minDeletionSize = function(strs) {\\n    const sortedCols = new Array(strs[0].length).fill(true);\\n    let count = 0;\\n    for(let i = 0; i < strs[0].length; i++){\\n        for(let j = 1; j < strs.length; j++){\\n            if(strs[j][i] < strs[j-1][i]){\\n                sortedCols[i] = false;\\n                break;\\n            }\\n        }\\n        if(!sortedCols[i]){\\n            count++;\\n        }\\n    }\\n    return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3252864,
                "title": "python-98-fastest-solution-simple-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUsing python zip function, get list of coulums and check for ordering in each column.\\n\\n# Code\\n```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        m,n,ans=len(strs),len(strs[0]),0\\n        l=list(zip(*strs))\\n        for item in l:\\n            for i in range(1,len(item)):\\n                if item[i]<item[i-1]:\\n                    ans+=1\\n                    break\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        m,n,ans=len(strs),len(strs[0]),0\\n        l=list(zip(*strs))\\n        for item in l:\\n            for i in range(1,len(item)):\\n                if item[i]<item[i-1]:\\n                    ans+=1\\n                    break\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3011950,
                "title": "c-solution-with-full-explanation-and-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe needed to delete \"columns\" that are not lexicographically sorted therefore we will need 2 loops and will have to travel across the matrix in column-wise fashion\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe vector given is 1-D but it is a vector of strings so it can be thought of as a 2-D array with row elements as the strings and column elements as the individual characters of the string \\nOuter loop will iterate across the columns.\\nNo. if columns = length of string \\n\\nInner loop will iterate across the rows \\nNo. of rows = no. of elements in the vector \\n\\nif ASCII value of element of column i is greater than ASCII value of element of column i+1 then it is not sorted and we increase the count \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n^2) - 2 nested for loops so n square time complexity\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1) - declared only one additional variable to keep track of count so constant space complexity\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        // ELEMENTS SHOULD BE SORTED LEXICOGRAPHICALLY - IN ALPHABETICAL ORDER **COLUMN WISE** \\n\\n        int n = strs.size();\\n        int cnt = 0 ; \\n        // have to check column-wise therefore outerloop for columns\\n        for (int i = 0 ; i<strs[0].size() ; i++)\\n        {\\n            // inner loop for rows \\n            for (int j = 0 ; j<strs.size()-1; j++)\\n            {\\n                // if ASCII value of previous element is greater than that of next then it is not sorted, we increase count and break the loop to move on to the next column\\n                if(strs[j][i]>strs[j+1][i])\\n                {\\n                    cnt++;\\n                    break;\\n                }\\n                else continue ; \\n            }\\n        }\\n        return cnt ; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        // ELEMENTS SHOULD BE SORTED LEXICOGRAPHICALLY - IN ALPHABETICAL ORDER **COLUMN WISE** \\n\\n        int n = strs.size();\\n        int cnt = 0 ; \\n        // have to check column-wise therefore outerloop for columns\\n        for (int i = 0 ; i<strs[0].size() ; i++)\\n        {\\n            // inner loop for rows \\n            for (int j = 0 ; j<strs.size()-1; j++)\\n            {\\n                // if ASCII value of previous element is greater than that of next then it is not sorted, we increase count and break the loop to move on to the next column\\n                if(strs[j][i]>strs[j+1][i])\\n                {\\n                    cnt++;\\n                    break;\\n                }\\n                else continue ; \\n            }\\n        }\\n        return cnt ; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2994175,
                "title": "c-image-explanation-easiest-solution-very-easy-to-understand-understandable",
                "content": "\\napproach :- simply make a string of all same characters of given set of strings  and see if the sorted string is same as our string .if not that means it is not in lexicograpphycally .so increase count by one unit \\n\\n![IMG_20230104_011304.jpg](https://assets.leetcode.com/users/images/241b0105-a8be-4567-8eac-964a4b8c05b1_1672775259.2226002.jpeg)\\n\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int size=strs[0].size();\\n        int ans=0;\\n        string temp=\"\";\\n        string temp2=\"\";\\n        for(int i=0;i<size;++i){\\n        for(auto string: strs){\\n            temp+=string[i];\\n        } \\n         string temp2=temp;\\n         sort(temp.begin(),temp.end());\\n        if(temp!=temp2){\\n         ans++;\\n        } temp=\"\";\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int size=strs[0].size();\\n        int ans=0;\\n        string temp=\"\";\\n        string temp2=\"\";\\n        for(int i=0;i<size;++i){\\n        for(auto string: strs){\\n            temp+=string[i];\\n        } \\n         string temp2=temp;\\n         sort(temp.begin(),temp.end());\\n        if(temp!=temp2){\\n         ans++;\\n        } temp=\"\";\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2994134,
                "title": "simple-java-code",
                "content": "# Intuition \\nWe have to check each character of each string in array and break the loop as soon as we find non-lexicographicaly arranged character in column.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int len=strs.length;\\n       int count=0;\\n        int k=strs[0].length();\\n        if(strs==null) return count;\\n        for(int i=0;i<k;i++)\\n        {\\n           \\nfor(int j=0;j<len-1;j++)\\n            {\\n                \\n                if(strs[j].charAt(i)>strs[j+1].charAt(i))\\n                {\\n                    count++;\\n                    break;\\n                }\\n\\n            }\\n        }\\n       \\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int len=strs.length;\\n       int count=0;\\n        int k=strs[0].length();\\n        if(strs==null) return count;\\n        for(int i=0;i<k;i++)\\n        {\\n           \\nfor(int j=0;j<len-1;j++)\\n            {\\n                \\n                if(strs[j].charAt(i)>strs[j+1].charAt(i))\\n                {\\n                    count++;\\n                    break;\\n                }\\n\\n            }\\n        }\\n       \\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2993715,
                "title": "easy-and-simple-2-approaches-with-simple-comments",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)\\n# Code\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        // initializing deletCol variable\\n        int deleteCol = 0;\\n        // traverse on to get first letter of each String\\n        // Approach => getting column from the matrix \\n        for(int i = 0; i < strs[0].length(); i ++) {\\n            // initializing temporay for checking sorted or not\\n            String tempStr = \"\";\\n            for(int j = 0; j < strs.length; j ++) {\\n                tempStr += strs[j].charAt(i);\\n            }\\n            // check tempStr\\n            if(!isSorted(tempStr)) deleteCol++;\\n        }\\n        return deleteCol;\\n    }\\n    //  create method for checking sorted or not\\n    public  boolean isSorted(String str) {\\n        for(int i = 0; i < str.length() - 1; i ++){\\n            if(str.charAt(i) > str.charAt(i + 1))  return false;\\n        }\\n        return true;\\n    }\\n}\\n```\\n```\\npublic int minDeletionSize(String[] strs) {\\n         // initializing deletCol variable\\n        int deleteCol = 0;\\n\\n        // traverse on to get first letter of each String\\n        // Approach => getting column from the matrix\\n        for(int i = 0; i < strs[0].length(); i ++) {\\n            String tempStr = \"\";\\n            for(int j = 1; j < strs.length; j ++) {\\n                tempStr += strs[j].charAt(i);\\n                // checking character are in sorted or not\\n                if(strs[j].charAt(i) < strs[j-1].charAt(i)){\\n                        deleteCol ++;\\n                        break;\\n                }\\n            }\\n            //if(!isSorted(tempStr)) deleteCol++;\\n        }\\n        return deleteCol;\\n    }\\n```\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        // initializing deletCol variable\\n        int deleteCol = 0;\\n        // traverse on to get first letter of each String\\n        // Approach => getting column from the matrix \\n        for(int i = 0; i < strs[0].length(); i ++) {\\n            // initializing temporay for checking sorted or not\\n            String tempStr = \"\";\\n            for(int j = 0; j < strs.length; j ++) {\\n                tempStr += strs[j].charAt(i);\\n            }\\n            // check tempStr\\n            if(!isSorted(tempStr)) deleteCol++;\\n        }\\n        return deleteCol;\\n    }\\n    //  create method for checking sorted or not\\n    public  boolean isSorted(String str) {\\n        for(int i = 0; i < str.length() - 1; i ++){\\n            if(str.charAt(i) > str.charAt(i + 1))  return false;\\n        }\\n        return true;\\n    }\\n}\\n```\n```\\npublic int minDeletionSize(String[] strs) {\\n         // initializing deletCol variable\\n        int deleteCol = 0;\\n\\n        // traverse on to get first letter of each String\\n        // Approach => getting column from the matrix\\n        for(int i = 0; i < strs[0].length(); i ++) {\\n            String tempStr = \"\";\\n            for(int j = 1; j < strs.length; j ++) {\\n                tempStr += strs[j].charAt(i);\\n                // checking character are in sorted or not\\n                if(strs[j].charAt(i) < strs[j-1].charAt(i)){\\n                        deleteCol ++;\\n                        break;\\n                }\\n            }\\n            //if(!isSorted(tempStr)) deleteCol++;\\n        }\\n        return deleteCol;\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2992427,
                "title": "simple-o-mn-solution-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTraverse array and check for condition\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nouter loop:for loop for traversing a string\\ninner loop:for loop for checking the same index character over the array\\nif condition satisfied count++ and end inner for loop I used i==strs.length to end it\\nreturn count\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(mn)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int cnt=0;\\n        for(int j=0;j<strs[0].length();j++){\\n            for(int i=1;i<strs.length;i++){\\n                if(strs[i-1].charAt(j)>strs[i].charAt(j)){\\n                    cnt++;i=strs.length;\\n                }\\n            }\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int cnt=0;\\n        for(int j=0;j<strs[0].length();j++){\\n            for(int i=1;i<strs.length;i++){\\n                if(strs[i-1].charAt(j)>strs[i].charAt(j)){\\n                    cnt++;i=strs.length;\\n                }\\n            }\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2992264,
                "title": "dart-solution-beats-100",
                "content": "# Complexity\\n### Time complexity:\\n- $$O(n*m)$$ -> worst case \\n    - Where (n) is the number of **strs** , and (m) is the length of strings.\\n\\n- **Space complexity**:\\nSolution is : $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\nint minDeletionSize(List<String> strs) {\\n  var deletedColumnsCount = 0;\\n  for (var i = 0; i < strs[0].length; i++) {\\n    for (var j = 0; j < strs.length - 1; j++) {\\n      if (strs[j][i].codeUnits[0] > strs[j + 1][i].codeUnits[0]) {\\n        deletedColumnsCount++;\\n        break;\\n      }\\n    }\\n  }\\n  return deletedColumnsCount;\\n}\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\nint minDeletionSize(List<String> strs) {\\n  var deletedColumnsCount = 0;\\n  for (var i = 0; i < strs[0].length; i++) {\\n    for (var j = 0; j < strs.length - 1; j++) {\\n      if (strs[j][i].codeUnits[0] > strs[j + 1][i].codeUnits[0]) {\\n        deletedColumnsCount++;\\n        break;\\n      }\\n    }\\n  }\\n  return deletedColumnsCount;\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2991752,
                "title": "o-n-m-easy-solution-c",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int n=strs[0].size();\\n        int ans=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            char curr=\\'a\\';\\n            for(string s:strs)\\n            {\\n                if(s[i]>=curr) curr=s[i];\\n                else\\n                {\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int n=strs[0].size();\\n        int ans=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            char curr=\\'a\\';\\n            for(string s:strs)\\n            {\\n                if(s[i]>=curr) curr=s[i];\\n                else\\n                {\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2991728,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int MinDeletionSize(string[] strs) {\\n        int columnDel = 0;\\n        for(int i = 0; i < strs[0].Length; i++)\\n        {\\n            for(int j = 0; j < strs.Length-1; j++)\\n            {\\n                if(strs[j][i] > strs[j+1][i])\\n                {\\n                    columnDel++;\\n                    break;\\n                }\\n            }\\n        }\\n        return columnDel;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinDeletionSize(string[] strs) {\\n        int columnDel = 0;\\n        for(int i = 0; i < strs[0].Length; i++)\\n        {\\n            for(int j = 0; j < strs.Length-1; j++)\\n            {\\n                if(strs[j][i] > strs[j+1][i])\\n                {\\n                    columnDel++;\\n                    break;\\n                }\\n            }\\n        }\\n        return columnDel;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2991691,
                "title": "100-0ms-explained-beats-100-proof",
                "content": "# UPVOTE PLS\\n\\n\\n![image.png](https://assets.leetcode.com/users/images/c1030d8d-c24a-4807-aac6-96f28a069d50_1672740417.848588.png)\\n\\n# Complexity\\n- Time complexity: O(N*rowSize)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] A) {\\n        int deleted = 0;\\n        if (A == null || A.length == 0) return deleted;\\n        int rowSize = A[0].length();\\n        \\n        for (int col = 0; col < rowSize; col++){\\n            if (!isSorted(A, col)) deleted++;\\n        }\\n        \\n        return deleted;\\n    }\\n    \\n    boolean isSorted(String[] A, int col){\\n        int N = A.length;\\n        char prev = (char)0;\\n        for (int i = 0; i < N; i++){\\n            char c = A[i].charAt(col);\\n            //If out of order\\n            if (c < prev) return false;\\n            //update prev\\n            prev = c;\\n        }\\n        \\n        return true; //In order the whole time\\n    }\\n}\\n\\n\\npython \\n\\nclass Solution:\\n    def minDeletionSize(self, A: List[str]) -> int:\\n        return len([True for col in zip(*A) if sorted(col) != list(col)])\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] A) {\\n        int deleted = 0;\\n        if (A == null || A.length == 0) return deleted;\\n        int rowSize = A[0].length();\\n        \\n        for (int col = 0; col < rowSize; col++){\\n            if (!isSorted(A, col)) deleted++;\\n        }\\n        \\n        return deleted;\\n    }\\n    \\n    boolean isSorted(String[] A, int col){\\n        int N = A.length;\\n        char prev = (char)0;\\n        for (int i = 0; i < N; i++){\\n            char c = A[i].charAt(col);\\n            //If out of order\\n            if (c < prev) return false;\\n            //update prev\\n            prev = c;\\n        }\\n        \\n        return true; //In order the whole time\\n    }\\n}\\n\\n\\npython \\n\\nclass Solution:\\n    def minDeletionSize(self, A: List[str]) -> int:\\n        return len([True for col in zip(*A) if sorted(col) != list(col)])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2991545,
                "title": "ruby-1-liner",
                "content": "\\n\\n# Code\\n```ruby\\ndef min_deletion_size(strs)\\n    strs.map(&:chars).transpose.count{ |col| col.each_cons(2).any?{ _1 > _2 } } \\nend\\n```\\n<hr>\\n\\n# Tests:\\n```ruby\\nrequire \\'test/unit\\'\\nclass Test_min_deletion_size < Test::Unit::TestCase\\n    def test_\\n        assert_equal 1, min_deletion_size([\"cba\",\"daf\",\"ghi\"])\\n        assert_equal 0, min_deletion_size([\"a\",\"b\"])\\n        assert_equal 3, min_deletion_size([\"zyx\",\"wvu\",\"tsr\"])\\n    end\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```ruby\\ndef min_deletion_size(strs)\\n    strs.map(&:chars).transpose.count{ |col| col.each_cons(2).any?{ _1 > _2 } } \\nend\\n```\n```ruby\\nrequire \\'test/unit\\'\\nclass Test_min_deletion_size < Test::Unit::TestCase\\n    def test_\\n        assert_equal 1, min_deletion_size([\"cba\",\"daf\",\"ghi\"])\\n        assert_equal 0, min_deletion_size([\"a\",\"b\"])\\n        assert_equal 3, min_deletion_size([\"zyx\",\"wvu\",\"tsr\"])\\n    end\\nend\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2991268,
                "title": "commented-line-by-line-easy",
                "content": "# Code\\n```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        # count: to store no of columns we need to delete\\n        count=0\\n        # for columns\\n        for col in range(len(strs[0])):\\n            #for rows\\n            for row in range(1,len(strs)):\\n                #if current char is smaller than previous char in that column\\n                #then we need to delete that column \\n                #so just increase the count\\n                if strs[row-1][col] > strs[row][col]:\\n                    count+=1\\n                    #break bcz if any char is not sorted lexi.. \\n                    #then the whole will be deleted\\n                    #so need to check further char of column\\n                    break\\n        return count\\n                \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        # count: to store no of columns we need to delete\\n        count=0\\n        # for columns\\n        for col in range(len(strs[0])):\\n            #for rows\\n            for row in range(1,len(strs)):\\n                #if current char is smaller than previous char in that column\\n                #then we need to delete that column \\n                #so just increase the count\\n                if strs[row-1][col] > strs[row][col]:\\n                    count+=1\\n                    #break bcz if any char is not sorted lexi.. \\n                    #then the whole will be deleted\\n                    #so need to check further char of column\\n                    break\\n        return count\\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2991085,
                "title": "c-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        vector<char> v[1005];\\n        for(int j=0; j<strs[0].size(); j++) {\\n            for(int i=0; i<strs.size(); i++) {\\n                v[j].push_back(strs[i][j]);\\n            }\\n        }\\n        int ans = 0;\\n        for(int i=0; i<strs[0].size(); i++) {\\n            if(!is_sorted(v[i].begin(), v[i].end())) ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        vector<char> v[1005];\\n        for(int j=0; j<strs[0].size(); j++) {\\n            for(int i=0; i<strs.size(); i++) {\\n                v[j].push_back(strs[i][j]);\\n            }\\n        }\\n        int ans = 0;\\n        for(int i=0; i<strs[0].size(); i++) {\\n            if(!is_sorted(v[i].begin(), v[i].end())) ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2991001,
                "title": "simple-and-easy-to-understand-c",
                "content": "# Intuition\\n**Basically 2-D vector traversal**\\n# Approach\\nFirst, we are traversing throgh the entire string vector and checking whether the first character  of consecutive strings are in alphabetical order or not ,then the second character ...... upto the last character.\\n# Complexity\\n- Time complexity:\\n# **O(n*m)**\\nwhere n = size of each individual string \\n      m = size of string vector\\n\\n- Space complexity:\\n# **O(1)**\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int ans =0 , n=strs[1].size();\\n        int  j=0;\\n        while(j<n){\\n            int i=0;\\n            while(i<(strs.size())-1){\\n                string a = strs[i] ,b = strs[i+1];\\n                if(a[j] <= b[j]){\\n                    i++;\\n                }\\n                else{\\n                    ans++;\\n                    i++;\\n                    break;\\n                }\\n            }\\n            j++;\\n        }\\n        return ans;\\n       \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int ans =0 , n=strs[1].size();\\n        int  j=0;\\n        while(j<n){\\n            int i=0;\\n            while(i<(strs.size())-1){\\n                string a = strs[i] ,b = strs[i+1];\\n                if(a[j] <= b[j]){\\n                    i++;\\n                }\\n                else{\\n                    ans++;\\n                    i++;\\n                    break;\\n                }\\n            }\\n            j++;\\n        }\\n        return ans;\\n       \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2990942,
                "title": "using-defaultdict-and-iterative-process-lengthy-easy-but-slow",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        to_delete = 0\\n        column_values = defaultdict(str)\\n        for i in range(len(strs[0])):\\n            for j in range(len(strs)):\\n                column_values[i] += strs[j][i]\\n        for each in column_values.values():\\n            if list(each) != sorted(each):\\n                to_delete += 1\\n        return to_delete\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        to_delete = 0\\n        column_values = defaultdict(str)\\n        for i in range(len(strs[0])):\\n            for j in range(len(strs)):\\n                column_values[i] += strs[j][i]\\n        for each in column_values.values():\\n            if list(each) != sorted(each):\\n                to_delete += 1\\n        return to_delete\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2990912,
                "title": "c-bruteforce-approach-o-m-n",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int count=0;\\n        int row = strs.size();\\n        int col = strs[0].size();\\n        \\n        for(int j=0; j<col; j++){\\n            for(int i=0; i<row-1; i++){\\n                if(strs[i][j]>strs[i+1][j]){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int count=0;\\n        int row = strs.size();\\n        int col = strs[0].size();\\n        \\n        for(int j=0; j<col; j++){\\n            for(int i=0; i<row-1; i++){\\n                if(strs[i][j]>strs[i+1][j]){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2990837,
                "title": "c-space-o-1-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& s) \\n    {\\n        int del_count = 0;\\n        for(int j = 0; j<s[0].size(); j++)\\n        {\\n            for(int i = 1; i<s.size(); i++)\\n            {\\n                if(s[i-1][j]>s[i][j])\\n                {\\n                    del_count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return del_count; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& s) \\n    {\\n        int del_count = 0;\\n        for(int j = 0; j<s[0].size(); j++)\\n        {\\n            for(int i = 1; i<s.size(); i++)\\n            {\\n                if(s[i-1][j]>s[i][j])\\n                {\\n                    del_count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return del_count; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2990830,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int count=0;\\n        for(int i=0;i<strs[0].size();i++){\\n            for(int j=0;j<strs.size()-1;j++){\\n                if(strs[j][i]>strs[j+1][i]){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```\\n# **Please share and upvote**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int count=0;\\n        for(int i=0;i<strs[0].size();i++){\\n            for(int j=0;j<strs.size()-1;j++){\\n                if(strs[j][i]>strs[j+1][i]){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2990483,
                "title": "python3-simple-solutions",
                "content": "**Solution 1: for-loop**\\nhttps://leetcode.com/submissions/detail/870170112/\\nRuntime: **289 ms**, faster than 55.16% of Python3 online submissions for Delete Columns to Make Sorted.  \\nMemory Usage: 14.6 MB, less than 93.05% of Python3 online submissions for Delete Columns to Make Sorted.  \\n```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        n_rows, n_cols, n_del = len(strs), len(strs[0]), 0\\n        for j in range(n_cols):\\n            col_sorted = True\\n            for i in range(n_rows-1):\\n                if strs[i][j]>strs[i+1][j]:\\n                    col_sorted = False\\n                    break\\n            if not col_sorted:\\n                n_del += 1\\n        return n_del  \\n```\\n\\n**Solution 1.1: zip() and set()**  \\nhttps://leetcode.com/submissions/detail/870234000/\\nRuntime: **173 ms**, faster than 72.63% of Python3 online submissions for Delete Columns to Make Sorted.\\nMemory Usage: 14.6 MB, less than 61.89% of Python3 online submissions for Delete Columns to Make Sorted.\\n```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        n_row = len(strs)\\n        if n_row<=1: return 0\\n        cols_del = set()\\n        for i in range(n_row-1):\\n            for j,(c1,c2) in enumerate(zip(strs[i], strs[i+1])):\\n                if (j not in cols_del) and c1>c2:\\n                    cols_del.add(j)\\n        return len(cols_del)\\n```\\n\\n**Solution 2: numpy**  \\nhttps://leetcode.com/submissions/detail/870207660/  \\nRuntime: **492 ms**    \\nMemory Usage: 34.2 MB  \\n```\\nimport numpy as np\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        if len(strs)<=1: return 0\\n        arr = np.array([[ord(c) for c in s] for s in strs])\\n        return np.sum((np.any(np.greater(arr[:-1], arr[1:]), axis=0)))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        n_rows, n_cols, n_del = len(strs), len(strs[0]), 0\\n        for j in range(n_cols):\\n            col_sorted = True\\n            for i in range(n_rows-1):\\n                if strs[i][j]>strs[i+1][j]:\\n                    col_sorted = False\\n                    break\\n            if not col_sorted:\\n                n_del += 1\\n        return n_del  \\n```\n```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        n_row = len(strs)\\n        if n_row<=1: return 0\\n        cols_del = set()\\n        for i in range(n_row-1):\\n            for j,(c1,c2) in enumerate(zip(strs[i], strs[i+1])):\\n                if (j not in cols_del) and c1>c2:\\n                    cols_del.add(j)\\n        return len(cols_del)\\n```\n```\\nimport numpy as np\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        if len(strs)<=1: return 0\\n        arr = np.array([[ord(c) for c in s] for s in strs])\\n        return np.sum((np.any(np.greater(arr[:-1], arr[1:]), axis=0)))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2990383,
                "title": "simple-typescript-code-with-comments",
                "content": "\\n# Complexity\\n- Time complexity: O(N*M) N = string length, M = strs array length\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction minDeletionSize(strs: string[]): number {\\n    \\n    const N = strs[0].length\\n    const M = strs.length\\n    let count = 0\\n\\n    // traverse each  columns\\n    for(let i=0; i< N; i++){;\\n        // traverse each row \\n        for(let j = 1; j < M; j++){\\n            // check previous char should be smaller or equall in case of greater\\n            // break the loop bcoz we need to delete that column.\\n            // main the count of delete\\n            if(strs[j-1].charCodeAt(i) > strs[j].charCodeAt(i)){\\n                count++\\n                break;\\n            }\\n        }\\n    }\\n    return count\\n}; \\n```\\n**If you like this solution please upvode, Thanks**",
                "solutionTags": [
                    "Java",
                    "JavaScript",
                    "TypeScript",
                    "Array",
                    "String"
                ],
                "code": "```\\nfunction minDeletionSize(strs: string[]): number {\\n    \\n    const N = strs[0].length\\n    const M = strs.length\\n    let count = 0\\n\\n    // traverse each  columns\\n    for(let i=0; i< N; i++){;\\n        // traverse each row \\n        for(let j = 1; j < M; j++){\\n            // check previous char should be smaller or equall in case of greater\\n            // break the loop bcoz we need to delete that column.\\n            // main the count of delete\\n            if(strs[j-1].charCodeAt(i) > strs[j].charCodeAt(i)){\\n                count++\\n                break;\\n            }\\n        }\\n    }\\n    return count\\n}; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2990263,
                "title": "c-most-easy-solution-if-else-statement",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        \\n        int cnt = 0; // to count the non equal column\\n        int col = strs[0].size(); // column\\n        int row = strs.size(); // row\\n\\n\\n        for(int i=0; i<col; i++) // iterating throught column\\n        { \\n          // 1. 1st loop select the first column\\n          // 2. 2nd loop itreates row wise and checks the element of the colum nin each row\\n          // 3. if the ascii of the element is greater than the ascii of the next element it is not sorted\\n\\n            for(int j=0; j<row-1; j++)\\n            {\\n                if(strs[j][i] > strs[j+1][i])\\n                {\\n                    cnt++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return cnt; // return the non sorted column\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        \\n        int cnt = 0; // to count the non equal column\\n        int col = strs[0].size(); // column\\n        int row = strs.size(); // row\\n\\n\\n        for(int i=0; i<col; i++) // iterating throught column\\n        { \\n          // 1. 1st loop select the first column\\n          // 2. 2nd loop itreates row wise and checks the element of the colum nin each row\\n          // 3. if the ascii of the element is greater than the ascii of the next element it is not sorted\\n\\n            for(int j=0; j<row-1; j++)\\n            {\\n                if(strs[j][i] > strs[j+1][i])\\n                {\\n                    cnt++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return cnt; // return the non sorted column\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2990201,
                "title": "simple-easy-to-understand-brute-force-implementation-in-cpp",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int coldel = 0;\\n        for(int i=0; i<strs[0].size();i++)\\n        {\\n            for(int j=0; j <strs.size()-1;j++)\\n            {\\n                if(strs[j][i] > strs[j+1][i])\\n                {\\n                    coldel++;\\n                    break;\\n                }\\n            }\\n        }\\n        return coldel;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int coldel = 0;\\n        for(int i=0; i<strs[0].size();i++)\\n        {\\n            for(int j=0; j <strs.size()-1;j++)\\n            {\\n                if(strs[j][i] > strs[j+1][i])\\n                {\\n                    coldel++;\\n                    break;\\n                }\\n            }\\n        }\\n        return coldel;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989982,
                "title": "c-count-unsorted-columns-brute-force",
                "content": "# Approach\\n1. Traverse all strings column by column\\n2. Compare $$col$$th character of $$row$$th string with  $$col$$th character of $$row-1$$th string and increase $$ans$$ by $$1$$ if first character is lexographically greater than latter character\\n# Complexity\\n- Time complexity: $$O(n*m)$$ , where n is the number of strings in array and m is the length of each string \\n\\n- Space complexity: $$O(1)$$(Integer variables: n , len , ans , row , col)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) \\n    {\\n        int n=strs.size() , len=strs[0].length() , ans=0;\\n\\n        for(int col=0;col<len;col++)\\n        {\\n            for(int row=1;row<n;row++)\\n            {\\n                if(strs[row-1][col]>strs[row][col]) //Column is unsorted \\n                {\\n                    ans++;\\n                    break; //no need to check further in column\\n                }\\n            }\\n        }    \\n        return ans;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) \\n    {\\n        int n=strs.size() , len=strs[0].length() , ans=0;\\n\\n        for(int col=0;col<len;col++)\\n        {\\n            for(int row=1;row<n;row++)\\n            {\\n                if(strs[row-1][col]>strs[row][col]) //Column is unsorted \\n                {\\n                    ans++;\\n                    break; //no need to check further in column\\n                }\\n            }\\n        }    \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989974,
                "title": "leetcode-official-answer-with-python-implementation",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. --> \\nTake k = len(strs[0]) and ans = 0\\nIterate over the letters and second iteration over words and then check if the characters are in lexographical order or not, if not then increment ans by 1 and at last return ans.\\n\\n# Complexity\\n- Time complexity: O(n*k)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        k = len(strs[0])\\n        ans = 0\\n        for col in range(0,k):\\n            for row in range(1,len(strs)):\\n                if strs[row][col] < strs[row-1][col]:\\n                    ans += 1\\n                    break\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        k = len(strs[0])\\n        ans = 0\\n        for col in range(0,k):\\n            for row in range(1,len(strs)):\\n                if strs[row][col] < strs[row-1][col]:\\n                    ans += 1\\n                    break\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989901,
                "title": "c-easy-to-understand-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Traverse Column wise , if any current character of column is smaller than previous character count that column and break\\n\\n# Complexity\\n- Time complexity: (length of words)*(number of words)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int ans=0;\\n        for(int i;i<strs[0].size();i++){\\n            for(int j=1;j<strs.size();j++){\\n                if(strs[j][i]<strs[j-1][i]){\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int ans=0;\\n        for(int i;i<strs[0].size();i++){\\n            for(int j=1;j<strs.size();j++){\\n                if(strs[j][i]<strs[j-1][i]){\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989812,
                "title": "brute-force-simple-java-solution-beats-93-3",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int n=strs.length;\\n        int m=strs[0].length();\\n        int count=0;\\n        for(int j=0;j<m;j++){\\n            for(int i=1;i<n;i++){\\n                if(strs[i-1].charAt(j)>strs[i].charAt(j)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int n=strs.length;\\n        int m=strs[0].length();\\n        int count=0;\\n        for(int j=0;j<m;j++){\\n            for(int i=1;i<n;i++){\\n                if(strs[i-1].charAt(j)>strs[i].charAt(j)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989806,
                "title": "daily-leetcode-challenge-c-day-3",
                "content": "# Complexity\\n- Time complexity: O(row*column)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int count = 0; // Counting number of deleted columns\\n        int row = strs.size(); // Counting number of rows\\n        int column = strs[0].size(); // Counting number of columns\\n        // First we will iterate through column and then row\\n        for(int j = 0; j < column; j++){\\n            for(int i = 0; i < row-1; i++){\\n                // If not sorted lexicographically then we count and then break that column because no mean to check further in that column \\n                if(strs[i][j] > strs[i+1][j]){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int count = 0; // Counting number of deleted columns\\n        int row = strs.size(); // Counting number of rows\\n        int column = strs[0].size(); // Counting number of columns\\n        // First we will iterate through column and then row\\n        for(int j = 0; j < column; j++){\\n            for(int i = 0; i < row-1; i++){\\n                // If not sorted lexicographically then we count and then break that column because no mean to check further in that column \\n                if(strs[i][j] > strs[i+1][j]){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989732,
                "title": "c-begineer-friendly-easy-understanding-string-video-solution",
                "content": "# Intuition && Approach\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n**C++ Clear Explaination ,Please support if you find it usefull. Can give me feedback in comment for improvement.,will be very thankfull.**\\nhttps://www.youtube.com/watch?v=O35j95MSIZQ/\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n    O(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n    O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n int minDeletionSize(vector<string>& strs) {\\n        // count no. of rows and coln.\\n        int rows = strs.size();\\n        int colns = strs[0].size();\\n\\n        // store the ans\\n        int ans =0;\\n\\n        // Traverse column wise and for each row.\\n        for(int i=0;i<colns;i++){\\n            for(int j=1;j<rows;j++){\\n                // if previous row as higher value mean not sorted hence increase the value\\u2003of ans and break the inner loop for checking next column.\\n                if(strs[j-1][i]>strs[j][i]){\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return ans;\\n\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Array",
                    "String",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n int minDeletionSize(vector<string>& strs) {\\n        // count no. of rows and coln.\\n        int rows = strs.size();\\n        int colns = strs[0].size();\\n\\n        // store the ans\\n        int ans =0;\\n\\n        // Traverse column wise and for each row.\\n        for(int i=0;i<colns;i++){\\n            for(int j=1;j<rows;j++){\\n                // if previous row as higher value mean not sorted hence increase the value\\u2003of ans and break the inner loop for checking next column.\\n                if(strs[j-1][i]>strs[j][i]){\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return ans;\\n\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989545,
                "title": "c-0ms-fastest-solution-100-fast-beginner-friendly-clean-code",
                "content": "\\n# Code\\n```\\n\\nclass Solution {\\npublic:\\n\\n    int minDeletionSize(vector<string>& strs) {\\n        \\n        int cnt = 0;\\n\\n        for(int j = 0; j < strs[0].size(); ++j)\\n        {\\n            for(int i = 0; i < strs.size() - 1; ++i)\\n            {\\n                if(strs[i][j] > strs[i+1][j])\\n                {\\n                    cnt++;\\n                    break;\\n                }\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n\\n    int minDeletionSize(vector<string>& strs) {\\n        \\n        int cnt = 0;\\n\\n        for(int j = 0; j < strs[0].size(); ++j)\\n        {\\n            for(int i = 0; i < strs.size() - 1; ++i)\\n            {\\n                if(strs[i][j] > strs[i+1][j])\\n                {\\n                    cnt++;\\n                    break;\\n                }\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989286,
                "title": "c-parsing-by-column-with-condition-100-time-31ms-75-space-12-2mb",
                "content": "Nice problem for an easy one: not trivial, not trite.\\n\\nTo solve it, we will go and check each column separately, stopping as soon as we find an element out of order and increasing a counter with that information.\\n\\nStarting from our usual support variables, we will have:\\n* `res`, our counter of the unsorted columns, initialised to be `0`;\\n* `sorted`, a boolean flag we will use in our inner loop.\\n\\nWe will then go with `x` through each column and:\\n* reset the loop variables `prev` and `sorted` to `0` and `true`, respectively;\\n* loop through each row in the column with `y` and:\\n    * assign the value of the current cell `strs[y][x]` to `curr`;\\n    * deal with two cases:\\n        * if `curr` is not sorted in non-decreasing order (ie: `curr < prev`), we will:\\n            * flag `sorted` to be `false`;\\n            * `break` out of the inner loop;\\n        * otherwise, we will just set `prev` to be `curr` for the next iteration;\\n* increase `res` by `1` if we end the loop with `sorted == false`.\\n\\nOnce done, we can `return` `res` :)\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```cpp\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        // support variables\\n        int res = 0;\\n        bool sorted;\\n        // parsing strs\\n        for (int x = 0, lmtX = strs[0].size(), prev, curr; x < lmtX; x++) {\\n            // resetting loop variables\\n            prev = 0, sorted = true;\\n            // parsing the current column\\n            for (int y = 0, lmtY = strs.size(); y < lmtY; y++) {\\n                curr = strs[y][x];\\n                // case 1: unsorted element\\n                if (curr < prev) {\\n                    sorted = false;\\n                    break;\\n                }\\n                // case 2: sorted element\\n                else prev = curr;\\n            }\\n            res += !sorted;\\n        }\\n        return res;\\n    }\\n};\\n```\\n\\nThe brag:\\n![image.png](https://assets.leetcode.com/users/images/353991ba-eef3-4c40-944d-77568c01021d_1672707709.4222438.png)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        // support variables\\n        int res = 0;\\n        bool sorted;\\n        // parsing strs\\n        for (int x = 0, lmtX = strs[0].size(), prev, curr; x < lmtX; x++) {\\n            // resetting loop variables\\n            prev = 0, sorted = true;\\n            // parsing the current column\\n            for (int y = 0, lmtY = strs.size(); y < lmtY; y++) {\\n                curr = strs[y][x];\\n                // case 1: unsorted element\\n                if (curr < prev) {\\n                    sorted = false;\\n                    break;\\n                }\\n                // case 2: sorted element\\n                else prev = curr;\\n            }\\n            res += !sorted;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2930441,
                "title": "easy-solution-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs)\\n    {\\n\\n        int cnt = 0;\\n        for (int i = 0; i < strs[0].size(); i++) {\\n            bool flag = true;\\n            for (int j = 0; j < strs.size() - 1; j++) {\\n                if (strs[j][i] > strs[j + 1][i]) {\\n                    flag = false;\\n                    break;\\n                }\\n            }\\n\\n            if (flag == false) {\\n                cnt++;\\n            }\\n        }\\n\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs)\\n    {\\n\\n        int cnt = 0;\\n        for (int i = 0; i < strs[0].size(); i++) {\\n            bool flag = true;\\n            for (int j = 0; j < strs.size() - 1; j++) {\\n                if (strs[j][i] > strs[j + 1][i]) {\\n                    flag = false;\\n                    break;\\n                }\\n            }\\n\\n            if (flag == false) {\\n                cnt++;\\n            }\\n        }\\n\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2851555,
                "title": "swift-easy-to-understand",
                "content": "```\\nclass Solution {\\n    func minDeletionSize(_ strs: [String]) -> Int {\\n        var strs = strs.map { Array($0) }\\n\\t\\tvar result = 0\\n\\n\\t\\tfor column in 0..<strs[0].count {\\n\\t\\t\\tfor row in 0..<strs.count - 1 {\\n\\t\\t\\t\\tif strs[row][column] > strs[row + 1][column] {\\n\\t\\t\\t\\t\\tresult += 1\\n                    break\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn result\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func minDeletionSize(_ strs: [String]) -> Int {\\n        var strs = strs.map { Array($0) }\\n\\t\\tvar result = 0\\n\\n\\t\\tfor column in 0..<strs[0].count {\\n\\t\\t\\tfor row in 0..<strs.count - 1 {\\n\\t\\t\\t\\tif strs[row][column] > strs[row + 1][column] {\\n\\t\\t\\t\\t\\tresult += 1\\n                    break\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn result\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2596251,
                "title": "js-simple-solution-with-o-n-2-easy-understand",
                "content": "```\\nvar minDeletionSize = function(strs) {\\n    let output = 0;\\n    for (let i = 0 ; i < strs[0].length; i++) {\\n        let isSorted = true;\\n        for (let j = 0 ; j < strs.length - 1; j++) {\\n            if (strs[j + 1][i] < strs[j][i]) {\\n                isSorted = false;\\n                break;\\n            }\\n        }\\n        if (!isSorted) output++;\\n    }\\n    \\n    return output;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar minDeletionSize = function(strs) {\\n    let output = 0;\\n    for (let i = 0 ; i < strs[0].length; i++) {\\n        let isSorted = true;\\n        for (let j = 0 ; j < strs.length - 1; j++) {\\n            if (strs[j + 1][i] < strs[j][i]) {\\n                isSorted = false;\\n                break;\\n            }\\n        }\\n        if (!isSorted) output++;\\n    }\\n    \\n    return output;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2446370,
                "title": "java-o-n-m-6-ms",
                "content": "**Approach** : For every column, we keep track of the largest character visited, if we encounter a smaller character, that column has to be deleted\\n\\nConsider the following `strs`\\n```\\n[\"qowfc\",\"spyge\",\"sqbif\",\"vvrkk\"]\\u2935\\n\\n    |q o w f c|\\n\\t|s p y g e|     \\n\\t|s q b i f|\\n\\t|v v r k k|\\n```\\nFor the `1st` column we have `q <= s <= s <= v`, this column will not be deleted ( similary `2nd ,4th` column)\\nFor the `3rd` column we have `w <= y > b <= r`\\n\\n\\n**Time Complexity** : O(N*M)\\n**Space Complexity** : O(1)\\n\\nImplementation\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        \\n        int n = strs.length, m = strs[0].length(),ans = 0;\\n        \\n        for(int j = 0;j<m;j++){\\n            \\n            int prev = 0; // largest previous character so far (we initialize this with \\'a\\')\\n            \\n            boolean toBeDeleted = false; \\n            \\n            for(int i = 0;i<n;i++){\\n                \\n                int cur = strs[i].charAt(j) - \\'a\\';\\n                \\n                if(cur >= prev){   // update prev if we get a larger character\\n                    \\n                    prev = cur;\\n                    \\n                }else{  // otherwise this column will be deleted\\n                    \\n                    toBeDeleted = true;\\n                    \\n                    break;\\n                    \\n                }\\n                \\n                \\n            }\\n            \\n            if(toBeDeleted) ans++; // increment count of deleted columns\\n            \\n        }\\n        \\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n[\"qowfc\",\"spyge\",\"sqbif\",\"vvrkk\"]\\u2935\\n\\n    |q o w f c|\\n\\t|s p y g e|     \\n\\t|s q b i f|\\n\\t|v v r k k|\\n```\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        \\n        int n = strs.length, m = strs[0].length(),ans = 0;\\n        \\n        for(int j = 0;j<m;j++){\\n            \\n            int prev = 0; // largest previous character so far (we initialize this with \\'a\\')\\n            \\n            boolean toBeDeleted = false; \\n            \\n            for(int i = 0;i<n;i++){\\n                \\n                int cur = strs[i].charAt(j) - \\'a\\';\\n                \\n                if(cur >= prev){   // update prev if we get a larger character\\n                    \\n                    prev = cur;\\n                    \\n                }else{  // otherwise this column will be deleted\\n                    \\n                    toBeDeleted = true;\\n                    \\n                    break;\\n                    \\n                }\\n                \\n                \\n            }\\n            \\n            if(toBeDeleted) ans++; // increment count of deleted columns\\n            \\n        }\\n        \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2356993,
                "title": "c-bruteforce-with-explanation-59ms-63",
                "content": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        \\n        vector<string>sk;\\n        string c;\\n        string d;\\n        char l;\\n        int count=0;\\n        int io=0;\\n        for(int i=0;i<strs[io].length();i++){ //adding every column of string to vector;\\n            for(int j=0;j<strs.size();j++){\\n                c+=strs[j][i];\\n\\n            }\\n\\t\\t  sk.push_back(c);\\n\\t\\t\\tc=\"\";                   ///initializing back to 0;\\n\\t}\\n\\n\\n\\tfor(int i=0;i<sk.size();i++){       //now seaching among the sk[i] if found greater than initailize it and comparing with next and incrementing count if found!\\n\\t\\td=sk[i];\\n\\t\\t l=d[0];\\n\\t\\tfor(int j=1;j<d.length();j++){\\n\\t\\t\\tif(d[j]>l){\\n\\t\\t\\t\\tl=d[j];\\n\\t\\t\\t}\\n\\t\\t\\tif(d[j]<l){\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn count;\\n}\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        \\n        vector<string>sk;\\n        string c;\\n        string d;\\n        char l;\\n        int count=0;\\n        int io=0;\\n        for(int i=0;i<strs[io].length();i++){ //adding every column of string to vector;\\n            for(int j=0;j<strs.size();j++){\\n                c+=strs[j][i];\\n\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2241960,
                "title": "actually-fast-python-solution",
                "content": "```\\ndef minDeletionSize(self, strs):\\n        count = 0\\n        for column in zip(*strs):\\n            if list(column) != sorted(column):\\n                count += 1\\n        return count\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef minDeletionSize(self, strs):\\n        count = 0\\n        for column in zip(*strs):\\n            if list(column) != sorted(column):\\n                count += 1\\n        return count\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1546060,
                "title": "easy-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int ans=0;\\n        vector<int> visited(strs[0].length(),0);\\n        for(int i=0;i<strs.size()-1;i++){\\n            for(int j=0;j<strs[0].length();j++){\\n                if(strs[i][j]>strs[i+1][j] && visited[j]==0){\\n                    \\n                    ans++;\\n                    visited[j]=1;\\n                \\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int ans=0;\\n        vector<int> visited(strs[0].length(),0);\\n        for(int i=0;i<strs.size()-1;i++){\\n            for(int j=0;j<strs[0].length();j++){\\n                if(strs[i][j]>strs[i+1][j] && visited[j]==0){\\n                    \\n                    ans++;\\n                    visited[j]=1;\\n                \\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1407387,
                "title": "simple-rust-solution",
                "content": "```\\n pub fn min_deletion_size(strs: Vec<String>) -> i32 {\\n        let mut ret = 0;\\n\\n        let mut new_strs: Vec<Vec<char>> = Vec::new();\\n\\n        for i in 0..strs.len() {\\n            new_strs.push(strs[i].chars().collect::<Vec<char>>());\\n        }\\n\\n        for i in 0..new_strs[0].len() {\\n           for j in 1..new_strs.len() {\\n               if new_strs[j-1][i] > new_strs[j][i] {\\n                   ret +=1;\\n                   break\\n               }\\n           }\\n        }\\n\\n        return ret;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n pub fn min_deletion_size(strs: Vec<String>) -> i32 {\\n        let mut ret = 0;\\n\\n        let mut new_strs: Vec<Vec<char>> = Vec::new();\\n\\n        for i in 0..strs.len() {\\n            new_strs.push(strs[i].chars().collect::<Vec<char>>());\\n        }\\n\\n        for i in 0..new_strs[0].len() {\\n           for j in 1..new_strs.len() {\\n               if new_strs[j-1][i] > new_strs[j][i] {\\n                   ret +=1;\\n                   break\\n               }\\n           }\\n        }\\n\\n        return ret;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1350250,
                "title": "simple-c-solution",
                "content": "```\\n   int minDeletionSize(vector<string>& A) {\\n        int n=A.size();\\n        int m=A[0].size();\\n        int ans=0;\\n        \\n        int a=0;\\n        \\n        while(a<m){\\n        for(int i=0;i<A.size()-1;i++){\\n         \\n          if(A[i][a]>A[i+1][a]){\\n              ans++;\\n              break;\\n          }  \\n            \\n        }\\n            a++;\\n       }\\n        return ans;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n   int minDeletionSize(vector<string>& A) {\\n        int n=A.size();\\n        int m=A[0].size();\\n        int ans=0;\\n        \\n        int a=0;\\n        \\n        while(a<m){\\n        for(int i=0;i<A.size()-1;i++){\\n         \\n          if(A[i][a]>A[i+1][a]){\\n              ans++;\\n              break;\\n          }  \\n            \\n        }\\n            a++;\\n       }\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1118008,
                "title": "fastest-100-java-easy-with-comments",
                "content": "```\\n    public int minDeletionSize(String[] strs) {\\n        int c = 0; // counter\\n        \\n    outer: for(int col = 0; col <  strs[0].length();col++){  //key concept is to iterate column wise and not row wise\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t//so that it is ensures that we visit every column once!\\n        \\n       for(int row = 0; row < strs.length - 1; row++){\\n\\t   \\n                if(strs[row + 1].charAt(col) - strs[row].charAt(col) >= 0){ //check order\\n                    continue;\\n                }\\n                else {\\n                    c++;\\n                    continue outer; // jump to next columns\\n                }\\n                \\n            } \\n        }\\n        return c;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int minDeletionSize(String[] strs) {\\n        int c = 0; // counter\\n        \\n    outer: for(int col = 0; col <  strs[0].length();col++){  //key concept is to iterate column wise and not row wise\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t//so that it is ensures that we visit every column once!\\n        \\n       for(int row = 0; row < strs.length - 1; row++){\\n\\t   \\n                if(strs[row + 1].charAt(col) - strs[row].charAt(col) >= 0){ //check order\\n                    continue;\\n                }\\n                else {\\n                    c++;\\n                    continue outer; // jump to next columns\\n                }\\n                \\n            } \\n        }\\n        return c;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 953723,
                "title": "python-most-simple-o-nm-time-o-1-space",
                "content": "```\\nclass Solution:\\n    def minDeletionSize(self, A: List[str]) -> int:\\n        \\n        res = 0\\n        for pos in range(len(A[0])):\\n            for word in range(len(A)-1):\\n                if A[word][pos] > A[word+1][pos]:\\n                    res += 1\\n                    break\\n        return res\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minDeletionSize(self, A: List[str]) -> int:\\n        \\n        res = 0\\n        for pos in range(len(A[0])):\\n            for word in range(len(A)-1):\\n                if A[word][pos] > A[word+1][pos]:\\n                    res += 1\\n                    break\\n        return res\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 803740,
                "title": "c-concise",
                "content": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& A) {\\n        int d=0;\\n        for(int i=0;i<A[0].size();i++)\\n            for(int j=0;j+1<A.size();j++)\\n                if(A[j][i]>A[j+1][i]){\\n                    d++;\\n                    break;\\n                }\\n        return d;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& A) {\\n        int d=0;\\n        for(int i=0;i<A[0].size();i++)\\n            for(int j=0;j+1<A.size();j++)\\n                if(A[j][i]>A[j+1][i]){\\n                    d++;\\n                    break;\\n                }\\n        return d;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 522732,
                "title": "simple-java-solution",
                "content": "```java\\nclass Solution {\\n    public int minDeletionSize(String[] a) {\\n        int deleteCount = 0;\\n        int strCount = a[0].length();\\n\\n        for (int i = 0; i < strCount; i++) {\\n            for (int j = 1; j < a.length; j++) {\\n                if (a[j].charAt(i) < a[j - 1].charAt(i)) {\\n                    deleteCount++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return deleteCount;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\nclass Solution {\\n    public int minDeletionSize(String[] a) {\\n        int deleteCount = 0;\\n        int strCount = a[0].length();\\n\\n        for (int i = 0; i < strCount; i++) {\\n            for (int j = 1; j < a.length; j++) {\\n                if (a[j].charAt(i) < a[j - 1].charAt(i)) {\\n                    deleteCount++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return deleteCount;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 382127,
                "title": "solution-in-python-3-beats-100-one-line",
                "content": "```\\nclass Solution:\\n    def minDeletionSize(self, A: List[str]) -> int:\\n    \\treturn sum(list(i) != sorted(i) for i in zip(*A))\\n\\t\\t\\n\\t\\t\\n- Junaid Mansuri\\n(LeetCode ID)@hotmail.com",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minDeletionSize(self, A: List[str]) -> int:\\n    \\treturn sum(list(i) != sorted(i) for i in zip(*A))\\n\\t\\t\\n\\t\\t\\n- Junaid Mansuri\\n(LeetCode ID)@hotmail.com",
                "codeTag": "Java"
            },
            {
                "id": 280029,
                "title": "c-60-ms-faster-than-82-67-and-12-9-mb-less-than-98-91-of-c-online-submissions",
                "content": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& A) {\\n        if (A.size() <= 1)  return 0;\\n        int minDeletionSize = 0;\\n\\n        for (int i=0; i<A[0].size(); i++) {\\n            for (int j=1; j<A.size(); j++) {\\n                if (A[j-1][i] - A[j][i] > 0)  {\\n                    ++minDeletionSize;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return minDeletionSize;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& A) {\\n        if (A.size() <= 1)  return 0;\\n        int minDeletionSize = 0;\\n\\n        for (int i=0; i<A[0].size(); i++) {\\n            for (int j=1; j<A.size(); j++) {\\n                if (A[j-1][i] - A[j][i] > 0)  {\\n                    ++minDeletionSize;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return minDeletionSize;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 252883,
                "title": "javascript-solution-with-comments",
                "content": "```\\n/**\\n * @param {string[]} A\\n * @return {number}\\n */\\nvar minDeletionSize = function(A) {\\n    //Problem definition is worded to make it confusing.\\n    //TL;DR:\\n    //A is a 2D array of ints\\n    //Count the number of columns where the ints are not in ascending order.\\n    \\n    //Solution:\\n    //We\\'ll search the 2D array column by column. If we find one int out of order - we\\'ll add 1 to our count, and move on.\\n    //O(n) time complexity. O(1) space complexity.\\n    //\\n    //No faster way, since finding one column is out of order doesn\\'t tell us anything about any other columns.\\n    //As a plus though, this problem could be paralellized using SIMD instructions or threads.\\n    //But this is Javascript, so who cares about speed.\\n    \\n    //Useful Problem Constraints:\\n    //All strings are the same length.\\n    //All characters are ASCII.\\n    //There\\'s only <= 100 strings, each with <= 1000 characters.\\n    var columnsToDelete = 0;\\n    if (A.length == 0)\\n        return 0;\\n    \\n    var stringLength = A[0].length; //We know all strings are of the same length, so we can do this.\\n    for(var i = 0; i < stringLength; i++) //For each column/character in our string\\n    {\\n        for (var j = 0; j < A.length - 1; j++) //For each row/string... (-1 so we can compare this row with the next one)\\n        {\\n            var numValue = A[j][i];\\n            var nextNumValue = A[j+1][i];\\n            \\n            if (numValue > nextNumValue) //If we aren\\'t in ascending order\\n            {\\n                columnsToDelete++;\\n                break;\\n            }\\n\\n        }\\n    }\\n    \\n    return columnsToDelete;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {string[]} A\\n * @return {number}\\n */\\nvar minDeletionSize = function(A) {\\n    //Problem definition is worded to make it confusing.\\n    //TL;DR:\\n    //A is a 2D array of ints\\n    //Count the number of columns where the ints are not in ascending order.\\n    \\n    //Solution:\\n    //We\\'ll search the 2D array column by column. If we find one int out of order - we\\'ll add 1 to our count, and move on.\\n    //O(n) time complexity. O(1) space complexity.\\n    //\\n    //No faster way, since finding one column is out of order doesn\\'t tell us anything about any other columns.\\n    //As a plus though, this problem could be paralellized using SIMD instructions or threads.\\n    //But this is Javascript, so who cares about speed.\\n    \\n    //Useful Problem Constraints:\\n    //All strings are the same length.\\n    //All characters are ASCII.\\n    //There\\'s only <= 100 strings, each with <= 1000 characters.\\n    var columnsToDelete = 0;\\n    if (A.length == 0)\\n        return 0;\\n    \\n    var stringLength = A[0].length; //We know all strings are of the same length, so we can do this.\\n    for(var i = 0; i < stringLength; i++) //For each column/character in our string\\n    {\\n        for (var j = 0; j < A.length - 1; j++) //For each row/string... (-1 so we can compare this row with the next one)\\n        {\\n            var numValue = A[j][i];\\n            var nextNumValue = A[j+1][i];\\n            \\n            if (numValue > nextNumValue) //If we aren\\'t in ascending order\\n            {\\n                columnsToDelete++;\\n                break;\\n            }\\n\\n        }\\n    }\\n    \\n    return columnsToDelete;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 252488,
                "title": "swift-fast-approach-216ms",
                "content": "216ms by using utf16 view of string.\\n\\n```\\nclass Solution {\\n    func minDeletionSize(_ A: [String]) -> Int {\\n        var d = 0\\n        for column in 0..<A[0].count {\\n            let columnIndex = A[0].utf16.index(A[0].utf16.startIndex, offsetBy: column)\\n            for row in 1..<A.count {\\n                if A[row][columnIndex] < A[row - 1][columnIndex] {\\n                    d += 1\\n                    break\\n                }\\n            }\\n        }\\n        return d\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func minDeletionSize(_ A: [String]) -> Int {\\n        var d = 0\\n        for column in 0..<A[0].count {\\n            let columnIndex = A[0].utf16.index(A[0].utf16.startIndex, offsetBy: column)\\n            for row in 1..<A.count {\\n                if A[row][columnIndex] < A[row - 1][columnIndex] {\\n                    d += 1\\n                    break\\n                }\\n            }\\n        }\\n        return d\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 236378,
                "title": "javascript",
                "content": "```\\nvar minDeletionSize = function(A) {\\n    let result = 0\\n    const len = A[0].length\\n    for(let i = 0; i < len; i++) {\\n        for(let j = 1; j < A.length; j++){\\n            if(A[j][i] < A[j - 1][i]){\\n                result += 1\\n                break\\n            }\\n        }\\n    }\\n    return result\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar minDeletionSize = function(A) {\\n    let result = 0\\n    const len = A[0].length\\n    for(let i = 0; i < len; i++) {\\n        for(let j = 1; j < A.length; j++){\\n            if(A[j][i] < A[j - 1][i]){\\n                result += 1\\n                break\\n            }\\n        }\\n    }\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 198881,
                "title": "fast-and-easy-to-understand-python-solution",
                "content": "With Zip\\n\\n```\\nclass Solution:\\n    def minDeletionSize(self, A):\\n        \"\"\"\\n        :type A: List[str]\\n        :rtype: int\\n        \"\"\"\\n\\t\\t\\n        count = 0\\n        \\n        for items in zip(*A):  # The * operator can be used in conjuncton with zip() to unzip the list.\\n            if sorted(items) != list(items):\\n                count += 1\\n                \\n        return count\\n```\\n\\nWith No Zip\\n\\n```\\nclass Solution:\\n    def minDeletionSize(self, A):\\n        \"\"\"\\n        :type A: List[str]\\n        :rtype: int\\n        \"\"\"\\n\\t\\tnew_A = []\\n\\t\\tcount = 0\\n\\n\\t\\tfor items in range(len(A[0])):\\n\\t\\t\\tcharacters = \\'\\'\\n\\n\\t\\t\\tfor item in range(len(A)):\\n\\t\\t\\t\\tcharacters += A[item][items]\\n\\n\\t\\t\\tnew_A.append(characters)\\n\\n\\t\\tfor items in new_A:\\n\\t\\t\\tif sorted(items) != list(items):\\n\\t\\t\\t\\tcount += 1\\n\\n\\t\\treturn count\\n```\\n\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def minDeletionSize(self, A):\\n        \"\"\"\\n        :type A: List[str]\\n        :rtype: int\\n        \"\"\"\\n\\t\\t\\n        count = 0\\n        \\n        for items in zip(*A):  # The * operator can be used in conjuncton with zip() to unzip the list.\\n            if sorted(items) != list(items):\\n                count += 1\\n                \\n        return count\\n```\n```\\nclass Solution:\\n    def minDeletionSize(self, A):\\n        \"\"\"\\n        :type A: List[str]\\n        :rtype: int\\n        \"\"\"\\n\\t\\tnew_A = []\\n\\t\\tcount = 0\\n\\n\\t\\tfor items in range(len(A[0])):\\n\\t\\t\\tcharacters = \\'\\'\\n\\n\\t\\t\\tfor item in range(len(A)):\\n\\t\\t\\t\\tcharacters += A[item][items]\\n\\n\\t\\t\\tnew_A.append(characters)\\n\\n\\t\\tfor items in new_A:\\n\\t\\t\\tif sorted(items) != list(items):\\n\\t\\t\\t\\tcount += 1\\n\\n\\t\\treturn count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 195562,
                "title": "java-o-a-length-a-0-length-easy-to-explain-and-impl-in-5mins-cheers",
                "content": "```\\nclass Solution {\\n    public int minDeletionSize(String[] A) {\\n        int res = 0;\\n        int len = A[0].length();\\n        int n = A.length;\\n\\n        for (int j = 0; j < len; ++j) {\\n            for (int i = 1; i < n; ++i) {\\n                if (A[i].charAt(j) < A[i - 1].charAt(j)) {\\n                    ++res;\\n                    break;\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] A) {\\n        int res = 0;\\n        int len = A[0].length();\\n        int n = A.length;\\n\\n        for (int j = 0; j < len; ++j) {\\n            for (int i = 1; i < n; ++i) {\\n                if (A[i].charAt(j) < A[i - 1].charAt(j)) {\\n                    ++res;\\n                    break;\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3785999,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] ary) {\\n        int count=0;   \\n         // imagine each word are raw \\n        int raw= ary.length;\\n        // imagine each word are colum\\n        int colum=ary[0].length();\\n        for(int j=0;j<colum;j++)\\n        {\\n            for(int i=0;i<raw-1;i++)\\n            {\\n               // check in colum wize\\n  if(ary[i].charAt(j)>ary[i+1].charAt(j))\\n                {\\n                     count++;\\n                    break;\\n                }\\n              \\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] ary) {\\n        int count=0;   \\n         // imagine each word are raw \\n        int raw= ary.length;\\n        // imagine each word are colum\\n        int colum=ary[0].length();\\n        for(int j=0;j<colum;j++)\\n        {\\n            for(int i=0;i<raw-1;i++)\\n            {\\n               // check in colum wize\\n  if(ary[i].charAt(j)>ary[i+1].charAt(j))\\n                {\\n                     count++;\\n                    break;\\n                }\\n              \\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3610797,
                "title": "beats-90-cpp-sol",
                "content": "# Pls Upvote if Helpful **Bold**\\uD83D\\uDE07\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\n    bool check(string temp){\\n        for(int i = 0; i<temp.size()-1; i++){\\n            if(temp[i]>temp[i+1]){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n\\n    int minDeletionSize(vector<string>& strs) {\\n        int size = strs[0].size();\\n        int ans = 0;\\n        for(int i = 0; i<size; i++){\\n            string temp;\\n            for(int j = 0; j<strs.size(); j++){\\n                string s = strs[j];\\n                temp.push_back(s[i]);\\n            }\\n\\n            // if string is lexographically not sorted inc count\\n            if(check(temp)==false){\\n                ans += 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n    bool check(string temp){\\n        for(int i = 0; i<temp.size()-1; i++){\\n            if(temp[i]>temp[i+1]){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n\\n    int minDeletionSize(vector<string>& strs) {\\n        int size = strs[0].size();\\n        int ans = 0;\\n        for(int i = 0; i<size; i++){\\n            string temp;\\n            for(int j = 0; j<strs.size(); j++){\\n                string s = strs[j];\\n                temp.push_back(s[i]);\\n            }\\n\\n            // if string is lexographically not sorted inc count\\n            if(check(temp)==false){\\n                ans += 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3525295,
                "title": "solution",
                "content": "```C++ []\\nclass Solution {\\npublic:\\n    Solution()\\n    {\\n        std::ios_base::sync_with_stdio(false);\\n        std::cin.tie(NULL);\\n        std::cout.tie(NULL);\\n    }\\n    int minDeletionSize(vector<string>& strs)\\n    {\\n        if (strs.size() == 1)\\n        {\\n            return 0;\\n        }\\n        std::vector<bool> toDelete(strs[0].size(), false);\\n        for (int r = 1; r < strs.size(); ++r)\\n        {\\n            auto const& curr = strs[r];\\n            auto const& last = strs[r-1];\\n            for (int c = 0; c < strs[0].size(); ++c)\\n            {\\n                if (toDelete[c])\\n                {\\n                    continue;\\n                }\\n                if (curr[c] < last[c])\\n                {\\n                    toDelete[c] = true;\\n                }\\n            }\\n        }\\n        return std::accumulate(toDelete.begin(), toDelete.end(), 0);\\n    }\\n};\\n```\\n\\n```Python3 []\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        char_matrix = []\\n        count = 0\\n        for column in zip(*strs):\\n            char_matrix.append(list(column))\\n        for col in char_matrix:\\n            if col != sorted(col):\\n                count += 1\\n        return count\\n```\\n\\n```Java []\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int columnsCount = 0;\\n        if(strs==null || strs.length==0){\\n            return columnsCount;\\n        }\\n        int strLen = strs[0].length();\\n        for(int coulmnNum=0; coulmnNum<strLen; coulmnNum++){\\n            if(!isCoulmnOrder(strs, coulmnNum)){\\n                columnsCount++;\\n            }\\n        }\\n        return columnsCount;\\n    }\\n    private boolean isCoulmnOrder(String[] strs, int coulmnNum){\\n        char currChar = \\'a\\';\\n        int linesCount = strs.length;\\n        for(int lineNum = 0; lineNum<linesCount; lineNum++ ){\\n            char nextChar = strs[lineNum].charAt(coulmnNum);\\n            if(currChar>nextChar){\\n                return false;\\n            }\\n            currChar = nextChar;\\n        }\\n        return true;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    Solution()\\n    {\\n        std::ios_base::sync_with_stdio(false);\\n        std::cin.tie(NULL);\\n        std::cout.tie(NULL);\\n    }\\n    int minDeletionSize(vector<string>& strs)\\n    {\\n        if (strs.size() == 1)\\n        {\\n            return 0;\\n        }\\n        std::vector<bool> toDelete(strs[0].size(), false);\\n        for (int r = 1; r < strs.size(); ++r)\\n        {\\n            auto const& curr = strs[r];\\n            auto const& last = strs[r-1];\\n            for (int c = 0; c < strs[0].size(); ++c)\\n            {\\n                if (toDelete[c])\\n                {\\n                    continue;\\n                }\\n                if (curr[c] < last[c])\\n                {\\n                    toDelete[c] = true;\\n                }\\n            }\\n        }\\n        return std::accumulate(toDelete.begin(), toDelete.end(), 0);\\n    }\\n};\\n```\n```Python3 []\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        char_matrix = []\\n        count = 0\\n        for column in zip(*strs):\\n            char_matrix.append(list(column))\\n        for col in char_matrix:\\n            if col != sorted(col):\\n                count += 1\\n        return count\\n```\n```Java []\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int columnsCount = 0;\\n        if(strs==null || strs.length==0){\\n            return columnsCount;\\n        }\\n        int strLen = strs[0].length();\\n        for(int coulmnNum=0; coulmnNum<strLen; coulmnNum++){\\n            if(!isCoulmnOrder(strs, coulmnNum)){\\n                columnsCount++;\\n            }\\n        }\\n        return columnsCount;\\n    }\\n    private boolean isCoulmnOrder(String[] strs, int coulmnNum){\\n        char currChar = \\'a\\';\\n        int linesCount = strs.length;\\n        for(int lineNum = 0; lineNum<linesCount; lineNum++ ){\\n            char nextChar = strs[lineNum].charAt(coulmnNum);\\n            if(currChar>nextChar){\\n                return false;\\n            }\\n            currChar = nextChar;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3477689,
                "title": "quick-and-easy-java-solution-be-consistent",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count=0;\\n        for(int i=0;i<strs[0].length();i++)\\n        {\\n           for(int j=1;j<strs.length;j++)\\n           {\\n               if((int)strs[j].charAt(i)<(int)strs[j-1].charAt(i))\\n               {\\n                   count++;\\n                   break;\\n               }\\n           }\\n        }\\n        return count;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count=0;\\n        for(int i=0;i<strs[0].length();i++)\\n        {\\n           for(int j=1;j<strs.length;j++)\\n           {\\n               if((int)strs[j].charAt(i)<(int)strs[j-1].charAt(i))\\n               {\\n                   count++;\\n                   break;\\n               }\\n           }\\n        }\\n        return count;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3282917,
                "title": "delete-columns-to-make-sorted-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n^2)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int i, j, count=0;\\n        for(i=0 ; i<strs[0].size() ; i++)\\n        {\\n            for(j=0 ; j<strs.size()-1 ; j++)\\n            {\\n                if(strs[j][i]>strs[j+1][i])\\n                {\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int i, j, count=0;\\n        for(i=0 ; i<strs[0].size() ; i++)\\n        {\\n            for(j=0 ; j<strs.size()-1 ; j++)\\n            {\\n                if(strs[j][i]>strs[j+1][i])\\n                {\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3237885,
                "title": "one-liner-beat-99-75ms",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(nm * m log m)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(nm)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        \\n        return sum(1 for i in zip(*strs) if list(i) != sorted(i))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        \\n        return sum(1 for i in zip(*strs) if list(i) != sorted(i))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3071146,
                "title": "easiest-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int count=0;\\n        int n=strs.size();\\n        int l=strs[0].length();\\n        for(int i=0;i<l;i++)\\n        {\\n            for(int j=1;j<n;j++)\\n            {\\n                if(strs[j][i]<strs[j-1][i])\\n                {\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int count=0;\\n        int n=strs.size();\\n        int l=strs[0].length();\\n        for(int i=0;i<l;i++)\\n        {\\n            for(int j=1;j<n;j++)\\n            {\\n                if(strs[j][i]<strs[j-1][i])\\n                {\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3012526,
                "title": "columnwise-matrix-traversal",
                "content": "# Intuition\\nWe need to do columnwise matrix traversal .\\n\\n# Approach\\n1. We must check whether the no.of rows == 1 beforehand to avoid unnecessary computation of strings because if there is only one row in the matrix it cannot be compared with another string of the same column and therefore the matrix will always remain sorted columnwise.  For Example strs = [\"abc\"] or [\"a\"] .\\n2.  We must use outer loop for traversing in columnwise manner among the strings .\\n3.   We must use the inner loop for traversing rows in the matrix or strings in the array according to a particular column or index respectively and check whether they are in lexicographical order or not . See the implementation attached below .\\n\\n# Complexity\\n- Time complexity:\\nO(N * K)\\nwhere \\nN = length of the array of strings \"strs\" ,\\nK = length of each string . \\n\\n- Space complexity:\\nO(1)\\nAs only an extra variable unsorted_columns is required .\\n# Code\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        if(strs.length == 1)\\n            return 0;\\n        int unsorted_columns = 0;\\n        for(int i = 0 ; i < strs[0].length() ; ++i)\\n        {\\n            for(int j = 0 ; j < (strs.length - 1) ; ++j)\\n            {\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i))\\n                {\\n                    ++unsorted_columns;\\n                    break;\\n                }\\n            }\\n        }\\n        return unsorted_columns;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        if(strs.length == 1)\\n            return 0;\\n        int unsorted_columns = 0;\\n        for(int i = 0 ; i < strs[0].length() ; ++i)\\n        {\\n            for(int j = 0 ; j < (strs.length - 1) ; ++j)\\n            {\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i))\\n                {\\n                    ++unsorted_columns;\\n                    break;\\n                }\\n            }\\n        }\\n        return unsorted_columns;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3002005,
                "title": "easy-java-solution-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nJust Check vertically for each column that its sorted lexicographically if not increase your count and jump to next column and check.\\n\\n# Complexity\\n- Time complexity: O(NM)\\nN = length of array of Strings\\nM = String length\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0;\\n        int n = strs.length;\\n        for(int i = 0 ; i < strs[0].length(); i ++){\\n            int nums = (int)strs[0].charAt(i);\\n            for(int j = 1; j < n; j ++){\\n                if((int)strs[j].charAt(i) >= nums){\\n                    nums = (int)strs[j].charAt(i);\\n                }else{\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0;\\n        int n = strs.length;\\n        for(int i = 0 ; i < strs[0].length(); i ++){\\n            int nums = (int)strs[0].charAt(i);\\n            for(int j = 1; j < n; j ++){\\n                if((int)strs[j].charAt(i) >= nums){\\n                    nums = (int)strs[j].charAt(i);\\n                }else{\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3000606,
                "title": "explained-well-with-pictures-c",
                "content": "\\n# Approach (Please like :D)\\n<!-- Describe your approach to solving the problem. -->\\nThe function starts by declaring three local integer variables: \"firstWordLength,\" \"lengthOfArray,\" and \"columnsDeleted.\" The value of \"firstWordLength\" is set to the length of the first string in the input array, \"strs.\" The value of \"lengthOfArray\" is set to the length of the array \"strs\" minus 1. The value of \"columnsDeleted\" is set to 0.\\n\\nThe function then enters a loop that iterates over the characters in the first string of the input array (which is stored at index 0). For each iteration of the loop, another loop is entered that iterates over the strings in the input array, starting at index 0 and ending at the second-to-last index.\\n\\nInside the inner loop, the function compares the character at the current index (which is stored in the variable \"i\") of the current string (which is stored in the variable \"j\") to the character at the same index of the next string (which is stored at index \"j+1\"). If the character in the current string is greater (i.e., has a higher ASCII value), the function increments the value of \"columnsDeleted\" by 1 and exits the inner loop using the \"break\" statement.\\n\\nAfter both loops have completed, the function returns the value of \"columnsDeleted.\\n\\n![image.png](https://assets.leetcode.com/users/images/6e5819bd-8665-4dcd-bf1e-72857588e0ef_1672886178.666302.png)\\n\\n# Complexity\\n- Time complexity: 130 - 200 ms ish \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int MinDeletionSize(string[] strs) {\\n\\n\\n        int firstWordLength = strs[0].Length;\\n        int lengthOfArray = strs.Length-1;\\n        int columnsDeleted = 0;\\n\\n        for(int i = 0; i < firstWordLength; i++)\\n        {\\n            for(int j = 0; j < lengthOfArray; j++)\\n            {\\n                if(strs[j][i] > strs[j+1][i])\\n                {\\n                    columnsDeleted++;\\n                    \\n                    break;\\n                }\\n            }\\n        }\\n        return columnsDeleted;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinDeletionSize(string[] strs) {\\n\\n\\n        int firstWordLength = strs[0].Length;\\n        int lengthOfArray = strs.Length-1;\\n        int columnsDeleted = 0;\\n\\n        for(int i = 0; i < firstWordLength; i++)\\n        {\\n            for(int j = 0; j < lengthOfArray; j++)\\n            {\\n                if(strs[j][i] > strs[j+1][i])\\n                {\\n                    columnsDeleted++;\\n                    \\n                    break;\\n                }\\n            }\\n        }\\n        return columnsDeleted;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2997960,
                "title": "javascript-o-n-k-time-o-n-space",
                "content": "# Intuition\\nTo determine if the letters are in order, it\\'s enough to compare their ASCII values. We know that if previous letter is less than current letter, letters are in order. This is simplified even more since we know all items will be from lowercase english alphabet.\\n\\nIn javascript, it\\'s not necessary to extract that value using any methods, we can directly compare the strings. \\n\\n# Approach\\n1) Declare a counter variable, `res` (or any other name you prefer)\\n2) Iterate over columns\\n    - Iterate over rows\\n    - Check if the previous character in a column is less than the current one. If it is not, increment the counter. Break to avoid duplication of result.\\n3) Retun the answer\\n\\n\\n# Complexity\\n- Time complexity: O(N * K); N is the size of the array, K is the size of the string\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string[]} strs\\n * @return {number}\\n */\\nvar minDeletionSize = function(strs) {\\n    let res = 0\\n\\n    for (let col = 0; col < strs[0].length; col++) {\\n        for (let row = 1; row < strs.length; row++) {\\n            if (strs[row][col] < strs[row - 1][col]) {\\n                res++\\n                break\\n            }\\n        }\\n    }\\n\\n    return res\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} strs\\n * @return {number}\\n */\\nvar minDeletionSize = function(strs) {\\n    let res = 0\\n\\n    for (let col = 0; col < strs[0].length; col++) {\\n        for (let row = 1; row < strs.length; row++) {\\n            if (strs[row][col] < strs[row - 1][col]) {\\n                res++\\n                break\\n            }\\n        }\\n    }\\n\\n    return res\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2997278,
                "title": "swift-solution",
                "content": "# Complexity\\n- Time complexity: $$O(nk)$$, n \\u2013 word lenght, k \\u2013 number of words\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func minDeletionSize(_ strs: [String]) -> Int {\\n        let strs = strs.map { Array($0) }\\n        var counter = 0\\n\\n        for column in 0..<strs[0].count {\\n            for row in 0..<strs.count - 1 {\\n                if strs[row][column] > strs[row + 1][column] {\\n                    counter += 1\\n                    break\\n                }\\n            }\\n        }\\n\\n        return counter\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func minDeletionSize(_ strs: [String]) -> Int {\\n        let strs = strs.map { Array($0) }\\n        var counter = 0\\n\\n        for column in 0..<strs[0].count {\\n            for row in 0..<strs.count - 1 {\\n                if strs[row][column] > strs[row + 1][column] {\\n                    counter += 1\\n                    break\\n                }\\n            }\\n        }\\n\\n        return counter\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2996514,
                "title": "easy-understanding-java-solution",
                "content": "# Complexity\\n- Time complexity: O(n*n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public int minDeletionSize(String[] strs) \\n    {\\n        int deletionCount = 0;\\n        \\n        for(int i=0; i<strs[0].length(); i++)\\n        {\\n            for(int j=0; j<strs.length-1; j++)\\n            {\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i))\\n                {\\n                    deletionCount++; break;\\n                }\\n            }\\n        }\\n        return deletionCount;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int minDeletionSize(String[] strs) \\n    {\\n        int deletionCount = 0;\\n        \\n        for(int i=0; i<strs[0].length(); i++)\\n        {\\n            for(int j=0; j<strs.length-1; j++)\\n            {\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i))\\n                {\\n                    deletionCount++; break;\\n                }\\n            }\\n        }\\n        return deletionCount;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2995935,
                "title": "c-easiest-solution-deep-and-concise-detailed-solution-t-c-o-row-col",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\n\\n**T.C => O(row*col)**\\n\\n*col -> word.size()\\nrow -> arr.length()-1*\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) \\n    {\\n           int ans=0;\\n           int word_size = strs[0].size();\\n           \\n           // Traverse in col. No. of col is length of words in arr. (# size of each words is same).\\n           // Traverse in row. No. of rows is No. of words in arr. \\n\\n           for(int col=0; col<word_size; col++)\\n           {\\n                  for(int row=0; row<strs.size()-1; row++) // strs.size()-1 -> becoz we take next pointer\\n                  {\\n                      if(strs[row][col] > strs[row+1][col])\\n                      {\\n                          ans++; // increment no of rows\\n                          break;  // we found fault.\\n                      }\\n                  } \\n           }\\n           \\n           return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) \\n    {\\n           int ans=0;\\n           int word_size = strs[0].size();\\n           \\n           // Traverse in col. No. of col is length of words in arr. (# size of each words is same).\\n           // Traverse in row. No. of rows is No. of words in arr. \\n\\n           for(int col=0; col<word_size; col++)\\n           {\\n                  for(int row=0; row<strs.size()-1; row++) // strs.size()-1 -> becoz we take next pointer\\n                  {\\n                      if(strs[row][col] > strs[row+1][col])\\n                      {\\n                          ans++; // increment no of rows\\n                          break;  // we found fault.\\n                      }\\n                  } \\n           }\\n           \\n           return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2994473,
                "title": "python-easy-and-simple-solution",
                "content": "```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        m,n=len(strs),len(strs[0])\\n        c=0\\n        for i in range(n):\\n            for j in range(m-1):\\n                if ord(strs[j][i])>ord(strs[j+1][i]):\\n                    c+=1\\n                    break\\n        return c\\n```\\n\\n**An upvote will be encouraging**",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        m,n=len(strs),len(strs[0])\\n        c=0\\n        for i in range(n):\\n            for j in range(m-1):\\n                if ord(strs[j][i])>ord(strs[j+1][i]):\\n                    c+=1\\n                    break\\n        return c\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2994326,
                "title": "java-solution-easy",
                "content": "# Code\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        \\n        int c = 0;\\n\\n        for (int i = 0; i < strs[0].length(); i++){\\n            char temp = strs[0].charAt(i);\\n            for (String str : strs) {\\n                if (temp <= str.charAt(i)) {\\n                    temp = str.charAt(i);\\n                }else {\\n                    c++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        \\n        int c = 0;\\n\\n        for (int i = 0; i < strs[0].length(); i++){\\n            char temp = strs[0].charAt(i);\\n            for (String str : strs) {\\n                if (temp <= str.charAt(i)) {\\n                    temp = str.charAt(i);\\n                }else {\\n                    c++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2994295,
                "title": "c-traversing-row-and-column-solution",
                "content": "\\n# Code\\n```\\n    int minDeletionSize(vector<string>& strs) \\n    {\\n        int cnt=0;\\n        int m=strs.size();\\n        int n=strs[0].size();\\n        for(int i=0;i<n;i++)\\n        {\\n            for(int j=0;j<m-1;j++)\\n            {\\n                if(strs[j][i]>strs[j+1][i])\\n                {\\n                    cnt++;\\n                    break;\\n                }\\n            }\\n        }\\n        return cnt;\\n    }\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n    int minDeletionSize(vector<string>& strs) \\n    {\\n        int cnt=0;\\n        int m=strs.size();\\n        int n=strs[0].size();\\n        for(int i=0;i<n;i++)\\n        {\\n            for(int j=0;j<m-1;j++)\\n            {\\n                if(strs[j][i]>strs[j+1][i])\\n                {\\n                    cnt++;\\n                    break;\\n                }\\n            }\\n        }\\n        return cnt;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2994282,
                "title": "944-delete-columns-to-make-sorted",
                "content": "Approach use two loops one for choosing a particular  word for each string\\nOther for for comparing like [\"cba\",\"daf\",\"ghi\"] a with b its check a next ele with previous one\\nIf you find the solution useful then an upvote would really be an O(n) decison :)\\n\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int oddOne=0;\\n        int n=strs.length; // whole arr length\\n        int m=strs[0].length(); // particular word length\\n        for(int i=0;i<m;i++) { // for coloums\\n            for(int j=1;j<n;j++) { // for rows \\n            if(strs[j].charAt(i) <strs[j-1].charAt(i)){\\n                oddOne++;\\n                break;    \\n            }      \\n        }  \\n    }\\n        return oddOne;\\n   }\\n}\\n",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "class Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int oddOne=0;\\n        int n=strs.length; // whole arr length\\n        int m=strs[0].length(); // particular word length\\n        for(int i=0;i<m;i++) { // for coloums\\n            for(int j=1;j<n;j++) { // for rows \\n            if(strs[j].charAt(i) <strs[j-1].charAt(i)){\\n                oddOne++;\\n                break;    \\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2994243,
                "title": "simple-solution-using-java-o-n-k-time-and-o-1-space",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N*K)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        short deletedColumsNumber =0;\\n\\n        for(int i=0; i<strs[0].length(); i++){\\n     \\n            char prev = strs[0].charAt(i);\\n            for(int j=1; j<strs.length;j++){\\n                if(strs[j].charAt(i)-\\'a\\' < prev -\\'a\\') {deletedColumsNumber++; break;}\\n                prev = strs[j].charAt(i);\\n            }\\n        }\\n        return deletedColumsNumber;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        short deletedColumsNumber =0;\\n\\n        for(int i=0; i<strs[0].length(); i++){\\n     \\n            char prev = strs[0].charAt(i);\\n            for(int j=1; j<strs.length;j++){\\n                if(strs[j].charAt(i)-\\'a\\' < prev -\\'a\\') {deletedColumsNumber++; break;}\\n                prev = strs[j].charAt(i);\\n            }\\n        }\\n        return deletedColumsNumber;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2993992,
                "title": "easiest-c-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        \\n        int cnt=0;\\n\\n        for(int j=0; j<strs[0].size(); j++){\\n\\n          char c=strs[0][j];\\n\\n          for(int i=1; i<strs.size();i++){\\n                 \\n                 if(strs[i][j]>=c){\\n                     c=strs[i][j];\\n                 }\\n                 else{\\n                     cnt++;\\n                     break;\\n                 }\\n\\n          }\\n\\n        }\\n\\n       return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        \\n        int cnt=0;\\n\\n        for(int j=0; j<strs[0].size(); j++){\\n\\n          char c=strs[0][j];\\n\\n          for(int i=1; i<strs.size();i++){\\n                 \\n                 if(strs[i][j]>=c){\\n                     c=strs[i][j];\\n                 }\\n                 else{\\n                     cnt++;\\n                     break;\\n                 }\\n\\n          }\\n\\n        }\\n\\n       return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2993950,
                "title": "easy-c-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int r=strs.size();\\n        int count=0;\\n        int col=strs[0].size();\\n        for(int j=0;j<col;j++)\\n        {\\n            for(int i=0;i<r-1;i++)\\n            {\\n                if(strs[i][j]>strs[i+1][j])\\n                {\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int r=strs.size();\\n        int count=0;\\n        int col=strs[0].size();\\n        for(int j=0;j<col;j++)\\n        {\\n            for(int i=0;i<r-1;i++)\\n            {\\n                if(strs[i][j]>strs[i+1][j])\\n                {\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2993880,
                "title": "easy-understandable-c-code-with-o-1-sapce",
                "content": "# Intuition\\n<!-- Instead of RowWise Traversal we have have to do ColumnWise Traversal  -->\\n\\n# Approach\\n<!-- Just compare the chars in vertical order traversal -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- O(n*m) -->\\n\\n- Space complexity:\\n<!-- O(1) -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        // a -> 97.     z -> 122. (ASCII VALUES)\\n\\n        int cnt = 0;\\n        int m = strs[0].size();\\n        for(int i = 0; i < m; i++)\\n        {\\n            for(int j = 1; j < strs.size(); j++)\\n            {\\n                // cout<<strs[j][i];\\n                if(strs[j-1][i] > strs[j][i]){\\n                    cnt++;\\n                    break;\\n                }\\n            }\\n            // cout<<endl;\\n        }\\n        // cout<<\"cnt\"<<cnt<<endl;\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        // a -> 97.     z -> 122. (ASCII VALUES)\\n\\n        int cnt = 0;\\n        int m = strs[0].size();\\n        for(int i = 0; i < m; i++)\\n        {\\n            for(int j = 1; j < strs.size(); j++)\\n            {\\n                // cout<<strs[j][i];\\n                if(strs[j-1][i] > strs[j][i]){\\n                    cnt++;\\n                    break;\\n                }\\n            }\\n            // cout<<endl;\\n        }\\n        // cout<<\"cnt\"<<cnt<<endl;\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2993854,
                "title": "accepted-with-comments-solution-easy-and-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        // Initialize the delete count to 0\\n        int deleteCount = 0;\\n        // Get the number of rows and columns in the grid\\n        int n = strs.length;\\n        int m = strs[0].length();\\n        // Iterate through each column of the grid\\n        for (int i = 0; i < m; i++) {\\n            // Iterate through each element in the column\\n            for (int j = 1; j < n; j++) {\\n                // If the current element is lexicographically smaller than the previous element,\\n                // increment the delete count and break out of the loop\\n                if (strs[j].charAt(i) < strs[j - 1].charAt(i)) {\\n                    deleteCount++;\\n                    break;\\n                }\\n            }\\n        }\\n        // Return the delete count\\n        return deleteCount;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        // Initialize the delete count to 0\\n        int deleteCount = 0;\\n        // Get the number of rows and columns in the grid\\n        int n = strs.length;\\n        int m = strs[0].length();\\n        // Iterate through each column of the grid\\n        for (int i = 0; i < m; i++) {\\n            // Iterate through each element in the column\\n            for (int j = 1; j < n; j++) {\\n                // If the current element is lexicographically smaller than the previous element,\\n                // increment the delete count and break out of the loop\\n                if (strs[j].charAt(i) < strs[j - 1].charAt(i)) {\\n                    deleteCount++;\\n                    break;\\n                }\\n            }\\n        }\\n        // Return the delete count\\n        return deleteCount;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2993830,
                "title": "java-string-matrix-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nString and array manipulation \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nPut each string character wise in a matrix format. Then check for each column of the matrix if it is not inserted in ascending format, increase the count and break. Then move to next column and check for the same constraint. Finally return the count.\\n\\n# Code\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0;\\n        int m = strs.length;\\n        int n = strs[0].length();\\n        int matrix[][] = new int[m][n];\\n        for(int i = 0;i<m;i++){\\n            for(int j = 0;j<n;j++){\\n                matrix[i][j] = strs[i].charAt(j) - \\'a\\';\\n            }\\n        }\\n        for(int j = 0;j<n;j++){\\n            for(int i = 1;i<m;i++){\\n                if(matrix[i][j] < matrix[i-1][j]){\\n                    count++;\\n                    break;\\n                }\\n                else{\\n                    continue;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0;\\n        int m = strs.length;\\n        int n = strs[0].length();\\n        int matrix[][] = new int[m][n];\\n        for(int i = 0;i<m;i++){\\n            for(int j = 0;j<n;j++){\\n                matrix[i][j] = strs[i].charAt(j) - \\'a\\';\\n            }\\n        }\\n        for(int j = 0;j<n;j++){\\n            for(int i = 1;i<m;i++){\\n                if(matrix[i][j] < matrix[i-1][j]){\\n                    count++;\\n                    break;\\n                }\\n                else{\\n                    continue;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2993737,
                "title": "simple-intuition-with-easy-approach-code-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe first intuition is that we will have to iterate through the entire string vector and compare each char of each string in it.\\n\\nWe will also have to store the status of each column (whether sorted or not) to find out how many total columns do we actually need to delete.\\n\\n--> We cannot simply make a counter variable and do *counter++* when there is an unsorted occurance because a column may have more than one unsorted occurances and in this case, then result will be incorrect. \\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. If the vector of strings has only one element, then we do not need to delete anything because a single element is always sorted in itself. Hence, directly return 0.\\n2. Else, create a bool array (sorted here) of size equal to the number of columns such that each index denotes each column status.\\n3. Initially, initialize each column status as true (means sorted).\\n4. Iterate through the entire vector of strings from its second element and keep comparing its each char with the char of previous element at the same index.\\n5. If any unsorted order occurs, change the status of that corresponding column to false (denoting that it needs to be deleted).\\n6. Finally count all the number of false occurances in the bool array and return that value as the required output.\\n# Complexity\\n- Time complexity = $$O(n * len)$$\\nwhere, n = length of vector of strings and \\nlen = length of each string in it or the total number of columns.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity = $$O(n)$$\\nfor using boolean array to hold the status of each column.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& str) {\\n        int n = str.size() ;\\n\\n        if(n == 1) return 0 ;\\n\\n        int len = str[0].length() ;\\n        bool sorted[len] ;    //To store result of each column.\\n        memset(sorted, true, sizeof(sorted)) ;\\n\\n        for(int i=1; i<n; i++){\\n            for(int j=0; j<len; j++){\\n                if(str[i][j] < str[i-1][j]){\\n                    sorted[j] = false ;\\n                }\\n            }\\n        }\\n\\n        int count = 0 ;\\n        for(int i=0; i<len; i++){\\n            if(!sorted[i]){\\n                count++ ;\\n            }\\n        }\\n\\n        return count ;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& str) {\\n        int n = str.size() ;\\n\\n        if(n == 1) return 0 ;\\n\\n        int len = str[0].length() ;\\n        bool sorted[len] ;    //To store result of each column.\\n        memset(sorted, true, sizeof(sorted)) ;\\n\\n        for(int i=1; i<n; i++){\\n            for(int j=0; j<len; j++){\\n                if(str[i][j] < str[i-1][j]){\\n                    sorted[j] = false ;\\n                }\\n            }\\n        }\\n\\n        int count = 0 ;\\n        for(int i=0; i<len; i++){\\n            if(!sorted[i]){\\n                count++ ;\\n            }\\n        }\\n\\n        return count ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2993411,
                "title": "easy-to-understand-c-solution",
                "content": "\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nIn this problem first we are traversing column wise so here if any greater ascii value alphabet if comes first  then count value increases by 1 then break the loop then again check the next column so on .finally we got the result as the count.\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n**Please upvote if you like the solution.**\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int n=strs.size();\\n        int count=0;\\n        int m=strs[0].length();\\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n-1;j++){\\n                if(strs[j][i]>strs[j+1][i]){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n      return count;  \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int n=strs.size();\\n        int count=0;\\n        int m=strs[0].length();\\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n-1;j++){\\n                if(strs[j][i]>strs[j+1][i]){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n      return count;  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2993409,
                "title": "easy-to-understand-c-solution",
                "content": "\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nIn this problem first we are traversing column wise so here if any greater ascii value alphabet if comes first  then count value increases by 1 then break the loop then again check the next column so on .finally we got the result as the count.\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n**Please upvote if you like the solution.**\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int n=strs.size();\\n        int count=0;\\n        int m=strs[0].length();\\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n-1;j++){\\n                if(strs[j][i]>strs[j+1][i]){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n      return count;  \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int n=strs.size();\\n        int count=0;\\n        int m=strs[0].length();\\n        for(int i=0;i<m;i++){\\n            for(int j=0;j<n-1;j++){\\n                if(strs[j][i]>strs[j+1][i]){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n      return count;  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2993374,
                "title": "easy-java-solution",
                "content": "#\\n# Code\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int m=strs[0].length();\\n        int ans=0;\\n        for(int i=0;i<m;i++){\\n            for(int j=1;j<strs.length;j++){\\n                if(strs[j].charAt(i)<strs[j-1].charAt(i)){\\n                 ans++;\\n                 break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int m=strs[0].length();\\n        int ans=0;\\n        for(int i=0;i<m;i++){\\n            for(int j=1;j<strs.length;j++){\\n                if(strs[j].charAt(i)<strs[j-1].charAt(i)){\\n                 ans++;\\n                 break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2993278,
                "title": "m-n-easiest",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int n=strs.size();\\n        int m=strs[0].size();\\n        int col,row,res=0;\\n        for(col=0;col<m;col++){\\n            for(row=0;row<n-1;row++){\\n                if(strs[row][col]<=strs[row+1][col]){\\n                    continue;\\n                }\\n                else{\\n                    res++;\\n                    break;\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int n=strs.size();\\n        int m=strs[0].size();\\n        int col,row,res=0;\\n        for(col=0;col<m;col++){\\n            for(row=0;row<n-1;row++){\\n                if(strs[row][col]<=strs[row+1][col]){\\n                    continue;\\n                }\\n                else{\\n                    res++;\\n                    break;\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2993164,
                "title": "simple-c-by-nested-loop-to-check-sorting",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int count_col = 0;\\n        for (int i = 0; i < strs[0].size(); i++) {\\n            char prev = strs[0][i];\\n            char curr ;\\n            for (int j = 1; j < strs.size(); j++) {\\n                curr = strs[j][i];\\n                if (prev > curr) {\\n                    count_col++;\\n                    break;\\n                } else {\\n                    prev = curr;\\n                }\\n            }\\n        }\\n        return count_col;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int count_col = 0;\\n        for (int i = 0; i < strs[0].size(); i++) {\\n            char prev = strs[0][i];\\n            char curr ;\\n            for (int j = 1; j < strs.size(); j++) {\\n                curr = strs[j][i];\\n                if (prev > curr) {\\n                    count_col++;\\n                    break;\\n                } else {\\n                    prev = curr;\\n                }\\n            }\\n        }\\n        return count_col;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2992996,
                "title": "c-o-n-m-solution",
                "content": "\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n*m)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& vec) {\\n        int r = 0; int c = 0; int colDel = 0;\\n        while(c < vec[0].size()) {\\n            if(r == vec.size()-1){\\n                r = 0;\\n                c++;\\n            }\\n            else if(vec[r][c] > vec[r + 1][c]) {\\n                colDel++;\\n                c++;\\n                r = 0;\\n            }\\n            else r++;\\n        }\\n        return colDel;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& vec) {\\n        int r = 0; int c = 0; int colDel = 0;\\n        while(c < vec[0].size()) {\\n            if(r == vec.size()-1){\\n                r = 0;\\n                c++;\\n            }\\n            else if(vec[r][c] > vec[r + 1][c]) {\\n                colDel++;\\n                c++;\\n                r = 0;\\n            }\\n            else r++;\\n        }\\n        return colDel;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2992952,
                "title": "c-easy-approach-counitng",
                "content": "\\n\\n# Approach\\nTo check every character in a Col. Col should be constant and row must be kept changing.\\nAfter, that checking if previous char is greater than next only then inc counter(delete col) and break that loop.\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int  r = strs.size();\\n        int c = strs[0].size();\\n        int cnt=0;\\n        \\n//tricky in loops\\n        for(int i=0; i<c; i++){\\n            for(int j=0; j<r-1; j++){\\n                if (strs[j][i] > strs[j+1][i]) {\\n                cnt++;\\n                break;\\n                }\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "String Matching",
                    "Matrix",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int  r = strs.size();\\n        int c = strs[0].size();\\n        int cnt=0;\\n        \\n//tricky in loops\\n        for(int i=0; i<c; i++){\\n            for(int j=0; j<r-1; j++){\\n                if (strs[j][i] > strs[j+1][i]) {\\n                cnt++;\\n                break;\\n                }\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2992829,
                "title": "c",
                "content": "~~~\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int count=0,n=strs.size(),m=strs[0].size();\\n        for(int i=0;i<m;i++)\\n        {\\n            int a=strs[0][i]-\\'a\\';\\n            for(int j=1;j<n;j++)\\n            {\\n                if(a>strs[j][i]-\\'a\\') \\n                {\\n                    count++;\\n                    break;\\n                }\\n                a=strs[j][i]-\\'a\\';\\n            }\\n        }\\n        return count;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int count=0,n=strs.size(),m=strs[0].size();\\n        for(int i=0;i<m;i++)\\n        {\\n            int a=strs[0][i]-\\'a\\';\\n            for(int j=1;j<n;j++)\\n            {\\n                if(a>strs[j][i]-\\'a\\') \\n                {\\n                    count++;\\n                    break;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2992782,
                "title": "c-faster-than-99",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(nm)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int res = 0;\\n        for (int i = 0; i < strs[0].size(); ++ i) {\\n            for (int j = 1; j < strs.size(); ++ j) {\\n                if (strs[j][i] < strs[j - 1][i]) {\\n                    ++ res;\\n                    break;\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```\\n**Please upvote if u like the solution \\uD83D\\uDE0A**",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int res = 0;\\n        for (int i = 0; i < strs[0].size(); ++ i) {\\n            for (int j = 1; j < strs.size(); ++ j) {\\n                if (strs[j][i] < strs[j - 1][i]) {\\n                    ++ res;\\n                    break;\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2992502,
                "title": "cpp-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\no(n^2)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\no(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int ans=0;\\n        for(int i=0;i<strs[0].length();i++)\\n        {\\n            for(int j=1;j<strs.size();j++)\\n            {\\n                if(strs[j-1][i]>strs[j][i])\\n                {\\n                    ans+=1;\\n                    break;\\n                }\\n            }\\n           \\n        }\\n        return ans;\\n//upvote if you find it helpful\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int ans=0;\\n        for(int i=0;i<strs[0].length();i++)\\n        {\\n            for(int j=1;j<strs.size();j++)\\n            {\\n                if(strs[j-1][i]>strs[j][i])\\n                {\\n                    ans+=1;\\n                    break;\\n                }\\n            }\\n           \\n        }\\n        return ans;\\n//upvote if you find it helpful\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2992497,
                "title": "easy-java-solution-90-faster",
                "content": "\\n- Time complexity: O(n)\\n\\n- Space complexity: O(n)\\n- \\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n\\n    int count=0;\\n     for(int i=0;i<strs[0].length();i++)\\n     {\\n          char prev=\\'0\\';\\n         for(String s:strs)\\n         {\\n             char curr=s.charAt(i);\\n             if(prev>curr)\\n             {\\n                 count++;\\n                  break;\\n             }\\n             prev=curr;\\n         }\\n     }\\n     return count;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n\\n    int count=0;\\n     for(int i=0;i<strs[0].length();i++)\\n     {\\n          char prev=\\'0\\';\\n         for(String s:strs)\\n         {\\n             char curr=s.charAt(i);\\n             if(prev>curr)\\n             {\\n                 count++;\\n                  break;\\n             }\\n             prev=curr;\\n         }\\n     }\\n     return count;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2992478,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n;\\n        int ans = 0;// no of columns to be deleted\\n        int k = 0; // for iterating over the length of string\\n        \\n        while(k < strs[0].length()) {\\n            int prev = (int) strs[0].charAt(k);\\n            for(int i = 1; i < strs.length; i++) { //iterating through array to check all strings\\n                int curr = (int) strs[i].charAt(k);\\n                if(curr < prev) {\\n                    ans++;\\n                    break;\\n                }else {\\n                    prev = curr;\\n                }\\n            }\\n            \\n            k++;\\n        }\\n        \\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n;\\n        int ans = 0;// no of columns to be deleted\\n        int k = 0; // for iterating over the length of string\\n        \\n        while(k < strs[0].length()) {\\n            int prev = (int) strs[0].charAt(k);\\n            for(int i = 1; i < strs.length; i++) { //iterating through array to check all strings\\n                int curr = (int) strs[i].charAt(k);\\n                if(curr < prev) {\\n                    ans++;\\n                    break;\\n                }else {\\n                    prev = curr;\\n                }\\n            }\\n            \\n            k++;\\n        }\\n        \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2992389,
                "title": "easy-c-code",
                "content": "\\n# Complexity\\n- Time complexity:O(m*n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int m=strs.size(),n=strs[0].size(),ans=0;\\n        for(int j=0;j<n;j++){\\n            bool flag=1;\\n            for(int i=1;i<m;i++){\\n            if(strs[i][j]<strs[i-1][j]){//unsorted\\n            flag=0;\\n            break;}\\n            }\\n            if(!flag)ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int m=strs.size(),n=strs[0].size(),ans=0;\\n        for(int j=0;j<n;j++){\\n            bool flag=1;\\n            for(int i=1;i<m;i++){\\n            if(strs[i][j]<strs[i-1][j]){//unsorted\\n            flag=0;\\n            break;}\\n            }\\n            if(!flag)ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2992240,
                "title": "very-easy-process-normal-loop-operation-java",
                "content": "- 85/85 cases passed (10 ms)\\n- Your runtime beats 69.21 % of java submissions\\n- Your memory usage beats 45.62 % of java submissions (47.7 MB)\\n\\n# Code\\n```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int l=strs[0].length(),out=0;\\n        for(int i=0;i<l;i++)\\n            for(int j=0;j<strs.length-1;j++)\\n                if(strs[j].charAt(i)>strs[j+1].charAt(i)){\\n                    out++;\\n                    break;\\n                }\\n\\n        return out;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int l=strs[0].length(),out=0;\\n        for(int i=0;i<l;i++)\\n            for(int j=0;j<strs.length-1;j++)\\n                if(strs[j].charAt(i)>strs[j+1].charAt(i)){\\n                    out++;\\n                    break;\\n                }\\n\\n        return out;\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1738908,
                "content": [
                    {
                        "username": "Emoclaw",
                        "content": "we\\'re starting 2023 with an easy streak, i feel like we\\'re gonna get blasted with dp hards towards mid-end of Jan"
                    },
                    {
                        "username": "drewbie",
                        "content": "The calm before the storm"
                    },
                    {
                        "username": "ravi_kant_chauhan",
                        "content": "and still some of the programmers like me are not even getting the problem ..."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "most probably hard dp problems in mid-jan and our streak gonna break out \\uD83D\\uDE25"
                    },
                    {
                        "username": "kajal1801",
                        "content": "I got the same feeling \\uD83E\\uDEE5"
                    },
                    {
                        "username": "marcocane",
                        "content": "man i forgor the 1st"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "You may thinking Why this problem got so much dislikes .....🧐?  Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes.  You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Indeed, it was super terrible!\\nThanks for this comment."
                    },
                    {
                        "username": "ajedmh",
                        "content": "I don\\'t understand why in the examples \"cba\" is considered but \"zyx\" isn\\'t. The problem seems to be just in the first example but it\\'s not allowing me to pass."
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I had the same thoughts, but it is columns, not rows. \\nFor example, \\n\\ncba\\ndaf\\nghi\\n\\ncba isn\\'t being considered, the columns that are considered are \"c, d, g\", \"b, a, h\", and \"a, f, i\". Since the middle row (b, a, h), is the only one that isn\\'t sorted, we return 1. If there was a column that spelled \"cba\", it wouldn\\'t be considered as sorted lexographically."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order, [cba] -> c b a are the rows"
                    },
                    {
                        "username": "esint2030",
                        "content": "I really don\\'t get why people are saying this problem is so hard to understand. I read the description and it only took me 2 minutes to understand it. Are people\\'s comprehension skills really that low or are people just giving up if they can\\'t understand a problem in less than 5 seconds?"
                    },
                    {
                        "username": "Finesse",
                        "content": "2 minutes? It took me 5 seconds (including finding a solution)"
                    },
                    {
                        "username": "calm27",
                        "content": "frankly, it is not that obvious. so, don\\'t be like that, it is fine to complain. people complain, relax and refine the scope. "
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "codedrian",
                        "content": "[@pieceofpie](/pieceofpie) i agree\\n"
                    },
                    {
                        "username": "Bobolov",
                        "content": "sure\\n"
                    },
                    {
                        "username": "larrasket",
                        "content": "No it\\'s obvious, you are a genius and most people have low IQ than yours. "
                    },
                    {
                        "username": "pieceofpie",
                        "content": "I don\\'t think the problem is hard to understand. The problem is that the problem is very badly formulated, which can make some people not fully understand the problem."
                    },
                    {
                        "username": "chornox",
                        "content": "The problem constraints just need a small change. \\n\\n `for any i strs[i].length == m` \\n\\nAll strings are equal"
                    },
                    {
                        "username": "Fabio_Trucco",
                        "content": "Entered this section looking for this kind of confirmation. Thx"
                    },
                    {
                        "username": "chornox",
                        "content": "[@_BREEZE_](/_BREEZE_) yes that\\'s correct. I was referring to the last section. I usually just glance at it to verify these details. "
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "That is written in the problem statement \\n`You are given an array of n strings strs, all of the same length.`"
                    },
                    {
                        "username": "Jugni",
                        "content": "What is this?? \\n1. columns 0 (\\'a\\', \\'b\\', \\'c\\') and 2 (\\'c\\', \\'e\\', \\'e\\') are sorted . Given array-> strs = [\"abc\", \"bce\", \"cae\"]. Where is \\'cee\\'?\\n2. Input: strs = [\"cba\",\"daf\",\"ghi\"].  Columns 0 and 2 are sorted\\n3. Input: strs = [\"zyx\",\"wvu\",\"tsr\"]. All 3 columns are not sorted\\n\\nTake a look at \"cba\". This group is sorted in descending order e.g \"abc\" and the description says that it is sorted (point 2) But in another example, it disregards the above example; \"zyx\" -> \"xyz\" (backwards). Can someone explain? "
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) got it\\n"
                    },
                    {
                        "username": "aka773",
                        "content": "https://blog.csdn.net/qq_38959715/article/details/85299151\\ngo here"
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) In input 3 what should be the output? "
                    },
                    {
                        "username": "arns",
                        "content": "it is being seen column wise not row-wise"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you'll see [`c`,`e`,`e`]. This array is sorted in ascending order."
                    },
                    {
                        "username": "emli",
                        "content": "It\\'s easy with but with bad statement"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Exactly, but easy to understand with the Sample Cases provided."
                    },
                    {
                        "username": "Knight-03",
                        "content": "There is nothing to dislike this question \\ntake a `pen and paper write down the condition` they\\'ve given \\nit will be `very clear` that whats the `question saying`\\n\\nyou just need to `compare column elements ` \\nrun two for loops ............\\n--->`one from 0 to numbers of columns `\\n---> `inner loops from 1 to number of rows` \\ncompare `str[j][i] < str[j-1][i]` if true count++; and break that loop \\n`return that count`\\n\\neasy pizzy "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the different strings in the array given. Other loop to iterate across the string i.e., to move across an individual element of the array. "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the elements of the array. 1st row is 1st string, 2nd row is 2nd string and so on. Other array we use to iterate across the string character-wise. "
                    },
                    {
                        "username": "itsyaboiimoulee",
                        "content": "[@Ak_15](/Ak_15)  in the given string \\n[\"abc\",\"bce\",\"cae\"]\\n   |         |        |   \\n  1        2       3\\nso , 1=> strs[j][i] and  strs[1][0] both are same. its not a entire string. \\n"
                    },
                    {
                        "username": "Knight-03",
                        "content": "[@Ak_15](/Ak_15) in array 0th element is the whole string so you can access it by just strs[i][j] "
                    },
                    {
                        "username": "Ak_15",
                        "content": "bro but the given is 1-D array right! how can i use column?????? could you explain meee\\n"
                    },
                    {
                        "username": "user8166e",
                        "content": "Associated tag with this problem is Hash table. How Hash table feet\\'s in the solution ?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "I, like I assume you did as well, did not implicitly use a Hash table.\\nbut what i think is happening \"under the hood\" is that the way you compare letter using math symbols is by having a hash table in the background that give \"a\" a smaller value then \"b\" and so on.\\nthis is just a guess so I look forward to be corrected!"
                    },
                    {
                        "username": "ayushp2021",
                        "content": "Why so many dislikes to this problem??"
                    },
                    {
                        "username": "TALLEC-Scott",
                        "content": "You may thinking Why this problem got so much dislikes .....\\uD83E\\uDDD0? Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151\\n\\nsource: [@Sachin](/sachinbaral02) "
                    },
                    {
                        "username": "mishra_anurag",
                        "content": "because they are noobs and cant reallt understand question"
                    },
                    {
                        "username": "mihir_adarsh",
                        "content": "Probably you won\\'t find this type of question in interviews. If you are new to programming, then you can solve this as a warm up question. "
                    },
                    {
                        "username": "BLOCKS",
                        "content": "Probably poor framing of the question."
                    }
                ]
            },
            {
                "id": 1739329,
                "content": [
                    {
                        "username": "Emoclaw",
                        "content": "we\\'re starting 2023 with an easy streak, i feel like we\\'re gonna get blasted with dp hards towards mid-end of Jan"
                    },
                    {
                        "username": "drewbie",
                        "content": "The calm before the storm"
                    },
                    {
                        "username": "ravi_kant_chauhan",
                        "content": "and still some of the programmers like me are not even getting the problem ..."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "most probably hard dp problems in mid-jan and our streak gonna break out \\uD83D\\uDE25"
                    },
                    {
                        "username": "kajal1801",
                        "content": "I got the same feeling \\uD83E\\uDEE5"
                    },
                    {
                        "username": "marcocane",
                        "content": "man i forgor the 1st"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "You may thinking Why this problem got so much dislikes .....🧐?  Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes.  You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Indeed, it was super terrible!\\nThanks for this comment."
                    },
                    {
                        "username": "ajedmh",
                        "content": "I don\\'t understand why in the examples \"cba\" is considered but \"zyx\" isn\\'t. The problem seems to be just in the first example but it\\'s not allowing me to pass."
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I had the same thoughts, but it is columns, not rows. \\nFor example, \\n\\ncba\\ndaf\\nghi\\n\\ncba isn\\'t being considered, the columns that are considered are \"c, d, g\", \"b, a, h\", and \"a, f, i\". Since the middle row (b, a, h), is the only one that isn\\'t sorted, we return 1. If there was a column that spelled \"cba\", it wouldn\\'t be considered as sorted lexographically."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order, [cba] -> c b a are the rows"
                    },
                    {
                        "username": "esint2030",
                        "content": "I really don\\'t get why people are saying this problem is so hard to understand. I read the description and it only took me 2 minutes to understand it. Are people\\'s comprehension skills really that low or are people just giving up if they can\\'t understand a problem in less than 5 seconds?"
                    },
                    {
                        "username": "Finesse",
                        "content": "2 minutes? It took me 5 seconds (including finding a solution)"
                    },
                    {
                        "username": "calm27",
                        "content": "frankly, it is not that obvious. so, don\\'t be like that, it is fine to complain. people complain, relax and refine the scope. "
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "codedrian",
                        "content": "[@pieceofpie](/pieceofpie) i agree\\n"
                    },
                    {
                        "username": "Bobolov",
                        "content": "sure\\n"
                    },
                    {
                        "username": "larrasket",
                        "content": "No it\\'s obvious, you are a genius and most people have low IQ than yours. "
                    },
                    {
                        "username": "pieceofpie",
                        "content": "I don\\'t think the problem is hard to understand. The problem is that the problem is very badly formulated, which can make some people not fully understand the problem."
                    },
                    {
                        "username": "chornox",
                        "content": "The problem constraints just need a small change. \\n\\n `for any i strs[i].length == m` \\n\\nAll strings are equal"
                    },
                    {
                        "username": "Fabio_Trucco",
                        "content": "Entered this section looking for this kind of confirmation. Thx"
                    },
                    {
                        "username": "chornox",
                        "content": "[@_BREEZE_](/_BREEZE_) yes that\\'s correct. I was referring to the last section. I usually just glance at it to verify these details. "
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "That is written in the problem statement \\n`You are given an array of n strings strs, all of the same length.`"
                    },
                    {
                        "username": "Jugni",
                        "content": "What is this?? \\n1. columns 0 (\\'a\\', \\'b\\', \\'c\\') and 2 (\\'c\\', \\'e\\', \\'e\\') are sorted . Given array-> strs = [\"abc\", \"bce\", \"cae\"]. Where is \\'cee\\'?\\n2. Input: strs = [\"cba\",\"daf\",\"ghi\"].  Columns 0 and 2 are sorted\\n3. Input: strs = [\"zyx\",\"wvu\",\"tsr\"]. All 3 columns are not sorted\\n\\nTake a look at \"cba\". This group is sorted in descending order e.g \"abc\" and the description says that it is sorted (point 2) But in another example, it disregards the above example; \"zyx\" -> \"xyz\" (backwards). Can someone explain? "
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) got it\\n"
                    },
                    {
                        "username": "aka773",
                        "content": "https://blog.csdn.net/qq_38959715/article/details/85299151\\ngo here"
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) In input 3 what should be the output? "
                    },
                    {
                        "username": "arns",
                        "content": "it is being seen column wise not row-wise"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you'll see [`c`,`e`,`e`]. This array is sorted in ascending order."
                    },
                    {
                        "username": "emli",
                        "content": "It\\'s easy with but with bad statement"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Exactly, but easy to understand with the Sample Cases provided."
                    },
                    {
                        "username": "Knight-03",
                        "content": "There is nothing to dislike this question \\ntake a `pen and paper write down the condition` they\\'ve given \\nit will be `very clear` that whats the `question saying`\\n\\nyou just need to `compare column elements ` \\nrun two for loops ............\\n--->`one from 0 to numbers of columns `\\n---> `inner loops from 1 to number of rows` \\ncompare `str[j][i] < str[j-1][i]` if true count++; and break that loop \\n`return that count`\\n\\neasy pizzy "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the different strings in the array given. Other loop to iterate across the string i.e., to move across an individual element of the array. "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the elements of the array. 1st row is 1st string, 2nd row is 2nd string and so on. Other array we use to iterate across the string character-wise. "
                    },
                    {
                        "username": "itsyaboiimoulee",
                        "content": "[@Ak_15](/Ak_15)  in the given string \\n[\"abc\",\"bce\",\"cae\"]\\n   |         |        |   \\n  1        2       3\\nso , 1=> strs[j][i] and  strs[1][0] both are same. its not a entire string. \\n"
                    },
                    {
                        "username": "Knight-03",
                        "content": "[@Ak_15](/Ak_15) in array 0th element is the whole string so you can access it by just strs[i][j] "
                    },
                    {
                        "username": "Ak_15",
                        "content": "bro but the given is 1-D array right! how can i use column?????? could you explain meee\\n"
                    },
                    {
                        "username": "user8166e",
                        "content": "Associated tag with this problem is Hash table. How Hash table feet\\'s in the solution ?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "I, like I assume you did as well, did not implicitly use a Hash table.\\nbut what i think is happening \"under the hood\" is that the way you compare letter using math symbols is by having a hash table in the background that give \"a\" a smaller value then \"b\" and so on.\\nthis is just a guess so I look forward to be corrected!"
                    },
                    {
                        "username": "ayushp2021",
                        "content": "Why so many dislikes to this problem??"
                    },
                    {
                        "username": "TALLEC-Scott",
                        "content": "You may thinking Why this problem got so much dislikes .....\\uD83E\\uDDD0? Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151\\n\\nsource: [@Sachin](/sachinbaral02) "
                    },
                    {
                        "username": "mishra_anurag",
                        "content": "because they are noobs and cant reallt understand question"
                    },
                    {
                        "username": "mihir_adarsh",
                        "content": "Probably you won\\'t find this type of question in interviews. If you are new to programming, then you can solve this as a warm up question. "
                    },
                    {
                        "username": "BLOCKS",
                        "content": "Probably poor framing of the question."
                    }
                ]
            },
            {
                "id": 1739476,
                "content": [
                    {
                        "username": "Emoclaw",
                        "content": "we\\'re starting 2023 with an easy streak, i feel like we\\'re gonna get blasted with dp hards towards mid-end of Jan"
                    },
                    {
                        "username": "drewbie",
                        "content": "The calm before the storm"
                    },
                    {
                        "username": "ravi_kant_chauhan",
                        "content": "and still some of the programmers like me are not even getting the problem ..."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "most probably hard dp problems in mid-jan and our streak gonna break out \\uD83D\\uDE25"
                    },
                    {
                        "username": "kajal1801",
                        "content": "I got the same feeling \\uD83E\\uDEE5"
                    },
                    {
                        "username": "marcocane",
                        "content": "man i forgor the 1st"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "You may thinking Why this problem got so much dislikes .....🧐?  Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes.  You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Indeed, it was super terrible!\\nThanks for this comment."
                    },
                    {
                        "username": "ajedmh",
                        "content": "I don\\'t understand why in the examples \"cba\" is considered but \"zyx\" isn\\'t. The problem seems to be just in the first example but it\\'s not allowing me to pass."
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I had the same thoughts, but it is columns, not rows. \\nFor example, \\n\\ncba\\ndaf\\nghi\\n\\ncba isn\\'t being considered, the columns that are considered are \"c, d, g\", \"b, a, h\", and \"a, f, i\". Since the middle row (b, a, h), is the only one that isn\\'t sorted, we return 1. If there was a column that spelled \"cba\", it wouldn\\'t be considered as sorted lexographically."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order, [cba] -> c b a are the rows"
                    },
                    {
                        "username": "esint2030",
                        "content": "I really don\\'t get why people are saying this problem is so hard to understand. I read the description and it only took me 2 minutes to understand it. Are people\\'s comprehension skills really that low or are people just giving up if they can\\'t understand a problem in less than 5 seconds?"
                    },
                    {
                        "username": "Finesse",
                        "content": "2 minutes? It took me 5 seconds (including finding a solution)"
                    },
                    {
                        "username": "calm27",
                        "content": "frankly, it is not that obvious. so, don\\'t be like that, it is fine to complain. people complain, relax and refine the scope. "
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "codedrian",
                        "content": "[@pieceofpie](/pieceofpie) i agree\\n"
                    },
                    {
                        "username": "Bobolov",
                        "content": "sure\\n"
                    },
                    {
                        "username": "larrasket",
                        "content": "No it\\'s obvious, you are a genius and most people have low IQ than yours. "
                    },
                    {
                        "username": "pieceofpie",
                        "content": "I don\\'t think the problem is hard to understand. The problem is that the problem is very badly formulated, which can make some people not fully understand the problem."
                    },
                    {
                        "username": "chornox",
                        "content": "The problem constraints just need a small change. \\n\\n `for any i strs[i].length == m` \\n\\nAll strings are equal"
                    },
                    {
                        "username": "Fabio_Trucco",
                        "content": "Entered this section looking for this kind of confirmation. Thx"
                    },
                    {
                        "username": "chornox",
                        "content": "[@_BREEZE_](/_BREEZE_) yes that\\'s correct. I was referring to the last section. I usually just glance at it to verify these details. "
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "That is written in the problem statement \\n`You are given an array of n strings strs, all of the same length.`"
                    },
                    {
                        "username": "Jugni",
                        "content": "What is this?? \\n1. columns 0 (\\'a\\', \\'b\\', \\'c\\') and 2 (\\'c\\', \\'e\\', \\'e\\') are sorted . Given array-> strs = [\"abc\", \"bce\", \"cae\"]. Where is \\'cee\\'?\\n2. Input: strs = [\"cba\",\"daf\",\"ghi\"].  Columns 0 and 2 are sorted\\n3. Input: strs = [\"zyx\",\"wvu\",\"tsr\"]. All 3 columns are not sorted\\n\\nTake a look at \"cba\". This group is sorted in descending order e.g \"abc\" and the description says that it is sorted (point 2) But in another example, it disregards the above example; \"zyx\" -> \"xyz\" (backwards). Can someone explain? "
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) got it\\n"
                    },
                    {
                        "username": "aka773",
                        "content": "https://blog.csdn.net/qq_38959715/article/details/85299151\\ngo here"
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) In input 3 what should be the output? "
                    },
                    {
                        "username": "arns",
                        "content": "it is being seen column wise not row-wise"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you'll see [`c`,`e`,`e`]. This array is sorted in ascending order."
                    },
                    {
                        "username": "emli",
                        "content": "It\\'s easy with but with bad statement"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Exactly, but easy to understand with the Sample Cases provided."
                    },
                    {
                        "username": "Knight-03",
                        "content": "There is nothing to dislike this question \\ntake a `pen and paper write down the condition` they\\'ve given \\nit will be `very clear` that whats the `question saying`\\n\\nyou just need to `compare column elements ` \\nrun two for loops ............\\n--->`one from 0 to numbers of columns `\\n---> `inner loops from 1 to number of rows` \\ncompare `str[j][i] < str[j-1][i]` if true count++; and break that loop \\n`return that count`\\n\\neasy pizzy "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the different strings in the array given. Other loop to iterate across the string i.e., to move across an individual element of the array. "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the elements of the array. 1st row is 1st string, 2nd row is 2nd string and so on. Other array we use to iterate across the string character-wise. "
                    },
                    {
                        "username": "itsyaboiimoulee",
                        "content": "[@Ak_15](/Ak_15)  in the given string \\n[\"abc\",\"bce\",\"cae\"]\\n   |         |        |   \\n  1        2       3\\nso , 1=> strs[j][i] and  strs[1][0] both are same. its not a entire string. \\n"
                    },
                    {
                        "username": "Knight-03",
                        "content": "[@Ak_15](/Ak_15) in array 0th element is the whole string so you can access it by just strs[i][j] "
                    },
                    {
                        "username": "Ak_15",
                        "content": "bro but the given is 1-D array right! how can i use column?????? could you explain meee\\n"
                    },
                    {
                        "username": "user8166e",
                        "content": "Associated tag with this problem is Hash table. How Hash table feet\\'s in the solution ?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "I, like I assume you did as well, did not implicitly use a Hash table.\\nbut what i think is happening \"under the hood\" is that the way you compare letter using math symbols is by having a hash table in the background that give \"a\" a smaller value then \"b\" and so on.\\nthis is just a guess so I look forward to be corrected!"
                    },
                    {
                        "username": "ayushp2021",
                        "content": "Why so many dislikes to this problem??"
                    },
                    {
                        "username": "TALLEC-Scott",
                        "content": "You may thinking Why this problem got so much dislikes .....\\uD83E\\uDDD0? Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151\\n\\nsource: [@Sachin](/sachinbaral02) "
                    },
                    {
                        "username": "mishra_anurag",
                        "content": "because they are noobs and cant reallt understand question"
                    },
                    {
                        "username": "mihir_adarsh",
                        "content": "Probably you won\\'t find this type of question in interviews. If you are new to programming, then you can solve this as a warm up question. "
                    },
                    {
                        "username": "BLOCKS",
                        "content": "Probably poor framing of the question."
                    }
                ]
            },
            {
                "id": 1569669,
                "content": [
                    {
                        "username": "Emoclaw",
                        "content": "we\\'re starting 2023 with an easy streak, i feel like we\\'re gonna get blasted with dp hards towards mid-end of Jan"
                    },
                    {
                        "username": "drewbie",
                        "content": "The calm before the storm"
                    },
                    {
                        "username": "ravi_kant_chauhan",
                        "content": "and still some of the programmers like me are not even getting the problem ..."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "most probably hard dp problems in mid-jan and our streak gonna break out \\uD83D\\uDE25"
                    },
                    {
                        "username": "kajal1801",
                        "content": "I got the same feeling \\uD83E\\uDEE5"
                    },
                    {
                        "username": "marcocane",
                        "content": "man i forgor the 1st"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "You may thinking Why this problem got so much dislikes .....🧐?  Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes.  You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Indeed, it was super terrible!\\nThanks for this comment."
                    },
                    {
                        "username": "ajedmh",
                        "content": "I don\\'t understand why in the examples \"cba\" is considered but \"zyx\" isn\\'t. The problem seems to be just in the first example but it\\'s not allowing me to pass."
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I had the same thoughts, but it is columns, not rows. \\nFor example, \\n\\ncba\\ndaf\\nghi\\n\\ncba isn\\'t being considered, the columns that are considered are \"c, d, g\", \"b, a, h\", and \"a, f, i\". Since the middle row (b, a, h), is the only one that isn\\'t sorted, we return 1. If there was a column that spelled \"cba\", it wouldn\\'t be considered as sorted lexographically."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order, [cba] -> c b a are the rows"
                    },
                    {
                        "username": "esint2030",
                        "content": "I really don\\'t get why people are saying this problem is so hard to understand. I read the description and it only took me 2 minutes to understand it. Are people\\'s comprehension skills really that low or are people just giving up if they can\\'t understand a problem in less than 5 seconds?"
                    },
                    {
                        "username": "Finesse",
                        "content": "2 minutes? It took me 5 seconds (including finding a solution)"
                    },
                    {
                        "username": "calm27",
                        "content": "frankly, it is not that obvious. so, don\\'t be like that, it is fine to complain. people complain, relax and refine the scope. "
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "codedrian",
                        "content": "[@pieceofpie](/pieceofpie) i agree\\n"
                    },
                    {
                        "username": "Bobolov",
                        "content": "sure\\n"
                    },
                    {
                        "username": "larrasket",
                        "content": "No it\\'s obvious, you are a genius and most people have low IQ than yours. "
                    },
                    {
                        "username": "pieceofpie",
                        "content": "I don\\'t think the problem is hard to understand. The problem is that the problem is very badly formulated, which can make some people not fully understand the problem."
                    },
                    {
                        "username": "chornox",
                        "content": "The problem constraints just need a small change. \\n\\n `for any i strs[i].length == m` \\n\\nAll strings are equal"
                    },
                    {
                        "username": "Fabio_Trucco",
                        "content": "Entered this section looking for this kind of confirmation. Thx"
                    },
                    {
                        "username": "chornox",
                        "content": "[@_BREEZE_](/_BREEZE_) yes that\\'s correct. I was referring to the last section. I usually just glance at it to verify these details. "
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "That is written in the problem statement \\n`You are given an array of n strings strs, all of the same length.`"
                    },
                    {
                        "username": "Jugni",
                        "content": "What is this?? \\n1. columns 0 (\\'a\\', \\'b\\', \\'c\\') and 2 (\\'c\\', \\'e\\', \\'e\\') are sorted . Given array-> strs = [\"abc\", \"bce\", \"cae\"]. Where is \\'cee\\'?\\n2. Input: strs = [\"cba\",\"daf\",\"ghi\"].  Columns 0 and 2 are sorted\\n3. Input: strs = [\"zyx\",\"wvu\",\"tsr\"]. All 3 columns are not sorted\\n\\nTake a look at \"cba\". This group is sorted in descending order e.g \"abc\" and the description says that it is sorted (point 2) But in another example, it disregards the above example; \"zyx\" -> \"xyz\" (backwards). Can someone explain? "
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) got it\\n"
                    },
                    {
                        "username": "aka773",
                        "content": "https://blog.csdn.net/qq_38959715/article/details/85299151\\ngo here"
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) In input 3 what should be the output? "
                    },
                    {
                        "username": "arns",
                        "content": "it is being seen column wise not row-wise"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you'll see [`c`,`e`,`e`]. This array is sorted in ascending order."
                    },
                    {
                        "username": "emli",
                        "content": "It\\'s easy with but with bad statement"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Exactly, but easy to understand with the Sample Cases provided."
                    },
                    {
                        "username": "Knight-03",
                        "content": "There is nothing to dislike this question \\ntake a `pen and paper write down the condition` they\\'ve given \\nit will be `very clear` that whats the `question saying`\\n\\nyou just need to `compare column elements ` \\nrun two for loops ............\\n--->`one from 0 to numbers of columns `\\n---> `inner loops from 1 to number of rows` \\ncompare `str[j][i] < str[j-1][i]` if true count++; and break that loop \\n`return that count`\\n\\neasy pizzy "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the different strings in the array given. Other loop to iterate across the string i.e., to move across an individual element of the array. "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the elements of the array. 1st row is 1st string, 2nd row is 2nd string and so on. Other array we use to iterate across the string character-wise. "
                    },
                    {
                        "username": "itsyaboiimoulee",
                        "content": "[@Ak_15](/Ak_15)  in the given string \\n[\"abc\",\"bce\",\"cae\"]\\n   |         |        |   \\n  1        2       3\\nso , 1=> strs[j][i] and  strs[1][0] both are same. its not a entire string. \\n"
                    },
                    {
                        "username": "Knight-03",
                        "content": "[@Ak_15](/Ak_15) in array 0th element is the whole string so you can access it by just strs[i][j] "
                    },
                    {
                        "username": "Ak_15",
                        "content": "bro but the given is 1-D array right! how can i use column?????? could you explain meee\\n"
                    },
                    {
                        "username": "user8166e",
                        "content": "Associated tag with this problem is Hash table. How Hash table feet\\'s in the solution ?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "I, like I assume you did as well, did not implicitly use a Hash table.\\nbut what i think is happening \"under the hood\" is that the way you compare letter using math symbols is by having a hash table in the background that give \"a\" a smaller value then \"b\" and so on.\\nthis is just a guess so I look forward to be corrected!"
                    },
                    {
                        "username": "ayushp2021",
                        "content": "Why so many dislikes to this problem??"
                    },
                    {
                        "username": "TALLEC-Scott",
                        "content": "You may thinking Why this problem got so much dislikes .....\\uD83E\\uDDD0? Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151\\n\\nsource: [@Sachin](/sachinbaral02) "
                    },
                    {
                        "username": "mishra_anurag",
                        "content": "because they are noobs and cant reallt understand question"
                    },
                    {
                        "username": "mihir_adarsh",
                        "content": "Probably you won\\'t find this type of question in interviews. If you are new to programming, then you can solve this as a warm up question. "
                    },
                    {
                        "username": "BLOCKS",
                        "content": "Probably poor framing of the question."
                    }
                ]
            },
            {
                "id": 1738901,
                "content": [
                    {
                        "username": "Emoclaw",
                        "content": "we\\'re starting 2023 with an easy streak, i feel like we\\'re gonna get blasted with dp hards towards mid-end of Jan"
                    },
                    {
                        "username": "drewbie",
                        "content": "The calm before the storm"
                    },
                    {
                        "username": "ravi_kant_chauhan",
                        "content": "and still some of the programmers like me are not even getting the problem ..."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "most probably hard dp problems in mid-jan and our streak gonna break out \\uD83D\\uDE25"
                    },
                    {
                        "username": "kajal1801",
                        "content": "I got the same feeling \\uD83E\\uDEE5"
                    },
                    {
                        "username": "marcocane",
                        "content": "man i forgor the 1st"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "You may thinking Why this problem got so much dislikes .....🧐?  Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes.  You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Indeed, it was super terrible!\\nThanks for this comment."
                    },
                    {
                        "username": "ajedmh",
                        "content": "I don\\'t understand why in the examples \"cba\" is considered but \"zyx\" isn\\'t. The problem seems to be just in the first example but it\\'s not allowing me to pass."
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I had the same thoughts, but it is columns, not rows. \\nFor example, \\n\\ncba\\ndaf\\nghi\\n\\ncba isn\\'t being considered, the columns that are considered are \"c, d, g\", \"b, a, h\", and \"a, f, i\". Since the middle row (b, a, h), is the only one that isn\\'t sorted, we return 1. If there was a column that spelled \"cba\", it wouldn\\'t be considered as sorted lexographically."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order, [cba] -> c b a are the rows"
                    },
                    {
                        "username": "esint2030",
                        "content": "I really don\\'t get why people are saying this problem is so hard to understand. I read the description and it only took me 2 minutes to understand it. Are people\\'s comprehension skills really that low or are people just giving up if they can\\'t understand a problem in less than 5 seconds?"
                    },
                    {
                        "username": "Finesse",
                        "content": "2 minutes? It took me 5 seconds (including finding a solution)"
                    },
                    {
                        "username": "calm27",
                        "content": "frankly, it is not that obvious. so, don\\'t be like that, it is fine to complain. people complain, relax and refine the scope. "
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "codedrian",
                        "content": "[@pieceofpie](/pieceofpie) i agree\\n"
                    },
                    {
                        "username": "Bobolov",
                        "content": "sure\\n"
                    },
                    {
                        "username": "larrasket",
                        "content": "No it\\'s obvious, you are a genius and most people have low IQ than yours. "
                    },
                    {
                        "username": "pieceofpie",
                        "content": "I don\\'t think the problem is hard to understand. The problem is that the problem is very badly formulated, which can make some people not fully understand the problem."
                    },
                    {
                        "username": "chornox",
                        "content": "The problem constraints just need a small change. \\n\\n `for any i strs[i].length == m` \\n\\nAll strings are equal"
                    },
                    {
                        "username": "Fabio_Trucco",
                        "content": "Entered this section looking for this kind of confirmation. Thx"
                    },
                    {
                        "username": "chornox",
                        "content": "[@_BREEZE_](/_BREEZE_) yes that\\'s correct. I was referring to the last section. I usually just glance at it to verify these details. "
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "That is written in the problem statement \\n`You are given an array of n strings strs, all of the same length.`"
                    },
                    {
                        "username": "Jugni",
                        "content": "What is this?? \\n1. columns 0 (\\'a\\', \\'b\\', \\'c\\') and 2 (\\'c\\', \\'e\\', \\'e\\') are sorted . Given array-> strs = [\"abc\", \"bce\", \"cae\"]. Where is \\'cee\\'?\\n2. Input: strs = [\"cba\",\"daf\",\"ghi\"].  Columns 0 and 2 are sorted\\n3. Input: strs = [\"zyx\",\"wvu\",\"tsr\"]. All 3 columns are not sorted\\n\\nTake a look at \"cba\". This group is sorted in descending order e.g \"abc\" and the description says that it is sorted (point 2) But in another example, it disregards the above example; \"zyx\" -> \"xyz\" (backwards). Can someone explain? "
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) got it\\n"
                    },
                    {
                        "username": "aka773",
                        "content": "https://blog.csdn.net/qq_38959715/article/details/85299151\\ngo here"
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) In input 3 what should be the output? "
                    },
                    {
                        "username": "arns",
                        "content": "it is being seen column wise not row-wise"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you'll see [`c`,`e`,`e`]. This array is sorted in ascending order."
                    },
                    {
                        "username": "emli",
                        "content": "It\\'s easy with but with bad statement"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Exactly, but easy to understand with the Sample Cases provided."
                    },
                    {
                        "username": "Knight-03",
                        "content": "There is nothing to dislike this question \\ntake a `pen and paper write down the condition` they\\'ve given \\nit will be `very clear` that whats the `question saying`\\n\\nyou just need to `compare column elements ` \\nrun two for loops ............\\n--->`one from 0 to numbers of columns `\\n---> `inner loops from 1 to number of rows` \\ncompare `str[j][i] < str[j-1][i]` if true count++; and break that loop \\n`return that count`\\n\\neasy pizzy "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the different strings in the array given. Other loop to iterate across the string i.e., to move across an individual element of the array. "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the elements of the array. 1st row is 1st string, 2nd row is 2nd string and so on. Other array we use to iterate across the string character-wise. "
                    },
                    {
                        "username": "itsyaboiimoulee",
                        "content": "[@Ak_15](/Ak_15)  in the given string \\n[\"abc\",\"bce\",\"cae\"]\\n   |         |        |   \\n  1        2       3\\nso , 1=> strs[j][i] and  strs[1][0] both are same. its not a entire string. \\n"
                    },
                    {
                        "username": "Knight-03",
                        "content": "[@Ak_15](/Ak_15) in array 0th element is the whole string so you can access it by just strs[i][j] "
                    },
                    {
                        "username": "Ak_15",
                        "content": "bro but the given is 1-D array right! how can i use column?????? could you explain meee\\n"
                    },
                    {
                        "username": "user8166e",
                        "content": "Associated tag with this problem is Hash table. How Hash table feet\\'s in the solution ?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "I, like I assume you did as well, did not implicitly use a Hash table.\\nbut what i think is happening \"under the hood\" is that the way you compare letter using math symbols is by having a hash table in the background that give \"a\" a smaller value then \"b\" and so on.\\nthis is just a guess so I look forward to be corrected!"
                    },
                    {
                        "username": "ayushp2021",
                        "content": "Why so many dislikes to this problem??"
                    },
                    {
                        "username": "TALLEC-Scott",
                        "content": "You may thinking Why this problem got so much dislikes .....\\uD83E\\uDDD0? Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151\\n\\nsource: [@Sachin](/sachinbaral02) "
                    },
                    {
                        "username": "mishra_anurag",
                        "content": "because they are noobs and cant reallt understand question"
                    },
                    {
                        "username": "mihir_adarsh",
                        "content": "Probably you won\\'t find this type of question in interviews. If you are new to programming, then you can solve this as a warm up question. "
                    },
                    {
                        "username": "BLOCKS",
                        "content": "Probably poor framing of the question."
                    }
                ]
            },
            {
                "id": 1739477,
                "content": [
                    {
                        "username": "Emoclaw",
                        "content": "we\\'re starting 2023 with an easy streak, i feel like we\\'re gonna get blasted with dp hards towards mid-end of Jan"
                    },
                    {
                        "username": "drewbie",
                        "content": "The calm before the storm"
                    },
                    {
                        "username": "ravi_kant_chauhan",
                        "content": "and still some of the programmers like me are not even getting the problem ..."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "most probably hard dp problems in mid-jan and our streak gonna break out \\uD83D\\uDE25"
                    },
                    {
                        "username": "kajal1801",
                        "content": "I got the same feeling \\uD83E\\uDEE5"
                    },
                    {
                        "username": "marcocane",
                        "content": "man i forgor the 1st"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "You may thinking Why this problem got so much dislikes .....🧐?  Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes.  You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Indeed, it was super terrible!\\nThanks for this comment."
                    },
                    {
                        "username": "ajedmh",
                        "content": "I don\\'t understand why in the examples \"cba\" is considered but \"zyx\" isn\\'t. The problem seems to be just in the first example but it\\'s not allowing me to pass."
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I had the same thoughts, but it is columns, not rows. \\nFor example, \\n\\ncba\\ndaf\\nghi\\n\\ncba isn\\'t being considered, the columns that are considered are \"c, d, g\", \"b, a, h\", and \"a, f, i\". Since the middle row (b, a, h), is the only one that isn\\'t sorted, we return 1. If there was a column that spelled \"cba\", it wouldn\\'t be considered as sorted lexographically."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order, [cba] -> c b a are the rows"
                    },
                    {
                        "username": "esint2030",
                        "content": "I really don\\'t get why people are saying this problem is so hard to understand. I read the description and it only took me 2 minutes to understand it. Are people\\'s comprehension skills really that low or are people just giving up if they can\\'t understand a problem in less than 5 seconds?"
                    },
                    {
                        "username": "Finesse",
                        "content": "2 minutes? It took me 5 seconds (including finding a solution)"
                    },
                    {
                        "username": "calm27",
                        "content": "frankly, it is not that obvious. so, don\\'t be like that, it is fine to complain. people complain, relax and refine the scope. "
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "codedrian",
                        "content": "[@pieceofpie](/pieceofpie) i agree\\n"
                    },
                    {
                        "username": "Bobolov",
                        "content": "sure\\n"
                    },
                    {
                        "username": "larrasket",
                        "content": "No it\\'s obvious, you are a genius and most people have low IQ than yours. "
                    },
                    {
                        "username": "pieceofpie",
                        "content": "I don\\'t think the problem is hard to understand. The problem is that the problem is very badly formulated, which can make some people not fully understand the problem."
                    },
                    {
                        "username": "chornox",
                        "content": "The problem constraints just need a small change. \\n\\n `for any i strs[i].length == m` \\n\\nAll strings are equal"
                    },
                    {
                        "username": "Fabio_Trucco",
                        "content": "Entered this section looking for this kind of confirmation. Thx"
                    },
                    {
                        "username": "chornox",
                        "content": "[@_BREEZE_](/_BREEZE_) yes that\\'s correct. I was referring to the last section. I usually just glance at it to verify these details. "
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "That is written in the problem statement \\n`You are given an array of n strings strs, all of the same length.`"
                    },
                    {
                        "username": "Jugni",
                        "content": "What is this?? \\n1. columns 0 (\\'a\\', \\'b\\', \\'c\\') and 2 (\\'c\\', \\'e\\', \\'e\\') are sorted . Given array-> strs = [\"abc\", \"bce\", \"cae\"]. Where is \\'cee\\'?\\n2. Input: strs = [\"cba\",\"daf\",\"ghi\"].  Columns 0 and 2 are sorted\\n3. Input: strs = [\"zyx\",\"wvu\",\"tsr\"]. All 3 columns are not sorted\\n\\nTake a look at \"cba\". This group is sorted in descending order e.g \"abc\" and the description says that it is sorted (point 2) But in another example, it disregards the above example; \"zyx\" -> \"xyz\" (backwards). Can someone explain? "
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) got it\\n"
                    },
                    {
                        "username": "aka773",
                        "content": "https://blog.csdn.net/qq_38959715/article/details/85299151\\ngo here"
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) In input 3 what should be the output? "
                    },
                    {
                        "username": "arns",
                        "content": "it is being seen column wise not row-wise"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you'll see [`c`,`e`,`e`]. This array is sorted in ascending order."
                    },
                    {
                        "username": "emli",
                        "content": "It\\'s easy with but with bad statement"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Exactly, but easy to understand with the Sample Cases provided."
                    },
                    {
                        "username": "Knight-03",
                        "content": "There is nothing to dislike this question \\ntake a `pen and paper write down the condition` they\\'ve given \\nit will be `very clear` that whats the `question saying`\\n\\nyou just need to `compare column elements ` \\nrun two for loops ............\\n--->`one from 0 to numbers of columns `\\n---> `inner loops from 1 to number of rows` \\ncompare `str[j][i] < str[j-1][i]` if true count++; and break that loop \\n`return that count`\\n\\neasy pizzy "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the different strings in the array given. Other loop to iterate across the string i.e., to move across an individual element of the array. "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the elements of the array. 1st row is 1st string, 2nd row is 2nd string and so on. Other array we use to iterate across the string character-wise. "
                    },
                    {
                        "username": "itsyaboiimoulee",
                        "content": "[@Ak_15](/Ak_15)  in the given string \\n[\"abc\",\"bce\",\"cae\"]\\n   |         |        |   \\n  1        2       3\\nso , 1=> strs[j][i] and  strs[1][0] both are same. its not a entire string. \\n"
                    },
                    {
                        "username": "Knight-03",
                        "content": "[@Ak_15](/Ak_15) in array 0th element is the whole string so you can access it by just strs[i][j] "
                    },
                    {
                        "username": "Ak_15",
                        "content": "bro but the given is 1-D array right! how can i use column?????? could you explain meee\\n"
                    },
                    {
                        "username": "user8166e",
                        "content": "Associated tag with this problem is Hash table. How Hash table feet\\'s in the solution ?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "I, like I assume you did as well, did not implicitly use a Hash table.\\nbut what i think is happening \"under the hood\" is that the way you compare letter using math symbols is by having a hash table in the background that give \"a\" a smaller value then \"b\" and so on.\\nthis is just a guess so I look forward to be corrected!"
                    },
                    {
                        "username": "ayushp2021",
                        "content": "Why so many dislikes to this problem??"
                    },
                    {
                        "username": "TALLEC-Scott",
                        "content": "You may thinking Why this problem got so much dislikes .....\\uD83E\\uDDD0? Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151\\n\\nsource: [@Sachin](/sachinbaral02) "
                    },
                    {
                        "username": "mishra_anurag",
                        "content": "because they are noobs and cant reallt understand question"
                    },
                    {
                        "username": "mihir_adarsh",
                        "content": "Probably you won\\'t find this type of question in interviews. If you are new to programming, then you can solve this as a warm up question. "
                    },
                    {
                        "username": "BLOCKS",
                        "content": "Probably poor framing of the question."
                    }
                ]
            },
            {
                "id": 1565362,
                "content": [
                    {
                        "username": "Emoclaw",
                        "content": "we\\'re starting 2023 with an easy streak, i feel like we\\'re gonna get blasted with dp hards towards mid-end of Jan"
                    },
                    {
                        "username": "drewbie",
                        "content": "The calm before the storm"
                    },
                    {
                        "username": "ravi_kant_chauhan",
                        "content": "and still some of the programmers like me are not even getting the problem ..."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "most probably hard dp problems in mid-jan and our streak gonna break out \\uD83D\\uDE25"
                    },
                    {
                        "username": "kajal1801",
                        "content": "I got the same feeling \\uD83E\\uDEE5"
                    },
                    {
                        "username": "marcocane",
                        "content": "man i forgor the 1st"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "You may thinking Why this problem got so much dislikes .....🧐?  Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes.  You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Indeed, it was super terrible!\\nThanks for this comment."
                    },
                    {
                        "username": "ajedmh",
                        "content": "I don\\'t understand why in the examples \"cba\" is considered but \"zyx\" isn\\'t. The problem seems to be just in the first example but it\\'s not allowing me to pass."
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I had the same thoughts, but it is columns, not rows. \\nFor example, \\n\\ncba\\ndaf\\nghi\\n\\ncba isn\\'t being considered, the columns that are considered are \"c, d, g\", \"b, a, h\", and \"a, f, i\". Since the middle row (b, a, h), is the only one that isn\\'t sorted, we return 1. If there was a column that spelled \"cba\", it wouldn\\'t be considered as sorted lexographically."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order, [cba] -> c b a are the rows"
                    },
                    {
                        "username": "esint2030",
                        "content": "I really don\\'t get why people are saying this problem is so hard to understand. I read the description and it only took me 2 minutes to understand it. Are people\\'s comprehension skills really that low or are people just giving up if they can\\'t understand a problem in less than 5 seconds?"
                    },
                    {
                        "username": "Finesse",
                        "content": "2 minutes? It took me 5 seconds (including finding a solution)"
                    },
                    {
                        "username": "calm27",
                        "content": "frankly, it is not that obvious. so, don\\'t be like that, it is fine to complain. people complain, relax and refine the scope. "
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "codedrian",
                        "content": "[@pieceofpie](/pieceofpie) i agree\\n"
                    },
                    {
                        "username": "Bobolov",
                        "content": "sure\\n"
                    },
                    {
                        "username": "larrasket",
                        "content": "No it\\'s obvious, you are a genius and most people have low IQ than yours. "
                    },
                    {
                        "username": "pieceofpie",
                        "content": "I don\\'t think the problem is hard to understand. The problem is that the problem is very badly formulated, which can make some people not fully understand the problem."
                    },
                    {
                        "username": "chornox",
                        "content": "The problem constraints just need a small change. \\n\\n `for any i strs[i].length == m` \\n\\nAll strings are equal"
                    },
                    {
                        "username": "Fabio_Trucco",
                        "content": "Entered this section looking for this kind of confirmation. Thx"
                    },
                    {
                        "username": "chornox",
                        "content": "[@_BREEZE_](/_BREEZE_) yes that\\'s correct. I was referring to the last section. I usually just glance at it to verify these details. "
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "That is written in the problem statement \\n`You are given an array of n strings strs, all of the same length.`"
                    },
                    {
                        "username": "Jugni",
                        "content": "What is this?? \\n1. columns 0 (\\'a\\', \\'b\\', \\'c\\') and 2 (\\'c\\', \\'e\\', \\'e\\') are sorted . Given array-> strs = [\"abc\", \"bce\", \"cae\"]. Where is \\'cee\\'?\\n2. Input: strs = [\"cba\",\"daf\",\"ghi\"].  Columns 0 and 2 are sorted\\n3. Input: strs = [\"zyx\",\"wvu\",\"tsr\"]. All 3 columns are not sorted\\n\\nTake a look at \"cba\". This group is sorted in descending order e.g \"abc\" and the description says that it is sorted (point 2) But in another example, it disregards the above example; \"zyx\" -> \"xyz\" (backwards). Can someone explain? "
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) got it\\n"
                    },
                    {
                        "username": "aka773",
                        "content": "https://blog.csdn.net/qq_38959715/article/details/85299151\\ngo here"
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) In input 3 what should be the output? "
                    },
                    {
                        "username": "arns",
                        "content": "it is being seen column wise not row-wise"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you'll see [`c`,`e`,`e`]. This array is sorted in ascending order."
                    },
                    {
                        "username": "emli",
                        "content": "It\\'s easy with but with bad statement"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Exactly, but easy to understand with the Sample Cases provided."
                    },
                    {
                        "username": "Knight-03",
                        "content": "There is nothing to dislike this question \\ntake a `pen and paper write down the condition` they\\'ve given \\nit will be `very clear` that whats the `question saying`\\n\\nyou just need to `compare column elements ` \\nrun two for loops ............\\n--->`one from 0 to numbers of columns `\\n---> `inner loops from 1 to number of rows` \\ncompare `str[j][i] < str[j-1][i]` if true count++; and break that loop \\n`return that count`\\n\\neasy pizzy "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the different strings in the array given. Other loop to iterate across the string i.e., to move across an individual element of the array. "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the elements of the array. 1st row is 1st string, 2nd row is 2nd string and so on. Other array we use to iterate across the string character-wise. "
                    },
                    {
                        "username": "itsyaboiimoulee",
                        "content": "[@Ak_15](/Ak_15)  in the given string \\n[\"abc\",\"bce\",\"cae\"]\\n   |         |        |   \\n  1        2       3\\nso , 1=> strs[j][i] and  strs[1][0] both are same. its not a entire string. \\n"
                    },
                    {
                        "username": "Knight-03",
                        "content": "[@Ak_15](/Ak_15) in array 0th element is the whole string so you can access it by just strs[i][j] "
                    },
                    {
                        "username": "Ak_15",
                        "content": "bro but the given is 1-D array right! how can i use column?????? could you explain meee\\n"
                    },
                    {
                        "username": "user8166e",
                        "content": "Associated tag with this problem is Hash table. How Hash table feet\\'s in the solution ?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "I, like I assume you did as well, did not implicitly use a Hash table.\\nbut what i think is happening \"under the hood\" is that the way you compare letter using math symbols is by having a hash table in the background that give \"a\" a smaller value then \"b\" and so on.\\nthis is just a guess so I look forward to be corrected!"
                    },
                    {
                        "username": "ayushp2021",
                        "content": "Why so many dislikes to this problem??"
                    },
                    {
                        "username": "TALLEC-Scott",
                        "content": "You may thinking Why this problem got so much dislikes .....\\uD83E\\uDDD0? Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151\\n\\nsource: [@Sachin](/sachinbaral02) "
                    },
                    {
                        "username": "mishra_anurag",
                        "content": "because they are noobs and cant reallt understand question"
                    },
                    {
                        "username": "mihir_adarsh",
                        "content": "Probably you won\\'t find this type of question in interviews. If you are new to programming, then you can solve this as a warm up question. "
                    },
                    {
                        "username": "BLOCKS",
                        "content": "Probably poor framing of the question."
                    }
                ]
            },
            {
                "id": 1739160,
                "content": [
                    {
                        "username": "Emoclaw",
                        "content": "we\\'re starting 2023 with an easy streak, i feel like we\\'re gonna get blasted with dp hards towards mid-end of Jan"
                    },
                    {
                        "username": "drewbie",
                        "content": "The calm before the storm"
                    },
                    {
                        "username": "ravi_kant_chauhan",
                        "content": "and still some of the programmers like me are not even getting the problem ..."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "most probably hard dp problems in mid-jan and our streak gonna break out \\uD83D\\uDE25"
                    },
                    {
                        "username": "kajal1801",
                        "content": "I got the same feeling \\uD83E\\uDEE5"
                    },
                    {
                        "username": "marcocane",
                        "content": "man i forgor the 1st"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "You may thinking Why this problem got so much dislikes .....🧐?  Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes.  You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Indeed, it was super terrible!\\nThanks for this comment."
                    },
                    {
                        "username": "ajedmh",
                        "content": "I don\\'t understand why in the examples \"cba\" is considered but \"zyx\" isn\\'t. The problem seems to be just in the first example but it\\'s not allowing me to pass."
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I had the same thoughts, but it is columns, not rows. \\nFor example, \\n\\ncba\\ndaf\\nghi\\n\\ncba isn\\'t being considered, the columns that are considered are \"c, d, g\", \"b, a, h\", and \"a, f, i\". Since the middle row (b, a, h), is the only one that isn\\'t sorted, we return 1. If there was a column that spelled \"cba\", it wouldn\\'t be considered as sorted lexographically."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order, [cba] -> c b a are the rows"
                    },
                    {
                        "username": "esint2030",
                        "content": "I really don\\'t get why people are saying this problem is so hard to understand. I read the description and it only took me 2 minutes to understand it. Are people\\'s comprehension skills really that low or are people just giving up if they can\\'t understand a problem in less than 5 seconds?"
                    },
                    {
                        "username": "Finesse",
                        "content": "2 minutes? It took me 5 seconds (including finding a solution)"
                    },
                    {
                        "username": "calm27",
                        "content": "frankly, it is not that obvious. so, don\\'t be like that, it is fine to complain. people complain, relax and refine the scope. "
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "codedrian",
                        "content": "[@pieceofpie](/pieceofpie) i agree\\n"
                    },
                    {
                        "username": "Bobolov",
                        "content": "sure\\n"
                    },
                    {
                        "username": "larrasket",
                        "content": "No it\\'s obvious, you are a genius and most people have low IQ than yours. "
                    },
                    {
                        "username": "pieceofpie",
                        "content": "I don\\'t think the problem is hard to understand. The problem is that the problem is very badly formulated, which can make some people not fully understand the problem."
                    },
                    {
                        "username": "chornox",
                        "content": "The problem constraints just need a small change. \\n\\n `for any i strs[i].length == m` \\n\\nAll strings are equal"
                    },
                    {
                        "username": "Fabio_Trucco",
                        "content": "Entered this section looking for this kind of confirmation. Thx"
                    },
                    {
                        "username": "chornox",
                        "content": "[@_BREEZE_](/_BREEZE_) yes that\\'s correct. I was referring to the last section. I usually just glance at it to verify these details. "
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "That is written in the problem statement \\n`You are given an array of n strings strs, all of the same length.`"
                    },
                    {
                        "username": "Jugni",
                        "content": "What is this?? \\n1. columns 0 (\\'a\\', \\'b\\', \\'c\\') and 2 (\\'c\\', \\'e\\', \\'e\\') are sorted . Given array-> strs = [\"abc\", \"bce\", \"cae\"]. Where is \\'cee\\'?\\n2. Input: strs = [\"cba\",\"daf\",\"ghi\"].  Columns 0 and 2 are sorted\\n3. Input: strs = [\"zyx\",\"wvu\",\"tsr\"]. All 3 columns are not sorted\\n\\nTake a look at \"cba\". This group is sorted in descending order e.g \"abc\" and the description says that it is sorted (point 2) But in another example, it disregards the above example; \"zyx\" -> \"xyz\" (backwards). Can someone explain? "
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) got it\\n"
                    },
                    {
                        "username": "aka773",
                        "content": "https://blog.csdn.net/qq_38959715/article/details/85299151\\ngo here"
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) In input 3 what should be the output? "
                    },
                    {
                        "username": "arns",
                        "content": "it is being seen column wise not row-wise"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you'll see [`c`,`e`,`e`]. This array is sorted in ascending order."
                    },
                    {
                        "username": "emli",
                        "content": "It\\'s easy with but with bad statement"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Exactly, but easy to understand with the Sample Cases provided."
                    },
                    {
                        "username": "Knight-03",
                        "content": "There is nothing to dislike this question \\ntake a `pen and paper write down the condition` they\\'ve given \\nit will be `very clear` that whats the `question saying`\\n\\nyou just need to `compare column elements ` \\nrun two for loops ............\\n--->`one from 0 to numbers of columns `\\n---> `inner loops from 1 to number of rows` \\ncompare `str[j][i] < str[j-1][i]` if true count++; and break that loop \\n`return that count`\\n\\neasy pizzy "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the different strings in the array given. Other loop to iterate across the string i.e., to move across an individual element of the array. "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the elements of the array. 1st row is 1st string, 2nd row is 2nd string and so on. Other array we use to iterate across the string character-wise. "
                    },
                    {
                        "username": "itsyaboiimoulee",
                        "content": "[@Ak_15](/Ak_15)  in the given string \\n[\"abc\",\"bce\",\"cae\"]\\n   |         |        |   \\n  1        2       3\\nso , 1=> strs[j][i] and  strs[1][0] both are same. its not a entire string. \\n"
                    },
                    {
                        "username": "Knight-03",
                        "content": "[@Ak_15](/Ak_15) in array 0th element is the whole string so you can access it by just strs[i][j] "
                    },
                    {
                        "username": "Ak_15",
                        "content": "bro but the given is 1-D array right! how can i use column?????? could you explain meee\\n"
                    },
                    {
                        "username": "user8166e",
                        "content": "Associated tag with this problem is Hash table. How Hash table feet\\'s in the solution ?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "I, like I assume you did as well, did not implicitly use a Hash table.\\nbut what i think is happening \"under the hood\" is that the way you compare letter using math symbols is by having a hash table in the background that give \"a\" a smaller value then \"b\" and so on.\\nthis is just a guess so I look forward to be corrected!"
                    },
                    {
                        "username": "ayushp2021",
                        "content": "Why so many dislikes to this problem??"
                    },
                    {
                        "username": "TALLEC-Scott",
                        "content": "You may thinking Why this problem got so much dislikes .....\\uD83E\\uDDD0? Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151\\n\\nsource: [@Sachin](/sachinbaral02) "
                    },
                    {
                        "username": "mishra_anurag",
                        "content": "because they are noobs and cant reallt understand question"
                    },
                    {
                        "username": "mihir_adarsh",
                        "content": "Probably you won\\'t find this type of question in interviews. If you are new to programming, then you can solve this as a warm up question. "
                    },
                    {
                        "username": "BLOCKS",
                        "content": "Probably poor framing of the question."
                    }
                ]
            },
            {
                "id": 1738974,
                "content": [
                    {
                        "username": "Emoclaw",
                        "content": "we\\'re starting 2023 with an easy streak, i feel like we\\'re gonna get blasted with dp hards towards mid-end of Jan"
                    },
                    {
                        "username": "drewbie",
                        "content": "The calm before the storm"
                    },
                    {
                        "username": "ravi_kant_chauhan",
                        "content": "and still some of the programmers like me are not even getting the problem ..."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "most probably hard dp problems in mid-jan and our streak gonna break out \\uD83D\\uDE25"
                    },
                    {
                        "username": "kajal1801",
                        "content": "I got the same feeling \\uD83E\\uDEE5"
                    },
                    {
                        "username": "marcocane",
                        "content": "man i forgor the 1st"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "You may thinking Why this problem got so much dislikes .....🧐?  Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes.  You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Indeed, it was super terrible!\\nThanks for this comment."
                    },
                    {
                        "username": "ajedmh",
                        "content": "I don\\'t understand why in the examples \"cba\" is considered but \"zyx\" isn\\'t. The problem seems to be just in the first example but it\\'s not allowing me to pass."
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I had the same thoughts, but it is columns, not rows. \\nFor example, \\n\\ncba\\ndaf\\nghi\\n\\ncba isn\\'t being considered, the columns that are considered are \"c, d, g\", \"b, a, h\", and \"a, f, i\". Since the middle row (b, a, h), is the only one that isn\\'t sorted, we return 1. If there was a column that spelled \"cba\", it wouldn\\'t be considered as sorted lexographically."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order, [cba] -> c b a are the rows"
                    },
                    {
                        "username": "esint2030",
                        "content": "I really don\\'t get why people are saying this problem is so hard to understand. I read the description and it only took me 2 minutes to understand it. Are people\\'s comprehension skills really that low or are people just giving up if they can\\'t understand a problem in less than 5 seconds?"
                    },
                    {
                        "username": "Finesse",
                        "content": "2 minutes? It took me 5 seconds (including finding a solution)"
                    },
                    {
                        "username": "calm27",
                        "content": "frankly, it is not that obvious. so, don\\'t be like that, it is fine to complain. people complain, relax and refine the scope. "
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "codedrian",
                        "content": "[@pieceofpie](/pieceofpie) i agree\\n"
                    },
                    {
                        "username": "Bobolov",
                        "content": "sure\\n"
                    },
                    {
                        "username": "larrasket",
                        "content": "No it\\'s obvious, you are a genius and most people have low IQ than yours. "
                    },
                    {
                        "username": "pieceofpie",
                        "content": "I don\\'t think the problem is hard to understand. The problem is that the problem is very badly formulated, which can make some people not fully understand the problem."
                    },
                    {
                        "username": "chornox",
                        "content": "The problem constraints just need a small change. \\n\\n `for any i strs[i].length == m` \\n\\nAll strings are equal"
                    },
                    {
                        "username": "Fabio_Trucco",
                        "content": "Entered this section looking for this kind of confirmation. Thx"
                    },
                    {
                        "username": "chornox",
                        "content": "[@_BREEZE_](/_BREEZE_) yes that\\'s correct. I was referring to the last section. I usually just glance at it to verify these details. "
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "That is written in the problem statement \\n`You are given an array of n strings strs, all of the same length.`"
                    },
                    {
                        "username": "Jugni",
                        "content": "What is this?? \\n1. columns 0 (\\'a\\', \\'b\\', \\'c\\') and 2 (\\'c\\', \\'e\\', \\'e\\') are sorted . Given array-> strs = [\"abc\", \"bce\", \"cae\"]. Where is \\'cee\\'?\\n2. Input: strs = [\"cba\",\"daf\",\"ghi\"].  Columns 0 and 2 are sorted\\n3. Input: strs = [\"zyx\",\"wvu\",\"tsr\"]. All 3 columns are not sorted\\n\\nTake a look at \"cba\". This group is sorted in descending order e.g \"abc\" and the description says that it is sorted (point 2) But in another example, it disregards the above example; \"zyx\" -> \"xyz\" (backwards). Can someone explain? "
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) got it\\n"
                    },
                    {
                        "username": "aka773",
                        "content": "https://blog.csdn.net/qq_38959715/article/details/85299151\\ngo here"
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) In input 3 what should be the output? "
                    },
                    {
                        "username": "arns",
                        "content": "it is being seen column wise not row-wise"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you'll see [`c`,`e`,`e`]. This array is sorted in ascending order."
                    },
                    {
                        "username": "emli",
                        "content": "It\\'s easy with but with bad statement"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Exactly, but easy to understand with the Sample Cases provided."
                    },
                    {
                        "username": "Knight-03",
                        "content": "There is nothing to dislike this question \\ntake a `pen and paper write down the condition` they\\'ve given \\nit will be `very clear` that whats the `question saying`\\n\\nyou just need to `compare column elements ` \\nrun two for loops ............\\n--->`one from 0 to numbers of columns `\\n---> `inner loops from 1 to number of rows` \\ncompare `str[j][i] < str[j-1][i]` if true count++; and break that loop \\n`return that count`\\n\\neasy pizzy "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the different strings in the array given. Other loop to iterate across the string i.e., to move across an individual element of the array. "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the elements of the array. 1st row is 1st string, 2nd row is 2nd string and so on. Other array we use to iterate across the string character-wise. "
                    },
                    {
                        "username": "itsyaboiimoulee",
                        "content": "[@Ak_15](/Ak_15)  in the given string \\n[\"abc\",\"bce\",\"cae\"]\\n   |         |        |   \\n  1        2       3\\nso , 1=> strs[j][i] and  strs[1][0] both are same. its not a entire string. \\n"
                    },
                    {
                        "username": "Knight-03",
                        "content": "[@Ak_15](/Ak_15) in array 0th element is the whole string so you can access it by just strs[i][j] "
                    },
                    {
                        "username": "Ak_15",
                        "content": "bro but the given is 1-D array right! how can i use column?????? could you explain meee\\n"
                    },
                    {
                        "username": "user8166e",
                        "content": "Associated tag with this problem is Hash table. How Hash table feet\\'s in the solution ?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "I, like I assume you did as well, did not implicitly use a Hash table.\\nbut what i think is happening \"under the hood\" is that the way you compare letter using math symbols is by having a hash table in the background that give \"a\" a smaller value then \"b\" and so on.\\nthis is just a guess so I look forward to be corrected!"
                    },
                    {
                        "username": "ayushp2021",
                        "content": "Why so many dislikes to this problem??"
                    },
                    {
                        "username": "TALLEC-Scott",
                        "content": "You may thinking Why this problem got so much dislikes .....\\uD83E\\uDDD0? Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151\\n\\nsource: [@Sachin](/sachinbaral02) "
                    },
                    {
                        "username": "mishra_anurag",
                        "content": "because they are noobs and cant reallt understand question"
                    },
                    {
                        "username": "mihir_adarsh",
                        "content": "Probably you won\\'t find this type of question in interviews. If you are new to programming, then you can solve this as a warm up question. "
                    },
                    {
                        "username": "BLOCKS",
                        "content": "Probably poor framing of the question."
                    }
                ]
            },
            {
                "id": 1738982,
                "content": [
                    {
                        "username": "Emoclaw",
                        "content": "we\\'re starting 2023 with an easy streak, i feel like we\\'re gonna get blasted with dp hards towards mid-end of Jan"
                    },
                    {
                        "username": "drewbie",
                        "content": "The calm before the storm"
                    },
                    {
                        "username": "ravi_kant_chauhan",
                        "content": "and still some of the programmers like me are not even getting the problem ..."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "most probably hard dp problems in mid-jan and our streak gonna break out \\uD83D\\uDE25"
                    },
                    {
                        "username": "kajal1801",
                        "content": "I got the same feeling \\uD83E\\uDEE5"
                    },
                    {
                        "username": "marcocane",
                        "content": "man i forgor the 1st"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "You may thinking Why this problem got so much dislikes .....🧐?  Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes.  You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Indeed, it was super terrible!\\nThanks for this comment."
                    },
                    {
                        "username": "ajedmh",
                        "content": "I don\\'t understand why in the examples \"cba\" is considered but \"zyx\" isn\\'t. The problem seems to be just in the first example but it\\'s not allowing me to pass."
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I had the same thoughts, but it is columns, not rows. \\nFor example, \\n\\ncba\\ndaf\\nghi\\n\\ncba isn\\'t being considered, the columns that are considered are \"c, d, g\", \"b, a, h\", and \"a, f, i\". Since the middle row (b, a, h), is the only one that isn\\'t sorted, we return 1. If there was a column that spelled \"cba\", it wouldn\\'t be considered as sorted lexographically."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order, [cba] -> c b a are the rows"
                    },
                    {
                        "username": "esint2030",
                        "content": "I really don\\'t get why people are saying this problem is so hard to understand. I read the description and it only took me 2 minutes to understand it. Are people\\'s comprehension skills really that low or are people just giving up if they can\\'t understand a problem in less than 5 seconds?"
                    },
                    {
                        "username": "Finesse",
                        "content": "2 minutes? It took me 5 seconds (including finding a solution)"
                    },
                    {
                        "username": "calm27",
                        "content": "frankly, it is not that obvious. so, don\\'t be like that, it is fine to complain. people complain, relax and refine the scope. "
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "codedrian",
                        "content": "[@pieceofpie](/pieceofpie) i agree\\n"
                    },
                    {
                        "username": "Bobolov",
                        "content": "sure\\n"
                    },
                    {
                        "username": "larrasket",
                        "content": "No it\\'s obvious, you are a genius and most people have low IQ than yours. "
                    },
                    {
                        "username": "pieceofpie",
                        "content": "I don\\'t think the problem is hard to understand. The problem is that the problem is very badly formulated, which can make some people not fully understand the problem."
                    },
                    {
                        "username": "chornox",
                        "content": "The problem constraints just need a small change. \\n\\n `for any i strs[i].length == m` \\n\\nAll strings are equal"
                    },
                    {
                        "username": "Fabio_Trucco",
                        "content": "Entered this section looking for this kind of confirmation. Thx"
                    },
                    {
                        "username": "chornox",
                        "content": "[@_BREEZE_](/_BREEZE_) yes that\\'s correct. I was referring to the last section. I usually just glance at it to verify these details. "
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "That is written in the problem statement \\n`You are given an array of n strings strs, all of the same length.`"
                    },
                    {
                        "username": "Jugni",
                        "content": "What is this?? \\n1. columns 0 (\\'a\\', \\'b\\', \\'c\\') and 2 (\\'c\\', \\'e\\', \\'e\\') are sorted . Given array-> strs = [\"abc\", \"bce\", \"cae\"]. Where is \\'cee\\'?\\n2. Input: strs = [\"cba\",\"daf\",\"ghi\"].  Columns 0 and 2 are sorted\\n3. Input: strs = [\"zyx\",\"wvu\",\"tsr\"]. All 3 columns are not sorted\\n\\nTake a look at \"cba\". This group is sorted in descending order e.g \"abc\" and the description says that it is sorted (point 2) But in another example, it disregards the above example; \"zyx\" -> \"xyz\" (backwards). Can someone explain? "
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) got it\\n"
                    },
                    {
                        "username": "aka773",
                        "content": "https://blog.csdn.net/qq_38959715/article/details/85299151\\ngo here"
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) In input 3 what should be the output? "
                    },
                    {
                        "username": "arns",
                        "content": "it is being seen column wise not row-wise"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you'll see [`c`,`e`,`e`]. This array is sorted in ascending order."
                    },
                    {
                        "username": "emli",
                        "content": "It\\'s easy with but with bad statement"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Exactly, but easy to understand with the Sample Cases provided."
                    },
                    {
                        "username": "Knight-03",
                        "content": "There is nothing to dislike this question \\ntake a `pen and paper write down the condition` they\\'ve given \\nit will be `very clear` that whats the `question saying`\\n\\nyou just need to `compare column elements ` \\nrun two for loops ............\\n--->`one from 0 to numbers of columns `\\n---> `inner loops from 1 to number of rows` \\ncompare `str[j][i] < str[j-1][i]` if true count++; and break that loop \\n`return that count`\\n\\neasy pizzy "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the different strings in the array given. Other loop to iterate across the string i.e., to move across an individual element of the array. "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the elements of the array. 1st row is 1st string, 2nd row is 2nd string and so on. Other array we use to iterate across the string character-wise. "
                    },
                    {
                        "username": "itsyaboiimoulee",
                        "content": "[@Ak_15](/Ak_15)  in the given string \\n[\"abc\",\"bce\",\"cae\"]\\n   |         |        |   \\n  1        2       3\\nso , 1=> strs[j][i] and  strs[1][0] both are same. its not a entire string. \\n"
                    },
                    {
                        "username": "Knight-03",
                        "content": "[@Ak_15](/Ak_15) in array 0th element is the whole string so you can access it by just strs[i][j] "
                    },
                    {
                        "username": "Ak_15",
                        "content": "bro but the given is 1-D array right! how can i use column?????? could you explain meee\\n"
                    },
                    {
                        "username": "user8166e",
                        "content": "Associated tag with this problem is Hash table. How Hash table feet\\'s in the solution ?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "I, like I assume you did as well, did not implicitly use a Hash table.\\nbut what i think is happening \"under the hood\" is that the way you compare letter using math symbols is by having a hash table in the background that give \"a\" a smaller value then \"b\" and so on.\\nthis is just a guess so I look forward to be corrected!"
                    },
                    {
                        "username": "ayushp2021",
                        "content": "Why so many dislikes to this problem??"
                    },
                    {
                        "username": "TALLEC-Scott",
                        "content": "You may thinking Why this problem got so much dislikes .....\\uD83E\\uDDD0? Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151\\n\\nsource: [@Sachin](/sachinbaral02) "
                    },
                    {
                        "username": "mishra_anurag",
                        "content": "because they are noobs and cant reallt understand question"
                    },
                    {
                        "username": "mihir_adarsh",
                        "content": "Probably you won\\'t find this type of question in interviews. If you are new to programming, then you can solve this as a warm up question. "
                    },
                    {
                        "username": "BLOCKS",
                        "content": "Probably poor framing of the question."
                    }
                ]
            },
            {
                "id": 1738908,
                "content": [
                    {
                        "username": "Emoclaw",
                        "content": "we\\'re starting 2023 with an easy streak, i feel like we\\'re gonna get blasted with dp hards towards mid-end of Jan"
                    },
                    {
                        "username": "drewbie",
                        "content": "The calm before the storm"
                    },
                    {
                        "username": "ravi_kant_chauhan",
                        "content": "and still some of the programmers like me are not even getting the problem ..."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "most probably hard dp problems in mid-jan and our streak gonna break out \\uD83D\\uDE25"
                    },
                    {
                        "username": "kajal1801",
                        "content": "I got the same feeling \\uD83E\\uDEE5"
                    },
                    {
                        "username": "marcocane",
                        "content": "man i forgor the 1st"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "You may thinking Why this problem got so much dislikes .....🧐?  Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes.  You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Indeed, it was super terrible!\\nThanks for this comment."
                    },
                    {
                        "username": "ajedmh",
                        "content": "I don\\'t understand why in the examples \"cba\" is considered but \"zyx\" isn\\'t. The problem seems to be just in the first example but it\\'s not allowing me to pass."
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I had the same thoughts, but it is columns, not rows. \\nFor example, \\n\\ncba\\ndaf\\nghi\\n\\ncba isn\\'t being considered, the columns that are considered are \"c, d, g\", \"b, a, h\", and \"a, f, i\". Since the middle row (b, a, h), is the only one that isn\\'t sorted, we return 1. If there was a column that spelled \"cba\", it wouldn\\'t be considered as sorted lexographically."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order, [cba] -> c b a are the rows"
                    },
                    {
                        "username": "esint2030",
                        "content": "I really don\\'t get why people are saying this problem is so hard to understand. I read the description and it only took me 2 minutes to understand it. Are people\\'s comprehension skills really that low or are people just giving up if they can\\'t understand a problem in less than 5 seconds?"
                    },
                    {
                        "username": "Finesse",
                        "content": "2 minutes? It took me 5 seconds (including finding a solution)"
                    },
                    {
                        "username": "calm27",
                        "content": "frankly, it is not that obvious. so, don\\'t be like that, it is fine to complain. people complain, relax and refine the scope. "
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "codedrian",
                        "content": "[@pieceofpie](/pieceofpie) i agree\\n"
                    },
                    {
                        "username": "Bobolov",
                        "content": "sure\\n"
                    },
                    {
                        "username": "larrasket",
                        "content": "No it\\'s obvious, you are a genius and most people have low IQ than yours. "
                    },
                    {
                        "username": "pieceofpie",
                        "content": "I don\\'t think the problem is hard to understand. The problem is that the problem is very badly formulated, which can make some people not fully understand the problem."
                    },
                    {
                        "username": "chornox",
                        "content": "The problem constraints just need a small change. \\n\\n `for any i strs[i].length == m` \\n\\nAll strings are equal"
                    },
                    {
                        "username": "Fabio_Trucco",
                        "content": "Entered this section looking for this kind of confirmation. Thx"
                    },
                    {
                        "username": "chornox",
                        "content": "[@_BREEZE_](/_BREEZE_) yes that\\'s correct. I was referring to the last section. I usually just glance at it to verify these details. "
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "That is written in the problem statement \\n`You are given an array of n strings strs, all of the same length.`"
                    },
                    {
                        "username": "Jugni",
                        "content": "What is this?? \\n1. columns 0 (\\'a\\', \\'b\\', \\'c\\') and 2 (\\'c\\', \\'e\\', \\'e\\') are sorted . Given array-> strs = [\"abc\", \"bce\", \"cae\"]. Where is \\'cee\\'?\\n2. Input: strs = [\"cba\",\"daf\",\"ghi\"].  Columns 0 and 2 are sorted\\n3. Input: strs = [\"zyx\",\"wvu\",\"tsr\"]. All 3 columns are not sorted\\n\\nTake a look at \"cba\". This group is sorted in descending order e.g \"abc\" and the description says that it is sorted (point 2) But in another example, it disregards the above example; \"zyx\" -> \"xyz\" (backwards). Can someone explain? "
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) got it\\n"
                    },
                    {
                        "username": "aka773",
                        "content": "https://blog.csdn.net/qq_38959715/article/details/85299151\\ngo here"
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) In input 3 what should be the output? "
                    },
                    {
                        "username": "arns",
                        "content": "it is being seen column wise not row-wise"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you'll see [`c`,`e`,`e`]. This array is sorted in ascending order."
                    },
                    {
                        "username": "emli",
                        "content": "It\\'s easy with but with bad statement"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Exactly, but easy to understand with the Sample Cases provided."
                    },
                    {
                        "username": "Knight-03",
                        "content": "There is nothing to dislike this question \\ntake a `pen and paper write down the condition` they\\'ve given \\nit will be `very clear` that whats the `question saying`\\n\\nyou just need to `compare column elements ` \\nrun two for loops ............\\n--->`one from 0 to numbers of columns `\\n---> `inner loops from 1 to number of rows` \\ncompare `str[j][i] < str[j-1][i]` if true count++; and break that loop \\n`return that count`\\n\\neasy pizzy "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the different strings in the array given. Other loop to iterate across the string i.e., to move across an individual element of the array. "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the elements of the array. 1st row is 1st string, 2nd row is 2nd string and so on. Other array we use to iterate across the string character-wise. "
                    },
                    {
                        "username": "itsyaboiimoulee",
                        "content": "[@Ak_15](/Ak_15)  in the given string \\n[\"abc\",\"bce\",\"cae\"]\\n   |         |        |   \\n  1        2       3\\nso , 1=> strs[j][i] and  strs[1][0] both are same. its not a entire string. \\n"
                    },
                    {
                        "username": "Knight-03",
                        "content": "[@Ak_15](/Ak_15) in array 0th element is the whole string so you can access it by just strs[i][j] "
                    },
                    {
                        "username": "Ak_15",
                        "content": "bro but the given is 1-D array right! how can i use column?????? could you explain meee\\n"
                    },
                    {
                        "username": "user8166e",
                        "content": "Associated tag with this problem is Hash table. How Hash table feet\\'s in the solution ?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "I, like I assume you did as well, did not implicitly use a Hash table.\\nbut what i think is happening \"under the hood\" is that the way you compare letter using math symbols is by having a hash table in the background that give \"a\" a smaller value then \"b\" and so on.\\nthis is just a guess so I look forward to be corrected!"
                    },
                    {
                        "username": "ayushp2021",
                        "content": "Why so many dislikes to this problem??"
                    },
                    {
                        "username": "TALLEC-Scott",
                        "content": "You may thinking Why this problem got so much dislikes .....\\uD83E\\uDDD0? Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151\\n\\nsource: [@Sachin](/sachinbaral02) "
                    },
                    {
                        "username": "mishra_anurag",
                        "content": "because they are noobs and cant reallt understand question"
                    },
                    {
                        "username": "mihir_adarsh",
                        "content": "Probably you won\\'t find this type of question in interviews. If you are new to programming, then you can solve this as a warm up question. "
                    },
                    {
                        "username": "BLOCKS",
                        "content": "Probably poor framing of the question."
                    }
                ]
            },
            {
                "id": 1739329,
                "content": [
                    {
                        "username": "Emoclaw",
                        "content": "we\\'re starting 2023 with an easy streak, i feel like we\\'re gonna get blasted with dp hards towards mid-end of Jan"
                    },
                    {
                        "username": "drewbie",
                        "content": "The calm before the storm"
                    },
                    {
                        "username": "ravi_kant_chauhan",
                        "content": "and still some of the programmers like me are not even getting the problem ..."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "most probably hard dp problems in mid-jan and our streak gonna break out \\uD83D\\uDE25"
                    },
                    {
                        "username": "kajal1801",
                        "content": "I got the same feeling \\uD83E\\uDEE5"
                    },
                    {
                        "username": "marcocane",
                        "content": "man i forgor the 1st"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "You may thinking Why this problem got so much dislikes .....🧐?  Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes.  You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Indeed, it was super terrible!\\nThanks for this comment."
                    },
                    {
                        "username": "ajedmh",
                        "content": "I don\\'t understand why in the examples \"cba\" is considered but \"zyx\" isn\\'t. The problem seems to be just in the first example but it\\'s not allowing me to pass."
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I had the same thoughts, but it is columns, not rows. \\nFor example, \\n\\ncba\\ndaf\\nghi\\n\\ncba isn\\'t being considered, the columns that are considered are \"c, d, g\", \"b, a, h\", and \"a, f, i\". Since the middle row (b, a, h), is the only one that isn\\'t sorted, we return 1. If there was a column that spelled \"cba\", it wouldn\\'t be considered as sorted lexographically."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order, [cba] -> c b a are the rows"
                    },
                    {
                        "username": "esint2030",
                        "content": "I really don\\'t get why people are saying this problem is so hard to understand. I read the description and it only took me 2 minutes to understand it. Are people\\'s comprehension skills really that low or are people just giving up if they can\\'t understand a problem in less than 5 seconds?"
                    },
                    {
                        "username": "Finesse",
                        "content": "2 minutes? It took me 5 seconds (including finding a solution)"
                    },
                    {
                        "username": "calm27",
                        "content": "frankly, it is not that obvious. so, don\\'t be like that, it is fine to complain. people complain, relax and refine the scope. "
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "codedrian",
                        "content": "[@pieceofpie](/pieceofpie) i agree\\n"
                    },
                    {
                        "username": "Bobolov",
                        "content": "sure\\n"
                    },
                    {
                        "username": "larrasket",
                        "content": "No it\\'s obvious, you are a genius and most people have low IQ than yours. "
                    },
                    {
                        "username": "pieceofpie",
                        "content": "I don\\'t think the problem is hard to understand. The problem is that the problem is very badly formulated, which can make some people not fully understand the problem."
                    },
                    {
                        "username": "chornox",
                        "content": "The problem constraints just need a small change. \\n\\n `for any i strs[i].length == m` \\n\\nAll strings are equal"
                    },
                    {
                        "username": "Fabio_Trucco",
                        "content": "Entered this section looking for this kind of confirmation. Thx"
                    },
                    {
                        "username": "chornox",
                        "content": "[@_BREEZE_](/_BREEZE_) yes that\\'s correct. I was referring to the last section. I usually just glance at it to verify these details. "
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "That is written in the problem statement \\n`You are given an array of n strings strs, all of the same length.`"
                    },
                    {
                        "username": "Jugni",
                        "content": "What is this?? \\n1. columns 0 (\\'a\\', \\'b\\', \\'c\\') and 2 (\\'c\\', \\'e\\', \\'e\\') are sorted . Given array-> strs = [\"abc\", \"bce\", \"cae\"]. Where is \\'cee\\'?\\n2. Input: strs = [\"cba\",\"daf\",\"ghi\"].  Columns 0 and 2 are sorted\\n3. Input: strs = [\"zyx\",\"wvu\",\"tsr\"]. All 3 columns are not sorted\\n\\nTake a look at \"cba\". This group is sorted in descending order e.g \"abc\" and the description says that it is sorted (point 2) But in another example, it disregards the above example; \"zyx\" -> \"xyz\" (backwards). Can someone explain? "
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) got it\\n"
                    },
                    {
                        "username": "aka773",
                        "content": "https://blog.csdn.net/qq_38959715/article/details/85299151\\ngo here"
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) In input 3 what should be the output? "
                    },
                    {
                        "username": "arns",
                        "content": "it is being seen column wise not row-wise"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you'll see [`c`,`e`,`e`]. This array is sorted in ascending order."
                    },
                    {
                        "username": "emli",
                        "content": "It\\'s easy with but with bad statement"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Exactly, but easy to understand with the Sample Cases provided."
                    },
                    {
                        "username": "Knight-03",
                        "content": "There is nothing to dislike this question \\ntake a `pen and paper write down the condition` they\\'ve given \\nit will be `very clear` that whats the `question saying`\\n\\nyou just need to `compare column elements ` \\nrun two for loops ............\\n--->`one from 0 to numbers of columns `\\n---> `inner loops from 1 to number of rows` \\ncompare `str[j][i] < str[j-1][i]` if true count++; and break that loop \\n`return that count`\\n\\neasy pizzy "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the different strings in the array given. Other loop to iterate across the string i.e., to move across an individual element of the array. "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the elements of the array. 1st row is 1st string, 2nd row is 2nd string and so on. Other array we use to iterate across the string character-wise. "
                    },
                    {
                        "username": "itsyaboiimoulee",
                        "content": "[@Ak_15](/Ak_15)  in the given string \\n[\"abc\",\"bce\",\"cae\"]\\n   |         |        |   \\n  1        2       3\\nso , 1=> strs[j][i] and  strs[1][0] both are same. its not a entire string. \\n"
                    },
                    {
                        "username": "Knight-03",
                        "content": "[@Ak_15](/Ak_15) in array 0th element is the whole string so you can access it by just strs[i][j] "
                    },
                    {
                        "username": "Ak_15",
                        "content": "bro but the given is 1-D array right! how can i use column?????? could you explain meee\\n"
                    },
                    {
                        "username": "user8166e",
                        "content": "Associated tag with this problem is Hash table. How Hash table feet\\'s in the solution ?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "I, like I assume you did as well, did not implicitly use a Hash table.\\nbut what i think is happening \"under the hood\" is that the way you compare letter using math symbols is by having a hash table in the background that give \"a\" a smaller value then \"b\" and so on.\\nthis is just a guess so I look forward to be corrected!"
                    },
                    {
                        "username": "ayushp2021",
                        "content": "Why so many dislikes to this problem??"
                    },
                    {
                        "username": "TALLEC-Scott",
                        "content": "You may thinking Why this problem got so much dislikes .....\\uD83E\\uDDD0? Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151\\n\\nsource: [@Sachin](/sachinbaral02) "
                    },
                    {
                        "username": "mishra_anurag",
                        "content": "because they are noobs and cant reallt understand question"
                    },
                    {
                        "username": "mihir_adarsh",
                        "content": "Probably you won\\'t find this type of question in interviews. If you are new to programming, then you can solve this as a warm up question. "
                    },
                    {
                        "username": "BLOCKS",
                        "content": "Probably poor framing of the question."
                    }
                ]
            },
            {
                "id": 1739476,
                "content": [
                    {
                        "username": "Emoclaw",
                        "content": "we\\'re starting 2023 with an easy streak, i feel like we\\'re gonna get blasted with dp hards towards mid-end of Jan"
                    },
                    {
                        "username": "drewbie",
                        "content": "The calm before the storm"
                    },
                    {
                        "username": "ravi_kant_chauhan",
                        "content": "and still some of the programmers like me are not even getting the problem ..."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "most probably hard dp problems in mid-jan and our streak gonna break out \\uD83D\\uDE25"
                    },
                    {
                        "username": "kajal1801",
                        "content": "I got the same feeling \\uD83E\\uDEE5"
                    },
                    {
                        "username": "marcocane",
                        "content": "man i forgor the 1st"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "You may thinking Why this problem got so much dislikes .....🧐?  Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes.  You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Indeed, it was super terrible!\\nThanks for this comment."
                    },
                    {
                        "username": "ajedmh",
                        "content": "I don\\'t understand why in the examples \"cba\" is considered but \"zyx\" isn\\'t. The problem seems to be just in the first example but it\\'s not allowing me to pass."
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I had the same thoughts, but it is columns, not rows. \\nFor example, \\n\\ncba\\ndaf\\nghi\\n\\ncba isn\\'t being considered, the columns that are considered are \"c, d, g\", \"b, a, h\", and \"a, f, i\". Since the middle row (b, a, h), is the only one that isn\\'t sorted, we return 1. If there was a column that spelled \"cba\", it wouldn\\'t be considered as sorted lexographically."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order, [cba] -> c b a are the rows"
                    },
                    {
                        "username": "esint2030",
                        "content": "I really don\\'t get why people are saying this problem is so hard to understand. I read the description and it only took me 2 minutes to understand it. Are people\\'s comprehension skills really that low or are people just giving up if they can\\'t understand a problem in less than 5 seconds?"
                    },
                    {
                        "username": "Finesse",
                        "content": "2 minutes? It took me 5 seconds (including finding a solution)"
                    },
                    {
                        "username": "calm27",
                        "content": "frankly, it is not that obvious. so, don\\'t be like that, it is fine to complain. people complain, relax and refine the scope. "
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "codedrian",
                        "content": "[@pieceofpie](/pieceofpie) i agree\\n"
                    },
                    {
                        "username": "Bobolov",
                        "content": "sure\\n"
                    },
                    {
                        "username": "larrasket",
                        "content": "No it\\'s obvious, you are a genius and most people have low IQ than yours. "
                    },
                    {
                        "username": "pieceofpie",
                        "content": "I don\\'t think the problem is hard to understand. The problem is that the problem is very badly formulated, which can make some people not fully understand the problem."
                    },
                    {
                        "username": "chornox",
                        "content": "The problem constraints just need a small change. \\n\\n `for any i strs[i].length == m` \\n\\nAll strings are equal"
                    },
                    {
                        "username": "Fabio_Trucco",
                        "content": "Entered this section looking for this kind of confirmation. Thx"
                    },
                    {
                        "username": "chornox",
                        "content": "[@_BREEZE_](/_BREEZE_) yes that\\'s correct. I was referring to the last section. I usually just glance at it to verify these details. "
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "That is written in the problem statement \\n`You are given an array of n strings strs, all of the same length.`"
                    },
                    {
                        "username": "Jugni",
                        "content": "What is this?? \\n1. columns 0 (\\'a\\', \\'b\\', \\'c\\') and 2 (\\'c\\', \\'e\\', \\'e\\') are sorted . Given array-> strs = [\"abc\", \"bce\", \"cae\"]. Where is \\'cee\\'?\\n2. Input: strs = [\"cba\",\"daf\",\"ghi\"].  Columns 0 and 2 are sorted\\n3. Input: strs = [\"zyx\",\"wvu\",\"tsr\"]. All 3 columns are not sorted\\n\\nTake a look at \"cba\". This group is sorted in descending order e.g \"abc\" and the description says that it is sorted (point 2) But in another example, it disregards the above example; \"zyx\" -> \"xyz\" (backwards). Can someone explain? "
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) got it\\n"
                    },
                    {
                        "username": "aka773",
                        "content": "https://blog.csdn.net/qq_38959715/article/details/85299151\\ngo here"
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) In input 3 what should be the output? "
                    },
                    {
                        "username": "arns",
                        "content": "it is being seen column wise not row-wise"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you'll see [`c`,`e`,`e`]. This array is sorted in ascending order."
                    },
                    {
                        "username": "emli",
                        "content": "It\\'s easy with but with bad statement"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Exactly, but easy to understand with the Sample Cases provided."
                    },
                    {
                        "username": "Knight-03",
                        "content": "There is nothing to dislike this question \\ntake a `pen and paper write down the condition` they\\'ve given \\nit will be `very clear` that whats the `question saying`\\n\\nyou just need to `compare column elements ` \\nrun two for loops ............\\n--->`one from 0 to numbers of columns `\\n---> `inner loops from 1 to number of rows` \\ncompare `str[j][i] < str[j-1][i]` if true count++; and break that loop \\n`return that count`\\n\\neasy pizzy "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the different strings in the array given. Other loop to iterate across the string i.e., to move across an individual element of the array. "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the elements of the array. 1st row is 1st string, 2nd row is 2nd string and so on. Other array we use to iterate across the string character-wise. "
                    },
                    {
                        "username": "itsyaboiimoulee",
                        "content": "[@Ak_15](/Ak_15)  in the given string \\n[\"abc\",\"bce\",\"cae\"]\\n   |         |        |   \\n  1        2       3\\nso , 1=> strs[j][i] and  strs[1][0] both are same. its not a entire string. \\n"
                    },
                    {
                        "username": "Knight-03",
                        "content": "[@Ak_15](/Ak_15) in array 0th element is the whole string so you can access it by just strs[i][j] "
                    },
                    {
                        "username": "Ak_15",
                        "content": "bro but the given is 1-D array right! how can i use column?????? could you explain meee\\n"
                    },
                    {
                        "username": "user8166e",
                        "content": "Associated tag with this problem is Hash table. How Hash table feet\\'s in the solution ?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "I, like I assume you did as well, did not implicitly use a Hash table.\\nbut what i think is happening \"under the hood\" is that the way you compare letter using math symbols is by having a hash table in the background that give \"a\" a smaller value then \"b\" and so on.\\nthis is just a guess so I look forward to be corrected!"
                    },
                    {
                        "username": "ayushp2021",
                        "content": "Why so many dislikes to this problem??"
                    },
                    {
                        "username": "TALLEC-Scott",
                        "content": "You may thinking Why this problem got so much dislikes .....\\uD83E\\uDDD0? Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151\\n\\nsource: [@Sachin](/sachinbaral02) "
                    },
                    {
                        "username": "mishra_anurag",
                        "content": "because they are noobs and cant reallt understand question"
                    },
                    {
                        "username": "mihir_adarsh",
                        "content": "Probably you won\\'t find this type of question in interviews. If you are new to programming, then you can solve this as a warm up question. "
                    },
                    {
                        "username": "BLOCKS",
                        "content": "Probably poor framing of the question."
                    }
                ]
            },
            {
                "id": 1569669,
                "content": [
                    {
                        "username": "Emoclaw",
                        "content": "we\\'re starting 2023 with an easy streak, i feel like we\\'re gonna get blasted with dp hards towards mid-end of Jan"
                    },
                    {
                        "username": "drewbie",
                        "content": "The calm before the storm"
                    },
                    {
                        "username": "ravi_kant_chauhan",
                        "content": "and still some of the programmers like me are not even getting the problem ..."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "most probably hard dp problems in mid-jan and our streak gonna break out \\uD83D\\uDE25"
                    },
                    {
                        "username": "kajal1801",
                        "content": "I got the same feeling \\uD83E\\uDEE5"
                    },
                    {
                        "username": "marcocane",
                        "content": "man i forgor the 1st"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "You may thinking Why this problem got so much dislikes .....🧐?  Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes.  You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Indeed, it was super terrible!\\nThanks for this comment."
                    },
                    {
                        "username": "ajedmh",
                        "content": "I don\\'t understand why in the examples \"cba\" is considered but \"zyx\" isn\\'t. The problem seems to be just in the first example but it\\'s not allowing me to pass."
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I had the same thoughts, but it is columns, not rows. \\nFor example, \\n\\ncba\\ndaf\\nghi\\n\\ncba isn\\'t being considered, the columns that are considered are \"c, d, g\", \"b, a, h\", and \"a, f, i\". Since the middle row (b, a, h), is the only one that isn\\'t sorted, we return 1. If there was a column that spelled \"cba\", it wouldn\\'t be considered as sorted lexographically."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order, [cba] -> c b a are the rows"
                    },
                    {
                        "username": "esint2030",
                        "content": "I really don\\'t get why people are saying this problem is so hard to understand. I read the description and it only took me 2 minutes to understand it. Are people\\'s comprehension skills really that low or are people just giving up if they can\\'t understand a problem in less than 5 seconds?"
                    },
                    {
                        "username": "Finesse",
                        "content": "2 minutes? It took me 5 seconds (including finding a solution)"
                    },
                    {
                        "username": "calm27",
                        "content": "frankly, it is not that obvious. so, don\\'t be like that, it is fine to complain. people complain, relax and refine the scope. "
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "codedrian",
                        "content": "[@pieceofpie](/pieceofpie) i agree\\n"
                    },
                    {
                        "username": "Bobolov",
                        "content": "sure\\n"
                    },
                    {
                        "username": "larrasket",
                        "content": "No it\\'s obvious, you are a genius and most people have low IQ than yours. "
                    },
                    {
                        "username": "pieceofpie",
                        "content": "I don\\'t think the problem is hard to understand. The problem is that the problem is very badly formulated, which can make some people not fully understand the problem."
                    },
                    {
                        "username": "chornox",
                        "content": "The problem constraints just need a small change. \\n\\n `for any i strs[i].length == m` \\n\\nAll strings are equal"
                    },
                    {
                        "username": "Fabio_Trucco",
                        "content": "Entered this section looking for this kind of confirmation. Thx"
                    },
                    {
                        "username": "chornox",
                        "content": "[@_BREEZE_](/_BREEZE_) yes that\\'s correct. I was referring to the last section. I usually just glance at it to verify these details. "
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "That is written in the problem statement \\n`You are given an array of n strings strs, all of the same length.`"
                    },
                    {
                        "username": "Jugni",
                        "content": "What is this?? \\n1. columns 0 (\\'a\\', \\'b\\', \\'c\\') and 2 (\\'c\\', \\'e\\', \\'e\\') are sorted . Given array-> strs = [\"abc\", \"bce\", \"cae\"]. Where is \\'cee\\'?\\n2. Input: strs = [\"cba\",\"daf\",\"ghi\"].  Columns 0 and 2 are sorted\\n3. Input: strs = [\"zyx\",\"wvu\",\"tsr\"]. All 3 columns are not sorted\\n\\nTake a look at \"cba\". This group is sorted in descending order e.g \"abc\" and the description says that it is sorted (point 2) But in another example, it disregards the above example; \"zyx\" -> \"xyz\" (backwards). Can someone explain? "
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) got it\\n"
                    },
                    {
                        "username": "aka773",
                        "content": "https://blog.csdn.net/qq_38959715/article/details/85299151\\ngo here"
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) In input 3 what should be the output? "
                    },
                    {
                        "username": "arns",
                        "content": "it is being seen column wise not row-wise"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you'll see [`c`,`e`,`e`]. This array is sorted in ascending order."
                    },
                    {
                        "username": "emli",
                        "content": "It\\'s easy with but with bad statement"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Exactly, but easy to understand with the Sample Cases provided."
                    },
                    {
                        "username": "Knight-03",
                        "content": "There is nothing to dislike this question \\ntake a `pen and paper write down the condition` they\\'ve given \\nit will be `very clear` that whats the `question saying`\\n\\nyou just need to `compare column elements ` \\nrun two for loops ............\\n--->`one from 0 to numbers of columns `\\n---> `inner loops from 1 to number of rows` \\ncompare `str[j][i] < str[j-1][i]` if true count++; and break that loop \\n`return that count`\\n\\neasy pizzy "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the different strings in the array given. Other loop to iterate across the string i.e., to move across an individual element of the array. "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the elements of the array. 1st row is 1st string, 2nd row is 2nd string and so on. Other array we use to iterate across the string character-wise. "
                    },
                    {
                        "username": "itsyaboiimoulee",
                        "content": "[@Ak_15](/Ak_15)  in the given string \\n[\"abc\",\"bce\",\"cae\"]\\n   |         |        |   \\n  1        2       3\\nso , 1=> strs[j][i] and  strs[1][0] both are same. its not a entire string. \\n"
                    },
                    {
                        "username": "Knight-03",
                        "content": "[@Ak_15](/Ak_15) in array 0th element is the whole string so you can access it by just strs[i][j] "
                    },
                    {
                        "username": "Ak_15",
                        "content": "bro but the given is 1-D array right! how can i use column?????? could you explain meee\\n"
                    },
                    {
                        "username": "user8166e",
                        "content": "Associated tag with this problem is Hash table. How Hash table feet\\'s in the solution ?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "I, like I assume you did as well, did not implicitly use a Hash table.\\nbut what i think is happening \"under the hood\" is that the way you compare letter using math symbols is by having a hash table in the background that give \"a\" a smaller value then \"b\" and so on.\\nthis is just a guess so I look forward to be corrected!"
                    },
                    {
                        "username": "ayushp2021",
                        "content": "Why so many dislikes to this problem??"
                    },
                    {
                        "username": "TALLEC-Scott",
                        "content": "You may thinking Why this problem got so much dislikes .....\\uD83E\\uDDD0? Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151\\n\\nsource: [@Sachin](/sachinbaral02) "
                    },
                    {
                        "username": "mishra_anurag",
                        "content": "because they are noobs and cant reallt understand question"
                    },
                    {
                        "username": "mihir_adarsh",
                        "content": "Probably you won\\'t find this type of question in interviews. If you are new to programming, then you can solve this as a warm up question. "
                    },
                    {
                        "username": "BLOCKS",
                        "content": "Probably poor framing of the question."
                    }
                ]
            },
            {
                "id": 1738901,
                "content": [
                    {
                        "username": "Emoclaw",
                        "content": "we\\'re starting 2023 with an easy streak, i feel like we\\'re gonna get blasted with dp hards towards mid-end of Jan"
                    },
                    {
                        "username": "drewbie",
                        "content": "The calm before the storm"
                    },
                    {
                        "username": "ravi_kant_chauhan",
                        "content": "and still some of the programmers like me are not even getting the problem ..."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "most probably hard dp problems in mid-jan and our streak gonna break out \\uD83D\\uDE25"
                    },
                    {
                        "username": "kajal1801",
                        "content": "I got the same feeling \\uD83E\\uDEE5"
                    },
                    {
                        "username": "marcocane",
                        "content": "man i forgor the 1st"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "You may thinking Why this problem got so much dislikes .....🧐?  Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes.  You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Indeed, it was super terrible!\\nThanks for this comment."
                    },
                    {
                        "username": "ajedmh",
                        "content": "I don\\'t understand why in the examples \"cba\" is considered but \"zyx\" isn\\'t. The problem seems to be just in the first example but it\\'s not allowing me to pass."
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I had the same thoughts, but it is columns, not rows. \\nFor example, \\n\\ncba\\ndaf\\nghi\\n\\ncba isn\\'t being considered, the columns that are considered are \"c, d, g\", \"b, a, h\", and \"a, f, i\". Since the middle row (b, a, h), is the only one that isn\\'t sorted, we return 1. If there was a column that spelled \"cba\", it wouldn\\'t be considered as sorted lexographically."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order, [cba] -> c b a are the rows"
                    },
                    {
                        "username": "esint2030",
                        "content": "I really don\\'t get why people are saying this problem is so hard to understand. I read the description and it only took me 2 minutes to understand it. Are people\\'s comprehension skills really that low or are people just giving up if they can\\'t understand a problem in less than 5 seconds?"
                    },
                    {
                        "username": "Finesse",
                        "content": "2 minutes? It took me 5 seconds (including finding a solution)"
                    },
                    {
                        "username": "calm27",
                        "content": "frankly, it is not that obvious. so, don\\'t be like that, it is fine to complain. people complain, relax and refine the scope. "
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "codedrian",
                        "content": "[@pieceofpie](/pieceofpie) i agree\\n"
                    },
                    {
                        "username": "Bobolov",
                        "content": "sure\\n"
                    },
                    {
                        "username": "larrasket",
                        "content": "No it\\'s obvious, you are a genius and most people have low IQ than yours. "
                    },
                    {
                        "username": "pieceofpie",
                        "content": "I don\\'t think the problem is hard to understand. The problem is that the problem is very badly formulated, which can make some people not fully understand the problem."
                    },
                    {
                        "username": "chornox",
                        "content": "The problem constraints just need a small change. \\n\\n `for any i strs[i].length == m` \\n\\nAll strings are equal"
                    },
                    {
                        "username": "Fabio_Trucco",
                        "content": "Entered this section looking for this kind of confirmation. Thx"
                    },
                    {
                        "username": "chornox",
                        "content": "[@_BREEZE_](/_BREEZE_) yes that\\'s correct. I was referring to the last section. I usually just glance at it to verify these details. "
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "That is written in the problem statement \\n`You are given an array of n strings strs, all of the same length.`"
                    },
                    {
                        "username": "Jugni",
                        "content": "What is this?? \\n1. columns 0 (\\'a\\', \\'b\\', \\'c\\') and 2 (\\'c\\', \\'e\\', \\'e\\') are sorted . Given array-> strs = [\"abc\", \"bce\", \"cae\"]. Where is \\'cee\\'?\\n2. Input: strs = [\"cba\",\"daf\",\"ghi\"].  Columns 0 and 2 are sorted\\n3. Input: strs = [\"zyx\",\"wvu\",\"tsr\"]. All 3 columns are not sorted\\n\\nTake a look at \"cba\". This group is sorted in descending order e.g \"abc\" and the description says that it is sorted (point 2) But in another example, it disregards the above example; \"zyx\" -> \"xyz\" (backwards). Can someone explain? "
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) got it\\n"
                    },
                    {
                        "username": "aka773",
                        "content": "https://blog.csdn.net/qq_38959715/article/details/85299151\\ngo here"
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) In input 3 what should be the output? "
                    },
                    {
                        "username": "arns",
                        "content": "it is being seen column wise not row-wise"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you'll see [`c`,`e`,`e`]. This array is sorted in ascending order."
                    },
                    {
                        "username": "emli",
                        "content": "It\\'s easy with but with bad statement"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Exactly, but easy to understand with the Sample Cases provided."
                    },
                    {
                        "username": "Knight-03",
                        "content": "There is nothing to dislike this question \\ntake a `pen and paper write down the condition` they\\'ve given \\nit will be `very clear` that whats the `question saying`\\n\\nyou just need to `compare column elements ` \\nrun two for loops ............\\n--->`one from 0 to numbers of columns `\\n---> `inner loops from 1 to number of rows` \\ncompare `str[j][i] < str[j-1][i]` if true count++; and break that loop \\n`return that count`\\n\\neasy pizzy "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the different strings in the array given. Other loop to iterate across the string i.e., to move across an individual element of the array. "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the elements of the array. 1st row is 1st string, 2nd row is 2nd string and so on. Other array we use to iterate across the string character-wise. "
                    },
                    {
                        "username": "itsyaboiimoulee",
                        "content": "[@Ak_15](/Ak_15)  in the given string \\n[\"abc\",\"bce\",\"cae\"]\\n   |         |        |   \\n  1        2       3\\nso , 1=> strs[j][i] and  strs[1][0] both are same. its not a entire string. \\n"
                    },
                    {
                        "username": "Knight-03",
                        "content": "[@Ak_15](/Ak_15) in array 0th element is the whole string so you can access it by just strs[i][j] "
                    },
                    {
                        "username": "Ak_15",
                        "content": "bro but the given is 1-D array right! how can i use column?????? could you explain meee\\n"
                    },
                    {
                        "username": "user8166e",
                        "content": "Associated tag with this problem is Hash table. How Hash table feet\\'s in the solution ?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "I, like I assume you did as well, did not implicitly use a Hash table.\\nbut what i think is happening \"under the hood\" is that the way you compare letter using math symbols is by having a hash table in the background that give \"a\" a smaller value then \"b\" and so on.\\nthis is just a guess so I look forward to be corrected!"
                    },
                    {
                        "username": "ayushp2021",
                        "content": "Why so many dislikes to this problem??"
                    },
                    {
                        "username": "TALLEC-Scott",
                        "content": "You may thinking Why this problem got so much dislikes .....\\uD83E\\uDDD0? Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151\\n\\nsource: [@Sachin](/sachinbaral02) "
                    },
                    {
                        "username": "mishra_anurag",
                        "content": "because they are noobs and cant reallt understand question"
                    },
                    {
                        "username": "mihir_adarsh",
                        "content": "Probably you won\\'t find this type of question in interviews. If you are new to programming, then you can solve this as a warm up question. "
                    },
                    {
                        "username": "BLOCKS",
                        "content": "Probably poor framing of the question."
                    }
                ]
            },
            {
                "id": 1739477,
                "content": [
                    {
                        "username": "Emoclaw",
                        "content": "we\\'re starting 2023 with an easy streak, i feel like we\\'re gonna get blasted with dp hards towards mid-end of Jan"
                    },
                    {
                        "username": "drewbie",
                        "content": "The calm before the storm"
                    },
                    {
                        "username": "ravi_kant_chauhan",
                        "content": "and still some of the programmers like me are not even getting the problem ..."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "most probably hard dp problems in mid-jan and our streak gonna break out \\uD83D\\uDE25"
                    },
                    {
                        "username": "kajal1801",
                        "content": "I got the same feeling \\uD83E\\uDEE5"
                    },
                    {
                        "username": "marcocane",
                        "content": "man i forgor the 1st"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "You may thinking Why this problem got so much dislikes .....🧐?  Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes.  You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Indeed, it was super terrible!\\nThanks for this comment."
                    },
                    {
                        "username": "ajedmh",
                        "content": "I don\\'t understand why in the examples \"cba\" is considered but \"zyx\" isn\\'t. The problem seems to be just in the first example but it\\'s not allowing me to pass."
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I had the same thoughts, but it is columns, not rows. \\nFor example, \\n\\ncba\\ndaf\\nghi\\n\\ncba isn\\'t being considered, the columns that are considered are \"c, d, g\", \"b, a, h\", and \"a, f, i\". Since the middle row (b, a, h), is the only one that isn\\'t sorted, we return 1. If there was a column that spelled \"cba\", it wouldn\\'t be considered as sorted lexographically."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order, [cba] -> c b a are the rows"
                    },
                    {
                        "username": "esint2030",
                        "content": "I really don\\'t get why people are saying this problem is so hard to understand. I read the description and it only took me 2 minutes to understand it. Are people\\'s comprehension skills really that low or are people just giving up if they can\\'t understand a problem in less than 5 seconds?"
                    },
                    {
                        "username": "Finesse",
                        "content": "2 minutes? It took me 5 seconds (including finding a solution)"
                    },
                    {
                        "username": "calm27",
                        "content": "frankly, it is not that obvious. so, don\\'t be like that, it is fine to complain. people complain, relax and refine the scope. "
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "codedrian",
                        "content": "[@pieceofpie](/pieceofpie) i agree\\n"
                    },
                    {
                        "username": "Bobolov",
                        "content": "sure\\n"
                    },
                    {
                        "username": "larrasket",
                        "content": "No it\\'s obvious, you are a genius and most people have low IQ than yours. "
                    },
                    {
                        "username": "pieceofpie",
                        "content": "I don\\'t think the problem is hard to understand. The problem is that the problem is very badly formulated, which can make some people not fully understand the problem."
                    },
                    {
                        "username": "chornox",
                        "content": "The problem constraints just need a small change. \\n\\n `for any i strs[i].length == m` \\n\\nAll strings are equal"
                    },
                    {
                        "username": "Fabio_Trucco",
                        "content": "Entered this section looking for this kind of confirmation. Thx"
                    },
                    {
                        "username": "chornox",
                        "content": "[@_BREEZE_](/_BREEZE_) yes that\\'s correct. I was referring to the last section. I usually just glance at it to verify these details. "
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "That is written in the problem statement \\n`You are given an array of n strings strs, all of the same length.`"
                    },
                    {
                        "username": "Jugni",
                        "content": "What is this?? \\n1. columns 0 (\\'a\\', \\'b\\', \\'c\\') and 2 (\\'c\\', \\'e\\', \\'e\\') are sorted . Given array-> strs = [\"abc\", \"bce\", \"cae\"]. Where is \\'cee\\'?\\n2. Input: strs = [\"cba\",\"daf\",\"ghi\"].  Columns 0 and 2 are sorted\\n3. Input: strs = [\"zyx\",\"wvu\",\"tsr\"]. All 3 columns are not sorted\\n\\nTake a look at \"cba\". This group is sorted in descending order e.g \"abc\" and the description says that it is sorted (point 2) But in another example, it disregards the above example; \"zyx\" -> \"xyz\" (backwards). Can someone explain? "
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) got it\\n"
                    },
                    {
                        "username": "aka773",
                        "content": "https://blog.csdn.net/qq_38959715/article/details/85299151\\ngo here"
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) In input 3 what should be the output? "
                    },
                    {
                        "username": "arns",
                        "content": "it is being seen column wise not row-wise"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you'll see [`c`,`e`,`e`]. This array is sorted in ascending order."
                    },
                    {
                        "username": "emli",
                        "content": "It\\'s easy with but with bad statement"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Exactly, but easy to understand with the Sample Cases provided."
                    },
                    {
                        "username": "Knight-03",
                        "content": "There is nothing to dislike this question \\ntake a `pen and paper write down the condition` they\\'ve given \\nit will be `very clear` that whats the `question saying`\\n\\nyou just need to `compare column elements ` \\nrun two for loops ............\\n--->`one from 0 to numbers of columns `\\n---> `inner loops from 1 to number of rows` \\ncompare `str[j][i] < str[j-1][i]` if true count++; and break that loop \\n`return that count`\\n\\neasy pizzy "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the different strings in the array given. Other loop to iterate across the string i.e., to move across an individual element of the array. "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the elements of the array. 1st row is 1st string, 2nd row is 2nd string and so on. Other array we use to iterate across the string character-wise. "
                    },
                    {
                        "username": "itsyaboiimoulee",
                        "content": "[@Ak_15](/Ak_15)  in the given string \\n[\"abc\",\"bce\",\"cae\"]\\n   |         |        |   \\n  1        2       3\\nso , 1=> strs[j][i] and  strs[1][0] both are same. its not a entire string. \\n"
                    },
                    {
                        "username": "Knight-03",
                        "content": "[@Ak_15](/Ak_15) in array 0th element is the whole string so you can access it by just strs[i][j] "
                    },
                    {
                        "username": "Ak_15",
                        "content": "bro but the given is 1-D array right! how can i use column?????? could you explain meee\\n"
                    },
                    {
                        "username": "user8166e",
                        "content": "Associated tag with this problem is Hash table. How Hash table feet\\'s in the solution ?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "I, like I assume you did as well, did not implicitly use a Hash table.\\nbut what i think is happening \"under the hood\" is that the way you compare letter using math symbols is by having a hash table in the background that give \"a\" a smaller value then \"b\" and so on.\\nthis is just a guess so I look forward to be corrected!"
                    },
                    {
                        "username": "ayushp2021",
                        "content": "Why so many dislikes to this problem??"
                    },
                    {
                        "username": "TALLEC-Scott",
                        "content": "You may thinking Why this problem got so much dislikes .....\\uD83E\\uDDD0? Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151\\n\\nsource: [@Sachin](/sachinbaral02) "
                    },
                    {
                        "username": "mishra_anurag",
                        "content": "because they are noobs and cant reallt understand question"
                    },
                    {
                        "username": "mihir_adarsh",
                        "content": "Probably you won\\'t find this type of question in interviews. If you are new to programming, then you can solve this as a warm up question. "
                    },
                    {
                        "username": "BLOCKS",
                        "content": "Probably poor framing of the question."
                    }
                ]
            },
            {
                "id": 1565362,
                "content": [
                    {
                        "username": "Emoclaw",
                        "content": "we\\'re starting 2023 with an easy streak, i feel like we\\'re gonna get blasted with dp hards towards mid-end of Jan"
                    },
                    {
                        "username": "drewbie",
                        "content": "The calm before the storm"
                    },
                    {
                        "username": "ravi_kant_chauhan",
                        "content": "and still some of the programmers like me are not even getting the problem ..."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "most probably hard dp problems in mid-jan and our streak gonna break out \\uD83D\\uDE25"
                    },
                    {
                        "username": "kajal1801",
                        "content": "I got the same feeling \\uD83E\\uDEE5"
                    },
                    {
                        "username": "marcocane",
                        "content": "man i forgor the 1st"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "You may thinking Why this problem got so much dislikes .....🧐?  Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes.  You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Indeed, it was super terrible!\\nThanks for this comment."
                    },
                    {
                        "username": "ajedmh",
                        "content": "I don\\'t understand why in the examples \"cba\" is considered but \"zyx\" isn\\'t. The problem seems to be just in the first example but it\\'s not allowing me to pass."
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I had the same thoughts, but it is columns, not rows. \\nFor example, \\n\\ncba\\ndaf\\nghi\\n\\ncba isn\\'t being considered, the columns that are considered are \"c, d, g\", \"b, a, h\", and \"a, f, i\". Since the middle row (b, a, h), is the only one that isn\\'t sorted, we return 1. If there was a column that spelled \"cba\", it wouldn\\'t be considered as sorted lexographically."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order, [cba] -> c b a are the rows"
                    },
                    {
                        "username": "esint2030",
                        "content": "I really don\\'t get why people are saying this problem is so hard to understand. I read the description and it only took me 2 minutes to understand it. Are people\\'s comprehension skills really that low or are people just giving up if they can\\'t understand a problem in less than 5 seconds?"
                    },
                    {
                        "username": "Finesse",
                        "content": "2 minutes? It took me 5 seconds (including finding a solution)"
                    },
                    {
                        "username": "calm27",
                        "content": "frankly, it is not that obvious. so, don\\'t be like that, it is fine to complain. people complain, relax and refine the scope. "
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "codedrian",
                        "content": "[@pieceofpie](/pieceofpie) i agree\\n"
                    },
                    {
                        "username": "Bobolov",
                        "content": "sure\\n"
                    },
                    {
                        "username": "larrasket",
                        "content": "No it\\'s obvious, you are a genius and most people have low IQ than yours. "
                    },
                    {
                        "username": "pieceofpie",
                        "content": "I don\\'t think the problem is hard to understand. The problem is that the problem is very badly formulated, which can make some people not fully understand the problem."
                    },
                    {
                        "username": "chornox",
                        "content": "The problem constraints just need a small change. \\n\\n `for any i strs[i].length == m` \\n\\nAll strings are equal"
                    },
                    {
                        "username": "Fabio_Trucco",
                        "content": "Entered this section looking for this kind of confirmation. Thx"
                    },
                    {
                        "username": "chornox",
                        "content": "[@_BREEZE_](/_BREEZE_) yes that\\'s correct. I was referring to the last section. I usually just glance at it to verify these details. "
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "That is written in the problem statement \\n`You are given an array of n strings strs, all of the same length.`"
                    },
                    {
                        "username": "Jugni",
                        "content": "What is this?? \\n1. columns 0 (\\'a\\', \\'b\\', \\'c\\') and 2 (\\'c\\', \\'e\\', \\'e\\') are sorted . Given array-> strs = [\"abc\", \"bce\", \"cae\"]. Where is \\'cee\\'?\\n2. Input: strs = [\"cba\",\"daf\",\"ghi\"].  Columns 0 and 2 are sorted\\n3. Input: strs = [\"zyx\",\"wvu\",\"tsr\"]. All 3 columns are not sorted\\n\\nTake a look at \"cba\". This group is sorted in descending order e.g \"abc\" and the description says that it is sorted (point 2) But in another example, it disregards the above example; \"zyx\" -> \"xyz\" (backwards). Can someone explain? "
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) got it\\n"
                    },
                    {
                        "username": "aka773",
                        "content": "https://blog.csdn.net/qq_38959715/article/details/85299151\\ngo here"
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) In input 3 what should be the output? "
                    },
                    {
                        "username": "arns",
                        "content": "it is being seen column wise not row-wise"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you'll see [`c`,`e`,`e`]. This array is sorted in ascending order."
                    },
                    {
                        "username": "emli",
                        "content": "It\\'s easy with but with bad statement"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Exactly, but easy to understand with the Sample Cases provided."
                    },
                    {
                        "username": "Knight-03",
                        "content": "There is nothing to dislike this question \\ntake a `pen and paper write down the condition` they\\'ve given \\nit will be `very clear` that whats the `question saying`\\n\\nyou just need to `compare column elements ` \\nrun two for loops ............\\n--->`one from 0 to numbers of columns `\\n---> `inner loops from 1 to number of rows` \\ncompare `str[j][i] < str[j-1][i]` if true count++; and break that loop \\n`return that count`\\n\\neasy pizzy "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the different strings in the array given. Other loop to iterate across the string i.e., to move across an individual element of the array. "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the elements of the array. 1st row is 1st string, 2nd row is 2nd string and so on. Other array we use to iterate across the string character-wise. "
                    },
                    {
                        "username": "itsyaboiimoulee",
                        "content": "[@Ak_15](/Ak_15)  in the given string \\n[\"abc\",\"bce\",\"cae\"]\\n   |         |        |   \\n  1        2       3\\nso , 1=> strs[j][i] and  strs[1][0] both are same. its not a entire string. \\n"
                    },
                    {
                        "username": "Knight-03",
                        "content": "[@Ak_15](/Ak_15) in array 0th element is the whole string so you can access it by just strs[i][j] "
                    },
                    {
                        "username": "Ak_15",
                        "content": "bro but the given is 1-D array right! how can i use column?????? could you explain meee\\n"
                    },
                    {
                        "username": "user8166e",
                        "content": "Associated tag with this problem is Hash table. How Hash table feet\\'s in the solution ?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "I, like I assume you did as well, did not implicitly use a Hash table.\\nbut what i think is happening \"under the hood\" is that the way you compare letter using math symbols is by having a hash table in the background that give \"a\" a smaller value then \"b\" and so on.\\nthis is just a guess so I look forward to be corrected!"
                    },
                    {
                        "username": "ayushp2021",
                        "content": "Why so many dislikes to this problem??"
                    },
                    {
                        "username": "TALLEC-Scott",
                        "content": "You may thinking Why this problem got so much dislikes .....\\uD83E\\uDDD0? Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151\\n\\nsource: [@Sachin](/sachinbaral02) "
                    },
                    {
                        "username": "mishra_anurag",
                        "content": "because they are noobs and cant reallt understand question"
                    },
                    {
                        "username": "mihir_adarsh",
                        "content": "Probably you won\\'t find this type of question in interviews. If you are new to programming, then you can solve this as a warm up question. "
                    },
                    {
                        "username": "BLOCKS",
                        "content": "Probably poor framing of the question."
                    }
                ]
            },
            {
                "id": 1739160,
                "content": [
                    {
                        "username": "Emoclaw",
                        "content": "we\\'re starting 2023 with an easy streak, i feel like we\\'re gonna get blasted with dp hards towards mid-end of Jan"
                    },
                    {
                        "username": "drewbie",
                        "content": "The calm before the storm"
                    },
                    {
                        "username": "ravi_kant_chauhan",
                        "content": "and still some of the programmers like me are not even getting the problem ..."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "most probably hard dp problems in mid-jan and our streak gonna break out \\uD83D\\uDE25"
                    },
                    {
                        "username": "kajal1801",
                        "content": "I got the same feeling \\uD83E\\uDEE5"
                    },
                    {
                        "username": "marcocane",
                        "content": "man i forgor the 1st"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "You may thinking Why this problem got so much dislikes .....🧐?  Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes.  You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Indeed, it was super terrible!\\nThanks for this comment."
                    },
                    {
                        "username": "ajedmh",
                        "content": "I don\\'t understand why in the examples \"cba\" is considered but \"zyx\" isn\\'t. The problem seems to be just in the first example but it\\'s not allowing me to pass."
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I had the same thoughts, but it is columns, not rows. \\nFor example, \\n\\ncba\\ndaf\\nghi\\n\\ncba isn\\'t being considered, the columns that are considered are \"c, d, g\", \"b, a, h\", and \"a, f, i\". Since the middle row (b, a, h), is the only one that isn\\'t sorted, we return 1. If there was a column that spelled \"cba\", it wouldn\\'t be considered as sorted lexographically."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order, [cba] -> c b a are the rows"
                    },
                    {
                        "username": "esint2030",
                        "content": "I really don\\'t get why people are saying this problem is so hard to understand. I read the description and it only took me 2 minutes to understand it. Are people\\'s comprehension skills really that low or are people just giving up if they can\\'t understand a problem in less than 5 seconds?"
                    },
                    {
                        "username": "Finesse",
                        "content": "2 minutes? It took me 5 seconds (including finding a solution)"
                    },
                    {
                        "username": "calm27",
                        "content": "frankly, it is not that obvious. so, don\\'t be like that, it is fine to complain. people complain, relax and refine the scope. "
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "codedrian",
                        "content": "[@pieceofpie](/pieceofpie) i agree\\n"
                    },
                    {
                        "username": "Bobolov",
                        "content": "sure\\n"
                    },
                    {
                        "username": "larrasket",
                        "content": "No it\\'s obvious, you are a genius and most people have low IQ than yours. "
                    },
                    {
                        "username": "pieceofpie",
                        "content": "I don\\'t think the problem is hard to understand. The problem is that the problem is very badly formulated, which can make some people not fully understand the problem."
                    },
                    {
                        "username": "chornox",
                        "content": "The problem constraints just need a small change. \\n\\n `for any i strs[i].length == m` \\n\\nAll strings are equal"
                    },
                    {
                        "username": "Fabio_Trucco",
                        "content": "Entered this section looking for this kind of confirmation. Thx"
                    },
                    {
                        "username": "chornox",
                        "content": "[@_BREEZE_](/_BREEZE_) yes that\\'s correct. I was referring to the last section. I usually just glance at it to verify these details. "
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "That is written in the problem statement \\n`You are given an array of n strings strs, all of the same length.`"
                    },
                    {
                        "username": "Jugni",
                        "content": "What is this?? \\n1. columns 0 (\\'a\\', \\'b\\', \\'c\\') and 2 (\\'c\\', \\'e\\', \\'e\\') are sorted . Given array-> strs = [\"abc\", \"bce\", \"cae\"]. Where is \\'cee\\'?\\n2. Input: strs = [\"cba\",\"daf\",\"ghi\"].  Columns 0 and 2 are sorted\\n3. Input: strs = [\"zyx\",\"wvu\",\"tsr\"]. All 3 columns are not sorted\\n\\nTake a look at \"cba\". This group is sorted in descending order e.g \"abc\" and the description says that it is sorted (point 2) But in another example, it disregards the above example; \"zyx\" -> \"xyz\" (backwards). Can someone explain? "
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) got it\\n"
                    },
                    {
                        "username": "aka773",
                        "content": "https://blog.csdn.net/qq_38959715/article/details/85299151\\ngo here"
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) In input 3 what should be the output? "
                    },
                    {
                        "username": "arns",
                        "content": "it is being seen column wise not row-wise"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you'll see [`c`,`e`,`e`]. This array is sorted in ascending order."
                    },
                    {
                        "username": "emli",
                        "content": "It\\'s easy with but with bad statement"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Exactly, but easy to understand with the Sample Cases provided."
                    },
                    {
                        "username": "Knight-03",
                        "content": "There is nothing to dislike this question \\ntake a `pen and paper write down the condition` they\\'ve given \\nit will be `very clear` that whats the `question saying`\\n\\nyou just need to `compare column elements ` \\nrun two for loops ............\\n--->`one from 0 to numbers of columns `\\n---> `inner loops from 1 to number of rows` \\ncompare `str[j][i] < str[j-1][i]` if true count++; and break that loop \\n`return that count`\\n\\neasy pizzy "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the different strings in the array given. Other loop to iterate across the string i.e., to move across an individual element of the array. "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the elements of the array. 1st row is 1st string, 2nd row is 2nd string and so on. Other array we use to iterate across the string character-wise. "
                    },
                    {
                        "username": "itsyaboiimoulee",
                        "content": "[@Ak_15](/Ak_15)  in the given string \\n[\"abc\",\"bce\",\"cae\"]\\n   |         |        |   \\n  1        2       3\\nso , 1=> strs[j][i] and  strs[1][0] both are same. its not a entire string. \\n"
                    },
                    {
                        "username": "Knight-03",
                        "content": "[@Ak_15](/Ak_15) in array 0th element is the whole string so you can access it by just strs[i][j] "
                    },
                    {
                        "username": "Ak_15",
                        "content": "bro but the given is 1-D array right! how can i use column?????? could you explain meee\\n"
                    },
                    {
                        "username": "user8166e",
                        "content": "Associated tag with this problem is Hash table. How Hash table feet\\'s in the solution ?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "I, like I assume you did as well, did not implicitly use a Hash table.\\nbut what i think is happening \"under the hood\" is that the way you compare letter using math symbols is by having a hash table in the background that give \"a\" a smaller value then \"b\" and so on.\\nthis is just a guess so I look forward to be corrected!"
                    },
                    {
                        "username": "ayushp2021",
                        "content": "Why so many dislikes to this problem??"
                    },
                    {
                        "username": "TALLEC-Scott",
                        "content": "You may thinking Why this problem got so much dislikes .....\\uD83E\\uDDD0? Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151\\n\\nsource: [@Sachin](/sachinbaral02) "
                    },
                    {
                        "username": "mishra_anurag",
                        "content": "because they are noobs and cant reallt understand question"
                    },
                    {
                        "username": "mihir_adarsh",
                        "content": "Probably you won\\'t find this type of question in interviews. If you are new to programming, then you can solve this as a warm up question. "
                    },
                    {
                        "username": "BLOCKS",
                        "content": "Probably poor framing of the question."
                    }
                ]
            },
            {
                "id": 1738974,
                "content": [
                    {
                        "username": "Emoclaw",
                        "content": "we\\'re starting 2023 with an easy streak, i feel like we\\'re gonna get blasted with dp hards towards mid-end of Jan"
                    },
                    {
                        "username": "drewbie",
                        "content": "The calm before the storm"
                    },
                    {
                        "username": "ravi_kant_chauhan",
                        "content": "and still some of the programmers like me are not even getting the problem ..."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "most probably hard dp problems in mid-jan and our streak gonna break out \\uD83D\\uDE25"
                    },
                    {
                        "username": "kajal1801",
                        "content": "I got the same feeling \\uD83E\\uDEE5"
                    },
                    {
                        "username": "marcocane",
                        "content": "man i forgor the 1st"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "You may thinking Why this problem got so much dislikes .....🧐?  Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes.  You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Indeed, it was super terrible!\\nThanks for this comment."
                    },
                    {
                        "username": "ajedmh",
                        "content": "I don\\'t understand why in the examples \"cba\" is considered but \"zyx\" isn\\'t. The problem seems to be just in the first example but it\\'s not allowing me to pass."
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I had the same thoughts, but it is columns, not rows. \\nFor example, \\n\\ncba\\ndaf\\nghi\\n\\ncba isn\\'t being considered, the columns that are considered are \"c, d, g\", \"b, a, h\", and \"a, f, i\". Since the middle row (b, a, h), is the only one that isn\\'t sorted, we return 1. If there was a column that spelled \"cba\", it wouldn\\'t be considered as sorted lexographically."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order, [cba] -> c b a are the rows"
                    },
                    {
                        "username": "esint2030",
                        "content": "I really don\\'t get why people are saying this problem is so hard to understand. I read the description and it only took me 2 minutes to understand it. Are people\\'s comprehension skills really that low or are people just giving up if they can\\'t understand a problem in less than 5 seconds?"
                    },
                    {
                        "username": "Finesse",
                        "content": "2 minutes? It took me 5 seconds (including finding a solution)"
                    },
                    {
                        "username": "calm27",
                        "content": "frankly, it is not that obvious. so, don\\'t be like that, it is fine to complain. people complain, relax and refine the scope. "
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "codedrian",
                        "content": "[@pieceofpie](/pieceofpie) i agree\\n"
                    },
                    {
                        "username": "Bobolov",
                        "content": "sure\\n"
                    },
                    {
                        "username": "larrasket",
                        "content": "No it\\'s obvious, you are a genius and most people have low IQ than yours. "
                    },
                    {
                        "username": "pieceofpie",
                        "content": "I don\\'t think the problem is hard to understand. The problem is that the problem is very badly formulated, which can make some people not fully understand the problem."
                    },
                    {
                        "username": "chornox",
                        "content": "The problem constraints just need a small change. \\n\\n `for any i strs[i].length == m` \\n\\nAll strings are equal"
                    },
                    {
                        "username": "Fabio_Trucco",
                        "content": "Entered this section looking for this kind of confirmation. Thx"
                    },
                    {
                        "username": "chornox",
                        "content": "[@_BREEZE_](/_BREEZE_) yes that\\'s correct. I was referring to the last section. I usually just glance at it to verify these details. "
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "That is written in the problem statement \\n`You are given an array of n strings strs, all of the same length.`"
                    },
                    {
                        "username": "Jugni",
                        "content": "What is this?? \\n1. columns 0 (\\'a\\', \\'b\\', \\'c\\') and 2 (\\'c\\', \\'e\\', \\'e\\') are sorted . Given array-> strs = [\"abc\", \"bce\", \"cae\"]. Where is \\'cee\\'?\\n2. Input: strs = [\"cba\",\"daf\",\"ghi\"].  Columns 0 and 2 are sorted\\n3. Input: strs = [\"zyx\",\"wvu\",\"tsr\"]. All 3 columns are not sorted\\n\\nTake a look at \"cba\". This group is sorted in descending order e.g \"abc\" and the description says that it is sorted (point 2) But in another example, it disregards the above example; \"zyx\" -> \"xyz\" (backwards). Can someone explain? "
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) got it\\n"
                    },
                    {
                        "username": "aka773",
                        "content": "https://blog.csdn.net/qq_38959715/article/details/85299151\\ngo here"
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) In input 3 what should be the output? "
                    },
                    {
                        "username": "arns",
                        "content": "it is being seen column wise not row-wise"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you'll see [`c`,`e`,`e`]. This array is sorted in ascending order."
                    },
                    {
                        "username": "emli",
                        "content": "It\\'s easy with but with bad statement"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Exactly, but easy to understand with the Sample Cases provided."
                    },
                    {
                        "username": "Knight-03",
                        "content": "There is nothing to dislike this question \\ntake a `pen and paper write down the condition` they\\'ve given \\nit will be `very clear` that whats the `question saying`\\n\\nyou just need to `compare column elements ` \\nrun two for loops ............\\n--->`one from 0 to numbers of columns `\\n---> `inner loops from 1 to number of rows` \\ncompare `str[j][i] < str[j-1][i]` if true count++; and break that loop \\n`return that count`\\n\\neasy pizzy "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the different strings in the array given. Other loop to iterate across the string i.e., to move across an individual element of the array. "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the elements of the array. 1st row is 1st string, 2nd row is 2nd string and so on. Other array we use to iterate across the string character-wise. "
                    },
                    {
                        "username": "itsyaboiimoulee",
                        "content": "[@Ak_15](/Ak_15)  in the given string \\n[\"abc\",\"bce\",\"cae\"]\\n   |         |        |   \\n  1        2       3\\nso , 1=> strs[j][i] and  strs[1][0] both are same. its not a entire string. \\n"
                    },
                    {
                        "username": "Knight-03",
                        "content": "[@Ak_15](/Ak_15) in array 0th element is the whole string so you can access it by just strs[i][j] "
                    },
                    {
                        "username": "Ak_15",
                        "content": "bro but the given is 1-D array right! how can i use column?????? could you explain meee\\n"
                    },
                    {
                        "username": "user8166e",
                        "content": "Associated tag with this problem is Hash table. How Hash table feet\\'s in the solution ?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "I, like I assume you did as well, did not implicitly use a Hash table.\\nbut what i think is happening \"under the hood\" is that the way you compare letter using math symbols is by having a hash table in the background that give \"a\" a smaller value then \"b\" and so on.\\nthis is just a guess so I look forward to be corrected!"
                    },
                    {
                        "username": "ayushp2021",
                        "content": "Why so many dislikes to this problem??"
                    },
                    {
                        "username": "TALLEC-Scott",
                        "content": "You may thinking Why this problem got so much dislikes .....\\uD83E\\uDDD0? Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151\\n\\nsource: [@Sachin](/sachinbaral02) "
                    },
                    {
                        "username": "mishra_anurag",
                        "content": "because they are noobs and cant reallt understand question"
                    },
                    {
                        "username": "mihir_adarsh",
                        "content": "Probably you won\\'t find this type of question in interviews. If you are new to programming, then you can solve this as a warm up question. "
                    },
                    {
                        "username": "BLOCKS",
                        "content": "Probably poor framing of the question."
                    }
                ]
            },
            {
                "id": 1738982,
                "content": [
                    {
                        "username": "Emoclaw",
                        "content": "we\\'re starting 2023 with an easy streak, i feel like we\\'re gonna get blasted with dp hards towards mid-end of Jan"
                    },
                    {
                        "username": "drewbie",
                        "content": "The calm before the storm"
                    },
                    {
                        "username": "ravi_kant_chauhan",
                        "content": "and still some of the programmers like me are not even getting the problem ..."
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "most probably hard dp problems in mid-jan and our streak gonna break out \\uD83D\\uDE25"
                    },
                    {
                        "username": "kajal1801",
                        "content": "I got the same feeling \\uD83E\\uDEE5"
                    },
                    {
                        "username": "marcocane",
                        "content": "man i forgor the 1st"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "You may thinking Why this problem got so much dislikes .....🧐?  Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes.  You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "Indeed, it was super terrible!\\nThanks for this comment."
                    },
                    {
                        "username": "ajedmh",
                        "content": "I don\\'t understand why in the examples \"cba\" is considered but \"zyx\" isn\\'t. The problem seems to be just in the first example but it\\'s not allowing me to pass."
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I had the same thoughts, but it is columns, not rows. \\nFor example, \\n\\ncba\\ndaf\\nghi\\n\\ncba isn\\'t being considered, the columns that are considered are \"c, d, g\", \"b, a, h\", and \"a, f, i\". Since the middle row (b, a, h), is the only one that isn\\'t sorted, we return 1. If there was a column that spelled \"cba\", it wouldn\\'t be considered as sorted lexographically."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order, [cba] -> c b a are the rows"
                    },
                    {
                        "username": "esint2030",
                        "content": "I really don\\'t get why people are saying this problem is so hard to understand. I read the description and it only took me 2 minutes to understand it. Are people\\'s comprehension skills really that low or are people just giving up if they can\\'t understand a problem in less than 5 seconds?"
                    },
                    {
                        "username": "Finesse",
                        "content": "2 minutes? It took me 5 seconds (including finding a solution)"
                    },
                    {
                        "username": "calm27",
                        "content": "frankly, it is not that obvious. so, don\\'t be like that, it is fine to complain. people complain, relax and refine the scope. "
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151"
                    },
                    {
                        "username": "codedrian",
                        "content": "[@pieceofpie](/pieceofpie) i agree\\n"
                    },
                    {
                        "username": "Bobolov",
                        "content": "sure\\n"
                    },
                    {
                        "username": "larrasket",
                        "content": "No it\\'s obvious, you are a genius and most people have low IQ than yours. "
                    },
                    {
                        "username": "pieceofpie",
                        "content": "I don\\'t think the problem is hard to understand. The problem is that the problem is very badly formulated, which can make some people not fully understand the problem."
                    },
                    {
                        "username": "chornox",
                        "content": "The problem constraints just need a small change. \\n\\n `for any i strs[i].length == m` \\n\\nAll strings are equal"
                    },
                    {
                        "username": "Fabio_Trucco",
                        "content": "Entered this section looking for this kind of confirmation. Thx"
                    },
                    {
                        "username": "chornox",
                        "content": "[@_BREEZE_](/_BREEZE_) yes that\\'s correct. I was referring to the last section. I usually just glance at it to verify these details. "
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "That is written in the problem statement \\n`You are given an array of n strings strs, all of the same length.`"
                    },
                    {
                        "username": "Jugni",
                        "content": "What is this?? \\n1. columns 0 (\\'a\\', \\'b\\', \\'c\\') and 2 (\\'c\\', \\'e\\', \\'e\\') are sorted . Given array-> strs = [\"abc\", \"bce\", \"cae\"]. Where is \\'cee\\'?\\n2. Input: strs = [\"cba\",\"daf\",\"ghi\"].  Columns 0 and 2 are sorted\\n3. Input: strs = [\"zyx\",\"wvu\",\"tsr\"]. All 3 columns are not sorted\\n\\nTake a look at \"cba\". This group is sorted in descending order e.g \"abc\" and the description says that it is sorted (point 2) But in another example, it disregards the above example; \"zyx\" -> \"xyz\" (backwards). Can someone explain? "
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) got it\\n"
                    },
                    {
                        "username": "aka773",
                        "content": "https://blog.csdn.net/qq_38959715/article/details/85299151\\ngo here"
                    },
                    {
                        "username": "hiranmay1000",
                        "content": "[@belinskyi](/belinskyi) In input 3 what should be the output? "
                    },
                    {
                        "username": "arns",
                        "content": "it is being seen column wise not row-wise"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you'll see [`c`,`e`,`e`]. This array is sorted in ascending order."
                    },
                    {
                        "username": "emli",
                        "content": "It\\'s easy with but with bad statement"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Exactly, but easy to understand with the Sample Cases provided."
                    },
                    {
                        "username": "Knight-03",
                        "content": "There is nothing to dislike this question \\ntake a `pen and paper write down the condition` they\\'ve given \\nit will be `very clear` that whats the `question saying`\\n\\nyou just need to `compare column elements ` \\nrun two for loops ............\\n--->`one from 0 to numbers of columns `\\n---> `inner loops from 1 to number of rows` \\ncompare `str[j][i] < str[j-1][i]` if true count++; and break that loop \\n`return that count`\\n\\neasy pizzy "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the different strings in the array given. Other loop to iterate across the string i.e., to move across an individual element of the array. "
                    },
                    {
                        "username": "nipunrathore",
                        "content": "[@Ak_15](/Ak_15) 1 array we are using to access the elements of the array. 1st row is 1st string, 2nd row is 2nd string and so on. Other array we use to iterate across the string character-wise. "
                    },
                    {
                        "username": "itsyaboiimoulee",
                        "content": "[@Ak_15](/Ak_15)  in the given string \\n[\"abc\",\"bce\",\"cae\"]\\n   |         |        |   \\n  1        2       3\\nso , 1=> strs[j][i] and  strs[1][0] both are same. its not a entire string. \\n"
                    },
                    {
                        "username": "Knight-03",
                        "content": "[@Ak_15](/Ak_15) in array 0th element is the whole string so you can access it by just strs[i][j] "
                    },
                    {
                        "username": "Ak_15",
                        "content": "bro but the given is 1-D array right! how can i use column?????? could you explain meee\\n"
                    },
                    {
                        "username": "user8166e",
                        "content": "Associated tag with this problem is Hash table. How Hash table feet\\'s in the solution ?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "I, like I assume you did as well, did not implicitly use a Hash table.\\nbut what i think is happening \"under the hood\" is that the way you compare letter using math symbols is by having a hash table in the background that give \"a\" a smaller value then \"b\" and so on.\\nthis is just a guess so I look forward to be corrected!"
                    },
                    {
                        "username": "ayushp2021",
                        "content": "Why so many dislikes to this problem??"
                    },
                    {
                        "username": "TALLEC-Scott",
                        "content": "You may thinking Why this problem got so much dislikes .....\\uD83E\\uDDD0? Because previously like 1.5 year ago when I tried to solve this question the formulation and explanation was terrible now I guess they revised it ,and explained properly ,that is why It is having so much dislikes. You can refer this ,how it was explained before : https://blog.csdn.net/qq_38959715/article/details/85299151\\n\\nsource: [@Sachin](/sachinbaral02) "
                    },
                    {
                        "username": "mishra_anurag",
                        "content": "because they are noobs and cant reallt understand question"
                    },
                    {
                        "username": "mihir_adarsh",
                        "content": "Probably you won\\'t find this type of question in interviews. If you are new to programming, then you can solve this as a warm up question. "
                    },
                    {
                        "username": "BLOCKS",
                        "content": "Probably poor framing of the question."
                    }
                ]
            },
            {
                "id": 1739212,
                "content": [
                    {
                        "username": "sarpalmadhav",
                        "content": "It would have helped more if it could have been mentioned that only ascending lexicographical order is desired, I guess descending order too qualifies as lexicographical but is not desired in this problem."
                    },
                    {
                        "username": "Finesse",
                        "content": "It is neither ascending nor descending, it's lexicographical. I.e. follows a predefined order (the English alphabet in this case). Letters aren't numbers, so they can't ascend or descend. What you call \"descending\" is actually reverse lexicographical order."
                    },
                    {
                        "username": "shailika",
                        "content": "Don't see array index value like in\nExample 1 Input: strs = [\"cba\",\"daf\",\"ghi\"]\nhere, cba is correct so why in\nExample 2 Input: strs = [\"zyx\",\"wvu\",\"tsr\"]\nzyx , wvu , tsr   are not correct 😂..\n\nExplanation:\nbecause we have to check as column wise so see each index 1st value with another index 1st value:\nlike\ncba \ndaf\nghi\n\nin see this each row 1st index\n1st column \"c , d , g\" c ASCII number smaller then d same with d is smaller then g they are sorted.\n\n2nd column \"b , a , h\" here b is grater then a so it will be delete.\n\n3rd column \"a , f , i\" here all r sorted a ASCII smaller then f and f is smaller then i.\n\nhere ASCII is a number of characters.\nrefer this link to know more about ASCII\nhttps://www.computerhope.com/jargon/a/ascii.htm\n\n\n\n"
                    },
                    {
                        "username": "yatharth-kumar",
                        "content": "Easy Problem Just Traverse The Grid Through The Columns"
                    },
                    {
                        "username": "kena",
                        "content": "Its actually row which needs to be sorted, not the column"
                    },
                    {
                        "username": "user5466Sr",
                        "content": "i think you are correct!\\n"
                    },
                    {
                        "username": "_horiZon_OP",
                        "content": "No, we need to find the number of columns which are not sorted."
                    },
                    {
                        "username": "leetcodefan",
                        "content": "The given problem now feels more like a programming exercise than a serious algorithm interview question.\\n\\nAs the title, I wonder if this problem is still solvable if the description is changed to `delete columns to make the remaining characters in every string sorted`?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "[@kunaljainwin](/kunaljainwin)  Lets make itmore interesting by adding \\n`\\nMinimum number of columns to be deleted.\\n`"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "for(auto &it:strs){\\nfor(int i=0;i<len-1;i++){\\nif(it[i]>it[i+1]){\\n// Delete that column , make of size len and mark i th colum as deleted\\n}\\n}\\n}"
                    },
                    {
                        "username": "qiushile",
                        "content": "yep, no corresponding issue in reality"
                    },
                    {
                        "username": "SalihE",
                        "content": "Really hard to undestand the problem. But solutions is so easy :)"
                    },
                    {
                        "username": "rahulranaa7",
                        "content": "Traversing the 2D array column-wise (n=strs.size(), m=strs[0].size() ) and compare characters strs[j][i] > strs[j+1][i]. \\nAny more than this might as well be a spoiler(if already isn\\'t) but not a bad problem."
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "Is there a mistake? Why in Example 1 \"cba\" is sorted and in the Example 3 \"zyx\" isn\\'t sorted? Can someone please clarify what do I need to implement because this task seems to me as ambiguous."
                    },
                    {
                        "username": "NightGamer01",
                        "content": "C++ Users \\uD83D\\uDE0E"
                    },
                    {
                        "username": "shushpanovdenis",
                        "content": "One of the easiest problems"
                    }
                ]
            },
            {
                "id": 1740128,
                "content": [
                    {
                        "username": "sarpalmadhav",
                        "content": "It would have helped more if it could have been mentioned that only ascending lexicographical order is desired, I guess descending order too qualifies as lexicographical but is not desired in this problem."
                    },
                    {
                        "username": "Finesse",
                        "content": "It is neither ascending nor descending, it's lexicographical. I.e. follows a predefined order (the English alphabet in this case). Letters aren't numbers, so they can't ascend or descend. What you call \"descending\" is actually reverse lexicographical order."
                    },
                    {
                        "username": "shailika",
                        "content": "Don't see array index value like in\nExample 1 Input: strs = [\"cba\",\"daf\",\"ghi\"]\nhere, cba is correct so why in\nExample 2 Input: strs = [\"zyx\",\"wvu\",\"tsr\"]\nzyx , wvu , tsr   are not correct 😂..\n\nExplanation:\nbecause we have to check as column wise so see each index 1st value with another index 1st value:\nlike\ncba \ndaf\nghi\n\nin see this each row 1st index\n1st column \"c , d , g\" c ASCII number smaller then d same with d is smaller then g they are sorted.\n\n2nd column \"b , a , h\" here b is grater then a so it will be delete.\n\n3rd column \"a , f , i\" here all r sorted a ASCII smaller then f and f is smaller then i.\n\nhere ASCII is a number of characters.\nrefer this link to know more about ASCII\nhttps://www.computerhope.com/jargon/a/ascii.htm\n\n\n\n"
                    },
                    {
                        "username": "yatharth-kumar",
                        "content": "Easy Problem Just Traverse The Grid Through The Columns"
                    },
                    {
                        "username": "kena",
                        "content": "Its actually row which needs to be sorted, not the column"
                    },
                    {
                        "username": "user5466Sr",
                        "content": "i think you are correct!\\n"
                    },
                    {
                        "username": "_horiZon_OP",
                        "content": "No, we need to find the number of columns which are not sorted."
                    },
                    {
                        "username": "leetcodefan",
                        "content": "The given problem now feels more like a programming exercise than a serious algorithm interview question.\\n\\nAs the title, I wonder if this problem is still solvable if the description is changed to `delete columns to make the remaining characters in every string sorted`?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "[@kunaljainwin](/kunaljainwin)  Lets make itmore interesting by adding \\n`\\nMinimum number of columns to be deleted.\\n`"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "for(auto &it:strs){\\nfor(int i=0;i<len-1;i++){\\nif(it[i]>it[i+1]){\\n// Delete that column , make of size len and mark i th colum as deleted\\n}\\n}\\n}"
                    },
                    {
                        "username": "qiushile",
                        "content": "yep, no corresponding issue in reality"
                    },
                    {
                        "username": "SalihE",
                        "content": "Really hard to undestand the problem. But solutions is so easy :)"
                    },
                    {
                        "username": "rahulranaa7",
                        "content": "Traversing the 2D array column-wise (n=strs.size(), m=strs[0].size() ) and compare characters strs[j][i] > strs[j+1][i]. \\nAny more than this might as well be a spoiler(if already isn\\'t) but not a bad problem."
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "Is there a mistake? Why in Example 1 \"cba\" is sorted and in the Example 3 \"zyx\" isn\\'t sorted? Can someone please clarify what do I need to implement because this task seems to me as ambiguous."
                    },
                    {
                        "username": "NightGamer01",
                        "content": "C++ Users \\uD83D\\uDE0E"
                    },
                    {
                        "username": "shushpanovdenis",
                        "content": "One of the easiest problems"
                    }
                ]
            },
            {
                "id": 1739150,
                "content": [
                    {
                        "username": "sarpalmadhav",
                        "content": "It would have helped more if it could have been mentioned that only ascending lexicographical order is desired, I guess descending order too qualifies as lexicographical but is not desired in this problem."
                    },
                    {
                        "username": "Finesse",
                        "content": "It is neither ascending nor descending, it's lexicographical. I.e. follows a predefined order (the English alphabet in this case). Letters aren't numbers, so they can't ascend or descend. What you call \"descending\" is actually reverse lexicographical order."
                    },
                    {
                        "username": "shailika",
                        "content": "Don't see array index value like in\nExample 1 Input: strs = [\"cba\",\"daf\",\"ghi\"]\nhere, cba is correct so why in\nExample 2 Input: strs = [\"zyx\",\"wvu\",\"tsr\"]\nzyx , wvu , tsr   are not correct 😂..\n\nExplanation:\nbecause we have to check as column wise so see each index 1st value with another index 1st value:\nlike\ncba \ndaf\nghi\n\nin see this each row 1st index\n1st column \"c , d , g\" c ASCII number smaller then d same with d is smaller then g they are sorted.\n\n2nd column \"b , a , h\" here b is grater then a so it will be delete.\n\n3rd column \"a , f , i\" here all r sorted a ASCII smaller then f and f is smaller then i.\n\nhere ASCII is a number of characters.\nrefer this link to know more about ASCII\nhttps://www.computerhope.com/jargon/a/ascii.htm\n\n\n\n"
                    },
                    {
                        "username": "yatharth-kumar",
                        "content": "Easy Problem Just Traverse The Grid Through The Columns"
                    },
                    {
                        "username": "kena",
                        "content": "Its actually row which needs to be sorted, not the column"
                    },
                    {
                        "username": "user5466Sr",
                        "content": "i think you are correct!\\n"
                    },
                    {
                        "username": "_horiZon_OP",
                        "content": "No, we need to find the number of columns which are not sorted."
                    },
                    {
                        "username": "leetcodefan",
                        "content": "The given problem now feels more like a programming exercise than a serious algorithm interview question.\\n\\nAs the title, I wonder if this problem is still solvable if the description is changed to `delete columns to make the remaining characters in every string sorted`?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "[@kunaljainwin](/kunaljainwin)  Lets make itmore interesting by adding \\n`\\nMinimum number of columns to be deleted.\\n`"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "for(auto &it:strs){\\nfor(int i=0;i<len-1;i++){\\nif(it[i]>it[i+1]){\\n// Delete that column , make of size len and mark i th colum as deleted\\n}\\n}\\n}"
                    },
                    {
                        "username": "qiushile",
                        "content": "yep, no corresponding issue in reality"
                    },
                    {
                        "username": "SalihE",
                        "content": "Really hard to undestand the problem. But solutions is so easy :)"
                    },
                    {
                        "username": "rahulranaa7",
                        "content": "Traversing the 2D array column-wise (n=strs.size(), m=strs[0].size() ) and compare characters strs[j][i] > strs[j+1][i]. \\nAny more than this might as well be a spoiler(if already isn\\'t) but not a bad problem."
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "Is there a mistake? Why in Example 1 \"cba\" is sorted and in the Example 3 \"zyx\" isn\\'t sorted? Can someone please clarify what do I need to implement because this task seems to me as ambiguous."
                    },
                    {
                        "username": "NightGamer01",
                        "content": "C++ Users \\uD83D\\uDE0E"
                    },
                    {
                        "username": "shushpanovdenis",
                        "content": "One of the easiest problems"
                    }
                ]
            },
            {
                "id": 1739116,
                "content": [
                    {
                        "username": "sarpalmadhav",
                        "content": "It would have helped more if it could have been mentioned that only ascending lexicographical order is desired, I guess descending order too qualifies as lexicographical but is not desired in this problem."
                    },
                    {
                        "username": "Finesse",
                        "content": "It is neither ascending nor descending, it's lexicographical. I.e. follows a predefined order (the English alphabet in this case). Letters aren't numbers, so they can't ascend or descend. What you call \"descending\" is actually reverse lexicographical order."
                    },
                    {
                        "username": "shailika",
                        "content": "Don't see array index value like in\nExample 1 Input: strs = [\"cba\",\"daf\",\"ghi\"]\nhere, cba is correct so why in\nExample 2 Input: strs = [\"zyx\",\"wvu\",\"tsr\"]\nzyx , wvu , tsr   are not correct 😂..\n\nExplanation:\nbecause we have to check as column wise so see each index 1st value with another index 1st value:\nlike\ncba \ndaf\nghi\n\nin see this each row 1st index\n1st column \"c , d , g\" c ASCII number smaller then d same with d is smaller then g they are sorted.\n\n2nd column \"b , a , h\" here b is grater then a so it will be delete.\n\n3rd column \"a , f , i\" here all r sorted a ASCII smaller then f and f is smaller then i.\n\nhere ASCII is a number of characters.\nrefer this link to know more about ASCII\nhttps://www.computerhope.com/jargon/a/ascii.htm\n\n\n\n"
                    },
                    {
                        "username": "yatharth-kumar",
                        "content": "Easy Problem Just Traverse The Grid Through The Columns"
                    },
                    {
                        "username": "kena",
                        "content": "Its actually row which needs to be sorted, not the column"
                    },
                    {
                        "username": "user5466Sr",
                        "content": "i think you are correct!\\n"
                    },
                    {
                        "username": "_horiZon_OP",
                        "content": "No, we need to find the number of columns which are not sorted."
                    },
                    {
                        "username": "leetcodefan",
                        "content": "The given problem now feels more like a programming exercise than a serious algorithm interview question.\\n\\nAs the title, I wonder if this problem is still solvable if the description is changed to `delete columns to make the remaining characters in every string sorted`?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "[@kunaljainwin](/kunaljainwin)  Lets make itmore interesting by adding \\n`\\nMinimum number of columns to be deleted.\\n`"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "for(auto &it:strs){\\nfor(int i=0;i<len-1;i++){\\nif(it[i]>it[i+1]){\\n// Delete that column , make of size len and mark i th colum as deleted\\n}\\n}\\n}"
                    },
                    {
                        "username": "qiushile",
                        "content": "yep, no corresponding issue in reality"
                    },
                    {
                        "username": "SalihE",
                        "content": "Really hard to undestand the problem. But solutions is so easy :)"
                    },
                    {
                        "username": "rahulranaa7",
                        "content": "Traversing the 2D array column-wise (n=strs.size(), m=strs[0].size() ) and compare characters strs[j][i] > strs[j+1][i]. \\nAny more than this might as well be a spoiler(if already isn\\'t) but not a bad problem."
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "Is there a mistake? Why in Example 1 \"cba\" is sorted and in the Example 3 \"zyx\" isn\\'t sorted? Can someone please clarify what do I need to implement because this task seems to me as ambiguous."
                    },
                    {
                        "username": "NightGamer01",
                        "content": "C++ Users \\uD83D\\uDE0E"
                    },
                    {
                        "username": "shushpanovdenis",
                        "content": "One of the easiest problems"
                    }
                ]
            },
            {
                "id": 1569400,
                "content": [
                    {
                        "username": "sarpalmadhav",
                        "content": "It would have helped more if it could have been mentioned that only ascending lexicographical order is desired, I guess descending order too qualifies as lexicographical but is not desired in this problem."
                    },
                    {
                        "username": "Finesse",
                        "content": "It is neither ascending nor descending, it's lexicographical. I.e. follows a predefined order (the English alphabet in this case). Letters aren't numbers, so they can't ascend or descend. What you call \"descending\" is actually reverse lexicographical order."
                    },
                    {
                        "username": "shailika",
                        "content": "Don't see array index value like in\nExample 1 Input: strs = [\"cba\",\"daf\",\"ghi\"]\nhere, cba is correct so why in\nExample 2 Input: strs = [\"zyx\",\"wvu\",\"tsr\"]\nzyx , wvu , tsr   are not correct 😂..\n\nExplanation:\nbecause we have to check as column wise so see each index 1st value with another index 1st value:\nlike\ncba \ndaf\nghi\n\nin see this each row 1st index\n1st column \"c , d , g\" c ASCII number smaller then d same with d is smaller then g they are sorted.\n\n2nd column \"b , a , h\" here b is grater then a so it will be delete.\n\n3rd column \"a , f , i\" here all r sorted a ASCII smaller then f and f is smaller then i.\n\nhere ASCII is a number of characters.\nrefer this link to know more about ASCII\nhttps://www.computerhope.com/jargon/a/ascii.htm\n\n\n\n"
                    },
                    {
                        "username": "yatharth-kumar",
                        "content": "Easy Problem Just Traverse The Grid Through The Columns"
                    },
                    {
                        "username": "kena",
                        "content": "Its actually row which needs to be sorted, not the column"
                    },
                    {
                        "username": "user5466Sr",
                        "content": "i think you are correct!\\n"
                    },
                    {
                        "username": "_horiZon_OP",
                        "content": "No, we need to find the number of columns which are not sorted."
                    },
                    {
                        "username": "leetcodefan",
                        "content": "The given problem now feels more like a programming exercise than a serious algorithm interview question.\\n\\nAs the title, I wonder if this problem is still solvable if the description is changed to `delete columns to make the remaining characters in every string sorted`?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "[@kunaljainwin](/kunaljainwin)  Lets make itmore interesting by adding \\n`\\nMinimum number of columns to be deleted.\\n`"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "for(auto &it:strs){\\nfor(int i=0;i<len-1;i++){\\nif(it[i]>it[i+1]){\\n// Delete that column , make of size len and mark i th colum as deleted\\n}\\n}\\n}"
                    },
                    {
                        "username": "qiushile",
                        "content": "yep, no corresponding issue in reality"
                    },
                    {
                        "username": "SalihE",
                        "content": "Really hard to undestand the problem. But solutions is so easy :)"
                    },
                    {
                        "username": "rahulranaa7",
                        "content": "Traversing the 2D array column-wise (n=strs.size(), m=strs[0].size() ) and compare characters strs[j][i] > strs[j+1][i]. \\nAny more than this might as well be a spoiler(if already isn\\'t) but not a bad problem."
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "Is there a mistake? Why in Example 1 \"cba\" is sorted and in the Example 3 \"zyx\" isn\\'t sorted? Can someone please clarify what do I need to implement because this task seems to me as ambiguous."
                    },
                    {
                        "username": "NightGamer01",
                        "content": "C++ Users \\uD83D\\uDE0E"
                    },
                    {
                        "username": "shushpanovdenis",
                        "content": "One of the easiest problems"
                    }
                ]
            },
            {
                "id": 1572550,
                "content": [
                    {
                        "username": "sarpalmadhav",
                        "content": "It would have helped more if it could have been mentioned that only ascending lexicographical order is desired, I guess descending order too qualifies as lexicographical but is not desired in this problem."
                    },
                    {
                        "username": "Finesse",
                        "content": "It is neither ascending nor descending, it's lexicographical. I.e. follows a predefined order (the English alphabet in this case). Letters aren't numbers, so they can't ascend or descend. What you call \"descending\" is actually reverse lexicographical order."
                    },
                    {
                        "username": "shailika",
                        "content": "Don't see array index value like in\nExample 1 Input: strs = [\"cba\",\"daf\",\"ghi\"]\nhere, cba is correct so why in\nExample 2 Input: strs = [\"zyx\",\"wvu\",\"tsr\"]\nzyx , wvu , tsr   are not correct 😂..\n\nExplanation:\nbecause we have to check as column wise so see each index 1st value with another index 1st value:\nlike\ncba \ndaf\nghi\n\nin see this each row 1st index\n1st column \"c , d , g\" c ASCII number smaller then d same with d is smaller then g they are sorted.\n\n2nd column \"b , a , h\" here b is grater then a so it will be delete.\n\n3rd column \"a , f , i\" here all r sorted a ASCII smaller then f and f is smaller then i.\n\nhere ASCII is a number of characters.\nrefer this link to know more about ASCII\nhttps://www.computerhope.com/jargon/a/ascii.htm\n\n\n\n"
                    },
                    {
                        "username": "yatharth-kumar",
                        "content": "Easy Problem Just Traverse The Grid Through The Columns"
                    },
                    {
                        "username": "kena",
                        "content": "Its actually row which needs to be sorted, not the column"
                    },
                    {
                        "username": "user5466Sr",
                        "content": "i think you are correct!\\n"
                    },
                    {
                        "username": "_horiZon_OP",
                        "content": "No, we need to find the number of columns which are not sorted."
                    },
                    {
                        "username": "leetcodefan",
                        "content": "The given problem now feels more like a programming exercise than a serious algorithm interview question.\\n\\nAs the title, I wonder if this problem is still solvable if the description is changed to `delete columns to make the remaining characters in every string sorted`?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "[@kunaljainwin](/kunaljainwin)  Lets make itmore interesting by adding \\n`\\nMinimum number of columns to be deleted.\\n`"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "for(auto &it:strs){\\nfor(int i=0;i<len-1;i++){\\nif(it[i]>it[i+1]){\\n// Delete that column , make of size len and mark i th colum as deleted\\n}\\n}\\n}"
                    },
                    {
                        "username": "qiushile",
                        "content": "yep, no corresponding issue in reality"
                    },
                    {
                        "username": "SalihE",
                        "content": "Really hard to undestand the problem. But solutions is so easy :)"
                    },
                    {
                        "username": "rahulranaa7",
                        "content": "Traversing the 2D array column-wise (n=strs.size(), m=strs[0].size() ) and compare characters strs[j][i] > strs[j+1][i]. \\nAny more than this might as well be a spoiler(if already isn\\'t) but not a bad problem."
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "Is there a mistake? Why in Example 1 \"cba\" is sorted and in the Example 3 \"zyx\" isn\\'t sorted? Can someone please clarify what do I need to implement because this task seems to me as ambiguous."
                    },
                    {
                        "username": "NightGamer01",
                        "content": "C++ Users \\uD83D\\uDE0E"
                    },
                    {
                        "username": "shushpanovdenis",
                        "content": "One of the easiest problems"
                    }
                ]
            },
            {
                "id": 1961285,
                "content": [
                    {
                        "username": "sarpalmadhav",
                        "content": "It would have helped more if it could have been mentioned that only ascending lexicographical order is desired, I guess descending order too qualifies as lexicographical but is not desired in this problem."
                    },
                    {
                        "username": "Finesse",
                        "content": "It is neither ascending nor descending, it's lexicographical. I.e. follows a predefined order (the English alphabet in this case). Letters aren't numbers, so they can't ascend or descend. What you call \"descending\" is actually reverse lexicographical order."
                    },
                    {
                        "username": "shailika",
                        "content": "Don't see array index value like in\nExample 1 Input: strs = [\"cba\",\"daf\",\"ghi\"]\nhere, cba is correct so why in\nExample 2 Input: strs = [\"zyx\",\"wvu\",\"tsr\"]\nzyx , wvu , tsr   are not correct 😂..\n\nExplanation:\nbecause we have to check as column wise so see each index 1st value with another index 1st value:\nlike\ncba \ndaf\nghi\n\nin see this each row 1st index\n1st column \"c , d , g\" c ASCII number smaller then d same with d is smaller then g they are sorted.\n\n2nd column \"b , a , h\" here b is grater then a so it will be delete.\n\n3rd column \"a , f , i\" here all r sorted a ASCII smaller then f and f is smaller then i.\n\nhere ASCII is a number of characters.\nrefer this link to know more about ASCII\nhttps://www.computerhope.com/jargon/a/ascii.htm\n\n\n\n"
                    },
                    {
                        "username": "yatharth-kumar",
                        "content": "Easy Problem Just Traverse The Grid Through The Columns"
                    },
                    {
                        "username": "kena",
                        "content": "Its actually row which needs to be sorted, not the column"
                    },
                    {
                        "username": "user5466Sr",
                        "content": "i think you are correct!\\n"
                    },
                    {
                        "username": "_horiZon_OP",
                        "content": "No, we need to find the number of columns which are not sorted."
                    },
                    {
                        "username": "leetcodefan",
                        "content": "The given problem now feels more like a programming exercise than a serious algorithm interview question.\\n\\nAs the title, I wonder if this problem is still solvable if the description is changed to `delete columns to make the remaining characters in every string sorted`?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "[@kunaljainwin](/kunaljainwin)  Lets make itmore interesting by adding \\n`\\nMinimum number of columns to be deleted.\\n`"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "for(auto &it:strs){\\nfor(int i=0;i<len-1;i++){\\nif(it[i]>it[i+1]){\\n// Delete that column , make of size len and mark i th colum as deleted\\n}\\n}\\n}"
                    },
                    {
                        "username": "qiushile",
                        "content": "yep, no corresponding issue in reality"
                    },
                    {
                        "username": "SalihE",
                        "content": "Really hard to undestand the problem. But solutions is so easy :)"
                    },
                    {
                        "username": "rahulranaa7",
                        "content": "Traversing the 2D array column-wise (n=strs.size(), m=strs[0].size() ) and compare characters strs[j][i] > strs[j+1][i]. \\nAny more than this might as well be a spoiler(if already isn\\'t) but not a bad problem."
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "Is there a mistake? Why in Example 1 \"cba\" is sorted and in the Example 3 \"zyx\" isn\\'t sorted? Can someone please clarify what do I need to implement because this task seems to me as ambiguous."
                    },
                    {
                        "username": "NightGamer01",
                        "content": "C++ Users \\uD83D\\uDE0E"
                    },
                    {
                        "username": "shushpanovdenis",
                        "content": "One of the easiest problems"
                    }
                ]
            },
            {
                "id": 1958841,
                "content": [
                    {
                        "username": "sarpalmadhav",
                        "content": "It would have helped more if it could have been mentioned that only ascending lexicographical order is desired, I guess descending order too qualifies as lexicographical but is not desired in this problem."
                    },
                    {
                        "username": "Finesse",
                        "content": "It is neither ascending nor descending, it's lexicographical. I.e. follows a predefined order (the English alphabet in this case). Letters aren't numbers, so they can't ascend or descend. What you call \"descending\" is actually reverse lexicographical order."
                    },
                    {
                        "username": "shailika",
                        "content": "Don't see array index value like in\nExample 1 Input: strs = [\"cba\",\"daf\",\"ghi\"]\nhere, cba is correct so why in\nExample 2 Input: strs = [\"zyx\",\"wvu\",\"tsr\"]\nzyx , wvu , tsr   are not correct 😂..\n\nExplanation:\nbecause we have to check as column wise so see each index 1st value with another index 1st value:\nlike\ncba \ndaf\nghi\n\nin see this each row 1st index\n1st column \"c , d , g\" c ASCII number smaller then d same with d is smaller then g they are sorted.\n\n2nd column \"b , a , h\" here b is grater then a so it will be delete.\n\n3rd column \"a , f , i\" here all r sorted a ASCII smaller then f and f is smaller then i.\n\nhere ASCII is a number of characters.\nrefer this link to know more about ASCII\nhttps://www.computerhope.com/jargon/a/ascii.htm\n\n\n\n"
                    },
                    {
                        "username": "yatharth-kumar",
                        "content": "Easy Problem Just Traverse The Grid Through The Columns"
                    },
                    {
                        "username": "kena",
                        "content": "Its actually row which needs to be sorted, not the column"
                    },
                    {
                        "username": "user5466Sr",
                        "content": "i think you are correct!\\n"
                    },
                    {
                        "username": "_horiZon_OP",
                        "content": "No, we need to find the number of columns which are not sorted."
                    },
                    {
                        "username": "leetcodefan",
                        "content": "The given problem now feels more like a programming exercise than a serious algorithm interview question.\\n\\nAs the title, I wonder if this problem is still solvable if the description is changed to `delete columns to make the remaining characters in every string sorted`?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "[@kunaljainwin](/kunaljainwin)  Lets make itmore interesting by adding \\n`\\nMinimum number of columns to be deleted.\\n`"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "for(auto &it:strs){\\nfor(int i=0;i<len-1;i++){\\nif(it[i]>it[i+1]){\\n// Delete that column , make of size len and mark i th colum as deleted\\n}\\n}\\n}"
                    },
                    {
                        "username": "qiushile",
                        "content": "yep, no corresponding issue in reality"
                    },
                    {
                        "username": "SalihE",
                        "content": "Really hard to undestand the problem. But solutions is so easy :)"
                    },
                    {
                        "username": "rahulranaa7",
                        "content": "Traversing the 2D array column-wise (n=strs.size(), m=strs[0].size() ) and compare characters strs[j][i] > strs[j+1][i]. \\nAny more than this might as well be a spoiler(if already isn\\'t) but not a bad problem."
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "Is there a mistake? Why in Example 1 \"cba\" is sorted and in the Example 3 \"zyx\" isn\\'t sorted? Can someone please clarify what do I need to implement because this task seems to me as ambiguous."
                    },
                    {
                        "username": "NightGamer01",
                        "content": "C++ Users \\uD83D\\uDE0E"
                    },
                    {
                        "username": "shushpanovdenis",
                        "content": "One of the easiest problems"
                    }
                ]
            },
            {
                "id": 1958633,
                "content": [
                    {
                        "username": "sarpalmadhav",
                        "content": "It would have helped more if it could have been mentioned that only ascending lexicographical order is desired, I guess descending order too qualifies as lexicographical but is not desired in this problem."
                    },
                    {
                        "username": "Finesse",
                        "content": "It is neither ascending nor descending, it's lexicographical. I.e. follows a predefined order (the English alphabet in this case). Letters aren't numbers, so they can't ascend or descend. What you call \"descending\" is actually reverse lexicographical order."
                    },
                    {
                        "username": "shailika",
                        "content": "Don't see array index value like in\nExample 1 Input: strs = [\"cba\",\"daf\",\"ghi\"]\nhere, cba is correct so why in\nExample 2 Input: strs = [\"zyx\",\"wvu\",\"tsr\"]\nzyx , wvu , tsr   are not correct 😂..\n\nExplanation:\nbecause we have to check as column wise so see each index 1st value with another index 1st value:\nlike\ncba \ndaf\nghi\n\nin see this each row 1st index\n1st column \"c , d , g\" c ASCII number smaller then d same with d is smaller then g they are sorted.\n\n2nd column \"b , a , h\" here b is grater then a so it will be delete.\n\n3rd column \"a , f , i\" here all r sorted a ASCII smaller then f and f is smaller then i.\n\nhere ASCII is a number of characters.\nrefer this link to know more about ASCII\nhttps://www.computerhope.com/jargon/a/ascii.htm\n\n\n\n"
                    },
                    {
                        "username": "yatharth-kumar",
                        "content": "Easy Problem Just Traverse The Grid Through The Columns"
                    },
                    {
                        "username": "kena",
                        "content": "Its actually row which needs to be sorted, not the column"
                    },
                    {
                        "username": "user5466Sr",
                        "content": "i think you are correct!\\n"
                    },
                    {
                        "username": "_horiZon_OP",
                        "content": "No, we need to find the number of columns which are not sorted."
                    },
                    {
                        "username": "leetcodefan",
                        "content": "The given problem now feels more like a programming exercise than a serious algorithm interview question.\\n\\nAs the title, I wonder if this problem is still solvable if the description is changed to `delete columns to make the remaining characters in every string sorted`?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "[@kunaljainwin](/kunaljainwin)  Lets make itmore interesting by adding \\n`\\nMinimum number of columns to be deleted.\\n`"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "for(auto &it:strs){\\nfor(int i=0;i<len-1;i++){\\nif(it[i]>it[i+1]){\\n// Delete that column , make of size len and mark i th colum as deleted\\n}\\n}\\n}"
                    },
                    {
                        "username": "qiushile",
                        "content": "yep, no corresponding issue in reality"
                    },
                    {
                        "username": "SalihE",
                        "content": "Really hard to undestand the problem. But solutions is so easy :)"
                    },
                    {
                        "username": "rahulranaa7",
                        "content": "Traversing the 2D array column-wise (n=strs.size(), m=strs[0].size() ) and compare characters strs[j][i] > strs[j+1][i]. \\nAny more than this might as well be a spoiler(if already isn\\'t) but not a bad problem."
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "Is there a mistake? Why in Example 1 \"cba\" is sorted and in the Example 3 \"zyx\" isn\\'t sorted? Can someone please clarify what do I need to implement because this task seems to me as ambiguous."
                    },
                    {
                        "username": "NightGamer01",
                        "content": "C++ Users \\uD83D\\uDE0E"
                    },
                    {
                        "username": "shushpanovdenis",
                        "content": "One of the easiest problems"
                    }
                ]
            },
            {
                "id": 1913130,
                "content": [
                    {
                        "username": "sarpalmadhav",
                        "content": "It would have helped more if it could have been mentioned that only ascending lexicographical order is desired, I guess descending order too qualifies as lexicographical but is not desired in this problem."
                    },
                    {
                        "username": "Finesse",
                        "content": "It is neither ascending nor descending, it's lexicographical. I.e. follows a predefined order (the English alphabet in this case). Letters aren't numbers, so they can't ascend or descend. What you call \"descending\" is actually reverse lexicographical order."
                    },
                    {
                        "username": "shailika",
                        "content": "Don't see array index value like in\nExample 1 Input: strs = [\"cba\",\"daf\",\"ghi\"]\nhere, cba is correct so why in\nExample 2 Input: strs = [\"zyx\",\"wvu\",\"tsr\"]\nzyx , wvu , tsr   are not correct 😂..\n\nExplanation:\nbecause we have to check as column wise so see each index 1st value with another index 1st value:\nlike\ncba \ndaf\nghi\n\nin see this each row 1st index\n1st column \"c , d , g\" c ASCII number smaller then d same with d is smaller then g they are sorted.\n\n2nd column \"b , a , h\" here b is grater then a so it will be delete.\n\n3rd column \"a , f , i\" here all r sorted a ASCII smaller then f and f is smaller then i.\n\nhere ASCII is a number of characters.\nrefer this link to know more about ASCII\nhttps://www.computerhope.com/jargon/a/ascii.htm\n\n\n\n"
                    },
                    {
                        "username": "yatharth-kumar",
                        "content": "Easy Problem Just Traverse The Grid Through The Columns"
                    },
                    {
                        "username": "kena",
                        "content": "Its actually row which needs to be sorted, not the column"
                    },
                    {
                        "username": "user5466Sr",
                        "content": "i think you are correct!\\n"
                    },
                    {
                        "username": "_horiZon_OP",
                        "content": "No, we need to find the number of columns which are not sorted."
                    },
                    {
                        "username": "leetcodefan",
                        "content": "The given problem now feels more like a programming exercise than a serious algorithm interview question.\\n\\nAs the title, I wonder if this problem is still solvable if the description is changed to `delete columns to make the remaining characters in every string sorted`?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "[@kunaljainwin](/kunaljainwin)  Lets make itmore interesting by adding \\n`\\nMinimum number of columns to be deleted.\\n`"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "for(auto &it:strs){\\nfor(int i=0;i<len-1;i++){\\nif(it[i]>it[i+1]){\\n// Delete that column , make of size len and mark i th colum as deleted\\n}\\n}\\n}"
                    },
                    {
                        "username": "qiushile",
                        "content": "yep, no corresponding issue in reality"
                    },
                    {
                        "username": "SalihE",
                        "content": "Really hard to undestand the problem. But solutions is so easy :)"
                    },
                    {
                        "username": "rahulranaa7",
                        "content": "Traversing the 2D array column-wise (n=strs.size(), m=strs[0].size() ) and compare characters strs[j][i] > strs[j+1][i]. \\nAny more than this might as well be a spoiler(if already isn\\'t) but not a bad problem."
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "Is there a mistake? Why in Example 1 \"cba\" is sorted and in the Example 3 \"zyx\" isn\\'t sorted? Can someone please clarify what do I need to implement because this task seems to me as ambiguous."
                    },
                    {
                        "username": "NightGamer01",
                        "content": "C++ Users \\uD83D\\uDE0E"
                    },
                    {
                        "username": "shushpanovdenis",
                        "content": "One of the easiest problems"
                    }
                ]
            },
            {
                "id": 1779306,
                "content": [
                    {
                        "username": "harshilnashier",
                        "content": "can it be solved with time complexity that is better than O(n^2)?"
                    },
                    {
                        "username": "ganesh254",
                        "content": "class Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        count = 0\\n        n = len(strs)\\n        m = len(strs[0])\\n        for i in range(0, m):\\n            for j in range(0,n-1):\\n                if strs[j][i] > strs[j+1][i]:\\n                    count += 1\\n                    break\\n        return count"
                    },
                    {
                        "username": "tradingpractice2122",
                        "content": "Why so many dislikes on the problem? Just transpose matrix and check each row for i+1-th element being greater or equal than i-th. Check my solution if don\\'t get the idea."
                    },
                    {
                        "username": "bharatjoshics",
                        "content": "Step 1. Initialize a counter to 0\\nStep 2. Start a loop from 0th index example \\'j\\'\\nStep 3. Start second loop inside first loop from 1st index example \\'i\\'\\nStep 4. Compare if [i][j]<[i-1][j]\\nStep 5. If yes then make your counter +1 and break \\nStep 6. At the end , return your counter"
                    },
                    {
                        "username": "Loreee",
                        "content": "If we had to delete the columns that are not sorted lexicographically, and not only show the number of those columns, what would we use? When we find a column that is not sorted, can we use memmove to move the content of each string after the index  of that column to the left with one letter? Is this a good idea? If it is can someone please show me how the arguments of memmove would look like for this? "
                    },
                    {
                        "username": "Siroj910",
                        "content": "There is a problem in expected: \\ninput: [\"cba\",\"daf\",\"ghi\"] -> in sorted it will be [\\'abc\\', \\'adf\\', \\'ghi\\'], \\nand result will be 2 because \"abc\" and \"daf\" is wrong, but expected 1, who can explain it? In my view my result is true"
                    },
                    {
                        "username": "deleted_user",
                        "content": "# Intuition\\n- To be in lexicographic order, each character in the column should be equal to or greater than the corresponding character in the previous row.\\n- Therefore, we will iterate over the columns and for each column, we will iterate over the rows starting from index `1` (not zero, as we will compare the character to the character in the previous row). We will then increment the count of unsorted columns every time we observe a character smaller than the character in the previous row.\\n\\n---\\n\\n\\n# Approach\\n- Initialize the delete count to `0`.\\n- Get the number of rows (`r`) and columns (`c`).\\n- If the current element is lexicographically smaller than the previous element, increment the delete count and break out of the loop\\n\\n---\\n\\n\\n# Complexity\\n- Time Complexity\\n$$O(n*m)$$ \\n\\n- Space Complexity\\n$$O(1)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | Matrix | Pointers](https://leetcode.com/problems/delete-columns-to-make-sorted/solutions/2994341/java-easy-100-fast-solution-matrix-pointers/)"
                    },
                    {
                        "username": "ckcjc",
                        "content": " ```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0; \\n        for(int i= 0; i < strs[0].length(); i++){\\n            for(int j = 0; j< strs.length - 1; j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n"
                    },
                    {
                        "username": "pratham95484",
                        "content": " `your inline code...your inline code...` \\nstatic public int minDeletionSize(String[] str) {\\n      \\n       int counts=0,countus=0;\\n       for(int i=0;i<str.length;i++)\\n       {    \\n           char[] a = str[i].toCharArray();\\n           int count=0;\\n           for(int j=0;j<a.length;j++)\\n           {\\n               for(int k=j+1;k<a.length;k++)\\n               {\\n                   int first=(int)a[j];\\n                   int second=(int)a[k];\\n                   if(first>second)\\n                   {\\n                       count++;\\n                   }\\n               }\\n           }\\n           if(count==a.length)\\n           {\\n               counts++;\\n           }\\n           \\n       }\\n       return counts;\\n    }\\n    public static void main(String [] args)\\n    {\\n String [] str = {\"cba\",\"daf\",\"ghi\"}; \\n    int result =Solution.minDeletionSize(str);\\n    System.out.println(result);\\n    }"
                    },
                    {
                        "username": "nxabdullah",
                        "content": "Hint: think of it as a 2D array (or a matrix) problem"
                    }
                ]
            },
            {
                "id": 1765162,
                "content": [
                    {
                        "username": "harshilnashier",
                        "content": "can it be solved with time complexity that is better than O(n^2)?"
                    },
                    {
                        "username": "ganesh254",
                        "content": "class Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        count = 0\\n        n = len(strs)\\n        m = len(strs[0])\\n        for i in range(0, m):\\n            for j in range(0,n-1):\\n                if strs[j][i] > strs[j+1][i]:\\n                    count += 1\\n                    break\\n        return count"
                    },
                    {
                        "username": "tradingpractice2122",
                        "content": "Why so many dislikes on the problem? Just transpose matrix and check each row for i+1-th element being greater or equal than i-th. Check my solution if don\\'t get the idea."
                    },
                    {
                        "username": "bharatjoshics",
                        "content": "Step 1. Initialize a counter to 0\\nStep 2. Start a loop from 0th index example \\'j\\'\\nStep 3. Start second loop inside first loop from 1st index example \\'i\\'\\nStep 4. Compare if [i][j]<[i-1][j]\\nStep 5. If yes then make your counter +1 and break \\nStep 6. At the end , return your counter"
                    },
                    {
                        "username": "Loreee",
                        "content": "If we had to delete the columns that are not sorted lexicographically, and not only show the number of those columns, what would we use? When we find a column that is not sorted, can we use memmove to move the content of each string after the index  of that column to the left with one letter? Is this a good idea? If it is can someone please show me how the arguments of memmove would look like for this? "
                    },
                    {
                        "username": "Siroj910",
                        "content": "There is a problem in expected: \\ninput: [\"cba\",\"daf\",\"ghi\"] -> in sorted it will be [\\'abc\\', \\'adf\\', \\'ghi\\'], \\nand result will be 2 because \"abc\" and \"daf\" is wrong, but expected 1, who can explain it? In my view my result is true"
                    },
                    {
                        "username": "deleted_user",
                        "content": "# Intuition\\n- To be in lexicographic order, each character in the column should be equal to or greater than the corresponding character in the previous row.\\n- Therefore, we will iterate over the columns and for each column, we will iterate over the rows starting from index `1` (not zero, as we will compare the character to the character in the previous row). We will then increment the count of unsorted columns every time we observe a character smaller than the character in the previous row.\\n\\n---\\n\\n\\n# Approach\\n- Initialize the delete count to `0`.\\n- Get the number of rows (`r`) and columns (`c`).\\n- If the current element is lexicographically smaller than the previous element, increment the delete count and break out of the loop\\n\\n---\\n\\n\\n# Complexity\\n- Time Complexity\\n$$O(n*m)$$ \\n\\n- Space Complexity\\n$$O(1)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | Matrix | Pointers](https://leetcode.com/problems/delete-columns-to-make-sorted/solutions/2994341/java-easy-100-fast-solution-matrix-pointers/)"
                    },
                    {
                        "username": "ckcjc",
                        "content": " ```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0; \\n        for(int i= 0; i < strs[0].length(); i++){\\n            for(int j = 0; j< strs.length - 1; j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n"
                    },
                    {
                        "username": "pratham95484",
                        "content": " `your inline code...your inline code...` \\nstatic public int minDeletionSize(String[] str) {\\n      \\n       int counts=0,countus=0;\\n       for(int i=0;i<str.length;i++)\\n       {    \\n           char[] a = str[i].toCharArray();\\n           int count=0;\\n           for(int j=0;j<a.length;j++)\\n           {\\n               for(int k=j+1;k<a.length;k++)\\n               {\\n                   int first=(int)a[j];\\n                   int second=(int)a[k];\\n                   if(first>second)\\n                   {\\n                       count++;\\n                   }\\n               }\\n           }\\n           if(count==a.length)\\n           {\\n               counts++;\\n           }\\n           \\n       }\\n       return counts;\\n    }\\n    public static void main(String [] args)\\n    {\\n String [] str = {\"cba\",\"daf\",\"ghi\"}; \\n    int result =Solution.minDeletionSize(str);\\n    System.out.println(result);\\n    }"
                    },
                    {
                        "username": "nxabdullah",
                        "content": "Hint: think of it as a 2D array (or a matrix) problem"
                    }
                ]
            },
            {
                "id": 1750348,
                "content": [
                    {
                        "username": "harshilnashier",
                        "content": "can it be solved with time complexity that is better than O(n^2)?"
                    },
                    {
                        "username": "ganesh254",
                        "content": "class Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        count = 0\\n        n = len(strs)\\n        m = len(strs[0])\\n        for i in range(0, m):\\n            for j in range(0,n-1):\\n                if strs[j][i] > strs[j+1][i]:\\n                    count += 1\\n                    break\\n        return count"
                    },
                    {
                        "username": "tradingpractice2122",
                        "content": "Why so many dislikes on the problem? Just transpose matrix and check each row for i+1-th element being greater or equal than i-th. Check my solution if don\\'t get the idea."
                    },
                    {
                        "username": "bharatjoshics",
                        "content": "Step 1. Initialize a counter to 0\\nStep 2. Start a loop from 0th index example \\'j\\'\\nStep 3. Start second loop inside first loop from 1st index example \\'i\\'\\nStep 4. Compare if [i][j]<[i-1][j]\\nStep 5. If yes then make your counter +1 and break \\nStep 6. At the end , return your counter"
                    },
                    {
                        "username": "Loreee",
                        "content": "If we had to delete the columns that are not sorted lexicographically, and not only show the number of those columns, what would we use? When we find a column that is not sorted, can we use memmove to move the content of each string after the index  of that column to the left with one letter? Is this a good idea? If it is can someone please show me how the arguments of memmove would look like for this? "
                    },
                    {
                        "username": "Siroj910",
                        "content": "There is a problem in expected: \\ninput: [\"cba\",\"daf\",\"ghi\"] -> in sorted it will be [\\'abc\\', \\'adf\\', \\'ghi\\'], \\nand result will be 2 because \"abc\" and \"daf\" is wrong, but expected 1, who can explain it? In my view my result is true"
                    },
                    {
                        "username": "deleted_user",
                        "content": "# Intuition\\n- To be in lexicographic order, each character in the column should be equal to or greater than the corresponding character in the previous row.\\n- Therefore, we will iterate over the columns and for each column, we will iterate over the rows starting from index `1` (not zero, as we will compare the character to the character in the previous row). We will then increment the count of unsorted columns every time we observe a character smaller than the character in the previous row.\\n\\n---\\n\\n\\n# Approach\\n- Initialize the delete count to `0`.\\n- Get the number of rows (`r`) and columns (`c`).\\n- If the current element is lexicographically smaller than the previous element, increment the delete count and break out of the loop\\n\\n---\\n\\n\\n# Complexity\\n- Time Complexity\\n$$O(n*m)$$ \\n\\n- Space Complexity\\n$$O(1)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | Matrix | Pointers](https://leetcode.com/problems/delete-columns-to-make-sorted/solutions/2994341/java-easy-100-fast-solution-matrix-pointers/)"
                    },
                    {
                        "username": "ckcjc",
                        "content": " ```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0; \\n        for(int i= 0; i < strs[0].length(); i++){\\n            for(int j = 0; j< strs.length - 1; j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n"
                    },
                    {
                        "username": "pratham95484",
                        "content": " `your inline code...your inline code...` \\nstatic public int minDeletionSize(String[] str) {\\n      \\n       int counts=0,countus=0;\\n       for(int i=0;i<str.length;i++)\\n       {    \\n           char[] a = str[i].toCharArray();\\n           int count=0;\\n           for(int j=0;j<a.length;j++)\\n           {\\n               for(int k=j+1;k<a.length;k++)\\n               {\\n                   int first=(int)a[j];\\n                   int second=(int)a[k];\\n                   if(first>second)\\n                   {\\n                       count++;\\n                   }\\n               }\\n           }\\n           if(count==a.length)\\n           {\\n               counts++;\\n           }\\n           \\n       }\\n       return counts;\\n    }\\n    public static void main(String [] args)\\n    {\\n String [] str = {\"cba\",\"daf\",\"ghi\"}; \\n    int result =Solution.minDeletionSize(str);\\n    System.out.println(result);\\n    }"
                    },
                    {
                        "username": "nxabdullah",
                        "content": "Hint: think of it as a 2D array (or a matrix) problem"
                    }
                ]
            },
            {
                "id": 1744641,
                "content": [
                    {
                        "username": "harshilnashier",
                        "content": "can it be solved with time complexity that is better than O(n^2)?"
                    },
                    {
                        "username": "ganesh254",
                        "content": "class Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        count = 0\\n        n = len(strs)\\n        m = len(strs[0])\\n        for i in range(0, m):\\n            for j in range(0,n-1):\\n                if strs[j][i] > strs[j+1][i]:\\n                    count += 1\\n                    break\\n        return count"
                    },
                    {
                        "username": "tradingpractice2122",
                        "content": "Why so many dislikes on the problem? Just transpose matrix and check each row for i+1-th element being greater or equal than i-th. Check my solution if don\\'t get the idea."
                    },
                    {
                        "username": "bharatjoshics",
                        "content": "Step 1. Initialize a counter to 0\\nStep 2. Start a loop from 0th index example \\'j\\'\\nStep 3. Start second loop inside first loop from 1st index example \\'i\\'\\nStep 4. Compare if [i][j]<[i-1][j]\\nStep 5. If yes then make your counter +1 and break \\nStep 6. At the end , return your counter"
                    },
                    {
                        "username": "Loreee",
                        "content": "If we had to delete the columns that are not sorted lexicographically, and not only show the number of those columns, what would we use? When we find a column that is not sorted, can we use memmove to move the content of each string after the index  of that column to the left with one letter? Is this a good idea? If it is can someone please show me how the arguments of memmove would look like for this? "
                    },
                    {
                        "username": "Siroj910",
                        "content": "There is a problem in expected: \\ninput: [\"cba\",\"daf\",\"ghi\"] -> in sorted it will be [\\'abc\\', \\'adf\\', \\'ghi\\'], \\nand result will be 2 because \"abc\" and \"daf\" is wrong, but expected 1, who can explain it? In my view my result is true"
                    },
                    {
                        "username": "deleted_user",
                        "content": "# Intuition\\n- To be in lexicographic order, each character in the column should be equal to or greater than the corresponding character in the previous row.\\n- Therefore, we will iterate over the columns and for each column, we will iterate over the rows starting from index `1` (not zero, as we will compare the character to the character in the previous row). We will then increment the count of unsorted columns every time we observe a character smaller than the character in the previous row.\\n\\n---\\n\\n\\n# Approach\\n- Initialize the delete count to `0`.\\n- Get the number of rows (`r`) and columns (`c`).\\n- If the current element is lexicographically smaller than the previous element, increment the delete count and break out of the loop\\n\\n---\\n\\n\\n# Complexity\\n- Time Complexity\\n$$O(n*m)$$ \\n\\n- Space Complexity\\n$$O(1)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | Matrix | Pointers](https://leetcode.com/problems/delete-columns-to-make-sorted/solutions/2994341/java-easy-100-fast-solution-matrix-pointers/)"
                    },
                    {
                        "username": "ckcjc",
                        "content": " ```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0; \\n        for(int i= 0; i < strs[0].length(); i++){\\n            for(int j = 0; j< strs.length - 1; j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n"
                    },
                    {
                        "username": "pratham95484",
                        "content": " `your inline code...your inline code...` \\nstatic public int minDeletionSize(String[] str) {\\n      \\n       int counts=0,countus=0;\\n       for(int i=0;i<str.length;i++)\\n       {    \\n           char[] a = str[i].toCharArray();\\n           int count=0;\\n           for(int j=0;j<a.length;j++)\\n           {\\n               for(int k=j+1;k<a.length;k++)\\n               {\\n                   int first=(int)a[j];\\n                   int second=(int)a[k];\\n                   if(first>second)\\n                   {\\n                       count++;\\n                   }\\n               }\\n           }\\n           if(count==a.length)\\n           {\\n               counts++;\\n           }\\n           \\n       }\\n       return counts;\\n    }\\n    public static void main(String [] args)\\n    {\\n String [] str = {\"cba\",\"daf\",\"ghi\"}; \\n    int result =Solution.minDeletionSize(str);\\n    System.out.println(result);\\n    }"
                    },
                    {
                        "username": "nxabdullah",
                        "content": "Hint: think of it as a 2D array (or a matrix) problem"
                    }
                ]
            },
            {
                "id": 1741273,
                "content": [
                    {
                        "username": "harshilnashier",
                        "content": "can it be solved with time complexity that is better than O(n^2)?"
                    },
                    {
                        "username": "ganesh254",
                        "content": "class Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        count = 0\\n        n = len(strs)\\n        m = len(strs[0])\\n        for i in range(0, m):\\n            for j in range(0,n-1):\\n                if strs[j][i] > strs[j+1][i]:\\n                    count += 1\\n                    break\\n        return count"
                    },
                    {
                        "username": "tradingpractice2122",
                        "content": "Why so many dislikes on the problem? Just transpose matrix and check each row for i+1-th element being greater or equal than i-th. Check my solution if don\\'t get the idea."
                    },
                    {
                        "username": "bharatjoshics",
                        "content": "Step 1. Initialize a counter to 0\\nStep 2. Start a loop from 0th index example \\'j\\'\\nStep 3. Start second loop inside first loop from 1st index example \\'i\\'\\nStep 4. Compare if [i][j]<[i-1][j]\\nStep 5. If yes then make your counter +1 and break \\nStep 6. At the end , return your counter"
                    },
                    {
                        "username": "Loreee",
                        "content": "If we had to delete the columns that are not sorted lexicographically, and not only show the number of those columns, what would we use? When we find a column that is not sorted, can we use memmove to move the content of each string after the index  of that column to the left with one letter? Is this a good idea? If it is can someone please show me how the arguments of memmove would look like for this? "
                    },
                    {
                        "username": "Siroj910",
                        "content": "There is a problem in expected: \\ninput: [\"cba\",\"daf\",\"ghi\"] -> in sorted it will be [\\'abc\\', \\'adf\\', \\'ghi\\'], \\nand result will be 2 because \"abc\" and \"daf\" is wrong, but expected 1, who can explain it? In my view my result is true"
                    },
                    {
                        "username": "deleted_user",
                        "content": "# Intuition\\n- To be in lexicographic order, each character in the column should be equal to or greater than the corresponding character in the previous row.\\n- Therefore, we will iterate over the columns and for each column, we will iterate over the rows starting from index `1` (not zero, as we will compare the character to the character in the previous row). We will then increment the count of unsorted columns every time we observe a character smaller than the character in the previous row.\\n\\n---\\n\\n\\n# Approach\\n- Initialize the delete count to `0`.\\n- Get the number of rows (`r`) and columns (`c`).\\n- If the current element is lexicographically smaller than the previous element, increment the delete count and break out of the loop\\n\\n---\\n\\n\\n# Complexity\\n- Time Complexity\\n$$O(n*m)$$ \\n\\n- Space Complexity\\n$$O(1)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | Matrix | Pointers](https://leetcode.com/problems/delete-columns-to-make-sorted/solutions/2994341/java-easy-100-fast-solution-matrix-pointers/)"
                    },
                    {
                        "username": "ckcjc",
                        "content": " ```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0; \\n        for(int i= 0; i < strs[0].length(); i++){\\n            for(int j = 0; j< strs.length - 1; j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n"
                    },
                    {
                        "username": "pratham95484",
                        "content": " `your inline code...your inline code...` \\nstatic public int minDeletionSize(String[] str) {\\n      \\n       int counts=0,countus=0;\\n       for(int i=0;i<str.length;i++)\\n       {    \\n           char[] a = str[i].toCharArray();\\n           int count=0;\\n           for(int j=0;j<a.length;j++)\\n           {\\n               for(int k=j+1;k<a.length;k++)\\n               {\\n                   int first=(int)a[j];\\n                   int second=(int)a[k];\\n                   if(first>second)\\n                   {\\n                       count++;\\n                   }\\n               }\\n           }\\n           if(count==a.length)\\n           {\\n               counts++;\\n           }\\n           \\n       }\\n       return counts;\\n    }\\n    public static void main(String [] args)\\n    {\\n String [] str = {\"cba\",\"daf\",\"ghi\"}; \\n    int result =Solution.minDeletionSize(str);\\n    System.out.println(result);\\n    }"
                    },
                    {
                        "username": "nxabdullah",
                        "content": "Hint: think of it as a 2D array (or a matrix) problem"
                    }
                ]
            },
            {
                "id": 1740304,
                "content": [
                    {
                        "username": "harshilnashier",
                        "content": "can it be solved with time complexity that is better than O(n^2)?"
                    },
                    {
                        "username": "ganesh254",
                        "content": "class Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        count = 0\\n        n = len(strs)\\n        m = len(strs[0])\\n        for i in range(0, m):\\n            for j in range(0,n-1):\\n                if strs[j][i] > strs[j+1][i]:\\n                    count += 1\\n                    break\\n        return count"
                    },
                    {
                        "username": "tradingpractice2122",
                        "content": "Why so many dislikes on the problem? Just transpose matrix and check each row for i+1-th element being greater or equal than i-th. Check my solution if don\\'t get the idea."
                    },
                    {
                        "username": "bharatjoshics",
                        "content": "Step 1. Initialize a counter to 0\\nStep 2. Start a loop from 0th index example \\'j\\'\\nStep 3. Start second loop inside first loop from 1st index example \\'i\\'\\nStep 4. Compare if [i][j]<[i-1][j]\\nStep 5. If yes then make your counter +1 and break \\nStep 6. At the end , return your counter"
                    },
                    {
                        "username": "Loreee",
                        "content": "If we had to delete the columns that are not sorted lexicographically, and not only show the number of those columns, what would we use? When we find a column that is not sorted, can we use memmove to move the content of each string after the index  of that column to the left with one letter? Is this a good idea? If it is can someone please show me how the arguments of memmove would look like for this? "
                    },
                    {
                        "username": "Siroj910",
                        "content": "There is a problem in expected: \\ninput: [\"cba\",\"daf\",\"ghi\"] -> in sorted it will be [\\'abc\\', \\'adf\\', \\'ghi\\'], \\nand result will be 2 because \"abc\" and \"daf\" is wrong, but expected 1, who can explain it? In my view my result is true"
                    },
                    {
                        "username": "deleted_user",
                        "content": "# Intuition\\n- To be in lexicographic order, each character in the column should be equal to or greater than the corresponding character in the previous row.\\n- Therefore, we will iterate over the columns and for each column, we will iterate over the rows starting from index `1` (not zero, as we will compare the character to the character in the previous row). We will then increment the count of unsorted columns every time we observe a character smaller than the character in the previous row.\\n\\n---\\n\\n\\n# Approach\\n- Initialize the delete count to `0`.\\n- Get the number of rows (`r`) and columns (`c`).\\n- If the current element is lexicographically smaller than the previous element, increment the delete count and break out of the loop\\n\\n---\\n\\n\\n# Complexity\\n- Time Complexity\\n$$O(n*m)$$ \\n\\n- Space Complexity\\n$$O(1)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | Matrix | Pointers](https://leetcode.com/problems/delete-columns-to-make-sorted/solutions/2994341/java-easy-100-fast-solution-matrix-pointers/)"
                    },
                    {
                        "username": "ckcjc",
                        "content": " ```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0; \\n        for(int i= 0; i < strs[0].length(); i++){\\n            for(int j = 0; j< strs.length - 1; j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n"
                    },
                    {
                        "username": "pratham95484",
                        "content": " `your inline code...your inline code...` \\nstatic public int minDeletionSize(String[] str) {\\n      \\n       int counts=0,countus=0;\\n       for(int i=0;i<str.length;i++)\\n       {    \\n           char[] a = str[i].toCharArray();\\n           int count=0;\\n           for(int j=0;j<a.length;j++)\\n           {\\n               for(int k=j+1;k<a.length;k++)\\n               {\\n                   int first=(int)a[j];\\n                   int second=(int)a[k];\\n                   if(first>second)\\n                   {\\n                       count++;\\n                   }\\n               }\\n           }\\n           if(count==a.length)\\n           {\\n               counts++;\\n           }\\n           \\n       }\\n       return counts;\\n    }\\n    public static void main(String [] args)\\n    {\\n String [] str = {\"cba\",\"daf\",\"ghi\"}; \\n    int result =Solution.minDeletionSize(str);\\n    System.out.println(result);\\n    }"
                    },
                    {
                        "username": "nxabdullah",
                        "content": "Hint: think of it as a 2D array (or a matrix) problem"
                    }
                ]
            },
            {
                "id": 1740299,
                "content": [
                    {
                        "username": "harshilnashier",
                        "content": "can it be solved with time complexity that is better than O(n^2)?"
                    },
                    {
                        "username": "ganesh254",
                        "content": "class Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        count = 0\\n        n = len(strs)\\n        m = len(strs[0])\\n        for i in range(0, m):\\n            for j in range(0,n-1):\\n                if strs[j][i] > strs[j+1][i]:\\n                    count += 1\\n                    break\\n        return count"
                    },
                    {
                        "username": "tradingpractice2122",
                        "content": "Why so many dislikes on the problem? Just transpose matrix and check each row for i+1-th element being greater or equal than i-th. Check my solution if don\\'t get the idea."
                    },
                    {
                        "username": "bharatjoshics",
                        "content": "Step 1. Initialize a counter to 0\\nStep 2. Start a loop from 0th index example \\'j\\'\\nStep 3. Start second loop inside first loop from 1st index example \\'i\\'\\nStep 4. Compare if [i][j]<[i-1][j]\\nStep 5. If yes then make your counter +1 and break \\nStep 6. At the end , return your counter"
                    },
                    {
                        "username": "Loreee",
                        "content": "If we had to delete the columns that are not sorted lexicographically, and not only show the number of those columns, what would we use? When we find a column that is not sorted, can we use memmove to move the content of each string after the index  of that column to the left with one letter? Is this a good idea? If it is can someone please show me how the arguments of memmove would look like for this? "
                    },
                    {
                        "username": "Siroj910",
                        "content": "There is a problem in expected: \\ninput: [\"cba\",\"daf\",\"ghi\"] -> in sorted it will be [\\'abc\\', \\'adf\\', \\'ghi\\'], \\nand result will be 2 because \"abc\" and \"daf\" is wrong, but expected 1, who can explain it? In my view my result is true"
                    },
                    {
                        "username": "deleted_user",
                        "content": "# Intuition\\n- To be in lexicographic order, each character in the column should be equal to or greater than the corresponding character in the previous row.\\n- Therefore, we will iterate over the columns and for each column, we will iterate over the rows starting from index `1` (not zero, as we will compare the character to the character in the previous row). We will then increment the count of unsorted columns every time we observe a character smaller than the character in the previous row.\\n\\n---\\n\\n\\n# Approach\\n- Initialize the delete count to `0`.\\n- Get the number of rows (`r`) and columns (`c`).\\n- If the current element is lexicographically smaller than the previous element, increment the delete count and break out of the loop\\n\\n---\\n\\n\\n# Complexity\\n- Time Complexity\\n$$O(n*m)$$ \\n\\n- Space Complexity\\n$$O(1)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | Matrix | Pointers](https://leetcode.com/problems/delete-columns-to-make-sorted/solutions/2994341/java-easy-100-fast-solution-matrix-pointers/)"
                    },
                    {
                        "username": "ckcjc",
                        "content": " ```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0; \\n        for(int i= 0; i < strs[0].length(); i++){\\n            for(int j = 0; j< strs.length - 1; j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n"
                    },
                    {
                        "username": "pratham95484",
                        "content": " `your inline code...your inline code...` \\nstatic public int minDeletionSize(String[] str) {\\n      \\n       int counts=0,countus=0;\\n       for(int i=0;i<str.length;i++)\\n       {    \\n           char[] a = str[i].toCharArray();\\n           int count=0;\\n           for(int j=0;j<a.length;j++)\\n           {\\n               for(int k=j+1;k<a.length;k++)\\n               {\\n                   int first=(int)a[j];\\n                   int second=(int)a[k];\\n                   if(first>second)\\n                   {\\n                       count++;\\n                   }\\n               }\\n           }\\n           if(count==a.length)\\n           {\\n               counts++;\\n           }\\n           \\n       }\\n       return counts;\\n    }\\n    public static void main(String [] args)\\n    {\\n String [] str = {\"cba\",\"daf\",\"ghi\"}; \\n    int result =Solution.minDeletionSize(str);\\n    System.out.println(result);\\n    }"
                    },
                    {
                        "username": "nxabdullah",
                        "content": "Hint: think of it as a 2D array (or a matrix) problem"
                    }
                ]
            },
            {
                "id": 1740253,
                "content": [
                    {
                        "username": "harshilnashier",
                        "content": "can it be solved with time complexity that is better than O(n^2)?"
                    },
                    {
                        "username": "ganesh254",
                        "content": "class Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        count = 0\\n        n = len(strs)\\n        m = len(strs[0])\\n        for i in range(0, m):\\n            for j in range(0,n-1):\\n                if strs[j][i] > strs[j+1][i]:\\n                    count += 1\\n                    break\\n        return count"
                    },
                    {
                        "username": "tradingpractice2122",
                        "content": "Why so many dislikes on the problem? Just transpose matrix and check each row for i+1-th element being greater or equal than i-th. Check my solution if don\\'t get the idea."
                    },
                    {
                        "username": "bharatjoshics",
                        "content": "Step 1. Initialize a counter to 0\\nStep 2. Start a loop from 0th index example \\'j\\'\\nStep 3. Start second loop inside first loop from 1st index example \\'i\\'\\nStep 4. Compare if [i][j]<[i-1][j]\\nStep 5. If yes then make your counter +1 and break \\nStep 6. At the end , return your counter"
                    },
                    {
                        "username": "Loreee",
                        "content": "If we had to delete the columns that are not sorted lexicographically, and not only show the number of those columns, what would we use? When we find a column that is not sorted, can we use memmove to move the content of each string after the index  of that column to the left with one letter? Is this a good idea? If it is can someone please show me how the arguments of memmove would look like for this? "
                    },
                    {
                        "username": "Siroj910",
                        "content": "There is a problem in expected: \\ninput: [\"cba\",\"daf\",\"ghi\"] -> in sorted it will be [\\'abc\\', \\'adf\\', \\'ghi\\'], \\nand result will be 2 because \"abc\" and \"daf\" is wrong, but expected 1, who can explain it? In my view my result is true"
                    },
                    {
                        "username": "deleted_user",
                        "content": "# Intuition\\n- To be in lexicographic order, each character in the column should be equal to or greater than the corresponding character in the previous row.\\n- Therefore, we will iterate over the columns and for each column, we will iterate over the rows starting from index `1` (not zero, as we will compare the character to the character in the previous row). We will then increment the count of unsorted columns every time we observe a character smaller than the character in the previous row.\\n\\n---\\n\\n\\n# Approach\\n- Initialize the delete count to `0`.\\n- Get the number of rows (`r`) and columns (`c`).\\n- If the current element is lexicographically smaller than the previous element, increment the delete count and break out of the loop\\n\\n---\\n\\n\\n# Complexity\\n- Time Complexity\\n$$O(n*m)$$ \\n\\n- Space Complexity\\n$$O(1)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | Matrix | Pointers](https://leetcode.com/problems/delete-columns-to-make-sorted/solutions/2994341/java-easy-100-fast-solution-matrix-pointers/)"
                    },
                    {
                        "username": "ckcjc",
                        "content": " ```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0; \\n        for(int i= 0; i < strs[0].length(); i++){\\n            for(int j = 0; j< strs.length - 1; j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n"
                    },
                    {
                        "username": "pratham95484",
                        "content": " `your inline code...your inline code...` \\nstatic public int minDeletionSize(String[] str) {\\n      \\n       int counts=0,countus=0;\\n       for(int i=0;i<str.length;i++)\\n       {    \\n           char[] a = str[i].toCharArray();\\n           int count=0;\\n           for(int j=0;j<a.length;j++)\\n           {\\n               for(int k=j+1;k<a.length;k++)\\n               {\\n                   int first=(int)a[j];\\n                   int second=(int)a[k];\\n                   if(first>second)\\n                   {\\n                       count++;\\n                   }\\n               }\\n           }\\n           if(count==a.length)\\n           {\\n               counts++;\\n           }\\n           \\n       }\\n       return counts;\\n    }\\n    public static void main(String [] args)\\n    {\\n String [] str = {\"cba\",\"daf\",\"ghi\"}; \\n    int result =Solution.minDeletionSize(str);\\n    System.out.println(result);\\n    }"
                    },
                    {
                        "username": "nxabdullah",
                        "content": "Hint: think of it as a 2D array (or a matrix) problem"
                    }
                ]
            },
            {
                "id": 1740250,
                "content": [
                    {
                        "username": "harshilnashier",
                        "content": "can it be solved with time complexity that is better than O(n^2)?"
                    },
                    {
                        "username": "ganesh254",
                        "content": "class Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        count = 0\\n        n = len(strs)\\n        m = len(strs[0])\\n        for i in range(0, m):\\n            for j in range(0,n-1):\\n                if strs[j][i] > strs[j+1][i]:\\n                    count += 1\\n                    break\\n        return count"
                    },
                    {
                        "username": "tradingpractice2122",
                        "content": "Why so many dislikes on the problem? Just transpose matrix and check each row for i+1-th element being greater or equal than i-th. Check my solution if don\\'t get the idea."
                    },
                    {
                        "username": "bharatjoshics",
                        "content": "Step 1. Initialize a counter to 0\\nStep 2. Start a loop from 0th index example \\'j\\'\\nStep 3. Start second loop inside first loop from 1st index example \\'i\\'\\nStep 4. Compare if [i][j]<[i-1][j]\\nStep 5. If yes then make your counter +1 and break \\nStep 6. At the end , return your counter"
                    },
                    {
                        "username": "Loreee",
                        "content": "If we had to delete the columns that are not sorted lexicographically, and not only show the number of those columns, what would we use? When we find a column that is not sorted, can we use memmove to move the content of each string after the index  of that column to the left with one letter? Is this a good idea? If it is can someone please show me how the arguments of memmove would look like for this? "
                    },
                    {
                        "username": "Siroj910",
                        "content": "There is a problem in expected: \\ninput: [\"cba\",\"daf\",\"ghi\"] -> in sorted it will be [\\'abc\\', \\'adf\\', \\'ghi\\'], \\nand result will be 2 because \"abc\" and \"daf\" is wrong, but expected 1, who can explain it? In my view my result is true"
                    },
                    {
                        "username": "deleted_user",
                        "content": "# Intuition\\n- To be in lexicographic order, each character in the column should be equal to or greater than the corresponding character in the previous row.\\n- Therefore, we will iterate over the columns and for each column, we will iterate over the rows starting from index `1` (not zero, as we will compare the character to the character in the previous row). We will then increment the count of unsorted columns every time we observe a character smaller than the character in the previous row.\\n\\n---\\n\\n\\n# Approach\\n- Initialize the delete count to `0`.\\n- Get the number of rows (`r`) and columns (`c`).\\n- If the current element is lexicographically smaller than the previous element, increment the delete count and break out of the loop\\n\\n---\\n\\n\\n# Complexity\\n- Time Complexity\\n$$O(n*m)$$ \\n\\n- Space Complexity\\n$$O(1)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | Matrix | Pointers](https://leetcode.com/problems/delete-columns-to-make-sorted/solutions/2994341/java-easy-100-fast-solution-matrix-pointers/)"
                    },
                    {
                        "username": "ckcjc",
                        "content": " ```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0; \\n        for(int i= 0; i < strs[0].length(); i++){\\n            for(int j = 0; j< strs.length - 1; j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n"
                    },
                    {
                        "username": "pratham95484",
                        "content": " `your inline code...your inline code...` \\nstatic public int minDeletionSize(String[] str) {\\n      \\n       int counts=0,countus=0;\\n       for(int i=0;i<str.length;i++)\\n       {    \\n           char[] a = str[i].toCharArray();\\n           int count=0;\\n           for(int j=0;j<a.length;j++)\\n           {\\n               for(int k=j+1;k<a.length;k++)\\n               {\\n                   int first=(int)a[j];\\n                   int second=(int)a[k];\\n                   if(first>second)\\n                   {\\n                       count++;\\n                   }\\n               }\\n           }\\n           if(count==a.length)\\n           {\\n               counts++;\\n           }\\n           \\n       }\\n       return counts;\\n    }\\n    public static void main(String [] args)\\n    {\\n String [] str = {\"cba\",\"daf\",\"ghi\"}; \\n    int result =Solution.minDeletionSize(str);\\n    System.out.println(result);\\n    }"
                    },
                    {
                        "username": "nxabdullah",
                        "content": "Hint: think of it as a 2D array (or a matrix) problem"
                    }
                ]
            },
            {
                "id": 1740209,
                "content": [
                    {
                        "username": "harshilnashier",
                        "content": "can it be solved with time complexity that is better than O(n^2)?"
                    },
                    {
                        "username": "ganesh254",
                        "content": "class Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        count = 0\\n        n = len(strs)\\n        m = len(strs[0])\\n        for i in range(0, m):\\n            for j in range(0,n-1):\\n                if strs[j][i] > strs[j+1][i]:\\n                    count += 1\\n                    break\\n        return count"
                    },
                    {
                        "username": "tradingpractice2122",
                        "content": "Why so many dislikes on the problem? Just transpose matrix and check each row for i+1-th element being greater or equal than i-th. Check my solution if don\\'t get the idea."
                    },
                    {
                        "username": "bharatjoshics",
                        "content": "Step 1. Initialize a counter to 0\\nStep 2. Start a loop from 0th index example \\'j\\'\\nStep 3. Start second loop inside first loop from 1st index example \\'i\\'\\nStep 4. Compare if [i][j]<[i-1][j]\\nStep 5. If yes then make your counter +1 and break \\nStep 6. At the end , return your counter"
                    },
                    {
                        "username": "Loreee",
                        "content": "If we had to delete the columns that are not sorted lexicographically, and not only show the number of those columns, what would we use? When we find a column that is not sorted, can we use memmove to move the content of each string after the index  of that column to the left with one letter? Is this a good idea? If it is can someone please show me how the arguments of memmove would look like for this? "
                    },
                    {
                        "username": "Siroj910",
                        "content": "There is a problem in expected: \\ninput: [\"cba\",\"daf\",\"ghi\"] -> in sorted it will be [\\'abc\\', \\'adf\\', \\'ghi\\'], \\nand result will be 2 because \"abc\" and \"daf\" is wrong, but expected 1, who can explain it? In my view my result is true"
                    },
                    {
                        "username": "deleted_user",
                        "content": "# Intuition\\n- To be in lexicographic order, each character in the column should be equal to or greater than the corresponding character in the previous row.\\n- Therefore, we will iterate over the columns and for each column, we will iterate over the rows starting from index `1` (not zero, as we will compare the character to the character in the previous row). We will then increment the count of unsorted columns every time we observe a character smaller than the character in the previous row.\\n\\n---\\n\\n\\n# Approach\\n- Initialize the delete count to `0`.\\n- Get the number of rows (`r`) and columns (`c`).\\n- If the current element is lexicographically smaller than the previous element, increment the delete count and break out of the loop\\n\\n---\\n\\n\\n# Complexity\\n- Time Complexity\\n$$O(n*m)$$ \\n\\n- Space Complexity\\n$$O(1)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | Matrix | Pointers](https://leetcode.com/problems/delete-columns-to-make-sorted/solutions/2994341/java-easy-100-fast-solution-matrix-pointers/)"
                    },
                    {
                        "username": "ckcjc",
                        "content": " ```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0; \\n        for(int i= 0; i < strs[0].length(); i++){\\n            for(int j = 0; j< strs.length - 1; j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n"
                    },
                    {
                        "username": "pratham95484",
                        "content": " `your inline code...your inline code...` \\nstatic public int minDeletionSize(String[] str) {\\n      \\n       int counts=0,countus=0;\\n       for(int i=0;i<str.length;i++)\\n       {    \\n           char[] a = str[i].toCharArray();\\n           int count=0;\\n           for(int j=0;j<a.length;j++)\\n           {\\n               for(int k=j+1;k<a.length;k++)\\n               {\\n                   int first=(int)a[j];\\n                   int second=(int)a[k];\\n                   if(first>second)\\n                   {\\n                       count++;\\n                   }\\n               }\\n           }\\n           if(count==a.length)\\n           {\\n               counts++;\\n           }\\n           \\n       }\\n       return counts;\\n    }\\n    public static void main(String [] args)\\n    {\\n String [] str = {\"cba\",\"daf\",\"ghi\"}; \\n    int result =Solution.minDeletionSize(str);\\n    System.out.println(result);\\n    }"
                    },
                    {
                        "username": "nxabdullah",
                        "content": "Hint: think of it as a 2D array (or a matrix) problem"
                    }
                ]
            },
            {
                "id": 1740199,
                "content": [
                    {
                        "username": "Vabs_786",
                        "content": "    // Variable to store the count of columns to be deleted.\\n        int answer = 0;\\n        // Iterate over each index in the string.\\n        for (int row = 1; row < strs.length; row++){\\n       // for (int col = 0; col < K; col++) {\\n            // Iterate over the strings.\\n             for (int col = 0; col < K; col++) {\\n          //  for (int row = 1; row < strs.length; row++) {\\n                // Characters should be in increasing order, \\n                // If not, increment the counter.\\n                if (strs[row].charAt(col) < strs[row - 1].charAt(col)) {\\n                    answer++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return answer;\\n    }\\n\\n\\n\\n\\nWhy my this answer is not working for test"
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I think you have the columns and rows confused. The nested for loop should be the rows, since you want to be going down each column before moving to the next one."
                    },
                    {
                        "username": "amanraaj",
                        "content": "class Solution {\\n    public int minDeletionSize(String[] strs) {\\n        return IntStream.range(0, strs[0].length())\\n                .filter(i -> IntStream.range(0, strs.length - 1)\\n                        .anyMatch(j -> strs[j].charAt(i) > strs[j + 1].charAt(i)))\\n                .toArray().length;\\n    }\\n}"
                    },
                    {
                        "username": "whiteknight16",
                        "content": "Look vertically and not horizontally\\n"
                    },
                    {
                        "username": "rahul_rm__",
                        "content": "C++ solution \\n\\nint minDeletionSize(vector<string>& strs) {\\n        int n=strs.size();\\n        int m=strs[0].size();\\n        int cnt=0;\\n        for(int i=0; i<m; i++){\\n            for(int j=0; j<n-1; j++){\\n                 if(strs[j][i] > strs[j+1][i]){\\n                     cnt++;\\n                     break;\\n                 }\\n                 \\n            }\\n        }\\n        return cnt;\\n    }"
                    },
                    {
                        "username": "HARSHIDAS_21",
                        "content": "The question says to detect the non lexiographical order count \\nSo \\nStep1 =Initialize The Count By 0.\\nStep2=Count The Size Of The Word In The Given Array, If The Size Of The word is not same then the count will increment.\\nStep3= Count the size of the array.\\nStep4= Now compare the column and hence, if not in the lexiographical order then increment count by 1.\\nStep5= Return the value at last.\\n\\nCode=\\n//Initialization of count by 0.\\nint cnt=0;\\n//Count the size of word in the array\\nint wordsize=strs[0].length();\\n//Count the size of the array \\nint size=strs.size();\\n//Now compare the lexiographical order \\nfor   (int i=0;i<wordsize;i++)\\n{\\nfor   (int j=0;j<size;j++)\\n{\\nif   (strs[j][i]>strs[j+1][i])\\n{\\n//Incrementing Count\\ncnt++;\\nbreak;\\n}\\n}\\n}\\n//Return the final value of count.\\nreturn cnt;"
                    },
                    {
                        "username": "folexz",
                        "content": "Swift submission fails at test cases 76-79, due to time limit while totally same python submission passes with no problem. Plz fix it"
                    },
                    {
                        "username": "OptimusHP",
                        "content": "Can anyone think of possible follow up to this question?"
                    },
                    {
                        "username": "farddinkhan733",
                        "content": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        \\n        int ans=0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.length-1;j++){\\n                if(strs[j].charAt(i)>strs[j+1].charAt(i)){\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    \\n}"
                    },
                    {
                        "username": "anubhavraj554",
                        "content": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int k= strs[0].size();\\n        int count=0,flag;\\n        for(int col=0; col<k; col++){\\n            for(int row=1; row<strs.size(); row++){\\n                flag=0;\\n                if(strs[row-1][col] > strs[row][col])\\n                    flag =1;\\n            }\\n            if(flag)\\n                count++;\\n        }\\n        return count;\\n    }\\n};\\n\\nWHY THIS CODE IS NOT A SOLUTION ?"
                    },
                    {
                        "username": "user7114ny",
                        "content": "meow "
                    }
                ]
            },
            {
                "id": 1740188,
                "content": [
                    {
                        "username": "Vabs_786",
                        "content": "    // Variable to store the count of columns to be deleted.\\n        int answer = 0;\\n        // Iterate over each index in the string.\\n        for (int row = 1; row < strs.length; row++){\\n       // for (int col = 0; col < K; col++) {\\n            // Iterate over the strings.\\n             for (int col = 0; col < K; col++) {\\n          //  for (int row = 1; row < strs.length; row++) {\\n                // Characters should be in increasing order, \\n                // If not, increment the counter.\\n                if (strs[row].charAt(col) < strs[row - 1].charAt(col)) {\\n                    answer++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return answer;\\n    }\\n\\n\\n\\n\\nWhy my this answer is not working for test"
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I think you have the columns and rows confused. The nested for loop should be the rows, since you want to be going down each column before moving to the next one."
                    },
                    {
                        "username": "amanraaj",
                        "content": "class Solution {\\n    public int minDeletionSize(String[] strs) {\\n        return IntStream.range(0, strs[0].length())\\n                .filter(i -> IntStream.range(0, strs.length - 1)\\n                        .anyMatch(j -> strs[j].charAt(i) > strs[j + 1].charAt(i)))\\n                .toArray().length;\\n    }\\n}"
                    },
                    {
                        "username": "whiteknight16",
                        "content": "Look vertically and not horizontally\\n"
                    },
                    {
                        "username": "rahul_rm__",
                        "content": "C++ solution \\n\\nint minDeletionSize(vector<string>& strs) {\\n        int n=strs.size();\\n        int m=strs[0].size();\\n        int cnt=0;\\n        for(int i=0; i<m; i++){\\n            for(int j=0; j<n-1; j++){\\n                 if(strs[j][i] > strs[j+1][i]){\\n                     cnt++;\\n                     break;\\n                 }\\n                 \\n            }\\n        }\\n        return cnt;\\n    }"
                    },
                    {
                        "username": "HARSHIDAS_21",
                        "content": "The question says to detect the non lexiographical order count \\nSo \\nStep1 =Initialize The Count By 0.\\nStep2=Count The Size Of The Word In The Given Array, If The Size Of The word is not same then the count will increment.\\nStep3= Count the size of the array.\\nStep4= Now compare the column and hence, if not in the lexiographical order then increment count by 1.\\nStep5= Return the value at last.\\n\\nCode=\\n//Initialization of count by 0.\\nint cnt=0;\\n//Count the size of word in the array\\nint wordsize=strs[0].length();\\n//Count the size of the array \\nint size=strs.size();\\n//Now compare the lexiographical order \\nfor   (int i=0;i<wordsize;i++)\\n{\\nfor   (int j=0;j<size;j++)\\n{\\nif   (strs[j][i]>strs[j+1][i])\\n{\\n//Incrementing Count\\ncnt++;\\nbreak;\\n}\\n}\\n}\\n//Return the final value of count.\\nreturn cnt;"
                    },
                    {
                        "username": "folexz",
                        "content": "Swift submission fails at test cases 76-79, due to time limit while totally same python submission passes with no problem. Plz fix it"
                    },
                    {
                        "username": "OptimusHP",
                        "content": "Can anyone think of possible follow up to this question?"
                    },
                    {
                        "username": "farddinkhan733",
                        "content": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        \\n        int ans=0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.length-1;j++){\\n                if(strs[j].charAt(i)>strs[j+1].charAt(i)){\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    \\n}"
                    },
                    {
                        "username": "anubhavraj554",
                        "content": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int k= strs[0].size();\\n        int count=0,flag;\\n        for(int col=0; col<k; col++){\\n            for(int row=1; row<strs.size(); row++){\\n                flag=0;\\n                if(strs[row-1][col] > strs[row][col])\\n                    flag =1;\\n            }\\n            if(flag)\\n                count++;\\n        }\\n        return count;\\n    }\\n};\\n\\nWHY THIS CODE IS NOT A SOLUTION ?"
                    },
                    {
                        "username": "user7114ny",
                        "content": "meow "
                    }
                ]
            },
            {
                "id": 1740166,
                "content": [
                    {
                        "username": "Vabs_786",
                        "content": "    // Variable to store the count of columns to be deleted.\\n        int answer = 0;\\n        // Iterate over each index in the string.\\n        for (int row = 1; row < strs.length; row++){\\n       // for (int col = 0; col < K; col++) {\\n            // Iterate over the strings.\\n             for (int col = 0; col < K; col++) {\\n          //  for (int row = 1; row < strs.length; row++) {\\n                // Characters should be in increasing order, \\n                // If not, increment the counter.\\n                if (strs[row].charAt(col) < strs[row - 1].charAt(col)) {\\n                    answer++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return answer;\\n    }\\n\\n\\n\\n\\nWhy my this answer is not working for test"
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I think you have the columns and rows confused. The nested for loop should be the rows, since you want to be going down each column before moving to the next one."
                    },
                    {
                        "username": "amanraaj",
                        "content": "class Solution {\\n    public int minDeletionSize(String[] strs) {\\n        return IntStream.range(0, strs[0].length())\\n                .filter(i -> IntStream.range(0, strs.length - 1)\\n                        .anyMatch(j -> strs[j].charAt(i) > strs[j + 1].charAt(i)))\\n                .toArray().length;\\n    }\\n}"
                    },
                    {
                        "username": "whiteknight16",
                        "content": "Look vertically and not horizontally\\n"
                    },
                    {
                        "username": "rahul_rm__",
                        "content": "C++ solution \\n\\nint minDeletionSize(vector<string>& strs) {\\n        int n=strs.size();\\n        int m=strs[0].size();\\n        int cnt=0;\\n        for(int i=0; i<m; i++){\\n            for(int j=0; j<n-1; j++){\\n                 if(strs[j][i] > strs[j+1][i]){\\n                     cnt++;\\n                     break;\\n                 }\\n                 \\n            }\\n        }\\n        return cnt;\\n    }"
                    },
                    {
                        "username": "HARSHIDAS_21",
                        "content": "The question says to detect the non lexiographical order count \\nSo \\nStep1 =Initialize The Count By 0.\\nStep2=Count The Size Of The Word In The Given Array, If The Size Of The word is not same then the count will increment.\\nStep3= Count the size of the array.\\nStep4= Now compare the column and hence, if not in the lexiographical order then increment count by 1.\\nStep5= Return the value at last.\\n\\nCode=\\n//Initialization of count by 0.\\nint cnt=0;\\n//Count the size of word in the array\\nint wordsize=strs[0].length();\\n//Count the size of the array \\nint size=strs.size();\\n//Now compare the lexiographical order \\nfor   (int i=0;i<wordsize;i++)\\n{\\nfor   (int j=0;j<size;j++)\\n{\\nif   (strs[j][i]>strs[j+1][i])\\n{\\n//Incrementing Count\\ncnt++;\\nbreak;\\n}\\n}\\n}\\n//Return the final value of count.\\nreturn cnt;"
                    },
                    {
                        "username": "folexz",
                        "content": "Swift submission fails at test cases 76-79, due to time limit while totally same python submission passes with no problem. Plz fix it"
                    },
                    {
                        "username": "OptimusHP",
                        "content": "Can anyone think of possible follow up to this question?"
                    },
                    {
                        "username": "farddinkhan733",
                        "content": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        \\n        int ans=0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.length-1;j++){\\n                if(strs[j].charAt(i)>strs[j+1].charAt(i)){\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    \\n}"
                    },
                    {
                        "username": "anubhavraj554",
                        "content": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int k= strs[0].size();\\n        int count=0,flag;\\n        for(int col=0; col<k; col++){\\n            for(int row=1; row<strs.size(); row++){\\n                flag=0;\\n                if(strs[row-1][col] > strs[row][col])\\n                    flag =1;\\n            }\\n            if(flag)\\n                count++;\\n        }\\n        return count;\\n    }\\n};\\n\\nWHY THIS CODE IS NOT A SOLUTION ?"
                    },
                    {
                        "username": "user7114ny",
                        "content": "meow "
                    }
                ]
            },
            {
                "id": 1740061,
                "content": [
                    {
                        "username": "Vabs_786",
                        "content": "    // Variable to store the count of columns to be deleted.\\n        int answer = 0;\\n        // Iterate over each index in the string.\\n        for (int row = 1; row < strs.length; row++){\\n       // for (int col = 0; col < K; col++) {\\n            // Iterate over the strings.\\n             for (int col = 0; col < K; col++) {\\n          //  for (int row = 1; row < strs.length; row++) {\\n                // Characters should be in increasing order, \\n                // If not, increment the counter.\\n                if (strs[row].charAt(col) < strs[row - 1].charAt(col)) {\\n                    answer++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return answer;\\n    }\\n\\n\\n\\n\\nWhy my this answer is not working for test"
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I think you have the columns and rows confused. The nested for loop should be the rows, since you want to be going down each column before moving to the next one."
                    },
                    {
                        "username": "amanraaj",
                        "content": "class Solution {\\n    public int minDeletionSize(String[] strs) {\\n        return IntStream.range(0, strs[0].length())\\n                .filter(i -> IntStream.range(0, strs.length - 1)\\n                        .anyMatch(j -> strs[j].charAt(i) > strs[j + 1].charAt(i)))\\n                .toArray().length;\\n    }\\n}"
                    },
                    {
                        "username": "whiteknight16",
                        "content": "Look vertically and not horizontally\\n"
                    },
                    {
                        "username": "rahul_rm__",
                        "content": "C++ solution \\n\\nint minDeletionSize(vector<string>& strs) {\\n        int n=strs.size();\\n        int m=strs[0].size();\\n        int cnt=0;\\n        for(int i=0; i<m; i++){\\n            for(int j=0; j<n-1; j++){\\n                 if(strs[j][i] > strs[j+1][i]){\\n                     cnt++;\\n                     break;\\n                 }\\n                 \\n            }\\n        }\\n        return cnt;\\n    }"
                    },
                    {
                        "username": "HARSHIDAS_21",
                        "content": "The question says to detect the non lexiographical order count \\nSo \\nStep1 =Initialize The Count By 0.\\nStep2=Count The Size Of The Word In The Given Array, If The Size Of The word is not same then the count will increment.\\nStep3= Count the size of the array.\\nStep4= Now compare the column and hence, if not in the lexiographical order then increment count by 1.\\nStep5= Return the value at last.\\n\\nCode=\\n//Initialization of count by 0.\\nint cnt=0;\\n//Count the size of word in the array\\nint wordsize=strs[0].length();\\n//Count the size of the array \\nint size=strs.size();\\n//Now compare the lexiographical order \\nfor   (int i=0;i<wordsize;i++)\\n{\\nfor   (int j=0;j<size;j++)\\n{\\nif   (strs[j][i]>strs[j+1][i])\\n{\\n//Incrementing Count\\ncnt++;\\nbreak;\\n}\\n}\\n}\\n//Return the final value of count.\\nreturn cnt;"
                    },
                    {
                        "username": "folexz",
                        "content": "Swift submission fails at test cases 76-79, due to time limit while totally same python submission passes with no problem. Plz fix it"
                    },
                    {
                        "username": "OptimusHP",
                        "content": "Can anyone think of possible follow up to this question?"
                    },
                    {
                        "username": "farddinkhan733",
                        "content": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        \\n        int ans=0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.length-1;j++){\\n                if(strs[j].charAt(i)>strs[j+1].charAt(i)){\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    \\n}"
                    },
                    {
                        "username": "anubhavraj554",
                        "content": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int k= strs[0].size();\\n        int count=0,flag;\\n        for(int col=0; col<k; col++){\\n            for(int row=1; row<strs.size(); row++){\\n                flag=0;\\n                if(strs[row-1][col] > strs[row][col])\\n                    flag =1;\\n            }\\n            if(flag)\\n                count++;\\n        }\\n        return count;\\n    }\\n};\\n\\nWHY THIS CODE IS NOT A SOLUTION ?"
                    },
                    {
                        "username": "user7114ny",
                        "content": "meow "
                    }
                ]
            },
            {
                "id": 1740043,
                "content": [
                    {
                        "username": "Vabs_786",
                        "content": "    // Variable to store the count of columns to be deleted.\\n        int answer = 0;\\n        // Iterate over each index in the string.\\n        for (int row = 1; row < strs.length; row++){\\n       // for (int col = 0; col < K; col++) {\\n            // Iterate over the strings.\\n             for (int col = 0; col < K; col++) {\\n          //  for (int row = 1; row < strs.length; row++) {\\n                // Characters should be in increasing order, \\n                // If not, increment the counter.\\n                if (strs[row].charAt(col) < strs[row - 1].charAt(col)) {\\n                    answer++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return answer;\\n    }\\n\\n\\n\\n\\nWhy my this answer is not working for test"
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I think you have the columns and rows confused. The nested for loop should be the rows, since you want to be going down each column before moving to the next one."
                    },
                    {
                        "username": "amanraaj",
                        "content": "class Solution {\\n    public int minDeletionSize(String[] strs) {\\n        return IntStream.range(0, strs[0].length())\\n                .filter(i -> IntStream.range(0, strs.length - 1)\\n                        .anyMatch(j -> strs[j].charAt(i) > strs[j + 1].charAt(i)))\\n                .toArray().length;\\n    }\\n}"
                    },
                    {
                        "username": "whiteknight16",
                        "content": "Look vertically and not horizontally\\n"
                    },
                    {
                        "username": "rahul_rm__",
                        "content": "C++ solution \\n\\nint minDeletionSize(vector<string>& strs) {\\n        int n=strs.size();\\n        int m=strs[0].size();\\n        int cnt=0;\\n        for(int i=0; i<m; i++){\\n            for(int j=0; j<n-1; j++){\\n                 if(strs[j][i] > strs[j+1][i]){\\n                     cnt++;\\n                     break;\\n                 }\\n                 \\n            }\\n        }\\n        return cnt;\\n    }"
                    },
                    {
                        "username": "HARSHIDAS_21",
                        "content": "The question says to detect the non lexiographical order count \\nSo \\nStep1 =Initialize The Count By 0.\\nStep2=Count The Size Of The Word In The Given Array, If The Size Of The word is not same then the count will increment.\\nStep3= Count the size of the array.\\nStep4= Now compare the column and hence, if not in the lexiographical order then increment count by 1.\\nStep5= Return the value at last.\\n\\nCode=\\n//Initialization of count by 0.\\nint cnt=0;\\n//Count the size of word in the array\\nint wordsize=strs[0].length();\\n//Count the size of the array \\nint size=strs.size();\\n//Now compare the lexiographical order \\nfor   (int i=0;i<wordsize;i++)\\n{\\nfor   (int j=0;j<size;j++)\\n{\\nif   (strs[j][i]>strs[j+1][i])\\n{\\n//Incrementing Count\\ncnt++;\\nbreak;\\n}\\n}\\n}\\n//Return the final value of count.\\nreturn cnt;"
                    },
                    {
                        "username": "folexz",
                        "content": "Swift submission fails at test cases 76-79, due to time limit while totally same python submission passes with no problem. Plz fix it"
                    },
                    {
                        "username": "OptimusHP",
                        "content": "Can anyone think of possible follow up to this question?"
                    },
                    {
                        "username": "farddinkhan733",
                        "content": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        \\n        int ans=0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.length-1;j++){\\n                if(strs[j].charAt(i)>strs[j+1].charAt(i)){\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    \\n}"
                    },
                    {
                        "username": "anubhavraj554",
                        "content": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int k= strs[0].size();\\n        int count=0,flag;\\n        for(int col=0; col<k; col++){\\n            for(int row=1; row<strs.size(); row++){\\n                flag=0;\\n                if(strs[row-1][col] > strs[row][col])\\n                    flag =1;\\n            }\\n            if(flag)\\n                count++;\\n        }\\n        return count;\\n    }\\n};\\n\\nWHY THIS CODE IS NOT A SOLUTION ?"
                    },
                    {
                        "username": "user7114ny",
                        "content": "meow "
                    }
                ]
            },
            {
                "id": 1740003,
                "content": [
                    {
                        "username": "Vabs_786",
                        "content": "    // Variable to store the count of columns to be deleted.\\n        int answer = 0;\\n        // Iterate over each index in the string.\\n        for (int row = 1; row < strs.length; row++){\\n       // for (int col = 0; col < K; col++) {\\n            // Iterate over the strings.\\n             for (int col = 0; col < K; col++) {\\n          //  for (int row = 1; row < strs.length; row++) {\\n                // Characters should be in increasing order, \\n                // If not, increment the counter.\\n                if (strs[row].charAt(col) < strs[row - 1].charAt(col)) {\\n                    answer++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return answer;\\n    }\\n\\n\\n\\n\\nWhy my this answer is not working for test"
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I think you have the columns and rows confused. The nested for loop should be the rows, since you want to be going down each column before moving to the next one."
                    },
                    {
                        "username": "amanraaj",
                        "content": "class Solution {\\n    public int minDeletionSize(String[] strs) {\\n        return IntStream.range(0, strs[0].length())\\n                .filter(i -> IntStream.range(0, strs.length - 1)\\n                        .anyMatch(j -> strs[j].charAt(i) > strs[j + 1].charAt(i)))\\n                .toArray().length;\\n    }\\n}"
                    },
                    {
                        "username": "whiteknight16",
                        "content": "Look vertically and not horizontally\\n"
                    },
                    {
                        "username": "rahul_rm__",
                        "content": "C++ solution \\n\\nint minDeletionSize(vector<string>& strs) {\\n        int n=strs.size();\\n        int m=strs[0].size();\\n        int cnt=0;\\n        for(int i=0; i<m; i++){\\n            for(int j=0; j<n-1; j++){\\n                 if(strs[j][i] > strs[j+1][i]){\\n                     cnt++;\\n                     break;\\n                 }\\n                 \\n            }\\n        }\\n        return cnt;\\n    }"
                    },
                    {
                        "username": "HARSHIDAS_21",
                        "content": "The question says to detect the non lexiographical order count \\nSo \\nStep1 =Initialize The Count By 0.\\nStep2=Count The Size Of The Word In The Given Array, If The Size Of The word is not same then the count will increment.\\nStep3= Count the size of the array.\\nStep4= Now compare the column and hence, if not in the lexiographical order then increment count by 1.\\nStep5= Return the value at last.\\n\\nCode=\\n//Initialization of count by 0.\\nint cnt=0;\\n//Count the size of word in the array\\nint wordsize=strs[0].length();\\n//Count the size of the array \\nint size=strs.size();\\n//Now compare the lexiographical order \\nfor   (int i=0;i<wordsize;i++)\\n{\\nfor   (int j=0;j<size;j++)\\n{\\nif   (strs[j][i]>strs[j+1][i])\\n{\\n//Incrementing Count\\ncnt++;\\nbreak;\\n}\\n}\\n}\\n//Return the final value of count.\\nreturn cnt;"
                    },
                    {
                        "username": "folexz",
                        "content": "Swift submission fails at test cases 76-79, due to time limit while totally same python submission passes with no problem. Plz fix it"
                    },
                    {
                        "username": "OptimusHP",
                        "content": "Can anyone think of possible follow up to this question?"
                    },
                    {
                        "username": "farddinkhan733",
                        "content": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        \\n        int ans=0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.length-1;j++){\\n                if(strs[j].charAt(i)>strs[j+1].charAt(i)){\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    \\n}"
                    },
                    {
                        "username": "anubhavraj554",
                        "content": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int k= strs[0].size();\\n        int count=0,flag;\\n        for(int col=0; col<k; col++){\\n            for(int row=1; row<strs.size(); row++){\\n                flag=0;\\n                if(strs[row-1][col] > strs[row][col])\\n                    flag =1;\\n            }\\n            if(flag)\\n                count++;\\n        }\\n        return count;\\n    }\\n};\\n\\nWHY THIS CODE IS NOT A SOLUTION ?"
                    },
                    {
                        "username": "user7114ny",
                        "content": "meow "
                    }
                ]
            },
            {
                "id": 1739977,
                "content": [
                    {
                        "username": "Vabs_786",
                        "content": "    // Variable to store the count of columns to be deleted.\\n        int answer = 0;\\n        // Iterate over each index in the string.\\n        for (int row = 1; row < strs.length; row++){\\n       // for (int col = 0; col < K; col++) {\\n            // Iterate over the strings.\\n             for (int col = 0; col < K; col++) {\\n          //  for (int row = 1; row < strs.length; row++) {\\n                // Characters should be in increasing order, \\n                // If not, increment the counter.\\n                if (strs[row].charAt(col) < strs[row - 1].charAt(col)) {\\n                    answer++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return answer;\\n    }\\n\\n\\n\\n\\nWhy my this answer is not working for test"
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I think you have the columns and rows confused. The nested for loop should be the rows, since you want to be going down each column before moving to the next one."
                    },
                    {
                        "username": "amanraaj",
                        "content": "class Solution {\\n    public int minDeletionSize(String[] strs) {\\n        return IntStream.range(0, strs[0].length())\\n                .filter(i -> IntStream.range(0, strs.length - 1)\\n                        .anyMatch(j -> strs[j].charAt(i) > strs[j + 1].charAt(i)))\\n                .toArray().length;\\n    }\\n}"
                    },
                    {
                        "username": "whiteknight16",
                        "content": "Look vertically and not horizontally\\n"
                    },
                    {
                        "username": "rahul_rm__",
                        "content": "C++ solution \\n\\nint minDeletionSize(vector<string>& strs) {\\n        int n=strs.size();\\n        int m=strs[0].size();\\n        int cnt=0;\\n        for(int i=0; i<m; i++){\\n            for(int j=0; j<n-1; j++){\\n                 if(strs[j][i] > strs[j+1][i]){\\n                     cnt++;\\n                     break;\\n                 }\\n                 \\n            }\\n        }\\n        return cnt;\\n    }"
                    },
                    {
                        "username": "HARSHIDAS_21",
                        "content": "The question says to detect the non lexiographical order count \\nSo \\nStep1 =Initialize The Count By 0.\\nStep2=Count The Size Of The Word In The Given Array, If The Size Of The word is not same then the count will increment.\\nStep3= Count the size of the array.\\nStep4= Now compare the column and hence, if not in the lexiographical order then increment count by 1.\\nStep5= Return the value at last.\\n\\nCode=\\n//Initialization of count by 0.\\nint cnt=0;\\n//Count the size of word in the array\\nint wordsize=strs[0].length();\\n//Count the size of the array \\nint size=strs.size();\\n//Now compare the lexiographical order \\nfor   (int i=0;i<wordsize;i++)\\n{\\nfor   (int j=0;j<size;j++)\\n{\\nif   (strs[j][i]>strs[j+1][i])\\n{\\n//Incrementing Count\\ncnt++;\\nbreak;\\n}\\n}\\n}\\n//Return the final value of count.\\nreturn cnt;"
                    },
                    {
                        "username": "folexz",
                        "content": "Swift submission fails at test cases 76-79, due to time limit while totally same python submission passes with no problem. Plz fix it"
                    },
                    {
                        "username": "OptimusHP",
                        "content": "Can anyone think of possible follow up to this question?"
                    },
                    {
                        "username": "farddinkhan733",
                        "content": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        \\n        int ans=0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.length-1;j++){\\n                if(strs[j].charAt(i)>strs[j+1].charAt(i)){\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    \\n}"
                    },
                    {
                        "username": "anubhavraj554",
                        "content": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int k= strs[0].size();\\n        int count=0,flag;\\n        for(int col=0; col<k; col++){\\n            for(int row=1; row<strs.size(); row++){\\n                flag=0;\\n                if(strs[row-1][col] > strs[row][col])\\n                    flag =1;\\n            }\\n            if(flag)\\n                count++;\\n        }\\n        return count;\\n    }\\n};\\n\\nWHY THIS CODE IS NOT A SOLUTION ?"
                    },
                    {
                        "username": "user7114ny",
                        "content": "meow "
                    }
                ]
            },
            {
                "id": 1739969,
                "content": [
                    {
                        "username": "Vabs_786",
                        "content": "    // Variable to store the count of columns to be deleted.\\n        int answer = 0;\\n        // Iterate over each index in the string.\\n        for (int row = 1; row < strs.length; row++){\\n       // for (int col = 0; col < K; col++) {\\n            // Iterate over the strings.\\n             for (int col = 0; col < K; col++) {\\n          //  for (int row = 1; row < strs.length; row++) {\\n                // Characters should be in increasing order, \\n                // If not, increment the counter.\\n                if (strs[row].charAt(col) < strs[row - 1].charAt(col)) {\\n                    answer++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return answer;\\n    }\\n\\n\\n\\n\\nWhy my this answer is not working for test"
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I think you have the columns and rows confused. The nested for loop should be the rows, since you want to be going down each column before moving to the next one."
                    },
                    {
                        "username": "amanraaj",
                        "content": "class Solution {\\n    public int minDeletionSize(String[] strs) {\\n        return IntStream.range(0, strs[0].length())\\n                .filter(i -> IntStream.range(0, strs.length - 1)\\n                        .anyMatch(j -> strs[j].charAt(i) > strs[j + 1].charAt(i)))\\n                .toArray().length;\\n    }\\n}"
                    },
                    {
                        "username": "whiteknight16",
                        "content": "Look vertically and not horizontally\\n"
                    },
                    {
                        "username": "rahul_rm__",
                        "content": "C++ solution \\n\\nint minDeletionSize(vector<string>& strs) {\\n        int n=strs.size();\\n        int m=strs[0].size();\\n        int cnt=0;\\n        for(int i=0; i<m; i++){\\n            for(int j=0; j<n-1; j++){\\n                 if(strs[j][i] > strs[j+1][i]){\\n                     cnt++;\\n                     break;\\n                 }\\n                 \\n            }\\n        }\\n        return cnt;\\n    }"
                    },
                    {
                        "username": "HARSHIDAS_21",
                        "content": "The question says to detect the non lexiographical order count \\nSo \\nStep1 =Initialize The Count By 0.\\nStep2=Count The Size Of The Word In The Given Array, If The Size Of The word is not same then the count will increment.\\nStep3= Count the size of the array.\\nStep4= Now compare the column and hence, if not in the lexiographical order then increment count by 1.\\nStep5= Return the value at last.\\n\\nCode=\\n//Initialization of count by 0.\\nint cnt=0;\\n//Count the size of word in the array\\nint wordsize=strs[0].length();\\n//Count the size of the array \\nint size=strs.size();\\n//Now compare the lexiographical order \\nfor   (int i=0;i<wordsize;i++)\\n{\\nfor   (int j=0;j<size;j++)\\n{\\nif   (strs[j][i]>strs[j+1][i])\\n{\\n//Incrementing Count\\ncnt++;\\nbreak;\\n}\\n}\\n}\\n//Return the final value of count.\\nreturn cnt;"
                    },
                    {
                        "username": "folexz",
                        "content": "Swift submission fails at test cases 76-79, due to time limit while totally same python submission passes with no problem. Plz fix it"
                    },
                    {
                        "username": "OptimusHP",
                        "content": "Can anyone think of possible follow up to this question?"
                    },
                    {
                        "username": "farddinkhan733",
                        "content": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        \\n        int ans=0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.length-1;j++){\\n                if(strs[j].charAt(i)>strs[j+1].charAt(i)){\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    \\n}"
                    },
                    {
                        "username": "anubhavraj554",
                        "content": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int k= strs[0].size();\\n        int count=0,flag;\\n        for(int col=0; col<k; col++){\\n            for(int row=1; row<strs.size(); row++){\\n                flag=0;\\n                if(strs[row-1][col] > strs[row][col])\\n                    flag =1;\\n            }\\n            if(flag)\\n                count++;\\n        }\\n        return count;\\n    }\\n};\\n\\nWHY THIS CODE IS NOT A SOLUTION ?"
                    },
                    {
                        "username": "user7114ny",
                        "content": "meow "
                    }
                ]
            },
            {
                "id": 1739961,
                "content": [
                    {
                        "username": "Vabs_786",
                        "content": "    // Variable to store the count of columns to be deleted.\\n        int answer = 0;\\n        // Iterate over each index in the string.\\n        for (int row = 1; row < strs.length; row++){\\n       // for (int col = 0; col < K; col++) {\\n            // Iterate over the strings.\\n             for (int col = 0; col < K; col++) {\\n          //  for (int row = 1; row < strs.length; row++) {\\n                // Characters should be in increasing order, \\n                // If not, increment the counter.\\n                if (strs[row].charAt(col) < strs[row - 1].charAt(col)) {\\n                    answer++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return answer;\\n    }\\n\\n\\n\\n\\nWhy my this answer is not working for test"
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I think you have the columns and rows confused. The nested for loop should be the rows, since you want to be going down each column before moving to the next one."
                    },
                    {
                        "username": "amanraaj",
                        "content": "class Solution {\\n    public int minDeletionSize(String[] strs) {\\n        return IntStream.range(0, strs[0].length())\\n                .filter(i -> IntStream.range(0, strs.length - 1)\\n                        .anyMatch(j -> strs[j].charAt(i) > strs[j + 1].charAt(i)))\\n                .toArray().length;\\n    }\\n}"
                    },
                    {
                        "username": "whiteknight16",
                        "content": "Look vertically and not horizontally\\n"
                    },
                    {
                        "username": "rahul_rm__",
                        "content": "C++ solution \\n\\nint minDeletionSize(vector<string>& strs) {\\n        int n=strs.size();\\n        int m=strs[0].size();\\n        int cnt=0;\\n        for(int i=0; i<m; i++){\\n            for(int j=0; j<n-1; j++){\\n                 if(strs[j][i] > strs[j+1][i]){\\n                     cnt++;\\n                     break;\\n                 }\\n                 \\n            }\\n        }\\n        return cnt;\\n    }"
                    },
                    {
                        "username": "HARSHIDAS_21",
                        "content": "The question says to detect the non lexiographical order count \\nSo \\nStep1 =Initialize The Count By 0.\\nStep2=Count The Size Of The Word In The Given Array, If The Size Of The word is not same then the count will increment.\\nStep3= Count the size of the array.\\nStep4= Now compare the column and hence, if not in the lexiographical order then increment count by 1.\\nStep5= Return the value at last.\\n\\nCode=\\n//Initialization of count by 0.\\nint cnt=0;\\n//Count the size of word in the array\\nint wordsize=strs[0].length();\\n//Count the size of the array \\nint size=strs.size();\\n//Now compare the lexiographical order \\nfor   (int i=0;i<wordsize;i++)\\n{\\nfor   (int j=0;j<size;j++)\\n{\\nif   (strs[j][i]>strs[j+1][i])\\n{\\n//Incrementing Count\\ncnt++;\\nbreak;\\n}\\n}\\n}\\n//Return the final value of count.\\nreturn cnt;"
                    },
                    {
                        "username": "folexz",
                        "content": "Swift submission fails at test cases 76-79, due to time limit while totally same python submission passes with no problem. Plz fix it"
                    },
                    {
                        "username": "OptimusHP",
                        "content": "Can anyone think of possible follow up to this question?"
                    },
                    {
                        "username": "farddinkhan733",
                        "content": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        \\n        int ans=0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.length-1;j++){\\n                if(strs[j].charAt(i)>strs[j+1].charAt(i)){\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    \\n}"
                    },
                    {
                        "username": "anubhavraj554",
                        "content": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int k= strs[0].size();\\n        int count=0,flag;\\n        for(int col=0; col<k; col++){\\n            for(int row=1; row<strs.size(); row++){\\n                flag=0;\\n                if(strs[row-1][col] > strs[row][col])\\n                    flag =1;\\n            }\\n            if(flag)\\n                count++;\\n        }\\n        return count;\\n    }\\n};\\n\\nWHY THIS CODE IS NOT A SOLUTION ?"
                    },
                    {
                        "username": "user7114ny",
                        "content": "meow "
                    }
                ]
            },
            {
                "id": 1739949,
                "content": [
                    {
                        "username": "Vabs_786",
                        "content": "    // Variable to store the count of columns to be deleted.\\n        int answer = 0;\\n        // Iterate over each index in the string.\\n        for (int row = 1; row < strs.length; row++){\\n       // for (int col = 0; col < K; col++) {\\n            // Iterate over the strings.\\n             for (int col = 0; col < K; col++) {\\n          //  for (int row = 1; row < strs.length; row++) {\\n                // Characters should be in increasing order, \\n                // If not, increment the counter.\\n                if (strs[row].charAt(col) < strs[row - 1].charAt(col)) {\\n                    answer++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return answer;\\n    }\\n\\n\\n\\n\\nWhy my this answer is not working for test"
                    },
                    {
                        "username": "Peiferinc",
                        "content": "I think you have the columns and rows confused. The nested for loop should be the rows, since you want to be going down each column before moving to the next one."
                    },
                    {
                        "username": "amanraaj",
                        "content": "class Solution {\\n    public int minDeletionSize(String[] strs) {\\n        return IntStream.range(0, strs[0].length())\\n                .filter(i -> IntStream.range(0, strs.length - 1)\\n                        .anyMatch(j -> strs[j].charAt(i) > strs[j + 1].charAt(i)))\\n                .toArray().length;\\n    }\\n}"
                    },
                    {
                        "username": "whiteknight16",
                        "content": "Look vertically and not horizontally\\n"
                    },
                    {
                        "username": "rahul_rm__",
                        "content": "C++ solution \\n\\nint minDeletionSize(vector<string>& strs) {\\n        int n=strs.size();\\n        int m=strs[0].size();\\n        int cnt=0;\\n        for(int i=0; i<m; i++){\\n            for(int j=0; j<n-1; j++){\\n                 if(strs[j][i] > strs[j+1][i]){\\n                     cnt++;\\n                     break;\\n                 }\\n                 \\n            }\\n        }\\n        return cnt;\\n    }"
                    },
                    {
                        "username": "HARSHIDAS_21",
                        "content": "The question says to detect the non lexiographical order count \\nSo \\nStep1 =Initialize The Count By 0.\\nStep2=Count The Size Of The Word In The Given Array, If The Size Of The word is not same then the count will increment.\\nStep3= Count the size of the array.\\nStep4= Now compare the column and hence, if not in the lexiographical order then increment count by 1.\\nStep5= Return the value at last.\\n\\nCode=\\n//Initialization of count by 0.\\nint cnt=0;\\n//Count the size of word in the array\\nint wordsize=strs[0].length();\\n//Count the size of the array \\nint size=strs.size();\\n//Now compare the lexiographical order \\nfor   (int i=0;i<wordsize;i++)\\n{\\nfor   (int j=0;j<size;j++)\\n{\\nif   (strs[j][i]>strs[j+1][i])\\n{\\n//Incrementing Count\\ncnt++;\\nbreak;\\n}\\n}\\n}\\n//Return the final value of count.\\nreturn cnt;"
                    },
                    {
                        "username": "folexz",
                        "content": "Swift submission fails at test cases 76-79, due to time limit while totally same python submission passes with no problem. Plz fix it"
                    },
                    {
                        "username": "OptimusHP",
                        "content": "Can anyone think of possible follow up to this question?"
                    },
                    {
                        "username": "farddinkhan733",
                        "content": "```\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        \\n        int ans=0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.length-1;j++){\\n                if(strs[j].charAt(i)>strs[j+1].charAt(i)){\\n                    ans++;\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    \\n}"
                    },
                    {
                        "username": "anubhavraj554",
                        "content": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int k= strs[0].size();\\n        int count=0,flag;\\n        for(int col=0; col<k; col++){\\n            for(int row=1; row<strs.size(); row++){\\n                flag=0;\\n                if(strs[row-1][col] > strs[row][col])\\n                    flag =1;\\n            }\\n            if(flag)\\n                count++;\\n        }\\n        return count;\\n    }\\n};\\n\\nWHY THIS CODE IS NOT A SOLUTION ?"
                    },
                    {
                        "username": "user7114ny",
                        "content": "meow "
                    }
                ]
            },
            {
                "id": 1739948,
                "content": [
                    {
                        "username": "Diamantis",
                        "content": "The problem statement had me under the impression that we are to find the optimal way to re-arrange the words. Anyone else that had the same issue?"
                    },
                    {
                        "username": "happyrogue2307",
                        "content": "I noticed something strange for my Python3 solution. \\n\\nLeaving the parameter name as strs make my solution beat 68% but changing it from strs to A makes the same solution beat 94.5%.\\n\\nDoes anyone have an explanation for why this is happening? Thanks!"
                    },
                    {
                        "username": "rustam_taov",
                        "content": "You have an error in the description. In the first example you give us array [\"abc\", \"bce\", \"cae\"], but above in explanation you write that  \"abc\" and \"cee\" are sorted, but where did you get \"cee\"? We have only \"cae\" and it\\'s not sorted. And later you write that \"bca\" is not sorted, but we don\\'t have it, we have \"bce\" which is against sorted"
                    },
                    {
                        "username": "belinskyi",
                        "content": "\"abc\" are characters at 0 index in each string from [\"abc\", \"bce\", \"cae\"]\\n\"cee\" at 2 index\\n\"bca\" at 1 index "
                    },
                    {
                        "username": "ashiqhussainkumar143",
                        "content": "int minDeletionSize(vector<string>& strs) {\\n        \\n        int deletions=0;\\n        int n=strs.size();\\n        int wordSize=strs[0].length();\\n        for(int i=0;i<wordSize;i++){\\n            for(int j=0;j<n-1;j++){\\n                if(strs[j][i]>strs[j+1][i]){\\n                    deletions++;\\n                    break;\\n                }\\n            }\\n        }\\n        return deletions;\\n    }\\n"
                    },
                    {
                        "username": "ujjwalujjs",
                        "content": "Description could be better . Not very hard to understand  but takes some time  to understand the problem."
                    },
                    {
                        "username": "exlo89",
                        "content": "it took me 20 min to check the question and read COLUMNS. "
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "very easy problem take O (n2)"
                    },
                    {
                        "username": "belinskyi",
                        "content": "why n2? it takes `length of array` * `length of strings inside the array`"
                    },
                    {
                        "username": "atninthsky",
                        "content": "What\\'s wrong with the testcase, I don\\'t understand the testcases in the problem statement. Can someone help?"
                    },
                    {
                        "username": "shutdown-r",
                        "content": "The title is misleading to me, we are neither deleting nor making sorted.\\nIt should rather be named \\'counting unsorted columns from string arrays\\'."
                    },
                    {
                        "username": "obaissa",
                        "content": "I definitely struggled with how to format the array for matrix list. \\n\\n```\\n\\'\\'\\'\\nreturn type: integer \\nmatch: sorting / arrays \\nplan:\\n1. counter var \\n2. loop through list and append each index and a piece in a new list of list\\n3. check if sorted value is the same as the list index and add to counter if not \\n4. return counter \\n\\ntime: o(m *n log n ) space: o(n*m)\\n\\'\\'\\'\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        counter = 0   \\n        for i in range(len(strs[0])):\\n            new_word = [strs[j][i] for j in range(len(strs))]\\n            if new_word != sorted(new_word):\\n                counter += 1 \\n        return counter \\n``` "
                    }
                ]
            },
            {
                "id": 1739942,
                "content": [
                    {
                        "username": "Diamantis",
                        "content": "The problem statement had me under the impression that we are to find the optimal way to re-arrange the words. Anyone else that had the same issue?"
                    },
                    {
                        "username": "happyrogue2307",
                        "content": "I noticed something strange for my Python3 solution. \\n\\nLeaving the parameter name as strs make my solution beat 68% but changing it from strs to A makes the same solution beat 94.5%.\\n\\nDoes anyone have an explanation for why this is happening? Thanks!"
                    },
                    {
                        "username": "rustam_taov",
                        "content": "You have an error in the description. In the first example you give us array [\"abc\", \"bce\", \"cae\"], but above in explanation you write that  \"abc\" and \"cee\" are sorted, but where did you get \"cee\"? We have only \"cae\" and it\\'s not sorted. And later you write that \"bca\" is not sorted, but we don\\'t have it, we have \"bce\" which is against sorted"
                    },
                    {
                        "username": "belinskyi",
                        "content": "\"abc\" are characters at 0 index in each string from [\"abc\", \"bce\", \"cae\"]\\n\"cee\" at 2 index\\n\"bca\" at 1 index "
                    },
                    {
                        "username": "ashiqhussainkumar143",
                        "content": "int minDeletionSize(vector<string>& strs) {\\n        \\n        int deletions=0;\\n        int n=strs.size();\\n        int wordSize=strs[0].length();\\n        for(int i=0;i<wordSize;i++){\\n            for(int j=0;j<n-1;j++){\\n                if(strs[j][i]>strs[j+1][i]){\\n                    deletions++;\\n                    break;\\n                }\\n            }\\n        }\\n        return deletions;\\n    }\\n"
                    },
                    {
                        "username": "ujjwalujjs",
                        "content": "Description could be better . Not very hard to understand  but takes some time  to understand the problem."
                    },
                    {
                        "username": "exlo89",
                        "content": "it took me 20 min to check the question and read COLUMNS. "
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "very easy problem take O (n2)"
                    },
                    {
                        "username": "belinskyi",
                        "content": "why n2? it takes `length of array` * `length of strings inside the array`"
                    },
                    {
                        "username": "atninthsky",
                        "content": "What\\'s wrong with the testcase, I don\\'t understand the testcases in the problem statement. Can someone help?"
                    },
                    {
                        "username": "shutdown-r",
                        "content": "The title is misleading to me, we are neither deleting nor making sorted.\\nIt should rather be named \\'counting unsorted columns from string arrays\\'."
                    },
                    {
                        "username": "obaissa",
                        "content": "I definitely struggled with how to format the array for matrix list. \\n\\n```\\n\\'\\'\\'\\nreturn type: integer \\nmatch: sorting / arrays \\nplan:\\n1. counter var \\n2. loop through list and append each index and a piece in a new list of list\\n3. check if sorted value is the same as the list index and add to counter if not \\n4. return counter \\n\\ntime: o(m *n log n ) space: o(n*m)\\n\\'\\'\\'\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        counter = 0   \\n        for i in range(len(strs[0])):\\n            new_word = [strs[j][i] for j in range(len(strs))]\\n            if new_word != sorted(new_word):\\n                counter += 1 \\n        return counter \\n``` "
                    }
                ]
            },
            {
                "id": 1739934,
                "content": [
                    {
                        "username": "Diamantis",
                        "content": "The problem statement had me under the impression that we are to find the optimal way to re-arrange the words. Anyone else that had the same issue?"
                    },
                    {
                        "username": "happyrogue2307",
                        "content": "I noticed something strange for my Python3 solution. \\n\\nLeaving the parameter name as strs make my solution beat 68% but changing it from strs to A makes the same solution beat 94.5%.\\n\\nDoes anyone have an explanation for why this is happening? Thanks!"
                    },
                    {
                        "username": "rustam_taov",
                        "content": "You have an error in the description. In the first example you give us array [\"abc\", \"bce\", \"cae\"], but above in explanation you write that  \"abc\" and \"cee\" are sorted, but where did you get \"cee\"? We have only \"cae\" and it\\'s not sorted. And later you write that \"bca\" is not sorted, but we don\\'t have it, we have \"bce\" which is against sorted"
                    },
                    {
                        "username": "belinskyi",
                        "content": "\"abc\" are characters at 0 index in each string from [\"abc\", \"bce\", \"cae\"]\\n\"cee\" at 2 index\\n\"bca\" at 1 index "
                    },
                    {
                        "username": "ashiqhussainkumar143",
                        "content": "int minDeletionSize(vector<string>& strs) {\\n        \\n        int deletions=0;\\n        int n=strs.size();\\n        int wordSize=strs[0].length();\\n        for(int i=0;i<wordSize;i++){\\n            for(int j=0;j<n-1;j++){\\n                if(strs[j][i]>strs[j+1][i]){\\n                    deletions++;\\n                    break;\\n                }\\n            }\\n        }\\n        return deletions;\\n    }\\n"
                    },
                    {
                        "username": "ujjwalujjs",
                        "content": "Description could be better . Not very hard to understand  but takes some time  to understand the problem."
                    },
                    {
                        "username": "exlo89",
                        "content": "it took me 20 min to check the question and read COLUMNS. "
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "very easy problem take O (n2)"
                    },
                    {
                        "username": "belinskyi",
                        "content": "why n2? it takes `length of array` * `length of strings inside the array`"
                    },
                    {
                        "username": "atninthsky",
                        "content": "What\\'s wrong with the testcase, I don\\'t understand the testcases in the problem statement. Can someone help?"
                    },
                    {
                        "username": "shutdown-r",
                        "content": "The title is misleading to me, we are neither deleting nor making sorted.\\nIt should rather be named \\'counting unsorted columns from string arrays\\'."
                    },
                    {
                        "username": "obaissa",
                        "content": "I definitely struggled with how to format the array for matrix list. \\n\\n```\\n\\'\\'\\'\\nreturn type: integer \\nmatch: sorting / arrays \\nplan:\\n1. counter var \\n2. loop through list and append each index and a piece in a new list of list\\n3. check if sorted value is the same as the list index and add to counter if not \\n4. return counter \\n\\ntime: o(m *n log n ) space: o(n*m)\\n\\'\\'\\'\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        counter = 0   \\n        for i in range(len(strs[0])):\\n            new_word = [strs[j][i] for j in range(len(strs))]\\n            if new_word != sorted(new_word):\\n                counter += 1 \\n        return counter \\n``` "
                    }
                ]
            },
            {
                "id": 1739928,
                "content": [
                    {
                        "username": "Diamantis",
                        "content": "The problem statement had me under the impression that we are to find the optimal way to re-arrange the words. Anyone else that had the same issue?"
                    },
                    {
                        "username": "happyrogue2307",
                        "content": "I noticed something strange for my Python3 solution. \\n\\nLeaving the parameter name as strs make my solution beat 68% but changing it from strs to A makes the same solution beat 94.5%.\\n\\nDoes anyone have an explanation for why this is happening? Thanks!"
                    },
                    {
                        "username": "rustam_taov",
                        "content": "You have an error in the description. In the first example you give us array [\"abc\", \"bce\", \"cae\"], but above in explanation you write that  \"abc\" and \"cee\" are sorted, but where did you get \"cee\"? We have only \"cae\" and it\\'s not sorted. And later you write that \"bca\" is not sorted, but we don\\'t have it, we have \"bce\" which is against sorted"
                    },
                    {
                        "username": "belinskyi",
                        "content": "\"abc\" are characters at 0 index in each string from [\"abc\", \"bce\", \"cae\"]\\n\"cee\" at 2 index\\n\"bca\" at 1 index "
                    },
                    {
                        "username": "ashiqhussainkumar143",
                        "content": "int minDeletionSize(vector<string>& strs) {\\n        \\n        int deletions=0;\\n        int n=strs.size();\\n        int wordSize=strs[0].length();\\n        for(int i=0;i<wordSize;i++){\\n            for(int j=0;j<n-1;j++){\\n                if(strs[j][i]>strs[j+1][i]){\\n                    deletions++;\\n                    break;\\n                }\\n            }\\n        }\\n        return deletions;\\n    }\\n"
                    },
                    {
                        "username": "ujjwalujjs",
                        "content": "Description could be better . Not very hard to understand  but takes some time  to understand the problem."
                    },
                    {
                        "username": "exlo89",
                        "content": "it took me 20 min to check the question and read COLUMNS. "
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "very easy problem take O (n2)"
                    },
                    {
                        "username": "belinskyi",
                        "content": "why n2? it takes `length of array` * `length of strings inside the array`"
                    },
                    {
                        "username": "atninthsky",
                        "content": "What\\'s wrong with the testcase, I don\\'t understand the testcases in the problem statement. Can someone help?"
                    },
                    {
                        "username": "shutdown-r",
                        "content": "The title is misleading to me, we are neither deleting nor making sorted.\\nIt should rather be named \\'counting unsorted columns from string arrays\\'."
                    },
                    {
                        "username": "obaissa",
                        "content": "I definitely struggled with how to format the array for matrix list. \\n\\n```\\n\\'\\'\\'\\nreturn type: integer \\nmatch: sorting / arrays \\nplan:\\n1. counter var \\n2. loop through list and append each index and a piece in a new list of list\\n3. check if sorted value is the same as the list index and add to counter if not \\n4. return counter \\n\\ntime: o(m *n log n ) space: o(n*m)\\n\\'\\'\\'\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        counter = 0   \\n        for i in range(len(strs[0])):\\n            new_word = [strs[j][i] for j in range(len(strs))]\\n            if new_word != sorted(new_word):\\n                counter += 1 \\n        return counter \\n``` "
                    }
                ]
            },
            {
                "id": 1739917,
                "content": [
                    {
                        "username": "Diamantis",
                        "content": "The problem statement had me under the impression that we are to find the optimal way to re-arrange the words. Anyone else that had the same issue?"
                    },
                    {
                        "username": "happyrogue2307",
                        "content": "I noticed something strange for my Python3 solution. \\n\\nLeaving the parameter name as strs make my solution beat 68% but changing it from strs to A makes the same solution beat 94.5%.\\n\\nDoes anyone have an explanation for why this is happening? Thanks!"
                    },
                    {
                        "username": "rustam_taov",
                        "content": "You have an error in the description. In the first example you give us array [\"abc\", \"bce\", \"cae\"], but above in explanation you write that  \"abc\" and \"cee\" are sorted, but where did you get \"cee\"? We have only \"cae\" and it\\'s not sorted. And later you write that \"bca\" is not sorted, but we don\\'t have it, we have \"bce\" which is against sorted"
                    },
                    {
                        "username": "belinskyi",
                        "content": "\"abc\" are characters at 0 index in each string from [\"abc\", \"bce\", \"cae\"]\\n\"cee\" at 2 index\\n\"bca\" at 1 index "
                    },
                    {
                        "username": "ashiqhussainkumar143",
                        "content": "int minDeletionSize(vector<string>& strs) {\\n        \\n        int deletions=0;\\n        int n=strs.size();\\n        int wordSize=strs[0].length();\\n        for(int i=0;i<wordSize;i++){\\n            for(int j=0;j<n-1;j++){\\n                if(strs[j][i]>strs[j+1][i]){\\n                    deletions++;\\n                    break;\\n                }\\n            }\\n        }\\n        return deletions;\\n    }\\n"
                    },
                    {
                        "username": "ujjwalujjs",
                        "content": "Description could be better . Not very hard to understand  but takes some time  to understand the problem."
                    },
                    {
                        "username": "exlo89",
                        "content": "it took me 20 min to check the question and read COLUMNS. "
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "very easy problem take O (n2)"
                    },
                    {
                        "username": "belinskyi",
                        "content": "why n2? it takes `length of array` * `length of strings inside the array`"
                    },
                    {
                        "username": "atninthsky",
                        "content": "What\\'s wrong with the testcase, I don\\'t understand the testcases in the problem statement. Can someone help?"
                    },
                    {
                        "username": "shutdown-r",
                        "content": "The title is misleading to me, we are neither deleting nor making sorted.\\nIt should rather be named \\'counting unsorted columns from string arrays\\'."
                    },
                    {
                        "username": "obaissa",
                        "content": "I definitely struggled with how to format the array for matrix list. \\n\\n```\\n\\'\\'\\'\\nreturn type: integer \\nmatch: sorting / arrays \\nplan:\\n1. counter var \\n2. loop through list and append each index and a piece in a new list of list\\n3. check if sorted value is the same as the list index and add to counter if not \\n4. return counter \\n\\ntime: o(m *n log n ) space: o(n*m)\\n\\'\\'\\'\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        counter = 0   \\n        for i in range(len(strs[0])):\\n            new_word = [strs[j][i] for j in range(len(strs))]\\n            if new_word != sorted(new_word):\\n                counter += 1 \\n        return counter \\n``` "
                    }
                ]
            },
            {
                "id": 1739875,
                "content": [
                    {
                        "username": "Diamantis",
                        "content": "The problem statement had me under the impression that we are to find the optimal way to re-arrange the words. Anyone else that had the same issue?"
                    },
                    {
                        "username": "happyrogue2307",
                        "content": "I noticed something strange for my Python3 solution. \\n\\nLeaving the parameter name as strs make my solution beat 68% but changing it from strs to A makes the same solution beat 94.5%.\\n\\nDoes anyone have an explanation for why this is happening? Thanks!"
                    },
                    {
                        "username": "rustam_taov",
                        "content": "You have an error in the description. In the first example you give us array [\"abc\", \"bce\", \"cae\"], but above in explanation you write that  \"abc\" and \"cee\" are sorted, but where did you get \"cee\"? We have only \"cae\" and it\\'s not sorted. And later you write that \"bca\" is not sorted, but we don\\'t have it, we have \"bce\" which is against sorted"
                    },
                    {
                        "username": "belinskyi",
                        "content": "\"abc\" are characters at 0 index in each string from [\"abc\", \"bce\", \"cae\"]\\n\"cee\" at 2 index\\n\"bca\" at 1 index "
                    },
                    {
                        "username": "ashiqhussainkumar143",
                        "content": "int minDeletionSize(vector<string>& strs) {\\n        \\n        int deletions=0;\\n        int n=strs.size();\\n        int wordSize=strs[0].length();\\n        for(int i=0;i<wordSize;i++){\\n            for(int j=0;j<n-1;j++){\\n                if(strs[j][i]>strs[j+1][i]){\\n                    deletions++;\\n                    break;\\n                }\\n            }\\n        }\\n        return deletions;\\n    }\\n"
                    },
                    {
                        "username": "ujjwalujjs",
                        "content": "Description could be better . Not very hard to understand  but takes some time  to understand the problem."
                    },
                    {
                        "username": "exlo89",
                        "content": "it took me 20 min to check the question and read COLUMNS. "
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "very easy problem take O (n2)"
                    },
                    {
                        "username": "belinskyi",
                        "content": "why n2? it takes `length of array` * `length of strings inside the array`"
                    },
                    {
                        "username": "atninthsky",
                        "content": "What\\'s wrong with the testcase, I don\\'t understand the testcases in the problem statement. Can someone help?"
                    },
                    {
                        "username": "shutdown-r",
                        "content": "The title is misleading to me, we are neither deleting nor making sorted.\\nIt should rather be named \\'counting unsorted columns from string arrays\\'."
                    },
                    {
                        "username": "obaissa",
                        "content": "I definitely struggled with how to format the array for matrix list. \\n\\n```\\n\\'\\'\\'\\nreturn type: integer \\nmatch: sorting / arrays \\nplan:\\n1. counter var \\n2. loop through list and append each index and a piece in a new list of list\\n3. check if sorted value is the same as the list index and add to counter if not \\n4. return counter \\n\\ntime: o(m *n log n ) space: o(n*m)\\n\\'\\'\\'\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        counter = 0   \\n        for i in range(len(strs[0])):\\n            new_word = [strs[j][i] for j in range(len(strs))]\\n            if new_word != sorted(new_word):\\n                counter += 1 \\n        return counter \\n``` "
                    }
                ]
            },
            {
                "id": 1739850,
                "content": [
                    {
                        "username": "Diamantis",
                        "content": "The problem statement had me under the impression that we are to find the optimal way to re-arrange the words. Anyone else that had the same issue?"
                    },
                    {
                        "username": "happyrogue2307",
                        "content": "I noticed something strange for my Python3 solution. \\n\\nLeaving the parameter name as strs make my solution beat 68% but changing it from strs to A makes the same solution beat 94.5%.\\n\\nDoes anyone have an explanation for why this is happening? Thanks!"
                    },
                    {
                        "username": "rustam_taov",
                        "content": "You have an error in the description. In the first example you give us array [\"abc\", \"bce\", \"cae\"], but above in explanation you write that  \"abc\" and \"cee\" are sorted, but where did you get \"cee\"? We have only \"cae\" and it\\'s not sorted. And later you write that \"bca\" is not sorted, but we don\\'t have it, we have \"bce\" which is against sorted"
                    },
                    {
                        "username": "belinskyi",
                        "content": "\"abc\" are characters at 0 index in each string from [\"abc\", \"bce\", \"cae\"]\\n\"cee\" at 2 index\\n\"bca\" at 1 index "
                    },
                    {
                        "username": "ashiqhussainkumar143",
                        "content": "int minDeletionSize(vector<string>& strs) {\\n        \\n        int deletions=0;\\n        int n=strs.size();\\n        int wordSize=strs[0].length();\\n        for(int i=0;i<wordSize;i++){\\n            for(int j=0;j<n-1;j++){\\n                if(strs[j][i]>strs[j+1][i]){\\n                    deletions++;\\n                    break;\\n                }\\n            }\\n        }\\n        return deletions;\\n    }\\n"
                    },
                    {
                        "username": "ujjwalujjs",
                        "content": "Description could be better . Not very hard to understand  but takes some time  to understand the problem."
                    },
                    {
                        "username": "exlo89",
                        "content": "it took me 20 min to check the question and read COLUMNS. "
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "very easy problem take O (n2)"
                    },
                    {
                        "username": "belinskyi",
                        "content": "why n2? it takes `length of array` * `length of strings inside the array`"
                    },
                    {
                        "username": "atninthsky",
                        "content": "What\\'s wrong with the testcase, I don\\'t understand the testcases in the problem statement. Can someone help?"
                    },
                    {
                        "username": "shutdown-r",
                        "content": "The title is misleading to me, we are neither deleting nor making sorted.\\nIt should rather be named \\'counting unsorted columns from string arrays\\'."
                    },
                    {
                        "username": "obaissa",
                        "content": "I definitely struggled with how to format the array for matrix list. \\n\\n```\\n\\'\\'\\'\\nreturn type: integer \\nmatch: sorting / arrays \\nplan:\\n1. counter var \\n2. loop through list and append each index and a piece in a new list of list\\n3. check if sorted value is the same as the list index and add to counter if not \\n4. return counter \\n\\ntime: o(m *n log n ) space: o(n*m)\\n\\'\\'\\'\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        counter = 0   \\n        for i in range(len(strs[0])):\\n            new_word = [strs[j][i] for j in range(len(strs))]\\n            if new_word != sorted(new_word):\\n                counter += 1 \\n        return counter \\n``` "
                    }
                ]
            },
            {
                "id": 1739816,
                "content": [
                    {
                        "username": "Diamantis",
                        "content": "The problem statement had me under the impression that we are to find the optimal way to re-arrange the words. Anyone else that had the same issue?"
                    },
                    {
                        "username": "happyrogue2307",
                        "content": "I noticed something strange for my Python3 solution. \\n\\nLeaving the parameter name as strs make my solution beat 68% but changing it from strs to A makes the same solution beat 94.5%.\\n\\nDoes anyone have an explanation for why this is happening? Thanks!"
                    },
                    {
                        "username": "rustam_taov",
                        "content": "You have an error in the description. In the first example you give us array [\"abc\", \"bce\", \"cae\"], but above in explanation you write that  \"abc\" and \"cee\" are sorted, but where did you get \"cee\"? We have only \"cae\" and it\\'s not sorted. And later you write that \"bca\" is not sorted, but we don\\'t have it, we have \"bce\" which is against sorted"
                    },
                    {
                        "username": "belinskyi",
                        "content": "\"abc\" are characters at 0 index in each string from [\"abc\", \"bce\", \"cae\"]\\n\"cee\" at 2 index\\n\"bca\" at 1 index "
                    },
                    {
                        "username": "ashiqhussainkumar143",
                        "content": "int minDeletionSize(vector<string>& strs) {\\n        \\n        int deletions=0;\\n        int n=strs.size();\\n        int wordSize=strs[0].length();\\n        for(int i=0;i<wordSize;i++){\\n            for(int j=0;j<n-1;j++){\\n                if(strs[j][i]>strs[j+1][i]){\\n                    deletions++;\\n                    break;\\n                }\\n            }\\n        }\\n        return deletions;\\n    }\\n"
                    },
                    {
                        "username": "ujjwalujjs",
                        "content": "Description could be better . Not very hard to understand  but takes some time  to understand the problem."
                    },
                    {
                        "username": "exlo89",
                        "content": "it took me 20 min to check the question and read COLUMNS. "
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "very easy problem take O (n2)"
                    },
                    {
                        "username": "belinskyi",
                        "content": "why n2? it takes `length of array` * `length of strings inside the array`"
                    },
                    {
                        "username": "atninthsky",
                        "content": "What\\'s wrong with the testcase, I don\\'t understand the testcases in the problem statement. Can someone help?"
                    },
                    {
                        "username": "shutdown-r",
                        "content": "The title is misleading to me, we are neither deleting nor making sorted.\\nIt should rather be named \\'counting unsorted columns from string arrays\\'."
                    },
                    {
                        "username": "obaissa",
                        "content": "I definitely struggled with how to format the array for matrix list. \\n\\n```\\n\\'\\'\\'\\nreturn type: integer \\nmatch: sorting / arrays \\nplan:\\n1. counter var \\n2. loop through list and append each index and a piece in a new list of list\\n3. check if sorted value is the same as the list index and add to counter if not \\n4. return counter \\n\\ntime: o(m *n log n ) space: o(n*m)\\n\\'\\'\\'\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        counter = 0   \\n        for i in range(len(strs[0])):\\n            new_word = [strs[j][i] for j in range(len(strs))]\\n            if new_word != sorted(new_word):\\n                counter += 1 \\n        return counter \\n``` "
                    }
                ]
            },
            {
                "id": 1739778,
                "content": [
                    {
                        "username": "Diamantis",
                        "content": "The problem statement had me under the impression that we are to find the optimal way to re-arrange the words. Anyone else that had the same issue?"
                    },
                    {
                        "username": "happyrogue2307",
                        "content": "I noticed something strange for my Python3 solution. \\n\\nLeaving the parameter name as strs make my solution beat 68% but changing it from strs to A makes the same solution beat 94.5%.\\n\\nDoes anyone have an explanation for why this is happening? Thanks!"
                    },
                    {
                        "username": "rustam_taov",
                        "content": "You have an error in the description. In the first example you give us array [\"abc\", \"bce\", \"cae\"], but above in explanation you write that  \"abc\" and \"cee\" are sorted, but where did you get \"cee\"? We have only \"cae\" and it\\'s not sorted. And later you write that \"bca\" is not sorted, but we don\\'t have it, we have \"bce\" which is against sorted"
                    },
                    {
                        "username": "belinskyi",
                        "content": "\"abc\" are characters at 0 index in each string from [\"abc\", \"bce\", \"cae\"]\\n\"cee\" at 2 index\\n\"bca\" at 1 index "
                    },
                    {
                        "username": "ashiqhussainkumar143",
                        "content": "int minDeletionSize(vector<string>& strs) {\\n        \\n        int deletions=0;\\n        int n=strs.size();\\n        int wordSize=strs[0].length();\\n        for(int i=0;i<wordSize;i++){\\n            for(int j=0;j<n-1;j++){\\n                if(strs[j][i]>strs[j+1][i]){\\n                    deletions++;\\n                    break;\\n                }\\n            }\\n        }\\n        return deletions;\\n    }\\n"
                    },
                    {
                        "username": "ujjwalujjs",
                        "content": "Description could be better . Not very hard to understand  but takes some time  to understand the problem."
                    },
                    {
                        "username": "exlo89",
                        "content": "it took me 20 min to check the question and read COLUMNS. "
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "very easy problem take O (n2)"
                    },
                    {
                        "username": "belinskyi",
                        "content": "why n2? it takes `length of array` * `length of strings inside the array`"
                    },
                    {
                        "username": "atninthsky",
                        "content": "What\\'s wrong with the testcase, I don\\'t understand the testcases in the problem statement. Can someone help?"
                    },
                    {
                        "username": "shutdown-r",
                        "content": "The title is misleading to me, we are neither deleting nor making sorted.\\nIt should rather be named \\'counting unsorted columns from string arrays\\'."
                    },
                    {
                        "username": "obaissa",
                        "content": "I definitely struggled with how to format the array for matrix list. \\n\\n```\\n\\'\\'\\'\\nreturn type: integer \\nmatch: sorting / arrays \\nplan:\\n1. counter var \\n2. loop through list and append each index and a piece in a new list of list\\n3. check if sorted value is the same as the list index and add to counter if not \\n4. return counter \\n\\ntime: o(m *n log n ) space: o(n*m)\\n\\'\\'\\'\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        counter = 0   \\n        for i in range(len(strs[0])):\\n            new_word = [strs[j][i] for j in range(len(strs))]\\n            if new_word != sorted(new_word):\\n                counter += 1 \\n        return counter \\n``` "
                    }
                ]
            },
            {
                "id": 1739764,
                "content": [
                    {
                        "username": "Diamantis",
                        "content": "The problem statement had me under the impression that we are to find the optimal way to re-arrange the words. Anyone else that had the same issue?"
                    },
                    {
                        "username": "happyrogue2307",
                        "content": "I noticed something strange for my Python3 solution. \\n\\nLeaving the parameter name as strs make my solution beat 68% but changing it from strs to A makes the same solution beat 94.5%.\\n\\nDoes anyone have an explanation for why this is happening? Thanks!"
                    },
                    {
                        "username": "rustam_taov",
                        "content": "You have an error in the description. In the first example you give us array [\"abc\", \"bce\", \"cae\"], but above in explanation you write that  \"abc\" and \"cee\" are sorted, but where did you get \"cee\"? We have only \"cae\" and it\\'s not sorted. And later you write that \"bca\" is not sorted, but we don\\'t have it, we have \"bce\" which is against sorted"
                    },
                    {
                        "username": "belinskyi",
                        "content": "\"abc\" are characters at 0 index in each string from [\"abc\", \"bce\", \"cae\"]\\n\"cee\" at 2 index\\n\"bca\" at 1 index "
                    },
                    {
                        "username": "ashiqhussainkumar143",
                        "content": "int minDeletionSize(vector<string>& strs) {\\n        \\n        int deletions=0;\\n        int n=strs.size();\\n        int wordSize=strs[0].length();\\n        for(int i=0;i<wordSize;i++){\\n            for(int j=0;j<n-1;j++){\\n                if(strs[j][i]>strs[j+1][i]){\\n                    deletions++;\\n                    break;\\n                }\\n            }\\n        }\\n        return deletions;\\n    }\\n"
                    },
                    {
                        "username": "ujjwalujjs",
                        "content": "Description could be better . Not very hard to understand  but takes some time  to understand the problem."
                    },
                    {
                        "username": "exlo89",
                        "content": "it took me 20 min to check the question and read COLUMNS. "
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "very easy problem take O (n2)"
                    },
                    {
                        "username": "belinskyi",
                        "content": "why n2? it takes `length of array` * `length of strings inside the array`"
                    },
                    {
                        "username": "atninthsky",
                        "content": "What\\'s wrong with the testcase, I don\\'t understand the testcases in the problem statement. Can someone help?"
                    },
                    {
                        "username": "shutdown-r",
                        "content": "The title is misleading to me, we are neither deleting nor making sorted.\\nIt should rather be named \\'counting unsorted columns from string arrays\\'."
                    },
                    {
                        "username": "obaissa",
                        "content": "I definitely struggled with how to format the array for matrix list. \\n\\n```\\n\\'\\'\\'\\nreturn type: integer \\nmatch: sorting / arrays \\nplan:\\n1. counter var \\n2. loop through list and append each index and a piece in a new list of list\\n3. check if sorted value is the same as the list index and add to counter if not \\n4. return counter \\n\\ntime: o(m *n log n ) space: o(n*m)\\n\\'\\'\\'\\nclass Solution:\\n    def minDeletionSize(self, strs: List[str]) -> int:\\n        counter = 0   \\n        for i in range(len(strs[0])):\\n            new_word = [strs[j][i] for j in range(len(strs))]\\n            if new_word != sorted(new_word):\\n                counter += 1 \\n        return counter \\n``` "
                    }
                ]
            },
            {
                "id": 1739760,
                "content": [
                    {
                        "username": "aka773",
                        "content": "don't ignore line 7 explanation!!!\nlets say we have\nstrs = [\"abc\", \"def\", \"ghi\"]\n see like this: \n \nfirst col :  a, d, g\nsecond:   b, e, h\nthird col:  c, f, i\n"
                    },
                    {
                        "username": "_Black_sd_",
                        "content": "\\u2705 Black Code | C++ | Brute Force\\n\\ntraversing for all column and check for non ascending order if yes then cnt++ and break the loop. check for all coulmn and return ans.\\n\\n    class Solution {\\n    public:\\n        int minDeletionSize(vector<string>& v) {\\n            int n=v.size();\\n            int m=v[0].size();\\n\\n            int cnt=0;\\n            for(int i=0;i<m;i++)\\n            {\\n                for(int j=1;j<n;j++)\\n                {\\n                    if(v[j-1][i]>v[j][i])\\n                    {\\n                        cnt++;\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            return cnt;\\n        }\\n    };"
                    },
                    {
                        "username": "sourabh15072002",
                        "content": "Easy and Simple Approach to do it"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Imagine breaking your streak on 31st December \\uD83D\\uDE25\\uD83D\\uDE25\\uD83D\\uDE25 I redeemed coins to make up for that missed challenge but I\\'m not able to?!?! :("
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "Key concept: we need to check if column is sorted or not .\\nso \\n1. we traverse the matrix by column .\\n2. in each column if any element is smaller than the previous one then that column is not sorted (count it)\\n\\nSpace complexity : O(1) \\nTime complexity : O(n*k) where n is size of vector and k is size of each string(all with same size)."
                    },
                    {
                        "username": "Namit567",
                        "content": "This code appears to be checking for how many columns need to be deleted from a list of strings in order to make the strings lexicographically sorted in ascending order.\\n\\nFor each column in the strings, the code checks if the characters at that column are in the correct order (i.e. the character in the first string is lexicographically smaller than the character in the second string, the character in the second string is lexicographically smaller than the character in the third string, and so on). If a column is out of order, the code increments the count by 1 and breaks out of the inner loop.\\n\\nFinally, the code returns the count of columns that need to be deleted."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order\n[abc] -> a b с are the ROWS so dont check b > a, c > b etc"
                    },
                    {
                        "username": "MichaelTan53",
                        "content": "All good and nice practice. The bullet point of this question is that it requires to find out the number of the columns that is not sorted instead of the rows, so directly checking each elements in the given list does not work."
                    },
                    {
                        "username": "Peet_code",
                        "content": "The idea is to take each column directly, and then sort it to see if it it is equal to the original string."
                    },
                    {
                        "username": "belinskyi",
                        "content": "Rather check order instead of sorting as sorting is heavy operation( O(n*log(n)) )"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Feels good to solve it in a single go :)"
                    }
                ]
            },
            {
                "id": 1739751,
                "content": [
                    {
                        "username": "aka773",
                        "content": "don't ignore line 7 explanation!!!\nlets say we have\nstrs = [\"abc\", \"def\", \"ghi\"]\n see like this: \n \nfirst col :  a, d, g\nsecond:   b, e, h\nthird col:  c, f, i\n"
                    },
                    {
                        "username": "_Black_sd_",
                        "content": "\\u2705 Black Code | C++ | Brute Force\\n\\ntraversing for all column and check for non ascending order if yes then cnt++ and break the loop. check for all coulmn and return ans.\\n\\n    class Solution {\\n    public:\\n        int minDeletionSize(vector<string>& v) {\\n            int n=v.size();\\n            int m=v[0].size();\\n\\n            int cnt=0;\\n            for(int i=0;i<m;i++)\\n            {\\n                for(int j=1;j<n;j++)\\n                {\\n                    if(v[j-1][i]>v[j][i])\\n                    {\\n                        cnt++;\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            return cnt;\\n        }\\n    };"
                    },
                    {
                        "username": "sourabh15072002",
                        "content": "Easy and Simple Approach to do it"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Imagine breaking your streak on 31st December \\uD83D\\uDE25\\uD83D\\uDE25\\uD83D\\uDE25 I redeemed coins to make up for that missed challenge but I\\'m not able to?!?! :("
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "Key concept: we need to check if column is sorted or not .\\nso \\n1. we traverse the matrix by column .\\n2. in each column if any element is smaller than the previous one then that column is not sorted (count it)\\n\\nSpace complexity : O(1) \\nTime complexity : O(n*k) where n is size of vector and k is size of each string(all with same size)."
                    },
                    {
                        "username": "Namit567",
                        "content": "This code appears to be checking for how many columns need to be deleted from a list of strings in order to make the strings lexicographically sorted in ascending order.\\n\\nFor each column in the strings, the code checks if the characters at that column are in the correct order (i.e. the character in the first string is lexicographically smaller than the character in the second string, the character in the second string is lexicographically smaller than the character in the third string, and so on). If a column is out of order, the code increments the count by 1 and breaks out of the inner loop.\\n\\nFinally, the code returns the count of columns that need to be deleted."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order\n[abc] -> a b с are the ROWS so dont check b > a, c > b etc"
                    },
                    {
                        "username": "MichaelTan53",
                        "content": "All good and nice practice. The bullet point of this question is that it requires to find out the number of the columns that is not sorted instead of the rows, so directly checking each elements in the given list does not work."
                    },
                    {
                        "username": "Peet_code",
                        "content": "The idea is to take each column directly, and then sort it to see if it it is equal to the original string."
                    },
                    {
                        "username": "belinskyi",
                        "content": "Rather check order instead of sorting as sorting is heavy operation( O(n*log(n)) )"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Feels good to solve it in a single go :)"
                    }
                ]
            },
            {
                "id": 1739729,
                "content": [
                    {
                        "username": "aka773",
                        "content": "don't ignore line 7 explanation!!!\nlets say we have\nstrs = [\"abc\", \"def\", \"ghi\"]\n see like this: \n \nfirst col :  a, d, g\nsecond:   b, e, h\nthird col:  c, f, i\n"
                    },
                    {
                        "username": "_Black_sd_",
                        "content": "\\u2705 Black Code | C++ | Brute Force\\n\\ntraversing for all column and check for non ascending order if yes then cnt++ and break the loop. check for all coulmn and return ans.\\n\\n    class Solution {\\n    public:\\n        int minDeletionSize(vector<string>& v) {\\n            int n=v.size();\\n            int m=v[0].size();\\n\\n            int cnt=0;\\n            for(int i=0;i<m;i++)\\n            {\\n                for(int j=1;j<n;j++)\\n                {\\n                    if(v[j-1][i]>v[j][i])\\n                    {\\n                        cnt++;\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            return cnt;\\n        }\\n    };"
                    },
                    {
                        "username": "sourabh15072002",
                        "content": "Easy and Simple Approach to do it"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Imagine breaking your streak on 31st December \\uD83D\\uDE25\\uD83D\\uDE25\\uD83D\\uDE25 I redeemed coins to make up for that missed challenge but I\\'m not able to?!?! :("
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "Key concept: we need to check if column is sorted or not .\\nso \\n1. we traverse the matrix by column .\\n2. in each column if any element is smaller than the previous one then that column is not sorted (count it)\\n\\nSpace complexity : O(1) \\nTime complexity : O(n*k) where n is size of vector and k is size of each string(all with same size)."
                    },
                    {
                        "username": "Namit567",
                        "content": "This code appears to be checking for how many columns need to be deleted from a list of strings in order to make the strings lexicographically sorted in ascending order.\\n\\nFor each column in the strings, the code checks if the characters at that column are in the correct order (i.e. the character in the first string is lexicographically smaller than the character in the second string, the character in the second string is lexicographically smaller than the character in the third string, and so on). If a column is out of order, the code increments the count by 1 and breaks out of the inner loop.\\n\\nFinally, the code returns the count of columns that need to be deleted."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order\n[abc] -> a b с are the ROWS so dont check b > a, c > b etc"
                    },
                    {
                        "username": "MichaelTan53",
                        "content": "All good and nice practice. The bullet point of this question is that it requires to find out the number of the columns that is not sorted instead of the rows, so directly checking each elements in the given list does not work."
                    },
                    {
                        "username": "Peet_code",
                        "content": "The idea is to take each column directly, and then sort it to see if it it is equal to the original string."
                    },
                    {
                        "username": "belinskyi",
                        "content": "Rather check order instead of sorting as sorting is heavy operation( O(n*log(n)) )"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Feels good to solve it in a single go :)"
                    }
                ]
            },
            {
                "id": 1739635,
                "content": [
                    {
                        "username": "aka773",
                        "content": "don't ignore line 7 explanation!!!\nlets say we have\nstrs = [\"abc\", \"def\", \"ghi\"]\n see like this: \n \nfirst col :  a, d, g\nsecond:   b, e, h\nthird col:  c, f, i\n"
                    },
                    {
                        "username": "_Black_sd_",
                        "content": "\\u2705 Black Code | C++ | Brute Force\\n\\ntraversing for all column and check for non ascending order if yes then cnt++ and break the loop. check for all coulmn and return ans.\\n\\n    class Solution {\\n    public:\\n        int minDeletionSize(vector<string>& v) {\\n            int n=v.size();\\n            int m=v[0].size();\\n\\n            int cnt=0;\\n            for(int i=0;i<m;i++)\\n            {\\n                for(int j=1;j<n;j++)\\n                {\\n                    if(v[j-1][i]>v[j][i])\\n                    {\\n                        cnt++;\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            return cnt;\\n        }\\n    };"
                    },
                    {
                        "username": "sourabh15072002",
                        "content": "Easy and Simple Approach to do it"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Imagine breaking your streak on 31st December \\uD83D\\uDE25\\uD83D\\uDE25\\uD83D\\uDE25 I redeemed coins to make up for that missed challenge but I\\'m not able to?!?! :("
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "Key concept: we need to check if column is sorted or not .\\nso \\n1. we traverse the matrix by column .\\n2. in each column if any element is smaller than the previous one then that column is not sorted (count it)\\n\\nSpace complexity : O(1) \\nTime complexity : O(n*k) where n is size of vector and k is size of each string(all with same size)."
                    },
                    {
                        "username": "Namit567",
                        "content": "This code appears to be checking for how many columns need to be deleted from a list of strings in order to make the strings lexicographically sorted in ascending order.\\n\\nFor each column in the strings, the code checks if the characters at that column are in the correct order (i.e. the character in the first string is lexicographically smaller than the character in the second string, the character in the second string is lexicographically smaller than the character in the third string, and so on). If a column is out of order, the code increments the count by 1 and breaks out of the inner loop.\\n\\nFinally, the code returns the count of columns that need to be deleted."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order\n[abc] -> a b с are the ROWS so dont check b > a, c > b etc"
                    },
                    {
                        "username": "MichaelTan53",
                        "content": "All good and nice practice. The bullet point of this question is that it requires to find out the number of the columns that is not sorted instead of the rows, so directly checking each elements in the given list does not work."
                    },
                    {
                        "username": "Peet_code",
                        "content": "The idea is to take each column directly, and then sort it to see if it it is equal to the original string."
                    },
                    {
                        "username": "belinskyi",
                        "content": "Rather check order instead of sorting as sorting is heavy operation( O(n*log(n)) )"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Feels good to solve it in a single go :)"
                    }
                ]
            },
            {
                "id": 1739619,
                "content": [
                    {
                        "username": "aka773",
                        "content": "don't ignore line 7 explanation!!!\nlets say we have\nstrs = [\"abc\", \"def\", \"ghi\"]\n see like this: \n \nfirst col :  a, d, g\nsecond:   b, e, h\nthird col:  c, f, i\n"
                    },
                    {
                        "username": "_Black_sd_",
                        "content": "\\u2705 Black Code | C++ | Brute Force\\n\\ntraversing for all column and check for non ascending order if yes then cnt++ and break the loop. check for all coulmn and return ans.\\n\\n    class Solution {\\n    public:\\n        int minDeletionSize(vector<string>& v) {\\n            int n=v.size();\\n            int m=v[0].size();\\n\\n            int cnt=0;\\n            for(int i=0;i<m;i++)\\n            {\\n                for(int j=1;j<n;j++)\\n                {\\n                    if(v[j-1][i]>v[j][i])\\n                    {\\n                        cnt++;\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            return cnt;\\n        }\\n    };"
                    },
                    {
                        "username": "sourabh15072002",
                        "content": "Easy and Simple Approach to do it"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Imagine breaking your streak on 31st December \\uD83D\\uDE25\\uD83D\\uDE25\\uD83D\\uDE25 I redeemed coins to make up for that missed challenge but I\\'m not able to?!?! :("
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "Key concept: we need to check if column is sorted or not .\\nso \\n1. we traverse the matrix by column .\\n2. in each column if any element is smaller than the previous one then that column is not sorted (count it)\\n\\nSpace complexity : O(1) \\nTime complexity : O(n*k) where n is size of vector and k is size of each string(all with same size)."
                    },
                    {
                        "username": "Namit567",
                        "content": "This code appears to be checking for how many columns need to be deleted from a list of strings in order to make the strings lexicographically sorted in ascending order.\\n\\nFor each column in the strings, the code checks if the characters at that column are in the correct order (i.e. the character in the first string is lexicographically smaller than the character in the second string, the character in the second string is lexicographically smaller than the character in the third string, and so on). If a column is out of order, the code increments the count by 1 and breaks out of the inner loop.\\n\\nFinally, the code returns the count of columns that need to be deleted."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order\n[abc] -> a b с are the ROWS so dont check b > a, c > b etc"
                    },
                    {
                        "username": "MichaelTan53",
                        "content": "All good and nice practice. The bullet point of this question is that it requires to find out the number of the columns that is not sorted instead of the rows, so directly checking each elements in the given list does not work."
                    },
                    {
                        "username": "Peet_code",
                        "content": "The idea is to take each column directly, and then sort it to see if it it is equal to the original string."
                    },
                    {
                        "username": "belinskyi",
                        "content": "Rather check order instead of sorting as sorting is heavy operation( O(n*log(n)) )"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Feels good to solve it in a single go :)"
                    }
                ]
            },
            {
                "id": 1739598,
                "content": [
                    {
                        "username": "aka773",
                        "content": "don't ignore line 7 explanation!!!\nlets say we have\nstrs = [\"abc\", \"def\", \"ghi\"]\n see like this: \n \nfirst col :  a, d, g\nsecond:   b, e, h\nthird col:  c, f, i\n"
                    },
                    {
                        "username": "_Black_sd_",
                        "content": "\\u2705 Black Code | C++ | Brute Force\\n\\ntraversing for all column and check for non ascending order if yes then cnt++ and break the loop. check for all coulmn and return ans.\\n\\n    class Solution {\\n    public:\\n        int minDeletionSize(vector<string>& v) {\\n            int n=v.size();\\n            int m=v[0].size();\\n\\n            int cnt=0;\\n            for(int i=0;i<m;i++)\\n            {\\n                for(int j=1;j<n;j++)\\n                {\\n                    if(v[j-1][i]>v[j][i])\\n                    {\\n                        cnt++;\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            return cnt;\\n        }\\n    };"
                    },
                    {
                        "username": "sourabh15072002",
                        "content": "Easy and Simple Approach to do it"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Imagine breaking your streak on 31st December \\uD83D\\uDE25\\uD83D\\uDE25\\uD83D\\uDE25 I redeemed coins to make up for that missed challenge but I\\'m not able to?!?! :("
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "Key concept: we need to check if column is sorted or not .\\nso \\n1. we traverse the matrix by column .\\n2. in each column if any element is smaller than the previous one then that column is not sorted (count it)\\n\\nSpace complexity : O(1) \\nTime complexity : O(n*k) where n is size of vector and k is size of each string(all with same size)."
                    },
                    {
                        "username": "Namit567",
                        "content": "This code appears to be checking for how many columns need to be deleted from a list of strings in order to make the strings lexicographically sorted in ascending order.\\n\\nFor each column in the strings, the code checks if the characters at that column are in the correct order (i.e. the character in the first string is lexicographically smaller than the character in the second string, the character in the second string is lexicographically smaller than the character in the third string, and so on). If a column is out of order, the code increments the count by 1 and breaks out of the inner loop.\\n\\nFinally, the code returns the count of columns that need to be deleted."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order\n[abc] -> a b с are the ROWS so dont check b > a, c > b etc"
                    },
                    {
                        "username": "MichaelTan53",
                        "content": "All good and nice practice. The bullet point of this question is that it requires to find out the number of the columns that is not sorted instead of the rows, so directly checking each elements in the given list does not work."
                    },
                    {
                        "username": "Peet_code",
                        "content": "The idea is to take each column directly, and then sort it to see if it it is equal to the original string."
                    },
                    {
                        "username": "belinskyi",
                        "content": "Rather check order instead of sorting as sorting is heavy operation( O(n*log(n)) )"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Feels good to solve it in a single go :)"
                    }
                ]
            },
            {
                "id": 1739592,
                "content": [
                    {
                        "username": "aka773",
                        "content": "don't ignore line 7 explanation!!!\nlets say we have\nstrs = [\"abc\", \"def\", \"ghi\"]\n see like this: \n \nfirst col :  a, d, g\nsecond:   b, e, h\nthird col:  c, f, i\n"
                    },
                    {
                        "username": "_Black_sd_",
                        "content": "\\u2705 Black Code | C++ | Brute Force\\n\\ntraversing for all column and check for non ascending order if yes then cnt++ and break the loop. check for all coulmn and return ans.\\n\\n    class Solution {\\n    public:\\n        int minDeletionSize(vector<string>& v) {\\n            int n=v.size();\\n            int m=v[0].size();\\n\\n            int cnt=0;\\n            for(int i=0;i<m;i++)\\n            {\\n                for(int j=1;j<n;j++)\\n                {\\n                    if(v[j-1][i]>v[j][i])\\n                    {\\n                        cnt++;\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            return cnt;\\n        }\\n    };"
                    },
                    {
                        "username": "sourabh15072002",
                        "content": "Easy and Simple Approach to do it"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Imagine breaking your streak on 31st December \\uD83D\\uDE25\\uD83D\\uDE25\\uD83D\\uDE25 I redeemed coins to make up for that missed challenge but I\\'m not able to?!?! :("
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "Key concept: we need to check if column is sorted or not .\\nso \\n1. we traverse the matrix by column .\\n2. in each column if any element is smaller than the previous one then that column is not sorted (count it)\\n\\nSpace complexity : O(1) \\nTime complexity : O(n*k) where n is size of vector and k is size of each string(all with same size)."
                    },
                    {
                        "username": "Namit567",
                        "content": "This code appears to be checking for how many columns need to be deleted from a list of strings in order to make the strings lexicographically sorted in ascending order.\\n\\nFor each column in the strings, the code checks if the characters at that column are in the correct order (i.e. the character in the first string is lexicographically smaller than the character in the second string, the character in the second string is lexicographically smaller than the character in the third string, and so on). If a column is out of order, the code increments the count by 1 and breaks out of the inner loop.\\n\\nFinally, the code returns the count of columns that need to be deleted."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order\n[abc] -> a b с are the ROWS so dont check b > a, c > b etc"
                    },
                    {
                        "username": "MichaelTan53",
                        "content": "All good and nice practice. The bullet point of this question is that it requires to find out the number of the columns that is not sorted instead of the rows, so directly checking each elements in the given list does not work."
                    },
                    {
                        "username": "Peet_code",
                        "content": "The idea is to take each column directly, and then sort it to see if it it is equal to the original string."
                    },
                    {
                        "username": "belinskyi",
                        "content": "Rather check order instead of sorting as sorting is heavy operation( O(n*log(n)) )"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Feels good to solve it in a single go :)"
                    }
                ]
            },
            {
                "id": 1739579,
                "content": [
                    {
                        "username": "aka773",
                        "content": "don't ignore line 7 explanation!!!\nlets say we have\nstrs = [\"abc\", \"def\", \"ghi\"]\n see like this: \n \nfirst col :  a, d, g\nsecond:   b, e, h\nthird col:  c, f, i\n"
                    },
                    {
                        "username": "_Black_sd_",
                        "content": "\\u2705 Black Code | C++ | Brute Force\\n\\ntraversing for all column and check for non ascending order if yes then cnt++ and break the loop. check for all coulmn and return ans.\\n\\n    class Solution {\\n    public:\\n        int minDeletionSize(vector<string>& v) {\\n            int n=v.size();\\n            int m=v[0].size();\\n\\n            int cnt=0;\\n            for(int i=0;i<m;i++)\\n            {\\n                for(int j=1;j<n;j++)\\n                {\\n                    if(v[j-1][i]>v[j][i])\\n                    {\\n                        cnt++;\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            return cnt;\\n        }\\n    };"
                    },
                    {
                        "username": "sourabh15072002",
                        "content": "Easy and Simple Approach to do it"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Imagine breaking your streak on 31st December \\uD83D\\uDE25\\uD83D\\uDE25\\uD83D\\uDE25 I redeemed coins to make up for that missed challenge but I\\'m not able to?!?! :("
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "Key concept: we need to check if column is sorted or not .\\nso \\n1. we traverse the matrix by column .\\n2. in each column if any element is smaller than the previous one then that column is not sorted (count it)\\n\\nSpace complexity : O(1) \\nTime complexity : O(n*k) where n is size of vector and k is size of each string(all with same size)."
                    },
                    {
                        "username": "Namit567",
                        "content": "This code appears to be checking for how many columns need to be deleted from a list of strings in order to make the strings lexicographically sorted in ascending order.\\n\\nFor each column in the strings, the code checks if the characters at that column are in the correct order (i.e. the character in the first string is lexicographically smaller than the character in the second string, the character in the second string is lexicographically smaller than the character in the third string, and so on). If a column is out of order, the code increments the count by 1 and breaks out of the inner loop.\\n\\nFinally, the code returns the count of columns that need to be deleted."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order\n[abc] -> a b с are the ROWS so dont check b > a, c > b etc"
                    },
                    {
                        "username": "MichaelTan53",
                        "content": "All good and nice practice. The bullet point of this question is that it requires to find out the number of the columns that is not sorted instead of the rows, so directly checking each elements in the given list does not work."
                    },
                    {
                        "username": "Peet_code",
                        "content": "The idea is to take each column directly, and then sort it to see if it it is equal to the original string."
                    },
                    {
                        "username": "belinskyi",
                        "content": "Rather check order instead of sorting as sorting is heavy operation( O(n*log(n)) )"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Feels good to solve it in a single go :)"
                    }
                ]
            },
            {
                "id": 1739571,
                "content": [
                    {
                        "username": "aka773",
                        "content": "don't ignore line 7 explanation!!!\nlets say we have\nstrs = [\"abc\", \"def\", \"ghi\"]\n see like this: \n \nfirst col :  a, d, g\nsecond:   b, e, h\nthird col:  c, f, i\n"
                    },
                    {
                        "username": "_Black_sd_",
                        "content": "\\u2705 Black Code | C++ | Brute Force\\n\\ntraversing for all column and check for non ascending order if yes then cnt++ and break the loop. check for all coulmn and return ans.\\n\\n    class Solution {\\n    public:\\n        int minDeletionSize(vector<string>& v) {\\n            int n=v.size();\\n            int m=v[0].size();\\n\\n            int cnt=0;\\n            for(int i=0;i<m;i++)\\n            {\\n                for(int j=1;j<n;j++)\\n                {\\n                    if(v[j-1][i]>v[j][i])\\n                    {\\n                        cnt++;\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            return cnt;\\n        }\\n    };"
                    },
                    {
                        "username": "sourabh15072002",
                        "content": "Easy and Simple Approach to do it"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Imagine breaking your streak on 31st December \\uD83D\\uDE25\\uD83D\\uDE25\\uD83D\\uDE25 I redeemed coins to make up for that missed challenge but I\\'m not able to?!?! :("
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "Key concept: we need to check if column is sorted or not .\\nso \\n1. we traverse the matrix by column .\\n2. in each column if any element is smaller than the previous one then that column is not sorted (count it)\\n\\nSpace complexity : O(1) \\nTime complexity : O(n*k) where n is size of vector and k is size of each string(all with same size)."
                    },
                    {
                        "username": "Namit567",
                        "content": "This code appears to be checking for how many columns need to be deleted from a list of strings in order to make the strings lexicographically sorted in ascending order.\\n\\nFor each column in the strings, the code checks if the characters at that column are in the correct order (i.e. the character in the first string is lexicographically smaller than the character in the second string, the character in the second string is lexicographically smaller than the character in the third string, and so on). If a column is out of order, the code increments the count by 1 and breaks out of the inner loop.\\n\\nFinally, the code returns the count of columns that need to be deleted."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order\n[abc] -> a b с are the ROWS so dont check b > a, c > b etc"
                    },
                    {
                        "username": "MichaelTan53",
                        "content": "All good and nice practice. The bullet point of this question is that it requires to find out the number of the columns that is not sorted instead of the rows, so directly checking each elements in the given list does not work."
                    },
                    {
                        "username": "Peet_code",
                        "content": "The idea is to take each column directly, and then sort it to see if it it is equal to the original string."
                    },
                    {
                        "username": "belinskyi",
                        "content": "Rather check order instead of sorting as sorting is heavy operation( O(n*log(n)) )"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Feels good to solve it in a single go :)"
                    }
                ]
            },
            {
                "id": 1739565,
                "content": [
                    {
                        "username": "aka773",
                        "content": "don't ignore line 7 explanation!!!\nlets say we have\nstrs = [\"abc\", \"def\", \"ghi\"]\n see like this: \n \nfirst col :  a, d, g\nsecond:   b, e, h\nthird col:  c, f, i\n"
                    },
                    {
                        "username": "_Black_sd_",
                        "content": "\\u2705 Black Code | C++ | Brute Force\\n\\ntraversing for all column and check for non ascending order if yes then cnt++ and break the loop. check for all coulmn and return ans.\\n\\n    class Solution {\\n    public:\\n        int minDeletionSize(vector<string>& v) {\\n            int n=v.size();\\n            int m=v[0].size();\\n\\n            int cnt=0;\\n            for(int i=0;i<m;i++)\\n            {\\n                for(int j=1;j<n;j++)\\n                {\\n                    if(v[j-1][i]>v[j][i])\\n                    {\\n                        cnt++;\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            return cnt;\\n        }\\n    };"
                    },
                    {
                        "username": "sourabh15072002",
                        "content": "Easy and Simple Approach to do it"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Imagine breaking your streak on 31st December \\uD83D\\uDE25\\uD83D\\uDE25\\uD83D\\uDE25 I redeemed coins to make up for that missed challenge but I\\'m not able to?!?! :("
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "Key concept: we need to check if column is sorted or not .\\nso \\n1. we traverse the matrix by column .\\n2. in each column if any element is smaller than the previous one then that column is not sorted (count it)\\n\\nSpace complexity : O(1) \\nTime complexity : O(n*k) where n is size of vector and k is size of each string(all with same size)."
                    },
                    {
                        "username": "Namit567",
                        "content": "This code appears to be checking for how many columns need to be deleted from a list of strings in order to make the strings lexicographically sorted in ascending order.\\n\\nFor each column in the strings, the code checks if the characters at that column are in the correct order (i.e. the character in the first string is lexicographically smaller than the character in the second string, the character in the second string is lexicographically smaller than the character in the third string, and so on). If a column is out of order, the code increments the count by 1 and breaks out of the inner loop.\\n\\nFinally, the code returns the count of columns that need to be deleted."
                    },
                    {
                        "username": "Msey",
                        "content": "the main idea is the sorting should be applied on COLUMNS in ascending order\n[abc] -> a b с are the ROWS so dont check b > a, c > b etc"
                    },
                    {
                        "username": "MichaelTan53",
                        "content": "All good and nice practice. The bullet point of this question is that it requires to find out the number of the columns that is not sorted instead of the rows, so directly checking each elements in the given list does not work."
                    },
                    {
                        "username": "Peet_code",
                        "content": "The idea is to take each column directly, and then sort it to see if it it is equal to the original string."
                    },
                    {
                        "username": "belinskyi",
                        "content": "Rather check order instead of sorting as sorting is heavy operation( O(n*log(n)) )"
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "Feels good to solve it in a single go :)"
                    }
                ]
            },
            {
                "id": 1739563,
                "content": [
                    {
                        "username": "seankala",
                        "content": "I can\\'t be the only one who didn\\'t have a problem understanding the problem... Then again, I feel like if the word \"lexicographically\" appears people get confused."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@Sean Yi](/seankala), descending lexical order is also lexical. They should have mentioned clearly that only ascending lexical is desired."
                    },
                    {
                        "username": "calm27",
                        "content": "pardon, i don't understand the problem. \nif any low-ego level person willing to explain, it would be nice. \nI see those big-ego unemployed kids spitting a lot in comments, but it is not useful. \n\n `abc\nbce\ncae`\n\n`bce` is not sorted, by what rule?\nwhat is the rule of ordering? \nThere are several variants and generalizations of the lexicographical ordering. \nWhich one we follow here?"
                    },
                    {
                        "username": "calm27",
                        "content": "[@belinskyi](/belinskyi) gooosh. got it. thanks a lot "
                    },
                    {
                        "username": "belinskyi",
                        "content": "[@Msey](/Msey) you\\'ve updated your answer while I was writing extended explanation :) "
                    },
                    {
                        "username": "MichaelTan53",
                        "content": "The question requires to find out the number of the COLUMNS that is not sorted instead of the rows."
                    },
                    {
                        "username": "Msey",
                        "content": "[@belinskyi](/belinskyi) but why this one is not? [\"zyx\",\"wvu\",\"tsr\"]\n\nupd: I got it. It should be sorted in ascending order"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you\\'ll see [c,e,e]. This array is sorted."
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please go through the video fro easiest explanation \\nNaive Approach :\\n\\nhttps://youtu.be/3IIUFbqmXik\\n\\nOptimal Approach: \\nhttps://youtu.be/2wfg0YeYM4k"
                    },
                    {
                        "username": "noob-pika",
                        "content": "I just hope someone finds a solution with O(n*log(n)) or less time complexity"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "Just use two loops one for rows and other for column and increase the counter if strs[i][j]<strs[i-1][j] this is true (note : i=rows and j=column)"
                    },
                    {
                        "username": "harrysodhi1000",
                        "content": "The problem statement states that we want to delete the columns that are not sorted lexicographically, i.e. sorted in ascending order of their ASCII numbers(as in a dictionary). What would be algorithm if the problem stated that they could also be in descending order.\\n\\nExample: \"c b a\" is also correct."
                    },
                    {
                        "username": "ankit_0710",
                        "content": "please explain this code\n\nint minDeletionSize(char ** A, int ASize){\n    int count = 0, l = strlen(A[0]);\n    for(int i = 0; i < l; i++){\n        for(int j = 0; j < ASize-1; j++){\n            if(A[j][i] > A[j+1][i]){\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n}"
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please upvote for the easiest explanation\\nhttps://youtu.be/3IIUFbqmXik\\n"
                    },
                    {
                        "username": "paularko64",
                        "content": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n       int count=0;\\n       for(int i=0;i<strs[0].length();i++)\\n       {\\n           for(int j=0;j<strs.size()-1;j++)\\n           {\\n               if(strs[j][i]>strs[j+1][i])\\n               {\\n                   count++;\\n                   break;\\n               }\\n           }\\n       } \\n       return count;\\n    }\\n};"
                    },
                    {
                        "username": "piotrkow93",
                        "content": "Treat this as two dimensional array.\\nYou can check if ASCII char is less that before, if yes, this column need to be deleted"
                    }
                ]
            },
            {
                "id": 1739544,
                "content": [
                    {
                        "username": "seankala",
                        "content": "I can\\'t be the only one who didn\\'t have a problem understanding the problem... Then again, I feel like if the word \"lexicographically\" appears people get confused."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@Sean Yi](/seankala), descending lexical order is also lexical. They should have mentioned clearly that only ascending lexical is desired."
                    },
                    {
                        "username": "calm27",
                        "content": "pardon, i don't understand the problem. \nif any low-ego level person willing to explain, it would be nice. \nI see those big-ego unemployed kids spitting a lot in comments, but it is not useful. \n\n `abc\nbce\ncae`\n\n`bce` is not sorted, by what rule?\nwhat is the rule of ordering? \nThere are several variants and generalizations of the lexicographical ordering. \nWhich one we follow here?"
                    },
                    {
                        "username": "calm27",
                        "content": "[@belinskyi](/belinskyi) gooosh. got it. thanks a lot "
                    },
                    {
                        "username": "belinskyi",
                        "content": "[@Msey](/Msey) you\\'ve updated your answer while I was writing extended explanation :) "
                    },
                    {
                        "username": "MichaelTan53",
                        "content": "The question requires to find out the number of the COLUMNS that is not sorted instead of the rows."
                    },
                    {
                        "username": "Msey",
                        "content": "[@belinskyi](/belinskyi) but why this one is not? [\"zyx\",\"wvu\",\"tsr\"]\n\nupd: I got it. It should be sorted in ascending order"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you\\'ll see [c,e,e]. This array is sorted."
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please go through the video fro easiest explanation \\nNaive Approach :\\n\\nhttps://youtu.be/3IIUFbqmXik\\n\\nOptimal Approach: \\nhttps://youtu.be/2wfg0YeYM4k"
                    },
                    {
                        "username": "noob-pika",
                        "content": "I just hope someone finds a solution with O(n*log(n)) or less time complexity"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "Just use two loops one for rows and other for column and increase the counter if strs[i][j]<strs[i-1][j] this is true (note : i=rows and j=column)"
                    },
                    {
                        "username": "harrysodhi1000",
                        "content": "The problem statement states that we want to delete the columns that are not sorted lexicographically, i.e. sorted in ascending order of their ASCII numbers(as in a dictionary). What would be algorithm if the problem stated that they could also be in descending order.\\n\\nExample: \"c b a\" is also correct."
                    },
                    {
                        "username": "ankit_0710",
                        "content": "please explain this code\n\nint minDeletionSize(char ** A, int ASize){\n    int count = 0, l = strlen(A[0]);\n    for(int i = 0; i < l; i++){\n        for(int j = 0; j < ASize-1; j++){\n            if(A[j][i] > A[j+1][i]){\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n}"
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please upvote for the easiest explanation\\nhttps://youtu.be/3IIUFbqmXik\\n"
                    },
                    {
                        "username": "paularko64",
                        "content": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n       int count=0;\\n       for(int i=0;i<strs[0].length();i++)\\n       {\\n           for(int j=0;j<strs.size()-1;j++)\\n           {\\n               if(strs[j][i]>strs[j+1][i])\\n               {\\n                   count++;\\n                   break;\\n               }\\n           }\\n       } \\n       return count;\\n    }\\n};"
                    },
                    {
                        "username": "piotrkow93",
                        "content": "Treat this as two dimensional array.\\nYou can check if ASCII char is less that before, if yes, this column need to be deleted"
                    }
                ]
            },
            {
                "id": 1739543,
                "content": [
                    {
                        "username": "seankala",
                        "content": "I can\\'t be the only one who didn\\'t have a problem understanding the problem... Then again, I feel like if the word \"lexicographically\" appears people get confused."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@Sean Yi](/seankala), descending lexical order is also lexical. They should have mentioned clearly that only ascending lexical is desired."
                    },
                    {
                        "username": "calm27",
                        "content": "pardon, i don't understand the problem. \nif any low-ego level person willing to explain, it would be nice. \nI see those big-ego unemployed kids spitting a lot in comments, but it is not useful. \n\n `abc\nbce\ncae`\n\n`bce` is not sorted, by what rule?\nwhat is the rule of ordering? \nThere are several variants and generalizations of the lexicographical ordering. \nWhich one we follow here?"
                    },
                    {
                        "username": "calm27",
                        "content": "[@belinskyi](/belinskyi) gooosh. got it. thanks a lot "
                    },
                    {
                        "username": "belinskyi",
                        "content": "[@Msey](/Msey) you\\'ve updated your answer while I was writing extended explanation :) "
                    },
                    {
                        "username": "MichaelTan53",
                        "content": "The question requires to find out the number of the COLUMNS that is not sorted instead of the rows."
                    },
                    {
                        "username": "Msey",
                        "content": "[@belinskyi](/belinskyi) but why this one is not? [\"zyx\",\"wvu\",\"tsr\"]\n\nupd: I got it. It should be sorted in ascending order"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you\\'ll see [c,e,e]. This array is sorted."
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please go through the video fro easiest explanation \\nNaive Approach :\\n\\nhttps://youtu.be/3IIUFbqmXik\\n\\nOptimal Approach: \\nhttps://youtu.be/2wfg0YeYM4k"
                    },
                    {
                        "username": "noob-pika",
                        "content": "I just hope someone finds a solution with O(n*log(n)) or less time complexity"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "Just use two loops one for rows and other for column and increase the counter if strs[i][j]<strs[i-1][j] this is true (note : i=rows and j=column)"
                    },
                    {
                        "username": "harrysodhi1000",
                        "content": "The problem statement states that we want to delete the columns that are not sorted lexicographically, i.e. sorted in ascending order of their ASCII numbers(as in a dictionary). What would be algorithm if the problem stated that they could also be in descending order.\\n\\nExample: \"c b a\" is also correct."
                    },
                    {
                        "username": "ankit_0710",
                        "content": "please explain this code\n\nint minDeletionSize(char ** A, int ASize){\n    int count = 0, l = strlen(A[0]);\n    for(int i = 0; i < l; i++){\n        for(int j = 0; j < ASize-1; j++){\n            if(A[j][i] > A[j+1][i]){\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n}"
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please upvote for the easiest explanation\\nhttps://youtu.be/3IIUFbqmXik\\n"
                    },
                    {
                        "username": "paularko64",
                        "content": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n       int count=0;\\n       for(int i=0;i<strs[0].length();i++)\\n       {\\n           for(int j=0;j<strs.size()-1;j++)\\n           {\\n               if(strs[j][i]>strs[j+1][i])\\n               {\\n                   count++;\\n                   break;\\n               }\\n           }\\n       } \\n       return count;\\n    }\\n};"
                    },
                    {
                        "username": "piotrkow93",
                        "content": "Treat this as two dimensional array.\\nYou can check if ASCII char is less that before, if yes, this column need to be deleted"
                    }
                ]
            },
            {
                "id": 1739522,
                "content": [
                    {
                        "username": "seankala",
                        "content": "I can\\'t be the only one who didn\\'t have a problem understanding the problem... Then again, I feel like if the word \"lexicographically\" appears people get confused."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@Sean Yi](/seankala), descending lexical order is also lexical. They should have mentioned clearly that only ascending lexical is desired."
                    },
                    {
                        "username": "calm27",
                        "content": "pardon, i don't understand the problem. \nif any low-ego level person willing to explain, it would be nice. \nI see those big-ego unemployed kids spitting a lot in comments, but it is not useful. \n\n `abc\nbce\ncae`\n\n`bce` is not sorted, by what rule?\nwhat is the rule of ordering? \nThere are several variants and generalizations of the lexicographical ordering. \nWhich one we follow here?"
                    },
                    {
                        "username": "calm27",
                        "content": "[@belinskyi](/belinskyi) gooosh. got it. thanks a lot "
                    },
                    {
                        "username": "belinskyi",
                        "content": "[@Msey](/Msey) you\\'ve updated your answer while I was writing extended explanation :) "
                    },
                    {
                        "username": "MichaelTan53",
                        "content": "The question requires to find out the number of the COLUMNS that is not sorted instead of the rows."
                    },
                    {
                        "username": "Msey",
                        "content": "[@belinskyi](/belinskyi) but why this one is not? [\"zyx\",\"wvu\",\"tsr\"]\n\nupd: I got it. It should be sorted in ascending order"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you\\'ll see [c,e,e]. This array is sorted."
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please go through the video fro easiest explanation \\nNaive Approach :\\n\\nhttps://youtu.be/3IIUFbqmXik\\n\\nOptimal Approach: \\nhttps://youtu.be/2wfg0YeYM4k"
                    },
                    {
                        "username": "noob-pika",
                        "content": "I just hope someone finds a solution with O(n*log(n)) or less time complexity"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "Just use two loops one for rows and other for column and increase the counter if strs[i][j]<strs[i-1][j] this is true (note : i=rows and j=column)"
                    },
                    {
                        "username": "harrysodhi1000",
                        "content": "The problem statement states that we want to delete the columns that are not sorted lexicographically, i.e. sorted in ascending order of their ASCII numbers(as in a dictionary). What would be algorithm if the problem stated that they could also be in descending order.\\n\\nExample: \"c b a\" is also correct."
                    },
                    {
                        "username": "ankit_0710",
                        "content": "please explain this code\n\nint minDeletionSize(char ** A, int ASize){\n    int count = 0, l = strlen(A[0]);\n    for(int i = 0; i < l; i++){\n        for(int j = 0; j < ASize-1; j++){\n            if(A[j][i] > A[j+1][i]){\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n}"
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please upvote for the easiest explanation\\nhttps://youtu.be/3IIUFbqmXik\\n"
                    },
                    {
                        "username": "paularko64",
                        "content": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n       int count=0;\\n       for(int i=0;i<strs[0].length();i++)\\n       {\\n           for(int j=0;j<strs.size()-1;j++)\\n           {\\n               if(strs[j][i]>strs[j+1][i])\\n               {\\n                   count++;\\n                   break;\\n               }\\n           }\\n       } \\n       return count;\\n    }\\n};"
                    },
                    {
                        "username": "piotrkow93",
                        "content": "Treat this as two dimensional array.\\nYou can check if ASCII char is less that before, if yes, this column need to be deleted"
                    }
                ]
            },
            {
                "id": 1739500,
                "content": [
                    {
                        "username": "seankala",
                        "content": "I can\\'t be the only one who didn\\'t have a problem understanding the problem... Then again, I feel like if the word \"lexicographically\" appears people get confused."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@Sean Yi](/seankala), descending lexical order is also lexical. They should have mentioned clearly that only ascending lexical is desired."
                    },
                    {
                        "username": "calm27",
                        "content": "pardon, i don't understand the problem. \nif any low-ego level person willing to explain, it would be nice. \nI see those big-ego unemployed kids spitting a lot in comments, but it is not useful. \n\n `abc\nbce\ncae`\n\n`bce` is not sorted, by what rule?\nwhat is the rule of ordering? \nThere are several variants and generalizations of the lexicographical ordering. \nWhich one we follow here?"
                    },
                    {
                        "username": "calm27",
                        "content": "[@belinskyi](/belinskyi) gooosh. got it. thanks a lot "
                    },
                    {
                        "username": "belinskyi",
                        "content": "[@Msey](/Msey) you\\'ve updated your answer while I was writing extended explanation :) "
                    },
                    {
                        "username": "MichaelTan53",
                        "content": "The question requires to find out the number of the COLUMNS that is not sorted instead of the rows."
                    },
                    {
                        "username": "Msey",
                        "content": "[@belinskyi](/belinskyi) but why this one is not? [\"zyx\",\"wvu\",\"tsr\"]\n\nupd: I got it. It should be sorted in ascending order"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you\\'ll see [c,e,e]. This array is sorted."
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please go through the video fro easiest explanation \\nNaive Approach :\\n\\nhttps://youtu.be/3IIUFbqmXik\\n\\nOptimal Approach: \\nhttps://youtu.be/2wfg0YeYM4k"
                    },
                    {
                        "username": "noob-pika",
                        "content": "I just hope someone finds a solution with O(n*log(n)) or less time complexity"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "Just use two loops one for rows and other for column and increase the counter if strs[i][j]<strs[i-1][j] this is true (note : i=rows and j=column)"
                    },
                    {
                        "username": "harrysodhi1000",
                        "content": "The problem statement states that we want to delete the columns that are not sorted lexicographically, i.e. sorted in ascending order of their ASCII numbers(as in a dictionary). What would be algorithm if the problem stated that they could also be in descending order.\\n\\nExample: \"c b a\" is also correct."
                    },
                    {
                        "username": "ankit_0710",
                        "content": "please explain this code\n\nint minDeletionSize(char ** A, int ASize){\n    int count = 0, l = strlen(A[0]);\n    for(int i = 0; i < l; i++){\n        for(int j = 0; j < ASize-1; j++){\n            if(A[j][i] > A[j+1][i]){\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n}"
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please upvote for the easiest explanation\\nhttps://youtu.be/3IIUFbqmXik\\n"
                    },
                    {
                        "username": "paularko64",
                        "content": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n       int count=0;\\n       for(int i=0;i<strs[0].length();i++)\\n       {\\n           for(int j=0;j<strs.size()-1;j++)\\n           {\\n               if(strs[j][i]>strs[j+1][i])\\n               {\\n                   count++;\\n                   break;\\n               }\\n           }\\n       } \\n       return count;\\n    }\\n};"
                    },
                    {
                        "username": "piotrkow93",
                        "content": "Treat this as two dimensional array.\\nYou can check if ASCII char is less that before, if yes, this column need to be deleted"
                    }
                ]
            },
            {
                "id": 1739474,
                "content": [
                    {
                        "username": "seankala",
                        "content": "I can\\'t be the only one who didn\\'t have a problem understanding the problem... Then again, I feel like if the word \"lexicographically\" appears people get confused."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@Sean Yi](/seankala), descending lexical order is also lexical. They should have mentioned clearly that only ascending lexical is desired."
                    },
                    {
                        "username": "calm27",
                        "content": "pardon, i don't understand the problem. \nif any low-ego level person willing to explain, it would be nice. \nI see those big-ego unemployed kids spitting a lot in comments, but it is not useful. \n\n `abc\nbce\ncae`\n\n`bce` is not sorted, by what rule?\nwhat is the rule of ordering? \nThere are several variants and generalizations of the lexicographical ordering. \nWhich one we follow here?"
                    },
                    {
                        "username": "calm27",
                        "content": "[@belinskyi](/belinskyi) gooosh. got it. thanks a lot "
                    },
                    {
                        "username": "belinskyi",
                        "content": "[@Msey](/Msey) you\\'ve updated your answer while I was writing extended explanation :) "
                    },
                    {
                        "username": "MichaelTan53",
                        "content": "The question requires to find out the number of the COLUMNS that is not sorted instead of the rows."
                    },
                    {
                        "username": "Msey",
                        "content": "[@belinskyi](/belinskyi) but why this one is not? [\"zyx\",\"wvu\",\"tsr\"]\n\nupd: I got it. It should be sorted in ascending order"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you\\'ll see [c,e,e]. This array is sorted."
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please go through the video fro easiest explanation \\nNaive Approach :\\n\\nhttps://youtu.be/3IIUFbqmXik\\n\\nOptimal Approach: \\nhttps://youtu.be/2wfg0YeYM4k"
                    },
                    {
                        "username": "noob-pika",
                        "content": "I just hope someone finds a solution with O(n*log(n)) or less time complexity"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "Just use two loops one for rows and other for column and increase the counter if strs[i][j]<strs[i-1][j] this is true (note : i=rows and j=column)"
                    },
                    {
                        "username": "harrysodhi1000",
                        "content": "The problem statement states that we want to delete the columns that are not sorted lexicographically, i.e. sorted in ascending order of their ASCII numbers(as in a dictionary). What would be algorithm if the problem stated that they could also be in descending order.\\n\\nExample: \"c b a\" is also correct."
                    },
                    {
                        "username": "ankit_0710",
                        "content": "please explain this code\n\nint minDeletionSize(char ** A, int ASize){\n    int count = 0, l = strlen(A[0]);\n    for(int i = 0; i < l; i++){\n        for(int j = 0; j < ASize-1; j++){\n            if(A[j][i] > A[j+1][i]){\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n}"
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please upvote for the easiest explanation\\nhttps://youtu.be/3IIUFbqmXik\\n"
                    },
                    {
                        "username": "paularko64",
                        "content": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n       int count=0;\\n       for(int i=0;i<strs[0].length();i++)\\n       {\\n           for(int j=0;j<strs.size()-1;j++)\\n           {\\n               if(strs[j][i]>strs[j+1][i])\\n               {\\n                   count++;\\n                   break;\\n               }\\n           }\\n       } \\n       return count;\\n    }\\n};"
                    },
                    {
                        "username": "piotrkow93",
                        "content": "Treat this as two dimensional array.\\nYou can check if ASCII char is less that before, if yes, this column need to be deleted"
                    }
                ]
            },
            {
                "id": 1739473,
                "content": [
                    {
                        "username": "seankala",
                        "content": "I can\\'t be the only one who didn\\'t have a problem understanding the problem... Then again, I feel like if the word \"lexicographically\" appears people get confused."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@Sean Yi](/seankala), descending lexical order is also lexical. They should have mentioned clearly that only ascending lexical is desired."
                    },
                    {
                        "username": "calm27",
                        "content": "pardon, i don't understand the problem. \nif any low-ego level person willing to explain, it would be nice. \nI see those big-ego unemployed kids spitting a lot in comments, but it is not useful. \n\n `abc\nbce\ncae`\n\n`bce` is not sorted, by what rule?\nwhat is the rule of ordering? \nThere are several variants and generalizations of the lexicographical ordering. \nWhich one we follow here?"
                    },
                    {
                        "username": "calm27",
                        "content": "[@belinskyi](/belinskyi) gooosh. got it. thanks a lot "
                    },
                    {
                        "username": "belinskyi",
                        "content": "[@Msey](/Msey) you\\'ve updated your answer while I was writing extended explanation :) "
                    },
                    {
                        "username": "MichaelTan53",
                        "content": "The question requires to find out the number of the COLUMNS that is not sorted instead of the rows."
                    },
                    {
                        "username": "Msey",
                        "content": "[@belinskyi](/belinskyi) but why this one is not? [\"zyx\",\"wvu\",\"tsr\"]\n\nupd: I got it. It should be sorted in ascending order"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you\\'ll see [c,e,e]. This array is sorted."
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please go through the video fro easiest explanation \\nNaive Approach :\\n\\nhttps://youtu.be/3IIUFbqmXik\\n\\nOptimal Approach: \\nhttps://youtu.be/2wfg0YeYM4k"
                    },
                    {
                        "username": "noob-pika",
                        "content": "I just hope someone finds a solution with O(n*log(n)) or less time complexity"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "Just use two loops one for rows and other for column and increase the counter if strs[i][j]<strs[i-1][j] this is true (note : i=rows and j=column)"
                    },
                    {
                        "username": "harrysodhi1000",
                        "content": "The problem statement states that we want to delete the columns that are not sorted lexicographically, i.e. sorted in ascending order of their ASCII numbers(as in a dictionary). What would be algorithm if the problem stated that they could also be in descending order.\\n\\nExample: \"c b a\" is also correct."
                    },
                    {
                        "username": "ankit_0710",
                        "content": "please explain this code\n\nint minDeletionSize(char ** A, int ASize){\n    int count = 0, l = strlen(A[0]);\n    for(int i = 0; i < l; i++){\n        for(int j = 0; j < ASize-1; j++){\n            if(A[j][i] > A[j+1][i]){\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n}"
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please upvote for the easiest explanation\\nhttps://youtu.be/3IIUFbqmXik\\n"
                    },
                    {
                        "username": "paularko64",
                        "content": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n       int count=0;\\n       for(int i=0;i<strs[0].length();i++)\\n       {\\n           for(int j=0;j<strs.size()-1;j++)\\n           {\\n               if(strs[j][i]>strs[j+1][i])\\n               {\\n                   count++;\\n                   break;\\n               }\\n           }\\n       } \\n       return count;\\n    }\\n};"
                    },
                    {
                        "username": "piotrkow93",
                        "content": "Treat this as two dimensional array.\\nYou can check if ASCII char is less that before, if yes, this column need to be deleted"
                    }
                ]
            },
            {
                "id": 1739449,
                "content": [
                    {
                        "username": "seankala",
                        "content": "I can\\'t be the only one who didn\\'t have a problem understanding the problem... Then again, I feel like if the word \"lexicographically\" appears people get confused."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@Sean Yi](/seankala), descending lexical order is also lexical. They should have mentioned clearly that only ascending lexical is desired."
                    },
                    {
                        "username": "calm27",
                        "content": "pardon, i don't understand the problem. \nif any low-ego level person willing to explain, it would be nice. \nI see those big-ego unemployed kids spitting a lot in comments, but it is not useful. \n\n `abc\nbce\ncae`\n\n`bce` is not sorted, by what rule?\nwhat is the rule of ordering? \nThere are several variants and generalizations of the lexicographical ordering. \nWhich one we follow here?"
                    },
                    {
                        "username": "calm27",
                        "content": "[@belinskyi](/belinskyi) gooosh. got it. thanks a lot "
                    },
                    {
                        "username": "belinskyi",
                        "content": "[@Msey](/Msey) you\\'ve updated your answer while I was writing extended explanation :) "
                    },
                    {
                        "username": "MichaelTan53",
                        "content": "The question requires to find out the number of the COLUMNS that is not sorted instead of the rows."
                    },
                    {
                        "username": "Msey",
                        "content": "[@belinskyi](/belinskyi) but why this one is not? [\"zyx\",\"wvu\",\"tsr\"]\n\nupd: I got it. It should be sorted in ascending order"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you\\'ll see [c,e,e]. This array is sorted."
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please go through the video fro easiest explanation \\nNaive Approach :\\n\\nhttps://youtu.be/3IIUFbqmXik\\n\\nOptimal Approach: \\nhttps://youtu.be/2wfg0YeYM4k"
                    },
                    {
                        "username": "noob-pika",
                        "content": "I just hope someone finds a solution with O(n*log(n)) or less time complexity"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "Just use two loops one for rows and other for column and increase the counter if strs[i][j]<strs[i-1][j] this is true (note : i=rows and j=column)"
                    },
                    {
                        "username": "harrysodhi1000",
                        "content": "The problem statement states that we want to delete the columns that are not sorted lexicographically, i.e. sorted in ascending order of their ASCII numbers(as in a dictionary). What would be algorithm if the problem stated that they could also be in descending order.\\n\\nExample: \"c b a\" is also correct."
                    },
                    {
                        "username": "ankit_0710",
                        "content": "please explain this code\n\nint minDeletionSize(char ** A, int ASize){\n    int count = 0, l = strlen(A[0]);\n    for(int i = 0; i < l; i++){\n        for(int j = 0; j < ASize-1; j++){\n            if(A[j][i] > A[j+1][i]){\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n}"
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please upvote for the easiest explanation\\nhttps://youtu.be/3IIUFbqmXik\\n"
                    },
                    {
                        "username": "paularko64",
                        "content": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n       int count=0;\\n       for(int i=0;i<strs[0].length();i++)\\n       {\\n           for(int j=0;j<strs.size()-1;j++)\\n           {\\n               if(strs[j][i]>strs[j+1][i])\\n               {\\n                   count++;\\n                   break;\\n               }\\n           }\\n       } \\n       return count;\\n    }\\n};"
                    },
                    {
                        "username": "piotrkow93",
                        "content": "Treat this as two dimensional array.\\nYou can check if ASCII char is less that before, if yes, this column need to be deleted"
                    }
                ]
            },
            {
                "id": 1739416,
                "content": [
                    {
                        "username": "seankala",
                        "content": "I can\\'t be the only one who didn\\'t have a problem understanding the problem... Then again, I feel like if the word \"lexicographically\" appears people get confused."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@Sean Yi](/seankala), descending lexical order is also lexical. They should have mentioned clearly that only ascending lexical is desired."
                    },
                    {
                        "username": "calm27",
                        "content": "pardon, i don't understand the problem. \nif any low-ego level person willing to explain, it would be nice. \nI see those big-ego unemployed kids spitting a lot in comments, but it is not useful. \n\n `abc\nbce\ncae`\n\n`bce` is not sorted, by what rule?\nwhat is the rule of ordering? \nThere are several variants and generalizations of the lexicographical ordering. \nWhich one we follow here?"
                    },
                    {
                        "username": "calm27",
                        "content": "[@belinskyi](/belinskyi) gooosh. got it. thanks a lot "
                    },
                    {
                        "username": "belinskyi",
                        "content": "[@Msey](/Msey) you\\'ve updated your answer while I was writing extended explanation :) "
                    },
                    {
                        "username": "MichaelTan53",
                        "content": "The question requires to find out the number of the COLUMNS that is not sorted instead of the rows."
                    },
                    {
                        "username": "Msey",
                        "content": "[@belinskyi](/belinskyi) but why this one is not? [\"zyx\",\"wvu\",\"tsr\"]\n\nupd: I got it. It should be sorted in ascending order"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you\\'ll see [c,e,e]. This array is sorted."
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please go through the video fro easiest explanation \\nNaive Approach :\\n\\nhttps://youtu.be/3IIUFbqmXik\\n\\nOptimal Approach: \\nhttps://youtu.be/2wfg0YeYM4k"
                    },
                    {
                        "username": "noob-pika",
                        "content": "I just hope someone finds a solution with O(n*log(n)) or less time complexity"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "Just use two loops one for rows and other for column and increase the counter if strs[i][j]<strs[i-1][j] this is true (note : i=rows and j=column)"
                    },
                    {
                        "username": "harrysodhi1000",
                        "content": "The problem statement states that we want to delete the columns that are not sorted lexicographically, i.e. sorted in ascending order of their ASCII numbers(as in a dictionary). What would be algorithm if the problem stated that they could also be in descending order.\\n\\nExample: \"c b a\" is also correct."
                    },
                    {
                        "username": "ankit_0710",
                        "content": "please explain this code\n\nint minDeletionSize(char ** A, int ASize){\n    int count = 0, l = strlen(A[0]);\n    for(int i = 0; i < l; i++){\n        for(int j = 0; j < ASize-1; j++){\n            if(A[j][i] > A[j+1][i]){\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n}"
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please upvote for the easiest explanation\\nhttps://youtu.be/3IIUFbqmXik\\n"
                    },
                    {
                        "username": "paularko64",
                        "content": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n       int count=0;\\n       for(int i=0;i<strs[0].length();i++)\\n       {\\n           for(int j=0;j<strs.size()-1;j++)\\n           {\\n               if(strs[j][i]>strs[j+1][i])\\n               {\\n                   count++;\\n                   break;\\n               }\\n           }\\n       } \\n       return count;\\n    }\\n};"
                    },
                    {
                        "username": "piotrkow93",
                        "content": "Treat this as two dimensional array.\\nYou can check if ASCII char is less that before, if yes, this column need to be deleted"
                    }
                ]
            },
            {
                "id": 1739412,
                "content": [
                    {
                        "username": "seankala",
                        "content": "I can\\'t be the only one who didn\\'t have a problem understanding the problem... Then again, I feel like if the word \"lexicographically\" appears people get confused."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@Sean Yi](/seankala), descending lexical order is also lexical. They should have mentioned clearly that only ascending lexical is desired."
                    },
                    {
                        "username": "calm27",
                        "content": "pardon, i don't understand the problem. \nif any low-ego level person willing to explain, it would be nice. \nI see those big-ego unemployed kids spitting a lot in comments, but it is not useful. \n\n `abc\nbce\ncae`\n\n`bce` is not sorted, by what rule?\nwhat is the rule of ordering? \nThere are several variants and generalizations of the lexicographical ordering. \nWhich one we follow here?"
                    },
                    {
                        "username": "calm27",
                        "content": "[@belinskyi](/belinskyi) gooosh. got it. thanks a lot "
                    },
                    {
                        "username": "belinskyi",
                        "content": "[@Msey](/Msey) you\\'ve updated your answer while I was writing extended explanation :) "
                    },
                    {
                        "username": "MichaelTan53",
                        "content": "The question requires to find out the number of the COLUMNS that is not sorted instead of the rows."
                    },
                    {
                        "username": "Msey",
                        "content": "[@belinskyi](/belinskyi) but why this one is not? [\"zyx\",\"wvu\",\"tsr\"]\n\nupd: I got it. It should be sorted in ascending order"
                    },
                    {
                        "username": "belinskyi",
                        "content": "You should review character at each index and evaluate if it is sorted, e.g. :\\nstrs = [\"abc\", \"bce\", \"cae\"] -> take chars at the second index in each word and you\\'ll see [c,e,e]. This array is sorted."
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please go through the video fro easiest explanation \\nNaive Approach :\\n\\nhttps://youtu.be/3IIUFbqmXik\\n\\nOptimal Approach: \\nhttps://youtu.be/2wfg0YeYM4k"
                    },
                    {
                        "username": "noob-pika",
                        "content": "I just hope someone finds a solution with O(n*log(n)) or less time complexity"
                    },
                    {
                        "username": "Siddhi_shah",
                        "content": "Just use two loops one for rows and other for column and increase the counter if strs[i][j]<strs[i-1][j] this is true (note : i=rows and j=column)"
                    },
                    {
                        "username": "harrysodhi1000",
                        "content": "The problem statement states that we want to delete the columns that are not sorted lexicographically, i.e. sorted in ascending order of their ASCII numbers(as in a dictionary). What would be algorithm if the problem stated that they could also be in descending order.\\n\\nExample: \"c b a\" is also correct."
                    },
                    {
                        "username": "ankit_0710",
                        "content": "please explain this code\n\nint minDeletionSize(char ** A, int ASize){\n    int count = 0, l = strlen(A[0]);\n    for(int i = 0; i < l; i++){\n        for(int j = 0; j < ASize-1; j++){\n            if(A[j][i] > A[j+1][i]){\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n}"
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please upvote for the easiest explanation\\nhttps://youtu.be/3IIUFbqmXik\\n"
                    },
                    {
                        "username": "paularko64",
                        "content": "class Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n       int count=0;\\n       for(int i=0;i<strs[0].length();i++)\\n       {\\n           for(int j=0;j<strs.size()-1;j++)\\n           {\\n               if(strs[j][i]>strs[j+1][i])\\n               {\\n                   count++;\\n                   break;\\n               }\\n           }\\n       } \\n       return count;\\n    }\\n};"
                    },
                    {
                        "username": "piotrkow93",
                        "content": "Treat this as two dimensional array.\\nYou can check if ASCII char is less that before, if yes, this column need to be deleted"
                    }
                ]
            },
            {
                "id": 1739397,
                "content": [
                    {
                        "username": "USEBRAIN",
                        "content": "It is fairly simple question \\n- We will just iterate over the column \\n- Check whether the previous char is smaller or not \\n- If previous character is larger then current character  then we will increase the count by one and break the inner loop\\n- return the count . "
                    },
                    {
                        "username": "SJTGSHIVAM",
                        "content": "This new UI for testcases is so annoying, previous one was easier to use when we wanted multiple testcases, now it has an upper cap of 8 cases and for that too we have to click on a \"+\" button then erase older one and then type new one"
                    },
                    {
                        "username": "ankit_0710",
                        "content": "hope you all get 365 streak this year all the best guys"
                    },
                    {
                        "username": "sonusahu050502",
                        "content": "Doing this problem just to maintain the streak.....\\nbasic problem."
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || Beats 100% || Easy to Understand\\nhttps://leetcode.com/problems/delete-columns-to-make-sorted/solutions/2990706/simple-java-beats-100-easy-to-understand/"
                    },
                    {
                        "username": "haider1210",
                        "content": "AddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==31==ERROR: AddressSanitizer: SEGV on unknown address (pc 0x0000003459c0 bp 0x7ffece5de990 sp 0x7ffece5de920 T0)\\n==31==The signal is caused by a READ memory access.\\n==31==Hint: this fault was caused by a dereference of a high value address (see register values below).  Dissassemble the provided pc to learn which register was used.\\n    #2 0x7fbd181ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\nAddressSanitizer can not provide additional info.\\n==31==ABORTING\\n\\nwhy is this problem coming?\\n"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Your code has undefined behavior for any input I guess , You are trying to access some index that doesn't present/exist or may be you are dereferencing a null pointer ,Debug your code once. "
                    },
                    {
                        "username": "Love_Barot",
                        "content": "its a easy problem but I cant understand why so much people dislike this problem...!"
                    },
                    {
                        "username": "andreasdua21",
                        "content": "If you don\\'t understand the question, the main thing is, it need sorted at every *COLUMN*, not every row. At first I see the question, my perspective stuck at comparing row, and, at first I think the example is false. \\n\\nI think it happens bcs the input is array of string, not two dimensional array. \\n"
                    },
                    {
                        "username": "_horiZon_OP",
                        "content": "Why are there so many dislikes for this question?"
                    },
                    {
                        "username": "user3043Jk",
                        "content": "I couldn\\'t understand the first example of this question as the output is 1 but should be 2 no? "
                    },
                    {
                        "username": "ii_m_ss",
                        "content": "output is just counting the number of deleted columns."
                    }
                ]
            },
            {
                "id": 1739368,
                "content": [
                    {
                        "username": "USEBRAIN",
                        "content": "It is fairly simple question \\n- We will just iterate over the column \\n- Check whether the previous char is smaller or not \\n- If previous character is larger then current character  then we will increase the count by one and break the inner loop\\n- return the count . "
                    },
                    {
                        "username": "SJTGSHIVAM",
                        "content": "This new UI for testcases is so annoying, previous one was easier to use when we wanted multiple testcases, now it has an upper cap of 8 cases and for that too we have to click on a \"+\" button then erase older one and then type new one"
                    },
                    {
                        "username": "ankit_0710",
                        "content": "hope you all get 365 streak this year all the best guys"
                    },
                    {
                        "username": "sonusahu050502",
                        "content": "Doing this problem just to maintain the streak.....\\nbasic problem."
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || Beats 100% || Easy to Understand\\nhttps://leetcode.com/problems/delete-columns-to-make-sorted/solutions/2990706/simple-java-beats-100-easy-to-understand/"
                    },
                    {
                        "username": "haider1210",
                        "content": "AddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==31==ERROR: AddressSanitizer: SEGV on unknown address (pc 0x0000003459c0 bp 0x7ffece5de990 sp 0x7ffece5de920 T0)\\n==31==The signal is caused by a READ memory access.\\n==31==Hint: this fault was caused by a dereference of a high value address (see register values below).  Dissassemble the provided pc to learn which register was used.\\n    #2 0x7fbd181ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\nAddressSanitizer can not provide additional info.\\n==31==ABORTING\\n\\nwhy is this problem coming?\\n"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Your code has undefined behavior for any input I guess , You are trying to access some index that doesn't present/exist or may be you are dereferencing a null pointer ,Debug your code once. "
                    },
                    {
                        "username": "Love_Barot",
                        "content": "its a easy problem but I cant understand why so much people dislike this problem...!"
                    },
                    {
                        "username": "andreasdua21",
                        "content": "If you don\\'t understand the question, the main thing is, it need sorted at every *COLUMN*, not every row. At first I see the question, my perspective stuck at comparing row, and, at first I think the example is false. \\n\\nI think it happens bcs the input is array of string, not two dimensional array. \\n"
                    },
                    {
                        "username": "_horiZon_OP",
                        "content": "Why are there so many dislikes for this question?"
                    },
                    {
                        "username": "user3043Jk",
                        "content": "I couldn\\'t understand the first example of this question as the output is 1 but should be 2 no? "
                    },
                    {
                        "username": "ii_m_ss",
                        "content": "output is just counting the number of deleted columns."
                    }
                ]
            },
            {
                "id": 1739354,
                "content": [
                    {
                        "username": "USEBRAIN",
                        "content": "It is fairly simple question \\n- We will just iterate over the column \\n- Check whether the previous char is smaller or not \\n- If previous character is larger then current character  then we will increase the count by one and break the inner loop\\n- return the count . "
                    },
                    {
                        "username": "SJTGSHIVAM",
                        "content": "This new UI for testcases is so annoying, previous one was easier to use when we wanted multiple testcases, now it has an upper cap of 8 cases and for that too we have to click on a \"+\" button then erase older one and then type new one"
                    },
                    {
                        "username": "ankit_0710",
                        "content": "hope you all get 365 streak this year all the best guys"
                    },
                    {
                        "username": "sonusahu050502",
                        "content": "Doing this problem just to maintain the streak.....\\nbasic problem."
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || Beats 100% || Easy to Understand\\nhttps://leetcode.com/problems/delete-columns-to-make-sorted/solutions/2990706/simple-java-beats-100-easy-to-understand/"
                    },
                    {
                        "username": "haider1210",
                        "content": "AddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==31==ERROR: AddressSanitizer: SEGV on unknown address (pc 0x0000003459c0 bp 0x7ffece5de990 sp 0x7ffece5de920 T0)\\n==31==The signal is caused by a READ memory access.\\n==31==Hint: this fault was caused by a dereference of a high value address (see register values below).  Dissassemble the provided pc to learn which register was used.\\n    #2 0x7fbd181ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\nAddressSanitizer can not provide additional info.\\n==31==ABORTING\\n\\nwhy is this problem coming?\\n"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Your code has undefined behavior for any input I guess , You are trying to access some index that doesn't present/exist or may be you are dereferencing a null pointer ,Debug your code once. "
                    },
                    {
                        "username": "Love_Barot",
                        "content": "its a easy problem but I cant understand why so much people dislike this problem...!"
                    },
                    {
                        "username": "andreasdua21",
                        "content": "If you don\\'t understand the question, the main thing is, it need sorted at every *COLUMN*, not every row. At first I see the question, my perspective stuck at comparing row, and, at first I think the example is false. \\n\\nI think it happens bcs the input is array of string, not two dimensional array. \\n"
                    },
                    {
                        "username": "_horiZon_OP",
                        "content": "Why are there so many dislikes for this question?"
                    },
                    {
                        "username": "user3043Jk",
                        "content": "I couldn\\'t understand the first example of this question as the output is 1 but should be 2 no? "
                    },
                    {
                        "username": "ii_m_ss",
                        "content": "output is just counting the number of deleted columns."
                    }
                ]
            },
            {
                "id": 1739316,
                "content": [
                    {
                        "username": "USEBRAIN",
                        "content": "It is fairly simple question \\n- We will just iterate over the column \\n- Check whether the previous char is smaller or not \\n- If previous character is larger then current character  then we will increase the count by one and break the inner loop\\n- return the count . "
                    },
                    {
                        "username": "SJTGSHIVAM",
                        "content": "This new UI for testcases is so annoying, previous one was easier to use when we wanted multiple testcases, now it has an upper cap of 8 cases and for that too we have to click on a \"+\" button then erase older one and then type new one"
                    },
                    {
                        "username": "ankit_0710",
                        "content": "hope you all get 365 streak this year all the best guys"
                    },
                    {
                        "username": "sonusahu050502",
                        "content": "Doing this problem just to maintain the streak.....\\nbasic problem."
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || Beats 100% || Easy to Understand\\nhttps://leetcode.com/problems/delete-columns-to-make-sorted/solutions/2990706/simple-java-beats-100-easy-to-understand/"
                    },
                    {
                        "username": "haider1210",
                        "content": "AddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==31==ERROR: AddressSanitizer: SEGV on unknown address (pc 0x0000003459c0 bp 0x7ffece5de990 sp 0x7ffece5de920 T0)\\n==31==The signal is caused by a READ memory access.\\n==31==Hint: this fault was caused by a dereference of a high value address (see register values below).  Dissassemble the provided pc to learn which register was used.\\n    #2 0x7fbd181ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\nAddressSanitizer can not provide additional info.\\n==31==ABORTING\\n\\nwhy is this problem coming?\\n"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Your code has undefined behavior for any input I guess , You are trying to access some index that doesn't present/exist or may be you are dereferencing a null pointer ,Debug your code once. "
                    },
                    {
                        "username": "Love_Barot",
                        "content": "its a easy problem but I cant understand why so much people dislike this problem...!"
                    },
                    {
                        "username": "andreasdua21",
                        "content": "If you don\\'t understand the question, the main thing is, it need sorted at every *COLUMN*, not every row. At first I see the question, my perspective stuck at comparing row, and, at first I think the example is false. \\n\\nI think it happens bcs the input is array of string, not two dimensional array. \\n"
                    },
                    {
                        "username": "_horiZon_OP",
                        "content": "Why are there so many dislikes for this question?"
                    },
                    {
                        "username": "user3043Jk",
                        "content": "I couldn\\'t understand the first example of this question as the output is 1 but should be 2 no? "
                    },
                    {
                        "username": "ii_m_ss",
                        "content": "output is just counting the number of deleted columns."
                    }
                ]
            },
            {
                "id": 1739313,
                "content": [
                    {
                        "username": "USEBRAIN",
                        "content": "It is fairly simple question \\n- We will just iterate over the column \\n- Check whether the previous char is smaller or not \\n- If previous character is larger then current character  then we will increase the count by one and break the inner loop\\n- return the count . "
                    },
                    {
                        "username": "SJTGSHIVAM",
                        "content": "This new UI for testcases is so annoying, previous one was easier to use when we wanted multiple testcases, now it has an upper cap of 8 cases and for that too we have to click on a \"+\" button then erase older one and then type new one"
                    },
                    {
                        "username": "ankit_0710",
                        "content": "hope you all get 365 streak this year all the best guys"
                    },
                    {
                        "username": "sonusahu050502",
                        "content": "Doing this problem just to maintain the streak.....\\nbasic problem."
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || Beats 100% || Easy to Understand\\nhttps://leetcode.com/problems/delete-columns-to-make-sorted/solutions/2990706/simple-java-beats-100-easy-to-understand/"
                    },
                    {
                        "username": "haider1210",
                        "content": "AddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==31==ERROR: AddressSanitizer: SEGV on unknown address (pc 0x0000003459c0 bp 0x7ffece5de990 sp 0x7ffece5de920 T0)\\n==31==The signal is caused by a READ memory access.\\n==31==Hint: this fault was caused by a dereference of a high value address (see register values below).  Dissassemble the provided pc to learn which register was used.\\n    #2 0x7fbd181ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\nAddressSanitizer can not provide additional info.\\n==31==ABORTING\\n\\nwhy is this problem coming?\\n"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Your code has undefined behavior for any input I guess , You are trying to access some index that doesn't present/exist or may be you are dereferencing a null pointer ,Debug your code once. "
                    },
                    {
                        "username": "Love_Barot",
                        "content": "its a easy problem but I cant understand why so much people dislike this problem...!"
                    },
                    {
                        "username": "andreasdua21",
                        "content": "If you don\\'t understand the question, the main thing is, it need sorted at every *COLUMN*, not every row. At first I see the question, my perspective stuck at comparing row, and, at first I think the example is false. \\n\\nI think it happens bcs the input is array of string, not two dimensional array. \\n"
                    },
                    {
                        "username": "_horiZon_OP",
                        "content": "Why are there so many dislikes for this question?"
                    },
                    {
                        "username": "user3043Jk",
                        "content": "I couldn\\'t understand the first example of this question as the output is 1 but should be 2 no? "
                    },
                    {
                        "username": "ii_m_ss",
                        "content": "output is just counting the number of deleted columns."
                    }
                ]
            },
            {
                "id": 1739310,
                "content": [
                    {
                        "username": "USEBRAIN",
                        "content": "It is fairly simple question \\n- We will just iterate over the column \\n- Check whether the previous char is smaller or not \\n- If previous character is larger then current character  then we will increase the count by one and break the inner loop\\n- return the count . "
                    },
                    {
                        "username": "SJTGSHIVAM",
                        "content": "This new UI for testcases is so annoying, previous one was easier to use when we wanted multiple testcases, now it has an upper cap of 8 cases and for that too we have to click on a \"+\" button then erase older one and then type new one"
                    },
                    {
                        "username": "ankit_0710",
                        "content": "hope you all get 365 streak this year all the best guys"
                    },
                    {
                        "username": "sonusahu050502",
                        "content": "Doing this problem just to maintain the streak.....\\nbasic problem."
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || Beats 100% || Easy to Understand\\nhttps://leetcode.com/problems/delete-columns-to-make-sorted/solutions/2990706/simple-java-beats-100-easy-to-understand/"
                    },
                    {
                        "username": "haider1210",
                        "content": "AddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==31==ERROR: AddressSanitizer: SEGV on unknown address (pc 0x0000003459c0 bp 0x7ffece5de990 sp 0x7ffece5de920 T0)\\n==31==The signal is caused by a READ memory access.\\n==31==Hint: this fault was caused by a dereference of a high value address (see register values below).  Dissassemble the provided pc to learn which register was used.\\n    #2 0x7fbd181ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\nAddressSanitizer can not provide additional info.\\n==31==ABORTING\\n\\nwhy is this problem coming?\\n"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Your code has undefined behavior for any input I guess , You are trying to access some index that doesn't present/exist or may be you are dereferencing a null pointer ,Debug your code once. "
                    },
                    {
                        "username": "Love_Barot",
                        "content": "its a easy problem but I cant understand why so much people dislike this problem...!"
                    },
                    {
                        "username": "andreasdua21",
                        "content": "If you don\\'t understand the question, the main thing is, it need sorted at every *COLUMN*, not every row. At first I see the question, my perspective stuck at comparing row, and, at first I think the example is false. \\n\\nI think it happens bcs the input is array of string, not two dimensional array. \\n"
                    },
                    {
                        "username": "_horiZon_OP",
                        "content": "Why are there so many dislikes for this question?"
                    },
                    {
                        "username": "user3043Jk",
                        "content": "I couldn\\'t understand the first example of this question as the output is 1 but should be 2 no? "
                    },
                    {
                        "username": "ii_m_ss",
                        "content": "output is just counting the number of deleted columns."
                    }
                ]
            },
            {
                "id": 1739303,
                "content": [
                    {
                        "username": "USEBRAIN",
                        "content": "It is fairly simple question \\n- We will just iterate over the column \\n- Check whether the previous char is smaller or not \\n- If previous character is larger then current character  then we will increase the count by one and break the inner loop\\n- return the count . "
                    },
                    {
                        "username": "SJTGSHIVAM",
                        "content": "This new UI for testcases is so annoying, previous one was easier to use when we wanted multiple testcases, now it has an upper cap of 8 cases and for that too we have to click on a \"+\" button then erase older one and then type new one"
                    },
                    {
                        "username": "ankit_0710",
                        "content": "hope you all get 365 streak this year all the best guys"
                    },
                    {
                        "username": "sonusahu050502",
                        "content": "Doing this problem just to maintain the streak.....\\nbasic problem."
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || Beats 100% || Easy to Understand\\nhttps://leetcode.com/problems/delete-columns-to-make-sorted/solutions/2990706/simple-java-beats-100-easy-to-understand/"
                    },
                    {
                        "username": "haider1210",
                        "content": "AddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==31==ERROR: AddressSanitizer: SEGV on unknown address (pc 0x0000003459c0 bp 0x7ffece5de990 sp 0x7ffece5de920 T0)\\n==31==The signal is caused by a READ memory access.\\n==31==Hint: this fault was caused by a dereference of a high value address (see register values below).  Dissassemble the provided pc to learn which register was used.\\n    #2 0x7fbd181ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\nAddressSanitizer can not provide additional info.\\n==31==ABORTING\\n\\nwhy is this problem coming?\\n"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Your code has undefined behavior for any input I guess , You are trying to access some index that doesn't present/exist or may be you are dereferencing a null pointer ,Debug your code once. "
                    },
                    {
                        "username": "Love_Barot",
                        "content": "its a easy problem but I cant understand why so much people dislike this problem...!"
                    },
                    {
                        "username": "andreasdua21",
                        "content": "If you don\\'t understand the question, the main thing is, it need sorted at every *COLUMN*, not every row. At first I see the question, my perspective stuck at comparing row, and, at first I think the example is false. \\n\\nI think it happens bcs the input is array of string, not two dimensional array. \\n"
                    },
                    {
                        "username": "_horiZon_OP",
                        "content": "Why are there so many dislikes for this question?"
                    },
                    {
                        "username": "user3043Jk",
                        "content": "I couldn\\'t understand the first example of this question as the output is 1 but should be 2 no? "
                    },
                    {
                        "username": "ii_m_ss",
                        "content": "output is just counting the number of deleted columns."
                    }
                ]
            },
            {
                "id": 1739291,
                "content": [
                    {
                        "username": "USEBRAIN",
                        "content": "It is fairly simple question \\n- We will just iterate over the column \\n- Check whether the previous char is smaller or not \\n- If previous character is larger then current character  then we will increase the count by one and break the inner loop\\n- return the count . "
                    },
                    {
                        "username": "SJTGSHIVAM",
                        "content": "This new UI for testcases is so annoying, previous one was easier to use when we wanted multiple testcases, now it has an upper cap of 8 cases and for that too we have to click on a \"+\" button then erase older one and then type new one"
                    },
                    {
                        "username": "ankit_0710",
                        "content": "hope you all get 365 streak this year all the best guys"
                    },
                    {
                        "username": "sonusahu050502",
                        "content": "Doing this problem just to maintain the streak.....\\nbasic problem."
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || Beats 100% || Easy to Understand\\nhttps://leetcode.com/problems/delete-columns-to-make-sorted/solutions/2990706/simple-java-beats-100-easy-to-understand/"
                    },
                    {
                        "username": "haider1210",
                        "content": "AddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==31==ERROR: AddressSanitizer: SEGV on unknown address (pc 0x0000003459c0 bp 0x7ffece5de990 sp 0x7ffece5de920 T0)\\n==31==The signal is caused by a READ memory access.\\n==31==Hint: this fault was caused by a dereference of a high value address (see register values below).  Dissassemble the provided pc to learn which register was used.\\n    #2 0x7fbd181ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\nAddressSanitizer can not provide additional info.\\n==31==ABORTING\\n\\nwhy is this problem coming?\\n"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Your code has undefined behavior for any input I guess , You are trying to access some index that doesn't present/exist or may be you are dereferencing a null pointer ,Debug your code once. "
                    },
                    {
                        "username": "Love_Barot",
                        "content": "its a easy problem but I cant understand why so much people dislike this problem...!"
                    },
                    {
                        "username": "andreasdua21",
                        "content": "If you don\\'t understand the question, the main thing is, it need sorted at every *COLUMN*, not every row. At first I see the question, my perspective stuck at comparing row, and, at first I think the example is false. \\n\\nI think it happens bcs the input is array of string, not two dimensional array. \\n"
                    },
                    {
                        "username": "_horiZon_OP",
                        "content": "Why are there so many dislikes for this question?"
                    },
                    {
                        "username": "user3043Jk",
                        "content": "I couldn\\'t understand the first example of this question as the output is 1 but should be 2 no? "
                    },
                    {
                        "username": "ii_m_ss",
                        "content": "output is just counting the number of deleted columns."
                    }
                ]
            },
            {
                "id": 1739237,
                "content": [
                    {
                        "username": "USEBRAIN",
                        "content": "It is fairly simple question \\n- We will just iterate over the column \\n- Check whether the previous char is smaller or not \\n- If previous character is larger then current character  then we will increase the count by one and break the inner loop\\n- return the count . "
                    },
                    {
                        "username": "SJTGSHIVAM",
                        "content": "This new UI for testcases is so annoying, previous one was easier to use when we wanted multiple testcases, now it has an upper cap of 8 cases and for that too we have to click on a \"+\" button then erase older one and then type new one"
                    },
                    {
                        "username": "ankit_0710",
                        "content": "hope you all get 365 streak this year all the best guys"
                    },
                    {
                        "username": "sonusahu050502",
                        "content": "Doing this problem just to maintain the streak.....\\nbasic problem."
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || Beats 100% || Easy to Understand\\nhttps://leetcode.com/problems/delete-columns-to-make-sorted/solutions/2990706/simple-java-beats-100-easy-to-understand/"
                    },
                    {
                        "username": "haider1210",
                        "content": "AddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==31==ERROR: AddressSanitizer: SEGV on unknown address (pc 0x0000003459c0 bp 0x7ffece5de990 sp 0x7ffece5de920 T0)\\n==31==The signal is caused by a READ memory access.\\n==31==Hint: this fault was caused by a dereference of a high value address (see register values below).  Dissassemble the provided pc to learn which register was used.\\n    #2 0x7fbd181ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\nAddressSanitizer can not provide additional info.\\n==31==ABORTING\\n\\nwhy is this problem coming?\\n"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Your code has undefined behavior for any input I guess , You are trying to access some index that doesn't present/exist or may be you are dereferencing a null pointer ,Debug your code once. "
                    },
                    {
                        "username": "Love_Barot",
                        "content": "its a easy problem but I cant understand why so much people dislike this problem...!"
                    },
                    {
                        "username": "andreasdua21",
                        "content": "If you don\\'t understand the question, the main thing is, it need sorted at every *COLUMN*, not every row. At first I see the question, my perspective stuck at comparing row, and, at first I think the example is false. \\n\\nI think it happens bcs the input is array of string, not two dimensional array. \\n"
                    },
                    {
                        "username": "_horiZon_OP",
                        "content": "Why are there so many dislikes for this question?"
                    },
                    {
                        "username": "user3043Jk",
                        "content": "I couldn\\'t understand the first example of this question as the output is 1 but should be 2 no? "
                    },
                    {
                        "username": "ii_m_ss",
                        "content": "output is just counting the number of deleted columns."
                    }
                ]
            },
            {
                "id": 1739236,
                "content": [
                    {
                        "username": "USEBRAIN",
                        "content": "It is fairly simple question \\n- We will just iterate over the column \\n- Check whether the previous char is smaller or not \\n- If previous character is larger then current character  then we will increase the count by one and break the inner loop\\n- return the count . "
                    },
                    {
                        "username": "SJTGSHIVAM",
                        "content": "This new UI for testcases is so annoying, previous one was easier to use when we wanted multiple testcases, now it has an upper cap of 8 cases and for that too we have to click on a \"+\" button then erase older one and then type new one"
                    },
                    {
                        "username": "ankit_0710",
                        "content": "hope you all get 365 streak this year all the best guys"
                    },
                    {
                        "username": "sonusahu050502",
                        "content": "Doing this problem just to maintain the streak.....\\nbasic problem."
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\u2705Simple || Java || Beats 100% || Easy to Understand\\nhttps://leetcode.com/problems/delete-columns-to-make-sorted/solutions/2990706/simple-java-beats-100-easy-to-understand/"
                    },
                    {
                        "username": "haider1210",
                        "content": "AddressSanitizer:DEADLYSIGNAL\\n=================================================================\\n==31==ERROR: AddressSanitizer: SEGV on unknown address (pc 0x0000003459c0 bp 0x7ffece5de990 sp 0x7ffece5de920 T0)\\n==31==The signal is caused by a READ memory access.\\n==31==Hint: this fault was caused by a dereference of a high value address (see register values below).  Dissassemble the provided pc to learn which register was used.\\n    #2 0x7fbd181ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\nAddressSanitizer can not provide additional info.\\n==31==ABORTING\\n\\nwhy is this problem coming?\\n"
                    },
                    {
                        "username": "sachinbaral02",
                        "content": "Your code has undefined behavior for any input I guess , You are trying to access some index that doesn't present/exist or may be you are dereferencing a null pointer ,Debug your code once. "
                    },
                    {
                        "username": "Love_Barot",
                        "content": "its a easy problem but I cant understand why so much people dislike this problem...!"
                    },
                    {
                        "username": "andreasdua21",
                        "content": "If you don\\'t understand the question, the main thing is, it need sorted at every *COLUMN*, not every row. At first I see the question, my perspective stuck at comparing row, and, at first I think the example is false. \\n\\nI think it happens bcs the input is array of string, not two dimensional array. \\n"
                    },
                    {
                        "username": "_horiZon_OP",
                        "content": "Why are there so many dislikes for this question?"
                    },
                    {
                        "username": "user3043Jk",
                        "content": "I couldn\\'t understand the first example of this question as the output is 1 but should be 2 no? "
                    },
                    {
                        "username": "ii_m_ss",
                        "content": "output is just counting the number of deleted columns."
                    }
                ]
            },
            {
                "id": 1739231,
                "content": [
                    {
                        "username": "Maxx_1007",
                        "content": "Why this problem has so many downvotes?"
                    },
                    {
                        "username": "Sumit70421",
                        "content": "Is there any solution which takes linear time? I went through all solutions nobody did it in linear time."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "linear time is the only solution possible, you have to go through all characters in all strings O(n*m) which is linear for this case."
                    },
                    {
                        "username": "santanusen",
                        "content": "It was quite difficult for me to get a good timing using C++ with brute-force nested loop-columns  loop-rows approach. I got little better timing by looping from the last row to the first. May be the test cases are designed such."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "first to last, or last to first : anyway comparison is bound to happen. They have same complexity. The reason you got better time in second submission is that leetcode submissions for same code themselves have hugely varying time. So I don\\'t give much significance to the %tile of time, rather the actual time which is in 30-50 ms range for all sane submissions."
                    },
                    {
                        "username": "surajku2022",
                        "content": "Why this question has so many dislikes, I don\\'t find it hard to read or hard to implement."
                    },
                    {
                        "username": "js5809",
                        "content": "A fairly simple problem. Only the wording of the problem statement can be improved for easier understanding by everyone."
                    },
                    {
                        "username": "gugansps64",
                        "content": "Why my solution\\'s runtime is 18ms, I don\\'t find much difference with the 4ms solution and mine.\\nBelow is my solution, can anyone explain?\\n\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.length-1;j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}"
                    },
                    {
                        "username": "aym_n",
                        "content": "I have used two for loops to check condition for each pair , but the runtime is like 5s. is there a way i can optimize this?"
                    },
                    {
                        "username": "rajkanwar",
                        "content": "if say strs = [\"c\",\"b\"] would the output be 1?"
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "yes,  output will be one"
                    },
                    {
                        "username": "gnarendra89",
                        "content": "I think this problem doesn\\'t deserve to be disliked at all."
                    },
                    {
                        "username": "chooseanotherusername",
                        "content": "Why so many dislikes for this question?"
                    }
                ]
            },
            {
                "id": 1739218,
                "content": [
                    {
                        "username": "Maxx_1007",
                        "content": "Why this problem has so many downvotes?"
                    },
                    {
                        "username": "Sumit70421",
                        "content": "Is there any solution which takes linear time? I went through all solutions nobody did it in linear time."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "linear time is the only solution possible, you have to go through all characters in all strings O(n*m) which is linear for this case."
                    },
                    {
                        "username": "santanusen",
                        "content": "It was quite difficult for me to get a good timing using C++ with brute-force nested loop-columns  loop-rows approach. I got little better timing by looping from the last row to the first. May be the test cases are designed such."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "first to last, or last to first : anyway comparison is bound to happen. They have same complexity. The reason you got better time in second submission is that leetcode submissions for same code themselves have hugely varying time. So I don\\'t give much significance to the %tile of time, rather the actual time which is in 30-50 ms range for all sane submissions."
                    },
                    {
                        "username": "surajku2022",
                        "content": "Why this question has so many dislikes, I don\\'t find it hard to read or hard to implement."
                    },
                    {
                        "username": "js5809",
                        "content": "A fairly simple problem. Only the wording of the problem statement can be improved for easier understanding by everyone."
                    },
                    {
                        "username": "gugansps64",
                        "content": "Why my solution\\'s runtime is 18ms, I don\\'t find much difference with the 4ms solution and mine.\\nBelow is my solution, can anyone explain?\\n\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.length-1;j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}"
                    },
                    {
                        "username": "aym_n",
                        "content": "I have used two for loops to check condition for each pair , but the runtime is like 5s. is there a way i can optimize this?"
                    },
                    {
                        "username": "rajkanwar",
                        "content": "if say strs = [\"c\",\"b\"] would the output be 1?"
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "yes,  output will be one"
                    },
                    {
                        "username": "gnarendra89",
                        "content": "I think this problem doesn\\'t deserve to be disliked at all."
                    },
                    {
                        "username": "chooseanotherusername",
                        "content": "Why so many dislikes for this question?"
                    }
                ]
            },
            {
                "id": 1739213,
                "content": [
                    {
                        "username": "Maxx_1007",
                        "content": "Why this problem has so many downvotes?"
                    },
                    {
                        "username": "Sumit70421",
                        "content": "Is there any solution which takes linear time? I went through all solutions nobody did it in linear time."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "linear time is the only solution possible, you have to go through all characters in all strings O(n*m) which is linear for this case."
                    },
                    {
                        "username": "santanusen",
                        "content": "It was quite difficult for me to get a good timing using C++ with brute-force nested loop-columns  loop-rows approach. I got little better timing by looping from the last row to the first. May be the test cases are designed such."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "first to last, or last to first : anyway comparison is bound to happen. They have same complexity. The reason you got better time in second submission is that leetcode submissions for same code themselves have hugely varying time. So I don\\'t give much significance to the %tile of time, rather the actual time which is in 30-50 ms range for all sane submissions."
                    },
                    {
                        "username": "surajku2022",
                        "content": "Why this question has so many dislikes, I don\\'t find it hard to read or hard to implement."
                    },
                    {
                        "username": "js5809",
                        "content": "A fairly simple problem. Only the wording of the problem statement can be improved for easier understanding by everyone."
                    },
                    {
                        "username": "gugansps64",
                        "content": "Why my solution\\'s runtime is 18ms, I don\\'t find much difference with the 4ms solution and mine.\\nBelow is my solution, can anyone explain?\\n\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.length-1;j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}"
                    },
                    {
                        "username": "aym_n",
                        "content": "I have used two for loops to check condition for each pair , but the runtime is like 5s. is there a way i can optimize this?"
                    },
                    {
                        "username": "rajkanwar",
                        "content": "if say strs = [\"c\",\"b\"] would the output be 1?"
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "yes,  output will be one"
                    },
                    {
                        "username": "gnarendra89",
                        "content": "I think this problem doesn\\'t deserve to be disliked at all."
                    },
                    {
                        "username": "chooseanotherusername",
                        "content": "Why so many dislikes for this question?"
                    }
                ]
            },
            {
                "id": 1739207,
                "content": [
                    {
                        "username": "Maxx_1007",
                        "content": "Why this problem has so many downvotes?"
                    },
                    {
                        "username": "Sumit70421",
                        "content": "Is there any solution which takes linear time? I went through all solutions nobody did it in linear time."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "linear time is the only solution possible, you have to go through all characters in all strings O(n*m) which is linear for this case."
                    },
                    {
                        "username": "santanusen",
                        "content": "It was quite difficult for me to get a good timing using C++ with brute-force nested loop-columns  loop-rows approach. I got little better timing by looping from the last row to the first. May be the test cases are designed such."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "first to last, or last to first : anyway comparison is bound to happen. They have same complexity. The reason you got better time in second submission is that leetcode submissions for same code themselves have hugely varying time. So I don\\'t give much significance to the %tile of time, rather the actual time which is in 30-50 ms range for all sane submissions."
                    },
                    {
                        "username": "surajku2022",
                        "content": "Why this question has so many dislikes, I don\\'t find it hard to read or hard to implement."
                    },
                    {
                        "username": "js5809",
                        "content": "A fairly simple problem. Only the wording of the problem statement can be improved for easier understanding by everyone."
                    },
                    {
                        "username": "gugansps64",
                        "content": "Why my solution\\'s runtime is 18ms, I don\\'t find much difference with the 4ms solution and mine.\\nBelow is my solution, can anyone explain?\\n\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.length-1;j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}"
                    },
                    {
                        "username": "aym_n",
                        "content": "I have used two for loops to check condition for each pair , but the runtime is like 5s. is there a way i can optimize this?"
                    },
                    {
                        "username": "rajkanwar",
                        "content": "if say strs = [\"c\",\"b\"] would the output be 1?"
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "yes,  output will be one"
                    },
                    {
                        "username": "gnarendra89",
                        "content": "I think this problem doesn\\'t deserve to be disliked at all."
                    },
                    {
                        "username": "chooseanotherusername",
                        "content": "Why so many dislikes for this question?"
                    }
                ]
            },
            {
                "id": 1739180,
                "content": [
                    {
                        "username": "Maxx_1007",
                        "content": "Why this problem has so many downvotes?"
                    },
                    {
                        "username": "Sumit70421",
                        "content": "Is there any solution which takes linear time? I went through all solutions nobody did it in linear time."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "linear time is the only solution possible, you have to go through all characters in all strings O(n*m) which is linear for this case."
                    },
                    {
                        "username": "santanusen",
                        "content": "It was quite difficult for me to get a good timing using C++ with brute-force nested loop-columns  loop-rows approach. I got little better timing by looping from the last row to the first. May be the test cases are designed such."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "first to last, or last to first : anyway comparison is bound to happen. They have same complexity. The reason you got better time in second submission is that leetcode submissions for same code themselves have hugely varying time. So I don\\'t give much significance to the %tile of time, rather the actual time which is in 30-50 ms range for all sane submissions."
                    },
                    {
                        "username": "surajku2022",
                        "content": "Why this question has so many dislikes, I don\\'t find it hard to read or hard to implement."
                    },
                    {
                        "username": "js5809",
                        "content": "A fairly simple problem. Only the wording of the problem statement can be improved for easier understanding by everyone."
                    },
                    {
                        "username": "gugansps64",
                        "content": "Why my solution\\'s runtime is 18ms, I don\\'t find much difference with the 4ms solution and mine.\\nBelow is my solution, can anyone explain?\\n\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.length-1;j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}"
                    },
                    {
                        "username": "aym_n",
                        "content": "I have used two for loops to check condition for each pair , but the runtime is like 5s. is there a way i can optimize this?"
                    },
                    {
                        "username": "rajkanwar",
                        "content": "if say strs = [\"c\",\"b\"] would the output be 1?"
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "yes,  output will be one"
                    },
                    {
                        "username": "gnarendra89",
                        "content": "I think this problem doesn\\'t deserve to be disliked at all."
                    },
                    {
                        "username": "chooseanotherusername",
                        "content": "Why so many dislikes for this question?"
                    }
                ]
            },
            {
                "id": 1739108,
                "content": [
                    {
                        "username": "Maxx_1007",
                        "content": "Why this problem has so many downvotes?"
                    },
                    {
                        "username": "Sumit70421",
                        "content": "Is there any solution which takes linear time? I went through all solutions nobody did it in linear time."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "linear time is the only solution possible, you have to go through all characters in all strings O(n*m) which is linear for this case."
                    },
                    {
                        "username": "santanusen",
                        "content": "It was quite difficult for me to get a good timing using C++ with brute-force nested loop-columns  loop-rows approach. I got little better timing by looping from the last row to the first. May be the test cases are designed such."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "first to last, or last to first : anyway comparison is bound to happen. They have same complexity. The reason you got better time in second submission is that leetcode submissions for same code themselves have hugely varying time. So I don\\'t give much significance to the %tile of time, rather the actual time which is in 30-50 ms range for all sane submissions."
                    },
                    {
                        "username": "surajku2022",
                        "content": "Why this question has so many dislikes, I don\\'t find it hard to read or hard to implement."
                    },
                    {
                        "username": "js5809",
                        "content": "A fairly simple problem. Only the wording of the problem statement can be improved for easier understanding by everyone."
                    },
                    {
                        "username": "gugansps64",
                        "content": "Why my solution\\'s runtime is 18ms, I don\\'t find much difference with the 4ms solution and mine.\\nBelow is my solution, can anyone explain?\\n\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.length-1;j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}"
                    },
                    {
                        "username": "aym_n",
                        "content": "I have used two for loops to check condition for each pair , but the runtime is like 5s. is there a way i can optimize this?"
                    },
                    {
                        "username": "rajkanwar",
                        "content": "if say strs = [\"c\",\"b\"] would the output be 1?"
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "yes,  output will be one"
                    },
                    {
                        "username": "gnarendra89",
                        "content": "I think this problem doesn\\'t deserve to be disliked at all."
                    },
                    {
                        "username": "chooseanotherusername",
                        "content": "Why so many dislikes for this question?"
                    }
                ]
            },
            {
                "id": 1739082,
                "content": [
                    {
                        "username": "Maxx_1007",
                        "content": "Why this problem has so many downvotes?"
                    },
                    {
                        "username": "Sumit70421",
                        "content": "Is there any solution which takes linear time? I went through all solutions nobody did it in linear time."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "linear time is the only solution possible, you have to go through all characters in all strings O(n*m) which is linear for this case."
                    },
                    {
                        "username": "santanusen",
                        "content": "It was quite difficult for me to get a good timing using C++ with brute-force nested loop-columns  loop-rows approach. I got little better timing by looping from the last row to the first. May be the test cases are designed such."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "first to last, or last to first : anyway comparison is bound to happen. They have same complexity. The reason you got better time in second submission is that leetcode submissions for same code themselves have hugely varying time. So I don\\'t give much significance to the %tile of time, rather the actual time which is in 30-50 ms range for all sane submissions."
                    },
                    {
                        "username": "surajku2022",
                        "content": "Why this question has so many dislikes, I don\\'t find it hard to read or hard to implement."
                    },
                    {
                        "username": "js5809",
                        "content": "A fairly simple problem. Only the wording of the problem statement can be improved for easier understanding by everyone."
                    },
                    {
                        "username": "gugansps64",
                        "content": "Why my solution\\'s runtime is 18ms, I don\\'t find much difference with the 4ms solution and mine.\\nBelow is my solution, can anyone explain?\\n\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.length-1;j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}"
                    },
                    {
                        "username": "aym_n",
                        "content": "I have used two for loops to check condition for each pair , but the runtime is like 5s. is there a way i can optimize this?"
                    },
                    {
                        "username": "rajkanwar",
                        "content": "if say strs = [\"c\",\"b\"] would the output be 1?"
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "yes,  output will be one"
                    },
                    {
                        "username": "gnarendra89",
                        "content": "I think this problem doesn\\'t deserve to be disliked at all."
                    },
                    {
                        "username": "chooseanotherusername",
                        "content": "Why so many dislikes for this question?"
                    }
                ]
            },
            {
                "id": 1739074,
                "content": [
                    {
                        "username": "Maxx_1007",
                        "content": "Why this problem has so many downvotes?"
                    },
                    {
                        "username": "Sumit70421",
                        "content": "Is there any solution which takes linear time? I went through all solutions nobody did it in linear time."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "linear time is the only solution possible, you have to go through all characters in all strings O(n*m) which is linear for this case."
                    },
                    {
                        "username": "santanusen",
                        "content": "It was quite difficult for me to get a good timing using C++ with brute-force nested loop-columns  loop-rows approach. I got little better timing by looping from the last row to the first. May be the test cases are designed such."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "first to last, or last to first : anyway comparison is bound to happen. They have same complexity. The reason you got better time in second submission is that leetcode submissions for same code themselves have hugely varying time. So I don\\'t give much significance to the %tile of time, rather the actual time which is in 30-50 ms range for all sane submissions."
                    },
                    {
                        "username": "surajku2022",
                        "content": "Why this question has so many dislikes, I don\\'t find it hard to read or hard to implement."
                    },
                    {
                        "username": "js5809",
                        "content": "A fairly simple problem. Only the wording of the problem statement can be improved for easier understanding by everyone."
                    },
                    {
                        "username": "gugansps64",
                        "content": "Why my solution\\'s runtime is 18ms, I don\\'t find much difference with the 4ms solution and mine.\\nBelow is my solution, can anyone explain?\\n\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.length-1;j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}"
                    },
                    {
                        "username": "aym_n",
                        "content": "I have used two for loops to check condition for each pair , but the runtime is like 5s. is there a way i can optimize this?"
                    },
                    {
                        "username": "rajkanwar",
                        "content": "if say strs = [\"c\",\"b\"] would the output be 1?"
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "yes,  output will be one"
                    },
                    {
                        "username": "gnarendra89",
                        "content": "I think this problem doesn\\'t deserve to be disliked at all."
                    },
                    {
                        "username": "chooseanotherusername",
                        "content": "Why so many dislikes for this question?"
                    }
                ]
            },
            {
                "id": 1739047,
                "content": [
                    {
                        "username": "Maxx_1007",
                        "content": "Why this problem has so many downvotes?"
                    },
                    {
                        "username": "Sumit70421",
                        "content": "Is there any solution which takes linear time? I went through all solutions nobody did it in linear time."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "linear time is the only solution possible, you have to go through all characters in all strings O(n*m) which is linear for this case."
                    },
                    {
                        "username": "santanusen",
                        "content": "It was quite difficult for me to get a good timing using C++ with brute-force nested loop-columns  loop-rows approach. I got little better timing by looping from the last row to the first. May be the test cases are designed such."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "first to last, or last to first : anyway comparison is bound to happen. They have same complexity. The reason you got better time in second submission is that leetcode submissions for same code themselves have hugely varying time. So I don\\'t give much significance to the %tile of time, rather the actual time which is in 30-50 ms range for all sane submissions."
                    },
                    {
                        "username": "surajku2022",
                        "content": "Why this question has so many dislikes, I don\\'t find it hard to read or hard to implement."
                    },
                    {
                        "username": "js5809",
                        "content": "A fairly simple problem. Only the wording of the problem statement can be improved for easier understanding by everyone."
                    },
                    {
                        "username": "gugansps64",
                        "content": "Why my solution\\'s runtime is 18ms, I don\\'t find much difference with the 4ms solution and mine.\\nBelow is my solution, can anyone explain?\\n\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.length-1;j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}"
                    },
                    {
                        "username": "aym_n",
                        "content": "I have used two for loops to check condition for each pair , but the runtime is like 5s. is there a way i can optimize this?"
                    },
                    {
                        "username": "rajkanwar",
                        "content": "if say strs = [\"c\",\"b\"] would the output be 1?"
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "yes,  output will be one"
                    },
                    {
                        "username": "gnarendra89",
                        "content": "I think this problem doesn\\'t deserve to be disliked at all."
                    },
                    {
                        "username": "chooseanotherusername",
                        "content": "Why so many dislikes for this question?"
                    }
                ]
            },
            {
                "id": 1739019,
                "content": [
                    {
                        "username": "Maxx_1007",
                        "content": "Why this problem has so many downvotes?"
                    },
                    {
                        "username": "Sumit70421",
                        "content": "Is there any solution which takes linear time? I went through all solutions nobody did it in linear time."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "linear time is the only solution possible, you have to go through all characters in all strings O(n*m) which is linear for this case."
                    },
                    {
                        "username": "santanusen",
                        "content": "It was quite difficult for me to get a good timing using C++ with brute-force nested loop-columns  loop-rows approach. I got little better timing by looping from the last row to the first. May be the test cases are designed such."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "first to last, or last to first : anyway comparison is bound to happen. They have same complexity. The reason you got better time in second submission is that leetcode submissions for same code themselves have hugely varying time. So I don\\'t give much significance to the %tile of time, rather the actual time which is in 30-50 ms range for all sane submissions."
                    },
                    {
                        "username": "surajku2022",
                        "content": "Why this question has so many dislikes, I don\\'t find it hard to read or hard to implement."
                    },
                    {
                        "username": "js5809",
                        "content": "A fairly simple problem. Only the wording of the problem statement can be improved for easier understanding by everyone."
                    },
                    {
                        "username": "gugansps64",
                        "content": "Why my solution\\'s runtime is 18ms, I don\\'t find much difference with the 4ms solution and mine.\\nBelow is my solution, can anyone explain?\\n\\nclass Solution {\\n    public int minDeletionSize(String[] strs) {\\n        int count = 0;\\n        for(int i=0;i<strs[0].length();i++){\\n            for(int j=0;j<strs.length-1;j++){\\n                if(strs[j].charAt(i) > strs[j+1].charAt(i)){\\n                    count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}"
                    },
                    {
                        "username": "aym_n",
                        "content": "I have used two for loops to check condition for each pair , but the runtime is like 5s. is there a way i can optimize this?"
                    },
                    {
                        "username": "rajkanwar",
                        "content": "if say strs = [\"c\",\"b\"] would the output be 1?"
                    },
                    {
                        "username": "_BREEZE_",
                        "content": "yes,  output will be one"
                    },
                    {
                        "username": "gnarendra89",
                        "content": "I think this problem doesn\\'t deserve to be disliked at all."
                    },
                    {
                        "username": "chooseanotherusername",
                        "content": "Why so many dislikes for this question?"
                    }
                ]
            },
            {
                "id": 1738996,
                "content": [
                    {
                        "username": "kritikagupta3003",
                        "content": "Firstly read the problem as many times until you cannot understand it. Once you get it, It will be very easy for you to implement it."
                    },
                    {
                        "username": "dumb_me",
                        "content": "graphs and dp problems are on way to smash us xD."
                    },
                    {
                        "username": "ranjeet43",
                        "content": "Intuition\\nIterate in column major order (the outer loop is columns, inner loop is rows) and make sure that each element in the column is greater than or equal to the one before it. In other words, ensure that strs[i][j] >= str[i - 1][j]. If any element breaks this rule, then we delete the column and move on\\n\\nApproach\\nIterate in column major order but starting at the second row each time. If any element is less than the the element in the previous row, we increase the answer and break out of the loop since we don\\'t need to check the rest of them.\\n\\nIn other words, we just check to see if strs[i][j] < strs[i - 1][j] at any point. If it is, we know it isn\\'t sorted properly and we want to delete the column. We just return ans at the end.\\n\\nExample\\nLets use the second example, where strs = [\"cba\",\"daf\",\"ghi\"]\\n\\nCol = 0\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][0] < strs[0][0] = \\'d\\' < \\'c\\', which is false so we go to the next row\\nRow = 2\\nCheck if strs[i][j] < strs[i - 1][j] = strs[2][0] < strs[1][0] = \\'g\\' < \\'d\\', which is false so we go to the next column\\nCol = 1\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][1] < strs[0][1] = \\'a\\' < \\'b\\', which is true so we delete the row and move to the next column\\nCol = 2\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][2] < strs[0][2] = \\'f\\' < \\'a\\', which is false so we go to the next row\\nRow = 2\\nCheck if strs[i][j] < strs[i - 1][j] = strs[2][2] < strs[1][2] = \\'i\\' < \\'f\\', which is false so we exit the loop\\nAt the end, ans = 1 which is correct\\n\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int delete_count=0;\\n        int row = strs.size();\\n        int col = strs[0].size();\\n        \\n        for(int j=0; j<col; j++)\\n        {\\n            for(int i=0; i<row-1; i++)\\n            {\\n                if(strs[i][j]>strs[i+1][j])\\n                {\\n                    delete_count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return delete_count;\\n    }\\n};"
                    },
                    {
                        "username": "crazysamurai",
                        "content": "If you\\'re solving it using brute force, then this is not a bad/difficult problem. But there is also a suffix array based solution for this problem. Also the statement is fine, just read it carefully and look at the examples."
                    },
                    {
                        "username": "jeffsven",
                        "content": "I believe the statement fulfil the input requirement. Besides, \"understanding statement/troubleshooting\" is one of the core skill you will need for any career or life decision. Just my simple thought. HNY and cheers. "
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "I\\'m sure most of the leetcoders solved this easy problem with exactly the same code on Java, which turns to be equal to the only official solution.\\n\\nThe only confusion is why I run the same code 5 times and get 20-30%, then I get 96% 2 times, then again 26% etc....\\nSeems something should be improved in the platform...\\n"
                    },
                    {
                        "username": "adnanahmads999",
                        "content": "I think the problem statement could be more to the he point and precise. However, if you will analyse given examples carefully you\\'ll get that you\\'ve to just compare column elements alphabetically and count them those are not in order."
                    },
                    {
                        "username": "wareag1e",
                        "content": "This is an English reading problem rather than an algorithm problem. \\uD83E\\uDD23"
                    },
                    {
                        "username": "six519",
                        "content": "no discussion needed..."
                    },
                    {
                        "username": "xeniawann",
                        "content": "Why people are finding the statement hard to understand? The input is just like a \"matrix\" and we\\'re checking if each column of that matrix is sorted alphabetically.\\n\\nA brute force approach would work just fine since the input size is small."
                    }
                ]
            },
            {
                "id": 1738992,
                "content": [
                    {
                        "username": "kritikagupta3003",
                        "content": "Firstly read the problem as many times until you cannot understand it. Once you get it, It will be very easy for you to implement it."
                    },
                    {
                        "username": "dumb_me",
                        "content": "graphs and dp problems are on way to smash us xD."
                    },
                    {
                        "username": "ranjeet43",
                        "content": "Intuition\\nIterate in column major order (the outer loop is columns, inner loop is rows) and make sure that each element in the column is greater than or equal to the one before it. In other words, ensure that strs[i][j] >= str[i - 1][j]. If any element breaks this rule, then we delete the column and move on\\n\\nApproach\\nIterate in column major order but starting at the second row each time. If any element is less than the the element in the previous row, we increase the answer and break out of the loop since we don\\'t need to check the rest of them.\\n\\nIn other words, we just check to see if strs[i][j] < strs[i - 1][j] at any point. If it is, we know it isn\\'t sorted properly and we want to delete the column. We just return ans at the end.\\n\\nExample\\nLets use the second example, where strs = [\"cba\",\"daf\",\"ghi\"]\\n\\nCol = 0\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][0] < strs[0][0] = \\'d\\' < \\'c\\', which is false so we go to the next row\\nRow = 2\\nCheck if strs[i][j] < strs[i - 1][j] = strs[2][0] < strs[1][0] = \\'g\\' < \\'d\\', which is false so we go to the next column\\nCol = 1\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][1] < strs[0][1] = \\'a\\' < \\'b\\', which is true so we delete the row and move to the next column\\nCol = 2\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][2] < strs[0][2] = \\'f\\' < \\'a\\', which is false so we go to the next row\\nRow = 2\\nCheck if strs[i][j] < strs[i - 1][j] = strs[2][2] < strs[1][2] = \\'i\\' < \\'f\\', which is false so we exit the loop\\nAt the end, ans = 1 which is correct\\n\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int delete_count=0;\\n        int row = strs.size();\\n        int col = strs[0].size();\\n        \\n        for(int j=0; j<col; j++)\\n        {\\n            for(int i=0; i<row-1; i++)\\n            {\\n                if(strs[i][j]>strs[i+1][j])\\n                {\\n                    delete_count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return delete_count;\\n    }\\n};"
                    },
                    {
                        "username": "crazysamurai",
                        "content": "If you\\'re solving it using brute force, then this is not a bad/difficult problem. But there is also a suffix array based solution for this problem. Also the statement is fine, just read it carefully and look at the examples."
                    },
                    {
                        "username": "jeffsven",
                        "content": "I believe the statement fulfil the input requirement. Besides, \"understanding statement/troubleshooting\" is one of the core skill you will need for any career or life decision. Just my simple thought. HNY and cheers. "
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "I\\'m sure most of the leetcoders solved this easy problem with exactly the same code on Java, which turns to be equal to the only official solution.\\n\\nThe only confusion is why I run the same code 5 times and get 20-30%, then I get 96% 2 times, then again 26% etc....\\nSeems something should be improved in the platform...\\n"
                    },
                    {
                        "username": "adnanahmads999",
                        "content": "I think the problem statement could be more to the he point and precise. However, if you will analyse given examples carefully you\\'ll get that you\\'ve to just compare column elements alphabetically and count them those are not in order."
                    },
                    {
                        "username": "wareag1e",
                        "content": "This is an English reading problem rather than an algorithm problem. \\uD83E\\uDD23"
                    },
                    {
                        "username": "six519",
                        "content": "no discussion needed..."
                    },
                    {
                        "username": "xeniawann",
                        "content": "Why people are finding the statement hard to understand? The input is just like a \"matrix\" and we\\'re checking if each column of that matrix is sorted alphabetically.\\n\\nA brute force approach would work just fine since the input size is small."
                    }
                ]
            },
            {
                "id": 1738987,
                "content": [
                    {
                        "username": "kritikagupta3003",
                        "content": "Firstly read the problem as many times until you cannot understand it. Once you get it, It will be very easy for you to implement it."
                    },
                    {
                        "username": "dumb_me",
                        "content": "graphs and dp problems are on way to smash us xD."
                    },
                    {
                        "username": "ranjeet43",
                        "content": "Intuition\\nIterate in column major order (the outer loop is columns, inner loop is rows) and make sure that each element in the column is greater than or equal to the one before it. In other words, ensure that strs[i][j] >= str[i - 1][j]. If any element breaks this rule, then we delete the column and move on\\n\\nApproach\\nIterate in column major order but starting at the second row each time. If any element is less than the the element in the previous row, we increase the answer and break out of the loop since we don\\'t need to check the rest of them.\\n\\nIn other words, we just check to see if strs[i][j] < strs[i - 1][j] at any point. If it is, we know it isn\\'t sorted properly and we want to delete the column. We just return ans at the end.\\n\\nExample\\nLets use the second example, where strs = [\"cba\",\"daf\",\"ghi\"]\\n\\nCol = 0\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][0] < strs[0][0] = \\'d\\' < \\'c\\', which is false so we go to the next row\\nRow = 2\\nCheck if strs[i][j] < strs[i - 1][j] = strs[2][0] < strs[1][0] = \\'g\\' < \\'d\\', which is false so we go to the next column\\nCol = 1\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][1] < strs[0][1] = \\'a\\' < \\'b\\', which is true so we delete the row and move to the next column\\nCol = 2\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][2] < strs[0][2] = \\'f\\' < \\'a\\', which is false so we go to the next row\\nRow = 2\\nCheck if strs[i][j] < strs[i - 1][j] = strs[2][2] < strs[1][2] = \\'i\\' < \\'f\\', which is false so we exit the loop\\nAt the end, ans = 1 which is correct\\n\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int delete_count=0;\\n        int row = strs.size();\\n        int col = strs[0].size();\\n        \\n        for(int j=0; j<col; j++)\\n        {\\n            for(int i=0; i<row-1; i++)\\n            {\\n                if(strs[i][j]>strs[i+1][j])\\n                {\\n                    delete_count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return delete_count;\\n    }\\n};"
                    },
                    {
                        "username": "crazysamurai",
                        "content": "If you\\'re solving it using brute force, then this is not a bad/difficult problem. But there is also a suffix array based solution for this problem. Also the statement is fine, just read it carefully and look at the examples."
                    },
                    {
                        "username": "jeffsven",
                        "content": "I believe the statement fulfil the input requirement. Besides, \"understanding statement/troubleshooting\" is one of the core skill you will need for any career or life decision. Just my simple thought. HNY and cheers. "
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "I\\'m sure most of the leetcoders solved this easy problem with exactly the same code on Java, which turns to be equal to the only official solution.\\n\\nThe only confusion is why I run the same code 5 times and get 20-30%, then I get 96% 2 times, then again 26% etc....\\nSeems something should be improved in the platform...\\n"
                    },
                    {
                        "username": "adnanahmads999",
                        "content": "I think the problem statement could be more to the he point and precise. However, if you will analyse given examples carefully you\\'ll get that you\\'ve to just compare column elements alphabetically and count them those are not in order."
                    },
                    {
                        "username": "wareag1e",
                        "content": "This is an English reading problem rather than an algorithm problem. \\uD83E\\uDD23"
                    },
                    {
                        "username": "six519",
                        "content": "no discussion needed..."
                    },
                    {
                        "username": "xeniawann",
                        "content": "Why people are finding the statement hard to understand? The input is just like a \"matrix\" and we\\'re checking if each column of that matrix is sorted alphabetically.\\n\\nA brute force approach would work just fine since the input size is small."
                    }
                ]
            },
            {
                "id": 1738975,
                "content": [
                    {
                        "username": "kritikagupta3003",
                        "content": "Firstly read the problem as many times until you cannot understand it. Once you get it, It will be very easy for you to implement it."
                    },
                    {
                        "username": "dumb_me",
                        "content": "graphs and dp problems are on way to smash us xD."
                    },
                    {
                        "username": "ranjeet43",
                        "content": "Intuition\\nIterate in column major order (the outer loop is columns, inner loop is rows) and make sure that each element in the column is greater than or equal to the one before it. In other words, ensure that strs[i][j] >= str[i - 1][j]. If any element breaks this rule, then we delete the column and move on\\n\\nApproach\\nIterate in column major order but starting at the second row each time. If any element is less than the the element in the previous row, we increase the answer and break out of the loop since we don\\'t need to check the rest of them.\\n\\nIn other words, we just check to see if strs[i][j] < strs[i - 1][j] at any point. If it is, we know it isn\\'t sorted properly and we want to delete the column. We just return ans at the end.\\n\\nExample\\nLets use the second example, where strs = [\"cba\",\"daf\",\"ghi\"]\\n\\nCol = 0\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][0] < strs[0][0] = \\'d\\' < \\'c\\', which is false so we go to the next row\\nRow = 2\\nCheck if strs[i][j] < strs[i - 1][j] = strs[2][0] < strs[1][0] = \\'g\\' < \\'d\\', which is false so we go to the next column\\nCol = 1\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][1] < strs[0][1] = \\'a\\' < \\'b\\', which is true so we delete the row and move to the next column\\nCol = 2\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][2] < strs[0][2] = \\'f\\' < \\'a\\', which is false so we go to the next row\\nRow = 2\\nCheck if strs[i][j] < strs[i - 1][j] = strs[2][2] < strs[1][2] = \\'i\\' < \\'f\\', which is false so we exit the loop\\nAt the end, ans = 1 which is correct\\n\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int delete_count=0;\\n        int row = strs.size();\\n        int col = strs[0].size();\\n        \\n        for(int j=0; j<col; j++)\\n        {\\n            for(int i=0; i<row-1; i++)\\n            {\\n                if(strs[i][j]>strs[i+1][j])\\n                {\\n                    delete_count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return delete_count;\\n    }\\n};"
                    },
                    {
                        "username": "crazysamurai",
                        "content": "If you\\'re solving it using brute force, then this is not a bad/difficult problem. But there is also a suffix array based solution for this problem. Also the statement is fine, just read it carefully and look at the examples."
                    },
                    {
                        "username": "jeffsven",
                        "content": "I believe the statement fulfil the input requirement. Besides, \"understanding statement/troubleshooting\" is one of the core skill you will need for any career or life decision. Just my simple thought. HNY and cheers. "
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "I\\'m sure most of the leetcoders solved this easy problem with exactly the same code on Java, which turns to be equal to the only official solution.\\n\\nThe only confusion is why I run the same code 5 times and get 20-30%, then I get 96% 2 times, then again 26% etc....\\nSeems something should be improved in the platform...\\n"
                    },
                    {
                        "username": "adnanahmads999",
                        "content": "I think the problem statement could be more to the he point and precise. However, if you will analyse given examples carefully you\\'ll get that you\\'ve to just compare column elements alphabetically and count them those are not in order."
                    },
                    {
                        "username": "wareag1e",
                        "content": "This is an English reading problem rather than an algorithm problem. \\uD83E\\uDD23"
                    },
                    {
                        "username": "six519",
                        "content": "no discussion needed..."
                    },
                    {
                        "username": "xeniawann",
                        "content": "Why people are finding the statement hard to understand? The input is just like a \"matrix\" and we\\'re checking if each column of that matrix is sorted alphabetically.\\n\\nA brute force approach would work just fine since the input size is small."
                    }
                ]
            },
            {
                "id": 1738955,
                "content": [
                    {
                        "username": "kritikagupta3003",
                        "content": "Firstly read the problem as many times until you cannot understand it. Once you get it, It will be very easy for you to implement it."
                    },
                    {
                        "username": "dumb_me",
                        "content": "graphs and dp problems are on way to smash us xD."
                    },
                    {
                        "username": "ranjeet43",
                        "content": "Intuition\\nIterate in column major order (the outer loop is columns, inner loop is rows) and make sure that each element in the column is greater than or equal to the one before it. In other words, ensure that strs[i][j] >= str[i - 1][j]. If any element breaks this rule, then we delete the column and move on\\n\\nApproach\\nIterate in column major order but starting at the second row each time. If any element is less than the the element in the previous row, we increase the answer and break out of the loop since we don\\'t need to check the rest of them.\\n\\nIn other words, we just check to see if strs[i][j] < strs[i - 1][j] at any point. If it is, we know it isn\\'t sorted properly and we want to delete the column. We just return ans at the end.\\n\\nExample\\nLets use the second example, where strs = [\"cba\",\"daf\",\"ghi\"]\\n\\nCol = 0\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][0] < strs[0][0] = \\'d\\' < \\'c\\', which is false so we go to the next row\\nRow = 2\\nCheck if strs[i][j] < strs[i - 1][j] = strs[2][0] < strs[1][0] = \\'g\\' < \\'d\\', which is false so we go to the next column\\nCol = 1\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][1] < strs[0][1] = \\'a\\' < \\'b\\', which is true so we delete the row and move to the next column\\nCol = 2\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][2] < strs[0][2] = \\'f\\' < \\'a\\', which is false so we go to the next row\\nRow = 2\\nCheck if strs[i][j] < strs[i - 1][j] = strs[2][2] < strs[1][2] = \\'i\\' < \\'f\\', which is false so we exit the loop\\nAt the end, ans = 1 which is correct\\n\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int delete_count=0;\\n        int row = strs.size();\\n        int col = strs[0].size();\\n        \\n        for(int j=0; j<col; j++)\\n        {\\n            for(int i=0; i<row-1; i++)\\n            {\\n                if(strs[i][j]>strs[i+1][j])\\n                {\\n                    delete_count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return delete_count;\\n    }\\n};"
                    },
                    {
                        "username": "crazysamurai",
                        "content": "If you\\'re solving it using brute force, then this is not a bad/difficult problem. But there is also a suffix array based solution for this problem. Also the statement is fine, just read it carefully and look at the examples."
                    },
                    {
                        "username": "jeffsven",
                        "content": "I believe the statement fulfil the input requirement. Besides, \"understanding statement/troubleshooting\" is one of the core skill you will need for any career or life decision. Just my simple thought. HNY and cheers. "
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "I\\'m sure most of the leetcoders solved this easy problem with exactly the same code on Java, which turns to be equal to the only official solution.\\n\\nThe only confusion is why I run the same code 5 times and get 20-30%, then I get 96% 2 times, then again 26% etc....\\nSeems something should be improved in the platform...\\n"
                    },
                    {
                        "username": "adnanahmads999",
                        "content": "I think the problem statement could be more to the he point and precise. However, if you will analyse given examples carefully you\\'ll get that you\\'ve to just compare column elements alphabetically and count them those are not in order."
                    },
                    {
                        "username": "wareag1e",
                        "content": "This is an English reading problem rather than an algorithm problem. \\uD83E\\uDD23"
                    },
                    {
                        "username": "six519",
                        "content": "no discussion needed..."
                    },
                    {
                        "username": "xeniawann",
                        "content": "Why people are finding the statement hard to understand? The input is just like a \"matrix\" and we\\'re checking if each column of that matrix is sorted alphabetically.\\n\\nA brute force approach would work just fine since the input size is small."
                    }
                ]
            },
            {
                "id": 1738953,
                "content": [
                    {
                        "username": "kritikagupta3003",
                        "content": "Firstly read the problem as many times until you cannot understand it. Once you get it, It will be very easy for you to implement it."
                    },
                    {
                        "username": "dumb_me",
                        "content": "graphs and dp problems are on way to smash us xD."
                    },
                    {
                        "username": "ranjeet43",
                        "content": "Intuition\\nIterate in column major order (the outer loop is columns, inner loop is rows) and make sure that each element in the column is greater than or equal to the one before it. In other words, ensure that strs[i][j] >= str[i - 1][j]. If any element breaks this rule, then we delete the column and move on\\n\\nApproach\\nIterate in column major order but starting at the second row each time. If any element is less than the the element in the previous row, we increase the answer and break out of the loop since we don\\'t need to check the rest of them.\\n\\nIn other words, we just check to see if strs[i][j] < strs[i - 1][j] at any point. If it is, we know it isn\\'t sorted properly and we want to delete the column. We just return ans at the end.\\n\\nExample\\nLets use the second example, where strs = [\"cba\",\"daf\",\"ghi\"]\\n\\nCol = 0\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][0] < strs[0][0] = \\'d\\' < \\'c\\', which is false so we go to the next row\\nRow = 2\\nCheck if strs[i][j] < strs[i - 1][j] = strs[2][0] < strs[1][0] = \\'g\\' < \\'d\\', which is false so we go to the next column\\nCol = 1\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][1] < strs[0][1] = \\'a\\' < \\'b\\', which is true so we delete the row and move to the next column\\nCol = 2\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][2] < strs[0][2] = \\'f\\' < \\'a\\', which is false so we go to the next row\\nRow = 2\\nCheck if strs[i][j] < strs[i - 1][j] = strs[2][2] < strs[1][2] = \\'i\\' < \\'f\\', which is false so we exit the loop\\nAt the end, ans = 1 which is correct\\n\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int delete_count=0;\\n        int row = strs.size();\\n        int col = strs[0].size();\\n        \\n        for(int j=0; j<col; j++)\\n        {\\n            for(int i=0; i<row-1; i++)\\n            {\\n                if(strs[i][j]>strs[i+1][j])\\n                {\\n                    delete_count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return delete_count;\\n    }\\n};"
                    },
                    {
                        "username": "crazysamurai",
                        "content": "If you\\'re solving it using brute force, then this is not a bad/difficult problem. But there is also a suffix array based solution for this problem. Also the statement is fine, just read it carefully and look at the examples."
                    },
                    {
                        "username": "jeffsven",
                        "content": "I believe the statement fulfil the input requirement. Besides, \"understanding statement/troubleshooting\" is one of the core skill you will need for any career or life decision. Just my simple thought. HNY and cheers. "
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "I\\'m sure most of the leetcoders solved this easy problem with exactly the same code on Java, which turns to be equal to the only official solution.\\n\\nThe only confusion is why I run the same code 5 times and get 20-30%, then I get 96% 2 times, then again 26% etc....\\nSeems something should be improved in the platform...\\n"
                    },
                    {
                        "username": "adnanahmads999",
                        "content": "I think the problem statement could be more to the he point and precise. However, if you will analyse given examples carefully you\\'ll get that you\\'ve to just compare column elements alphabetically and count them those are not in order."
                    },
                    {
                        "username": "wareag1e",
                        "content": "This is an English reading problem rather than an algorithm problem. \\uD83E\\uDD23"
                    },
                    {
                        "username": "six519",
                        "content": "no discussion needed..."
                    },
                    {
                        "username": "xeniawann",
                        "content": "Why people are finding the statement hard to understand? The input is just like a \"matrix\" and we\\'re checking if each column of that matrix is sorted alphabetically.\\n\\nA brute force approach would work just fine since the input size is small."
                    }
                ]
            },
            {
                "id": 1738947,
                "content": [
                    {
                        "username": "kritikagupta3003",
                        "content": "Firstly read the problem as many times until you cannot understand it. Once you get it, It will be very easy for you to implement it."
                    },
                    {
                        "username": "dumb_me",
                        "content": "graphs and dp problems are on way to smash us xD."
                    },
                    {
                        "username": "ranjeet43",
                        "content": "Intuition\\nIterate in column major order (the outer loop is columns, inner loop is rows) and make sure that each element in the column is greater than or equal to the one before it. In other words, ensure that strs[i][j] >= str[i - 1][j]. If any element breaks this rule, then we delete the column and move on\\n\\nApproach\\nIterate in column major order but starting at the second row each time. If any element is less than the the element in the previous row, we increase the answer and break out of the loop since we don\\'t need to check the rest of them.\\n\\nIn other words, we just check to see if strs[i][j] < strs[i - 1][j] at any point. If it is, we know it isn\\'t sorted properly and we want to delete the column. We just return ans at the end.\\n\\nExample\\nLets use the second example, where strs = [\"cba\",\"daf\",\"ghi\"]\\n\\nCol = 0\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][0] < strs[0][0] = \\'d\\' < \\'c\\', which is false so we go to the next row\\nRow = 2\\nCheck if strs[i][j] < strs[i - 1][j] = strs[2][0] < strs[1][0] = \\'g\\' < \\'d\\', which is false so we go to the next column\\nCol = 1\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][1] < strs[0][1] = \\'a\\' < \\'b\\', which is true so we delete the row and move to the next column\\nCol = 2\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][2] < strs[0][2] = \\'f\\' < \\'a\\', which is false so we go to the next row\\nRow = 2\\nCheck if strs[i][j] < strs[i - 1][j] = strs[2][2] < strs[1][2] = \\'i\\' < \\'f\\', which is false so we exit the loop\\nAt the end, ans = 1 which is correct\\n\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int delete_count=0;\\n        int row = strs.size();\\n        int col = strs[0].size();\\n        \\n        for(int j=0; j<col; j++)\\n        {\\n            for(int i=0; i<row-1; i++)\\n            {\\n                if(strs[i][j]>strs[i+1][j])\\n                {\\n                    delete_count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return delete_count;\\n    }\\n};"
                    },
                    {
                        "username": "crazysamurai",
                        "content": "If you\\'re solving it using brute force, then this is not a bad/difficult problem. But there is also a suffix array based solution for this problem. Also the statement is fine, just read it carefully and look at the examples."
                    },
                    {
                        "username": "jeffsven",
                        "content": "I believe the statement fulfil the input requirement. Besides, \"understanding statement/troubleshooting\" is one of the core skill you will need for any career or life decision. Just my simple thought. HNY and cheers. "
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "I\\'m sure most of the leetcoders solved this easy problem with exactly the same code on Java, which turns to be equal to the only official solution.\\n\\nThe only confusion is why I run the same code 5 times and get 20-30%, then I get 96% 2 times, then again 26% etc....\\nSeems something should be improved in the platform...\\n"
                    },
                    {
                        "username": "adnanahmads999",
                        "content": "I think the problem statement could be more to the he point and precise. However, if you will analyse given examples carefully you\\'ll get that you\\'ve to just compare column elements alphabetically and count them those are not in order."
                    },
                    {
                        "username": "wareag1e",
                        "content": "This is an English reading problem rather than an algorithm problem. \\uD83E\\uDD23"
                    },
                    {
                        "username": "six519",
                        "content": "no discussion needed..."
                    },
                    {
                        "username": "xeniawann",
                        "content": "Why people are finding the statement hard to understand? The input is just like a \"matrix\" and we\\'re checking if each column of that matrix is sorted alphabetically.\\n\\nA brute force approach would work just fine since the input size is small."
                    }
                ]
            },
            {
                "id": 1738946,
                "content": [
                    {
                        "username": "kritikagupta3003",
                        "content": "Firstly read the problem as many times until you cannot understand it. Once you get it, It will be very easy for you to implement it."
                    },
                    {
                        "username": "dumb_me",
                        "content": "graphs and dp problems are on way to smash us xD."
                    },
                    {
                        "username": "ranjeet43",
                        "content": "Intuition\\nIterate in column major order (the outer loop is columns, inner loop is rows) and make sure that each element in the column is greater than or equal to the one before it. In other words, ensure that strs[i][j] >= str[i - 1][j]. If any element breaks this rule, then we delete the column and move on\\n\\nApproach\\nIterate in column major order but starting at the second row each time. If any element is less than the the element in the previous row, we increase the answer and break out of the loop since we don\\'t need to check the rest of them.\\n\\nIn other words, we just check to see if strs[i][j] < strs[i - 1][j] at any point. If it is, we know it isn\\'t sorted properly and we want to delete the column. We just return ans at the end.\\n\\nExample\\nLets use the second example, where strs = [\"cba\",\"daf\",\"ghi\"]\\n\\nCol = 0\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][0] < strs[0][0] = \\'d\\' < \\'c\\', which is false so we go to the next row\\nRow = 2\\nCheck if strs[i][j] < strs[i - 1][j] = strs[2][0] < strs[1][0] = \\'g\\' < \\'d\\', which is false so we go to the next column\\nCol = 1\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][1] < strs[0][1] = \\'a\\' < \\'b\\', which is true so we delete the row and move to the next column\\nCol = 2\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][2] < strs[0][2] = \\'f\\' < \\'a\\', which is false so we go to the next row\\nRow = 2\\nCheck if strs[i][j] < strs[i - 1][j] = strs[2][2] < strs[1][2] = \\'i\\' < \\'f\\', which is false so we exit the loop\\nAt the end, ans = 1 which is correct\\n\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int delete_count=0;\\n        int row = strs.size();\\n        int col = strs[0].size();\\n        \\n        for(int j=0; j<col; j++)\\n        {\\n            for(int i=0; i<row-1; i++)\\n            {\\n                if(strs[i][j]>strs[i+1][j])\\n                {\\n                    delete_count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return delete_count;\\n    }\\n};"
                    },
                    {
                        "username": "crazysamurai",
                        "content": "If you\\'re solving it using brute force, then this is not a bad/difficult problem. But there is also a suffix array based solution for this problem. Also the statement is fine, just read it carefully and look at the examples."
                    },
                    {
                        "username": "jeffsven",
                        "content": "I believe the statement fulfil the input requirement. Besides, \"understanding statement/troubleshooting\" is one of the core skill you will need for any career or life decision. Just my simple thought. HNY and cheers. "
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "I\\'m sure most of the leetcoders solved this easy problem with exactly the same code on Java, which turns to be equal to the only official solution.\\n\\nThe only confusion is why I run the same code 5 times and get 20-30%, then I get 96% 2 times, then again 26% etc....\\nSeems something should be improved in the platform...\\n"
                    },
                    {
                        "username": "adnanahmads999",
                        "content": "I think the problem statement could be more to the he point and precise. However, if you will analyse given examples carefully you\\'ll get that you\\'ve to just compare column elements alphabetically and count them those are not in order."
                    },
                    {
                        "username": "wareag1e",
                        "content": "This is an English reading problem rather than an algorithm problem. \\uD83E\\uDD23"
                    },
                    {
                        "username": "six519",
                        "content": "no discussion needed..."
                    },
                    {
                        "username": "xeniawann",
                        "content": "Why people are finding the statement hard to understand? The input is just like a \"matrix\" and we\\'re checking if each column of that matrix is sorted alphabetically.\\n\\nA brute force approach would work just fine since the input size is small."
                    }
                ]
            },
            {
                "id": 1738900,
                "content": [
                    {
                        "username": "kritikagupta3003",
                        "content": "Firstly read the problem as many times until you cannot understand it. Once you get it, It will be very easy for you to implement it."
                    },
                    {
                        "username": "dumb_me",
                        "content": "graphs and dp problems are on way to smash us xD."
                    },
                    {
                        "username": "ranjeet43",
                        "content": "Intuition\\nIterate in column major order (the outer loop is columns, inner loop is rows) and make sure that each element in the column is greater than or equal to the one before it. In other words, ensure that strs[i][j] >= str[i - 1][j]. If any element breaks this rule, then we delete the column and move on\\n\\nApproach\\nIterate in column major order but starting at the second row each time. If any element is less than the the element in the previous row, we increase the answer and break out of the loop since we don\\'t need to check the rest of them.\\n\\nIn other words, we just check to see if strs[i][j] < strs[i - 1][j] at any point. If it is, we know it isn\\'t sorted properly and we want to delete the column. We just return ans at the end.\\n\\nExample\\nLets use the second example, where strs = [\"cba\",\"daf\",\"ghi\"]\\n\\nCol = 0\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][0] < strs[0][0] = \\'d\\' < \\'c\\', which is false so we go to the next row\\nRow = 2\\nCheck if strs[i][j] < strs[i - 1][j] = strs[2][0] < strs[1][0] = \\'g\\' < \\'d\\', which is false so we go to the next column\\nCol = 1\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][1] < strs[0][1] = \\'a\\' < \\'b\\', which is true so we delete the row and move to the next column\\nCol = 2\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][2] < strs[0][2] = \\'f\\' < \\'a\\', which is false so we go to the next row\\nRow = 2\\nCheck if strs[i][j] < strs[i - 1][j] = strs[2][2] < strs[1][2] = \\'i\\' < \\'f\\', which is false so we exit the loop\\nAt the end, ans = 1 which is correct\\n\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int delete_count=0;\\n        int row = strs.size();\\n        int col = strs[0].size();\\n        \\n        for(int j=0; j<col; j++)\\n        {\\n            for(int i=0; i<row-1; i++)\\n            {\\n                if(strs[i][j]>strs[i+1][j])\\n                {\\n                    delete_count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return delete_count;\\n    }\\n};"
                    },
                    {
                        "username": "crazysamurai",
                        "content": "If you\\'re solving it using brute force, then this is not a bad/difficult problem. But there is also a suffix array based solution for this problem. Also the statement is fine, just read it carefully and look at the examples."
                    },
                    {
                        "username": "jeffsven",
                        "content": "I believe the statement fulfil the input requirement. Besides, \"understanding statement/troubleshooting\" is one of the core skill you will need for any career or life decision. Just my simple thought. HNY and cheers. "
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "I\\'m sure most of the leetcoders solved this easy problem with exactly the same code on Java, which turns to be equal to the only official solution.\\n\\nThe only confusion is why I run the same code 5 times and get 20-30%, then I get 96% 2 times, then again 26% etc....\\nSeems something should be improved in the platform...\\n"
                    },
                    {
                        "username": "adnanahmads999",
                        "content": "I think the problem statement could be more to the he point and precise. However, if you will analyse given examples carefully you\\'ll get that you\\'ve to just compare column elements alphabetically and count them those are not in order."
                    },
                    {
                        "username": "wareag1e",
                        "content": "This is an English reading problem rather than an algorithm problem. \\uD83E\\uDD23"
                    },
                    {
                        "username": "six519",
                        "content": "no discussion needed..."
                    },
                    {
                        "username": "xeniawann",
                        "content": "Why people are finding the statement hard to understand? The input is just like a \"matrix\" and we\\'re checking if each column of that matrix is sorted alphabetically.\\n\\nA brute force approach would work just fine since the input size is small."
                    }
                ]
            },
            {
                "id": 1738897,
                "content": [
                    {
                        "username": "kritikagupta3003",
                        "content": "Firstly read the problem as many times until you cannot understand it. Once you get it, It will be very easy for you to implement it."
                    },
                    {
                        "username": "dumb_me",
                        "content": "graphs and dp problems are on way to smash us xD."
                    },
                    {
                        "username": "ranjeet43",
                        "content": "Intuition\\nIterate in column major order (the outer loop is columns, inner loop is rows) and make sure that each element in the column is greater than or equal to the one before it. In other words, ensure that strs[i][j] >= str[i - 1][j]. If any element breaks this rule, then we delete the column and move on\\n\\nApproach\\nIterate in column major order but starting at the second row each time. If any element is less than the the element in the previous row, we increase the answer and break out of the loop since we don\\'t need to check the rest of them.\\n\\nIn other words, we just check to see if strs[i][j] < strs[i - 1][j] at any point. If it is, we know it isn\\'t sorted properly and we want to delete the column. We just return ans at the end.\\n\\nExample\\nLets use the second example, where strs = [\"cba\",\"daf\",\"ghi\"]\\n\\nCol = 0\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][0] < strs[0][0] = \\'d\\' < \\'c\\', which is false so we go to the next row\\nRow = 2\\nCheck if strs[i][j] < strs[i - 1][j] = strs[2][0] < strs[1][0] = \\'g\\' < \\'d\\', which is false so we go to the next column\\nCol = 1\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][1] < strs[0][1] = \\'a\\' < \\'b\\', which is true so we delete the row and move to the next column\\nCol = 2\\nRow = 1\\nCheck if strs[i][j] < strs[i - 1][j] = strs[1][2] < strs[0][2] = \\'f\\' < \\'a\\', which is false so we go to the next row\\nRow = 2\\nCheck if strs[i][j] < strs[i - 1][j] = strs[2][2] < strs[1][2] = \\'i\\' < \\'f\\', which is false so we exit the loop\\nAt the end, ans = 1 which is correct\\n\\nclass Solution {\\npublic:\\n    int minDeletionSize(vector<string>& strs) {\\n        int delete_count=0;\\n        int row = strs.size();\\n        int col = strs[0].size();\\n        \\n        for(int j=0; j<col; j++)\\n        {\\n            for(int i=0; i<row-1; i++)\\n            {\\n                if(strs[i][j]>strs[i+1][j])\\n                {\\n                    delete_count++;\\n                    break;\\n                }\\n            }\\n        }\\n        return delete_count;\\n    }\\n};"
                    },
                    {
                        "username": "crazysamurai",
                        "content": "If you\\'re solving it using brute force, then this is not a bad/difficult problem. But there is also a suffix array based solution for this problem. Also the statement is fine, just read it carefully and look at the examples."
                    },
                    {
                        "username": "jeffsven",
                        "content": "I believe the statement fulfil the input requirement. Besides, \"understanding statement/troubleshooting\" is one of the core skill you will need for any career or life decision. Just my simple thought. HNY and cheers. "
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "I\\'m sure most of the leetcoders solved this easy problem with exactly the same code on Java, which turns to be equal to the only official solution.\\n\\nThe only confusion is why I run the same code 5 times and get 20-30%, then I get 96% 2 times, then again 26% etc....\\nSeems something should be improved in the platform...\\n"
                    },
                    {
                        "username": "adnanahmads999",
                        "content": "I think the problem statement could be more to the he point and precise. However, if you will analyse given examples carefully you\\'ll get that you\\'ve to just compare column elements alphabetically and count them those are not in order."
                    },
                    {
                        "username": "wareag1e",
                        "content": "This is an English reading problem rather than an algorithm problem. \\uD83E\\uDD23"
                    },
                    {
                        "username": "six519",
                        "content": "no discussion needed..."
                    },
                    {
                        "username": "xeniawann",
                        "content": "Why people are finding the statement hard to understand? The input is just like a \"matrix\" and we\\'re checking if each column of that matrix is sorted alphabetically.\\n\\nA brute force approach would work just fine since the input size is small."
                    }
                ]
            }
        ]
    }
]