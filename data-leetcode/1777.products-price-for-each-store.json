[
    {
        "title": "Product's Price for Each Store",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1566033,
                "content": [
                    {
                        "username": "andyyeung1994",
                        "content": "# After group by the product_id, you need to use aggregate function to obtain the price for each store.\\n\\n# You can use max(), min(), sum() or avg(), but not count().\\n\\n# Otherwise, it will just return the first row of the group by result, e.g. [0, 95, NULL, NULL]\\n\\nselect product_id, \\n\\t\\t   max(if(store = \\'store1\\', price, null)) as store1,\\n\\t\\t   max(if(store = \\'store2\\', price, null)) as store2,\\n\\t\\t   max(if(store = \\'store3\\', price, null)) as store3\\nfrom Products\\ngroup by 1;"
                    },
                    {
                        "username": "mayukitan",
                        "content": "It is just a simple case when or pivot table if the store is hardcoded with group (store1, store2, store3). If the question is asking to list all exisinting stores in store column, let\\' s say we do not know what is the store value and has to output all possible store values as columns in the result table, any thoughts on how to slove this?"
                    },
                    {
                        "username": "pattyhuu",
                        "content": "\\n\\nselect product_id, [store1], [store2], [store3]\\nfrom (select product_id, store, price \\n     from products) as sourcetable\\npivot\\n(max(price) for store in ([store1], [store2], [store3])) as pv"
                    },
                    {
                        "username": "shrivastavasonal7",
                        "content": "# Write your MySQL query statement below\\nselect p1.product_id,p2.price as store1,p3.price as store2,p4.price as store3 from\\nProducts as p1 left join Products as P2 \\non p1.product_id=p2.product_id and p2.store=\\'store1\\'\\nleft join Products as P3 \\non p1.product_id=p3.product_id and p3.store=\\'store2\\'\\nleft join Products as P4 \\non p1.product_id=p4.product_id and p4.store=\\'store3\\'\\ngroup by 1\\norder by 1;"
                    },
                    {
                        "username": "hero4future",
                        "content": "this question and Rearrange Products Table is just the reverse of each other. needless to say i struggled. this would have been easier with pandas"
                    },
                    {
                        "username": "bjwyy",
                        "content": "Any one can help me find why this is false?\\n\\n# Write your MySQL query statement below\\nselect product_id, p1.price store1,pp.price store2,ppp.price store3\\nfrom products p1\\nleft join (select p2.product_id, p2.price from products p2 where p2.store=\\'store2\\') pp using(product_id)\\nleft join (select p3.product_id, p3.price from products p3 where p3.store=\\'store3\\') ppp using(product_id)\\nwhere p1.store=\\'store1\\'\\ngroup by product_id"
                    }
                ]
            },
            {
                "id": 1567024,
                "content": [
                    {
                        "username": "andyyeung1994",
                        "content": "# After group by the product_id, you need to use aggregate function to obtain the price for each store.\\n\\n# You can use max(), min(), sum() or avg(), but not count().\\n\\n# Otherwise, it will just return the first row of the group by result, e.g. [0, 95, NULL, NULL]\\n\\nselect product_id, \\n\\t\\t   max(if(store = \\'store1\\', price, null)) as store1,\\n\\t\\t   max(if(store = \\'store2\\', price, null)) as store2,\\n\\t\\t   max(if(store = \\'store3\\', price, null)) as store3\\nfrom Products\\ngroup by 1;"
                    },
                    {
                        "username": "mayukitan",
                        "content": "It is just a simple case when or pivot table if the store is hardcoded with group (store1, store2, store3). If the question is asking to list all exisinting stores in store column, let\\' s say we do not know what is the store value and has to output all possible store values as columns in the result table, any thoughts on how to slove this?"
                    },
                    {
                        "username": "pattyhuu",
                        "content": "\\n\\nselect product_id, [store1], [store2], [store3]\\nfrom (select product_id, store, price \\n     from products) as sourcetable\\npivot\\n(max(price) for store in ([store1], [store2], [store3])) as pv"
                    },
                    {
                        "username": "shrivastavasonal7",
                        "content": "# Write your MySQL query statement below\\nselect p1.product_id,p2.price as store1,p3.price as store2,p4.price as store3 from\\nProducts as p1 left join Products as P2 \\non p1.product_id=p2.product_id and p2.store=\\'store1\\'\\nleft join Products as P3 \\non p1.product_id=p3.product_id and p3.store=\\'store2\\'\\nleft join Products as P4 \\non p1.product_id=p4.product_id and p4.store=\\'store3\\'\\ngroup by 1\\norder by 1;"
                    },
                    {
                        "username": "hero4future",
                        "content": "this question and Rearrange Products Table is just the reverse of each other. needless to say i struggled. this would have been easier with pandas"
                    },
                    {
                        "username": "bjwyy",
                        "content": "Any one can help me find why this is false?\\n\\n# Write your MySQL query statement below\\nselect product_id, p1.price store1,pp.price store2,ppp.price store3\\nfrom products p1\\nleft join (select p2.product_id, p2.price from products p2 where p2.store=\\'store2\\') pp using(product_id)\\nleft join (select p3.product_id, p3.price from products p3 where p3.store=\\'store3\\') ppp using(product_id)\\nwhere p1.store=\\'store1\\'\\ngroup by product_id"
                    }
                ]
            },
            {
                "id": 1575057,
                "content": [
                    {
                        "username": "andyyeung1994",
                        "content": "# After group by the product_id, you need to use aggregate function to obtain the price for each store.\\n\\n# You can use max(), min(), sum() or avg(), but not count().\\n\\n# Otherwise, it will just return the first row of the group by result, e.g. [0, 95, NULL, NULL]\\n\\nselect product_id, \\n\\t\\t   max(if(store = \\'store1\\', price, null)) as store1,\\n\\t\\t   max(if(store = \\'store2\\', price, null)) as store2,\\n\\t\\t   max(if(store = \\'store3\\', price, null)) as store3\\nfrom Products\\ngroup by 1;"
                    },
                    {
                        "username": "mayukitan",
                        "content": "It is just a simple case when or pivot table if the store is hardcoded with group (store1, store2, store3). If the question is asking to list all exisinting stores in store column, let\\' s say we do not know what is the store value and has to output all possible store values as columns in the result table, any thoughts on how to slove this?"
                    },
                    {
                        "username": "pattyhuu",
                        "content": "\\n\\nselect product_id, [store1], [store2], [store3]\\nfrom (select product_id, store, price \\n     from products) as sourcetable\\npivot\\n(max(price) for store in ([store1], [store2], [store3])) as pv"
                    },
                    {
                        "username": "shrivastavasonal7",
                        "content": "# Write your MySQL query statement below\\nselect p1.product_id,p2.price as store1,p3.price as store2,p4.price as store3 from\\nProducts as p1 left join Products as P2 \\non p1.product_id=p2.product_id and p2.store=\\'store1\\'\\nleft join Products as P3 \\non p1.product_id=p3.product_id and p3.store=\\'store2\\'\\nleft join Products as P4 \\non p1.product_id=p4.product_id and p4.store=\\'store3\\'\\ngroup by 1\\norder by 1;"
                    },
                    {
                        "username": "hero4future",
                        "content": "this question and Rearrange Products Table is just the reverse of each other. needless to say i struggled. this would have been easier with pandas"
                    },
                    {
                        "username": "bjwyy",
                        "content": "Any one can help me find why this is false?\\n\\n# Write your MySQL query statement below\\nselect product_id, p1.price store1,pp.price store2,ppp.price store3\\nfrom products p1\\nleft join (select p2.product_id, p2.price from products p2 where p2.store=\\'store2\\') pp using(product_id)\\nleft join (select p3.product_id, p3.price from products p3 where p3.store=\\'store3\\') ppp using(product_id)\\nwhere p1.store=\\'store1\\'\\ngroup by product_id"
                    }
                ]
            },
            {
                "id": 1575020,
                "content": [
                    {
                        "username": "andyyeung1994",
                        "content": "# After group by the product_id, you need to use aggregate function to obtain the price for each store.\\n\\n# You can use max(), min(), sum() or avg(), but not count().\\n\\n# Otherwise, it will just return the first row of the group by result, e.g. [0, 95, NULL, NULL]\\n\\nselect product_id, \\n\\t\\t   max(if(store = \\'store1\\', price, null)) as store1,\\n\\t\\t   max(if(store = \\'store2\\', price, null)) as store2,\\n\\t\\t   max(if(store = \\'store3\\', price, null)) as store3\\nfrom Products\\ngroup by 1;"
                    },
                    {
                        "username": "mayukitan",
                        "content": "It is just a simple case when or pivot table if the store is hardcoded with group (store1, store2, store3). If the question is asking to list all exisinting stores in store column, let\\' s say we do not know what is the store value and has to output all possible store values as columns in the result table, any thoughts on how to slove this?"
                    },
                    {
                        "username": "pattyhuu",
                        "content": "\\n\\nselect product_id, [store1], [store2], [store3]\\nfrom (select product_id, store, price \\n     from products) as sourcetable\\npivot\\n(max(price) for store in ([store1], [store2], [store3])) as pv"
                    },
                    {
                        "username": "shrivastavasonal7",
                        "content": "# Write your MySQL query statement below\\nselect p1.product_id,p2.price as store1,p3.price as store2,p4.price as store3 from\\nProducts as p1 left join Products as P2 \\non p1.product_id=p2.product_id and p2.store=\\'store1\\'\\nleft join Products as P3 \\non p1.product_id=p3.product_id and p3.store=\\'store2\\'\\nleft join Products as P4 \\non p1.product_id=p4.product_id and p4.store=\\'store3\\'\\ngroup by 1\\norder by 1;"
                    },
                    {
                        "username": "hero4future",
                        "content": "this question and Rearrange Products Table is just the reverse of each other. needless to say i struggled. this would have been easier with pandas"
                    },
                    {
                        "username": "bjwyy",
                        "content": "Any one can help me find why this is false?\\n\\n# Write your MySQL query statement below\\nselect product_id, p1.price store1,pp.price store2,ppp.price store3\\nfrom products p1\\nleft join (select p2.product_id, p2.price from products p2 where p2.store=\\'store2\\') pp using(product_id)\\nleft join (select p3.product_id, p3.price from products p3 where p3.store=\\'store3\\') ppp using(product_id)\\nwhere p1.store=\\'store1\\'\\ngroup by product_id"
                    }
                ]
            },
            {
                "id": 1887637,
                "content": [
                    {
                        "username": "andyyeung1994",
                        "content": "# After group by the product_id, you need to use aggregate function to obtain the price for each store.\\n\\n# You can use max(), min(), sum() or avg(), but not count().\\n\\n# Otherwise, it will just return the first row of the group by result, e.g. [0, 95, NULL, NULL]\\n\\nselect product_id, \\n\\t\\t   max(if(store = \\'store1\\', price, null)) as store1,\\n\\t\\t   max(if(store = \\'store2\\', price, null)) as store2,\\n\\t\\t   max(if(store = \\'store3\\', price, null)) as store3\\nfrom Products\\ngroup by 1;"
                    },
                    {
                        "username": "mayukitan",
                        "content": "It is just a simple case when or pivot table if the store is hardcoded with group (store1, store2, store3). If the question is asking to list all exisinting stores in store column, let\\' s say we do not know what is the store value and has to output all possible store values as columns in the result table, any thoughts on how to slove this?"
                    },
                    {
                        "username": "pattyhuu",
                        "content": "\\n\\nselect product_id, [store1], [store2], [store3]\\nfrom (select product_id, store, price \\n     from products) as sourcetable\\npivot\\n(max(price) for store in ([store1], [store2], [store3])) as pv"
                    },
                    {
                        "username": "shrivastavasonal7",
                        "content": "# Write your MySQL query statement below\\nselect p1.product_id,p2.price as store1,p3.price as store2,p4.price as store3 from\\nProducts as p1 left join Products as P2 \\non p1.product_id=p2.product_id and p2.store=\\'store1\\'\\nleft join Products as P3 \\non p1.product_id=p3.product_id and p3.store=\\'store2\\'\\nleft join Products as P4 \\non p1.product_id=p4.product_id and p4.store=\\'store3\\'\\ngroup by 1\\norder by 1;"
                    },
                    {
                        "username": "hero4future",
                        "content": "this question and Rearrange Products Table is just the reverse of each other. needless to say i struggled. this would have been easier with pandas"
                    },
                    {
                        "username": "bjwyy",
                        "content": "Any one can help me find why this is false?\\n\\n# Write your MySQL query statement below\\nselect product_id, p1.price store1,pp.price store2,ppp.price store3\\nfrom products p1\\nleft join (select p2.product_id, p2.price from products p2 where p2.store=\\'store2\\') pp using(product_id)\\nleft join (select p3.product_id, p3.price from products p3 where p3.store=\\'store3\\') ppp using(product_id)\\nwhere p1.store=\\'store1\\'\\ngroup by product_id"
                    }
                ]
            },
            {
                "id": 1760018,
                "content": [
                    {
                        "username": "andyyeung1994",
                        "content": "# After group by the product_id, you need to use aggregate function to obtain the price for each store.\\n\\n# You can use max(), min(), sum() or avg(), but not count().\\n\\n# Otherwise, it will just return the first row of the group by result, e.g. [0, 95, NULL, NULL]\\n\\nselect product_id, \\n\\t\\t   max(if(store = \\'store1\\', price, null)) as store1,\\n\\t\\t   max(if(store = \\'store2\\', price, null)) as store2,\\n\\t\\t   max(if(store = \\'store3\\', price, null)) as store3\\nfrom Products\\ngroup by 1;"
                    },
                    {
                        "username": "mayukitan",
                        "content": "It is just a simple case when or pivot table if the store is hardcoded with group (store1, store2, store3). If the question is asking to list all exisinting stores in store column, let\\' s say we do not know what is the store value and has to output all possible store values as columns in the result table, any thoughts on how to slove this?"
                    },
                    {
                        "username": "pattyhuu",
                        "content": "\\n\\nselect product_id, [store1], [store2], [store3]\\nfrom (select product_id, store, price \\n     from products) as sourcetable\\npivot\\n(max(price) for store in ([store1], [store2], [store3])) as pv"
                    },
                    {
                        "username": "shrivastavasonal7",
                        "content": "# Write your MySQL query statement below\\nselect p1.product_id,p2.price as store1,p3.price as store2,p4.price as store3 from\\nProducts as p1 left join Products as P2 \\non p1.product_id=p2.product_id and p2.store=\\'store1\\'\\nleft join Products as P3 \\non p1.product_id=p3.product_id and p3.store=\\'store2\\'\\nleft join Products as P4 \\non p1.product_id=p4.product_id and p4.store=\\'store3\\'\\ngroup by 1\\norder by 1;"
                    },
                    {
                        "username": "hero4future",
                        "content": "this question and Rearrange Products Table is just the reverse of each other. needless to say i struggled. this would have been easier with pandas"
                    },
                    {
                        "username": "bjwyy",
                        "content": "Any one can help me find why this is false?\\n\\n# Write your MySQL query statement below\\nselect product_id, p1.price store1,pp.price store2,ppp.price store3\\nfrom products p1\\nleft join (select p2.product_id, p2.price from products p2 where p2.store=\\'store2\\') pp using(product_id)\\nleft join (select p3.product_id, p3.price from products p3 where p3.store=\\'store3\\') ppp using(product_id)\\nwhere p1.store=\\'store1\\'\\ngroup by product_id"
                    }
                ]
            }
        ]
    }
]