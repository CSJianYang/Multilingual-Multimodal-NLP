[
    {
        "title": "Strong Password Checker II",
        "question_content": "A password is said to be strong if it satisfies all the following criteria:\n\n\tIt has at least 8 characters.\n\tIt contains at least one lowercase letter.\n\tIt contains at least one uppercase letter.\n\tIt contains at least one digit.\n\tIt contains at least one special character. The special characters are the characters in the following string: \"!@#$%^&*()-+\".\n\tIt does not contain 2 of the same character in adjacent positions (i.e., \"aab\" violates this condition, but \"aba\" does not).\n\nGiven a string password, return true if it is a strong password. Otherwise, return false.\n&nbsp;\nExample 1:\n\nInput: password = \"IloveLe3tcode!\"\nOutput: true\nExplanation: The password meets all the requirements. Therefore, we return true.\n\nExample 2:\n\nInput: password = \"Me+You--IsMyDream\"\nOutput: false\nExplanation: The password does not contain a digit and also contains 2 of the same character in adjacent positions. Therefore, we return false.\n\nExample 3:\n\nInput: password = \"1aB!\"\nOutput: false\nExplanation: The password does not meet the length requirement. Therefore, we return false.\n&nbsp;\nConstraints:\n\n\t1 <= password.length <= 100\n\tpassword consists of letters, digits, and special characters: \"!@#$%^&*()-+\".",
        "solutions": [
            {
                "id": 2138969,
                "title": "java-python-3-2-codes-w-brief-explanation-and-analysis",
                "content": "**Method 1: Use HashSet to count conditions**\\n\\n**Q & A**\\n\\nQ: Does the `HashSet` in the codes really cost space `O(1)`?\\nA: Java `HashSet` is implemented on `HashMap`, which has an initial size of `16`. The size will not increase since the load factor `4 / 16 < 0.75`. Generally speaking, space `O(16) = O(1)`. \\n\\nIf you really wanted to optimize space, which is not really needed here, you could call `new HashSet<>(4, 1)`, here `4` and `1` are initial size and load factor respectively. -- credit to **@Ricola**.\\n\\n**End of Q & A**\\n\\n----\\n\\nUse `s`, `l`, `u`, and `d` to indicate special characters, lower case, upper case and digits respectively; Put the characters into a `HashSet` to count the conditions met.\\n\\n```java\\n    public boolean strongPasswordCheckerII(String password) {\\n        Set<Character> seen = new HashSet<>();\\n        for (int i = 0; i < password.length(); ++i) {\\n            char c = password.charAt(i);\\n            if (i > 0 && c == password.charAt(i - 1)) {\\n                return false;\\n            }\\n            if (Character.isLowerCase(c)) {\\n                seen.add(\\'l\\');\\n            }else if (Character.isUpperCase(c)) {\\n                seen.add(\\'u\\');\\n            }else if (Character.isDigit(c)) {\\n                seen.add(\\'d\\');\\n            }else {\\n                seen.add(\\'s\\');\\n            }\\n        }\\n        return password.length() >= 8 && seen.size() == 4;\\n    }\\n```\\n```python\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        seen = set()\\n        for i, c in enumerate(password):\\n            if i > 0 and c == password[i - 1]:\\n                return False\\n            if c.isupper():\\n                seen.add(\\'u\\')\\n            elif c.islower():\\n                seen.add(\\'l\\')\\n            elif c.isdigit():\\n                seen.add(\\'d\\')             \\n            else:\\n                seen.add(\\'s\\')\\n        return  len(password) > 7 and len(seen) == 4\\n```\\n\\n----\\n\\n**Method 2: 6 passes**\\n\\n```java\\n    public boolean strongPasswordCheckerII(String password) {\\n        for (int i = 1; i < password.length(); ++i) {\\n            if (password.charAt(i - 1) == password.charAt(i)) {\\n                return false;\\n            }\\n        }\\n        return password.chars().anyMatch(i -> \"!@#$%^&*()-+\".contains(\"\" + (char)i)) && \\n                password.chars().anyMatch(i -> Character.isDigit((char)i)) &&\\n                password.chars().anyMatch(i -> Character.isLowerCase((char)i)) && \\n                password.chars().anyMatch(i -> Character.isUpperCase((char)i)) && \\n                password.length() > 7;\\n    }\\n```\\nCredit to **@SunnyvaleCA** for the following Python 3 code:\\n```python\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        return  any(c.isdigit() for c in password) and \\\\\\n                any(c.islower() for c in password) and \\\\\\n                any(c.isupper() for c in password) and \\\\\\n                any(c in \\'!@#$%^&*()-+\\' for c in password) and \\\\\\n                all(a != b for a, b in pairwise(password)) and \\\\\\n                len(password) > 7\\n```\\n\\n**Analysis:**\\n\\nTime: `O(n)`, space: `O(1)`, where `n = password.length()`.",
                "solutionTags": [
                    "Java",
                    "Python3"
                ],
                "code": "```java\\n    public boolean strongPasswordCheckerII(String password) {\\n        Set<Character> seen = new HashSet<>();\\n        for (int i = 0; i < password.length(); ++i) {\\n            char c = password.charAt(i);\\n            if (i > 0 && c == password.charAt(i - 1)) {\\n                return false;\\n            }\\n            if (Character.isLowerCase(c)) {\\n                seen.add(\\'l\\');\\n            }else if (Character.isUpperCase(c)) {\\n                seen.add(\\'u\\');\\n            }else if (Character.isDigit(c)) {\\n                seen.add(\\'d\\');\\n            }else {\\n                seen.add(\\'s\\');\\n            }\\n        }\\n        return password.length() >= 8 && seen.size() == 4;\\n    }\\n```\n```python\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        seen = set()\\n        for i, c in enumerate(password):\\n            if i > 0 and c == password[i - 1]:\\n                return False\\n            if c.isupper():\\n                seen.add(\\'u\\')\\n            elif c.islower():\\n                seen.add(\\'l\\')\\n            elif c.isdigit():\\n                seen.add(\\'d\\')             \\n            else:\\n                seen.add(\\'s\\')\\n        return  len(password) > 7 and len(seen) == 4\\n```\n```java\\n    public boolean strongPasswordCheckerII(String password) {\\n        for (int i = 1; i < password.length(); ++i) {\\n            if (password.charAt(i - 1) == password.charAt(i)) {\\n                return false;\\n            }\\n        }\\n        return password.chars().anyMatch(i -> \"!@#$%^&*()-+\".contains(\"\" + (char)i)) && \\n                password.chars().anyMatch(i -> Character.isDigit((char)i)) &&\\n                password.chars().anyMatch(i -> Character.isLowerCase((char)i)) && \\n                password.chars().anyMatch(i -> Character.isUpperCase((char)i)) && \\n                password.length() > 7;\\n    }\\n```\n```python\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        return  any(c.isdigit() for c in password) and \\\\\\n                any(c.islower() for c in password) and \\\\\\n                any(c.isupper() for c in password) and \\\\\\n                any(c in \\'!@#$%^&*()-+\\' for c in password) and \\\\\\n                all(a != b for a, b in pairwise(password)) and \\\\\\n                len(password) > 7\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2138783,
                "title": "c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string p) {\\n        if(size(p) < 8) return false;\\n        bool low = false , upper = false ,digit = false ,special = false;\\n        for(auto c : p){\\n            if(c>=\\'a\\' and c<=\\'z\\') low = true;\\n            else if(c>=\\'A\\' and c <=\\'Z\\') upper = true;\\n            else if(isdigit(c)) digit = true;\\n            else special = true;\\n        }\\n        //Check the 6th condition\\n        for(int i=0;i+1<size(p);i++) if(p[i] == p[i+1]) return false;\\n        if(low and upper and digit and special) return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string p) {\\n        if(size(p) < 8) return false;\\n        bool low = false , upper = false ,digit = false ,special = false;\\n        for(auto c : p){\\n            if(c>=\\'a\\' and c<=\\'z\\') low = true;\\n            else if(c>=\\'A\\' and c <=\\'Z\\') upper = true;\\n            else if(isdigit(c)) digit = true;\\n            else special = true;\\n        }\\n        //Check the 6th condition\\n        for(int i=0;i+1<size(p);i++) if(p[i] == p[i+1]) return false;\\n        if(low and upper and digit and special) return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2139499,
                "title": "nothing-special",
                "content": "We do not need to check for a special character. \\n\\nWe just count lowercase/uppercase letters and digits. The rest of the characters are special.\\n\\n**C++**\\n```cpp\\nbool strongPasswordCheckerII(string p) {\\n    int lo = 0, up = 0, digit = 0, sz = p.size();\\n    for (int i = 0; i < sz; ++i) {\\n        if (i > 0 && p[i - 1] == p[i])\\n            return false;\\n        lo += islower(p[i]) ? 1 : 0;\\n        up += isupper(p[i]) ? 1 : 0;\\n        digit += isdigit(p[i]) ? 1 : 0;\\n    }\\n    return sz > 7 && lo && up && digit && (sz - lo - up - digit > 0);\\n}\\n```\\n\\nHere is a shorter version when we count character types using an array.\\n\\n**C++**\\n```cpp\\nbool strongPasswordCheckerII(string p) {\\n    int cnt[4] = {}, sz = p.size();\\n    for (int i = 0; i < sz; ++i) {\\n        if (i > 0 && p[i - 1] == p[i])\\n            return false;\\n        ++cnt[islower(p[i]) ? 1 : isupper(p[i]) ? 2 : isdigit(p[i]) ? 3 : 0];\\n    }\\n    return sz > 7 && all_of(begin(cnt), end(cnt), bind(greater<int>(), placeholders::_1, 0));\\n}\\n```\\n\\n**Python 3**\\n```python\\nclass Solution:\\n    def strongPasswordCheckerII(self, pwd: str) -> bool:\\n        return (\\n            len(pwd) > 7\\n            and max(len(list(p[1])) for p in groupby(pwd)) == 1\\n            and reduce(\\n                lambda a, b: a | (1 if b.isdigit() else 2 if b.islower() else 4 if b.isupper() else 8), pwd, 0\\n            ) == 15\\n        )\\n```",
                "solutionTags": [
                    "Python3",
                    "C"
                ],
                "code": "```cpp\\nbool strongPasswordCheckerII(string p) {\\n    int lo = 0, up = 0, digit = 0, sz = p.size();\\n    for (int i = 0; i < sz; ++i) {\\n        if (i > 0 && p[i - 1] == p[i])\\n            return false;\\n        lo += islower(p[i]) ? 1 : 0;\\n        up += isupper(p[i]) ? 1 : 0;\\n        digit += isdigit(p[i]) ? 1 : 0;\\n    }\\n    return sz > 7 && lo && up && digit && (sz - lo - up - digit > 0);\\n}\\n```\n```cpp\\nbool strongPasswordCheckerII(string p) {\\n    int cnt[4] = {}, sz = p.size();\\n    for (int i = 0; i < sz; ++i) {\\n        if (i > 0 && p[i - 1] == p[i])\\n            return false;\\n        ++cnt[islower(p[i]) ? 1 : isupper(p[i]) ? 2 : isdigit(p[i]) ? 3 : 0];\\n    }\\n    return sz > 7 && all_of(begin(cnt), end(cnt), bind(greater<int>(), placeholders::_1, 0));\\n}\\n```\n```python\\nclass Solution:\\n    def strongPasswordCheckerII(self, pwd: str) -> bool:\\n        return (\\n            len(pwd) > 7\\n            and max(len(list(p[1])) for p in groupby(pwd)) == 1\\n            and reduce(\\n                lambda a, b: a | (1 if b.isdigit() else 2 if b.islower() else 4 if b.isupper() else 8), pwd, 0\\n            ) == 15\\n        )\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2138983,
                "title": "java-solution-easy-to-understand",
                "content": "In this , we have traversed the password once only , but by checking the ASCII values, we have checked whether it has all the characters needed or not. Solution might seem to be large when you see the code but when you go through it ,you will realize it is not that difficult.\\n\\n```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n           HashSet<Integer> intAscii = new HashSet<>();\\n        String specialCharacters = \"!@#$%^&*()-+\";\\n        for (int i = 0; i < specialCharacters.length(); i++) {\\n            int ascii = specialCharacters.charAt(i);\\n            intAscii.add(ascii);\\n        }\\n        \\n        if(password.length() < 8){\\n            return false;\\n        }\\n        boolean small = false;\\n        boolean large = false;\\n        boolean numbers = false;\\n        boolean specialChars = false;\\n        for(int i = 0 ; i < password.length() ; i++){\\n            int ascii = (int)(password.charAt(i));\\n            if(ascii <= 90 && ascii>=65){\\n                large = true;\\n            }\\n                if(ascii <= 122 && ascii>=97){\\n                small = true;\\n            }\\n            if(ascii <=57 && ascii >=48){\\n                numbers = true;\\n            }\\n            if(intAscii.contains(ascii)){\\n                specialChars = true;\\n            }\\n            if(i> 0 && password.charAt(i)== password.charAt(i-1)){\\n                return false;\\n            }\\n        }\\n        if(large == false || small == false || numbers == false || specialChars ==false){\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n```\\nIf you liked this approach , do upvote :)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n           HashSet<Integer> intAscii = new HashSet<>();\\n        String specialCharacters = \"!@#$%^&*()-+\";\\n        for (int i = 0; i < specialCharacters.length(); i++) {\\n            int ascii = specialCharacters.charAt(i);\\n            intAscii.add(ascii);\\n        }\\n        \\n        if(password.length() < 8){\\n            return false;\\n        }\\n        boolean small = false;\\n        boolean large = false;\\n        boolean numbers = false;\\n        boolean specialChars = false;\\n        for(int i = 0 ; i < password.length() ; i++){\\n            int ascii = (int)(password.charAt(i));\\n            if(ascii <= 90 && ascii>=65){\\n                large = true;\\n            }\\n                if(ascii <= 122 && ascii>=97){\\n                small = true;\\n            }\\n            if(ascii <=57 && ascii >=48){\\n                numbers = true;\\n            }\\n            if(intAscii.contains(ascii)){\\n                specialChars = true;\\n            }\\n            if(i> 0 && password.charAt(i)== password.charAt(i-1)){\\n                return false;\\n            }\\n        }\\n        if(large == false || small == false || numbers == false || specialChars ==false){\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2139117,
                "title": "python-easy-understanding",
                "content": "![image](https://assets.leetcode.com/users/images/678fa24c-665f-4763-8b50-08d6dd601335_1654976709.2076209.jpeg)\\n\\n```\\nclass Solution(object):\\n    def strongPasswordCheckerII(self, password):\\n        \"\"\"\\n        :type password: str\\n        :rtype: bool\\n        \"\"\"\\n        n = len(password)\\n        hasLower = False\\n        hasUpper = False\\n        hasDigit = False\\n        specialChar = False\\n        spcl_char= \"!@#$%^&*()-+\"\\n        for i in range(n):\\n            if password[i].islower():\\n                hasLower = True\\n            if password[i].isupper():\\n                hasUpper = True\\n            if password[i].isdigit():\\n                hasDigit = True\\n            if password[i] in spcl_char:\\n                specialChar = True\\n        for i in range(1,n):\\n            if(password[i-1]==password[i]):\\n                return False\\n            \\n        if (hasLower and hasUpper and hasDigit and specialChar and n >= 8):\\n            return True\\n        else:\\n            return False\\n```\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def strongPasswordCheckerII(self, password):\\n        \"\"\"\\n        :type password: str\\n        :rtype: bool\\n        \"\"\"\\n        n = len(password)\\n        hasLower = False\\n        hasUpper = False\\n        hasDigit = False\\n        specialChar = False\\n        spcl_char= \"!@#$%^&*()-+\"\\n        for i in range(n):\\n            if password[i].islower():\\n                hasLower = True\\n            if password[i].isupper():\\n                hasUpper = True\\n            if password[i].isdigit():\\n                hasDigit = True\\n            if password[i] in spcl_char:\\n                specialChar = True\\n        for i in range(1,n):\\n            if(password[i-1]==password[i]):\\n                return False\\n            \\n        if (hasLower and hasUpper and hasDigit and specialChar and n >= 8):\\n            return True\\n        else:\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2411304,
                "title": "python-easy-solution",
                "content": "```\\ndef strongPasswordCheckerII(self, password: str) -> bool:\\n        if len(password) < 8:\\n            return False\\n        lowercase, uppercase, digit, special = False, False, False, False\\n        special_char = \"!@#$%^&*()-+\"\\n        for i in range(len(password)):\\n            if i != len(password)-1 and password[i] == password[i+1]: \\n                # checking for same character in adjacent positions\\n                return False\\n            # not lowercase because we have to search for at least one lowercase letter only.\\n            if not lowercase: \\n                lowercase = password[i].islower()\\n            if not uppercase:\\n                uppercase = password[i].isupper()\\n            if not digit:\\n                digit = password[i].isdigit()\\n            if not special:\\n                special = password[i] in special_char\\n        return lowercase and uppercase and digit and special\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef strongPasswordCheckerII(self, password: str) -> bool:\\n        if len(password) < 8:\\n            return False\\n        lowercase, uppercase, digit, special = False, False, False, False\\n        special_char = \"!@#$%^&*()-+\"\\n        for i in range(len(password)):\\n            if i != len(password)-1 and password[i] == password[i+1]: \\n                # checking for same character in adjacent positions\\n                return False\\n            # not lowercase because we have to search for at least one lowercase letter only.\\n            if not lowercase: \\n                lowercase = password[i].islower()\\n            if not uppercase:\\n                uppercase = password[i].isupper()\\n            if not digit:\\n                digit = password[i].isdigit()\\n            if not special:\\n                special = password[i] in special_char\\n        return lowercase and uppercase and digit and special\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2141595,
                "title": "c-simple-and-unique-approach-efficient-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string pwd) \\n    {\\n        int lower=0, upper=0, digit=0, special=0;\\n        \\n        for(int i=0; i<pwd.length(); i++)\\n        {\\n            if(i>0 && pwd[i]==pwd[i-1])  return false; //check pwd contains same char in adjacent\\n            \\n            if(islower(pwd[i])) lower=1; //check pwd contains lowercase letter\\n            \\n            else if(isupper(pwd[i])) upper=1; //check pwd contains uppercase letter\\n            \\n            else if(isdigit(pwd[i])) digit=1; //check pwd contains digit\\n            \\n            else special=1; //check pwd contains special characters\\n        }\\n        \\n        return (pwd.length()>7 && lower && upper && digit && special); \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string pwd) \\n    {\\n        int lower=0, upper=0, digit=0, special=0;\\n        \\n        for(int i=0; i<pwd.length(); i++)\\n        {\\n            if(i>0 && pwd[i]==pwd[i-1])  return false; //check pwd contains same char in adjacent\\n            \\n            if(islower(pwd[i])) lower=1; //check pwd contains lowercase letter\\n            \\n            else if(isupper(pwd[i])) upper=1; //check pwd contains uppercase letter\\n            \\n            else if(isdigit(pwd[i])) digit=1; //check pwd contains digit\\n            \\n            else special=1; //check pwd contains special characters\\n        }\\n        \\n        return (pwd.length()>7 && lower && upper && digit && special); \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2139347,
                "title": "python-java-c-c-javascript-php-regex",
                "content": "### Just for fun ( \\u02C6_\\u02C6 ) \\u2013 [don\\'t do regex](https://softwareengineering.stackexchange.com/questions/113237/when-you-should-not-use-regular-expressions) for interviews! \\n\\n1. Hyphen or minus sign `-` has to be placed at the end or at the begining of the character class (`[]`), for special chars (i.e., `[!@#$%^&*()+-]` or `[-!@#$%^&*()+]`). Otherwise, `[!@#$%^&*()-+]` will not work, because `-` in the middle is a reserved meta char for ranges (i.e., `[d-y]`).\\n\\n### First readable version\\n\\n```\\n^ # start\\n(?!.*([0-9])\\\\1) # 2 same consecutive digits not allowed\\n(?!.*([a-z])\\\\2) # 2 same consecutive lowercase letters not allowed\\n(?!.*([A-Z])\\\\3) # 2 same consecutive uppercase letters not allowed\\n(?!.*([!@#$%^&*()+-])\\\\4) # 2 same consecutive special chars not allowed\\n(?=.*[a-z])\\\\ # must have at least one lowercase letter\\n(?=.*[A-Z])\\\\ # must have at least one uppercase letter\\n(?=.*[0-9])\\\\ # must have at least one digit\\n(?=.*[!@#$%^&*()+-])  # must have at least one special char\\n[A-Za-z0-9!@#$%^&*()+-]{8,} # allowed chars \\u2013 8 or more times (using {8,})\\n$ # end\\n\\n```\\n\\n2. We can further simplify that to:\\n\\n```\\n^ # start\\n(?!.*(.)\\\\1) # 2 same consecutive chars not allowed\\n(?=.*[a-z])\\\\ # must have at least one lowercase letter\\n(?=.*[A-Z])\\\\ # must have at least one uppercase letter\\n(?=.*[0-9])\\\\ # must have at least one digit\\n(?=.*[!@#$%^&*()+-])  # must have at least one special char\\n.{8,} # any char \\u2013 8 or more times (using {8,})\\n$ # end\\n\\n```\\n\\n\\n### Python:\\n\\n```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password):\\n        return re.match(r\\'^(?!.*(.)\\\\1)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()+-]).{8,}$\\', password)\\n```\\n\\n### Java:\\n\\n```\\nimport java.util.regex.Matcher;\\nimport java.util.regex.Pattern;\\n\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        final String regex = \"^(?!.*(.)\\\\\\\\1)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()+-]).{8,}$\";\\n        final Pattern pattern = Pattern.compile(regex);\\n        final Matcher matcher = pattern.matcher(password);\\n        return matcher.find();\\n    }\\n}\\n```\\n\\n### C#\\n\\n```\\nusing System.Text.RegularExpressions;\\n\\npublic class Solution {\\n    public bool StrongPasswordCheckerII(string password) {\\n        string pattern = @\"^(?!.*(.)\\\\1)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()+-]).{8,}$\";\\n        \\n        return Regex.Match(password, pattern).Success;\\n    }\\n}\\n```\\n\\n### C++:\\n\\n```\\n#include <regex>\\n\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        string pattern = \"^(?!.*(.)\\\\\\\\1)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()+-]).{8,}$\";\\n        return regex_match (password, regex(pattern));\\n    }\\n};\\n```\\n\\n### JavaScript:\\n\\n```\\nconst strongPasswordCheckerII = function(password) {\\n  const regex = new RegExp(\"^(?!.*(.)\\\\\\\\1)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()+-]).{8,}$\", \\'g\\')\\n  return regex.exec(password) !== null\\n};\\n```\\n\\n### PHP:\\n\\n```\\nclass Solution {\\n\\n    /**\\n     * @param String $password\\n     * @return Boolean\\n     */\\n    function strongPasswordCheckerII($password) {\\n        $re = \\'/^(?!.*(.)\\\\1)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()+-]).{8,}$/s\\';\\n\\n        return preg_match($re, $password);\\n    }\\n}\\n```\\n\\n### TypeScript\\n\\n```\\nfunction strongPasswordCheckerII(password: string): boolean {\\n  const regex = new RegExp(\"^(?!.*(.)\\\\\\\\1)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()+-]).{8,}$\", \\'g\\')\\n  return regex.exec(password) !== null\\n};\\n\\n```\\n\\n### RegEx Visualizer\\n\\n[jex.im](https://jex.im/regulex/#!flags=&re=%5E(a%7Cb)*%3F%24) visualizes regular expressions:\\n\\n\\n![image](https://assets.leetcode.com/users/images/2cc0463f-52fa-43d5-873f-c0701070c242_1655070921.6220026.png)\\n\\n\\n\\n---------\\n\\nIf you wish to simplify/update/explore the expression, it\\'s been explained on the top right panel of [regex101.com](https://regex101.com/r/1Lvfla/1/). You can watch the matching steps or modify them in [this debugger link](https://regex101.com/r/1Lvfla/1/debugger), if you\\'d be interested. The debugger demonstrates that how [a RegEx engine](https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines) might step by step consume some sample input strings and would perform the matching process.\\n\\n---------",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Python3",
                    "C",
                    "JavaScript",
                    "PHP",
                    "TypeScript"
                ],
                "code": "```\\n^ # start\\n(?!.*([0-9])\\\\1) # 2 same consecutive digits not allowed\\n(?!.*([a-z])\\\\2) # 2 same consecutive lowercase letters not allowed\\n(?!.*([A-Z])\\\\3) # 2 same consecutive uppercase letters not allowed\\n(?!.*([!@#$%^&*()+-])\\\\4) # 2 same consecutive special chars not allowed\\n(?=.*[a-z])\\\\ # must have at least one lowercase letter\\n(?=.*[A-Z])\\\\ # must have at least one uppercase letter\\n(?=.*[0-9])\\\\ # must have at least one digit\\n(?=.*[!@#$%^&*()+-])  # must have at least one special char\\n[A-Za-z0-9!@#$%^&*()+-]{8,} # allowed chars \\u2013 8 or more times (using {8,})\\n$ # end\\n\\n```\n```\\n^ # start\\n(?!.*(.)\\\\1) # 2 same consecutive chars not allowed\\n(?=.*[a-z])\\\\ # must have at least one lowercase letter\\n(?=.*[A-Z])\\\\ # must have at least one uppercase letter\\n(?=.*[0-9])\\\\ # must have at least one digit\\n(?=.*[!@#$%^&*()+-])  # must have at least one special char\\n.{8,} # any char \\u2013 8 or more times (using {8,})\\n$ # end\\n\\n```\n```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password):\\n        return re.match(r\\'^(?!.*(.)\\\\1)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()+-]).{8,}$\\', password)\\n```\n```\\nimport java.util.regex.Matcher;\\nimport java.util.regex.Pattern;\\n\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        final String regex = \"^(?!.*(.)\\\\\\\\1)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()+-]).{8,}$\";\\n        final Pattern pattern = Pattern.compile(regex);\\n        final Matcher matcher = pattern.matcher(password);\\n        return matcher.find();\\n    }\\n}\\n```\n```\\nusing System.Text.RegularExpressions;\\n\\npublic class Solution {\\n    public bool StrongPasswordCheckerII(string password) {\\n        string pattern = @\"^(?!.*(.)\\\\1)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()+-]).{8,}$\";\\n        \\n        return Regex.Match(password, pattern).Success;\\n    }\\n}\\n```\n```\\n#include <regex>\\n\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        string pattern = \"^(?!.*(.)\\\\\\\\1)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()+-]).{8,}$\";\\n        return regex_match (password, regex(pattern));\\n    }\\n};\\n```\n```\\nconst strongPasswordCheckerII = function(password) {\\n  const regex = new RegExp(\"^(?!.*(.)\\\\\\\\1)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()+-]).{8,}$\", \\'g\\')\\n  return regex.exec(password) !== null\\n};\\n```\n```\\nclass Solution {\\n\\n    /**\\n     * @param String $password\\n     * @return Boolean\\n     */\\n    function strongPasswordCheckerII($password) {\\n        $re = \\'/^(?!.*(.)\\\\1)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()+-]).{8,}$/s\\';\\n\\n        return preg_match($re, $password);\\n    }\\n}\\n```\n```\\nfunction strongPasswordCheckerII(password: string): boolean {\\n  const regex = new RegExp(\"^(?!.*(.)\\\\\\\\1)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()+-]).{8,}$\", \\'g\\')\\n  return regex.exec(password) !== null\\n};\\n\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2159268,
                "title": "easy-python-solution-using-count-approach",
                "content": "```\\ndef strongPasswordCheckerII(self, password: str) -> bool:\\n        u,l,d,s=0,0,0,0\\n        if len(password)<8: return False\\n        for i in range(0,len(password)):\\n            if i>0 and password[i-1]==password[i]: return False\\n            if password[i].isdigit(): d+=1\\n            elif password[i].islower(): l+=1\\n            elif password[i].isupper(): u+=1\\n            elif password[i] in \"!@#$%^&*()-+\": s+=1\\n        if u!=0 and l!=0 and d!=0 and s!=0: return True\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef strongPasswordCheckerII(self, password: str) -> bool:\\n        u,l,d,s=0,0,0,0\\n        if len(password)<8: return False\\n        for i in range(0,len(password)):\\n            if i>0 and password[i-1]==password[i]: return False\\n            if password[i].isdigit(): d+=1\\n            elif password[i].islower(): l+=1\\n            elif password[i].isupper(): u+=1\\n            elif password[i] in \"!@#$%^&*()-+\": s+=1\\n        if u!=0 and l!=0 and d!=0 and s!=0: return True\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2138798,
                "title": "c-easy-o-n-solution",
                "content": "**Code:** \\n\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n\\t\\tif(password.size() < 8) //8 char length\\n            return false;\\n\\t\\t\\t\\n        bool lower = 0, upper = 0;\\n        bool digit = 0, special = 0;\\n\\t\\t\\n        for(int i=0; i<password.size(); i++){ //check rest conditions\\n            if(i>0 && password[i] == password[i-1])   //check duplicate\\n\\t\\t\\t\\treturn false; \\n             \\n\\t\\t\\tif(password[i] >=65 && password[i] <=90)  upper = 1;  //uppercase\\n\\t\\t\\telse if(password[i] >=97 && password[i] <=122)   lower = 1;   //lowercase\\n\\t\\t\\telse if(password[i] >=48 && password[i] <=57)       digit = 1;   //digit\\n\\t\\t\\telse     //special char\\n                special = 1;\\n        }\\n        \\n        if(upper && lower && digit && special)\\n            return true;\\n        return false;\\n    }\\n};\\n```\\n\\n\\n\\n**Please do upvote if you like the solution:)**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n\\t\\tif(password.size() < 8) //8 char length\\n            return false;\\n\\t\\t\\t\\n        bool lower = 0, upper = 0;\\n        bool digit = 0, special = 0;\\n\\t\\t\\n        for(int i=0; i<password.size(); i++){ //check rest conditions\\n            if(i>0 && password[i] == password[i-1])   //check duplicate\\n\\t\\t\\t\\treturn false; \\n             \\n\\t\\t\\tif(password[i] >=65 && password[i] <=90)  upper = 1;  //uppercase\\n\\t\\t\\telse if(password[i] >=97 && password[i] <=122)   lower = 1;   //lowercase\\n\\t\\t\\telse if(password[i] >=48 && password[i] <=57)       digit = 1;   //digit\\n\\t\\t\\telse     //special char\\n                special = 1;\\n        }\\n        \\n        if(upper && lower && digit && special)\\n            return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3063976,
                "title": "easy-java-solution-with-comment-lines-beats-100",
                "content": "Upvote if you like it\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        boolean isUppercase=false;\\n        boolean isLowercase=false;\\n        boolean isSpecialChar=false;\\n        boolean isDigit=false;\\n        //Check for the password length\\n        if(password.length()>=8)\\n        {\\n            for(int i=0;i<password.length();i++)\\n            {\\n                char ch=password.charAt(i);\\n                //This part will check whether if there are adjacent character or not\\n                if((i<password.length()-1) && ch==password.charAt(i+1))\\n                {\\n                    return false;\\n                }\\n                //Check for presence of upper case\\n                if(ch>=65 && ch<=90)\\n                {\\n                    isUppercase=true;\\n                }\\n                //Check for presence of lower case\\n                else if(ch>=97 && ch<=122)\\n                {\\n                    isLowercase=true;\\n                }\\n                //Check for presence of digits\\n                else if(ch>=48 && ch<=57)\\n                {\\n                    isDigit=true;\\n                }\\n                //Check for presence of special characters\\n                else\\n                {\\n                    isSpecialChar=true;\\n                }\\n            }\\n        }\\n        if(isUppercase==true && isLowercase==true && isDigit==true && isSpecialChar==true)\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        boolean isUppercase=false;\\n        boolean isLowercase=false;\\n        boolean isSpecialChar=false;\\n        boolean isDigit=false;\\n        //Check for the password length\\n        if(password.length()>=8)\\n        {\\n            for(int i=0;i<password.length();i++)\\n            {\\n                char ch=password.charAt(i);\\n                //This part will check whether if there are adjacent character or not\\n                if((i<password.length()-1) && ch==password.charAt(i+1))\\n                {\\n                    return false;\\n                }\\n                //Check for presence of upper case\\n                if(ch>=65 && ch<=90)\\n                {\\n                    isUppercase=true;\\n                }\\n                //Check for presence of lower case\\n                else if(ch>=97 && ch<=122)\\n                {\\n                    isLowercase=true;\\n                }\\n                //Check for presence of digits\\n                else if(ch>=48 && ch<=57)\\n                {\\n                    isDigit=true;\\n                }\\n                //Check for presence of special characters\\n                else\\n                {\\n                    isSpecialChar=true;\\n                }\\n            }\\n        }\\n        if(isUppercase==true && isLowercase==true && isDigit==true && isSpecialChar==true)\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2141912,
                "title": "java-simple-ascii",
                "content": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        String special = \"!@#$%^&*()-+\";\\n        if(password.length()>=8){\\n            int c1=0,c2=0,c3 =0,c4=0;\\n            for (int i = 0; i <password.length()-1 ; i++) {\\n                if(password.charAt(i)==password.charAt(i+1)){\\n                    return false;\\n\\n                }\\n            }\\n            for (int i = 0; i < password.length(); i++) {\\n\\n                if(password.charAt(i)>= \\'A\\' && password.charAt(i)<=\\'Z\\'){\\n                    c1++;\\n                }\\n                if(password.charAt(i)>= \\'a\\' && password.charAt(i)<=\\'z\\'){\\n                    c2++;\\n                }\\n                if(password.charAt(i)>= \\'0\\' && password.charAt(i)<=\\'9\\'){\\n                    c3++;\\n                }\\n                for (int j = 0; j < special.length(); j++) {\\n                    if(password.charAt(i)==special.charAt(j)){\\n                        c4++;\\n                    }\\n                }\\n                \\n                if(c1>0&&c2>0&&c3>0&&c4>0){\\n                        return true;\\n                }\\n\\n            }\\n\\n        }\\n        return false;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        String special = \"!@#$%^&*()-+\";\\n        if(password.length()>=8){\\n            int c1=0,c2=0,c3 =0,c4=0;\\n            for (int i = 0; i <password.length()-1 ; i++) {\\n                if(password.charAt(i)==password.charAt(i+1)){\\n                    return false;\\n\\n                }\\n            }\\n            for (int i = 0; i < password.length(); i++) {\\n\\n                if(password.charAt(i)>= \\'A\\' && password.charAt(i)<=\\'Z\\'){\\n                    c1++;\\n                }\\n                if(password.charAt(i)>= \\'a\\' && password.charAt(i)<=\\'z\\'){\\n                    c2++;\\n                }\\n                if(password.charAt(i)>= \\'0\\' && password.charAt(i)<=\\'9\\'){\\n                    c3++;\\n                }\\n                for (int j = 0; j < special.length(); j++) {\\n                    if(password.charAt(i)==special.charAt(j)){\\n                        c4++;\\n                    }\\n                }\\n                \\n                if(c1>0&&c2>0&&c3>0&&c4>0){\\n                        return true;\\n                }\\n\\n            }\\n\\n        }\\n        return false;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2138858,
                "title": "java-easy-o-1-space-and-o-n-time-complexity",
                "content": "```\\nclass Solution {\\n    //lc-> LowerCase;\\n\\t//uc-> UpperCase;\\n\\t//d-> Digit;\\n\\t//sc-> Special Case;\\n\\t\\n    public boolean strongPasswordCheckerII(String password) {\\n        if(password.length()<8)return false;\\n        boolean res=false;\\n        \\n        boolean lc=false;\\n        boolean uc=false;\\n        boolean d=false;\\n        boolean sc=false;\\n        \\n        for(int i=0;i<password.length();i++){\\n            char ch=password.charAt(i);\\n            if(i>0 && ch==password.charAt(i-1))return false;\\n            \\n            if(ch>=\\'0\\' && ch<=\\'9\\')d=true;\\n            if(ch>=\\'a\\' && ch<=\\'z\\')lc=true;\\n            if(ch>=\\'A\\' && ch<=\\'Z\\')uc=true;\\n            if(ch==\\'!\\'||ch==\\'@\\'||ch==\\'#\\'||ch==\\'$\\'||ch==\\'%\\'||ch==\\'^\\'||ch==\\'&\\'||ch==\\'*\\'||ch==\\'(\\'||ch==\\')\\'||ch==\\'-\\'||ch==\\'+\\')sc=true;\\n            \\n        }\\n        \\n\\t\\t//or you can do this way\\n\\t\\t//if(lc==true && uc==true && sc==true && d==true)return true;\\n\\t\\t//else false;\\n\\t\\t\\n        res=lc&uc&d&sc;\\n        return res;\\n    }\\n}\\n```\\n\\n\\n**Time Complexity - O(n)\\nSpace Complexity - O(1)**\\n\\n**Connect with me -** https://www.linkedin.com/in/himanshusharma2024/\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    //lc-> LowerCase;\\n\\t//uc-> UpperCase;\\n\\t//d-> Digit;\\n\\t//sc-> Special Case;\\n\\t\\n    public boolean strongPasswordCheckerII(String password) {\\n        if(password.length()<8)return false;\\n        boolean res=false;\\n        \\n        boolean lc=false;\\n        boolean uc=false;\\n        boolean d=false;\\n        boolean sc=false;\\n        \\n        for(int i=0;i<password.length();i++){\\n            char ch=password.charAt(i);\\n            if(i>0 && ch==password.charAt(i-1))return false;\\n            \\n            if(ch>=\\'0\\' && ch<=\\'9\\')d=true;\\n            if(ch>=\\'a\\' && ch<=\\'z\\')lc=true;\\n            if(ch>=\\'A\\' && ch<=\\'Z\\')uc=true;\\n            if(ch==\\'!\\'||ch==\\'@\\'||ch==\\'#\\'||ch==\\'$\\'||ch==\\'%\\'||ch==\\'^\\'||ch==\\'&\\'||ch==\\'*\\'||ch==\\'(\\'||ch==\\')\\'||ch==\\'-\\'||ch==\\'+\\')sc=true;\\n            \\n        }\\n        \\n\\t\\t//or you can do this way\\n\\t\\t//if(lc==true && uc==true && sc==true && d==true)return true;\\n\\t\\t//else false;\\n\\t\\t\\n        res=lc&uc&d&sc;\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2138788,
                "title": "strong-password-checker-ii-java-solution",
                "content": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if(password.length() < 8)\\n            return false;\\n        boolean lowercase=false,uppercase=false,digit=false,special=false;\\n        for(int i=0;i<password.length();i++)\\n        {\\n            char ch=password.charAt(i);\\n            if(Character.isDigit(ch))\\n                digit=true;\\n            else if(Character.isLetter(ch))\\n            {\\n                if(Character.isUpperCase(ch))\\n                    uppercase=true;\\n                else\\n                    lowercase=true;\\n            }\\n            else if(ch==\\'!\\' ||ch==\\'@\\' || ch==\\'#\\' || ch==\\'$\\' ||ch==\\'%\\' || ch==\\'^\\' || ch==\\'&\\' ||ch==\\'*\\' || ch==\\'(\\' ||ch==\\')\\' ||ch==\\'-\\' || ch==\\'+\\')\\n                special=true;\\n        }\\n        if(lowercase==false || uppercase==false || digit==false || special==false)\\n            return false;\\n        for(int i=1;i<password.length();i++)\\n        {\\n            if(password.charAt(i)==password.charAt(i-1))\\n                return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if(password.length() < 8)\\n            return false;\\n        boolean lowercase=false,uppercase=false,digit=false,special=false;\\n        for(int i=0;i<password.length();i++)\\n        {\\n            char ch=password.charAt(i);\\n            if(Character.isDigit(ch))\\n                digit=true;\\n            else if(Character.isLetter(ch))\\n            {\\n                if(Character.isUpperCase(ch))\\n                    uppercase=true;\\n                else\\n                    lowercase=true;\\n            }\\n            else if(ch==\\'!\\' ||ch==\\'@\\' || ch==\\'#\\' || ch==\\'$\\' ||ch==\\'%\\' || ch==\\'^\\' || ch==\\'&\\' ||ch==\\'*\\' || ch==\\'(\\' ||ch==\\')\\' ||ch==\\'-\\' || ch==\\'+\\')\\n                special=true;\\n        }\\n        if(lowercase==false || uppercase==false || digit==false || special==false)\\n            return false;\\n        for(int i=1;i<password.length();i++)\\n        {\\n            if(password.charAt(i)==password.charAt(i-1))\\n                return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3112980,
                "title": "one-liner-js-regex-solution",
                "content": "# Code\\n```\\nvar strongPasswordCheckerII = function(password) {\\n    const regex = /^(?=.*[0-9])(?!.*(.)\\\\1+)(?=.*[!-\\\\/:-@[-`{-~])(?=.*[A-Z])(?=.*[a-z])[a-zA-Z\\\\d!-\\\\/:-@[-`{-~]{8,}/g\\n    return regex.test(password)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar strongPasswordCheckerII = function(password) {\\n    const regex = /^(?=.*[0-9])(?!.*(.)\\\\1+)(?=.*[!-\\\\/:-@[-`{-~])(?=.*[A-Z])(?=.*[a-z])[a-zA-Z\\\\d!-\\\\/:-@[-`{-~]{8,}/g\\n    return regex.test(password)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2457562,
                "title": "go-solution",
                "content": "```\\nfunc strongPasswordCheckerII(password string) bool {\\n    if len(password) < 8 {\\n        return false\\n    }\\n    \\n    hasLower, hasUpper, hasDigit, hasSpecial := false, false, false, false\\n    \\n    for i := 0; i < len(password); i++ {\\n        if i > 0 && password[i] == password[i-1] {\\n            return false\\n        }\\n        \\n        if password[i] >= \\'a\\' && password[i] <= \\'z\\' {\\n            hasLower = true\\n        }\\n        \\n        if password[i] >= \\'A\\' && password[i] <= \\'Z\\' {\\n            hasUpper = true\\n        }\\n        \\n        if password[i] >= \\'0\\' && password[i] <= \\'9\\' {\\n            hasDigit = true\\n        }\\n        \\n        if password[i] == \\'!\\' || password[i] == \\'@\\' || password[i] == \\'#\\' ||\\n        password[i] == \\'$\\' || password[i] == \\'%\\' || password[i] == \\'^\\' || password[i] == \\'&\\' || password[i] == \\'*\\' ||\\n        password[i] == \\'(\\' || password[i] == \\')\\' || password[i] == \\'-\\' || password[i] == \\'+\\' {\\n            hasSpecial = true\\n        }\\n    }\\n    \\n    return hasLower && hasUpper && hasDigit && hasSpecial\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc strongPasswordCheckerII(password string) bool {\\n    if len(password) < 8 {\\n        return false\\n    }\\n    \\n    hasLower, hasUpper, hasDigit, hasSpecial := false, false, false, false\\n    \\n    for i := 0; i < len(password); i++ {\\n        if i > 0 && password[i] == password[i-1] {\\n            return false\\n        }\\n        \\n        if password[i] >= \\'a\\' && password[i] <= \\'z\\' {\\n            hasLower = true\\n        }\\n        \\n        if password[i] >= \\'A\\' && password[i] <= \\'Z\\' {\\n            hasUpper = true\\n        }\\n        \\n        if password[i] >= \\'0\\' && password[i] <= \\'9\\' {\\n            hasDigit = true\\n        }\\n        \\n        if password[i] == \\'!\\' || password[i] == \\'@\\' || password[i] == \\'#\\' ||\\n        password[i] == \\'$\\' || password[i] == \\'%\\' || password[i] == \\'^\\' || password[i] == \\'&\\' || password[i] == \\'*\\' ||\\n        password[i] == \\'(\\' || password[i] == \\')\\' || password[i] == \\'-\\' || password[i] == \\'+\\' {\\n            hasSpecial = true\\n        }\\n    }\\n    \\n    return hasLower && hasUpper && hasDigit && hasSpecial\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2139925,
                "title": "c-simple-if-else-ladder-short-understandable",
                "content": "**Please Upvote If It Helps**\\n\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) \\n    {\\n        // It has atleast 8 characters\\n        if(password.length() < 8)\\n            return false;\\n        \\n        bool lower = 0, upper = 0;\\n        bool digit = 0, special = 0;\\n        \\n        // itearte over the given password for check rest of the conditions\\n        for(int i=0;i<password.length();i++)\\n        {\\n            // check duplicate\\n            if(i>0 && password[i]==password[i-1])\\n                return false;\\n            \\n            // lowercase\\n            if(password[i]>=97 && password[i]<=122)\\n                lower = 1;\\n            \\n            // uppercase\\n            else if(password[i]>=65 && password[i]<=90)\\n                upper = 1;\\n            \\n            // digit\\n            else if(password[i]>=48 && password[i]<=57)\\n                digit = 1;\\n            \\n            // special character\\n            else\\n                special = 1;\\n        }\\n        \\n        if(lower && upper && digit && special)\\n            return true;\\n        \\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) \\n    {\\n        // It has atleast 8 characters\\n        if(password.length() < 8)\\n            return false;\\n        \\n        bool lower = 0, upper = 0;\\n        bool digit = 0, special = 0;\\n        \\n        // itearte over the given password for check rest of the conditions\\n        for(int i=0;i<password.length();i++)\\n        {\\n            // check duplicate\\n            if(i>0 && password[i]==password[i-1])\\n                return false;\\n            \\n            // lowercase\\n            if(password[i]>=97 && password[i]<=122)\\n                lower = 1;\\n            \\n            // uppercase\\n            else if(password[i]>=65 && password[i]<=90)\\n                upper = 1;\\n            \\n            // digit\\n            else if(password[i]>=48 && password[i]<=57)\\n                digit = 1;\\n            \\n            // special character\\n            else\\n                special = 1;\\n        }\\n        \\n        if(lower && upper && digit && special)\\n            return true;\\n        \\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2139316,
                "title": "java-ascii-table-easy",
                "content": "```\\n\\n\\n\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if(password.length() < 8){\\n            return false;\\n        }else{\\n            int upper = 0;\\n            int lower = 0;\\n            int number = 0;\\n            int special = 0;\\n            for(int i=0;i<password.length()-1;i++){\\n                if(password.charAt(i) == password.charAt(i+1)){\\n                    return false;\\n                }\\n            }\\n            for(int i=0;i<password.length();i++){\\n                if(password.charAt(i) - \\'0\\' >= 0  && (password.charAt(i) - \\'0\\' <= 9)){\\n                    number++;\\n                }else\\n                if(password.charAt(i) - \\'A\\' >= 0  && password.charAt(i) - \\'A\\' < 26){\\n                    upper++;\\n                }else\\n                if(password.charAt(i) - \\'a\\' >= 0  && password.charAt(i) - \\'a\\' < 26){\\n                    lower++;\\n                }else{\\n                    special++;\\n                }\\n                \\n            }\\n            if(upper == 0   || lower == 0 || number == 0 || special == 0){\\n                return false;\\n            }else{\\n                return true;\\n            }\\n            \\n            \\n        }\\n    }\\n}\\n\\n\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\n\\n\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if(password.length() < 8){\\n            return false;\\n        }else{\\n            int upper = 0;\\n            int lower = 0;\\n            int number = 0;\\n            int special = 0;\\n            for(int i=0;i<password.length()-1;i++){\\n                if(password.charAt(i) == password.charAt(i+1)){\\n                    return false;\\n                }\\n            }\\n            for(int i=0;i<password.length();i++){\\n                if(password.charAt(i) - \\'0\\' >= 0  && (password.charAt(i) - \\'0\\' <= 9)){\\n                    number++;\\n                }else\\n                if(password.charAt(i) - \\'A\\' >= 0  && password.charAt(i) - \\'A\\' < 26){\\n                    upper++;\\n                }else\\n                if(password.charAt(i) - \\'a\\' >= 0  && password.charAt(i) - \\'a\\' < 26){\\n                    lower++;\\n                }else{\\n                    special++;\\n                }\\n                \\n            }\\n            if(upper == 0   || lower == 0 || number == 0 || special == 0){\\n                return false;\\n            }else{\\n                return true;\\n            }\\n            \\n            \\n        }\\n    }\\n}\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2139245,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool c(string s)\\n    {\\n        int count=s.size();\\n        int f1=0;\\n        int f2=0;\\n        int d=0;\\n        int sp=0;\\n        int a=1;\\n        string str=\"!@#$%^&*()-+\";\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]>=\\'A\\'&&s[i]<=\\'Z\\')\\n            {\\n                f1++;\\n            }\\n            if(s[i]>=\\'a\\'&&s[i]<=\\'z\\')\\n            {\\n                f2++;\\n            }\\n            if(s[i]>=\\'0\\'&&s[i]<=\\'9\\')\\n            {\\n                d++;\\n            }\\n            else if(str.find(s[i])!=string::npos)\\n            {\\n                sp++;\\n            }\\n            if(i&&s[i]==s[i-1])\\n            {\\n                a=0;\\n            }\\n        }\\n        return count>=8&&f1&&f2&&d&&sp&&a;\\n    }\\n    bool strongPasswordCheckerII(string p) \\n    {\\n        return c(p);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool c(string s)\\n    {\\n        int count=s.size();\\n        int f1=0;\\n        int f2=0;\\n        int d=0;\\n        int sp=0;\\n        int a=1;\\n        string str=\"!@#$%^&*()-+\";\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]>=\\'A\\'&&s[i]<=\\'Z\\')\\n            {\\n                f1++;\\n            }\\n            if(s[i]>=\\'a\\'&&s[i]<=\\'z\\')\\n            {\\n                f2++;\\n            }\\n            if(s[i]>=\\'0\\'&&s[i]<=\\'9\\')\\n            {\\n                d++;\\n            }\\n            else if(str.find(s[i])!=string::npos)\\n            {\\n                sp++;\\n            }\\n            if(i&&s[i]==s[i-1])\\n            {\\n                a=0;\\n            }\\n        }\\n        return count>=8&&f1&&f2&&d&&sp&&a;\\n    }\\n    bool strongPasswordCheckerII(string p) \\n    {\\n        return c(p);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2139087,
                "title": "c-easy-to-understand",
                "content": "```\\n\\t\\tbool arr[4] = {false};\\n        \\n        if(password.length() < 8){\\n            return false;\\n        }\\n        for(int i=0 ; i<password.length() ; i++){\\n            char ch = password[i];\\n            if(ch >= 65 && ch <= 90)\\n                arr[0] = true;\\n            else if(ch >=97 && ch <= 122)\\n                arr[1] = true;\\n            else if(ch >= 48 && ch <= 57)\\n                arr[2] = true;\\n            else\\n                arr[3] = true;\\n            \\n            if(i+1 <= password.length() && password[i] == password[i+1]){\\n                return false;  \\n            }\\n        }\\n        for (bool cond : arr){\\n            if(cond == false){\\n                return false;\\n            }\\n        }\\n        return true;\\n```\\n\\t\\n\\t",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n\\t\\tbool arr[4] = {false};\\n        \\n        if(password.length() < 8){\\n            return false;\\n        }\\n        for(int i=0 ; i<password.length() ; i++){\\n            char ch = password[i];\\n            if(ch >= 65 && ch <= 90)\\n                arr[0] = true;\\n            else if(ch >=97 && ch <= 122)\\n                arr[1] = true;\\n            else if(ch >= 48 && ch <= 57)\\n                arr[2] = true;\\n            else\\n                arr[3] = true;\\n            \\n            if(i+1 <= password.length() && password[i] == password[i+1]){\\n                return false;  \\n            }\\n        }\\n        for (bool cond : arr){\\n            if(cond == false){\\n                return false;\\n            }\\n        }\\n        return true;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2138967,
                "title": "python-o-n-solution",
                "content": "**Runtime:** 71 ms, faster than 20.00% of Python3 online submissions for Strong Password Checker II.\\n**Memory Usage:** 14 MB, less than 20.00% of Python3 online submissions for Strong Password Checker II.\\n```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        oneUpper, oneLower, oneDigit, oneSpl = False, False, False, False\\n\\n        if len(password) < 8:\\n            return False\\n        for idx, p in enumerate(password):\\n            if p.isupper():\\n                oneUpper = True\\n            if p.islower():\\n                oneLower = True\\n            if p.isdigit():\\n                oneDigit = True\\n            if p in [\\'!\\', \\'@\\', \\'#\\', \\'$\\', \\'%\\', \\'^\\', \\'&\\', \\'*\\', \\'(\\', \\')\\', \\'-\\', \\'+\\']:\\n                oneSpl = True\\n            if idx < len(password) - 1:\\n                if password[idx] == password[idx + 1]:\\n                    return False\\n\\n        return oneUpper and oneSpl and oneDigit and oneLower\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        oneUpper, oneLower, oneDigit, oneSpl = False, False, False, False\\n\\n        if len(password) < 8:\\n            return False\\n        for idx, p in enumerate(password):\\n            if p.isupper():\\n                oneUpper = True\\n            if p.islower():\\n                oneLower = True\\n            if p.isdigit():\\n                oneDigit = True\\n            if p in [\\'!\\', \\'@\\', \\'#\\', \\'$\\', \\'%\\', \\'^\\', \\'&\\', \\'*\\', \\'(\\', \\')\\', \\'-\\', \\'+\\']:\\n                oneSpl = True\\n            if idx < len(password) - 1:\\n                if password[idx] == password[idx + 1]:\\n                    return False\\n\\n        return oneUpper and oneSpl and oneDigit and oneLower\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2138862,
                "title": "c-bruteforce-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    bool l=false,u=false,d=false,s=false;\\n    unordered_map<char,int> mp;\\n    bool strongPasswordCheckerII(string st) {\\n        if(st.length()<8) return false;\\n        for(int i=0;i<st.length();i++)\\n        {\\n            if(mp.find(st[i])!=mp.end()) \\n                if((i-mp[st[i]])==1)\\n                    return false;\\n            mp[st[i]]=i;\\n            if(st[i]>=\\'A\\' && st[i]<=\\'Z\\') u=true;\\n            if(st[i]>=\\'a\\' && st[i]<=\\'z\\') l=true;\\n            if(st[i]>=\\'0\\' && st[i]<=\\'9\\') d=true;\\n            if(st[i]==\\'!\\' || st[i]==\\'@\\' || st[i]==\\'#\\' || st[i]==\\'$\\' || st[i]==\\'%\\' || st[i]==\\'^\\' || st[i]==\\'&\\'|| st[i]==\\'*\\'|| st[i]==\\'(\\' || st[i]==\\')\\' || st[i]==\\'-\\' || st[i]==\\'+\\') s=true;\\n        }\\n        if(l && u && d && s) return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool l=false,u=false,d=false,s=false;\\n    unordered_map<char,int> mp;\\n    bool strongPasswordCheckerII(string st) {\\n        if(st.length()<8) return false;\\n        for(int i=0;i<st.length();i++)\\n        {\\n            if(mp.find(st[i])!=mp.end()) \\n                if((i-mp[st[i]])==1)\\n                    return false;\\n            mp[st[i]]=i;\\n            if(st[i]>=\\'A\\' && st[i]<=\\'Z\\') u=true;\\n            if(st[i]>=\\'a\\' && st[i]<=\\'z\\') l=true;\\n            if(st[i]>=\\'0\\' && st[i]<=\\'9\\') d=true;\\n            if(st[i]==\\'!\\' || st[i]==\\'@\\' || st[i]==\\'#\\' || st[i]==\\'$\\' || st[i]==\\'%\\' || st[i]==\\'^\\' || st[i]==\\'&\\'|| st[i]==\\'*\\'|| st[i]==\\'(\\' || st[i]==\\')\\' || st[i]==\\'-\\' || st[i]==\\'+\\') s=true;\\n        }\\n        if(l && u && d && s) return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2138817,
                "title": "easy-peasy-set-5-variables-c",
                "content": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        int n = password.length();\\n        if(n<8)\\n            return false;\\n        bool haslo = false, hasup = false,hasdi = false,hassp = false,notgood = false;\\n        unordered_set<char> hs{\\'!\\', \\'@\\', \\'#\\',\\'$\\',\\'%\\',\\'^\\',\\'&\\',\\'*\\',\\'(\\',\\')\\',\\'-\\',\\'+\\'};\\n        for(int i=0;i<n;i++){\\n            if(islower(password[i])){\\n                haslo = true;\\n            }\\n            else if(isupper(password[i])){\\n                hasup = true;\\n            }\\n            else if(isdigit(password[i])){\\n                hasdi = true;\\n            }\\n            else if(hs.find(password[i]) != hs.end()){\\n                hassp = true;\\n            }\\n            \\n            if(i>0){\\n                if(password[i] == password[i-1]){\\n                    notgood = true;\\n                    break;\\n                }\\n            }\\n        }\\n        \\n        return !notgood && haslo && hasup && hasdi && hassp;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        int n = password.length();\\n        if(n<8)\\n            return false;\\n        bool haslo = false, hasup = false,hasdi = false,hassp = false,notgood = false;\\n        unordered_set<char> hs{\\'!\\', \\'@\\', \\'#\\',\\'$\\',\\'%\\',\\'^\\',\\'&\\',\\'*\\',\\'(\\',\\')\\',\\'-\\',\\'+\\'};\\n        for(int i=0;i<n;i++){\\n            if(islower(password[i])){\\n                haslo = true;\\n            }\\n            else if(isupper(password[i])){\\n                hasup = true;\\n            }\\n            else if(isdigit(password[i])){\\n                hasdi = true;\\n            }\\n            else if(hs.find(password[i]) != hs.end()){\\n                hassp = true;\\n            }\\n            \\n            if(i>0){\\n                if(password[i] == password[i-1]){\\n                    notgood = true;\\n                    break;\\n                }\\n            }\\n        }\\n        \\n        return !notgood && haslo && hasup && hasdi && hassp;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2940327,
                "title": "fastest-and-easiest-c-solution",
                "content": "\\n# Approach\\nPlease go through the code , it will be crystal clear .\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n       //It has at least 8 characters.\\n       if(password.size()<8) return false;\\n\\n       bool lower=false;\\n       bool upper = false;\\n       bool digit=false;\\n       bool adjacent=true;\\n       bool special = false;\\n\\n       //It contains at least one lowercase letter.\\n       for(int i=0;i<password.size();++i){\\n           if((int)password[i]>=97 && (int)password[i]<=122) {\\n               lower=true;\\n               break;\\n           }\\n       }\\n\\n       //It contains at least one uppercase letter.\\n       for(int i=0;i<password.size();++i){\\n           if((int)password[i]>=65 && (int)password[i]<=90) {\\n               upper=true;\\n               break;\\n           }\\n       }\\n\\n       //It contains at least one digit.\\n       for(int i=0;i<password.size();++i){\\n           if((int)password[i]>=48 && (int)password[i]<=57) {\\n               digit=true;\\n               break;\\n           }\\n       }\\n\\n       //It does not contain 2 of the same character in adjacent positions (i.e., \"aab\" violates this condition, but \"aba\" does not).\\n       for(int i=0;i<password.size()-1;++i){\\n           if(password[i]==password[i+1]) {\\n               adjacent=false;\\n               break;\\n           }\\n       } \\n\\n       // It contains at least one special character. The special characters are the characters in the following string: \"!@#$%^&*()-+\".\\n       for(int i=0;i<password.size();++i){\\n           if(password[i]==\\'!\\') special=true;\\n           if(password[i]==\\'@\\') special=true;\\n           if(password[i]==\\'#\\') special=true;\\n           if(password[i]==\\'!\\') special=true;\\n           if(password[i]==\\'%\\') special=true;\\n           if(password[i]==\\'^\\') special=true;\\n           if(password[i]==\\'&\\') special=true;\\n           if(password[i]==\\'*\\') special=true;\\n           if(password[i]==\\'(\\') special=true;\\n           if(password[i]==\\')\\') special=true;\\n           if(password[i]==\\'-\\') special=true;\\n           if(password[i]==\\'+\\') special=true;\\n       }\\n\\n       \\n       if(lower && upper && digit && special && adjacent) return true;\\n       return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n       //It has at least 8 characters.\\n       if(password.size()<8) return false;\\n\\n       bool lower=false;\\n       bool upper = false;\\n       bool digit=false;\\n       bool adjacent=true;\\n       bool special = false;\\n\\n       //It contains at least one lowercase letter.\\n       for(int i=0;i<password.size();++i){\\n           if((int)password[i]>=97 && (int)password[i]<=122) {\\n               lower=true;\\n               break;\\n           }\\n       }\\n\\n       //It contains at least one uppercase letter.\\n       for(int i=0;i<password.size();++i){\\n           if((int)password[i]>=65 && (int)password[i]<=90) {\\n               upper=true;\\n               break;\\n           }\\n       }\\n\\n       //It contains at least one digit.\\n       for(int i=0;i<password.size();++i){\\n           if((int)password[i]>=48 && (int)password[i]<=57) {\\n               digit=true;\\n               break;\\n           }\\n       }\\n\\n       //It does not contain 2 of the same character in adjacent positions (i.e., \"aab\" violates this condition, but \"aba\" does not).\\n       for(int i=0;i<password.size()-1;++i){\\n           if(password[i]==password[i+1]) {\\n               adjacent=false;\\n               break;\\n           }\\n       } \\n\\n       // It contains at least one special character. The special characters are the characters in the following string: \"!@#$%^&*()-+\".\\n       for(int i=0;i<password.size();++i){\\n           if(password[i]==\\'!\\') special=true;\\n           if(password[i]==\\'@\\') special=true;\\n           if(password[i]==\\'#\\') special=true;\\n           if(password[i]==\\'!\\') special=true;\\n           if(password[i]==\\'%\\') special=true;\\n           if(password[i]==\\'^\\') special=true;\\n           if(password[i]==\\'&\\') special=true;\\n           if(password[i]==\\'*\\') special=true;\\n           if(password[i]==\\'(\\') special=true;\\n           if(password[i]==\\')\\') special=true;\\n           if(password[i]==\\'-\\') special=true;\\n           if(password[i]==\\'+\\') special=true;\\n       }\\n\\n       \\n       if(lower && upper && digit && special && adjacent) return true;\\n       return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2744286,
                "title": "c-easy-short",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string p) {\\n        if(size(p) < 8) return false;\\n        bool low = false , upper = false ,digit = false ,special = false;\\n        for(auto c : p){\\n            if(c>=\\'a\\' and c<=\\'z\\') low = true;\\n            else if(c>=\\'A\\' and c <=\\'Z\\') upper = true;\\n            else if(isdigit(c)) digit = true;\\n            else special = true;\\n        }\\n        for(int i=0;i+1<size(p);i++) if(p[i] == p[i+1]) return false;\\n        if(low and upper and digit and special) return true;\\n        return false;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string p) {\\n        if(size(p) < 8) return false;\\n        bool low = false , upper = false ,digit = false ,special = false;\\n        for(auto c : p){\\n            if(c>=\\'a\\' and c<=\\'z\\') low = true;\\n            else if(c>=\\'A\\' and c <=\\'Z\\') upper = true;\\n            else if(isdigit(c)) digit = true;\\n            else special = true;\\n        }\\n        for(int i=0;i+1<size(p);i++) if(p[i] == p[i+1]) return false;\\n        if(low and upper and digit and special) return true;\\n        return false;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2613340,
                "title": "simple-one-pass-java-solution",
                "content": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) \\n    {\\n        if(password.length() < 8)\\n            return false;\\n        \\n        boolean lowercase = false,uppercase = false,digit = false,special = false,adj = true;\\n        \\n        char c = password.charAt(0);\\n            \\n            if(Character.isLowerCase(c))\\n                lowercase = true;\\n            \\n            if(Character.isUpperCase(c))\\n                uppercase = true;\\n            \\n            if(c > 47 && c < 58)\\n                digit = true;\\n            \\n            if(c == \\'!\\' || c == \\'@\\' || c == \\'#\\' || c == \\'$\\' || c == \\'%\\' || c == \\'^\\' || c == \\'&\\' || c == \\'*\\' || c == \\'(\\' || c == \\')\\' || c == \\'-\\' || c == \\'+\\')\\n                special = true;\\n        \\n        for(int i=1; i<password.length();i++)\\n        {\\n            char ch = password.charAt(i);\\n            \\n            if(Character.isLowerCase(ch))\\n                lowercase = true;\\n            \\n            if(Character.isUpperCase(ch))\\n                uppercase = true;\\n            \\n            if(ch > 47 && ch < 58)\\n                digit = true;\\n            \\n            if(ch == \\'!\\' || ch == \\'@\\' || ch == \\'#\\' || ch == \\'$\\' || ch == \\'%\\' || ch == \\'^\\' || ch == \\'&\\' || ch == \\'*\\' || ch == \\'(\\' || ch == \\')\\' || ch == \\'-\\' || ch == \\'+\\')\\n                special = true;\\n            \\n            if(password.charAt(i-1) == ch)\\n                adj = false;\\n        }\\n        return (lowercase & uppercase & digit & special & adj);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) \\n    {\\n        if(password.length() < 8)\\n            return false;\\n        \\n        boolean lowercase = false,uppercase = false,digit = false,special = false,adj = true;\\n        \\n        char c = password.charAt(0);\\n            \\n            if(Character.isLowerCase(c))\\n                lowercase = true;\\n            \\n            if(Character.isUpperCase(c))\\n                uppercase = true;\\n            \\n            if(c > 47 && c < 58)\\n                digit = true;\\n            \\n            if(c == \\'!\\' || c == \\'@\\' || c == \\'#\\' || c == \\'$\\' || c == \\'%\\' || c == \\'^\\' || c == \\'&\\' || c == \\'*\\' || c == \\'(\\' || c == \\')\\' || c == \\'-\\' || c == \\'+\\')\\n                special = true;\\n        \\n        for(int i=1; i<password.length();i++)\\n        {\\n            char ch = password.charAt(i);\\n            \\n            if(Character.isLowerCase(ch))\\n                lowercase = true;\\n            \\n            if(Character.isUpperCase(ch))\\n                uppercase = true;\\n            \\n            if(ch > 47 && ch < 58)\\n                digit = true;\\n            \\n            if(ch == \\'!\\' || ch == \\'@\\' || ch == \\'#\\' || ch == \\'$\\' || ch == \\'%\\' || ch == \\'^\\' || ch == \\'&\\' || ch == \\'*\\' || ch == \\'(\\' || ch == \\')\\' || ch == \\'-\\' || ch == \\'+\\')\\n                special = true;\\n            \\n            if(password.charAt(i-1) == ch)\\n                adj = false;\\n        }\\n        return (lowercase & uppercase & digit & special & adj);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2512236,
                "title": "java-solution-1ms-runtime-96-74-faster-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String s) {\\n        if (same(s) || s.length() < 8) return false;\\n        boolean[] checker = new boolean[4];\\n        for (char c : s.toCharArray()) {\\n            if (isChecker(checker)) return true;\\n            if (c >= 97 && c <= 122) checker[0] = true;\\n            if (c >= 65 && c <= 90) checker[1] = true;\\n            if (c >= 48 && c <= 57) checker[2] = true;\\n            if (c == \\'!\\' || c == \\'@\\' || c == \\'#\\' || c == \\'$\\' ||\\n                c == \\'%\\' || c == \\'^\\' || c == \\'&\\' || c == \\'*\\' ||\\n                c == \\'(\\' || c == \\')\\' || c == \\'-\\' || c == \\'+\\' ) checker[3] = true;\\n        }\\n        return isChecker(checker);\\n    }\\n\\n    private static boolean isChecker(boolean[] checker) {\\n        for (boolean b : checker) {\\n            if (!b) return false;\\n        }\\n        return true;\\n    }\\n\\n    private static boolean same(String s) {\\n        for (int i = 0; i < s.length() - 1; i++) {\\n            if (s.charAt(i) == s.charAt(i+1)) return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String s) {\\n        if (same(s) || s.length() < 8) return false;\\n        boolean[] checker = new boolean[4];\\n        for (char c : s.toCharArray()) {\\n            if (isChecker(checker)) return true;\\n            if (c >= 97 && c <= 122) checker[0] = true;\\n            if (c >= 65 && c <= 90) checker[1] = true;\\n            if (c >= 48 && c <= 57) checker[2] = true;\\n            if (c == \\'!\\' || c == \\'@\\' || c == \\'#\\' || c == \\'$\\' ||\\n                c == \\'%\\' || c == \\'^\\' || c == \\'&\\' || c == \\'*\\' ||\\n                c == \\'(\\' || c == \\')\\' || c == \\'-\\' || c == \\'+\\' ) checker[3] = true;\\n        }\\n        return isChecker(checker);\\n    }\\n\\n    private static boolean isChecker(boolean[] checker) {\\n        for (boolean b : checker) {\\n            if (!b) return false;\\n        }\\n        return true;\\n    }\\n\\n    private static boolean same(String s) {\\n        for (int i = 0; i < s.length() - 1; i++) {\\n            if (s.charAt(i) == s.charAt(i+1)) return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2371847,
                "title": "easy-java-solution",
                "content": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if(password.length()<8)\\n            return false;\\n        char prev = \\' \\';\\n        boolean lowCheck = false, highCheck = false, digiCheck = false, specCheck = false;\\n        for(char ch:password.toCharArray()){\\n            if(ch==prev)\\n                return false;\\n            else if(!lowCheck && Character.isLowerCase(ch))\\n                lowCheck = true;\\n            else if(!highCheck && Character.isUpperCase(ch))\\n                highCheck = true;\\n            else if(!specCheck && \"!@#$%^&*()-+\".contains(ch+\"\"))\\n                specCheck = true;\\n            else if(!digiCheck && Character.isDigit(ch))\\n                digiCheck = true;\\n            prev = ch;\\n        }\\n        return lowCheck && digiCheck && highCheck && specCheck;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if(password.length()<8)\\n            return false;\\n        char prev = \\' \\';\\n        boolean lowCheck = false, highCheck = false, digiCheck = false, specCheck = false;\\n        for(char ch:password.toCharArray()){\\n            if(ch==prev)\\n                return false;\\n            else if(!lowCheck && Character.isLowerCase(ch))\\n                lowCheck = true;\\n            else if(!highCheck && Character.isUpperCase(ch))\\n                highCheck = true;\\n            else if(!specCheck && \"!@#$%^&*()-+\".contains(ch+\"\"))\\n                specCheck = true;\\n            else if(!digiCheck && Character.isDigit(ch))\\n                digiCheck = true;\\n            prev = ch;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2183796,
                "title": "python-simple-solution",
                "content": "```\\nclass Solution:\\n    def strongPasswordCheckerII(self, ps: str) -> bool:\\n        ln = len(ps) >= 8\\n        lower = False\\n        upper = False\\n        dig = False\\n        spec = False\\n        spec_symb = \"!@#$%^&*()-+\"\\n        not_adj = True\\n        for i in ps:\\n            if i.islower():\\n                lower = True\\n            if i.isupper():\\n                upper = True\\n            if i.isdigit():\\n                dig = True\\n            if i in spec_symb:\\n                spec = True\\n        for i in range(1, len(ps)):\\n            if ps[i] == ps[i-1]:\\n                not_adj = False\\n        return ln == lower == upper == dig == spec == not_adj\\n            \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def strongPasswordCheckerII(self, ps: str) -> bool:\\n        ln = len(ps) >= 8\\n        lower = False\\n        upper = False\\n        dig = False\\n        spec = False\\n        spec_symb = \"!@#$%^&*()-+\"\\n        not_adj = True\\n        for i in ps:\\n            if i.islower():\\n                lower = True\\n            if i.isupper():\\n                upper = True\\n            if i.isdigit():\\n                dig = True\\n            if i in spec_symb:\\n                spec = True\\n        for i in range(1, len(ps)):\\n            if ps[i] == ps[i-1]:\\n                not_adj = False\\n        return ln == lower == upper == dig == spec == not_adj\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2163037,
                "title": "100-faster-c-code-with-detailed-explanation",
                "content": "Explanation\\n-\\nSimply brute force the questions, while checking each character, put the if conditions accordingly to check for lower case, upper case, special characters, adjacent characters, numbers and size of string.\\n\\n**Code:**\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        int n=password.length();\\n        bool upper=false, lower=false, digit=false, special=false, adj=false;\\n        if(n<8) return false;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(password[i]==\\'!\\' || password[i]==\\'@\\' || password[i]==\\'#\\' || password[i]==\\'$\\' || password[i]==\\'%\\' || password[i]==\\'^\\' || password[i]==\\'&\\' || password[i]==\\'*\\' || password[i]==\\'(\\' || password[i]==\\')\\' || password[i]==\\'-\\' || password[i]==\\'+\\') special=true;\\n            \\n            else if(isupper(password[i])) upper=true;\\n            else if(islower(password[i])) lower=true;\\n            else if(isdigit(password[i])) digit=true;\\n            if(i!=n-1) \\n            {\\n                if(password[i]==password[i+1]) adj=true;\\n            }\\n        }\\n        if(upper==true && lower==true && digit==true && special==true && adj==false) return true;\\n        return false;\\n    }\\n};\\n```\\n\\n**Do upvote if you understood!!**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        int n=password.length();\\n        bool upper=false, lower=false, digit=false, special=false, adj=false;\\n        if(n<8) return false;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(password[i]==\\'!\\' || password[i]==\\'@\\' || password[i]==\\'#\\' || password[i]==\\'$\\' || password[i]==\\'%\\' || password[i]==\\'^\\' || password[i]==\\'&\\' || password[i]==\\'*\\' || password[i]==\\'(\\' || password[i]==\\')\\' || password[i]==\\'-\\' || password[i]==\\'+\\') special=true;\\n            \\n            else if(isupper(password[i])) upper=true;\\n            else if(islower(password[i])) lower=true;\\n            else if(isdigit(password[i])) digit=true;\\n            if(i!=n-1) \\n            {\\n                if(password[i]==password[i+1]) adj=true;\\n            }\\n        }\\n        if(upper==true && lower==true && digit==true && special==true && adj==false) return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2157585,
                "title": "python-regex-easy-to-understand",
                "content": "bool(re.search(r\"(.)\\\\1+\", s)) --> backreference in regex to check if two adjacent chars are equal or not.\\n```\\nimport re\\nclass Solution:\\n    def strongPasswordCheckerII(self, s: str) -> bool:\\n        \\n        if len(s)<8:\\n            return False\\n        \\n        if (bool(re.search(r\\'[a-z]\\',s)) and \\n            bool(re.search(r\\'[A-Z]\\',s)) and \\n            bool(re.search(r\\'[0-9]\\',s)) and \\n            bool(re.search(r\\'[^a-zA-Z0-9]\\',s))  and \\n            not bool(re.search(r\"(.)\\\\1+\", s))):\\n            return True\\n        return False\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nimport re\\nclass Solution:\\n    def strongPasswordCheckerII(self, s: str) -> bool:\\n        \\n        if len(s)<8:\\n            return False\\n        \\n        if (bool(re.search(r\\'[a-z]\\',s)) and \\n            bool(re.search(r\\'[A-Z]\\',s)) and \\n            bool(re.search(r\\'[0-9]\\',s)) and \\n            bool(re.search(r\\'[^a-zA-Z0-9]\\',s))  and \\n            not bool(re.search(r\"(.)\\\\1+\", s))):\\n            return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2149079,
                "title": "kotlin-one-pass",
                "content": "```\\nclass Solution {\\n    fun strongPasswordCheckerII(password: String): Boolean {\\n        if (password.length < 8) return false\\n        \\n        var lowerCase = password[0].isLowerCase()\\n        var upperCase = password[0].isUpperCase()\\n        var digit = password[0].isDigit()\\n        val specialChars = \"!@#$%^&*()-+\".toSet()\\n        var special = password[0] in specialChars\\n        var pre = password[0]\\n        \\n        for (c in password.substring(1)) {\\n            when {\\n                c == pre -> return false\\n                c.isLowerCase() -> lowerCase = true\\n                c.isUpperCase() -> upperCase = true\\n                c.isDigit() -> digit = true\\n                c in specialChars -> special = true\\n            }\\n            pre = c\\n        }\\n        return lowerCase && upperCase && digit && special\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun strongPasswordCheckerII(password: String): Boolean {\\n        if (password.length < 8) return false\\n        \\n        var lowerCase = password[0].isLowerCase()\\n        var upperCase = password[0].isUpperCase()\\n        var digit = password[0].isDigit()\\n        val specialChars = \"!@#$%^&*()-+\".toSet()\\n        var special = password[0] in specialChars\\n        var pre = password[0]\\n        \\n        for (c in password.substring(1)) {\\n            when {\\n                c == pre -> return false\\n                c.isLowerCase() -> lowerCase = true\\n                c.isUpperCase() -> upperCase = true\\n                c.isDigit() -> digit = true\\n                c in specialChars -> special = true\\n            }\\n            pre = c\\n        }\\n        return lowerCase && upperCase && digit && special\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2142913,
                "title": "python3-easy-to-follow",
                "content": "```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        \\n        return len(password) >= 8 and \\\\ # Condition 1\\n               any(ch in password for ch in string.ascii_lowercase) and \\\\ # Condition 2\\n               any(ch in password for ch in string.ascii_uppercase) and \\\\ # Condition 3\\n               any(ch in password for ch in \\'0123456789\\') and \\\\ # Condition 4\\n               any(ch in password for ch in \\'!@#$%^&*()-+\\') and \\\\ # Condition 5\\n               not any(ch * 2 in password for ch in string.ascii_lowercase + string.ascii_uppercase + \\'0123456789\\' + \\'!@#$%^&*()-+\\')  # Condition 6\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        \\n        return len(password) >= 8 and \\\\ # Condition 1\\n               any(ch in password for ch in string.ascii_lowercase) and \\\\ # Condition 2\\n               any(ch in password for ch in string.ascii_uppercase) and \\\\ # Condition 3\\n               any(ch in password for ch in \\'0123456789\\') and \\\\ # Condition 4\\n               any(ch in password for ch in \\'!@#$%^&*()-+\\') and \\\\ # Condition 5\\n               not any(ch * 2 in password for ch in string.ascii_lowercase + string.ascii_uppercase + \\'0123456789\\' + \\'!@#$%^&*()-+\\')  # Condition 6\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2140867,
                "title": "javascript-fp-style-solution-easily-extendable",
                "content": "```\\nconst CRITERIA = [\\n\\t(s) => s.length >= 8,\\n\\t(s) => /[a-z]/.test(s) && /[A-Z]/.test(s),\\n\\t(s) => /\\\\d/.test(s),\\n\\t(s) =>\\n\\t\\t`\"!@#$%^&*()-+\".`.split(\\'\\').some((specialChar) => s.includes(specialChar)),\\n\\t(s) => ![...s].some((char, id) => char === s[id + 1]),\\n];\\n\\nconst strongPasswordCheckerII = (password) =>\\n\\tCRITERIA.every((criteria) => criteria(password));\\n```",
                "solutionTags": [],
                "code": "```\\nconst CRITERIA = [\\n\\t(s) => s.length >= 8,\\n\\t(s) => /[a-z]/.test(s) && /[A-Z]/.test(s),\\n\\t(s) => /\\\\d/.test(s),\\n\\t(s) =>\\n\\t\\t`\"!@#$%^&*()-+\".`.split(\\'\\').some((specialChar) => s.includes(specialChar)),\\n\\t(s) => ![...s].some((char, id) => char === s[id + 1]),\\n];\\n\\nconst strongPasswordCheckerII = (password) =>\\n\\tCRITERIA.every((criteria) => criteria(password));\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2139573,
                "title": "c-o-n-solution-easy-to-understand",
                "content": "```\\n\\tbool strongPasswordCheckerII(string pwd) {  //pwd=password\\n\\t\\tif(pwd.size()<8) return false;\\n\\t\\tbool l=false, u=false, d=false, s=false; //l=lower, u=upper, d=digit, s=special\\n\\t\\tfor(int  i=0; i<pwd.size(); i++){\\n\\t\\t\\tif(i>0 && pwd[i]==pwd[i-1]) return false;\\n\\t\\t\\tif(islower(pwd[i])) l=true;\\n\\t\\t\\telse if(isupper(pwd[i])) u=true;\\n\\t\\t\\telse if(isdigit(pwd[i])) d=true;\\n\\t\\t\\telse s=true;\\n\\t\\t}\\n\\t\\treturn l && u && d && s;\\n\\t}\\n```\\n\\n**Time complexity:** O(n)\\n**Space complexity:** O(1)\\n\\n**If you like it, Please Upvote!!!**\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n\\tbool strongPasswordCheckerII(string pwd) {  //pwd=password\\n\\t\\tif(pwd.size()<8) return false;\\n\\t\\tbool l=false, u=false, d=false, s=false; //l=lower, u=upper, d=digit, s=special\\n\\t\\tfor(int  i=0; i<pwd.size(); i++){\\n\\t\\t\\tif(i>0 && pwd[i]==pwd[i-1]) return false;\\n\\t\\t\\tif(islower(pwd[i])) l=true;\\n\\t\\t\\telse if(isupper(pwd[i])) u=true;\\n\\t\\t\\telse if(isdigit(pwd[i])) d=true;\\n\\t\\t\\telse s=true;\\n\\t\\t}\\n\\t\\treturn l && u && d && s;\\n\\t}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2139510,
                "title": "python-one-liner",
                "content": "```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        return len(password) > 7 and len(set([\\'lower\\' if char.islower() else \\'upper\\' if char.isupper() else \\'digit\\' if char.isdigit() else \\'special\\' if char in \"!@#$%^&*()-+\" else  \\'\\' for char in password])) == 4 and not any(1 for i in range(len(password)-1) if password[i] == password[i+1])\\n```\\n\\n**With pairwise:**\\n```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        return len(password) > 7 and len(set([\\'lower\\' if char.islower() else \\'upper\\' if char.isupper() else \\'digit\\' if char.isdigit() else \\'special\\' if char in \"!@#$%^&*()-+\" else  \\'\\' for char in password])) == 4 and not any(1 for a, b in pairwise(password) if a == b)\\n```\\n\\n**With zip:**\\n\\n```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        return len(password) > 7 and len(set([\\'lower\\' if char.islower() else \\'upper\\' if char.isupper() else \\'digit\\' if char.isdigit() else \\'special\\' if char in \"!@#$%^&*()-+\" else  \\'\\' for char in password])) == 4 and not any(1 for a, b in zip(password, password[1:]) if a == b)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        return len(password) > 7 and len(set([\\'lower\\' if char.islower() else \\'upper\\' if char.isupper() else \\'digit\\' if char.isdigit() else \\'special\\' if char in \"!@#$%^&*()-+\" else  \\'\\' for char in password])) == 4 and not any(1 for i in range(len(password)-1) if password[i] == password[i+1])\\n```\n```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        return len(password) > 7 and len(set([\\'lower\\' if char.islower() else \\'upper\\' if char.isupper() else \\'digit\\' if char.isdigit() else \\'special\\' if char in \"!@#$%^&*()-+\" else  \\'\\' for char in password])) == 4 and not any(1 for a, b in pairwise(password) if a == b)\\n```\n```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        return len(password) > 7 and len(set([\\'lower\\' if char.islower() else \\'upper\\' if char.isupper() else \\'digit\\' if char.isdigit() else \\'special\\' if char in \"!@#$%^&*()-+\" else  \\'\\' for char in password])) == 4 and not any(1 for a, b in zip(password, password[1:]) if a == b)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2139222,
                "title": "ruby-regexp-1-line-code-detailed-explanation",
                "content": "```\\nRegExp rules:\\n\\nNot equal chars in adjacent positions  (?!.*([A-Za-z0-9#?!@$%^&*-])\\\\1{1})\\nAt least one upper case English letter, (?=.*?[A-Z])\\nAt least one lower case English letter, (?=.*?[a-z])\\nAt least one digit, (?=.*?[0-9])\\nAt least one special character, (?=.*?[-+!@#$%^&*()])\\nMinimum eight in length .{8,} (with the anchors)\\n\\n# @param {String} password\\n# @return {Boolean}\\ndef strong_password_checker_ii(password)\\n    return !(password !~ /^(?!.*([A-Za-z0-9#?!@$%^&*-])\\\\1{1})(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[-+!@#$%^&*()]).{8,}$/)\\nend\\n```\\n\\nPease **upvote** if you like the solution",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\nRegExp rules:\\n\\nNot equal chars in adjacent positions  (?!.*([A-Za-z0-9#?!@$%^&*-])\\\\1{1})\\nAt least one upper case English letter, (?=.*?[A-Z])\\nAt least one lower case English letter, (?=.*?[a-z])\\nAt least one digit, (?=.*?[0-9])\\nAt least one special character, (?=.*?[-+!@#$%^&*()])\\nMinimum eight in length .{8,} (with the anchors)\\n\\n# @param {String} password\\n# @return {Boolean}\\ndef strong_password_checker_ii(password)\\n    return !(password !~ /^(?!.*([A-Za-z0-9#?!@$%^&*-])\\\\1{1})(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[-+!@#$%^&*()]).{8,}$/)\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2139049,
                "title": "javascript-direct-way-151ms",
                "content": "```\\nconst ord = (c) => c.charCodeAt();\\nconst isLowerCase = (c) => { let x = ord(c); return x >= 97 && x <= 122; };\\nconst isUpperCase = (c) => { let x = ord(c); return x >= 65 && x <= 90; };\\nconst isDigit = (c) => \\'0123456789\\'.indexOf(c) != -1;\\nconst isSpecial = (c) => \\'!@#$%^&*()-+\\'.indexOf(c) != -1;\\n\\nconst strongPasswordCheckerII = (s) => {\\n    let n = s.length, hasLower = false, hasUpper = false, hasDigit = false, hasSpecial = false, adjSame = false;\\n    if (n < 8) return false;\\n    for (let i = 0; i < n; i++) {\\n        if (isLowerCase(s[i])) hasLower = true;\\n        if (isUpperCase(s[i])) hasUpper = true;\\n        if (isDigit(s[i])) hasDigit = true;\\n        if (isSpecial(s[i])) hasSpecial = true;\\n        if (i + 1 < n && s[i] == s[i + 1]) adjSame = true;\\n    }\\n    return hasLower && hasUpper && hasDigit && hasSpecial && !adjSame;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst ord = (c) => c.charCodeAt();\\nconst isLowerCase = (c) => { let x = ord(c); return x >= 97 && x <= 122; };\\nconst isUpperCase = (c) => { let x = ord(c); return x >= 65 && x <= 90; };\\nconst isDigit = (c) => \\'0123456789\\'.indexOf(c) != -1;\\nconst isSpecial = (c) => \\'!@#$%^&*()-+\\'.indexOf(c) != -1;\\n\\nconst strongPasswordCheckerII = (s) => {\\n    let n = s.length, hasLower = false, hasUpper = false, hasDigit = false, hasSpecial = false, adjSame = false;\\n    if (n < 8) return false;\\n    for (let i = 0; i < n; i++) {\\n        if (isLowerCase(s[i])) hasLower = true;\\n        if (isUpperCase(s[i])) hasUpper = true;\\n        if (isDigit(s[i])) hasDigit = true;\\n        if (isSpecial(s[i])) hasSpecial = true;\\n        if (i + 1 < n && s[i] == s[i + 1]) adjSame = true;\\n    }\\n    return hasLower && hasUpper && hasDigit && hasSpecial && !adjSame;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2139006,
                "title": "c-easy-to-understand-simple-brute-force",
                "content": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string p) {\\n    \\n        bool same=false,ok1,ok2,ok3,ok4;\\n        string sp=\"!@#$%^&*()-+\";\\n        set<char> st;\\n        for(char ch:sp)\\n        {\\n            st.insert(ch);\\n        }\\n        ok1=ok2=ok3=ok4=false;\\n        int n=p.size();\\n        for(int i=0;i<p.size();i++)\\n        {\\n            if(i+1<n)\\n            {\\n                if(p[i]==p[i+1])\\n                {\\n                    return false;\\n                }\\n            }\\n            \\n            char ch=p[i];\\n            if(isdigit(ch))\\n            {\\n                ok3=true;\\n            }\\n            if(ch>=97&&ch<=122)\\n            {\\n                ok1=true;\\n            }\\n            if(ch>=65&&ch<=90)\\n            {\\n                ok2=true;\\n            }\\n            //(32\\u201347 / 58\\u201364 / 91\\u201396 / 123\\u2013126)\\n            if(st.find(ch)!=st.end())\\n            {\\n                ok4=true;\\n            }\\n        }\\n        return (ok1&&ok2&&ok3&&ok4&&p.size()>=8);\\n    }\\n};\\n```\\n**Please upvote to motivate me in my quest of documenting all leetcode solutions(to help the community). HAPPY CODING:)\\nAny suggestions and improvements are always welcome**",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string p) {\\n    \\n        bool same=false,ok1,ok2,ok3,ok4;\\n        string sp=\"!@#$%^&*()-+\";\\n        set<char> st;\\n        for(char ch:sp)\\n        {\\n            st.insert(ch);\\n        }\\n        ok1=ok2=ok3=ok4=false;\\n        int n=p.size();\\n        for(int i=0;i<p.size();i++)\\n        {\\n            if(i+1<n)\\n            {\\n                if(p[i]==p[i+1])\\n                {\\n                    return false;\\n                }\\n            }\\n            \\n            char ch=p[i];\\n            if(isdigit(ch))\\n            {\\n                ok3=true;\\n            }\\n            if(ch>=97&&ch<=122)\\n            {\\n                ok1=true;\\n            }\\n            if(ch>=65&&ch<=90)\\n            {\\n                ok2=true;\\n            }\\n            //(32\\u201347 / 58\\u201364 / 91\\u201396 / 123\\u2013126)\\n            if(st.find(ch)!=st.end())\\n            {\\n                ok4=true;\\n            }\\n        }\\n        return (ok1&&ok2&&ok3&&ok4&&p.size()>=8);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2138882,
                "title": "brute-force-c",
                "content": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string s) {\\n        if(s.size() < 8) return false;\\n        \\n        string specialCharStr = \"!@#$%^&*()-+\";\\n        unordered_set<char> specialCharSet(specialCharStr.begin(), specialCharStr.end());\\n        \\n        bool isUpperCase = false, isLowerCase = false, isDig = false, isSpecialChar = false;\\n        for(int i = 0; i < s.size(); i++){\\n            // adj chars must be diff\\n            if(i > 0 && s[i] == s[i - 1]) return false;\\n            // other conditions\\n            if(specialCharSet.count(s[i])) isSpecialChar = true;\\n            if(isupper(s[i])) isUpperCase = true;\\n            if(islower(s[i])) isLowerCase = true;\\n            if(isdigit(s[i])) isDig = true;\\n        }\\n        return isSpecialChar && isUpperCase && isLowerCase && isDig;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string s) {\\n        if(s.size() < 8) return false;\\n        \\n        string specialCharStr = \"!@#$%^&*()-+\";\\n        unordered_set<char> specialCharSet(specialCharStr.begin(), specialCharStr.end());\\n        \\n        bool isUpperCase = false, isLowerCase = false, isDig = false, isSpecialChar = false;\\n        for(int i = 0; i < s.size(); i++){\\n            // adj chars must be diff\\n            if(i > 0 && s[i] == s[i - 1]) return false;\\n            // other conditions\\n            if(specialCharSet.count(s[i])) isSpecialChar = true;\\n            if(isupper(s[i])) isUpperCase = true;\\n            if(islower(s[i])) isLowerCase = true;\\n            if(isdigit(s[i])) isDig = true;\\n        }\\n        return isSpecialChar && isUpperCase && isLowerCase && isDig;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2138785,
                "title": "straightforward-java",
                "content": "```\\nclass Solution\\n{\\n    public boolean strongPasswordCheckerII(String p)\\n    {\\n        if(p.length() < 8)\\n            return false;\\n        boolean lower = false, upper = false, digit = false, special = false, valid = true;\\n        for(int i = 0; i < p.length(); i++)\\n        {\\n            char cur = p.charAt(i);\\n            if(Character.isLowerCase(cur))\\n                lower = true;\\n            else if(Character.isUpperCase(cur))\\n                upper = true;\\n            else if(Character.isDigit(cur))\\n                digit = true;\\n            else\\n                special = true;\\n            if(i > 0 && p.charAt(i-1) == cur)\\n                valid = false;\\n        }\\n        return (valid && lower && upper && digit && special);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution\\n{\\n    public boolean strongPasswordCheckerII(String p)\\n    {\\n        if(p.length() < 8)\\n            return false;\\n        boolean lower = false, upper = false, digit = false, special = false, valid = true;\\n        for(int i = 0; i < p.length(); i++)\\n        {\\n            char cur = p.charAt(i);\\n            if(Character.isLowerCase(cur))\\n                lower = true;\\n            else if(Character.isUpperCase(cur))\\n                upper = true;\\n            else if(Character.isDigit(cur))\\n                digit = true;\\n            else\\n                special = true;\\n            if(i > 0 && p.charAt(i-1) == cur)\\n                valid = false;\\n        }\\n        return (valid && lower && upper && digit && special);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3967599,
                "title": "easy-to-understand-clear-code-c",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        \\n        int lc =0 , uc =0 , sc =0, d=0;\\n\\n        if(password.size()<8) return false;\\n       \\n        for(int i =0;i<password.length();i++){\\n        if(i+1<password.size() && password[i]==password[i+1]) return false;\\n        if(password[i]>=\\'A\\' && password[i]<=\\'Z\\') uc=1;\\n        else if(password[i]>=\\'a\\' && password[i]<=\\'z\\') lc =1;\\n        else if(password[i]>=\\'0\\' && password[i]<=\\'9\\') d =1;\\n        else sc =1;\\n        }\\n         \\n        if(uc>0 && lc>0 && d>0 && sc>0){\\n            return true;\\n        }\\n        else return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        \\n        int lc =0 , uc =0 , sc =0, d=0;\\n\\n        if(password.size()<8) return false;\\n       \\n        for(int i =0;i<password.length();i++){\\n        if(i+1<password.size() && password[i]==password[i+1]) return false;\\n        if(password[i]>=\\'A\\' && password[i]<=\\'Z\\') uc=1;\\n        else if(password[i]>=\\'a\\' && password[i]<=\\'z\\') lc =1;\\n        else if(password[i]>=\\'0\\' && password[i]<=\\'9\\') d =1;\\n        else sc =1;\\n        }\\n         \\n        if(uc>0 && lc>0 && d>0 && sc>0){\\n            return true;\\n        }\\n        else return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3724320,
                "title": "c-solution",
                "content": "# Code\\n```\\npublic class Solution {\\n    public bool StrongPasswordCheckerII(string password) {\\n        if(password.Length < 8) return false;\\n\\n        bool lc = false, uc = false, d = false, sc = false;\\n        char prev = \\' \\';\\n        foreach(char c in password) {\\n            if(!lc && char.IsLower(c)) {\\n               lc = true;    \\n            } else if(!uc && char.IsUpper(c)) {\\n               uc = true;\\n            } else if(prev != \\' \\' && prev == c) {\\n                return false;\\n            } else if(!d && char.IsDigit(c)) {\\n                d = true;\\n            } else if(!sc && \"!@#$%^&*()-+\".Contains(c)) {\\n                sc = true;\\n            } \\n     \\n            prev = c;    \\n        }\\n\\n        return lc && uc && d && sc; \\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public bool StrongPasswordCheckerII(string password) {\\n        if(password.Length < 8) return false;\\n\\n        bool lc = false, uc = false, d = false, sc = false;\\n        char prev = \\' \\';\\n        foreach(char c in password) {\\n            if(!lc && char.IsLower(c)) {\\n               lc = true;    \\n            } else if(!uc && char.IsUpper(c)) {\\n               uc = true;\\n            } else if(prev != \\' \\' && prev == c) {\\n                return false;\\n            } else if(!d && char.IsDigit(c)) {\\n                d = true;\\n            } else if(!sc && \"!@#$%^&*()-+\".Contains(c)) {\\n                sc = true;\\n            } \\n     \\n            prev = c;    \\n        }\\n\\n        return lc && uc && d && sc; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3300246,
                "title": "easy-solution-c-string",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        int l , u , digit , special , n = password.length() , i ;\\n        if(n<8){\\n            return false ;\\n        }\\n        l = u = digit = special = 0 ;\\n        bool flag = false ;\\n        for(i=0;i<n;i++)\\n        {\\n            if(isupper(password[i])){\\n                u++;\\n            }\\n            else if(islower(password[i])){\\n                l++;\\n            }\\n            else if(isdigit(password[i])){\\n                digit++;\\n            }\\n            else{\\n                special++;\\n            }\\n            if(i>0){\\n                if(password[i-1]==password[i]){\\n                    flag = true ;\\n                    break;\\n                }\\n            }\\n        }\\n        if(l>0 && u>0 && digit>0 && special>0 && flag==false){\\n            return true ;\\n        }\\n        return false ;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        int l , u , digit , special , n = password.length() , i ;\\n        if(n<8){\\n            return false ;\\n        }\\n        l = u = digit = special = 0 ;\\n        bool flag = false ;\\n        for(i=0;i<n;i++)\\n        {\\n            if(isupper(password[i])){\\n                u++;\\n            }\\n            else if(islower(password[i])){\\n                l++;\\n            }\\n            else if(isdigit(password[i])){\\n                digit++;\\n            }\\n            else{\\n                special++;\\n            }\\n            if(i>0){\\n                if(password[i-1]==password[i]){\\n                    flag = true ;\\n                    break;\\n                }\\n            }\\n        }\\n        if(l>0 && u>0 && digit>0 && special>0 && flag==false){\\n            return true ;\\n        }\\n        return false ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3163564,
                "title": "strong-password-checker-ii-using-arraylist",
                "content": "# Code\\n```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if(password.length() < 8) return false;\\n\\n        ArrayList<Character> list = new ArrayList<>();\\n        for(int i=0; i<password.length(); i++){\\n            list.add(password.charAt(i));\\n        }\\n\\n        boolean lowl = false;\\n        boolean upperl = false;\\n        boolean digit = false;\\n        boolean spChar = false;\\n        String special = \"!@#$%^&*()-+\";\\n        char previous = \\'.\\';\\n        for(int i=0; i<list.size(); i++){\\n            if(list.get(i) == previous){\\n                return false;\\n            }\\n            previous = list.get(i);\\n            if(list.get(i) >= \\'a\\' && list.get(i) <= \\'z\\'){\\n                lowl = true;\\n            }else if(list.get(i) >= \\'A\\' && list.get(i) <= \\'Z\\'){\\n                upperl = true;\\n            }else if(list.get(i) >= \\'0\\' && list.get(i) <= \\'9\\'){\\n                digit = true;\\n            }else if(special.indexOf(list.get(i)) != -1){\\n                spChar = true;\\n            }\\n        }\\n        return lowl && upperl && digit && spChar;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if(password.length() < 8) return false;\\n\\n        ArrayList<Character> list = new ArrayList<>();\\n        for(int i=0; i<password.length(); i++){\\n            list.add(password.charAt(i));\\n        }\\n\\n        boolean lowl = false;\\n        boolean upperl = false;\\n        boolean digit = false;\\n        boolean spChar = false;\\n        String special = \"!@#$%^&*()-+\";\\n        char previous = \\'.\\';\\n        for(int i=0; i<list.size(); i++){\\n            if(list.get(i) == previous){\\n                return false;\\n            }\\n            previous = list.get(i);\\n            if(list.get(i) >= \\'a\\' && list.get(i) <= \\'z\\'){\\n                lowl = true;\\n            }else if(list.get(i) >= \\'A\\' && list.get(i) <= \\'Z\\'){\\n                upperl = true;\\n            }else if(list.get(i) >= \\'0\\' && list.get(i) <= \\'9\\'){\\n                digit = true;\\n            }else if(special.indexOf(list.get(i)) != -1){\\n                spChar = true;\\n            }\\n        }\\n        return lowl && upperl && digit && spChar;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3076731,
                "title": "java-easy-solution-line-by-line",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n\\t\\tif(password.length()>=8){\\n\\t\\t\\tfor(int i=0;i<26;i++){\\n\\t\\t\\t\\tchar ch=(char)(\\'a\\'+i);\\n\\t\\t\\t\\tif(password.contains(String.valueOf(ch))){\\n\\t\\t\\t\\t\\tfor(int l=0;l<26;l++){\\n\\t\\t\\t\\t\\tchar c=(char)(\\'A\\'+l);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\tif(password.contains(String.valueOf(c))){\\n\\t\\t\\t\\t\\t\\t\\tif(password.contains(String.valueOf(\\'!\\')) || password.contains(String.valueOf(\\'@\\')) || \\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpassword.contains(String.valueOf(\\'#\\')) || password.contains(String.valueOf(\\'\\n```)) || \\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpassword.contains(String.valueOf(\\'%\\')) || password.contains(String.valueOf(\\'^\\')) ||\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpassword.contains(String.valueOf(\\'&\\')) || password.contains(String.valueOf(\\'*\\'))||\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpassword.contains(String.valueOf(\\'(\\')) || password.contains(String.valueOf(\\')\\')) ||\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpassword.contains(String.valueOf(\\'-\\')) ||password.contains(String.valueOf(\\'+\\'))) {\\n\\t\\t\\t\\t\\t\\t\\t\\tint j=0;\\n\\t\\t\\t\\t\\t\\t\\t\\twhile(j<password.length()){\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tint k=j+1;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif(k<password.length() && password.charAt(j)==password.charAt(k)){\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\treturn false;\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tj++;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tint k=0;\\n\\t\\t\\t\\t\\t\\t\\t\\twhile(k<10) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif(password.contains(k+\"\")) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\telse {k++;}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\treturn false;\\n\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t} \\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\treturn false;\\n\\t\\n\\t\\n        }\\n    }\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n\\t\\tif(password.length()>=8){\\n\\t\\t\\tfor(int i=0;i<26;i++){\\n\\t\\t\\t\\tchar ch=(char)(\\'a\\'+i);\\n\\t\\t\\t\\tif(password.contains(String.valueOf(ch))){\\n\\t\\t\\t\\t\\tfor(int l=0;l<26;l++){\\n\\t\\t\\t\\t\\tchar c=(char)(\\'A\\'+l);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\tif(password.contains(String.valueOf(c))){\\n\\t\\t\\t\\t\\t\\t\\tif(password.contains(String.valueOf(\\'!\\')) || password.contains(String.valueOf(\\'@\\')) || \\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpassword.contains(String.valueOf(\\'#\\')) || password.contains(String.valueOf(\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3030005,
                "title": "c-easy-understandable-code-beats-100-0ms",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        if(password.size()<=4) return false;\\n        set<char>check;\\n        check.insert(\\'!\\');\\n        check.insert(\\'@\\');\\n        check.insert(\\'#\\');\\n        check.insert(\\'\\n```);\\n        check.insert(\\'%\\');\\n        check.insert(\\'^\\');\\n        check.insert(\\'&\\');\\n        check.insert(\\'*\\');\\n        check.insert(\\'(\\');\\n        check.insert(\\')\\');\\n        check.insert(\\'-\\');\\n        check.insert(\\'+\\');\\n\\n        int digit=-1;\\n        int lower=-1;\\n        int upper=-1;\\n        int special=-1;\\n        for(int i=0;i<=password.size();i++){\\n            if(check.find(password[i]) != check.end())\\n            {\\n                 special=1;\\n            }\\n            if(isdigit(password[i])){\\n                 digit=1;\\n            }\\n             if(password[i] >= \\'A\\' && password[i] <= \\'Z\\'){\\n                  upper=1;\\n        }\\n             if(password[i] >= \\'a\\' && password[i] <= \\'z\\'){\\n                  lower=1;\\n             }\\n\\n            if(i<password.size()-1 && password[i] == password[i+1]){\\n                 return false;\\n            }\\n\\n        }\\n        \\n        if(lower==-1 || upper == -1 || special == -1 || digit ==-1)\\n        return false;\\n        return true;\\n\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        if(password.size()<=4) return false;\\n        set<char>check;\\n        check.insert(\\'!\\');\\n        check.insert(\\'@\\');\\n        check.insert(\\'#\\');\\n        check.insert(\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2916628,
                "title": "beats-100",
                "content": "\\n# Code\\n```\\n/**\\n * @param {string} password\\n * @return {boolean}\\n */\\nvar strongPasswordCheckerII = function (password) {\\n    if (password.length < 8) return false;\\n    if (!(/[a-z]/).test(password)) {\\n        return false;\\n    };\\n\\n    if (!(/[A-Z]/).test(password)) {\\n        return false;\\n    };\\n\\n    if (!(/[0-9]/).test(password)) {\\n        return false;\\n    };\\n\\n    let specialChars = \"!@#$%^&*()-+\";\\n    let noSPC = true;\\n    for (let i of specialChars) {\\n        if (password.includes(i)) {\\n            noSPC = false;\\n            break;\\n        }\\n    }\\n    if (noSPC) return false;\\n\\n    let lastChar = password[0];\\n    let count = 0;\\n    for (let i = 0; i < password.length; i++) {\\n        if (password[i] == lastChar) {\\n            count++;\\n        } else {\\n            lastChar = password[i];\\n            count = 1;\\n        }\\n        if (count >= 2) {\\n            return false;\\n        };\\n    }\\n\\n    return true;\\n};\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/2ebec18f-8e3b-40f2-bf90-0ad6b6069ba1_1671167283.0262153.png)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} password\\n * @return {boolean}\\n */\\nvar strongPasswordCheckerII = function (password) {\\n    if (password.length < 8) return false;\\n    if (!(/[a-z]/).test(password)) {\\n        return false;\\n    };\\n\\n    if (!(/[A-Z]/).test(password)) {\\n        return false;\\n    };\\n\\n    if (!(/[0-9]/).test(password)) {\\n        return false;\\n    };\\n\\n    let specialChars = \"!@#$%^&*()-+\";\\n    let noSPC = true;\\n    for (let i of specialChars) {\\n        if (password.includes(i)) {\\n            noSPC = false;\\n            break;\\n        }\\n    }\\n    if (noSPC) return false;\\n\\n    let lastChar = password[0];\\n    let count = 0;\\n    for (let i = 0; i < password.length; i++) {\\n        if (password[i] == lastChar) {\\n            count++;\\n        } else {\\n            lastChar = password[i];\\n            count = 1;\\n        }\\n        if (count >= 2) {\\n            return false;\\n        };\\n    }\\n\\n    return true;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2883124,
                "title": "cpp-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string str) \\n\\t{\\n        int count=0;\\n        int lower=0;\\n        int upper=0;\\n        int digit=0;\\n        int sp_char=0;\\n        \\n        int idx=0;\\n        while(idx < str.length())\\n        {\\n        \\tif(str[idx]>=\\'a\\' and str[idx]<=\\'z\\')\\n        \\tlower++;\\n        \\telse if(str[idx]>=\\'A\\' and str[idx]<=\\'Z\\')\\n        \\tupper++;\\n        \\telse if(str[idx]>=\\'0\\' and str[idx]<=\\'9\\')\\n        \\tdigit++;\\n        \\telse \\n        \\tsp_char++;\\n        \\t\\n        \\tif((idx)<str.length() and (idx+1)<str.length())\\n        \\t{\\n        \\t\\tif(str[idx] == str[idx+1])\\n        \\t\\t{\\n       \\t\\t\\t   cout<<\"a\"<<endl;\\n        \\t\\t   return false;\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tcount++;\\n\\t\\t\\tidx++;\\n\\t\\t}\\n\\t\\tif(count < 8)\\n\\t\\t{\\n\\t\\t   cout<<\"b\"<<endl;\\n\\t\\t   return false;\\t\\n\\t\\t}\\n\\t\\t\\n\\t\\tif(lower <= 0)\\n\\t\\t{\\n\\t\\t\\tcout<<\"c\"<<endl;\\n\\t\\t   return false;\\t\\n\\t\\t}\\n\\t\\t\\n\\t\\tif(upper <= 0)\\n\\t\\t{\\n\\t\\t\\tcout<<\"d\"<<endl;\\n\\t\\t   return false;\\t\\n\\t\\t}\\n\\t\\t\\n\\t\\tif(digit <= 0)\\n\\t\\t{\\n\\t\\t\\tcout<<\"e\"<<endl;\\n\\t\\t   return false;\\t\\n\\t\\t}\\n\\t\\t\\n\\t\\tif(sp_char <= 0)\\n\\t\\t{\\n\\t\\t\\tcout<<\"f\"<<endl;\\n\\t\\t   return false;\\t\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string str) \\n\\t{\\n        int count=0;\\n        int lower=0;\\n        int upper=0;\\n        int digit=0;\\n        int sp_char=0;\\n        \\n        int idx=0;\\n        while(idx < str.length())\\n        {\\n        \\tif(str[idx]>=\\'a\\' and str[idx]<=\\'z\\')\\n        \\tlower++;\\n        \\telse if(str[idx]>=\\'A\\' and str[idx]<=\\'Z\\')\\n        \\tupper++;\\n        \\telse if(str[idx]>=\\'0\\' and str[idx]<=\\'9\\')\\n        \\tdigit++;\\n        \\telse \\n        \\tsp_char++;\\n        \\t\\n        \\tif((idx)<str.length() and (idx+1)<str.length())\\n        \\t{\\n        \\t\\tif(str[idx] == str[idx+1])\\n        \\t\\t{\\n       \\t\\t\\t   cout<<\"a\"<<endl;\\n        \\t\\t   return false;\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tcount++;\\n\\t\\t\\tidx++;\\n\\t\\t}\\n\\t\\tif(count < 8)\\n\\t\\t{\\n\\t\\t   cout<<\"b\"<<endl;\\n\\t\\t   return false;\\t\\n\\t\\t}\\n\\t\\t\\n\\t\\tif(lower <= 0)\\n\\t\\t{\\n\\t\\t\\tcout<<\"c\"<<endl;\\n\\t\\t   return false;\\t\\n\\t\\t}\\n\\t\\t\\n\\t\\tif(upper <= 0)\\n\\t\\t{\\n\\t\\t\\tcout<<\"d\"<<endl;\\n\\t\\t   return false;\\t\\n\\t\\t}\\n\\t\\t\\n\\t\\tif(digit <= 0)\\n\\t\\t{\\n\\t\\t\\tcout<<\"e\"<<endl;\\n\\t\\t   return false;\\t\\n\\t\\t}\\n\\t\\t\\n\\t\\tif(sp_char <= 0)\\n\\t\\t{\\n\\t\\t\\tcout<<\"f\"<<endl;\\n\\t\\t   return false;\\t\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn true;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2814814,
                "title": "easy-simple",
                "content": "class Solution {\\npublic:\\n\\n    bool strongPasswordCheckerII(string s) {\\n        if(s.size()<8)return 0;\\n        bool l=0,u=0,d=0,sp=0;//lower,upper,digit,special\\n        for(int i=0;i<s.size();i++){\\n            if(i+1<s.size()&&s[i]==s[i+1])return false;\\n            if(s[i]>=\\'A\\'&&s[i]<=\\'Z\\')u=1;\\n            else if(s[i]>=\\'a\\'&&s[i]<=\\'z\\')l=1;\\n            else if(s[i]>=\\'0\\'&&s[i]<=\\'9\\')d=1;\\n            else sp=1;\\n        }\\n       return l&u&d&sp;\\n    }\\n};",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\npublic:\\n\\n    bool strongPasswordCheckerII(string s) {\\n        if(s.size()<8)return 0;\\n        bool l=0,u=0,d=0,sp=0;//lower,upper,digit,special\\n        for(int i=0;i<s.size();i++){\\n            if(i+1<s.size()&&s[i]==s[i+1])return false;\\n            if(s[i]>=\\'A\\'&&s[i]<=\\'Z\\')u=1;\\n            else if(s[i]>=\\'a\\'&&s[i]<=\\'z\\')l=1;\\n            else if(s[i]>=\\'0\\'&&s[i]<=\\'9\\')d=1;\\n            else sp=1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2518965,
                "title": "o-n-easy-java",
                "content": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n\\t\\t// all variable names according to the given criteria\\n        int charCount = 0;\\n        int lowerCount = 0;\\n        int upperCount = 0;\\n        int digitCount = 0;\\n        int specialCount = 0;\\n        \\n        String special = \"!@#$%^&*()-+\";\\n        int len = password.length();\\n        \\n\\t\\t// checking if 2 of the same character are in adjacent positions\\n        for(int i = 0; i < len - 1; i++) {\\n            if(password.charAt(i) == password.charAt(i + 1))\\n                return false;\\n        }\\n        \\n        for(int i = 0; i < len; i++) {\\n            \\n            char ch = password.charAt(i);\\n            charCount++;\\n            \\n            if(Character.isLowerCase(ch))\\n                lowerCount++;\\n            else if(Character.isUpperCase(ch))\\n                upperCount++;\\n            else if(Character.isDigit(ch))\\n                digitCount++;\\n            else if(special.indexOf(ch) != -1) {\\n                specialCount++;\\n            }\\n        }\\n        return charCount >= 8 && lowerCount >= 1 && upperCount >= 1 && digitCount >= 1 && specialCount >= 1;   \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n\\t\\t// all variable names according to the given criteria\\n        int charCount = 0;\\n        int lowerCount = 0;\\n        int upperCount = 0;\\n        int digitCount = 0;\\n        int specialCount = 0;\\n        \\n        String special = \"!@#$%^&*()-+\";\\n        int len = password.length();\\n        \\n\\t\\t// checking if 2 of the same character are in adjacent positions\\n        for(int i = 0; i < len - 1; i++) {\\n            if(password.charAt(i) == password.charAt(i + 1))\\n                return false;\\n        }\\n        \\n        for(int i = 0; i < len; i++) {\\n            \\n            char ch = password.charAt(i);\\n            charCount++;\\n            \\n            if(Character.isLowerCase(ch))\\n                lowerCount++;\\n            else if(Character.isUpperCase(ch))\\n                upperCount++;\\n            else if(Character.isDigit(ch))\\n                digitCount++;\\n            else if(special.indexOf(ch) != -1) {\\n                specialCount++;\\n            }\\n        }\\n        return charCount >= 8 && lowerCount >= 1 && upperCount >= 1 && digitCount >= 1 && specialCount >= 1;   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2501776,
                "title": "java-very-easy-to-follow",
                "content": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        int length = password.length();\\n        if (length < 8) return false;\\n        int lower = 0, upper = 0, digit = 0, special = 0;\\n        Character previous = null;\\n        for (char ch : password.toCharArray()) {\\n            if (previous == null) {\\n                previous = ch;\\n            } else {\\n                if (previous == ch) return false;\\n                previous = ch;\\n            }\\n            if (\\'a\\' <= ch && ch <= \\'z\\') {\\n                lower++;\\n            } else if (\\'A\\' <= ch && ch <= \\'Z\\') {\\n                upper++;\\n            } else if (\"!@#$%^&*()-+\".indexOf((ch +\"\")) >= 0) {\\n                special++;\\n            } else if (\\'0\\' <= ch && ch <= \\'9\\') {\\n                digit++;\\n            }\\n        }\\n        if (lower > 0 && upper > 0 && digit > 0 && special > 0) return true;\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        int length = password.length();\\n        if (length < 8) return false;\\n        int lower = 0, upper = 0, digit = 0, special = 0;\\n        Character previous = null;\\n        for (char ch : password.toCharArray()) {\\n            if (previous == null) {\\n                previous = ch;\\n            } else {\\n                if (previous == ch) return false;\\n                previous = ch;\\n            }\\n            if (\\'a\\' <= ch && ch <= \\'z\\') {\\n                lower++;\\n            } else if (\\'A\\' <= ch && ch <= \\'Z\\') {\\n                upper++;\\n            } else if (\"!@#$%^&*()-+\".indexOf((ch +\"\")) >= 0) {\\n                special++;\\n            } else if (\\'0\\' <= ch && ch <= \\'9\\') {\\n                digit++;\\n            }\\n        }\\n        if (lower > 0 && upper > 0 && digit > 0 && special > 0) return true;\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2499687,
                "title": "java-easy-to-understand-self-explanatory",
                "content": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if(password.length() < 8)\\n            return false;\\n        \\n        boolean lowerPresent = false;\\n        boolean upperPresent = false;\\n        boolean numberPresent = false;\\n        boolean specialCharPresent = false;\\n        boolean isRepeated = false;\\n        char ch = password.charAt(0);\\n        int pos = 0;\\n        String specialChars = \"!@#$%^&*()-+\";\\n        \\n        for(int i = 0; i < password.length(); i++){\\n            if(ch == password.charAt(i) && pos == i-1){\\n                System.out.println(\"entered at i: \" + i);\\n                isRepeated = true;\\n            }\\n                \\n            if(Character.isLowerCase(password.charAt(i))){\\n                lowerPresent = true;\\n                ch = password.charAt(i);\\n                pos = i;\\n            }\\n            else if(Character.isUpperCase(password.charAt(i))){\\n                upperPresent = true;\\n                ch = password.charAt(i);\\n                pos = i;\\n            }\\n            else if(Character.isDigit(password.charAt(i))){\\n                numberPresent = true;\\n            }\\n            else if(specialChars.indexOf(password.charAt(i)) >= 0){\\n                specialCharPresent = true;\\n                ch = password.charAt(i);\\n                pos = i;\\n            }\\n        }\\n        if(isRepeated)\\n            return false;\\n        else if(lowerPresent && upperPresent && numberPresent && specialCharPresent)\\n            return true;\\n        return false;\\n    }\\n}\\n```\\n\\nPlease upvote if you do like this approach, Thank You.",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if(password.length() < 8)\\n            return false;\\n        \\n        boolean lowerPresent = false;\\n        boolean upperPresent = false;\\n        boolean numberPresent = false;\\n        boolean specialCharPresent = false;\\n        boolean isRepeated = false;\\n        char ch = password.charAt(0);\\n        int pos = 0;\\n        String specialChars = \"!@#$%^&*()-+\";\\n        \\n        for(int i = 0; i < password.length(); i++){\\n            if(ch == password.charAt(i) && pos == i-1){\\n                System.out.println(\"entered at i: \" + i);\\n                isRepeated = true;\\n            }\\n                \\n            if(Character.isLowerCase(password.charAt(i))){\\n                lowerPresent = true;\\n                ch = password.charAt(i);\\n                pos = i;\\n            }\\n            else if(Character.isUpperCase(password.charAt(i))){\\n                upperPresent = true;\\n                ch = password.charAt(i);\\n                pos = i;\\n            }\\n            else if(Character.isDigit(password.charAt(i))){\\n                numberPresent = true;\\n            }\\n            else if(specialChars.indexOf(password.charAt(i)) >= 0){\\n                specialCharPresent = true;\\n                ch = password.charAt(i);\\n                pos = i;\\n            }\\n        }\\n        if(isRepeated)\\n            return false;\\n        else if(lowerPresent && upperPresent && numberPresent && specialCharPresent)\\n            return true;\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2489877,
                "title": "java-0ms-faster-than-100-solution",
                "content": "I iterate over the chars and check for presence of requirements. To track each requirement I have a boolean for that.\\n\\n```java\\n public boolean strongPasswordCheckerII(String password) {\\n\\t\\tfinal int len = password.length();\\n\\t\\tif(len < 8) return false;\\n\\t\\t\\n\\t\\tboolean lowercaseLetter = false;\\n\\t\\tboolean uppercaseLetter = false;\\n\\t\\tboolean digitPresent = false;\\n\\t\\tboolean specialCharPresent = false;\\n\\t\\t\\n\\t\\tfinal String specialChars = \"!@#$%^&*()-+\";\\n\\t\\t//can not contain the same chars consecutive.\\n\\t\\t\\t\\t\\n\\t\\tfor(int i = 0; i < len; ++i){\\n\\t\\t\\tfinal char curr = password.charAt(i);\\n\\t\\t\\t\\n\\t\\t\\tif(!lowercaseLetter) lowercaseLetter = curr >= \\'a\\' && curr <= \\'z\\';\\n\\t\\t\\tif(!uppercaseLetter) uppercaseLetter = curr >= \\'A\\' && curr <= \\'Z\\';\\n\\t\\t\\tif(!digitPresent) digitPresent = curr >= \\'0\\' && curr <= \\'9\\';\\n\\t\\t\\tif(!specialCharPresent) specialCharPresent = specialChars.indexOf(curr) > -1;\\n\\t\\t\\t\\n\\t\\t\\tif(i > 0 && curr == password.charAt(i - 1)) return false;\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn lowercaseLetter && uppercaseLetter && digitPresent && specialCharPresent;\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Iterator"
                ],
                "code": "```java\\n public boolean strongPasswordCheckerII(String password) {\\n\\t\\tfinal int len = password.length();\\n\\t\\tif(len < 8) return false;\\n\\t\\t\\n\\t\\tboolean lowercaseLetter = false;\\n\\t\\tboolean uppercaseLetter = false;\\n\\t\\tboolean digitPresent = false;\\n\\t\\tboolean specialCharPresent = false;\\n\\t\\t\\n\\t\\tfinal String specialChars = \"!@#$%^&*()-+\";\\n\\t\\t//can not contain the same chars consecutive.\\n\\t\\t\\t\\t\\n\\t\\tfor(int i = 0; i < len; ++i){\\n\\t\\t\\tfinal char curr = password.charAt(i);\\n\\t\\t\\t\\n\\t\\t\\tif(!lowercaseLetter) lowercaseLetter = curr >= \\'a\\' && curr <= \\'z\\';\\n\\t\\t\\tif(!uppercaseLetter) uppercaseLetter = curr >= \\'A\\' && curr <= \\'Z\\';\\n\\t\\t\\tif(!digitPresent) digitPresent = curr >= \\'0\\' && curr <= \\'9\\';\\n\\t\\t\\tif(!specialCharPresent) specialCharPresent = specialChars.indexOf(curr) > -1;\\n\\t\\t\\t\\n\\t\\t\\tif(i > 0 && curr == password.charAt(i - 1)) return false;\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn lowercaseLetter && uppercaseLetter && digitPresent && specialCharPresent;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2459122,
                "title": "97-76-faster-python-solution",
                "content": "```\\nclass Solution:\\n    def strongPasswordCheckerII(self, p: str) -> bool:\\n        \\n        l =len(p)\\n        if l<8:\\n            return False\\n        \\n        lo =0\\n        up = 0\\n        d = 0\\n        sp =0\\n        for i in range(l):\\n            if i<l-1 :\\n                if p[i] ==p[i+1]:\\n                     return False\\n           \\n            if p[i].isdigit():\\n                d+=1\\n            elif p[i].isupper():\\n                up+=1\\n            elif p[i].islower():\\n                lo+=1\\n                \\n            elif p[i] in \"!@#$%^&*()-+\":\\n                sp+=1\\n                \\n            else:\\n                continue\\n                \\n                \\n        if lo>=1 and up>= 1  and sp>=1 and d>=1:\\n            return True\\n        return False\\n        \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def strongPasswordCheckerII(self, p: str) -> bool:\\n        \\n        l =len(p)\\n        if l<8:\\n            return False\\n        \\n        lo =0\\n        up = 0\\n        d = 0\\n        sp =0\\n        for i in range(l):\\n            if i<l-1 :\\n                if p[i] ==p[i+1]:\\n                     return False\\n           \\n            if p[i].isdigit():\\n                d+=1\\n            elif p[i].isupper():\\n                up+=1\\n            elif p[i].islower():\\n                lo+=1\\n                \\n            elif p[i] in \"!@#$%^&*()-+\":\\n                sp+=1\\n                \\n            else:\\n                continue\\n                \\n                \\n        if lo>=1 and up>= 1  and sp>=1 and d>=1:\\n            return True\\n        return False\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2372667,
                "title": "java-easy-and-neat-solution",
                "content": "````\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        int n = password.length();\\n        if(n<8){\\n            return false;\\n        }\\n        if(!low_up_dig(password,n,\\'a\\',\\'z\\')){\\n            return false;\\n        }if(!low_up_dig(password,n,\\'A\\',\\'Z\\')){\\n            return false;\\n        }if(!low_up_dig(password,n,\\'0\\',\\'9\\')){\\n            return false;\\n        }if(!spec(password,n)){\\n            return false;\\n        }\\n        return rep(password,n);\\n        \\n    }\\n    public boolean low_up_dig(String pass,int n,char a,char z){\\n        for(int i=0;i<n;i++){\\n            if(a<=pass.charAt(i) && pass.charAt(i)<=z){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    public boolean spec(String pass,int n){\\n        String special = \"!@#$%^&*()-+\";\\n        for(int i=0;i<n;i++){\\n            for(int j=0;j<12;j++){\\n                if(pass.charAt(i)==special.charAt(j)){\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n    public boolean rep(String pass,int n){\\n        for(int i=0;i<n-1;i++){\\n            if(pass.charAt(i)==pass.charAt(i+1)){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        int n = password.length();\\n        if(n<8){\\n            return false;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2362512,
                "title": "c-simple-logic",
                "content": "bool strongPasswordCheckerII(string password) {\\n        \\n        bool len = false;\\n        bool lower = false;\\n        bool upper = false;\\n        bool digit = false;\\n        bool special = false;\\n        \\n        string special_chars = \"!@#$%^&*()-+\";\\n        \\n        if (password.length() >= 8)\\n        {\\n            len = true;\\n        }\\n        \\n        for (int i = 0; i < password.length(); i++)\\n        {\\n            if (password[i] == password[i + 1])\\n            {\\n                return false;\\n            }\\n            if (islower(password[i]))\\n            {\\n                lower = true;\\n            }\\n            else if (isupper(password[i]))\\n            {\\n                upper = true;\\n            }\\n            else if (isdigit(password[i]))\\n            {\\n                digit = true;\\n            }\\n            else if (special_chars.find(password[i]) != string::npos)\\n            {\\n                special = true;\\n            }\\n        }\\n        \\n        if (len && lower && upper && digit && special)\\n        {\\n            return true;\\n        }\\n        else \\n        {\\n            return false;\\n        }\\n        \\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "bool strongPasswordCheckerII(string password) {\\n        \\n        bool len = false;\\n        bool lower = false;\\n        bool upper = false;\\n        bool digit = false;\\n        bool special = false;\\n        \\n        string special_chars = \"!@#$%^&*()-+\";\\n        \\n        if (password.length() >= 8)\\n        {\\n            len = true;\\n        }\\n        \\n        for (int i = 0; i < password.length(); i++)\\n        {\\n            if (password[i] == password[i + 1])\\n            {\\n                return false;\\n            }\\n            if (islower(password[i]))\\n            {\\n                lower = true;\\n            }\\n            else if (isupper(password[i]))\\n            {\\n                upper = true;\\n            }\\n            else if (isdigit(password[i]))\\n            {\\n                digit = true;\\n            }\\n            else if (special_chars.find(password[i]) != string::npos)\\n            {\\n                special = true;\\n            }\\n        }\\n        \\n        if (len && lower && upper && digit && special)\\n        {\\n            return true;\\n        }\\n        else \\n        {\\n            return false;\\n        }\\n        \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2323593,
                "title": "go-golang-time-o-n-0-ms-100-space-o-1-1-9-mb-51-59",
                "content": "```\\nfunc strongPasswordCheckerII(password string) bool {\\n    if len(password) < 8 || !strings.ContainsAny(password, \"!@#$%^&*()-+\") {\\n        return false\\n    }\\n\\n    hasLower, hasUpper, hasDigit, hasAdjacent := false, false, false, false\\n\\n    for i, p := range password {\\n        if unicode.IsLower(p) {\\n            hasLower = true\\n        }\\n        if unicode.IsUpper(p) {\\n            hasUpper = true\\n        }\\n        if unicode.IsDigit(p) {\\n            hasDigit = true\\n        }\\n        if i > 0 && password[i] == password[i - 1] {\\n            hasAdjacent = true\\n        }\\n    }\\n\\n    return hasLower && hasUpper && hasDigit && !hasAdjacent\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc strongPasswordCheckerII(password string) bool {\\n    if len(password) < 8 || !strings.ContainsAny(password, \"!@#$%^&*()-+\") {\\n        return false\\n    }\\n\\n    hasLower, hasUpper, hasDigit, hasAdjacent := false, false, false, false\\n\\n    for i, p := range password {\\n        if unicode.IsLower(p) {\\n            hasLower = true\\n        }\\n        if unicode.IsUpper(p) {\\n            hasUpper = true\\n        }\\n        if unicode.IsDigit(p) {\\n            hasDigit = true\\n        }\\n        if i > 0 && password[i] == password[i - 1] {\\n            hasAdjacent = true\\n        }\\n    }\\n\\n    return hasLower && hasUpper && hasDigit && !hasAdjacent\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2255732,
                "title": "python-easy-fast",
                "content": "```\\ndef strongPasswordCheckerII(self, password: str) -> bool:\\n        if len(password) >= 8:\\n            special = [\\'!\\',\\'@\\',\\'#\\',\\'$\\',\\'%\\',\\'^\\',\\'&\\',\\'*\\',\\')\\',\\'(\\',\\'-\\',\\'+\\']\\n            hasUpper, hasLower, hasNum, hasSpecial = False, False, False, False\\n            for i in range(len(password)):\\n                if i < len(password)-1 and password[i] == password[i+1]:\\n                    return False\\n                if password[i] in special:\\n                    hasSpecial = True\\n                if password[i].isupper():\\n                    hasUpper = True\\n                if password[i].islower():\\n                    hasLower = True\\n                if password[i].isdigit():\\n                    hasNum = True\\n            return hasUpper and hasLower and hasNum and hasSpecial",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef strongPasswordCheckerII(self, password: str) -> bool:\\n        if len(password) >= 8:\\n            special = [\\'!\\',\\'@\\',\\'#\\',\\'$\\',\\'%\\',\\'^\\',\\'&\\',\\'*\\',\\')\\',\\'(\\',\\'-\\',\\'+\\']\\n            hasUpper, hasLower, hasNum, hasSpecial = False, False, False, False\\n            for i in range(len(password)):\\n                if i < len(password)-1 and password[i] == password[i+1]:\\n                    return False\\n                if password[i] in special:\\n                    hasSpecial = True\\n                if password[i].isupper():\\n                    hasUpper = True\\n                if password[i].islower():\\n                    hasLower = True\\n                if password[i].isdigit():\\n                    hasNum = True\\n            return hasUpper and hasLower and hasNum and hasSpecial",
                "codeTag": "Python3"
            },
            {
                "id": 2250987,
                "title": "c-simple-clean-easy-o-n-try-it-once",
                "content": "If its helpful then please **UPVOTE !!**\\n```\\nbool strongPasswordCheckerII(string pw) {\\n        \\n        if(pw.size() < 8)\\n            return false;\\n        \\n        vector<int> v(4, 0);    // Check-List for upper, lower, digit\\n        \\n        for(int i=0 ; i<pw.size() ; i++){\\n            if(pw[i]>=\\'0\\' && pw[i]<=\\'9\\')\\n                v[0] = 1;\\n            else if(pw[i]>=\\'a\\' && pw[i]<=\\'z\\')\\n                v[1] = 1;\\n            else if(pw[i]>=\\'A\\' && pw[i]<=\\'Z\\')\\n                v[2] = 1;\\n            else\\n                v[3] = 1;\\n        }\\n        for(int i=1 ; i<pw.size() ; i++){\\n            if(pw[i] == pw[i-1])\\n                return false;\\n        }\\n        for(int i=0 ; i<4 ; i++){\\n            if(v[i] == 0)\\n                return false;\\n        }\\n        return true;\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nbool strongPasswordCheckerII(string pw) {\\n        \\n        if(pw.size() < 8)\\n            return false;\\n        \\n        vector<int> v(4, 0);    // Check-List for upper, lower, digit\\n        \\n        for(int i=0 ; i<pw.size() ; i++){\\n            if(pw[i]>=\\'0\\' && pw[i]<=\\'9\\')\\n                v[0] = 1;\\n            else if(pw[i]>=\\'a\\' && pw[i]<=\\'z\\')\\n                v[1] = 1;\\n            else if(pw[i]>=\\'A\\' && pw[i]<=\\'Z\\')\\n                v[2] = 1;\\n            else\\n                v[3] = 1;\\n        }\\n        for(int i=1 ; i<pw.size() ; i++){\\n            if(pw[i] == pw[i-1])\\n                return false;\\n        }\\n        for(int i=0 ; i<4 ; i++){\\n            if(v[i] == 0)\\n                return false;\\n        }\\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2247716,
                "title": "javascript-regex-solution",
                "content": "Check for at least 1 number -> (?=.\\\\d) \\nCheck for at least 1 special character -> (?=.[!@#$%^&)(+-])\\nCheck for at least 1 lower and 1 uppercase character -> (?=.[a-z])(?=.[A-Z])\\nCheck for no repeating characters -> (?!.([A-Za-z0-9!@#$%^&)(+-])\\\\1)\\nCheck if length is at least 8 character -> .{8,}$   \\n\\n```\\nvar strongPasswordCheckerII = function(password) {\\n    const strong = /^(?=.*\\\\d)(?=.*[!@#$%^&*)(+-])(?=.*[a-z])(?=.*[A-Z])(?!.*([A-Za-z0-9!@#$%^&*)(+-])\\\\1).{8,}$/;\\n    return strong.test(password);\\n};\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar strongPasswordCheckerII = function(password) {\\n    const strong = /^(?=.*\\\\d)(?=.*[!@#$%^&*)(+-])(?=.*[a-z])(?=.*[A-Z])(?!.*([A-Za-z0-9!@#$%^&*)(+-])\\\\1).{8,}$/;\\n    return strong.test(password);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2238784,
                "title": "java-0ms-100-fast-with-bitmasking",
                "content": "**Caveat**: This solution intends to optimize speed.  It\\'s not quite as simple as some of the others, yet it\\'s reasonably easy to follow.\\n\\n**Intuition**: The slowest part of this problem will be figuring out which character class each character belongs to, and whether all four are covered.  Bitmasking is fast, so perhaps we can do something clever with it.  We can score lower case as 1, upper case as 2, digits as 4 and special characters as 8.  We can track the bitwise-OR-sum of these scores (accumulated bitwise-OR of each character\\'s score) and if it\\'s 15 =  `(1 | 2 | 4 | 8)` then all four classes are covered, else they are not.  But, unless we come up with a fast way to look up a score for a given character, we\\'ll still be in the same situation.  Array indexing is pretty fast.  We can create an array of size 128 (enough for 7-bit ASCII and more than enough for the problem input constraints) to store each 7-bit ASCII character\\'s score.  We initialize the array (to all zeros) then for each lower case character, we write a 1 at its index, for each upper case character, we write a 2 at its index, for each digit we write a 4 at its index, and for each special character, we write an 8 at its index.\\n\\n**A Note on the Use of Static Constants and Initializers**: The values we are storing in the static fields never change, even between starts and stops of the JVM.  So they are safe to use as static values.  We don\\'t need to recompute them every time a new Solution() instance is constructed, and we definitely don\\'t need to do it every time our solution method is called.  Once per class load is fine.  We use a static initializer here to fill in correct values in the 128-length MASK_MAP array.  This way, we only repeat the calculation once per class load.\\n\\n**Java Code**:\\n```\\nclass Solution {\\n\\n    static final int[] MASK_MAP = new int[128]; // enough to cover 7-bit ASCII and input constraints\\n    static final int LOWER = 1;\\n    static final int UPPER = 2;\\n    static final int DIGIT = 4;\\n    static final int SPECIAL = 8;\\n    static final int COVERED = (LOWER | UPPER | DIGIT | SPECIAL);\\n    \\n    static {\\n        for (int i = 0; i < 26; ++i) {\\n            MASK_MAP[\\'a\\' + i] = LOWER;\\n            MASK_MAP[\\'A\\' + i] = UPPER;\\n        }\\n        for (int i = 0; i < 10; ++i) {\\n            MASK_MAP[\\'0\\' + i] = DIGIT;\\n        }\\n        for (char ch : \"!@#$%^&*()-+\".toCharArray()) {\\n            MASK_MAP[(int) ch] = SPECIAL;\\n        }\\n    }\\n\\n    public boolean strongPasswordCheckerII(String password) {\\n        if (password.length() < 8) {\\n            return false; // not length 8\\n        }\\n        char last = (char) 0; // (char) 0 is not valid input, so won\\'t match password[0]\\n        int coverage = 0;\\n        for (int i = 0; i < password.length(); ++i) {\\n            final char ch = password.charAt(i);\\n            if (ch == last) {\\n                return false; // two consecutive of the same character\\n            }\\n            coverage |= MASK_MAP[(int) ch]; // track our coverage of the four character classes\\n            last = ch;\\n        }\\n        return (coverage == COVERED); // true if all four character classes are covered\\n    }\\n\\n}\\n```\\n\\n**Complexity**: If we assume this class is loaded into the JVM once and used many times, such that we can disregard any complexity in the static initializers, then we have an O(1) space and O(n) time solution.  Runtime as of July, 2022 is 0ms, faster than 100%.\\n\\n**Complexity Update, 2022-07-15**: I have seen posts that each test case is run in a separate JVM - if that is the case, the static initializer contributes O(1) time and O(1) space in that is is unrelated to the password input, but has O(c) time complexity where c is the number of allowed characters in the password (e.g. 52 alpha, 10 numeric and 12 special -> 84 array assignments because 84 characters are allowed).  Size is constant at 128, though this choice is arbitrary and somewhat related to the set of allowed characters - it must be at least that large, so it seems reasonable to say it is O(c) as well.\\n\\n**Standard Plea**: If you found this solution outline helpful or interesting or at least not boring, please do me a solid and **upvote this post**.  If you are were bored, annoyed, or otherwise inconvenienced by this solution, I can\\'t give you your money back, but if you want to post some comments, I\\'d be **happy to receive your suggestions**.  Please route any personal attacks, spam or phishing to /dev/null, and keep all arms and legs in the car until the ride comes to a complete stop.  Thanks, and happy coding!\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\n    static final int[] MASK_MAP = new int[128]; // enough to cover 7-bit ASCII and input constraints\\n    static final int LOWER = 1;\\n    static final int UPPER = 2;\\n    static final int DIGIT = 4;\\n    static final int SPECIAL = 8;\\n    static final int COVERED = (LOWER | UPPER | DIGIT | SPECIAL);\\n    \\n    static {\\n        for (int i = 0; i < 26; ++i) {\\n            MASK_MAP[\\'a\\' + i] = LOWER;\\n            MASK_MAP[\\'A\\' + i] = UPPER;\\n        }\\n        for (int i = 0; i < 10; ++i) {\\n            MASK_MAP[\\'0\\' + i] = DIGIT;\\n        }\\n        for (char ch : \"!@#$%^&*()-+\".toCharArray()) {\\n            MASK_MAP[(int) ch] = SPECIAL;\\n        }\\n    }\\n\\n    public boolean strongPasswordCheckerII(String password) {\\n        if (password.length() < 8) {\\n            return false; // not length 8\\n        }\\n        char last = (char) 0; // (char) 0 is not valid input, so won\\'t match password[0]\\n        int coverage = 0;\\n        for (int i = 0; i < password.length(); ++i) {\\n            final char ch = password.charAt(i);\\n            if (ch == last) {\\n                return false; // two consecutive of the same character\\n            }\\n            coverage |= MASK_MAP[(int) ch]; // track our coverage of the four character classes\\n            last = ch;\\n        }\\n        return (coverage == COVERED); // true if all four character classes are covered\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2226865,
                "title": "smart-and-easy-way-c",
                "content": "```\\n    public bool StrongPasswordCheckerII(string password) {\\n        if( password.Length < 8)\\n            return false;\\n        HashSet<char> set = \"!@#$%^&*()-+\".ToHashSet();\\n        bool lower = false;\\n        bool upper = false;\\n        bool number = false;\\n        bool special = false;\\n\\n        for (int i = 0; i < password.Length; i++)\\n        {\\n            if(i < password.Length - 1 && password[i] == password[i + 1])\\n                return false;\\n            if (Char.IsLower(password[i]))\\n                lower = true;\\n            else if (Char.IsUpper(password[i]))\\n                upper = true;\\n            else if (Char.IsNumber(password[i]))\\n                number = true;\\n            else if (set.Contains(password[i]))\\n                special = true;\\n        }\\n\\n        return lower && upper && number && special;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public bool StrongPasswordCheckerII(string password) {\\n        if( password.Length < 8)\\n            return false;\\n        HashSet<char> set = \"!@#$%^&*()-+\".ToHashSet();\\n        bool lower = false;\\n        bool upper = false;\\n        bool number = false;\\n        bool special = false;\\n\\n        for (int i = 0; i < password.Length; i++)\\n        {\\n            if(i < password.Length - 1 && password[i] == password[i + 1])\\n                return false;\\n            if (Char.IsLower(password[i]))\\n                lower = true;\\n            else if (Char.IsUpper(password[i]))\\n                upper = true;\\n            else if (Char.IsNumber(password[i]))\\n                number = true;\\n            else if (set.Contains(password[i]))\\n                special = true;\\n        }\\n\\n        return lower && upper && number && special;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2197713,
                "title": "python-simple-maths",
                "content": "\\n    def strongPasswordCheckerII(self, password):\\n        a1 = len(password) >= 8\\n        a2 = sum([i.islower() for i in password]) >= 1\\n        a3 = sum([i.isupper() for i in password]) >= 1\\n        a4 = sum([i.isdigit() for i in password]) >= 1\\n        a5 = sum([i in \"!@#$%^&*()-+\" for i in password]) >= 1\\n        a6 = all(password[i-1] != password[i] for i in range(1,len(password)))\\n        \\n        return a1 and a2 and a3 and a4 and a5 and a6",
                "solutionTags": [],
                "code": "\\n    def strongPasswordCheckerII(self, password):\\n        a1 = len(password) >= 8\\n        a2 = sum([i.islower() for i in password]) >= 1\\n        a3 = sum([i.isupper() for i in password]) >= 1\\n        a4 = sum([i.isdigit() for i in password]) >= 1\\n        a5 = sum([i in \"!@#$%^&*()-+\" for i in password]) >= 1\\n        a6 = all(password[i-1] != password[i] for i in range(1,len(password)))\\n        \\n        return a1 and a2 and a3 and a4 and a5 and a6",
                "codeTag": "Python3"
            },
            {
                "id": 2157183,
                "title": "easy-and-simple-to-understand",
                "content": "class Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        if(password.size()<8)\\n            return false;\\n        string s=\"!@#$%^&*()-+\";\\n        bool flag1=false,flag2=false,flag3=false,flag4=false;\\n        for(int i=0;i<password.size();i++)\\n        {\\n            if(i>0 && password[i]==password[i-1])\\n                return false;\\n            if(password[i]>=\\'a\\' && password[i]<=\\'z\\')\\n                flag1=true;\\n             if(password[i]>=\\'A\\' && password[i]<=\\'Z\\')\\n                flag2=true;\\n             if(password[i]>=\\'0\\' && password[i]<=\\'9\\')\\n                flag3=true;\\n            for(auto x:s)\\n                if(password[i]==x)\\n                    flag4=true;                       \\n        }\\n        if(flag1 && flag2 && flag3 && flag4)\\n                return true;\\n        else\\n\\t\\treturn false;        \\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        if(password.size()<8)\\n            return false;\\n        string s=\"!@#$%^&*()-+\";\\n        bool flag1=false,flag2=false,flag3=false,flag4=false;\\n        for(int i=0;i<password.size();i++)\\n        {\\n            if(i>0 && password[i]==password[i-1])\\n                return false;\\n            if(password[i]>=\\'a\\' && password[i]<=\\'z\\')\\n                flag1=true;\\n             if(password[i]>=\\'A\\' && password[i]<=\\'Z\\')\\n                flag2=true;\\n             if(password[i]>=\\'0\\' && password[i]<=\\'9\\')\\n                flag3=true;\\n            for(auto x:s)\\n                if(password[i]==x)\\n                    flag4=true;                       \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2150106,
                "title": "java-simple-for-reading",
                "content": "Runtime: 0 ms, faster than 100.00% of Java online submissions for Strong Password Checker II.\\nMemory Usage: 40.1 MB, less than 98.77% of Java online submissions for Strong Password Checker II.\\n```\\nclass Solution {\\n  public boolean strongPasswordCheckerII(String password) {\\n    if(password.length() < 8) return false;\\n    \\n    boolean l = false, u = false, d = false, s = false;\\n    String special = \"!@#$%^&*()-+\";\\n    char previous  = \\'.\\';\\n    \\n    for(int i = 0; i != password.length(); i++){\\n      char ch = password.charAt(i);\\n      \\n      if(ch == previous) return false;\\n      previous = ch;\\n      \\n      if     (ch >= \\'A\\' && ch <= \\'Z\\') u = true;\\n      else if(ch >= \\'a\\' && ch <= \\'z\\') l = true;\\n      else if(ch >= \\'0\\' && ch <= \\'9\\') d = true;\\n      else if(special.indexOf(ch) != -1) s = true;\\n      else return false; \\n    }\\n    \\n    return l && u && d && s;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n  public boolean strongPasswordCheckerII(String password) {\\n    if(password.length() < 8) return false;\\n    \\n    boolean l = false, u = false, d = false, s = false;\\n    String special = \"!@#$%^&*()-+\";\\n    char previous  = \\'.\\';\\n    \\n    for(int i = 0; i != password.length(); i++){\\n      char ch = password.charAt(i);\\n      \\n      if(ch == previous) return false;\\n      previous = ch;\\n      \\n      if     (ch >= \\'A\\' && ch <= \\'Z\\') u = true;\\n      else if(ch >= \\'a\\' && ch <= \\'z\\') l = true;\\n      else if(ch >= \\'0\\' && ch <= \\'9\\') d = true;\\n      else if(special.indexOf(ch) != -1) s = true;\\n      else return false; \\n    }\\n    \\n    return l && u && d && s;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2148082,
                "title": "java-regex-solution",
                "content": "\\tclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        int passwordLength = password.length();\\n        \\n        //has at least 8 characters\\n        if(passwordLength < 8)\\n            return false;\\n        \\n        //contains at least one lowercase letter\\n        if(password.replaceAll(\"[a-z]\",\"\").length() == passwordLength)\\n            return false;\\n        \\n        //contains at least one uppercase letter\\n        if(password.replaceAll(\"[A-Z]\",\"\").length() == passwordLength)\\n            return false;\\n        \\n        //contains at least one digit\\n        if(password.replaceAll(\"[0-9]\",\"\").length() == passwordLength)\\n            return false;\\n        \\n        //contains at least one special character\\n        if(password.replaceAll(\"[!@#$%^&*()-.+]\",\"\").length() == passwordLength)\\n            return false;\\n        \\n        //checking for adjacent characters\\n        for(int i=1; i<passwordLength; i++){\\n            if(password.charAt(i-1) == password.charAt(i))\\n                return false;\\n        }\\n        \\n        return true;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        int passwordLength = password.length();\\n        \\n        //has at least 8 characters\\n        if(passwordLength < 8)\\n            return false;\\n        \\n        //contains at least one lowercase letter\\n        if(password.replaceAll(\"[a-z]\",\"\").length() == passwordLength)\\n            return false;\\n        \\n        //contains at least one uppercase letter\\n        if(password.replaceAll(\"[A-Z]\",\"\").length() == passwordLength)\\n            return false;\\n        \\n        //contains at least one digit\\n        if(password.replaceAll(\"[0-9]\",\"\").length() == passwordLength)\\n            return false;\\n        \\n        //contains at least one special character\\n        if(password.replaceAll(\"[!@#$%^&*()-.+]\",\"\").length() == passwordLength)\\n            return false;\\n        \\n        //checking for adjacent characters\\n        for(int i=1; i<passwordLength; i++){\\n            if(password.charAt(i-1) == password.charAt(i))\\n                return false;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2147494,
                "title": "easy-to-understand-solution-c",
                "content": "```\\n bool strongPasswordCheckerII(string password) {\\n    \\tif(password.size() < 8){\\n    \\t\\treturn false;\\n    \\t}\\n    \\tstring str = \"!@#$%^&*()-+\";\\n    \\tint up = 0 ,down = 0  ,dig = 0 , special = 0;\\n    \\tfor(int i = 1; i < password.size() ; i++){\\n    \\t\\tif(password[i] == password[i-1])\\n    \\t\\t\\treturn false;\\n    \\t}\\n        for(auto it : password){\\n        \\tif(isupper(it))\\n        \\t\\tup++;\\n        \\telse if(islower(it))\\n        \\t\\tdown++;\\n        \\telse if(isdigit(it))\\n        \\t\\tdig++;\\n        \\t\\n        \\tfor(auto i : str){\\n        \\t\\tif(i == it)\\n        \\t\\t\\tspecial++;\\n        \\t}\\n        }\\n        if(up == 0 || down == 0 || dig == 0 || special == 0)\\n        \\treturn false;\\n\\n        return true;\\n    }",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\n bool strongPasswordCheckerII(string password) {\\n    \\tif(password.size() < 8){\\n    \\t\\treturn false;\\n    \\t}\\n    \\tstring str = \"!@#$%^&*()-+\";\\n    \\tint up = 0 ,down = 0  ,dig = 0 , special = 0;\\n    \\tfor(int i = 1; i < password.size() ; i++){\\n    \\t\\tif(password[i] == password[i-1])\\n    \\t\\t\\treturn false;\\n    \\t}\\n        for(auto it : password){\\n        \\tif(isupper(it))\\n        \\t\\tup++;\\n        \\telse if(islower(it))\\n        \\t\\tdown++;\\n        \\telse if(isdigit(it))\\n        \\t\\tdig++;\\n        \\t\\n        \\tfor(auto i : str){\\n        \\t\\tif(i == it)\\n        \\t\\t\\tspecial++;\\n        \\t}\\n        }\\n        if(up == 0 || down == 0 || dig == 0 || special == 0)\\n        \\treturn false;\\n\\n        return true;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2144348,
                "title": "easy-solution-c-brute-force",
                "content": "Code-\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        int n = password.size();\\n        int count_lower=0,count_upper=0,count_digit=0,count_special=0;\\n        if(password.size()<8) return false;\\n        if(islower(password[0])) count_lower++;\\n        if(isupper(password[0]))count_upper++;\\n        if(isdigit(password[0]))count_digit++;\\n        if(password[0] == \\'!\\' || password[0] == \\'@\\' || password[0] == \\'#\\' || password[0] == \\'$\\' || password[0] == \\'%\\' || password[0] == \\'^\\' || password[0] == \\'&\\' || password[0] == \\'*\\' || password[0] == \\'(\\' || password[0] == \\')\\' || password[0] == \\'-\\' || password[0] == \\'+\\') count_special++;\\n        for(int i=1;i<n;i++)\\n        {\\n            if(islower(password[i])) count_lower++;\\n            if(isupper(password[i]))count_upper++;\\n            if(isdigit(password[i]))count_digit++;\\n            if(password[i] == \\'!\\' || password[i] == \\'@\\' || password[i] == \\'#\\' || password[i] == \\'$\\' || password[i] == \\'%\\' || password[i] == \\'^\\' || password[i] == \\'&\\' || password[i] == \\'*\\' || password[i] == \\'(\\' || password[i] == \\')\\' || password[i] == \\'-\\' || password[i] == \\'+\\') count_special++;\\n            if(password[i] == password[i-1]) return false;\\n        }\\n        if(count_lower && count_upper && count_digit && count_special) return true;\\n        return false;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        int n = password.size();\\n        int count_lower=0,count_upper=0,count_digit=0,count_special=0;\\n        if(password.size()<8) return false;\\n        if(islower(password[0])) count_lower++;\\n        if(isupper(password[0]))count_upper++;\\n        if(isdigit(password[0]))count_digit++;\\n        if(password[0] == \\'!\\' || password[0] == \\'@\\' || password[0] == \\'#\\' || password[0] == \\'$\\' || password[0] == \\'%\\' || password[0] == \\'^\\' || password[0] == \\'&\\' || password[0] == \\'*\\' || password[0] == \\'(\\' || password[0] == \\')\\' || password[0] == \\'-\\' || password[0] == \\'+\\') count_special++;\\n        for(int i=1;i<n;i++)\\n        {\\n            if(islower(password[i])) count_lower++;\\n            if(isupper(password[i]))count_upper++;\\n            if(isdigit(password[i]))count_digit++;\\n            if(password[i] == \\'!\\' || password[i] == \\'@\\' || password[i] == \\'#\\' || password[i] == \\'$\\' || password[i] == \\'%\\' || password[i] == \\'^\\' || password[i] == \\'&\\' || password[i] == \\'*\\' || password[i] == \\'(\\' || password[i] == \\')\\' || password[i] == \\'-\\' || password[i] == \\'+\\') count_special++;\\n            if(password[i] == password[i-1]) return false;\\n        }\\n        if(count_lower && count_upper && count_digit && count_special) return true;\\n        return false;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2143836,
                "title": "java-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if(password.length()<8){\\n            return false;\\n        } \\n        boolean lower=false ,upper=false,digit=false,special=false,repeat=true;\\n        Set<Character> set=new HashSet<Character>(Arrays.asList(\\'!\\',\\'@\\',\\'#\\',\\'$\\',\\'%\\',\\'^\\',\\'&\\',\\'*\\',\\'(\\',\\')\\',\\'-\\',\\'_\\',\\'+\\'));\\n        for(char i :password.toCharArray()){\\n            if(Character.isLowerCase(i)){\\n                lower=true;\\n            }\\n            if(Character.isUpperCase(i)){\\n                upper=true;\\n            }\\n            if(Character.isDigit(i)){\\n                digit=true;\\n            }\\n            if(set.contains(i)){\\n                special=true;\\n            }\\n        }\\n        for(int i=0;i<password.length()-1;i++){\\n            if(password.charAt(i)==password.charAt(i+1)){\\n                repeat=false;\\n            }\\n        }\\n        \\n        if(lower==true&&upper==true&&digit==true&&special==true&&repeat==true){\\n            return true ;\\n        }else{\\n            return false ;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if(password.length()<8){\\n            return false;\\n        } \\n        boolean lower=false ,upper=false,digit=false,special=false,repeat=true;\\n        Set<Character> set=new HashSet<Character>(Arrays.asList(\\'!\\',\\'@\\',\\'#\\',\\'$\\',\\'%\\',\\'^\\',\\'&\\',\\'*\\',\\'(\\',\\')\\',\\'-\\',\\'_\\',\\'+\\'));\\n        for(char i :password.toCharArray()){\\n            if(Character.isLowerCase(i)){\\n                lower=true;\\n            }\\n            if(Character.isUpperCase(i)){\\n                upper=true;\\n            }\\n            if(Character.isDigit(i)){\\n                digit=true;\\n            }\\n            if(set.contains(i)){\\n                special=true;\\n            }\\n        }\\n        for(int i=0;i<password.length()-1;i++){\\n            if(password.charAt(i)==password.charAt(i+1)){\\n                repeat=false;\\n            }\\n        }\\n        \\n        if(lower==true&&upper==true&&digit==true&&special==true&&repeat==true){\\n            return true ;\\n        }else{\\n            return false ;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2143560,
                "title": "rust-solution",
                "content": "```\\nimpl Solution {\\n    pub fn strong_password_checker_ii(password: String) -> bool {\\n        if password.len() < 8 {\\n            return false;\\n        }\\n\\n        let mut res = 0;\\n        let mut prev_char = \\' \\';\\n        for c in password.chars() {\\n            match c == prev_char {\\n                true => return false,\\n                _ if c.is_ascii_lowercase() => res |= 0b1,\\n                _ if c.is_ascii_uppercase() => res |= 0b10,\\n                _ if c.is_ascii_digit() => res |= 0b100,\\n                _ => res |= 0b1000, // \"!@#$%^&*()-+\"\\n            }\\n            prev_char = c;\\n        }\\n        res == 0b1111\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Bit Manipulation"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn strong_password_checker_ii(password: String) -> bool {\\n        if password.len() < 8 {\\n            return false;\\n        }\\n\\n        let mut res = 0;\\n        let mut prev_char = \\' \\';\\n        for c in password.chars() {\\n            match c == prev_char {\\n                true => return false,\\n                _ if c.is_ascii_lowercase() => res |= 0b1,\\n                _ if c.is_ascii_uppercase() => res |= 0b10,\\n                _ if c.is_ascii_digit() => res |= 0b100,\\n                _ => res |= 0b1000, // \"!@#$%^&*()-+\"\\n            }\\n            prev_char = c;\\n        }\\n        res == 0b1111\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2142927,
                "title": "python-don-t-click-on-this-because-it-s-too-easy",
                "content": "Code:\\n\\n```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        if len(password)<8: return False\\n        res=[0 for i in range(4)]\\n        for i in range(len(password)):\\n            if password[i] in \"!@#$%^&*()-+\": res[3]=1 #for special char\\n            if 97<=ord(password[i])<=122: res[0]=1 # lowercase letter\\n            if 65<=ord(password[i])<=90: res[1]=1 # uppercase letter\\n            if 48<=ord(password[i])<=57: res[2]=1 # digit \\n            if i<len(password)-1: # finally no two same adjacent values\\n                if password[i+1]==password[i]: return False\\n        return False if 0 in res else True\\n        \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        if len(password)<8: return False\\n        res=[0 for i in range(4)]\\n        for i in range(len(password)):\\n            if password[i] in \"!@#$%^&*()-+\": res[3]=1 #for special char\\n            if 97<=ord(password[i])<=122: res[0]=1 # lowercase letter\\n            if 65<=ord(password[i])<=90: res[1]=1 # uppercase letter\\n            if 48<=ord(password[i])<=57: res[2]=1 # digit \\n            if i<len(password)-1: # finally no two same adjacent values\\n                if password[i+1]==password[i]: return False\\n        return False if 0 in res else True\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2142732,
                "title": "brute-force-approach",
                "content": "```\\nbool strongPasswordCheckerII(string password) {\\n        //1\\n        if(password.length()<8)\\n            return false;\\n      \\n        //6\\n        for(int i=1;i<password.length();i++)\\n        {\\n            if(password[i]==password[i-1])\\n                return false;\\n        }\\n        \\n        int flaga=0,flagb=0,flag1=0,flagspe=0;\\n        for(int i=0;i<password.length();i++)\\n        {      //5\\n               if(password[i]==\\'!\\' || password[i]==\\'@\\' || password[i]==\\'#\\' || password[i]==\\'$\\' || password[i]==\\'%\\' || password[i]==\\'^\\' ||                       password[i]==\\'&\\' || password[i]==\\'*\\' ||password[i]==\\'(\\'||password[i]==\\')\\' || password[i]==\\'-\\' || password[i]==\\'+\\')\\n               {\\n                   flagspe=1;\\n               }\\n               //4\\n               if(password[i]<=57 and password[i]>=48)\\n                   flag1=1;\\n              //2  \\n              if(password[i]<=122 and password[i]>=97)\\n                   flaga=1;\\n              \\n              //3\\n              if(password[i]<=90  and password[i]>=65)\\n                   flagb=1;\\n                   \\n        }\\n        \\n        if(flaga==0 )\\n        {\\n            return false;\\n        }\\n         if(flagb==0 )\\n        {\\n            return false;\\n        }\\n         if(flag1==0 )\\n        {\\n            return false;\\n        }\\n         if(flagspe==0 )\\n        {\\n            return false;\\n        }\\n        \\n        return true;\\n    }\\n\\t```\\n\\t",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool strongPasswordCheckerII(string password) {\\n        //1\\n        if(password.length()<8)\\n            return false;\\n      \\n        //6\\n        for(int i=1;i<password.length();i++)\\n        {\\n            if(password[i]==password[i-1])\\n                return false;\\n        }\\n        \\n        int flaga=0,flagb=0,flag1=0,flagspe=0;\\n        for(int i=0;i<password.length();i++)\\n        {      //5\\n               if(password[i]==\\'!\\' || password[i]==\\'@\\' || password[i]==\\'#\\' || password[i]==\\'$\\' || password[i]==\\'%\\' || password[i]==\\'^\\' ||                       password[i]==\\'&\\' || password[i]==\\'*\\' ||password[i]==\\'(\\'||password[i]==\\')\\' || password[i]==\\'-\\' || password[i]==\\'+\\')\\n               {\\n                   flagspe=1;\\n               }\\n               //4\\n               if(password[i]<=57 and password[i]>=48)\\n                   flag1=1;\\n              //2  \\n              if(password[i]<=122 and password[i]>=97)\\n                   flaga=1;\\n              \\n              //3\\n              if(password[i]<=90  and password[i]>=65)\\n                   flagb=1;\\n                   \\n        }\\n        \\n        if(flaga==0 )\\n        {\\n            return false;\\n        }\\n         if(flagb==0 )\\n        {\\n            return false;\\n        }\\n         if(flag1==0 )\\n        {\\n            return false;\\n        }\\n         if(flagspe==0 )\\n        {\\n            return false;\\n        }\\n        \\n        return true;\\n    }\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 2141153,
                "title": "ez-c",
                "content": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        if(password.length()<8)\\n            return false;\\n        string specialChar=\"!@#$%^&*()-+\";\\n        bool lowerCase=false,upperCase=false,digit=false,special=false;\\n        for(int i=0;i<password.length();i++){\\n            if(islower(password[i]))\\n                lowerCase=true;\\n            if(isupper(password[i]))\\n                upperCase=true;\\n            if(specialChar.find(password[i])!=string::npos)\\n                special=true;\\n            if(isdigit(password[i]))\\n                digit=true;\\n            if(i<password.length()-1&&password[i]==password[i+1])\\n                return false;\\n        }\\n        if(lowerCase&&upperCase&&digit&&special)\\n            return true;\\n        return false;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        if(password.length()<8)\\n            return false;\\n        string specialChar=\"!@#$%^&*()-+\";\\n        bool lowerCase=false,upperCase=false,digit=false,special=false;\\n        for(int i=0;i<password.length();i++){\\n            if(islower(password[i]))\\n                lowerCase=true;\\n            if(isupper(password[i]))\\n                upperCase=true;\\n            if(specialChar.find(password[i])!=string::npos)\\n                special=true;\\n            if(isdigit(password[i]))\\n                digit=true;\\n            if(i<password.length()-1&&password[i]==password[i+1])\\n                return false;\\n        }\\n        if(lowerCase&&upperCase&&digit&&special)\\n            return true;\\n        return false;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2140815,
                "title": "rust-pattern-match-and-bitset",
                "content": "```rust\\nimpl Solution {\\n    pub fn strong_password_checker_ii(password: String) -> bool {\\n        let password = password.into_bytes();\\n        if password.len() < 8 {\\n            return false;\\n        }\\n\\n        let lower = 0x1;\\n        let upper = lower << 1;\\n        let digit = lower << 2;\\n        let special = lower << 3;\\n        let mut bitset = 0;\\n        let mut last = 0;\\n        for b in password {\\n            if last == b {\\n                return false;\\n            }\\n            last = b;\\n\\n            match b {\\n                b\\'a\\'..=b\\'z\\' => bitset |= lower,\\n                b\\'A\\'..=b\\'Z\\' => bitset |= upper,\\n                b\\'0\\'..=b\\'9\\' => bitset |= digit,\\n                b\\'!\\' | b\\'@\\' | b\\'#\\' | b\\'$\\' | b\\'%\\' | b\\'^\\' | b\\'&\\' | b\\'*\\' | b\\'(\\' | b\\')\\' | b\\'-\\' | b\\'+\\' => bitset |= special,\\n                _ => {}\\n            }\\n        }\\n        bitset == lower | upper | digit | special\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn strong_password_checker_ii(password: String) -> bool {\\n        let password = password.into_bytes();\\n        if password.len() < 8 {\\n            return false;\\n        }\\n\\n        let lower = 0x1;\\n        let upper = lower << 1;\\n        let digit = lower << 2;\\n        let special = lower << 3;\\n        let mut bitset = 0;\\n        let mut last = 0;\\n        for b in password {\\n            if last == b {\\n                return false;\\n            }\\n            last = b;\\n\\n            match b {\\n                b\\'a\\'..=b\\'z\\' => bitset |= lower,\\n                b\\'A\\'..=b\\'Z\\' => bitset |= upper,\\n                b\\'0\\'..=b\\'9\\' => bitset |= digit,\\n                b\\'!\\' | b\\'@\\' | b\\'#\\' | b\\'$\\' | b\\'%\\' | b\\'^\\' | b\\'&\\' | b\\'*\\' | b\\'(\\' | b\\')\\' | b\\'-\\' | b\\'+\\' => bitset |= special,\\n                _ => {}\\n            }\\n        }\\n        bitset == lower | upper | digit | special\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2140638,
                "title": "c-easy-to-understand-o-n-solution",
                "content": "class Solution {\\npublic:\\n    bool strongPasswordCheckerII(string p) {\\n        if(p.size() < 8) return false;\\n        bool low = false , upper = false ,digit = false ,special = false;\\n        for(auto c : p){\\n            if(c>=\\'a\\' and c<=\\'z\\') low = true; // checking is it having lower character\\n            else if(c>=\\'A\\' and c <=\\'Z\\') upper = true; //checking is it having upper character\\n            else if(isdigit(c)) digit = true; // checking is it contains digit\\n            else special = true; // or it has special character\\n        }\\n        //Check the 6th condition\\n        for(int i=0;i<p.size();i++) if(p[i] == p[i+1]) return false;\\n        if(low and upper and digit and special) return true;\\n        return false;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    bool strongPasswordCheckerII(string p) {\\n        if(p.size() < 8) return false;\\n        bool low = false , upper = false ,digit = false ,special = false;\\n        for(auto c : p){\\n            if(c>=\\'a\\' and c<=\\'z\\') low = true; // checking is it having lower character\\n            else if(c>=\\'A\\' and c <=\\'Z\\') upper = true; //checking is it having upper character\\n            else if(isdigit(c)) digit = true; // checking is it contains digit\\n            else special = true; // or it has special character\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2139702,
                "title": "c-linq-one-liner-6-lines",
                "content": "```\\npublic class Solution \\n{\\n    public bool StrongPasswordCheckerII(string password) \\n        => password.Length >= 8 && \\n           password.Any(Char.IsDigit) && \\n           password.Any(Char.IsUpper) && \\n           password.Any(Char.IsLower) && \\n           password.Any(\"!@#$%^&*()-+\".Contains) &&\\n           password.Zip(password.Skip(1), (prev, cur) => prev != cur).All(true.Equals);\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution \\n{\\n    public bool StrongPasswordCheckerII(string password) \\n        => password.Length >= 8 && \\n           password.Any(Char.IsDigit) && \\n           password.Any(Char.IsUpper) && \\n           password.Any(Char.IsLower) && \\n           password.Any(\"!@#$%^&*()-+\".Contains) &&\\n           password.Zip(password.Skip(1), (prev, cur) => prev != cur).All(true.Equals);\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2139687,
                "title": "simple-intuitive-c-solution-2ms",
                "content": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        int cntLower = 0;\\n        int cntUpper = 0;\\n        int cntDigit = 0;\\n        int cntSpecial = 0;\\n        int n = password.size();\\n        if (n < 8){\\n            return false;\\n        }\\n        for (int i=0;i<n;i++ ){\\n            if (i < n-1){\\n                if (password[i] == password[i+1]){\\n                    return false;\\n                }\\n            }\\n            if (isupper(password[i])){\\n                cntUpper++;\\n            }\\n            else if (islower(password[i])){\\n                cntLower++;\\n            }\\n            else if (password[i] >= \\'0\\' && password[i] <= \\'9\\'){\\n                cntDigit++;\\n            }\\n            else {\\n                cntSpecial++;\\n            }\\n        }\\n        if (cntUpper < 1 || cntLower < 1 || cntDigit < 1 || cntSpecial < 1){\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        int cntLower = 0;\\n        int cntUpper = 0;\\n        int cntDigit = 0;\\n        int cntSpecial = 0;\\n        int n = password.size();\\n        if (n < 8){\\n            return false;\\n        }\\n        for (int i=0;i<n;i++ ){\\n            if (i < n-1){\\n                if (password[i] == password[i+1]){\\n                    return false;\\n                }\\n            }\\n            if (isupper(password[i])){\\n                cntUpper++;\\n            }\\n            else if (islower(password[i])){\\n                cntLower++;\\n            }\\n            else if (password[i] >= \\'0\\' && password[i] <= \\'9\\'){\\n                cntDigit++;\\n            }\\n            else {\\n                cntSpecial++;\\n            }\\n        }\\n        if (cntUpper < 1 || cntLower < 1 || cntDigit < 1 || cntSpecial < 1){\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2139592,
                "title": "faster-easy-to-understand-c-code",
                "content": "* ***Time Complexity : O(N)***\\n\\n* ***Space Complexity : O(1)***\\n\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string str) {\\n        \\n        int n = str.size();\\n        \\n        if(n < 8)\\n            return false;\\n        \\n        bool l = false;\\n        \\n        bool u = false;\\n        \\n        bool d = false;\\n        \\n        bool sc = false;\\n        \\n        for(int i = 0; i < n - 1; i++)\\n        {\\n            if(str[i] == str[i + 1])\\n                return false;\\n        }\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            if(str[i] >= \\'a\\' && str[i] <= \\'z\\')\\n            {\\n                l = true;\\n            }\\n            else if(str[i] >= \\'A\\' && str[i] <= \\'Z\\')\\n            {\\n                u = true;\\n            }\\n            else if(isdigit(str[i]))\\n            {\\n                d = true;\\n            }\\n            else\\n            {\\n                sc = true;\\n            }\\n        }\\n        \\n        return (l && u && d && sc);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string str) {\\n        \\n        int n = str.size();\\n        \\n        if(n < 8)\\n            return false;\\n        \\n        bool l = false;\\n        \\n        bool u = false;\\n        \\n        bool d = false;\\n        \\n        bool sc = false;\\n        \\n        for(int i = 0; i < n - 1; i++)\\n        {\\n            if(str[i] == str[i + 1])\\n                return false;\\n        }\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            if(str[i] >= \\'a\\' && str[i] <= \\'z\\')\\n            {\\n                l = true;\\n            }\\n            else if(str[i] >= \\'A\\' && str[i] <= \\'Z\\')\\n            {\\n                u = true;\\n            }\\n            else if(isdigit(str[i]))\\n            {\\n                d = true;\\n            }\\n            else\\n            {\\n                sc = true;\\n            }\\n        }\\n        \\n        return (l && u && d && sc);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2139460,
                "title": "c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string pass) {\\n        if(pass.size()<8)\\n            return 0;\\n        \\n        bool f1,f2,f3,f4;\\n        f1 = f2 = f3 = f4 = 0;\\n        \\n        int n = pass.size();\\n        \\n        set<char> st = {\\'!\\',\\'@\\',\\'#\\',\\'$\\',\\'%\\',\\'^\\',\\'&\\',\\'*\\',\\'(\\',\\')\\',\\'-\\',\\'+\\'};\\n        \\n        for(int i=0;i<n;i++)\\n        {\\n            if(i!=0)\\n            {\\n                if(pass[i]==pass[i-1])\\n                    return 0;\\n            }\\n            \\n            if(pass[i]>=\\'a\\' and pass[i]<=\\'z\\')\\n                f1 = 1;\\n            \\n            if(pass[i]>=\\'A\\' and pass[i]<=\\'Z\\')\\n                f2 = 1;\\n            \\n            if(pass[i]>=\\'0\\' and pass[i]<=\\'9\\')\\n                f3 = 1;\\n            \\n            if(st.find(pass[i])!=st.end())\\n                f4 = 1;\\n        }\\n        \\n        if(f1 and f2 and f3 and f4)\\n            return 1;\\n        \\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string pass) {\\n        if(pass.size()<8)\\n            return 0;\\n        \\n        bool f1,f2,f3,f4;\\n        f1 = f2 = f3 = f4 = 0;\\n        \\n        int n = pass.size();\\n        \\n        set<char> st = {\\'!\\',\\'@\\',\\'#\\',\\'$\\',\\'%\\',\\'^\\',\\'&\\',\\'*\\',\\'(\\',\\')\\',\\'-\\',\\'+\\'};\\n        \\n        for(int i=0;i<n;i++)\\n        {\\n            if(i!=0)\\n            {\\n                if(pass[i]==pass[i-1])\\n                    return 0;\\n            }\\n            \\n            if(pass[i]>=\\'a\\' and pass[i]<=\\'z\\')\\n                f1 = 1;\\n            \\n            if(pass[i]>=\\'A\\' and pass[i]<=\\'Z\\')\\n                f2 = 1;\\n            \\n            if(pass[i]>=\\'0\\' and pass[i]<=\\'9\\')\\n                f3 = 1;\\n            \\n            if(st.find(pass[i])!=st.end())\\n                f4 = 1;\\n        }\\n        \\n        if(f1 and f2 and f3 and f4)\\n            return 1;\\n        \\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2139376,
                "title": "java",
                "content": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        boolean valid = false;\\n        boolean lc=false;\\n        boolean uc=false;\\n        boolean d=false;\\n        boolean sc=false;\\n        if (password.length()<8) \\n            {\\n                valid = false;\\n                System.out.println(\"not acceptable.\");\\n                return false;\\n            }\\n\\n            //      Checks each character to see if it is acceptable.\\n            for (int i = 0; i < password.length(); i++){\\n                char c = password.charAt(i);\\n               if(i > 0 && password.charAt(i)==password.charAt(i-1))return false;\\n                    if (Character.isLowerCase(c)) lc = true;\\n                    if(Character.isUpperCase(c)) uc = true;\\n                    if (Character.isDigit(c)) d = true;\\n                    if (c == \\'$\\' || c == \\'#\\' || c == \\'@\\' || c == \\'!\\' || c == \\'-\\' || c == \\'+\\' || c == \\'%\\'||c == \\'&\\'||\\n                    c == \\'*\\' || c == \\'^\\' || c == \\'(\\' || c == \\')\\') sc = true;\\n         } \\n        valid = lc & uc & d & sc;\\n          return valid;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        boolean valid = false;\\n        boolean lc=false;\\n        boolean uc=false;\\n        boolean d=false;\\n        boolean sc=false;\\n        if (password.length()<8) \\n            {\\n                valid = false;\\n                System.out.println(\"not acceptable.\");\\n                return false;\\n            }\\n\\n            //      Checks each character to see if it is acceptable.\\n            for (int i = 0; i < password.length(); i++){\\n                char c = password.charAt(i);\\n               if(i > 0 && password.charAt(i)==password.charAt(i-1))return false;\\n                    if (Character.isLowerCase(c)) lc = true;\\n                    if(Character.isUpperCase(c)) uc = true;\\n                    if (Character.isDigit(c)) d = true;\\n                    if (c == \\'$\\' || c == \\'#\\' || c == \\'@\\' || c == \\'!\\' || c == \\'-\\' || c == \\'+\\' || c == \\'%\\'||c == \\'&\\'||\\n                    c == \\'*\\' || c == \\'^\\' || c == \\'(\\' || c == \\')\\') sc = true;\\n         } \\n        valid = lc & uc & d & sc;\\n          return valid;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2139300,
                "title": "strong-password-checker-ii",
                "content": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if (password.length() < 8) return false;\\n       \\n        boolean lower = false;\\n        boolean upper = false;\\n        boolean digit = false;\\n        boolean sp = false;\\n\\n        char[] a = password.toCharArray();\\n        if (Character.isDigit(a[0])) {\\n            digit = true;\\n        }\\n        if (Character.isUpperCase(a[0])) {\\n            upper = true;\\n        }\\n        if (Character.isLowerCase(a[0])) {\\n            lower = true;\\n        }\\n        if (\"!@#$%^&*()-+\".contains(a[0] + \"\")) {\\n            sp = true;\\n        }\\n        for (int i = 1; i < a.length; i++) {\\n            if(a[i]==a[i-1])return false;\\n            if (Character.isDigit(a[i])) {\\n                digit = true;\\n            }\\n            if (Character.isUpperCase(a[i])) {\\n                upper = true;\\n            }\\n            if (Character.isLowerCase(a[i])) {\\n                lower = true;\\n            }\\n            if (\"/*!@#$%^&*()\\\\\"{}_[]|\\\\\\\\?/<>,.\".contains(a[i] + \"\")) {\\n                sp = true;\\n            }\\n        }\\n        return sp && lower && upper && digit;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if (password.length() < 8) return false;\\n       \\n        boolean lower = false;\\n        boolean upper = false;\\n        boolean digit = false;\\n        boolean sp = false;\\n\\n        char[] a = password.toCharArray();\\n        if (Character.isDigit(a[0])) {\\n            digit = true;\\n        }\\n        if (Character.isUpperCase(a[0])) {\\n            upper = true;\\n        }\\n        if (Character.isLowerCase(a[0])) {\\n            lower = true;\\n        }\\n        if (\"!@#$%^&*()-+\".contains(a[0] + \"\")) {\\n            sp = true;\\n        }\\n        for (int i = 1; i < a.length; i++) {\\n            if(a[i]==a[i-1])return false;\\n            if (Character.isDigit(a[i])) {\\n                digit = true;\\n            }\\n            if (Character.isUpperCase(a[i])) {\\n                upper = true;\\n            }\\n            if (Character.isLowerCase(a[i])) {\\n                lower = true;\\n            }\\n            if (\"/*!@#$%^&*()\\\\\"{}_[]|\\\\\\\\?/<>,.\".contains(a[i] + \"\")) {\\n                sp = true;\\n            }\\n        }\\n        return sp && lower && upper && digit;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2139012,
                "title": "java-easiest-solution-brute-force",
                "content": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        \\n        if(password.length()<8)\\n            return false;\\n        \\n        boolean f1 = false;\\n        boolean f2 = false;\\n        boolean f3 = false;\\n        boolean f4 = false;\\n      \\n        \\n        \\n       \\n        for(char ch:password.toCharArray()){\\n          \\n            if(ch>=\\'a\\' && ch<=\\'z\\')\\n                f1 = true;\\n            \\n            else if(ch>=\\'A\\' && ch<=\\'Z\\')\\n                f2 = true;\\n            \\n            else if(ch>=\\'0\\' && ch<=\\'9\\')\\n                f3 = true;\\n            \\n            else\\n                f4 = true;\\n            \\n        }\\n        \\n        \\n        for(int i=1;i<password.length();i++){\\n            if(password.charAt(i)==password.charAt(i-1))\\n                return false;\\n        }\\n        \\n        if(f1&&f2&&f3&&f4)\\n            return true;\\n        \\n        else\\n            return false;\\n        \\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        \\n        if(password.length()<8)\\n            return false;\\n        \\n        boolean f1 = false;\\n        boolean f2 = false;\\n        boolean f3 = false;\\n        boolean f4 = false;\\n      \\n        \\n        \\n       \\n        for(char ch:password.toCharArray()){\\n          \\n            if(ch>=\\'a\\' && ch<=\\'z\\')\\n                f1 = true;\\n            \\n            else if(ch>=\\'A\\' && ch<=\\'Z\\')\\n                f2 = true;\\n            \\n            else if(ch>=\\'0\\' && ch<=\\'9\\')\\n                f3 = true;\\n            \\n            else\\n                f4 = true;\\n            \\n        }\\n        \\n        \\n        for(int i=1;i<password.length();i++){\\n            if(password.charAt(i)==password.charAt(i-1))\\n                return false;\\n        }\\n        \\n        if(f1&&f2&&f3&&f4)\\n            return true;\\n        \\n        else\\n            return false;\\n        \\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2138989,
                "title": "efficient-easy-solution",
                "content": "```\\nclass Solution {\\n    typedef long long ll;\\n    typedef long double ld;\\n    typedef vector<ll> vi;\\n    typedef pair<ll, ll> pi;\\n#define endl \\'\\\\n\\'\\n    static const ll mod = 1e9;\\npublic:\\n    bool strongPasswordCheckerII(string& s) {\\n        if(s.length()<8)\\n            return false;\\n        string specChars = \"!@#$%^&*()-+\";\\n        ll sz = s.length();\\n        bool dig = false,\\n            up = false,\\n            low = false,\\n            spec = false;\\n        for (ll i = 0;i < sz;++i) {\\n            dig |= s[i] >= \\'0\\' && s[i] <= \\'9\\';\\n            up |= s[i] >= \\'A\\' && s[i] <= \\'Z\\';\\n            low |= s[i] >= \\'a\\' && s[i] <= \\'z\\';\\n            spec |= specChars.find(s[i]) != string::npos;\\n            if (i && s[i] == s[i - 1])\\n                return false;\\n        }\\n        return (up && low && dig && spec);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    typedef long long ll;\\n    typedef long double ld;\\n    typedef vector<ll> vi;\\n    typedef pair<ll, ll> pi;\\n#define endl \\'\\\\n\\'\\n    static const ll mod = 1e9;\\npublic:\\n    bool strongPasswordCheckerII(string& s) {\\n        if(s.length()<8)\\n            return false;\\n        string specChars = \"!@#$%^&*()-+\";\\n        ll sz = s.length();\\n        bool dig = false,\\n            up = false,\\n            low = false,\\n            spec = false;\\n        for (ll i = 0;i < sz;++i) {\\n            dig |= s[i] >= \\'0\\' && s[i] <= \\'9\\';\\n            up |= s[i] >= \\'A\\' && s[i] <= \\'Z\\';\\n            low |= s[i] >= \\'a\\' && s[i] <= \\'z\\';\\n            spec |= specChars.find(s[i]) != string::npos;\\n            if (i && s[i] == s[i - 1])\\n                return false;\\n        }\\n        return (up && low && dig && spec);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2138920,
                "title": "c-set-5-variables-to-check-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        \\n        if(password.length()<8) return false;\\n        \\n        bool lower=false,upper=false,digit=false,special=false,adjacent=true;\\n        \\n        string s = \"!@#$%^&*()-+\";\\n        \\n        for(int i=0;i<password.length();i++){\\n            if(isdigit(password[i])){\\n                digit = true;\\n            }else if(s.find(password[i])!=string::npos){\\n                special = true;\\n            }else if(password[i]==tolower(password[i])){\\n                lower = true;\\n            }else if(password[i]==toupper(password[i])){\\n                upper = true;\\n            }\\n            if(i!=0 && password[i]==password[i-1]) adjacent = false;\\n        }\\n        if(digit && special && lower && upper && adjacent) return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        \\n        if(password.length()<8) return false;\\n        \\n        bool lower=false,upper=false,digit=false,special=false,adjacent=true;\\n        \\n        string s = \"!@#$%^&*()-+\";\\n        \\n        for(int i=0;i<password.length();i++){\\n            if(isdigit(password[i])){\\n                digit = true;\\n            }else if(s.find(password[i])!=string::npos){\\n                special = true;\\n            }else if(password[i]==tolower(password[i])){\\n                lower = true;\\n            }else if(password[i]==toupper(password[i])){\\n                upper = true;\\n            }\\n            if(i!=0 && password[i]==password[i-1]) adjacent = false;\\n        }\\n        if(digit && special && lower && upper && adjacent) return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2138823,
                "title": "c-solution-with-comments-easy-to-understand-my-first-post-on-leetcode",
                "content": "This is my 1st post on leetcode.\\n**Do give this an upvote if you like the solution**\\n```\\n\\nclass Solution {\\npublic:\\nbool strongPasswordCheckerII(string password) {     \\n        // checking if length is greater than 8 or not\\n        if(password.size()<8) return false;\\n\\n        // checking it contain upper , lower and digit characters or not\\n        bool upper=false,lower=false,digit=false;\\n        for(auto it : password){\\n```\\n            if(it<=\\'z\\' && it>=\\'a\\'){\\n                lower = true;\\n            }else if(it<=\\'Z\\' && it>=\\'A\\'){\\n                upper = true;\\n            }else if(it<=\\'9\\' && it>=\\'0\\'){\\n                digit = true;\\n            }\\n        }\\n        if(!upper || !lower || !digit) return false;\\n        \\n        // check for special case\\n        string special=\"!@#$%^&*()-+\";\\n        bool specialFlag=false;\\n        for(auto it : special){\\n            int fnd = password.find(it);\\n            if(fnd>=0){\\n                specialFlag=true;\\n                break;\\n            }\\n        }\\n        if(!specialFlag) return false;\\n        \\n        // check for same two characters adjcent or not\\n        for(int i=0;i<password.size()-1;i++){\\n            if(password[i]==password[i+1]) return false;\\n        }\\n        return true;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\nbool strongPasswordCheckerII(string password) {     \\n        // checking if length is greater than 8 or not\\n        if(password.size()<8) return false;\\n\\n        // checking it contain upper , lower and digit characters or not\\n        bool upper=false,lower=false,digit=false;\\n        for(auto it : password){\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2138810,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if (password.length() < 8) {\\n            return false;\\n        }\\n        for (int i = 0; i < password.length() - 1; i++) {\\n            char c1 = password.charAt(i);\\n            char c2 = password.charAt(i + 1);\\n            if (c1 == c2) {\\n                return false;\\n            }\\n        }\\n        boolean containsUpperCase = false;\\n        boolean containsLowerCase  = false;\\n        boolean containsDigit = false;\\n        boolean containsSpecialChar  = false;\\n        String specialChars = \"!@#$%^&*()-+\";\\n        for (int i = 0; i < password.length(); i++) {\\n            char c = password.charAt(i);\\n            if (Character.isUpperCase(c)) {\\n                containsUpperCase = true;\\n            } else if (Character.isLowerCase(c)) {\\n                containsLowerCase = true;\\n            } else if (Character.isDigit(c)) {\\n                containsDigit = true;\\n            } else if (specialChars.indexOf(c) != -1) {\\n                containsSpecialChar = true;\\n            }\\n        }\\n        return containsUpperCase && containsLowerCase && containsDigit && containsSpecialChar;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if (password.length() < 8) {\\n            return false;\\n        }\\n        for (int i = 0; i < password.length() - 1; i++) {\\n            char c1 = password.charAt(i);\\n            char c2 = password.charAt(i + 1);\\n            if (c1 == c2) {\\n                return false;\\n            }\\n        }\\n        boolean containsUpperCase = false;\\n        boolean containsLowerCase  = false;\\n        boolean containsDigit = false;\\n        boolean containsSpecialChar  = false;\\n        String specialChars = \"!@#$%^&*()-+\";\\n        for (int i = 0; i < password.length(); i++) {\\n            char c = password.charAt(i);\\n            if (Character.isUpperCase(c)) {\\n                containsUpperCase = true;\\n            } else if (Character.isLowerCase(c)) {\\n                containsLowerCase = true;\\n            } else if (Character.isDigit(c)) {\\n                containsDigit = true;\\n            } else if (specialChars.indexOf(c) != -1) {\\n                containsSpecialChar = true;\\n            }\\n        }\\n        return containsUpperCase && containsLowerCase && containsDigit && containsSpecialChar;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4085618,
                "title": "discuss",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if (password.length() < 8)\\n        return false;\\n\\n        final boolean hasLowerCase = password.chars().anyMatch(c -> Character.isLowerCase(c));\\n        if (!hasLowerCase)\\n        return false;\\n\\n        final boolean hasUpperCase = password.chars().anyMatch(c -> Character.isUpperCase(c));\\n        if (!hasUpperCase)\\n        return false;\\n\\n        final boolean hasDigit = password.chars().anyMatch(c -> Character.isDigit(c));\\n        if (!hasDigit)\\n        return false;\\n\\n        final boolean hasSpecial = password.chars().anyMatch(c -> \"!@#$%^&*()-+\".indexOf(c) != -1);\\n        if (!hasSpecial)\\n        return false;\\n\\n        for (int i = 1; i < password.length(); ++i)\\n        if (password.charAt(i) == password.charAt(i - 1))\\n            return false;\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if (password.length() < 8)\\n        return false;\\n\\n        final boolean hasLowerCase = password.chars().anyMatch(c -> Character.isLowerCase(c));\\n        if (!hasLowerCase)\\n        return false;\\n\\n        final boolean hasUpperCase = password.chars().anyMatch(c -> Character.isUpperCase(c));\\n        if (!hasUpperCase)\\n        return false;\\n\\n        final boolean hasDigit = password.chars().anyMatch(c -> Character.isDigit(c));\\n        if (!hasDigit)\\n        return false;\\n\\n        final boolean hasSpecial = password.chars().anyMatch(c -> \"!@#$%^&*()-+\".indexOf(c) != -1);\\n        if (!hasSpecial)\\n        return false;\\n\\n        for (int i = 1; i < password.length(); ++i)\\n        if (password.charAt(i) == password.charAt(i - 1))\\n            return false;\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4076073,
                "title": "simple-and-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n    Please Upvote.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        char ch = \\'|\\';\\n        String s= \"!@#$%^&*()-+\";\\n        boolean[] bool = new boolean[4];\\n        if(password.length() < 8) return false;\\n        for(char c:password.toCharArray()){\\n            if(c == ch) return false;\\n            else if(c > 64 && c < 91) bool[0] =true;\\n            else if(c > 96 && c < 123) bool[1] =true;\\n            else if(s.contains(\"\"+c)) bool[2] =true;\\n            else if(Character.isDigit(c)) bool[3] =true;\\n            ch = c;\\n        }\\n        for(boolean b:bool){\\n            if(!b) return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        char ch = \\'|\\';\\n        String s= \"!@#$%^&*()-+\";\\n        boolean[] bool = new boolean[4];\\n        if(password.length() < 8) return false;\\n        for(char c:password.toCharArray()){\\n            if(c == ch) return false;\\n            else if(c > 64 && c < 91) bool[0] =true;\\n            else if(c > 96 && c < 123) bool[1] =true;\\n            else if(s.contains(\"\"+c)) bool[2] =true;\\n            else if(Character.isDigit(c)) bool[3] =true;\\n            ch = c;\\n        }\\n        for(boolean b:bool){\\n            if(!b) return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4070394,
                "title": "readable-ruby-and-posix-regex-64ms",
                "content": "```\\ndef strong_password_checker_ii(password)\\n  [\\n    password.length >= 8,\\n    password.match?(/[[:lower:]]/),\\n    password.match?(/[[:upper:]]/),\\n    password.match?(/[[:digit:]]/),\\n    password.match?(/[!@#$%^&*()-+-]/),\\n    !password.match?(/(.)\\\\1/)\\n  ].all?\\nend\\n```\\n**PS** Shame about the first hyphen I copied from the description not working; the second one I copied from the test cases worked for the penultimate match element",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\ndef strong_password_checker_ii(password)\\n  [\\n    password.length >= 8,\\n    password.match?(/[[:lower:]]/),\\n    password.match?(/[[:upper:]]/),\\n    password.match?(/[[:digit:]]/),\\n    password.match?(/[!@#$%^&*()-+-]/),\\n    !password.match?(/(.)\\\\1/)\\n  ].all?\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4056836,
                "title": "java-easy-solution-100-pass",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n         boolean b =false;\\n        String special = \"!@#$%^&*()-+\";\\n        if(password.length() >= 8){\\n            int c1=0,c2=0,c3 =0,c4=0;\\n            for (int i = 0; i <password.length()-1 ; i++) {\\n                if(password.charAt(i)==password.charAt(i+1)){\\n                    return false;\\n\\n                }\\n            }\\n            for (int i = 0; i < password.length(); i++) {\\n\\n                if(password.charAt(i)>= \\'A\\' && password.charAt(i)<=\\'Z\\'){\\n                    c1++;\\n                }\\n                if(password.charAt(i)>= \\'a\\' && password.charAt(i)<=\\'z\\'){\\n                    c2++;\\n                }\\n                if(password.charAt(i)>= \\'0\\' && password.charAt(i)<=\\'9\\'){\\n                    c3++;\\n                }\\n                for (int j = 0; j < special.length(); j++) {\\n                    if(password.charAt(i)==special.charAt(j)){\\n                        c4++;\\n                    }\\n                }\\n                \\n                if(c1>0&&c2>0&&c3>0&&c4>0){\\n                        return true;\\n                }\\n\\n            }\\n\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n         boolean b =false;\\n        String special = \"!@#$%^&*()-+\";\\n        if(password.length() >= 8){\\n            int c1=0,c2=0,c3 =0,c4=0;\\n            for (int i = 0; i <password.length()-1 ; i++) {\\n                if(password.charAt(i)==password.charAt(i+1)){\\n                    return false;\\n\\n                }\\n            }\\n            for (int i = 0; i < password.length(); i++) {\\n\\n                if(password.charAt(i)>= \\'A\\' && password.charAt(i)<=\\'Z\\'){\\n                    c1++;\\n                }\\n                if(password.charAt(i)>= \\'a\\' && password.charAt(i)<=\\'z\\'){\\n                    c2++;\\n                }\\n                if(password.charAt(i)>= \\'0\\' && password.charAt(i)<=\\'9\\'){\\n                    c3++;\\n                }\\n                for (int j = 0; j < special.length(); j++) {\\n                    if(password.charAt(i)==special.charAt(j)){\\n                        c4++;\\n                    }\\n                }\\n                \\n                if(c1>0&&c2>0&&c3>0&&c4>0){\\n                        return true;\\n                }\\n\\n            }\\n\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4052487,
                "title": "easy-solution-1ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        boolean b =false;\\n        String special = \"!@#$%^&*()-+\";\\n        if(password.length() >= 8){\\n            int c1=0,c2=0,c3 =0,c4=0;\\n            for (int i = 0; i <password.length()-1 ; i++) {\\n                if(password.charAt(i)==password.charAt(i+1)){\\n                    return false;\\n\\n                }\\n            }\\n            for (int i = 0; i < password.length(); i++) {\\n\\n                if(password.charAt(i)>= \\'A\\' && password.charAt(i)<=\\'Z\\'){\\n                    c1++;\\n                }\\n                if(password.charAt(i)>= \\'a\\' && password.charAt(i)<=\\'z\\'){\\n                    c2++;\\n                }\\n                if(password.charAt(i)>= \\'0\\' && password.charAt(i)<=\\'9\\'){\\n                    c3++;\\n                }\\n                for (int j = 0; j < special.length(); j++) {\\n                    if(password.charAt(i)==special.charAt(j)){\\n                        c4++;\\n                    }\\n                }\\n                \\n                if(c1>0&&c2>0&&c3>0&&c4>0){\\n                        return true;\\n                }\\n\\n            }\\n\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        boolean b =false;\\n        String special = \"!@#$%^&*()-+\";\\n        if(password.length() >= 8){\\n            int c1=0,c2=0,c3 =0,c4=0;\\n            for (int i = 0; i <password.length()-1 ; i++) {\\n                if(password.charAt(i)==password.charAt(i+1)){\\n                    return false;\\n\\n                }\\n            }\\n            for (int i = 0; i < password.length(); i++) {\\n\\n                if(password.charAt(i)>= \\'A\\' && password.charAt(i)<=\\'Z\\'){\\n                    c1++;\\n                }\\n                if(password.charAt(i)>= \\'a\\' && password.charAt(i)<=\\'z\\'){\\n                    c2++;\\n                }\\n                if(password.charAt(i)>= \\'0\\' && password.charAt(i)<=\\'9\\'){\\n                    c3++;\\n                }\\n                for (int j = 0; j < special.length(); j++) {\\n                    if(password.charAt(i)==special.charAt(j)){\\n                        c4++;\\n                    }\\n                }\\n                \\n                if(c1>0&&c2>0&&c3>0&&c4>0){\\n                        return true;\\n                }\\n\\n            }\\n\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4051716,
                "title": "easy-c-beginner-friendly-beats-100",
                "content": "> # Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool issmall(string password){\\n        for(int i = 0; i < password.size() ; i++){\\n            if(password[i]>=\\'a\\' && password[i]<=\\'z\\')return true;\\n        }\\n        return false;\\n    }\\n    bool iscaptial(string password){\\n        for(int i = 0 ; i < password.size() ; i++){\\n            if(password[i] >=\\'A\\' && password[i]<=\\'Z\\')return true;\\n        }\\n        return false;\\n    }\\n    bool isalphanumeric(string password){\\n        for(int i = 0;i< password.size() ; i++){\\n            if(password[i]>=\\'0\\' && password[i]<=\\'9\\')return true;\\n        }\\n        return false;\\n    }\\n    bool isspecial(string password){\\n        for(int i = 0 ;i < password.size();i++){\\n            if(password[i]==\\'!\\' || password[i]==\\'@\\' || password[i]==\\'#\\' || password[i]==\\'$\\'|| password[i]==\\'%\\' || password[i]==\\'^\\' || password[i]==\\'*\\' ||password[i]==\\'-\\' || password[i]==\\'+\\' || password[i]==\\'&\\' || password[i]==\\'(\\' || password[i]==\\')\\'){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    bool strongPasswordCheckerII(string password) {\\n        if(password.size()<8)return false;\\n        map<char,int>mp;\\n        for(int i = 1 ; i < password.size() ; i++){\\n            if(password[i]==password[i-1])return false;\\n        }\\n        return (issmall(password) && iscaptial(password) && isalphanumeric(password) && isspecial(password));\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    bool issmall(string password){\\n        for(int i = 0; i < password.size() ; i++){\\n            if(password[i]>=\\'a\\' && password[i]<=\\'z\\')return true;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 4044659,
                "title": "nice-and-elegant-solution-in-java-beats-100-rt-and-98-memory",
                "content": "```\\nimport java.util.regex.MatchResult;\\nimport java.util.regex.Matcher;\\nimport java.util.regex.Pattern;\\n\\nclass Solution {\\n    public static boolean strongPasswordCheckerII(String password) {\\n        boolean isStrong;\\n        isStrong = password.length() >= 8;\\n        while (isStrong) {\\n            isStrong = maxPower(password);\\n            if (!isStrong) return false;\\n            isStrong = Pattern.compile(\"[a-z]{1,}\").matcher(password).find();\\n            if (!isStrong) return false;\\n            isStrong = Pattern.compile(\"[A-Z]{1,}\").matcher(password).find();\\n            if (!isStrong) return false;\\n            isStrong = Pattern.compile(\"[0-9]{1,}\").matcher(password).find();\\n            if (!isStrong) return false;\\n            isStrong = Pattern.compile(\"[!@#$%^&*()\\\\\\\\-+]{1,}\").matcher(password).find();\\n            if (!isStrong) return false;\\n            break;\\n        }\\n        return isStrong;\\n    }\\n\\n    public static boolean maxPower(String s) {\\n        for (int i = 0; i < s.length() - 1; i++) {\\n            int j = i + 1;\\n            if (s.charAt(i) == s.charAt(j)) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nimport java.util.regex.MatchResult;\\nimport java.util.regex.Matcher;\\nimport java.util.regex.Pattern;\\n\\nclass Solution {\\n    public static boolean strongPasswordCheckerII(String password) {\\n        boolean isStrong;\\n        isStrong = password.length() >= 8;\\n        while (isStrong) {\\n            isStrong = maxPower(password);\\n            if (!isStrong) return false;\\n            isStrong = Pattern.compile(\"[a-z]{1,}\").matcher(password).find();\\n            if (!isStrong) return false;\\n            isStrong = Pattern.compile(\"[A-Z]{1,}\").matcher(password).find();\\n            if (!isStrong) return false;\\n            isStrong = Pattern.compile(\"[0-9]{1,}\").matcher(password).find();\\n            if (!isStrong) return false;\\n            isStrong = Pattern.compile(\"[!@#$%^&*()\\\\\\\\-+]{1,}\").matcher(password).find();\\n            if (!isStrong) return false;\\n            break;\\n        }\\n        return isStrong;\\n    }\\n\\n    public static boolean maxPower(String s) {\\n        for (int i = 0; i < s.length() - 1; i++) {\\n            int j = i + 1;\\n            if (s.charAt(i) == s.charAt(j)) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4022069,
                "title": "beats-100-with-0ms-runtime",
                "content": "\\n\\n# Code\\n```\\n#include<bits/stdc++.h>\\nclass Solution {\\n    bool sameLetterCheck(string password)\\n    {\\n        for(int i = 0; i < password.size(); i++)\\n        {\\n            if(i != password.size()-1)\\n            {\\n                if(password[i] == password[i+1])\\n                    return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    bool specialCheck(string password)\\n    {\\n        for(int i = 0; i < password.size(); i++)\\n        {\\n            if(password[i] == \\'!\\' || password[i] == \\'@\\' || password[i] == \\'#\\' || password[i] == \\'\\n``` || password[i] == \\'%\\' || password[i] == \\'^\\' || password[i] == \\'&\\' || password[i] == \\'*\\' || password[i] == \\'(\\' || password[i] == \\')\\' || password[i] == \\'-\\' || password[i] == \\'+\\')\\n                return true;\\n        }\\n        return false;\\n    }\\n\\n    bool digitCheck(string password)\\n    {\\n        for(int i = 0; i < password.size(); i++)\\n        {\\n            if(password[i] >= \\'0\\' && password[i] <= \\'9\\')\\n                return true;\\n        }\\n        return false;\\n    }\\n    \\n\\n    bool upperCheck(string password)\\n    {\\n        for(int i = 0; i < password.size(); i++)\\n        {\\n            if(password[i] >= \\'A\\' && password[i] <= \\'Z\\')\\n                return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool lowerCheck(string password)\\n    {\\n        for(int i = 0; i < password.size(); i++)\\n        {\\n            if(password[i] >= \\'a\\' && password[i] <= \\'z\\')\\n                return true;\\n        }\\n        return false;\\n    }\\npublic:\\n    bool strongPasswordCheckerII(string password) \\n    {\\n        if(password.size() < 8)\\n            return false;\\n\\n        return (lowerCheck(password) && upperCheck(password) && digitCheck(password) && specialCheck(password) && sameLetterCheck(password));\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n#include<bits/stdc++.h>\\nclass Solution {\\n    bool sameLetterCheck(string password)\\n    {\\n        for(int i = 0; i < password.size(); i++)\\n        {\\n            if(i != password.size()-1)\\n            {\\n                if(password[i] == password[i+1])\\n                    return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    bool specialCheck(string password)\\n    {\\n        for(int i = 0; i < password.size(); i++)\\n        {\\n            if(password[i] == \\'!\\' || password[i] == \\'@\\' || password[i] == \\'#\\' || password[i] == \\'\\n```",
                "codeTag": "C++"
            },
            {
                "id": 4019888,
                "title": "python-code-35ms-80-faster",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n    O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        if len(password) <8:\\n            return False\\n        \\n        upper = lower = num = special = 0\\n        prev = \\'\\'\\n        if password[0] == password[1] or password[-1] == password[-2]:\\n            return False\\n        for i in password:\\n            if ord(i)>=65 and ord(i)<=90:\\n                upper = 1\\n            elif ord(i)>=97 and ord(i)<=122:\\n                lower = 1\\n            elif i.isnumeric():\\n                num = 1\\n            elif i in \"!@#$%^&*()-+\":\\n                special = 1\\n            if i == prev:\\n                return False\\n            else:\\n                prev = i\\n        if upper == 1 and lower == 1 and num == 1 and special == 1:\\n            return True\\n        else:\\n            return False\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        if len(password) <8:\\n            return False\\n        \\n        upper = lower = num = special = 0\\n        prev = \\'\\'\\n        if password[0] == password[1] or password[-1] == password[-2]:\\n            return False\\n        for i in password:\\n            if ord(i)>=65 and ord(i)<=90:\\n                upper = 1\\n            elif ord(i)>=97 and ord(i)<=122:\\n                lower = 1\\n            elif i.isnumeric():\\n                num = 1\\n            elif i in \"!@#$%^&*()-+\":\\n                special = 1\\n            if i == prev:\\n                return False\\n            else:\\n                prev = i\\n        if upper == 1 and lower == 1 and num == 1 and special == 1:\\n            return True\\n        else:\\n            return False\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4019552,
                "title": "easy-java-solution-1-ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        ArrayList<Character> list=new ArrayList<>();\\n        int c1=0,c2=0,c3=0,c4=0;\\n        for(int i=0;i<password.length();i++)\\n            list.add(password.charAt(i));\\n        if(list.size()>=8){\\n            for(int i=0;i<list.size()-1;i++){\\n                if(list.get(i)==list.get(i+1))\\n                    return false;\\n            }\\n            for(int i=0;i<list.size();i++){\\n                if(list.get(i)>=\\'a\\' && list.get(i)<=\\'z\\')\\n                    c1++;\\n                else if(list.get(i)>=\\'A\\' && list.get(i)<=\\'Z\\')\\n                    c2++;\\n                else if(list.get(i)-\\'0\\'>=0 && list.get(i)-\\'0\\'<=9)\\n                    c3++;\\n                else if(list.get(i)==\\'!\\' || list.get(i)>=\\'@\\' || list.get(i)==\\'#\\' || list.get(i)>=\\'\\n``` || list.get(i)==\\'%\\' || list.get(i)>=\\'^\\' || list.get(i)==\\'&\\' || list.get(i)>=\\'*\\' || list.get(i)==\\'(\\' || list.get(i)>=\\')\\' || list.get(i)==\\'+\\' || list.get(i)>=\\'-\\')\\n                    c4++;\\n            }\\n        }\\n        if(c1>0 && c2>0 && c3>0 && c4>0)\\n            return true;\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        ArrayList<Character> list=new ArrayList<>();\\n        int c1=0,c2=0,c3=0,c4=0;\\n        for(int i=0;i<password.length();i++)\\n            list.add(password.charAt(i));\\n        if(list.size()>=8){\\n            for(int i=0;i<list.size()-1;i++){\\n                if(list.get(i)==list.get(i+1))\\n                    return false;\\n            }\\n            for(int i=0;i<list.size();i++){\\n                if(list.get(i)>=\\'a\\' && list.get(i)<=\\'z\\')\\n                    c1++;\\n                else if(list.get(i)>=\\'A\\' && list.get(i)<=\\'Z\\')\\n                    c2++;\\n                else if(list.get(i)-\\'0\\'>=0 && list.get(i)-\\'0\\'<=9)\\n                    c3++;\\n                else if(list.get(i)==\\'!\\' || list.get(i)>=\\'@\\' || list.get(i)==\\'#\\' || list.get(i)>=\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4018873,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if(password.length()<8){\\n            return false;\\n        }\\n        for(int i=0;i<password.length()-1;i++){\\n            if(password.charAt(i)==password.charAt(i+1)){\\n                return false;\\n            }\\n        }\\n        int c1=0,c2=0,c3=0,c4=0;\\n        for(int i=0;i<password.length();i++){\\n            if(password.charAt(i)>=\\'a\\' && password.charAt(i)<=\\'z\\'){\\n                c1++;\\n            }\\n            if(password.charAt(i)>=\\'A\\' && password.charAt(i)<=\\'Z\\'){\\n                c2++;\\n            }\\n            if(password.charAt(i)>=\\'0\\' && password.charAt(i)<=\\'9\\'){\\n                c3++;\\n            }\\n            if(password.charAt(i)==\\'!\\'||password.charAt(i)==\\'@\\'||password.charAt(i)==\\'#\\'||password.charAt(i)==\\'\\n```||password.charAt(i)==\\'%\\'||password.charAt(i)==\\'^\\'||password.charAt(i)==\\'&\\'||password.charAt(i)==\\'*\\'||password.charAt(i)==\\'(\\'||password.charAt(i)==\\')\\'||password.charAt(i)==\\'-\\'||password.charAt(i)==\\'+\\'){\\n                c4++;\\n            }\\n        }\\n        if(c1==0 ||c2==0 ||c3==0 ||c4==0){\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if(password.length()<8){\\n            return false;\\n        }\\n        for(int i=0;i<password.length()-1;i++){\\n            if(password.charAt(i)==password.charAt(i+1)){\\n                return false;\\n            }\\n        }\\n        int c1=0,c2=0,c3=0,c4=0;\\n        for(int i=0;i<password.length();i++){\\n            if(password.charAt(i)>=\\'a\\' && password.charAt(i)<=\\'z\\'){\\n                c1++;\\n            }\\n            if(password.charAt(i)>=\\'A\\' && password.charAt(i)<=\\'Z\\'){\\n                c2++;\\n            }\\n            if(password.charAt(i)>=\\'0\\' && password.charAt(i)<=\\'9\\'){\\n                c3++;\\n            }\\n            if(password.charAt(i)==\\'!\\'||password.charAt(i)==\\'@\\'||password.charAt(i)==\\'#\\'||password.charAt(i)==\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4010455,
                "title": "solution-on-dart",
                "content": "# Complexity\\n- Time complexity: **263ms** (>40%)\\n- Space complexity: **144.80MB** (>80%)\\n\\n# Code\\n```\\nclass Solution {\\n  bool strongPasswordCheckerII(String password) {\\n    return Validator.complexCheck(password) == 0;\\n  }\\n}\\n\\nclass Validator {\\n  static int count = 0;\\n\\n  static int charsToFormat = 0;\\n\\n  static int duplicatedCharsCount = 0;\\n\\n  static int getVarToMult(int len) {\\n    if (len < 8) {\\n      return 1 * 8 - len;\\n    } else {\\n      return 1;\\n    }\\n  }\\n\\n  static int complexCheck(String input) {\\n    final formatCheckerResult = checkForFormat(input);\\n    final duplicatesCheckerResult = checkForDuplicates(input);\\n    final lengthCheckerResult = checkForLength(input);\\n\\n    count += formatCheckerResult ? 0 : charsToFormat;\\n    count += lengthCheckerResult ? 0 : getVarToMult(input.length);\\n    count += duplicatesCheckerResult ? 0 : duplicatedCharsCount;\\n\\n    if (!formatCheckerResult && !duplicatesCheckerResult && !lengthCheckerResult) {\\n      count -= getVarToMult(input.length) - duplicatedCharsCount;\\n    } else if (!lengthCheckerResult && !formatCheckerResult) {\\n      count -= charsToFormat;\\n    } else if (!formatCheckerResult && !duplicatesCheckerResult) {\\n      count -= charsToFormat;\\n    }\\n\\n    final result = count;\\n\\n    _reset();\\n\\n    return result;\\n  }\\n\\n  static void _reset() {\\n    count = 0;\\n    charsToFormat = 0;\\n    duplicatedCharsCount = 0;\\n  }\\n\\n  static bool checkForLength(String input) {\\n    return input.length >= 8;\\n  }\\n\\n  static bool _checkForMinLength(String input) {\\n    return input.length >= 8;\\n  }\\n\\n  static bool checkForFormat(String input) {\\n    if (!_checkForMinLength(input)) return true;\\n    if (!RegExp(r\\'[a-z]\\').hasMatch(input)) {\\n      charsToFormat++;\\n    }\\n    if (!RegExp(r\\'[A-Z]\\').hasMatch(input)) {\\n      charsToFormat++;\\n    }\\n    if (!RegExp(r\\'[0-9]\\').hasMatch(input)) {\\n      charsToFormat++;\\n    }\\n    if (!RegExp(r\\'([!]|[@]|[#]|[$]|[%]|[\\\\^]|[&]|[\\\\*]|[(]|[)]|[-]|[+])\\').hasMatch(input)) {\\n      charsToFormat++;\\n    }\\n    return charsToFormat == 0;\\n  }\\n\\n  static bool checkForDuplicates(String input) {\\n    final splittedInput = input.split(\\'\\');\\n    int duplicatedCount = 1;\\n    for (int i = 0; i < splittedInput.length - 1; i++) {\\n      if (splittedInput[i] == splittedInput[i + 1]) {\\n        duplicatedCount++;\\n        if (duplicatedCount == 2) {\\n          duplicatedCharsCount++;\\n          i++;\\n          duplicatedCount = 1;\\n        }\\n      } else {\\n        duplicatedCount = 1;\\n      }\\n    }\\n   \\n   if (!_checkForMinLength(input) && duplicatedCharsCount != 0) {\\n      duplicatedCharsCount -= getVarToMult(input.length);\\n    }\\n\\n    return duplicatedCharsCount == 0;\\n  }\\n}\\n\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  bool strongPasswordCheckerII(String password) {\\n    return Validator.complexCheck(password) == 0;\\n  }\\n}\\n\\nclass Validator {\\n  static int count = 0;\\n\\n  static int charsToFormat = 0;\\n\\n  static int duplicatedCharsCount = 0;\\n\\n  static int getVarToMult(int len) {\\n    if (len < 8) {\\n      return 1 * 8 - len;\\n    } else {\\n      return 1;\\n    }\\n  }\\n\\n  static int complexCheck(String input) {\\n    final formatCheckerResult = checkForFormat(input);\\n    final duplicatesCheckerResult = checkForDuplicates(input);\\n    final lengthCheckerResult = checkForLength(input);\\n\\n    count += formatCheckerResult ? 0 : charsToFormat;\\n    count += lengthCheckerResult ? 0 : getVarToMult(input.length);\\n    count += duplicatesCheckerResult ? 0 : duplicatedCharsCount;\\n\\n    if (!formatCheckerResult && !duplicatesCheckerResult && !lengthCheckerResult) {\\n      count -= getVarToMult(input.length) - duplicatedCharsCount;\\n    } else if (!lengthCheckerResult && !formatCheckerResult) {\\n      count -= charsToFormat;\\n    } else if (!formatCheckerResult && !duplicatesCheckerResult) {\\n      count -= charsToFormat;\\n    }\\n\\n    final result = count;\\n\\n    _reset();\\n\\n    return result;\\n  }\\n\\n  static void _reset() {\\n    count = 0;\\n    charsToFormat = 0;\\n    duplicatedCharsCount = 0;\\n  }\\n\\n  static bool checkForLength(String input) {\\n    return input.length >= 8;\\n  }\\n\\n  static bool _checkForMinLength(String input) {\\n    return input.length >= 8;\\n  }\\n\\n  static bool checkForFormat(String input) {\\n    if (!_checkForMinLength(input)) return true;\\n    if (!RegExp(r\\'[a-z]\\').hasMatch(input)) {\\n      charsToFormat++;\\n    }\\n    if (!RegExp(r\\'[A-Z]\\').hasMatch(input)) {\\n      charsToFormat++;\\n    }\\n    if (!RegExp(r\\'[0-9]\\').hasMatch(input)) {\\n      charsToFormat++;\\n    }\\n    if (!RegExp(r\\'([!]|[@]|[#]|[$]|[%]|[\\\\^]|[&]|[\\\\*]|[(]|[)]|[-]|[+])\\').hasMatch(input)) {\\n      charsToFormat++;\\n    }\\n    return charsToFormat == 0;\\n  }\\n\\n  static bool checkForDuplicates(String input) {\\n    final splittedInput = input.split(\\'\\');\\n    int duplicatedCount = 1;\\n    for (int i = 0; i < splittedInput.length - 1; i++) {\\n      if (splittedInput[i] == splittedInput[i + 1]) {\\n        duplicatedCount++;\\n        if (duplicatedCount == 2) {\\n          duplicatedCharsCount++;\\n          i++;\\n          duplicatedCount = 1;\\n        }\\n      } else {\\n        duplicatedCount = 1;\\n      }\\n    }\\n   \\n   if (!_checkForMinLength(input) && duplicatedCharsCount != 0) {\\n      duplicatedCharsCount -= getVarToMult(input.length);\\n    }\\n\\n    return duplicatedCharsCount == 0;\\n  }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4009809,
                "title": "c-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public bool StrongPasswordCheckerII(string password) {\\n        bool meetsAllRequirements = true;\\n        if(password.Length < 8) {\\n            meetsAllRequirements = false;\\n            return meetsAllRequirements;\\n        }\\n        bool hasOneLowerCase = false;\\n        bool hasOneUpperCase = false;\\n        bool hasOneDigit = false;\\n        bool hasOneSpecialCharacter = false;\\n        bool doesNotContainAdjacentCharacters = true;\\n        List<char> specialCharacters = new List<char>() {\\'!\\', \\'@\\', \\'#\\', \\'\\n```, \\'%\\', \\'^\\', \\'&\\', \\'*\\', \\'(\\', \\')\\', \\'-\\', \\'+\\'};\\n        List<char> digits = new List<char>() {\\'1\\', \\'2\\', \\'3\\', \\'4\\', \\'5\\', \\'6\\', \\'7\\', \\'8\\', \\'9\\', \\'0\\'};\\n        for(int i = 0; i < password.Length; i ++){\\n            if(Char.IsLower(password[i])) {\\n                hasOneLowerCase = true;\\n            }\\n            if(Char.IsUpper(password[i])) {\\n                hasOneUpperCase = true;\\n            }\\n            if(digits.Contains(password[i])) {\\n                hasOneDigit = true;\\n            }\\n            if(specialCharacters.Contains(password[i])) {\\n                hasOneSpecialCharacter = true;\\n            }\\n        }\\n        for(int j = 0; j < password.Length - 1; j++) {\\n             if (password[j] == password[j + 1]) {\\n                doesNotContainAdjacentCharacters = false;\\n                break;\\n            }\\n        }\\n        if(hasOneUpperCase == true && hasOneLowerCase == true && hasOneDigit == true && hasOneSpecialCharacter == true && doesNotContainAdjacentCharacters == true) {\\n            meetsAllRequirements = true;\\n        }\\n        else {\\n            meetsAllRequirements = false;\\n        }\\n        return meetsAllRequirements;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public bool StrongPasswordCheckerII(string password) {\\n        bool meetsAllRequirements = true;\\n        if(password.Length < 8) {\\n            meetsAllRequirements = false;\\n            return meetsAllRequirements;\\n        }\\n        bool hasOneLowerCase = false;\\n        bool hasOneUpperCase = false;\\n        bool hasOneDigit = false;\\n        bool hasOneSpecialCharacter = false;\\n        bool doesNotContainAdjacentCharacters = true;\\n        List<char> specialCharacters = new List<char>() {\\'!\\', \\'@\\', \\'#\\', \\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3990445,
                "title": "c-easy-to-understand-for-newbie-beats-100",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        if(password.size() < 8) return false;\\n\\n        std::string specialCharacter = \"!@#$%^&*()-+\";\\n\\n        auto isSepecial = [=](char c) -> bool {\\n            for(char ch : specialCharacter) {\\n                if(ch == c) return true;\\n            }\\n            return false;\\n        };\\n\\n        bool isContainLowerCase = false;\\n        bool isContainUpperCase = false;\\n        bool isContainDigit = false;\\n        bool isContainSpecial = false;\\n\\n        for(int i = 0; i < password.size(); i++) {\\n            if(!isContainLowerCase) {\\n                isContainLowerCase = std::islower(password[i]);\\n            }\\n\\n            if(!isContainUpperCase) {\\n                isContainUpperCase = std::isupper(password[i]);\\n            }\\n\\n            if(!isContainDigit) {\\n                isContainDigit = std::isdigit(password[i]);\\n            }\\n\\n            if(!isContainSpecial) {\\n                isContainSpecial = isSepecial(password[i]);\\n            }\\n            if(i + 1 < password.size()) {\\n                if(password[i] == password[i + 1]) return false;\\n            }\\n        }\\n\\n        return isContainLowerCase && isContainUpperCase && isContainDigit && isContainSpecial;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        if(password.size() < 8) return false;\\n\\n        std::string specialCharacter = \"!@#$%^&*()-+\";\\n\\n        auto isSepecial = [=](char c) -> bool {\\n            for(char ch : specialCharacter) {\\n                if(ch == c) return true;\\n            }\\n            return false;\\n        };\\n\\n        bool isContainLowerCase = false;\\n        bool isContainUpperCase = false;\\n        bool isContainDigit = false;\\n        bool isContainSpecial = false;\\n\\n        for(int i = 0; i < password.size(); i++) {\\n            if(!isContainLowerCase) {\\n                isContainLowerCase = std::islower(password[i]);\\n            }\\n\\n            if(!isContainUpperCase) {\\n                isContainUpperCase = std::isupper(password[i]);\\n            }\\n\\n            if(!isContainDigit) {\\n                isContainDigit = std::isdigit(password[i]);\\n            }\\n\\n            if(!isContainSpecial) {\\n                isContainSpecial = isSepecial(password[i]);\\n            }\\n            if(i + 1 < password.size()) {\\n                if(password[i] == password[i + 1]) return false;\\n            }\\n        }\\n\\n        return isContainLowerCase && isContainUpperCase && isContainDigit && isContainSpecial;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3990243,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n public:\\n  bool strongPasswordCheckerII(string password) {\\n    if (password.length() < 8)\\n      return false;\\n\\n    const bool hasLowerCase = any_of(password.begin(), password.end(),\\n                                     [](const char c) { return islower(c); });\\n    if (!hasLowerCase)\\n      return false;\\n\\n    const bool hasUpperCase = any_of(password.begin(), password.end(),\\n                                     [](const char c) { return isupper(c); });\\n    if (!hasUpperCase)\\n      return false;\\n\\n    const bool hasDigit = any_of(password.begin(), password.end(),\\n                                 [](const char c) { return isdigit(c); });\\n    if (!hasDigit)\\n      return false;\\n\\n    const bool hasSpecial =\\n        any_of(password.begin(), password.end(), [](const char c) {\\n          return string(\"!@#$%^&*()-+\").find(c) != string::npos;\\n        });\\n    if (!hasSpecial)\\n      return false;\\n\\n    for (int i = 1; i < password.length(); ++i)\\n      if (password[i] == password[i - 1])\\n        return false;\\n    return true;\\n  }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n public:\\n  bool strongPasswordCheckerII(string password) {\\n    if (password.length() < 8)\\n      return false;\\n\\n    const bool hasLowerCase = any_of(password.begin(), password.end(),\\n                                     [](const char c) { return islower(c); });\\n    if (!hasLowerCase)\\n      return false;\\n\\n    const bool hasUpperCase = any_of(password.begin(), password.end(),\\n                                     [](const char c) { return isupper(c); });\\n    if (!hasUpperCase)\\n      return false;\\n\\n    const bool hasDigit = any_of(password.begin(), password.end(),\\n                                 [](const char c) { return isdigit(c); });\\n    if (!hasDigit)\\n      return false;\\n\\n    const bool hasSpecial =\\n        any_of(password.begin(), password.end(), [](const char c) {\\n          return string(\"!@#$%^&*()-+\").find(c) != string::npos;\\n        });\\n    if (!hasSpecial)\\n      return false;\\n\\n    for (int i = 1; i < password.length(); ++i)\\n      if (password[i] == password[i - 1])\\n        return false;\\n    return true;\\n  }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3980640,
                "title": "beats-100-of-python-users",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def strongPasswordCheckerII(self, pwd: str) -> bool:\\n        l,u,d,s = 0,0,0,0\\n        if len(pwd)<8:\\n            return False\\n        for i in range(len(pwd)):\\n            if pwd[i].isdigit():\\n                d+=1\\n            elif pwd[i].isalpha():\\n                if pwd[i].islower():\\n                    l+=1\\n                   \\n                else:\\n                    u+=1\\n            elif pwd[i] in \"!@#$%^&*()-+\":\\n                s+=1\\n            if i>=1:\\n                if pwd[i-1]==pwd[i]:\\n                    return False\\n        if all([l,u,s,d]):\\n            return True\\n        return False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def strongPasswordCheckerII(self, pwd: str) -> bool:\\n        l,u,d,s = 0,0,0,0\\n        if len(pwd)<8:\\n            return False\\n        for i in range(len(pwd)):\\n            if pwd[i].isdigit():\\n                d+=1\\n            elif pwd[i].isalpha():\\n                if pwd[i].islower():\\n                    l+=1\\n                   \\n                else:\\n                    u+=1\\n            elif pwd[i] in \"!@#$%^&*()-+\":\\n                s+=1\\n            if i>=1:\\n                if pwd[i-1]==pwd[i]:\\n                    return False\\n        if all([l,u,s,d]):\\n            return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3966697,
                "title": "one-liner",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool: \\n        return len(password) >= 8 and len([let for let in password if let.isupper()]) >= 1 and len([let for let in password if let.islower()]) >= 1 and len([let for let in password if let.isdigit()]) >= 1 and len([let for let in password if let in \"!@#$%^&*()-+\"]) >= 1 and len([i for i in range(len(password) - 1) if password[i] != password[i + 1]]) == len(password) - 1           \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool: \\n        return len(password) >= 8 and len([let for let in password if let.isupper()]) >= 1 and len([let for let in password if let.islower()]) >= 1 and len([let for let in password if let.isdigit()]) >= 1 and len([let for let in password if let in \"!@#$%^&*()-+\"]) >= 1 and len([i for i in range(len(password) - 1) if password[i] != password[i + 1]]) == len(password) - 1           \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3958475,
                "title": "beats-100-runtime-and-space",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution(object):\\n    def strongPasswordCheckerII(self, password):\\n        special_char = \"!@#$%^&*()-+\"\\n        oneUpper, oneLower, oneDigit, oneSpl = False, False, False, False\\n        if len(password)>=8:\\n            for idx,i in enumerate(password):\\n                if i.isupper():\\n                    oneUpper=True\\n                if i.islower():\\n                    oneLower=True\\n                if i.isdigit():\\n                    oneDigit=True\\n                if i in special_char:\\n                    oneSpl=True\\n                if idx<len(password)-1: ## one more condition\\n                    if password[idx]==password[idx+1]:\\n                        return False\\n        else:\\n            return False\\n        return (oneUpper and oneLower and oneDigit and oneSpl)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def strongPasswordCheckerII(self, password):\\n        special_char = \"!@#$%^&*()-+\"\\n        oneUpper, oneLower, oneDigit, oneSpl = False, False, False, False\\n        if len(password)>=8:\\n            for idx,i in enumerate(password):\\n                if i.isupper():\\n                    oneUpper=True\\n                if i.islower():\\n                    oneLower=True\\n                if i.isdigit():\\n                    oneDigit=True\\n                if i in special_char:\\n                    oneSpl=True\\n                if idx<len(password)-1: ## one more condition\\n                    if password[idx]==password[idx+1]:\\n                        return False\\n        else:\\n            return False\\n        return (oneUpper and oneLower and oneDigit and oneSpl)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3955638,
                "title": "python-easy-to-understand-beginner-friendly",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n\\n        abc = \"ASDFGHJKLQWERTYUIOPZXCVBNM\"\\n        sm = \"qwertyuiopasdfghjklzxcvbnm\"\\n        spc = \"!@#$%^&*()-+\"\\n        num = \"1234567890\"\\n        ss, sc= 0, 0\\n        sp = 0\\n        n = 0\\n\\n        if len(password)<8:\\n            return False\\n        for i in range(len(password)):\\n            if password[i] in abc:\\n                sc +=1\\n            elif password[i] in sm:\\n                ss +=1\\n            elif password[i] in spc:\\n                sp +=1\\n            elif password[i] in num:\\n                n +=1\\n            if i != len(password)-1:\\n                if password[i] == password[i+1]:\\n                    return 0\\n        \\n        if sc > 0 and ss > 0 and sp > 0 and n > 0:\\n            return 1\\n        return 0\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n\\n        abc = \"ASDFGHJKLQWERTYUIOPZXCVBNM\"\\n        sm = \"qwertyuiopasdfghjklzxcvbnm\"\\n        spc = \"!@#$%^&*()-+\"\\n        num = \"1234567890\"\\n        ss, sc= 0, 0\\n        sp = 0\\n        n = 0\\n\\n        if len(password)<8:\\n            return False\\n        for i in range(len(password)):\\n            if password[i] in abc:\\n                sc +=1\\n            elif password[i] in sm:\\n                ss +=1\\n            elif password[i] in spc:\\n                sp +=1\\n            elif password[i] in num:\\n                n +=1\\n            if i != len(password)-1:\\n                if password[i] == password[i+1]:\\n                    return 0\\n        \\n        if sc > 0 and ss > 0 and sp > 0 and n > 0:\\n            return 1\\n        return 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3949553,
                "title": "python-28-ms",
                "content": "```py\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        if len(password) < 8:\\n            return False\\n        has_lower = any(\\'a\\' <= c <= \\'z\\' for c in password)\\n        has_upper = any(\\'A\\' <= c <= \\'Z\\' for c in password)\\n        has_digit = any(c.isdigit() for c in password)\\n        special_chars = \"!@#$%^&*()-+\"\\n        has_special = any(c in special_chars for c in password)\\n        no_adjacent_repeat = all(password[i] != password[i+1] for i in range(len(password) - 1))\\n        return has_lower and has_upper and has_digit and has_special and no_adjacent_repeat\\n\\t```",
                "solutionTags": [],
                "code": "```py\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        if len(password) < 8:\\n            return False\\n        has_lower = any(\\'a\\' <= c <= \\'z\\' for c in password)\\n        has_upper = any(\\'A\\' <= c <= \\'Z\\' for c in password)\\n        has_digit = any(c.isdigit() for c in password)\\n        special_chars = \"!@#$%^&*()-+\"\\n        has_special = any(c in special_chars for c in password)\\n        no_adjacent_repeat = all(password[i] != password[i+1] for i in range(len(password) - 1))\\n        return has_lower and has_upper and has_digit and has_special and no_adjacent_repeat\\n\\t```",
                "codeTag": "Java"
            },
            {
                "id": 3947943,
                "title": "easy-approach-to-solve-this-problem-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\nO(n) \\n\\n# Code\\n``` \\n\\n\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        int n = password.length();\\n        int cap = 0;int low = 0; int count = 0; int special = 0;\\n\\n    if( n < 8){\\n        return false;\\n    }\\n\\n    char[] ch = password.toCharArray();\\n\\n    for(int i = 1; i < n; i++){\\n        if(ch[i - 1] == ch[i]){\\n            return false;\\n        }\\n    }\\n\\n    for(int i = 0; i < n ; i++)\\n    {\\n        \\n        if(ch[i] >= \\'A\\' && ch[i] <= \\'Z\\'){\\n            cap++;\\n        }\\n        if(ch[i] >= \\'a\\' && ch[i] <= \\'z\\'){\\n            low++;\\n        }\\n\\n         if(ch[i] >= \\'0\\' && ch[i] <= \\'9\\'){\\n            count++;\\n        }\\n        if(ch[i] == \\'!\\' ||ch[i]== \\'@\\'||ch[i]== \\'#\\'||ch[i] == \\'\\n```||\\n       ch[i] == \\'^\\'||ch[i] == \\'*\\'||ch[i] == \\'(\\'|| ch[i] == \\')\\'||\\n        ch[i] == \\'-\\'||ch[i] == \\'+\\'||ch[i] == \\'%\\'||ch[i] == \\'&\\'){\\n            special++;\\n        }\\n\\n        \\n\\n    }\\n\\n    if(cap >0 && low >0 && count >0 && special >0){\\n        return true;\\n    }\\n    \\n\\n   \\n    \\n    return false;\\n    }\\n}\\n\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "``` \\n\\n\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        int n = password.length();\\n        int cap = 0;int low = 0; int count = 0; int special = 0;\\n\\n    if( n < 8){\\n        return false;\\n    }\\n\\n    char[] ch = password.toCharArray();\\n\\n    for(int i = 1; i < n; i++){\\n        if(ch[i - 1] == ch[i]){\\n            return false;\\n        }\\n    }\\n\\n    for(int i = 0; i < n ; i++)\\n    {\\n        \\n        if(ch[i] >= \\'A\\' && ch[i] <= \\'Z\\'){\\n            cap++;\\n        }\\n        if(ch[i] >= \\'a\\' && ch[i] <= \\'z\\'){\\n            low++;\\n        }\\n\\n         if(ch[i] >= \\'0\\' && ch[i] <= \\'9\\'){\\n            count++;\\n        }\\n        if(ch[i] == \\'!\\' ||ch[i]== \\'@\\'||ch[i]== \\'#\\'||ch[i] == \\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3942303,
                "title": "c-worst-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        if(password.size()<8)\\n        {\\n            return false;\\n        }\\n        int digit=0,lcase=0,ucase=0,special=0,same=0;\\n        for(int i=0;i<password.size();i++)\\n        {\\n            if(password[i]>=\\'0\\' && password[i]<=\\'9\\')\\n            {\\n                digit++;\\n            }\\n            if(password[i]>=\\'a\\' && password[i]<=\\'z\\')\\n            {\\n                lcase++;\\n            }\\n            if(password[i]>=\\'A\\' && password[i]<=\\'Z\\')\\n            {\\n                ucase++;\\n            }\\n            if(password[i]==\\'!\\' || password[i]==\\'@\\'|| password[i]==\\'#\\'||password[i]==\\'\\n```||password[i]==\\'%\\'||password[i]==\\'^\\'||password[i]==\\'&\\'||password[i]==\\'*\\'||password[i]==\\'(\\'||password[i]==\\')\\'||password[i]==\\'-\\'||password[i]==\\'+\\')\\n            {\\n                special++;\\n            }\\n            if(password[i]==password[i+1])\\n            {\\n                same++;\\n            }\\n        }\\n        if(digit>=1 && lcase>=1&&ucase>=1&&special>=1&&same==0)\\n        {\\n            return true;\\n        }\\n        else{\\n            return false;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        if(password.size()<8)\\n        {\\n            return false;\\n        }\\n        int digit=0,lcase=0,ucase=0,special=0,same=0;\\n        for(int i=0;i<password.size();i++)\\n        {\\n            if(password[i]>=\\'0\\' && password[i]<=\\'9\\')\\n            {\\n                digit++;\\n            }\\n            if(password[i]>=\\'a\\' && password[i]<=\\'z\\')\\n            {\\n                lcase++;\\n            }\\n            if(password[i]>=\\'A\\' && password[i]<=\\'Z\\')\\n            {\\n                ucase++;\\n            }\\n            if(password[i]==\\'!\\' || password[i]==\\'@\\'|| password[i]==\\'#\\'||password[i]==\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3942234,
                "title": "easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string s) {\\n        int len = s.size();\\n        if (len<8){\\n            return false;\\n        }\\n        \\n        int lo = 0 , up = 0 , di = 0 , schar =0;\\n        for(int i=0 ; i<len ; i++){\\n            \\n            if(s[i]>=\\'a\\' && s[i]<=\\'z\\' ) lo++;\\n\\n            if(s[i]>=\\'A\\' && s[i]<=\\'Z\\' ) up++;\\n\\n            if(s[i]>=\\'0\\' && s[i]<=\\'9\\' ) di++;\\n\\n            if(s[i]==\\'!\\' || s[i]==\\'@\\' || s[i]==\\'#\\' || s[i]==\\'\\n``` \\n            || s[i]==\\'%\\' || s[i]==\\'^\\' || s[i]==\\'&\\' || s[i]==\\'*\\'\\n            || s[i]==\\'(\\' || s[i]==\\')\\' || s[i]==\\'-\\' || s[i]==\\'+\\'  ) \\n            schar++;\\n            \\n            int j = i+1;\\n            while(j<len && s[i]==s[j]){\\n                j++;\\n            }\\n            if(j-i >=2) return false;\\n        }\\n\\n        if(!lo || !up || !di || !schar)\\n        return false;\\n        else \\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string s) {\\n        int len = s.size();\\n        if (len<8){\\n            return false;\\n        }\\n        \\n        int lo = 0 , up = 0 , di = 0 , schar =0;\\n        for(int i=0 ; i<len ; i++){\\n            \\n            if(s[i]>=\\'a\\' && s[i]<=\\'z\\' ) lo++;\\n\\n            if(s[i]>=\\'A\\' && s[i]<=\\'Z\\' ) up++;\\n\\n            if(s[i]>=\\'0\\' && s[i]<=\\'9\\' ) di++;\\n\\n            if(s[i]==\\'!\\' || s[i]==\\'@\\' || s[i]==\\'#\\' || s[i]==\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3941350,
                "title": "best-sollution-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        int ch = 0;\\n        int lc = 0;\\n        int uc = 0;\\n        int sp = 0;\\n        int digit = 0;\\n        for(int i=0;i<password.length();i++){\\n            if(password.charAt(i)>=\\'A\\'&& password.charAt(i)<=\\'Z\\'){\\n                ch++;\\n                uc++;\\n            }\\n           else if(password.charAt(i)>=\\'a\\'&& password.charAt(i)<=\\'z\\'){\\n                ch++;\\n                lc++;\\n            }\\n           else if(password.charAt(i)>=\\'0\\'&& password.charAt(i)<=\\'9\\'){\\n                digit++;\\n                ch++;\\n            }\\n            else{\\n                sp++;\\n                ch++;\\n            }\\n        }\\n        for(int i=0;i<password.length()-1;i++){\\n            if(password.charAt(i)==password.charAt(i+1)){\\n                return false;\\n            }\\n        }\\n        if(ch>=8 && lc>=1 &&uc>=1 && sp>=1 && digit>=1){\\n            return true;\\n        }\\n        else{\\n           return false;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        int ch = 0;\\n        int lc = 0;\\n        int uc = 0;\\n        int sp = 0;\\n        int digit = 0;\\n        for(int i=0;i<password.length();i++){\\n            if(password.charAt(i)>=\\'A\\'&& password.charAt(i)<=\\'Z\\'){\\n                ch++;\\n                uc++;\\n            }\\n           else if(password.charAt(i)>=\\'a\\'&& password.charAt(i)<=\\'z\\'){\\n                ch++;\\n                lc++;\\n            }\\n           else if(password.charAt(i)>=\\'0\\'&& password.charAt(i)<=\\'9\\'){\\n                digit++;\\n                ch++;\\n            }\\n            else{\\n                sp++;\\n                ch++;\\n            }\\n        }\\n        for(int i=0;i<password.length()-1;i++){\\n            if(password.charAt(i)==password.charAt(i+1)){\\n                return false;\\n            }\\n        }\\n        if(ch>=8 && lc>=1 &&uc>=1 && sp>=1 && digit>=1){\\n            return true;\\n        }\\n        else{\\n           return false;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3933060,
                "title": "very-easy-jebas-raja",
                "content": "# Intuition \\u2764\\uFE0F KARUNYA UNIVERSITY::ACCENTURE\\u2764\\uFE0F\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n    \\n    int small=0;\\n    int capital=0;\\n    int special_character=0;\\n    int digit=0;\\n    for (int i = 0; i < password.length(); i++) \\n    {\\n      if (i<password.length()-1) \\n      {\\n        if (password.charAt(i)==password.charAt(i+1)) {\\n           //System.out.println(\"false\");\\n           return false;\\n        }\\n      }\\n      if (password.charAt(i)>=\\'a\\' && password.charAt(i)<=\\'z\\')\\n      {\\n         small++;     \\n      }\\n      else if (password.charAt(i)>=\\'A\\' && password.charAt(i)<=\\'Z\\') \\n      {\\n        capital++;\\n      }\\n      else if (Character.getNumericValue(password.charAt(i))>=0 && Character.getNumericValue(password.charAt(i))<=9) \\n      {\\n        digit++;  \\n      }\\n      else\\n      {    \\n         //System.out.println(\"jebasrajapeter\");\\n          special_character++;\\n      }      \\n    }\\n      \\n    System.out.println(small+\" \"+capital+\" \"+digit+\" \"+special_character);\\n\\n    if ((small>0 && capital>0 && digit>0 && special_character>0) && (small+capital+digit+special_character)>=8) \\n    {\\n        //System.out.println(\"true\");\\n        return true;\\n    }\\n    else\\n    { \\n        return false;\\n      //System.out.println(\"last\"+\"false\");\\n    }\\n\\n\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n    \\n    int small=0;\\n    int capital=0;\\n    int special_character=0;\\n    int digit=0;\\n    for (int i = 0; i < password.length(); i++) \\n    {\\n      if (i<password.length()-1) \\n      {\\n        if (password.charAt(i)==password.charAt(i+1)) {\\n           //System.out.println(\"false\");\\n           return false;\\n        }\\n      }\\n      if (password.charAt(i)>=\\'a\\' && password.charAt(i)<=\\'z\\')\\n      {\\n         small++;     \\n      }\\n      else if (password.charAt(i)>=\\'A\\' && password.charAt(i)<=\\'Z\\') \\n      {\\n        capital++;\\n      }\\n      else if (Character.getNumericValue(password.charAt(i))>=0 && Character.getNumericValue(password.charAt(i))<=9) \\n      {\\n        digit++;  \\n      }\\n      else\\n      {    \\n         //System.out.println(\"jebasrajapeter\");\\n          special_character++;\\n      }      \\n    }\\n      \\n    System.out.println(small+\" \"+capital+\" \"+digit+\" \"+special_character);\\n\\n    if ((small>0 && capital>0 && digit>0 && special_character>0) && (small+capital+digit+special_character)>=8) \\n    {\\n        //System.out.println(\"true\");\\n        return true;\\n    }\\n    else\\n    { \\n        return false;\\n      //System.out.println(\"last\"+\"false\");\\n    }\\n\\n\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3925101,
                "title": "very-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n\\n        int upperCaseCount = 0 , lowerCaseCount = 0 , digitCount = 0, specialCharCount = 0 ;\\n\\n        for(int i = 0 ; i < password.length()   ; i++){\\n               char ch = password.charAt(i);\\n\\n            if( i > 0 && ch == password.charAt(i - 1)) \\n            return false;\\n\\n               if(Character.isUpperCase(ch)){\\n                     upperCaseCount++;\\n               }else if(Character.isLowerCase(ch)){\\n                    lowerCaseCount++;\\n               }else if(Character.isDigit(ch)){\\n                     digitCount++;\\n               }else {\\n                     specialCharCount++;\\n               }\\n        }\\n\\n     return  password.length() >= 8 && upperCaseCount > 0 && lowerCaseCount > 0 && digitCount > 0 && specialCharCount > 0 ;\\n    }\\n\\n   \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n\\n        int upperCaseCount = 0 , lowerCaseCount = 0 , digitCount = 0, specialCharCount = 0 ;\\n\\n        for(int i = 0 ; i < password.length()   ; i++){\\n               char ch = password.charAt(i);\\n\\n            if( i > 0 && ch == password.charAt(i - 1)) \\n            return false;\\n\\n               if(Character.isUpperCase(ch)){\\n                     upperCaseCount++;\\n               }else if(Character.isLowerCase(ch)){\\n                    lowerCaseCount++;\\n               }else if(Character.isDigit(ch)){\\n                     digitCount++;\\n               }else {\\n                     specialCharCount++;\\n               }\\n        }\\n\\n     return  password.length() >= 8 && upperCaseCount > 0 && lowerCaseCount > 0 && digitCount > 0 && specialCharCount > 0 ;\\n    }\\n\\n   \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3925100,
                "title": "very-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n\\n        int upperCaseCount = 0 , lowerCaseCount = 0 , digitCount = 0, specialCharCount = 0 ;\\n\\n        for(int i = 0 ; i < password.length()   ; i++){\\n               char ch = password.charAt(i);\\n\\n            if( i > 0 && ch == password.charAt(i - 1)) \\n            return false;\\n\\n               if(Character.isUpperCase(ch)){\\n                     upperCaseCount++;\\n               }else if(Character.isLowerCase(ch)){\\n                    lowerCaseCount++;\\n               }else if(Character.isDigit(ch)){\\n                     digitCount++;\\n               }else {\\n                     specialCharCount++;\\n               }\\n        }\\n\\n     return  password.length() >= 8 && upperCaseCount > 0 && lowerCaseCount > 0 && digitCount > 0 && specialCharCount > 0 ;\\n    }\\n\\n   \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n\\n        int upperCaseCount = 0 , lowerCaseCount = 0 , digitCount = 0, specialCharCount = 0 ;\\n\\n        for(int i = 0 ; i < password.length()   ; i++){\\n               char ch = password.charAt(i);\\n\\n            if( i > 0 && ch == password.charAt(i - 1)) \\n            return false;\\n\\n               if(Character.isUpperCase(ch)){\\n                     upperCaseCount++;\\n               }else if(Character.isLowerCase(ch)){\\n                    lowerCaseCount++;\\n               }else if(Character.isDigit(ch)){\\n                     digitCount++;\\n               }else {\\n                     specialCharCount++;\\n               }\\n        }\\n\\n     return  password.length() >= 8 && upperCaseCount > 0 && lowerCaseCount > 0 && digitCount > 0 && specialCharCount > 0 ;\\n    }\\n\\n   \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3918214,
                "title": "avoiding-if-else-spaghetti",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUse bitwise flags instead of spaghetti code.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nAll character groups, except `\\'@\\'` and `\\'^\\'` from specials, do not overlap each other.\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n---\\n* You could find some other extraordinary solutions in my [profile](https://leetcode.com/almostmonday/) on the Solutions tab (I don\\'t post obvious or not interesting solutions at all.)\\n* If this was helpful, please upvote so that others can see this solution too.\\n---\\n\\n# Code\\n```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        if len(password) < 8: return False\\n        res, alp = 1, \"0Aa\"\\n        for i, c1 in enumerate(password):\\n            bit = 2\\n            if c1 != \\'@\\' and c1 != \\'^\\':\\n                for c2 in alp: bit <<= c1 >= c2\\n            res |= bit\\n            if i > 0 and c1 == password[i - 1]: res &= 32 - 2\\n        \\n        return res == 32 - 1\\n```\\n\\nIf it\\'s difficult to understand, you can start with this:\\n```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        if len(password) < 8: return False\\n        res = 1\\n        for i, c in enumerate(password):\\n            if \\'0\\' <= c <= \\'9\\': res |= 2\\n            elif \\'A\\' <= c <= \\'Z\\': res |= 4\\n            elif \\'a\\' <= c <= \\'z\\': res |= 8\\n            else: res |= 16\\n            if i > 0 and c == password[i - 1]: res &= 32 - 2\\n        \\n        return res == 32 - 1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        if len(password) < 8: return False\\n        res, alp = 1, \"0Aa\"\\n        for i, c1 in enumerate(password):\\n            bit = 2\\n            if c1 != \\'@\\' and c1 != \\'^\\':\\n                for c2 in alp: bit <<= c1 >= c2\\n            res |= bit\\n            if i > 0 and c1 == password[i - 1]: res &= 32 - 2\\n        \\n        return res == 32 - 1\\n```\n```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        if len(password) < 8: return False\\n        res = 1\\n        for i, c in enumerate(password):\\n            if \\'0\\' <= c <= \\'9\\': res |= 2\\n            elif \\'A\\' <= c <= \\'Z\\': res |= 4\\n            elif \\'a\\' <= c <= \\'z\\': res |= 8\\n            else: res |= 16\\n            if i > 0 and c == password[i - 1]: res &= 32 - 2\\n        \\n        return res == 32 - 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3915884,
                "title": "0ms-beats-100",
                "content": "```\\nLike if it helped you Thank You! :)\\n```\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public:\\n    Solution()\\n    {\\n        ios_base::sync_with_stdio(false);\\n        cin.tie(NULL);\\n    }\\n\\n    bool strongPasswordCheckerII(string p) \\n    {\\n        bool ol=false,ou=false,od=false,os=false;\\n        string str=\"!@#$%^&*()-+\";\\n        int n=p.size();\\n        \\n        if(n<8)\\n        {\\n            return false;\\n        }\\n\\n        for(int i=0;i<n;i++)\\n        {\\n            if(p[i]==p[i+1])\\n            {\\n                return false;\\n            }\\n\\n            if(isdigit(p[i]))\\n            {\\n                od=true;\\n            }\\n\\n            if(islower(p[i]))\\n            {\\n                ol=true;\\n            }\\n\\n            if(isupper(p[i]))\\n            {\\n                ou=true;\\n            }\\n\\n            size_t found = str.find(p[i]);\\n            if (found != string::npos)\\n            {\\n                os=true;\\n            }\\n        }\\n\\n        if(!(os&od&ol&ou))\\n        {\\n            return false; \\n        }\\n\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nLike if it helped you Thank You! :)\\n```\n```\\nclass Solution \\n{\\n    public:\\n    Solution()\\n    {\\n        ios_base::sync_with_stdio(false);\\n        cin.tie(NULL);\\n    }\\n\\n    bool strongPasswordCheckerII(string p) \\n    {\\n        bool ol=false,ou=false,od=false,os=false;\\n        string str=\"!@#$%^&*()-+\";\\n        int n=p.size();\\n        \\n        if(n<8)\\n        {\\n            return false;\\n        }\\n\\n        for(int i=0;i<n;i++)\\n        {\\n            if(p[i]==p[i+1])\\n            {\\n                return false;\\n            }\\n\\n            if(isdigit(p[i]))\\n            {\\n                od=true;\\n            }\\n\\n            if(islower(p[i]))\\n            {\\n                ol=true;\\n            }\\n\\n            if(isupper(p[i]))\\n            {\\n                ou=true;\\n            }\\n\\n            size_t found = str.find(p[i]);\\n            if (found != string::npos)\\n            {\\n                os=true;\\n            }\\n        }\\n\\n        if(!(os&od&ol&ou))\\n        {\\n            return false; \\n        }\\n\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3915063,
                "title": "easy-solution-using-java",
                "content": "\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String p) {\\n        boolean[] arr = new boolean[4];\\n        int count = 0, len = p.length();\\n        for(int i = 0; i < len; i++){\\n            if(i+1 < len && (p.charAt(i) == p.charAt(i+1))){\\n                return false;\\n            }\\n            if(arr[0] != true && (Character.isLowerCase(p.charAt(i)))){\\n                count++;\\n                arr[0] = true;\\n            }\\n            else if(arr[1] != true && (Character.isUpperCase(p.charAt(i)))){\\n                count++;\\n                arr[1] = true;\\n            }\\n            else if(arr[2] != true && contain(p.charAt(i))){\\n                arr[2] = true;\\n                count++;\\n            }\\n            else if(arr[3] != true && (Character.isDigit(p.charAt(i)))){\\n                count++;\\n                arr[3] = true;\\n            }\\n        }\\n        return count == 4 && len >= 8;\\n    }\\n\\n    public boolean contain(char c){\\n        return c==\\'!\\'|c==\\'@\\'||c==\\'#\\'||c==\\'\\n```||c==\\'%\\'||c==\\'^\\'||c==\\'&\\'||c==\\'*\\'||c==\\'(\\'||c==\\')\\'||c==\\'-\\'||c==\\'+\\';\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String p) {\\n        boolean[] arr = new boolean[4];\\n        int count = 0, len = p.length();\\n        for(int i = 0; i < len; i++){\\n            if(i+1 < len && (p.charAt(i) == p.charAt(i+1))){\\n                return false;\\n            }\\n            if(arr[0] != true && (Character.isLowerCase(p.charAt(i)))){\\n                count++;\\n                arr[0] = true;\\n            }\\n            else if(arr[1] != true && (Character.isUpperCase(p.charAt(i)))){\\n                count++;\\n                arr[1] = true;\\n            }\\n            else if(arr[2] != true && contain(p.charAt(i))){\\n                arr[2] = true;\\n                count++;\\n            }\\n            else if(arr[3] != true && (Character.isDigit(p.charAt(i)))){\\n                count++;\\n                arr[3] = true;\\n            }\\n        }\\n        return count == 4 && len >= 8;\\n    }\\n\\n    public boolean contain(char c){\\n        return c==\\'!\\'|c==\\'@\\'||c==\\'#\\'||c==\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3908095,
                "title": "no-regex-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nconst strongPasswordCheckerII = (password) => {\\n  let res = false\\n  if (password.length < 8) return res\\n  let hasCapital = false\\n  let hasSmall = false\\n  let hasDigit = false\\n  let hasSpecialChar = false\\n  let hasAdjesacne = true\\n  const SpecialChar = [\\n    \\'!\\',\\n    \\'@\\',\\n    \\'#\\',\\n    \\'\\n```,\\n    \\'%\\',\\n    \\'^\\',\\n    \\'&\\',\\n    \\'*\\',\\n    \\'(\\',\\n    \\')\\',\\n    \\'-\\',\\n    \\'+\\',\\n  ]\\n  const passArr = password.split(\\'\\')\\n  for (let i = 0; i < passArr.length; i += 1) {\\n    const el = passArr[i]\\n    if (SpecialChar.includes(el)) {\\n      hasSpecialChar = true\\n      if (el === passArr[i + 1]) hasAdjesacne = false\\n      continue\\n    }\\n    if (!isNaN(Number(el))) {\\n      hasDigit = true\\n      if (el === passArr[i + 1]) hasAdjesacne = false\\n      continue\\n    }\\n    if (el === el.toUpperCase()) {\\n      hasCapital = true\\n      if (el === passArr[i + 1]) hasAdjesacne = false\\n      continue\\n    }\\n    if (el === el.toLowerCase()) {\\n      hasSmall = true\\n      if (el === passArr[i + 1]) hasAdjesacne = false\\n      continue\\n    }\\n  }\\n  if (hasCapital && hasSmall && hasDigit && hasSpecialChar && hasAdjesacne)\\n    res = true\\n  return res\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst strongPasswordCheckerII = (password) => {\\n  let res = false\\n  if (password.length < 8) return res\\n  let hasCapital = false\\n  let hasSmall = false\\n  let hasDigit = false\\n  let hasSpecialChar = false\\n  let hasAdjesacne = true\\n  const SpecialChar = [\\n    \\'!\\',\\n    \\'@\\',\\n    \\'#\\',\\n    \\'\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3904963,
                "title": "very-basic-java-soln",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if(password.length()<8)\\n            return false;\\n        password+=\" \";\\n        String str=\"!@#$%^&*()-+\";\\n        int s=0,c=0,d=0,sp=0,flag=0;\\n        for(int i=0;i<password.length()-1;i++){\\n            char ch=password.charAt(i);\\n            char ch2=password.charAt(i+1);\\n            if(ch==ch2)\\n                return false;\\n            if(ch>=\\'a\\'&&ch<=\\'z\\')\\n                s++;\\n            else if(ch>=\\'A\\'&&ch<=\\'Z\\') \\n                c++;\\n            else if(ch>=\\'0\\'&&ch<=\\'9\\')\\n                d++;\\n            else if(str.indexOf(ch)>=0)\\n                sp++;\\n        }\\n        if(s>0&&c>0&&d>0&&sp>0)\\n                return true;\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if(password.length()<8)\\n            return false;\\n        password+=\" \";\\n        String str=\"!@#$%^&*()-+\";\\n        int s=0,c=0,d=0,sp=0,flag=0;\\n        for(int i=0;i<password.length()-1;i++){\\n            char ch=password.charAt(i);\\n            char ch2=password.charAt(i+1);\\n            if(ch==ch2)\\n                return false;\\n            if(ch>=\\'a\\'&&ch<=\\'z\\')\\n                s++;\\n            else if(ch>=\\'A\\'&&ch<=\\'Z\\') \\n                c++;\\n            else if(ch>=\\'0\\'&&ch<=\\'9\\')\\n                d++;\\n            else if(str.indexOf(ch)>=0)\\n                sp++;\\n        }\\n        if(s>0&&c>0&&d>0&&sp>0)\\n                return true;\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3904209,
                "title": "simple-python-use-dict-beats-97",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n![2.png](https://assets.leetcode.com/users/images/65daab2b-3e27-40f9-adb8-48fb52875c6c_1691931427.905165.png)\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nuse dict\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        res = {\\'has_lower\\': False, \\'has_upper\\': False, \\'has_digit\\': False, \\'has_special\\': False}\\n        if len(password)<8:\\n            return False\\n        for idx, char in enumerate(password):\\n            if char.islower():\\n                res[\\'has_lower\\'] = True\\n            elif char.isupper():\\n                res[\\'has_upper\\'] = True\\n            elif char.isdigit():\\n                res[\\'has_digit\\'] = True\\n            elif char in \"!@#$%^&*()-+\":\\n                res[\\'has_special\\'] = True\\n            if idx > 0 and char == password[idx - 1]:\\n                return False\\n        if False in res.values():\\n            return False\\n        return True\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        res = {\\'has_lower\\': False, \\'has_upper\\': False, \\'has_digit\\': False, \\'has_special\\': False}\\n        if len(password)<8:\\n            return False\\n        for idx, char in enumerate(password):\\n            if char.islower():\\n                res[\\'has_lower\\'] = True\\n            elif char.isupper():\\n                res[\\'has_upper\\'] = True\\n            elif char.isdigit():\\n                res[\\'has_digit\\'] = True\\n            elif char in \"!@#$%^&*()-+\":\\n                res[\\'has_special\\'] = True\\n            if idx > 0 and char == password[idx - 1]:\\n                return False\\n        if False in res.values():\\n            return False\\n        return True\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3903052,
                "title": "simple-solution-without-regex",
                "content": "# Approach\\nValidate password by char code\\n\\n# Code\\n```\\nconst specialChar: string[] = [\\'!\\', \\'@\\', \\'#\\',\\'\\n```,\\'%\\',\\'^\\',\\'&\\',\\'*\\',\\'(\\',\\')\\',\\'-\\',\\'+\\'];\\nfunction strongPasswordCheckerII(password: string): boolean {\\n    if (password.length < 8) return false;\\n    if (!specialChar.some((char: string) => password.includes(char.toString()))) return false;\\n    let up, low, digit : boolean = false;\\n    for (let i = 0; i < password.length; i++) {\\n        if (password.charCodeAt(i) >= 65 && password.charCodeAt(i) <= 90)  {\\n            up = true;  \\n        } else if (password.charCodeAt(i) >= 97 && password.charCodeAt(i) <= 122) {\\n            low = true;\\n        } else if (password.charCodeAt(i) >= 48 && password.charCodeAt(i) <= 57) {\\n            digit = true;\\n        }\\n\\n        if (password[i] == password[i+1]) return false;\\n    }\\n    if (!(up && low && digit)) return false;\\n    return true;\\n}\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nconst specialChar: string[] = [\\'!\\', \\'@\\', \\'#\\',\\'\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3898766,
                "title": "strong-password-checker-ii-solution-in-java-easy-solution-and-fast",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\nTime Taken : 0 - 1 ms\\n\\n- Space complexity:\\nSpace Taken : 40.30 - 40.40 mb\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        boolean lowchecker = false;\\n        boolean uppchecker = false;\\n        boolean digitchecker = false;\\n        boolean specialchecker = false;\\n        if(password.length() < 8)\\n                return false;   \\n        char pre = \\'\\\\0\\';          \\n        char[] pass = password.toCharArray();\\n        for(char c : pass)\\n        {\\n           if(c == pre)\\n               return false;\\n          \\n           if(c >= 97 && c <= 122 && lowchecker == false)\\n                lowchecker = true;\\n       \\n            if(c >= 65 && c <= 90 && uppchecker == false)\\n                uppchecker = true;\\n                \\n            if(c >= 48 && c <= 57 && digitchecker == false)\\n                 digitchecker = true;\\n                 \\n             if( (c == \\'!\\' || c == \\'@\\' || c == \\'#\\' || c == \\'\\n``` || c == \\'%\\' || c == \\'^\\' || c == \\'&\\' || c == \\'*\\' || c == \\'(\\' || c == \\')\\' || c == \\'-\\' || c == \\'+\\') && specialchecker == false)\\n                specialchecker = true;\\n\\n            pre = c;\\n        }\\n        return (lowchecker && uppchecker && specialchecker && digitchecker) ;     \\n    }\\n    \\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        boolean lowchecker = false;\\n        boolean uppchecker = false;\\n        boolean digitchecker = false;\\n        boolean specialchecker = false;\\n        if(password.length() < 8)\\n                return false;   \\n        char pre = \\'\\\\0\\';          \\n        char[] pass = password.toCharArray();\\n        for(char c : pass)\\n        {\\n           if(c == pre)\\n               return false;\\n          \\n           if(c >= 97 && c <= 122 && lowchecker == false)\\n                lowchecker = true;\\n       \\n            if(c >= 65 && c <= 90 && uppchecker == false)\\n                uppchecker = true;\\n                \\n            if(c >= 48 && c <= 57 && digitchecker == false)\\n                 digitchecker = true;\\n                 \\n             if( (c == \\'!\\' || c == \\'@\\' || c == \\'#\\' || c == \\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3883304,
                "title": "beats-100-00-of-users-with-c-easiest-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        bool size = true;\\n        bool lowerCase = true;\\n        bool upperCase = true;\\n        bool digit = true;\\n        bool special = false;\\n        bool adjacent = true;\\n        \\n        if(password.size()< 8)\\n        size = false;\\n        for(int i=1;i<password.size();i++){\\n            if(password[i-1] == password[i])\\n            adjacent = false;\\n        }\\n        if(std::find_if(password.begin(), password.end(), ::islower) == password.end()){\\n            lowerCase = false;\\n        }\\n        if(std::find_if(password.begin(), password.end(), ::isupper) == password.end()){\\n            upperCase = false;\\n        }\\n        for(int i=0;i<password.size();++i){\\n           if(password[i]==\\'!\\') special=true;\\n           if(password[i]==\\'@\\') special=true;\\n           if(password[i]==\\'#\\') special=true;\\n           if(password[i]==\\'\\n```) special=true;\\n           if(password[i]==\\'%\\') special=true;\\n           if(password[i]==\\'^\\') special=true;\\n           if(password[i]==\\'&\\') special=true;\\n           if(password[i]==\\'*\\') special=true;\\n           if(password[i]==\\'(\\') special=true;\\n           if(password[i]==\\')\\') special=true;\\n           if(password[i]==\\'-\\') special=true;\\n           if(password[i]==\\'+\\') special=true;\\n       }\\n       if(std::find_if(password.begin(), password.end(), ::isdigit) == password.end())\\n       digit = false;\\n       if(size && lowerCase && upperCase && digit && special && adjacent)\\n       return true;\\n\\n       return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        bool size = true;\\n        bool lowerCase = true;\\n        bool upperCase = true;\\n        bool digit = true;\\n        bool special = false;\\n        bool adjacent = true;\\n        \\n        if(password.size()< 8)\\n        size = false;\\n        for(int i=1;i<password.size();i++){\\n            if(password[i-1] == password[i])\\n            adjacent = false;\\n        }\\n        if(std::find_if(password.begin(), password.end(), ::islower) == password.end()){\\n            lowerCase = false;\\n        }\\n        if(std::find_if(password.begin(), password.end(), ::isupper) == password.end()){\\n            upperCase = false;\\n        }\\n        for(int i=0;i<password.size();++i){\\n           if(password[i]==\\'!\\') special=true;\\n           if(password[i]==\\'@\\') special=true;\\n           if(password[i]==\\'#\\') special=true;\\n           if(password[i]==\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3857564,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        if (password.length() < 8)\\n            return false;\\n\\n        string special = \"!@#$%^&*()-+\";\\n        bool digit = false , lowercase = false , uppercase = false , specialChar = false;\\n        for (int i=0 ; i<password.length() ; i++){\\n            if (i+1 < password.length() && password[i] == password[i+1])\\n                return false;\\n            \\n            char ch = password[i];\\n\\n            if (isupper(ch))\\n                uppercase = true;\\n            \\n            else if (islower(ch))\\n                lowercase = true;\\n\\n            else if (isdigit(ch))\\n                digit = true;\\n\\n            else{\\n                for (auto j : special){\\n                    if (ch == j){\\n                        specialChar = true;\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        \\n        return digit && lowercase && uppercase && specialChar;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        if (password.length() < 8)\\n            return false;\\n\\n        string special = \"!@#$%^&*()-+\";\\n        bool digit = false , lowercase = false , uppercase = false , specialChar = false;\\n        for (int i=0 ; i<password.length() ; i++){\\n            if (i+1 < password.length() && password[i] == password[i+1])\\n                return false;\\n            \\n            char ch = password[i];\\n\\n            if (isupper(ch))\\n                uppercase = true;\\n            \\n            else if (islower(ch))\\n                lowercase = true;\\n\\n            else if (isdigit(ch))\\n                digit = true;\\n\\n            else{\\n                for (auto j : special){\\n                    if (ch == j){\\n                        specialChar = true;\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        \\n        return digit && lowercase && uppercase && specialChar;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3841007,
                "title": "c-easy-fast",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n       \\n       if(size(password) < 8) return false;\\n       int i = 0;\\n\\n       bool lower = false, upper = false, digit = false, special = false;\\n\\n       for(auto c:password){\\n           if(islower(c)) lower = true;\\n           else if(isupper(c)) upper = true;\\n           else if(isdigit(c)) digit = true;\\n           else special = true;\\n       }\\n\\n       for(int i=0;i+1<size(password);i++) if(password[i] == password[i+1]) return false;\\n\\n       if(lower && upper && digit && special) return true;\\n\\n       return false;\\n\\n    }\\n\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n       \\n       if(size(password) < 8) return false;\\n       int i = 0;\\n\\n       bool lower = false, upper = false, digit = false, special = false;\\n\\n       for(auto c:password){\\n           if(islower(c)) lower = true;\\n           else if(isupper(c)) upper = true;\\n           else if(isdigit(c)) digit = true;\\n           else special = true;\\n       }\\n\\n       for(int i=0;i+1<size(password);i++) if(password[i] == password[i+1]) return false;\\n\\n       if(lower && upper && digit && special) return true;\\n\\n       return false;\\n\\n    }\\n\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3837754,
                "title": "beats-96-27-python-easiest-and-simplest-using-re-search-beginner-special",
                "content": "# Intuition\\n![Screenshot 2023-07-30 152913.png](https://assets.leetcode.com/users/images/8fb7c36c-9df3-4802-8edc-6ef41ef6e94b_1690711195.6399362.png)\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def hasadjacent(self,string):\\n            for i in range (len(string)-1):\\n                if string[i]==string[i+1]:\\n                    return True\\n            return False\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        if len(password)<8:\\n            return False\\n        elif not re.search(\"[A-Z]\",password):\\n            return False\\n        elif not re.search(\"[a-z]\",password):\\n            return False\\n        if not re.search(\"[a-z]\",password):\\n            return False\\n        if not re.search(\"[0-9]\",password):\\n            return False\\n        if not re.search(\"[-!@#$%^&*()+]\",password):\\n            return False\\n        if self.hasadjacent(password)==True:\\n            return False\\n        return True\\n```",
                "solutionTags": [
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def hasadjacent(self,string):\\n            for i in range (len(string)-1):\\n                if string[i]==string[i+1]:\\n                    return True\\n            return False\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        if len(password)<8:\\n            return False\\n        elif not re.search(\"[A-Z]\",password):\\n            return False\\n        elif not re.search(\"[a-z]\",password):\\n            return False\\n        if not re.search(\"[a-z]\",password):\\n            return False\\n        if not re.search(\"[0-9]\",password):\\n            return False\\n        if not re.search(\"[-!@#$%^&*()+]\",password):\\n            return False\\n        if self.hasadjacent(password)==True:\\n            return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3831853,
                "title": "easy-solution-1ms-runtime",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nCreated a seperate functions that each check/validate a different portion of the password. For lower/upper check if the current char is within the ascii values of lower/upper case values. For digit by trying to parse the string into an int, check if no errors are found. Special char, using strings package to see if the current char is found inside the defined string of needed special chars. Lastly, for adjacent just make 2 pointers of curr and prev and see if there values are the same.\\n\\n# Code\\n```\\nfunc strongPasswordCheckerII(password string) bool {\\n    if len(password) < 8 {\\n        return false\\n    }\\n    output := upperCase(password) && lowerCase(password) && digit(password) && specialChar(password) && adjacent(password)\\n\\n    return output\\n}\\nfunc upperCase(word string) bool {\\n        for _, val := range word {\\n                if val >= 65 && val <= 90 {\\n                        return true\\n                }\\n        }\\n        return false\\n}\\nfunc lowerCase(word string) bool {\\n        for _, val := range word {\\n                if val >= 97 && val <= 122 {\\n                        return true\\n                }\\n        }\\n        return false\\n}\\n\\nfunc digit(word string) bool {\\n        for _, val := range word {\\n                _, err := strconv.Atoi(string(val))\\n                if err == nil {\\n                        return true\\n                }\\n        }\\n        return false\\n}\\n\\nfunc specialChar(word string) bool {\\n        special := \"!@#$%^&*()-+\"\\n\\n        for _, val := range word {\\n                if strings.Contains(special, string(val)){\\n                        return true\\n                }\\n        }\\n        return false\\n}\\n\\nfunc adjacent(word string) bool {\\n        for i := 1; i < len(word); i++ {\\n                prev := word[i - 1]\\n                curr := word[i]\\n\\n                if curr == prev {\\n                        return false\\n                }\\n        }\\n        return true\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc strongPasswordCheckerII(password string) bool {\\n    if len(password) < 8 {\\n        return false\\n    }\\n    output := upperCase(password) && lowerCase(password) && digit(password) && specialChar(password) && adjacent(password)\\n\\n    return output\\n}\\nfunc upperCase(word string) bool {\\n        for _, val := range word {\\n                if val >= 65 && val <= 90 {\\n                        return true\\n                }\\n        }\\n        return false\\n}\\nfunc lowerCase(word string) bool {\\n        for _, val := range word {\\n                if val >= 97 && val <= 122 {\\n                        return true\\n                }\\n        }\\n        return false\\n}\\n\\nfunc digit(word string) bool {\\n        for _, val := range word {\\n                _, err := strconv.Atoi(string(val))\\n                if err == nil {\\n                        return true\\n                }\\n        }\\n        return false\\n}\\n\\nfunc specialChar(word string) bool {\\n        special := \"!@#$%^&*()-+\"\\n\\n        for _, val := range word {\\n                if strings.Contains(special, string(val)){\\n                        return true\\n                }\\n        }\\n        return false\\n}\\n\\nfunc adjacent(word string) bool {\\n        for i := 1; i < len(word); i++ {\\n                prev := word[i - 1]\\n                curr := word[i]\\n\\n                if curr == prev {\\n                        return false\\n                }\\n        }\\n        return true\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3799426,
                "title": "lambda-functions-inside-hash-map-or-list",
                "content": "# Code\\n```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        spec_chars = set(\"!@#$%^&*()-+\")\\n        # List could be used as well, but it will be hard to identify\\n        # each function check purpose\\n        checks = {\"length\": lambda s: len(s) >= 8,\\n                  \"lower\": lambda s: any((97 <= ord(i) <= 122 for i in s)),\\n                  \"upper\": lambda s: any((65 <= ord(i) <= 90 for i in s)),\\n                  \"digit\": lambda s: any((48 <= ord(i) <= 57 for i in s)),\\n                  \"spec\": lambda s: any((i in spec_chars for i in s)),\\n                  \"adj\": lambda s: not any((s[i] == s[i + 1] for i in range(len(s) - 1)))}\\n        \\n        return all((func(password) for func in checks.values()))\\n\\n\\n        \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        spec_chars = set(\"!@#$%^&*()-+\")\\n        # List could be used as well, but it will be hard to identify\\n        # each function check purpose\\n        checks = {\"length\": lambda s: len(s) >= 8,\\n                  \"lower\": lambda s: any((97 <= ord(i) <= 122 for i in s)),\\n                  \"upper\": lambda s: any((65 <= ord(i) <= 90 for i in s)),\\n                  \"digit\": lambda s: any((48 <= ord(i) <= 57 for i in s)),\\n                  \"spec\": lambda s: any((i in spec_chars for i in s)),\\n                  \"adj\": lambda s: not any((s[i] == s[i + 1] for i in range(len(s) - 1)))}\\n        \\n        return all((func(password) for func in checks.values()))\\n\\n\\n        \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3787394,
                "title": "must-see-this-simple-code",
                "content": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string p){\\n        bool size=false , small=false , capital=false , dig=false , spcl=false;\\n        int c=0;\\n        for(auto i:p){\\n            c++;\\n            if(i>=\\'a\\' && i<=\\'z\\'){\\n                small=true;\\n            }\\n            else if(i>=\\'A\\' && i<=\\'Z\\'){\\n                capital=true;\\n            }\\n            if(isdigit(i)){\\n                dig=true;\\n            }\\n            if(i==\\'!\\'||i==\\'@\\'||i==\\'#\\'||i==\\'\\n```||i==\\'%\\'||i==\\'^\\'||i==\\'&\\'||i==\\'*\\'||i==\\'(\\'||i==\\')\\'||i==\\'-\\'||i==\\'+\\'){\\n                spcl=true;\\n            }\\n        }\\n        if(c>=8){\\n            size=true;\\n        }\\n        for(int i=0; i<p.size()-1; i++){\\n            if(p[i]==p[i+1]){\\n                return false;\\n            }\\n        }\\n        if(size && small && capital &&dig && spcl){\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string p){\\n        bool size=false , small=false , capital=false , dig=false , spcl=false;\\n        int c=0;\\n        for(auto i:p){\\n            c++;\\n            if(i>=\\'a\\' && i<=\\'z\\'){\\n                small=true;\\n            }\\n            else if(i>=\\'A\\' && i<=\\'Z\\'){\\n                capital=true;\\n            }\\n            if(isdigit(i)){\\n                dig=true;\\n            }\\n            if(i==\\'!\\'||i==\\'@\\'||i==\\'#\\'||i==\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3785915,
                "title": "python-simple-solution-95-faster",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n  def strongPasswordCheckerII(self, password: str) -> bool:\\n    n = len(password)\\n    special_characters = \"!@#$%^&*()-+\"\\n    \\n    contains_digit = False\\n    is_strong_length = n >= 8\\n    contains_lowercase = False\\n    contains_uppercase = False\\n    contains_special_character = False\\n    for index, letter in enumerate(password):\\n      if letter.islower():\\n        contains_lowercase = True\\n      elif letter.isupper():\\n        contains_uppercase = True\\n      elif letter.isdigit():\\n        contains_digit = True\\n      elif letter in special_characters:\\n        contains_special_character = True\\n      if index > 0 and password[index - 1] == letter:\\n        return False\\n    return contains_digit and is_strong_length and contains_lowercase and contains_uppercase and contains_special_character\\n```",
                "solutionTags": [
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n  def strongPasswordCheckerII(self, password: str) -> bool:\\n    n = len(password)\\n    special_characters = \"!@#$%^&*()-+\"\\n    \\n    contains_digit = False\\n    is_strong_length = n >= 8\\n    contains_lowercase = False\\n    contains_uppercase = False\\n    contains_special_character = False\\n    for index, letter in enumerate(password):\\n      if letter.islower():\\n        contains_lowercase = True\\n      elif letter.isupper():\\n        contains_uppercase = True\\n      elif letter.isdigit():\\n        contains_digit = True\\n      elif letter in special_characters:\\n        contains_special_character = True\\n      if index > 0 and password[index - 1] == letter:\\n        return False\\n    return contains_digit and is_strong_length and contains_lowercase and contains_uppercase and contains_special_character\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3770570,
                "title": "strong-password-checker",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport re\\nclass Solution:\\n    def has_adjacent_duplicates(self,string):\\n        for i in range(len(string) - 1):\\n            if string[i] == string[i + 1]:\\n                return True\\n        return False\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        if len(password)<8:\\n            return False\\n        if not re.search(\"[A-Z]\", password):\\n            return False\\n        if not re.search(\"[a-z]\",password):\\n            return False\\n        if not re.search(\"[0-9]\",password):\\n            return False\\n        if not re.search(\"[-!@#$%^&*()+]\",password):\\n            return False\\n        if self.has_adjacent_duplicates(password)==True:\\n            return False\\n        return True \\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nimport re\\nclass Solution:\\n    def has_adjacent_duplicates(self,string):\\n        for i in range(len(string) - 1):\\n            if string[i] == string[i + 1]:\\n                return True\\n        return False\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        if len(password)<8:\\n            return False\\n        if not re.search(\"[A-Z]\", password):\\n            return False\\n        if not re.search(\"[a-z]\",password):\\n            return False\\n        if not re.search(\"[0-9]\",password):\\n            return False\\n        if not re.search(\"[-!@#$%^&*()+]\",password):\\n            return False\\n        if self.has_adjacent_duplicates(password)==True:\\n            return False\\n        return True \\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3770569,
                "title": "strong-password-checker",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport re\\nclass Solution:\\n    def has_adjacent_duplicates(self,string):\\n        for i in range(len(string) - 1):\\n            if string[i] == string[i + 1]:\\n                return True\\n        return False\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        if len(password)<8:\\n            return False\\n        if not re.search(\"[A-Z]\", password):\\n            return False\\n        if not re.search(\"[a-z]\",password):\\n            return False\\n        if not re.search(\"[0-9]\",password):\\n            return False\\n        if not re.search(\"[-!@#$%^&*()+]\",password):\\n            return False\\n        if self.has_adjacent_duplicates(password)==True:\\n            return False\\n        return True \\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nimport re\\nclass Solution:\\n    def has_adjacent_duplicates(self,string):\\n        for i in range(len(string) - 1):\\n            if string[i] == string[i + 1]:\\n                return True\\n        return False\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        if len(password)<8:\\n            return False\\n        if not re.search(\"[A-Z]\", password):\\n            return False\\n        if not re.search(\"[a-z]\",password):\\n            return False\\n        if not re.search(\"[0-9]\",password):\\n            return False\\n        if not re.search(\"[-!@#$%^&*()+]\",password):\\n            return False\\n        if self.has_adjacent_duplicates(password)==True:\\n            return False\\n        return True \\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3743417,
                "title": "easy-to-understand",
                "content": "# Code\\n```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        int lower=0,upper=0,digit=0,spl=0;\\n        for(int i =0;i<password.length(); i++){\\n            //To check if 2 adjacent characters are same\\n            if(i>0 && password.charAt(i) == password.charAt(i-1))\\n            return false;\\n            if(password.charAt(i)>=\\'a\\' && password.charAt(i)<=\\'z\\')\\n            lower++;\\n            else if(password.charAt(i)>=\\'A\\' && password.charAt(i)<=\\'Z\\')\\n            upper++;\\n            else if(password.charAt(i)>=\\'0\\' && password.charAt(i)<=\\'9\\')\\n            digit++;\\n            else\\n            spl++;\\n        }\\n        return (password.length()>=8 && lower>0 && upper>0 && digit>0 &&spl>0);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        int lower=0,upper=0,digit=0,spl=0;\\n        for(int i =0;i<password.length(); i++){\\n            //To check if 2 adjacent characters are same\\n            if(i>0 && password.charAt(i) == password.charAt(i-1))\\n            return false;\\n            if(password.charAt(i)>=\\'a\\' && password.charAt(i)<=\\'z\\')\\n            lower++;\\n            else if(password.charAt(i)>=\\'A\\' && password.charAt(i)<=\\'Z\\')\\n            upper++;\\n            else if(password.charAt(i)>=\\'0\\' && password.charAt(i)<=\\'9\\')\\n            digit++;\\n            else\\n            spl++;\\n        }\\n        return (password.length()>=8 && lower>0 && upper>0 && digit>0 &&spl>0);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3732487,
                "title": "strong-password-checker-ii-100-using-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution\\n{\\npublic:\\n    bool strongPasswordCheckerII(string password){\\n        if(password.size()<8){\\n            return false;\\n        }\\n        int digit=0,lower=0,upper=0,special=0,same=0;\\n        for(int i=0;i<password.size();i++){\\n            if(password[i]>=\\'0\\' && password[i]<=\\'9\\'){\\n                digit++;\\n            }\\n            if(password[i]>=97 && password[i]<=122){\\n                lower++;\\n            }\\n            if(password[i]>=65 && password[i]<=90){\\n                upper++;\\n            }\\n            if(password[i]==\\'!\\' || password[i]==\\'@\\' || password[i]==\\'#\\' || password[i]==\\'\\n``` || password[i]==\\'%\\' || password[i]==\\'^\\' || password[i]==\\'&\\' || password[i]==\\'*\\' || password[i]==\\'(\\' || password[i]==\\')\\' || password[i]==\\'-\\' || password[i]==\\'+\\'){\\n                special++;\\n            }\\n            if(password[i]==password[i+1]){\\n                same++;\\n            }\\n        }\\n        cout<<lower<<\":\"<<upper<<\":\"<<digit<<\":\"<<special<<\":\"<<same<<endl;\\n        if(lower>=1 && upper>=1 && digit>=1 && special>=1 && same==0){\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    bool strongPasswordCheckerII(string password){\\n        if(password.size()<8){\\n            return false;\\n        }\\n        int digit=0,lower=0,upper=0,special=0,same=0;\\n        for(int i=0;i<password.size();i++){\\n            if(password[i]>=\\'0\\' && password[i]<=\\'9\\'){\\n                digit++;\\n            }\\n            if(password[i]>=97 && password[i]<=122){\\n                lower++;\\n            }\\n            if(password[i]>=65 && password[i]<=90){\\n                upper++;\\n            }\\n            if(password[i]==\\'!\\' || password[i]==\\'@\\' || password[i]==\\'#\\' || password[i]==\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3731859,
                "title": "brute-force",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if(password.length() < 8) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n        List<Character> al = new ArrayList();\\n        for(int i = 0; i < password.length(); i++) {\\n            al.add(password.charAt(i));\\n        }\\n        boolean lower = false;\\n        boolean upper = false;\\n        boolean digit = false;\\n        boolean spchar = false;\\n        String s = \"!@#$%^&*()-+\";\\n        char previous = \\'.\\';\\n        for(int i = 0; i < al.size(); i++){\\n            if(al.get(i) == previous){\\n                return false;\\n            }\\n            previous = al.get(i);\\n            if(al.get(i) >= \\'a\\' && al.get(i) <= \\'z\\'){\\n                lower = true;\\n            }else if(al.get(i) >= \\'A\\' && al.get(i) <= \\'Z\\'){\\n                upper = true;\\n            }else if(al.get(i) >= \\'0\\' && al.get(i) <= \\'9\\'){\\n                digit = true;\\n            }else if(s.indexOf(al.get(i)) != -1){\\n                spchar = true;\\n            }\\n        }\\n        return lower && upper && digit && spchar;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean strongPasswordCheckerII(String password) {\\n        if(password.length() < 8) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n        List<Character> al = new ArrayList();\\n        for(int i = 0; i < password.length(); i++) {\\n            al.add(password.charAt(i));\\n        }\\n        boolean lower = false;\\n        boolean upper = false;\\n        boolean digit = false;\\n        boolean spchar = false;\\n        String s = \"!@#$%^&*()-+\";\\n        char previous = \\'.\\';\\n        for(int i = 0; i < al.size(); i++){\\n            if(al.get(i) == previous){\\n                return false;\\n            }\\n            previous = al.get(i);\\n            if(al.get(i) >= \\'a\\' && al.get(i) <= \\'z\\'){\\n                lower = true;\\n            }else if(al.get(i) >= \\'A\\' && al.get(i) <= \\'Z\\'){\\n                upper = true;\\n            }else if(al.get(i) >= \\'0\\' && al.get(i) <= \\'9\\'){\\n                digit = true;\\n            }else if(s.indexOf(al.get(i)) != -1){\\n                spchar = true;\\n            }\\n        }\\n        return lower && upper && digit && spchar;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3723271,
                "title": "python-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def strongPasswordCheckerII(self, password):\\n        \"\"\"\\n        :type password: str\\n        :rtype: bool\\n        \"\"\"\\n        valid = (len(password) >= 8) and any(c for c in password if c.islower()) and any(c for c in password if c.isupper()) and any(c for c in password if c.isdigit()) and any(not c.isalnum() for c in password)\\n\\n        if valid:\\n            password = [i for i in password] \\n            \\n            \\n            for i in range(len(password)-1):\\n                if password[i] == password[(i + 1) % len(password)]:\\n                    return False\\n            \\n            \\n            return True\\n        \\n        else:\\n            return False\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def strongPasswordCheckerII(self, password):\\n        \"\"\"\\n        :type password: str\\n        :rtype: bool\\n        \"\"\"\\n        valid = (len(password) >= 8) and any(c for c in password if c.islower()) and any(c for c in password if c.isupper()) and any(c for c in password if c.isdigit()) and any(not c.isalnum() for c in password)\\n\\n        if valid:\\n            password = [i for i in password] \\n            \\n            \\n            for i in range(len(password)-1):\\n                if password[i] == password[(i + 1) % len(password)]:\\n                    return False\\n            \\n            \\n            return True\\n        \\n        else:\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3693081,
                "title": "0ms-single-traversal",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        int n = password.length(), l = 0, u = 0, d = 0, s= 0;\\n        if(n<8) return false;\\n        for(int i = 0; i < n; i++){\\n            if(i<n-1){\\n                if(password[i]==password[i+1]) return false;\\n            }\\n            if(\\'a\\'<=password[i]&&password[i]<=\\'z\\') l++;\\n            else if(\\'A\\'<=password[i]&&password[i]<=\\'Z\\') u++;\\n            else if(\\'0\\'<=password[i]&&password[i]<=\\'9\\') d++;\\n            else s++;\\n        }\\n        return l && u && d && s;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        int n = password.length(), l = 0, u = 0, d = 0, s= 0;\\n        if(n<8) return false;\\n        for(int i = 0; i < n; i++){\\n            if(i<n-1){\\n                if(password[i]==password[i+1]) return false;\\n            }\\n            if(\\'a\\'<=password[i]&&password[i]<=\\'z\\') l++;\\n            else if(\\'A\\'<=password[i]&&password[i]<=\\'Z\\') u++;\\n            else if(\\'0\\'<=password[i]&&password[i]<=\\'9\\') d++;\\n            else s++;\\n        }\\n        return l && u && d && s;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3683602,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n#define HAS_LOWERCASE 0x1\\n#define HAS_UPPERCASE 0x2\\n#define HAS_DIGIT     0x4\\n#define HAS_SPECIAL   0x8\\n\\n    bool isspecial(char c)\\n    {\\n        switch(c)\\n        {\\n            case \\'!\\':\\n            case \\'@\\':\\n            case \\'#\\':\\n            case \\'\\n```:\\n            case \\'%\\':\\n            case \\'^\\':\\n            case \\'&\\':\\n            case \\'*\\':\\n            case \\'(\\':\\n            case \\')\\':\\n            case \\'-\\':\\n            case \\'+\\':\\n                return true;\\n        }\\n        return false;\\n    }\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        if (password.length() < 8)\\n        {\\n            return false;\\n        }\\n        int score = 0;\\n        for (int i = 0; i < password.length(); i++)\\n        {\\n            if (std::islower(password[i]))\\n            {\\n                score |= HAS_LOWERCASE;\\n            }\\n            else if (std::isupper(password[i]))\\n            {\\n                score |= HAS_UPPERCASE;\\n            }\\n            else if (std::isdigit(password[i]))\\n            {\\n                score |= HAS_DIGIT;\\n            }\\n            else if (isspecial(password[i]))\\n            {\\n                score |= HAS_SPECIAL;\\n            }\\n\\n            if ((i > 0) && (password[i-1] == password[i]))\\n            {\\n                return false;\\n            }\\n        }\\n\\n        return score == (HAS_SPECIAL|HAS_DIGIT|HAS_UPPERCASE|HAS_LOWERCASE);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n#define HAS_LOWERCASE 0x1\\n#define HAS_UPPERCASE 0x2\\n#define HAS_DIGIT     0x4\\n#define HAS_SPECIAL   0x8\\n\\n    bool isspecial(char c)\\n    {\\n        switch(c)\\n        {\\n            case \\'!\\':\\n            case \\'@\\':\\n            case \\'#\\':\\n            case \\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3675377,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        if(password.length()<8){\\n            return false;\\n        }\\n        for(int i=1;i<password.length();i++){\\n            if(password[i]==password[i-1]){\\n                return false;\\n            }\\n        }\\n        int numbers[11]={0};\\n        int upper[26]={0};\\n        int lower[26]={0};\\n        int special[256]={0};\\n        for(int i=0;i<password.length();i++){\\n            if(password[i]>=\\'a\\' && password[i]<=\\'z\\'){\\n                lower[password[i]-\\'a\\']++;\\n            }\\n            else if(password[i]>=\\'A\\' && password[i]<=\\'Z\\'){\\n                upper[password[i]-\\'A\\']++;\\n            }\\n            else if(password[i]>=\\'0\\' && password[i]<=\\'9\\'){\\n                numbers[password[i]-\\'0\\']++;\\n            }\\n            else{\\n                special[password[i]]++;\\n            }\\n        }\\n            bool flag1=false,flag2=false,flag3=false,flag4=false;\\n            for(int i=0;i<256;i++){\\n                if(i<11){\\n                    if(numbers[i]!=0){\\n                        flag1=true;\\n                    }\\n                }\\n                if(i<26){\\n                    if(upper[i]!=0){\\n                        flag2=true;\\n                    }\\n                    if(lower[i]!=0){\\n                        flag3=true;\\n                    }\\n                }\\n                if(special[i]!=0){\\n                    flag4=true;\\n                }\\n            }\\n        if(flag1 && flag2 && flag3 && flag4)\\n        return true;\\n\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        if(password.length()<8){\\n            return false;\\n        }\\n        for(int i=1;i<password.length();i++){\\n            if(password[i]==password[i-1]){\\n                return false;\\n            }\\n        }\\n        int numbers[11]={0};\\n        int upper[26]={0};\\n        int lower[26]={0};\\n        int special[256]={0};\\n        for(int i=0;i<password.length();i++){\\n            if(password[i]>=\\'a\\' && password[i]<=\\'z\\'){\\n                lower[password[i]-\\'a\\']++;\\n            }\\n            else if(password[i]>=\\'A\\' && password[i]<=\\'Z\\'){\\n                upper[password[i]-\\'A\\']++;\\n            }\\n            else if(password[i]>=\\'0\\' && password[i]<=\\'9\\'){\\n                numbers[password[i]-\\'0\\']++;\\n            }\\n            else{\\n                special[password[i]]++;\\n            }\\n        }\\n            bool flag1=false,flag2=false,flag3=false,flag4=false;\\n            for(int i=0;i<256;i++){\\n                if(i<11){\\n                    if(numbers[i]!=0){\\n                        flag1=true;\\n                    }\\n                }\\n                if(i<26){\\n                    if(upper[i]!=0){\\n                        flag2=true;\\n                    }\\n                    if(lower[i]!=0){\\n                        flag3=true;\\n                    }\\n                }\\n                if(special[i]!=0){\\n                    flag4=true;\\n                }\\n            }\\n        if(flag1 && flag2 && flag3 && flag4)\\n        return true;\\n\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3671612,
                "title": "easy-solution-to-get",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        i=0\\n        c=0\\n        v=0\\n        d=0\\n        s=0\\n        if len(password)<8:\\n            return False\\n        while(i<len(password)):\\n            if i<len(password)-1:\\n                if password[i]==password[i+1]:\\n                    return False\\n            if password[i].isupper():\\n                c=1\\n            elif password[i].islower():\\n                v=1\\n            elif password[i].isdigit():\\n                d=1\\n            else:\\n                s=1\\n            i+=1\\n        if c and v:\\n            if d and s:\\n                return True\\n        return False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        i=0\\n        c=0\\n        v=0\\n        d=0\\n        s=0\\n        if len(password)<8:\\n            return False\\n        while(i<len(password)):\\n            if i<len(password)-1:\\n                if password[i]==password[i+1]:\\n                    return False\\n            if password[i].isupper():\\n                c=1\\n            elif password[i].islower():\\n                v=1\\n            elif password[i].isdigit():\\n                d=1\\n            else:\\n                s=1\\n            i+=1\\n        if c and v:\\n            if d and s:\\n                return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3663372,
                "title": "easiest-solution-beats-100-runtime-0-ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        if(password.length()<8)\\n        return false;\\n\\n        int lower=0, upper=0, special=0, num=0;\\n\\n        for(int i=0; i< password.size(); i++)\\n        {\\n            if(password[i]>=\\'A\\' && password[i]<=\\'Z\\')\\n            upper++;\\n\\n           else  if(password[i]>=\\'a\\' && password[i]<=\\'z\\')\\n            lower++;\\n\\n           else if(password[i]>=\\'0\\' && password[i]<=\\'9\\')\\n            num++;\\n                else special++;\\n                \\n                if(i+1<=password.size() && password[i]==password[i+1])\\n                {\\n                    return false;\\n                }\\n        }\\n\\n        if(upper && lower && special && num)\\n        return true;\\n        return false;\\n\\n    \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        if(password.length()<8)\\n        return false;\\n\\n        int lower=0, upper=0, special=0, num=0;\\n\\n        for(int i=0; i< password.size(); i++)\\n        {\\n            if(password[i]>=\\'A\\' && password[i]<=\\'Z\\')\\n            upper++;\\n\\n           else  if(password[i]>=\\'a\\' && password[i]<=\\'z\\')\\n            lower++;\\n\\n           else if(password[i]>=\\'0\\' && password[i]<=\\'9\\')\\n            num++;\\n                else special++;\\n                \\n                if(i+1<=password.size() && password[i]==password[i+1])\\n                {\\n                    return false;\\n                }\\n        }\\n\\n        if(upper && lower && special && num)\\n        return true;\\n        return false;\\n\\n    \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3656645,
                "title": "beats-100-c-solution-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        if(password.size()<8)\\n            return false;\\n        bool l=0;\\n        bool u=0;\\n        bool d=0;\\n        bool s=0;\\n        for(int i=0;i<password.size();i++)\\n        {\\n            if(isdigit(password[i]))\\n                d=1;\\n            else if(islower(password[i]))\\n                l=1;\\n            else if(isupper(password[i]))\\n                u=1;\\n            else\\n                s=1;\\n        }\\n        for(int i=1;i<password.length();i++)\\n        {\\n            if(password[i]==password[i-1])\\n                return false;\\n        }\\n        if(d && l && s && u)\\n            return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        if(password.size()<8)\\n            return false;\\n        bool l=0;\\n        bool u=0;\\n        bool d=0;\\n        bool s=0;\\n        for(int i=0;i<password.size();i++)\\n        {\\n            if(isdigit(password[i]))\\n                d=1;\\n            else if(islower(password[i]))\\n                l=1;\\n            else if(isupper(password[i]))\\n                u=1;\\n            else\\n                s=1;\\n        }\\n        for(int i=1;i<password.length();i++)\\n        {\\n            if(password[i]==password[i-1])\\n                return false;\\n        }\\n        if(d && l && s && u)\\n            return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3653770,
                "title": "simple-easy-python-solution-for-beginners",
                "content": "# Code\\n```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        valid_password_check_1 = False\\n        valid_password_check_2 = False\\n        valid_password_check_3 = False\\n        valid_password_check_4 = False\\n        valid_password_check_5 = False\\n        valid_password_check_6 = False\\n\\n#Check - length\\n\\n        if len(password) >= 8:\\n            valid_password_check_1 = True\\n        else:\\n            return False\\n\\n            \\n#        print(valid_password_check_1)\\n\\n#Check - lowercase character\\n\\n        for i in password:\\n            if i.islower() == True:\\n                valid_password_check_2 = True\\n                break\\n\\n#        print(valid_password_check_2)\\n\\n#Check - uppercase character\\n\\n        for k in password:\\n            if k.isupper() == True:\\n                valid_password_check_3 = True\\n                break\\n\\n#        print(valid_password_check_3)\\n\\n#Check - digit\\n\\n        for j in password:\\n            if j.isdigit() == True:\\n                valid_password_check_4 = True\\n                break\\n\\n#        print(valid_password_check_4)\\n\\n            \\n\\n#Check - special character\\n        \\n        for l in password:\\n            if l == \\'!\\' or l == \\'@\\' or l == \\'#\\' or l == \\'\\n``` or l == \\'%\\' or l == \\'^\\' or l == \\'&\\' or l == \\'*\\' or l == \\'(\\' or l == \\')\\' or l == \\'+\\' or l == \\'-\\':\\n                 valid_password_check_5 = True\\n                 break\\n\\n#        print(valid_password_check_5)\\n\\n#Check - same character repeat twice\\n\\n        for m in password:\\n            position = password.index(m)\\n            if position == 0:\\n                if password[position+1] != m:\\n                    valid_password_check_6 = True\\n                else:\\n                    return False\\n            elif position !=0 and position < len(password) -1:\\n                if password[position-1] != m and password[position+1] != m:\\n                    valid_password_check_6 = True\\n                else:\\n                    return False\\n\\n            elif position == len(password)-1 and valid_password_check_1 == True:\\n                if password[position-1] != m:\\n                    valid_password_check_6 = True\\n                else:\\n                    return False\\n\\n#        print(valid_password_check_6)\\n\\n# Validate\\n\\n        if valid_password_check_1 == True and valid_password_check_2 == True and valid_password_check_3 == True and valid_password_check_4 == True and valid_password_check_5 == True and valid_password_check_6 == True:\\n            return True\\n        \\n             \\n\\n               \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        valid_password_check_1 = False\\n        valid_password_check_2 = False\\n        valid_password_check_3 = False\\n        valid_password_check_4 = False\\n        valid_password_check_5 = False\\n        valid_password_check_6 = False\\n\\n#Check - length\\n\\n        if len(password) >= 8:\\n            valid_password_check_1 = True\\n        else:\\n            return False\\n\\n            \\n#        print(valid_password_check_1)\\n\\n#Check - lowercase character\\n\\n        for i in password:\\n            if i.islower() == True:\\n                valid_password_check_2 = True\\n                break\\n\\n#        print(valid_password_check_2)\\n\\n#Check - uppercase character\\n\\n        for k in password:\\n            if k.isupper() == True:\\n                valid_password_check_3 = True\\n                break\\n\\n#        print(valid_password_check_3)\\n\\n#Check - digit\\n\\n        for j in password:\\n            if j.isdigit() == True:\\n                valid_password_check_4 = True\\n                break\\n\\n#        print(valid_password_check_4)\\n\\n            \\n\\n#Check - special character\\n        \\n        for l in password:\\n            if l == \\'!\\' or l == \\'@\\' or l == \\'#\\' or l == \\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3642935,
                "title": "js-easy-to-read",
                "content": "# Intuition\\nCheck all conditions one by one\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} password\\n * @return {boolean}\\n */\\nvar strongPasswordCheckerII = function(password) {\\n    var verified = [false,false,false,false]\\n    var l = password.length\\n\\n    // It has at least 8 characters.\\n    if(l < 8){return false}\\n\\n    for(var i = 0; i < l; i++){\\n        var c = password[i]\\n\\n        // It contains at least one lowercase letter.\\n        var bool0 = c.charCodeAt(0) > 96 && c.charCodeAt(0) < 123\\n        if(bool0){verified[0] = true}\\n\\n        // It contains at least one uppercase letter.\\n        var bool1 = c.charCodeAt(0) > 64 && c.charCodeAt(0) < 91\\n        if(bool1){verified[1] = true}\\n\\n        // It contains at least one digit.\\n        var bool2 = c.charCodeAt(0) > 47 && c.charCodeAt(0) < 58\\n         if(bool2){verified[2] = true}\\n\\n        // It contains at least one special character. \\n        var bool3 = \"!@#$%^&*()-+\".includes(c)\\n         if(bool3){verified[3] = true}\\n\\n        // It does not contain 2 of the same character in adjacent positions \\n        var bool4 = c == password[i-1] || \"\"\\n        if(bool4){return false}\\n    \\n    }\\n\\n    return !verified.includes(false)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} password\\n * @return {boolean}\\n */\\nvar strongPasswordCheckerII = function(password) {\\n    var verified = [false,false,false,false]\\n    var l = password.length\\n\\n    // It has at least 8 characters.\\n    if(l < 8){return false}\\n\\n    for(var i = 0; i < l; i++){\\n        var c = password[i]\\n\\n        // It contains at least one lowercase letter.\\n        var bool0 = c.charCodeAt(0) > 96 && c.charCodeAt(0) < 123\\n        if(bool0){verified[0] = true}\\n\\n        // It contains at least one uppercase letter.\\n        var bool1 = c.charCodeAt(0) > 64 && c.charCodeAt(0) < 91\\n        if(bool1){verified[1] = true}\\n\\n        // It contains at least one digit.\\n        var bool2 = c.charCodeAt(0) > 47 && c.charCodeAt(0) < 58\\n         if(bool2){verified[2] = true}\\n\\n        // It contains at least one special character. \\n        var bool3 = \"!@#$%^&*()-+\".includes(c)\\n         if(bool3){verified[3] = true}\\n\\n        // It does not contain 2 of the same character in adjacent positions \\n        var bool4 = c == password[i-1] || \"\"\\n        if(bool4){return false}\\n    \\n    }\\n\\n    return !verified.includes(false)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3640446,
                "title": "solution-100-beats",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        if(password.size()<8){return false;}\\n        int l,u,d,s,n;\\n        string ss=\"!@#$%^&*()-+\";\\n        l=u=d=s=0;\\n        n=1;\\n        \\n        for(int i=0;i<password.size();i++)\\n        {\\n            if(password[i]>=97 && password[i]<=122){l=1;}\\n            else if(password[i]>=65 && password[i]<=90){u=1;}\\n            else if(password[i]>=48 && password[i]<=57){d=1;}\\n            else if(ss.find(password[i]>=0)){s=1;}\\n            if(i+1<password.size())\\n            {\\n                if(password[i]==password[i+1]){n=0;} \\n            }\\n             \\n        }\\n        cout<<l<<\" \"<<u<<\" \"<<d<<\" \"<<s<<\" \"<<n;\\n        if(l==1 && u==1 && d==1 && s==1 && n==1){return true;}\\n        return false;\\n\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        if(password.size()<8){return false;}\\n        int l,u,d,s,n;\\n        string ss=\"!@#$%^&*()-+\";\\n        l=u=d=s=0;\\n        n=1;\\n        \\n        for(int i=0;i<password.size();i++)\\n        {\\n            if(password[i]>=97 && password[i]<=122){l=1;}\\n            else if(password[i]>=65 && password[i]<=90){u=1;}\\n            else if(password[i]>=48 && password[i]<=57){d=1;}\\n            else if(ss.find(password[i]>=0)){s=1;}\\n            if(i+1<password.size())\\n            {\\n                if(password[i]==password[i+1]){n=0;} \\n            }\\n             \\n        }\\n        cout<<l<<\" \"<<u<<\" \"<<d<<\" \"<<s<<\" \"<<n;\\n        if(l==1 && u==1 && d==1 && s==1 && n==1){return true;}\\n        return false;\\n\\n        \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3628838,
                "title": "strong-password-checker-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n\\n    /**\\n     * @param String $password\\n     * @return Boolean\\n     */\\n    function strongPasswordCheckerII($password) {\\n        $i = 0;\\n        $count = 0;\\n        $count_upper=0;\\n        $count_lower=0;\\n        $count_numeric=0;\\n        $spc_letters = array_intersect(str_split(\"!@#$%^&*()-+\"), str_split($password));\\n        while($i < strlen($password)){\\n           \\n            if($password[$i] >= \\'A\\' && $password[$i]<= \\'Z\\'){\\n                $count_upper++;\\n            }\\n            if($password[$i] >= \\'a\\' && $password[$i]<= \\'z\\'){\\n                $count_lower++;\\n            }\\n            if($password[$i] >= \\'0\\' && $password[$i]<= \\'9\\'){\\n                $count_numeric++;\\n            }\\n         \\n            if($i < strlen($password) && $i + 1 < strlen($password)){\\n                if($password[$i] == $password[$i+1]){\\n                    return false;\\n                }\\n            }\\n            $i++;\\n            $count++;\\n        }\\n\\n       \\n        if($count < 8){\\n            return false;\\n        }\\n        if($count_upper < 1){\\n            return false;\\n        }\\n        if($count_lower < 1){\\n            return false;\\n        }\\n        if(count($spc_letters) < 1){\\n            return false;\\n        }\\n        if($count_numeric < 1){\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "PHP"
                ],
                "code": "```\\nclass Solution {\\n\\n    /**\\n     * @param String $password\\n     * @return Boolean\\n     */\\n    function strongPasswordCheckerII($password) {\\n        $i = 0;\\n        $count = 0;\\n        $count_upper=0;\\n        $count_lower=0;\\n        $count_numeric=0;\\n        $spc_letters = array_intersect(str_split(\"!@#$%^&*()-+\"), str_split($password));\\n        while($i < strlen($password)){\\n           \\n            if($password[$i] >= \\'A\\' && $password[$i]<= \\'Z\\'){\\n                $count_upper++;\\n            }\\n            if($password[$i] >= \\'a\\' && $password[$i]<= \\'z\\'){\\n                $count_lower++;\\n            }\\n            if($password[$i] >= \\'0\\' && $password[$i]<= \\'9\\'){\\n                $count_numeric++;\\n            }\\n         \\n            if($i < strlen($password) && $i + 1 < strlen($password)){\\n                if($password[$i] == $password[$i+1]){\\n                    return false;\\n                }\\n            }\\n            $i++;\\n            $count++;\\n        }\\n\\n       \\n        if($count < 8){\\n            return false;\\n        }\\n        if($count_upper < 1){\\n            return false;\\n        }\\n        if($count_lower < 1){\\n            return false;\\n        }\\n        if(count($spc_letters) < 1){\\n            return false;\\n        }\\n        if($count_numeric < 1){\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3621873,
                "title": "simple-regex-checks-in-python",
                "content": "# Intuition\\nUsing re in Python to check each condition.\\n\\n# Notes\\n1. Escape special characters.\\n2. Use back reference to refer to the same character.\\n\\n# Code\\n```\\nimport re\\n\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        if not re.findall(r\".{8,}\", password):\\n            return False\\n\\n        if not re.findall(r\"[a-z]\", password):\\n            return False\\n\\n        if not re.findall(r\"[A-Z]\", password):\\n            return False\\n\\n        if not re.findall(r\"[0-9]\", password):\\n            return False\\n\\n        if not re.findall(r\"[\\\\!\\\\@\\\\#\\\\$\\\\%\\\\^\\\\&\\\\*\\\\(\\\\)\\\\-\\\\+]\", password):\\n            return False\\n\\n        if re.findall(r\"(.)\\\\1\", password):\\n            return False\\n\\n        return True\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "String",
                    "String Matching"
                ],
                "code": "```\\nimport re\\n\\nclass Solution:\\n    def strongPasswordCheckerII(self, password: str) -> bool:\\n        if not re.findall(r\".{8,}\", password):\\n            return False\\n\\n        if not re.findall(r\"[a-z]\", password):\\n            return False\\n\\n        if not re.findall(r\"[A-Z]\", password):\\n            return False\\n\\n        if not re.findall(r\"[0-9]\", password):\\n            return False\\n\\n        if not re.findall(r\"[\\\\!\\\\@\\\\#\\\\$\\\\%\\\\^\\\\&\\\\*\\\\(\\\\)\\\\-\\\\+]\", password):\\n            return False\\n\\n        if re.findall(r\"(.)\\\\1\", password):\\n            return False\\n\\n        return True\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3605949,
                "title": "python-best-solution",
                "content": "\\n# Code\\n```\\nimport string \\nclass Solution(object):\\n    def strongPasswordCheckerII(self, password):\\n        lu=list(string.ascii_uppercase)\\n        ll=list(string.ascii_lowercase)\\n        pl=list(password)\\n        if len(password)>=8:\\n            u=0\\n            l=0\\n            integer=0\\n            c=0\\n            res=0\\n            for i in lu:\\n                if i in password:\\n                    u+=1\\n            for j in ll:\\n                if j in password:\\n                    l+=1\\n            for k in password:\\n                if k.isnumeric():\\n                    integer+=1\\n                if k in \"!@#$%^&*()-+\":\\n                    c+=1\\n            if u>=1 and l>=1 and integer>=1 and c>=1:\\n                res=1\\n                for i in range(len(password)-1):\\n                    if password[i]==password[i+1]:\\n                        res=0\\n            if res==1:\\n                return True\\n            else:\\n                return False\\n\\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nimport string \\nclass Solution(object):\\n    def strongPasswordCheckerII(self, password):\\n        lu=list(string.ascii_uppercase)\\n        ll=list(string.ascii_lowercase)\\n        pl=list(password)\\n        if len(password)>=8:\\n            u=0\\n            l=0\\n            integer=0\\n            c=0\\n            res=0\\n            for i in lu:\\n                if i in password:\\n                    u+=1\\n            for j in ll:\\n                if j in password:\\n                    l+=1\\n            for k in password:\\n                if k.isnumeric():\\n                    integer+=1\\n                if k in \"!@#$%^&*()-+\":\\n                    c+=1\\n            if u>=1 and l>=1 and integer>=1 and c>=1:\\n                res=1\\n                for i in range(len(password)-1):\\n                    if password[i]==password[i+1]:\\n                        res=0\\n            if res==1:\\n                return True\\n            else:\\n                return False\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3598260,
                "title": "python-solution-with-efficient-memory",
                "content": "# Code\\n```\\nclass Solution(object):\\n    def strongPasswordCheckerII(self, password):\\n        \"\"\"\\n        :type password: str\\n        :rtype: bool\\n        \"\"\"\\n        x = \\'!@#$%^&*()-+\\'\\n        y = \\'QWERTYUIOPASDFGHJKLZXCVBNM\\'\\n        z = \\'qwertyuiopasdfghjklzxcvbnm\\'\\n        a = \\'1234567890\\'\\n        q = False\\n        w = False\\n        e = False\\n        r = False\\n        if len(password) < 8:\\n            return False\\n        if (password[0] in x):\\n            q = True\\n        elif password[0] in y:\\n            w = True\\n        elif password[0] in z:\\n            e = True\\n        elif password[0] in a:\\n            r = True\\n        for i in range(1, len(password)):\\n            if (password[i] == password[i-1]):\\n                return False\\n                break\\n            if (password[i] in x):\\n                q = True\\n            elif password[i] in y:\\n                w = True\\n            elif password[i] in z:\\n                e = True\\n            elif password[i] in a:\\n                r = True\\n        if q == False or w == False or e == False or r == False:\\n            return False\\n        return True\\n```",
                "solutionTags": [
                    "Python",
                    "String"
                ],
                "code": "```\\nclass Solution(object):\\n    def strongPasswordCheckerII(self, password):\\n        \"\"\"\\n        :type password: str\\n        :rtype: bool\\n        \"\"\"\\n        x = \\'!@#$%^&*()-+\\'\\n        y = \\'QWERTYUIOPASDFGHJKLZXCVBNM\\'\\n        z = \\'qwertyuiopasdfghjklzxcvbnm\\'\\n        a = \\'1234567890\\'\\n        q = False\\n        w = False\\n        e = False\\n        r = False\\n        if len(password) < 8:\\n            return False\\n        if (password[0] in x):\\n            q = True\\n        elif password[0] in y:\\n            w = True\\n        elif password[0] in z:\\n            e = True\\n        elif password[0] in a:\\n            r = True\\n        for i in range(1, len(password)):\\n            if (password[i] == password[i-1]):\\n                return False\\n                break\\n            if (password[i] in x):\\n                q = True\\n            elif password[i] in y:\\n                w = True\\n            elif password[i] in z:\\n                e = True\\n            elif password[i] in a:\\n                r = True\\n        if q == False or w == False or e == False or r == False:\\n            return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3587602,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} password\\n * @return {boolean}\\n */\\nvar strongPasswordCheckerII = function(password) {\\n    let upper = 0;\\n    let lower = 0;\\n    let num = 0;\\n    let special = 0;\\n    let count = 0;\\n    let current = password.substring(0,1);\\n    let lst  = password.split(\\'\\');\\n    // !@#$%^&*()-+\\n    let obj = {\\'!\\' : 1, \"@\" : 1, \\'#\\' : 1, \\'\\n``` : 1, \\n    \\'%\\': 1, \\'^\\' : 1, \\'*\\' : 1, \\'(\\': 1, \\')\\': 1, \\'-\\': 1, \\'+\\': 1, \\'&\\': 1}\\n    if (password.length < 8) return false;\\n\\n    for(let i=0; i< lst.length;i++){\\n        let p = lst[i];\\n        \\n        if (current == p) count+=1;\\n        else {\\n            count = 1;\\n            current = p\\n        }\\n        if (p == p.toUpperCase() && p.charCodeAt(0) >= 65 && p.charCodeAt(0) <= 90) upper+=1;\\n        if (p == p.toLowerCase() && p.charCodeAt(0) >= 97 && p.charCodeAt(0) <= 122) lower+=1;\\n        if (!isNaN(p)) num+=1;\\n        if (obj.hasOwnProperty(p)) special+=1;\\n        if (count == 2) return false;\\n    }\\n \\n    console.log(upper,lower,num,special)\\n   \\n\\n    if (upper == 0  || lower == 0 || num == 0 || special == 0) return false;\\n    return true;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} password\\n * @return {boolean}\\n */\\nvar strongPasswordCheckerII = function(password) {\\n    let upper = 0;\\n    let lower = 0;\\n    let num = 0;\\n    let special = 0;\\n    let count = 0;\\n    let current = password.substring(0,1);\\n    let lst  = password.split(\\'\\');\\n    // !@#$%^&*()-+\\n    let obj = {\\'!\\' : 1, \"@\" : 1, \\'#\\' : 1, \\'\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 2016789,
                "content": [
                    {
                        "username": "almostmonday",
                        "content": "This one is very easy to solve using annoying if-else spaghetti code. But if you\\'re tired of it, check [this](https://leetcode.com/problems/strong-password-checker-ii/solutions/3918214/avoiding-if-else-spaghetti/) out."
                    },
                    {
                        "username": "Sgdev",
                        "content": "lol at least this is useful "
                    },
                    {
                        "username": "RavirajKumarTiwari",
                        "content": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        // ckeck lenght of the password\\n        if(password.length() < 8){\\n            return false;\\n        }\\n        // Use four boolean variables to track the presence of lowercase, uppercase, digit and special characters\\n        bool hasLower = false, hasUpper = false, hasDigit = false, hasSpecial = false;\\n    \\n        // Use a set to store the characters that have appeared in adjacent positions\\n        set<char> adjacent;\\n        /*A set is a data structure that stores unique elements in no particular order. In this case, we use a set of characters to keep track of the characters that have appeared in adjacent positions in the password. For example, if the password is \\u201Caabbcc\\u201D, then the set will contain {\\u2018a\\u2019, \\u2018b\\u2019, \\u2018c\\u2019}. This way, we can easily check if the password violates the condition of not having two of the same character in adjacent positions by checking if the set is empty or not.*/\\n    \\n        // Loop through the password and update the boolean variables and the set\\n        for (int i = 0; i < password.length(); i++) {\\n            char c = password[i];\\n            if (islower(c)) hasLower = true;\\n            else if (isupper(c)) hasUpper = true;\\n            else if (isdigit(c)) hasDigit = true;\\n            else if (strchr(\"!@#$%^&*()-+\", c)) hasSpecial = true;\\n\\n            if (i > 0 && c == password[i-1]) adjacent.insert(c);\\n        }   \\n    \\n        // Return true if all the boolean variables are true and the set is empty\\n        return hasLower && hasUpper && hasDigit && hasSpecial && adjacent.empty();\\n    }\\n\\n};\\n```"
                    },
                    {
                        "username": "alanparmenter",
                        "content": "There is a rule against solutions in the discussions; please move this to the solutions page (typo: length, not lenght)"
                    }
                ]
            },
            {
                "id": 2005761,
                "content": [
                    {
                        "username": "almostmonday",
                        "content": "This one is very easy to solve using annoying if-else spaghetti code. But if you\\'re tired of it, check [this](https://leetcode.com/problems/strong-password-checker-ii/solutions/3918214/avoiding-if-else-spaghetti/) out."
                    },
                    {
                        "username": "Sgdev",
                        "content": "lol at least this is useful "
                    },
                    {
                        "username": "RavirajKumarTiwari",
                        "content": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        // ckeck lenght of the password\\n        if(password.length() < 8){\\n            return false;\\n        }\\n        // Use four boolean variables to track the presence of lowercase, uppercase, digit and special characters\\n        bool hasLower = false, hasUpper = false, hasDigit = false, hasSpecial = false;\\n    \\n        // Use a set to store the characters that have appeared in adjacent positions\\n        set<char> adjacent;\\n        /*A set is a data structure that stores unique elements in no particular order. In this case, we use a set of characters to keep track of the characters that have appeared in adjacent positions in the password. For example, if the password is \\u201Caabbcc\\u201D, then the set will contain {\\u2018a\\u2019, \\u2018b\\u2019, \\u2018c\\u2019}. This way, we can easily check if the password violates the condition of not having two of the same character in adjacent positions by checking if the set is empty or not.*/\\n    \\n        // Loop through the password and update the boolean variables and the set\\n        for (int i = 0; i < password.length(); i++) {\\n            char c = password[i];\\n            if (islower(c)) hasLower = true;\\n            else if (isupper(c)) hasUpper = true;\\n            else if (isdigit(c)) hasDigit = true;\\n            else if (strchr(\"!@#$%^&*()-+\", c)) hasSpecial = true;\\n\\n            if (i > 0 && c == password[i-1]) adjacent.insert(c);\\n        }   \\n    \\n        // Return true if all the boolean variables are true and the set is empty\\n        return hasLower && hasUpper && hasDigit && hasSpecial && adjacent.empty();\\n    }\\n\\n};\\n```"
                    },
                    {
                        "username": "alanparmenter",
                        "content": "There is a rule against solutions in the discussions; please move this to the solutions page (typo: length, not lenght)"
                    }
                ]
            },
            {
                "id": 1973285,
                "content": [
                    {
                        "username": "almostmonday",
                        "content": "This one is very easy to solve using annoying if-else spaghetti code. But if you\\'re tired of it, check [this](https://leetcode.com/problems/strong-password-checker-ii/solutions/3918214/avoiding-if-else-spaghetti/) out."
                    },
                    {
                        "username": "Sgdev",
                        "content": "lol at least this is useful "
                    },
                    {
                        "username": "RavirajKumarTiwari",
                        "content": "```\\nclass Solution {\\npublic:\\n    bool strongPasswordCheckerII(string password) {\\n        // ckeck lenght of the password\\n        if(password.length() < 8){\\n            return false;\\n        }\\n        // Use four boolean variables to track the presence of lowercase, uppercase, digit and special characters\\n        bool hasLower = false, hasUpper = false, hasDigit = false, hasSpecial = false;\\n    \\n        // Use a set to store the characters that have appeared in adjacent positions\\n        set<char> adjacent;\\n        /*A set is a data structure that stores unique elements in no particular order. In this case, we use a set of characters to keep track of the characters that have appeared in adjacent positions in the password. For example, if the password is \\u201Caabbcc\\u201D, then the set will contain {\\u2018a\\u2019, \\u2018b\\u2019, \\u2018c\\u2019}. This way, we can easily check if the password violates the condition of not having two of the same character in adjacent positions by checking if the set is empty or not.*/\\n    \\n        // Loop through the password and update the boolean variables and the set\\n        for (int i = 0; i < password.length(); i++) {\\n            char c = password[i];\\n            if (islower(c)) hasLower = true;\\n            else if (isupper(c)) hasUpper = true;\\n            else if (isdigit(c)) hasDigit = true;\\n            else if (strchr(\"!@#$%^&*()-+\", c)) hasSpecial = true;\\n\\n            if (i > 0 && c == password[i-1]) adjacent.insert(c);\\n        }   \\n    \\n        // Return true if all the boolean variables are true and the set is empty\\n        return hasLower && hasUpper && hasDigit && hasSpecial && adjacent.empty();\\n    }\\n\\n};\\n```"
                    },
                    {
                        "username": "alanparmenter",
                        "content": "There is a rule against solutions in the discussions; please move this to the solutions page (typo: length, not lenght)"
                    }
                ]
            }
        ]
    }
]