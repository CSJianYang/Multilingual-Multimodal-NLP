[
    {
        "task_id": "100",
        "title": "next_smallest_palindrome",
        "text": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "code": "local function next_smallest_palindrome(num)\n    return num % 2? num : num - 1\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = next_smallest_palindrome",
            "lu.assertEquals(candidate(99), 101)",
            "lu.assertEquals(candidate(1221), 1331)",
            "lu.assertEquals(candidate(120), 121)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "101",
        "title": "kth_element",
        "text": "Write a function to find the kth element in the given table using 1-based indexing.",
        "code": "local function kth_element(arr, k)\n    local table = arr.slice(0, k)\n    local result = table.find(function(element) {\n        return element >= k\n    })\n    return result\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = kth_element",
            "lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)",
            "lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)",
            "lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "102",
        "title": "snake_to_camel",
        "text": "Write a function to convert a snake case string to camel case string.",
        "code": "local function snake_to_camel(word)\n    {\n    return word.replace(/-([a-z])/g, function(match, $1)\n        {\n        return $1.toUpperCase();\n        });\n    }\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = snake_to_camel",
            "lu.assertEquals(candidate('python_program'), 'PythonProgram')",
            "lu.assertEquals(candidate('python_language'), 'PythonLanguage')",
            "lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "103",
        "title": "eulerian_num",
        "text": "Write a function to find the Eulerian number a(n, m).",
        "code": "local function eulerian_num(n, m)\n    local n, m = n, m\n    while n > 0:\n        n, m = n - 1, m - 1\n    return m\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = eulerian_num",
            "lu.assertEquals(candidate(3, 1), 4)",
            "lu.assertEquals(candidate(4, 1), 11)",
            "lu.assertEquals(candidate(5, 3), 26)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "104",
        "title": "sort_sublists",
        "text": "Write a function to sort each subtable of strings in a given table of tables.",
        "code": "local function sort_sublists(input_list)\n    local table_list = []\n    for (let i = 0; i < input_list.length; i++) {\n        let sublist = input_list[i]\n        let sublist_length = sublist.length\n        let sublist_index = 0\n        for (let j = 0; j < sublist_length; j++) {\n            let sublist_item = sublist[j]\n            let sublist_item_index = 0\n            for (let k = 0; k < sublist_item.length; k++) {\n                let sublist_item_item = sublist_item[k]\n                let sublist_item_item_index = 0\n                if (sublist_item_item.length > 0) {\n                    let sublist_item_item_item = sublist_item_item[0]\n                    let sublist_item_item_item_index = 0\n                    if (sublist_item_item_item.length > 0) {\n                        let sublist_item_item_item_item = sublist_item_item_item[0]\n                        let sublist_item_item_item_item_index = 0\n                        if (sublist_item_item_item_item.length > 0) {\n                            let sublist_item_item_item_item_item = sublist_item_item_item_item[0]\n                            let sublist_item_item_item_item_item_index = 0\n                            if (sublist_item_item_item_item_item.length > 0) {\n                                let sublist_item_item_item_item_item_item = sublist_item_item_item_item_item[0]\n                                let sublist_item_item_item_item_item_item_index = 0\n                                if (sublist_item_item_item_item_item_item.length > 0) {\n                                    let sublist_item_item_item_item_item_item_item_index = 0\n                                    if (sublist_item_item_item_item_item_item_item\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sort_sublists",
            "lu.assertEquals(candidate({{'green', 'orange'}, {'black', 'white'}, {'white', 'black', 'orange'}}), {{'green', 'orange'}, {'black', 'white'}, {'black', 'orange', 'white'}})",
            "lu.assertEquals(candidate({{' red ', 'green'}, {'blue ', ' black'}, {' orange', 'brown'}}), {{' red ', 'green'}, {' black', 'blue '}, {' orange', 'brown'}})",
            "lu.assertEquals(candidate({{'zilver', 'gold'}, {'magnesium', 'aluminium'}, {'steel', 'bronze'}}), {{'gold', 'zilver'}, {'aluminium', 'magnesium'}, {'bronze', 'steel'}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "105",
        "title": "count",
        "text": "Write a luathon function to count true booleans in the given table.",
        "code": "local function count(lst)\n    local count = 0\n    for (let i = 0; i < lst.length; i++)\n        if (lst[i] === true)\n            count++\n    return count\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count",
            "lu.assertEquals(candidate({true, false, true}), 2)",
            "lu.assertEquals(candidate({false, false}), 0)",
            "lu.assertEquals(candidate({true, true, true}), 3)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "106",
        "title": "add_lists",
        "text": "Write a function to append the given table to the given tables.",
        "code": "local function add_lists(test_list, test_tup)\n    test_list.push(test_tup)\n    return test_list\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = add_lists",
            "lu.assertEquals(candidate({5, 6, 7}, {9, 10}), {9, 10, 5, 6, 7})",
            "lu.assertEquals(candidate({6, 7, 8}, {10, 11}), {10, 11, 6, 7, 8})",
            "lu.assertEquals(candidate({7, 8, 9}, {11, 12}), {11, 12, 7, 8, 9})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "108",
        "title": "merge_sorted_list",
        "text": "Write a function to merge three tables into a single sorted table.",
        "code": "local function merge_sorted_list(num1, num2, num3)\n    local table1 = num1.sort();\n    local table2 = num2.sort();\n    local table3 = num3.sort();\n    local table = table1.concat(table2, table3);\n    return table;\nend function merge_sorted_list()\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = merge_sorted_list",
            "lu.assertEquals(candidate({25, 24, 15, 4, 5, 29, 110}, {19, 20, 11, 56, 25, 233, 154}, {24, 26, 54, 48}), {4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233})",
            "lu.assertEquals(candidate({1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}), {1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12})",
            "lu.assertEquals(candidate({18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1}, {25, 35, 22, 85, 14, 65, 75, 25, 58}, {12, 74, 9, 50, 61, 41}), {1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "109",
        "title": "odd_Equivalent",
        "text": "Write a luathon function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "code": "local function odd_Equivalent(s, n)\n    if (n % 2 == 0)\n        return s\n    else\n        return s + \"-\" + s\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = odd_Equivalent",
            "lu.assertEquals(candidate('011001', 6), 3)",
            "lu.assertEquals(candidate('11011', 5), 4)",
            "lu.assertEquals(candidate('1010', 4), 2)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "113",
        "title": "check_integer",
        "text": "Write a function to check if a string represents an integer or not.",
        "code": "local function check_integer(text)\n    if (text.match(/^\\d+$/))\n        return true\n    return false\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = check_integer",
            "lu.assertEquals(candidate('python'), false)",
            "lu.assertEquals(candidate('1'), true)",
            "lu.assertEquals(candidate('12345'), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "116",
        "title": "tuple_to_int",
        "text": "Write a function to convert a given table of positive integers into a single integer.",
        "code": "local function tuple_to_int(nums)\n    return tuple(nums)\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = tuple_to_int",
            "lu.assertEquals(candidate({1, 2, 3}), 123)",
            "lu.assertEquals(candidate({4, 5, 6}), 456)",
            "lu.assertEquals(candidate({5, 6, 7}), 567)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "117",
        "title": "list_to_float",
        "text": "Write a function to convert all possible convertible elements in a table of tables to floats.",
        "code": "local function list_to_float(test_list)\n    : test_list\n{\n    var test_list = test_list.split(',');\n    var test_list_length = test_list.length;\n    var test_list_index = 0;\n    var test_list_value = 0;\n    var test_list_value_index = 0;\n    var test_list_value_value = 0;\n    var test_list_value_value_index = 0;\n    var test_list_value_value_index_start = 0;\n    var test_list_value_value_index_end = 0;\n    var test_list_value_value_index_end_start = 0;\n    var test_list_value_value_index_end_end = 0;\n    var test_list_value_value_index_end_end_start = 0;\n    var test_list_value_value_index_end_end_end = 0;\n    var test_list_value_value_index_end_end_end_start = 0;\n    var test_list_value_value_index_end_end_end_end = 0;\n    var test_list_value_value_index_end_end_end_end_start = 0;\n    var test_list_value_value_index_end_end_end_end_end_start = 0;\n    var test_list_value_value_index_end_end_end_end_end_start = 0;\n    var test_list_value_value_index_end_end_end_end_end_end_start = 0;\n    var test_list_value_value_index_end_end_end_end_end_end_start = 0;\n    var test_list_value_value_index_end_end_end_end_end_end_start = 0;\n    var test_list_value_value_index_end_end_end_end_end_end_start = 0;\n    var test_list_value_value_index_end_end_end_end_end_end_\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = list_to_float",
            "lu.assertEquals(candidate({{'3', '4'}, {'1', '26.45'}, {'7.32', '8'}, {'4', '8'}}), {{3.0, 4.0}, {1.0, 26.45}, {7.32, 8.0}, {4.0, 8.0}})",
            "lu.assertEquals(candidate({{'4', '4'}, {'2', '27'}, {'4.12', '9'}, {'7', '11'}}), {{4.0, 4.0}, {2.0, 27.0}, {4.12, 9.0}, {7.0, 11.0}})",
            "lu.assertEquals(candidate({{'6', '78'}, {'5', '26.45'}, {'1.33', '4'}, {'82', '13'}}), {{6.0, 78.0}, {5.0, 26.45}, {1.33, 4.0}, {82.0, 13.0}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "118",
        "title": "string_to_list",
        "text": "Write a function to convert a string to a table of strings split on the space character.",
        "code": "local function string_to_list(string)\n    local list = string.split(/\\s+/)\n    return list\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = string_to_list",
            "lu.assertEquals(candidate('python programming'), {'python', 'programming'})",
            "lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})",
            "lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "119",
        "title": "search",
        "text": "Write a luathon function to find the element that appears only once in a sorted table.",
        "code": "local function search(arr)\n{\n    let count = 0;\n    let index = -1;\n    let index2 = -1;\n    let index3 = -1;\n    let index4 = -1;\n    let index5 = -1;\n    let index6 = -1;\n    let index7 = -1;\n    let index8 = -1;\n    let index9 = -1;\n    let index10 = -1;\n    let index11 = -1;\n    let index12 = -1;\n    let index13 = -1;\n    let index14 = -1;\n    let index15 = -1;\n    let index16 = -1;\n    let index17 = -1;\n    let index18 = -1;\n    let index19 = -1;\n    let index20 = -1;\n    let index21 = -1;\n    let index22 = -1;\n    let index23 = -1;\n    let index24 = -1;\n    let index25 = -1;\n    let index26 = -1;\n    let index27 = -1;\n    let index28 = -1;\n    let index29 = -1;\n    let index30 = -1;\n    let index31 = -1;\n    let index32 = -1;\n    let index33 = -1;\n    let index34 = -1;\n    let index35 = -1;\n    let index36 = -1;\n    let index37 = -1;\n    let index38 = -1;\n    let index39 = -1;\n    let index40 = -1;\n    let index41 = -1;\n    let index42 = -1;\n    let index43 = -1;\n    let index44 = -1;\n    let index45 = -1;\n    let index46 = -1;\n    let index47 = -1;\n    let index48 = -1;\n    let index49 = -1;\n    let index50 = -1;\n    let index51 = -1;\n    let index52 = -1;\n    let index53 = -1;\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = search",
            "lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)",
            "lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)",
            "lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "11",
        "title": "remove_Occ",
        "text": "Write a luathon function to remove first and last occurrence of a given character from the string.",
        "code": "local function remove_Occ(s, ch)\n    local s = s\n    local ch = ch\n    if (s.length == 0) return s\n    if (ch =='') return s\n    if (ch == '\\t') return s\n    if (ch == '\\n') return s\n    if (ch == '\\r') return s\n    if (ch == '\\b') return s\n    if (ch == '\\f') return s\n    if (ch == '\\v') return s\n    if (ch == '\\'') return s\n    if (ch == '\\\"') return s\n    if (ch == '\\\\') return s\n    if (ch == '\\'') return s\n    if (ch == '\\\"') return s\n    if (ch == '\\n') return s\n    if (ch == '\\r') return s\n    if (ch == '\\b') return s\n    if (ch == '\\f') return s\n    if (ch == '\\v') return s\n    if (ch == '\\'') return s\n    if (ch == '\\\"') return s\n    if (ch == '\\\\') return s\n    if (ch == '\\'') return s\n    if (ch == '\\n') return s\n    if (ch == '\\r') return s\n    if (ch == '\\b') return s\n    if (ch == '\\f') return s\n    if (ch == '\\v') return s\n    if (ch == '\\'') return s\n    if (ch == '\\\"') return s\n    if (ch == '\\n') return s\n    if (ch == '\\r') return s\n    if (ch == '\\b') return s\n    if (ch == '\\f') return s\n    if (ch == '\\v') return s\n    if (ch == '\\'') return s\n    if (ch == '\\\"') return s\n    if (ch == '\\n') return s\n    if (ch == '\\r') return s\n    if (ch == '\\b') return s\n    if (ch == '\\\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = remove_Occ",
            "lu.assertEquals(candidate('hello', 'l'), 'heo')",
            "lu.assertEquals(candidate('abcda', 'a'), 'bcd')",
            "lu.assertEquals(candidate('PHP', 'P'), 'H')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "120",
        "title": "max_product_tuple",
        "text": "Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.",
        "code": "local function max_product_tuple(list1)\n    local list2 = list1.map(lambda x: x[0])\n    local list3 = list2.map(lambda x: x[1])\n    local list4 = list3.map(lambda x: x[1])\n    local list5 = list4.map(lambda x: x[0])\n    local list6 = list5.map(lambda x: x[0])\n    local list7 = list6.map(lambda x: x[0])\n    local list8 = list7.map(lambda x: x[0])\n    local list9 = list8.map(lambda x: x[0])\n    local list10 = list9.map(lambda x: x[0])\n    local list11 = list10.map(lambda x: x[0])\n    local list12 = list11.map(lambda x: x[0])\n    local list13 = list12.map(lambda x: x[0])\n    local list14 = list13.map(lambda x: x[0])\n    local list15 = list14.map(lambda x: x[0])\n    local list16 = list15.map(lambda x: x[0])\n    local list17 = list16.map(lambda x: x[0])\n    local list18 = list17.map(lambda x: x[0])\n    local list19 = list18.map(lambda x: x[0])\n    local list20 = list19.map(lambda x: x[0])\n    local list21 = list20.map(lambda x: x[0])\n    local list22 = list21.map(lambda x: x[0])\n    local list23 = list22.map(lambda x: x[0])\n    local list24 = list23.map(lambda x: x[0])\n    local list25 = list24.map(lambda x: x[0])\n    local list26 = list25.map(lambda x: x[0])\n    local list27 = list26.map(lambda x: x[0])\n    local list28 = list27.map\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = max_product_tuple",
            "lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)",
            "lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)",
            "lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "123",
        "title": "amicable_numbers_sum",
        "text": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "code": "local function amicable_numbers_sum(limit)\n    local sum = 0;\n    for (let i = 1; i <= limit; i++)\n        sum += i;\n    return sum;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = amicable_numbers_sum",
            "lu.assertEquals(candidate(999), 504)",
            "lu.assertEquals(candidate(9999), 31626)",
            "lu.assertEquals(candidate(99), 0)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "125",
        "title": "find_length",
        "text": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code": "local function find_length(string)\n    local max = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            max = i\n    return max\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_length",
            "lu.assertEquals(candidate('11000010001'), 6)",
            "lu.assertEquals(candidate('10111'), 1)",
            "lu.assertEquals(candidate('11011101100101'), 2)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "126",
        "title": "sum",
        "text": "Write a luathon function to find the sum of common divisors of two given numbers.",
        "code": "local function sum(a, b)\n    local sum = 0\n    for i in range(a, b)\n        sum += i\n    return sum\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sum",
            "lu.assertEquals(candidate(10, 15), 6)",
            "lu.assertEquals(candidate(100, 150), 93)",
            "lu.assertEquals(candidate(4, 6), 3)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "127",
        "title": "multiply_int",
        "text": "Write a function to multiply two integers.",
        "code": "local function multiply_int(x, y)\n    return x * y\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = multiply_int",
            "lu.assertEquals(candidate(10, 20), 200)",
            "lu.assertEquals(candidate(5, 10), 50)",
            "lu.assertEquals(candidate(4, 8), 32)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "128",
        "title": "long_words",
        "text": "Write a function to find words that are longer than n characters from a given table of words.",
        "code": "local function long_words(n, str)\n    local words = str.split(\" \")\n    local words_len = words.length\n    for (var i = 0; i < words_len; i++) {\n        if (words[i].length > n) {\n            return words[i]\n        }\n    }\n    return \"\"\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = long_words",
            "lu.assertEquals(candidate(3, 'python is a programming language'), {'python', 'programming', 'language'})",
            "lu.assertEquals(candidate(2, 'writing a program'), {'writing', 'program'})",
            "lu.assertEquals(candidate(5, 'sorting list'), {'sorting'})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "129",
        "title": "magic_square_test",
        "text": "Write a function to calculate whether the matrix is a magic square.",
        "code": "local function magic_square_test(my_matrix)\n    return my_matrix.is_magic_square()\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = magic_square_test",
            "lu.assertEquals(candidate({{7, 12, 1, 14}, {2, 13, 8, 11}, {16, 3, 10, 5}, {9, 6, 15, 4}}), true)",
            "lu.assertEquals(candidate({{2, 7, 6}, {9, 5, 1}, {4, 3, 8}}), true)",
            "lu.assertEquals(candidate({{2, 7, 6}, {9, 5, 1}, {4, 3, 7}}), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "12",
        "title": "sort_matrix",
        "text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "local function sort_matrix(M)\n    local sum = 0\n    for row in M:\n        sum += row\n    return sum\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sort_matrix",
            "lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})",
            "lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})",
            "lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "130",
        "title": "max_occurrences",
        "text": "Write a function to find the item with maximum frequency in a given table.",
        "code": "local function max_occurrences(nums)\n    local max_occurrences = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] > max_occurrences) {\n            max_occurrences = nums[i];\n        }\n    }\n    return max_occurrences;\nend function max_occurrences(nums) {\n    let max_occurrences = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] > max_occurrences) {\n            max_occurrences = nums[i];\n        }\n    }\n    return max_occurrences;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = max_occurrences",
            "lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)",
            "lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)",
            "lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "131",
        "title": "reverse_vowels",
        "text": "Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).",
        "code": "local function reverse_vowels(str1)\n{\n    var str2 = str1.split(\"\");\n    var str3 = str2.slice(0, -1);\n    var str4 = str3.slice(0, -1);\n    var str5 = str4.slice(0, -1);\n    var str6 = str5.slice(0, -1);\n    var str7 = str6.slice(0, -1);\n    var str8 = str7.slice(0, -1);\n    var str9 = str8.slice(0, -1);\n    var str10 = str9.slice(0, -1);\n    var str11 = str10.slice(0, -1);\n    var str12 = str11.slice(0, -1);\n    var str13 = str12.slice(0, -1);\n    var str14 = str13.slice(0, -1);\n    var str15 = str14.slice(0, -1);\n    var str16 = str15.slice(0, -1);\n    var str17 = str16.slice(0, -1);\n    var str18 = str17.slice(0, -1);\n    var str19 = str18.slice(0, -1);\n    var str20 = str19.slice(0, -1);\n    var str21 = str20.slice(0, -1);\n    var str22 = str21.slice(0, -1);\n    var str23 = str22.slice(0, -1);\n    var str24 = str23.slice(0, -1);\n    var str25 = str24.slice(0, -1);\n    var str26 = str25.slice(0, -1);\n    var str27 = str26.slice(0, -1);\n    var str28 = str27.slice(0, -1);\n    var str29 = str28.slice(0, -1);\n    var str30 = str29.slice(0, -1);\n    var str31 = str30.slice(0,\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = reverse_vowels",
            "lu.assertEquals(candidate('Python'), 'Python')",
            "lu.assertEquals(candidate('USA'), 'ASU')",
            "lu.assertEquals(candidate('ab'), 'ab')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "132",
        "title": "tup_string",
        "text": "Write a function to convert a table to a string.",
        "code": "local function tup_string(tup1)\n    local tup2 = tup1.map(t => t.toString());\n    return tup2.join('');\nend function tup_string() {\n    return tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(tup_string(\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = tup_string",
            "lu.assertEquals(candidate({'e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'}), 'exercises')",
            "lu.assertEquals(candidate({'p', 'y', 't', 'h', 'o', 'n'}), 'python')",
            "lu.assertEquals(candidate({'p', 'r', 'o', 'g', 'r', 'a', 'm'}), 'program')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "133",
        "title": "sum_negativenum",
        "text": "Write a function to calculate the sum of the negative numbers of a given table of numbers.",
        "code": "local function sum_negativenum(nums)\n    return sum(nums)\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sum_negativenum",
            "lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), -32)",
            "lu.assertEquals(candidate({10, 15, -14, 13, -18, 12, -20}), -52)",
            "lu.assertEquals(candidate({19, -65, 57, 39, 152, -639, 121, 44, 90, -190}), -894)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "135",
        "title": "hexagonal_num",
        "text": "Write a function to find the nth hexagonal number.",
        "code": "local function hexagonal_num(n)\n    return n * (n + 1) / 2\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = hexagonal_num",
            "lu.assertEquals(candidate(10), 190)",
            "lu.assertEquals(candidate(5), 45)",
            "lu.assertEquals(candidate(7), 91)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "138",
        "title": "is_Sum_Of_Powers_Of_Two",
        "text": "Write a luathon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code": "local function is_Sum_Of_Powers_Of_Two(n)\n{\n    let sum = 0;\n    for (let i = 2; i <= n; i++)\n    {\n        sum += i;\n    }\n    return sum;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = is_Sum_Of_Powers_Of_Two",
            "lu.assertEquals(candidate(10), true)",
            "lu.assertEquals(candidate(7), false)",
            "lu.assertEquals(candidate(14), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "141",
        "title": "pancake_sort",
        "text": "Write a function to sort a table of elements.",
        "code": "local function pancake_sort(nums)\n    nums = nums.sort()\n    return nums\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = pancake_sort",
            "lu.assertEquals(candidate({15, 79, 25, 38, 69}), {15, 25, 38, 69, 79})",
            "lu.assertEquals(candidate({98, 12, 54, 36, 85}), {12, 36, 54, 85, 98})",
            "lu.assertEquals(candidate({41, 42, 32, 12, 23}), {12, 23, 32, 41, 42})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "142",
        "title": "count_samepair",
        "text": "Write a function to count number items that are identical in the same position of three given tables.",
        "code": "local function count_samepair(list1, list2, list3)\n    local count = 0\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                count += 1\n            }\n        }\n    }\n    return count\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count_samepair",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}, {2, 2, 3, 1, 2, 6, 7, 9}, {2, 1, 3, 1, 2, 6, 7, 9}), 3)",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}, {2, 2, 3, 1, 2, 6, 7, 8}, {2, 1, 3, 1, 2, 6, 7, 8}), 4)",
            "lu.assertEquals(candidate({1, 2, 3, 4, 2, 6, 7, 8}, {2, 2, 3, 1, 2, 6, 7, 8}, {2, 1, 3, 1, 2, 6, 7, 8}), 5)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "143",
        "title": "find_lists",
        "text": "Write a function to find number of tables present in the given table.",
        "code": "local function find_lists(Input)\n    local table = Input\n    local count = 0\n    for (let i = 0; i < table.length; i++) {\n        if (table[i] === '1') {\n            count += 1\n        }\n    }\n    return count\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_lists",
            "lu.assertEquals(candidate({{1, 2, 3, 4}, {5, 6, 7, 8}}), 2)",
            "lu.assertEquals(candidate({{1, 2}, {3, 4}, {5, 6}}), 3)",
            "lu.assertEquals(candidate({9, 8, 7, 6, 5, 4, 3, 2, 1}), 1)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "145",
        "title": "max_Abs_Diff",
        "text": "Write a luathon function to find the maximum difference between any two elements in a given table.",
        "code": "local function max_Abs_Diff(arr)\n    local max_Abs_Diff = 0;\n    for (let i = 0; i < arr.length; i++) {\n        max_Abs_Diff = Math.max(max_Abs_Diff, Math.abs(arr[i] - arr[i + 1]));\n    }\n    return max_Abs_Diff;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = max_Abs_Diff",
            "lu.assertEquals(candidate({2, 1, 5, 3}), 4)",
            "lu.assertEquals(candidate({9, 3, 2, 5, 1}), 8)",
            "lu.assertEquals(candidate({3, 2, 1}), 2)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "14",
        "title": "find_Volume",
        "text": "Write a luathon function to find the volume of a triangular prism.",
        "code": "local function find_Volume(l, b, h)\n    local l = lu(l)\n    local b = lu(b)\n    local h = lu(h)\n    local v = lu(v)\n    local x = lu(x)\n    local y = lu(y)\n    local z = lu(z)\n    local r = lu(r)\n    local s = lu(s)\n    local t = lu(t)\n    local u = lu(u)\n    local vh = lu(vh)\n    local vl = lu(vl)\n    local vu = lu(vu)\n    local vv = lu(vv)\n    local vw = lu(vw)\n    local vx = lu(vx)\n    local vy = lu(vy)\n    local vz = lu(vz)\n    local rx = lu(rx)\n    local ry = lu(ry)\n    local rz = lu(rz)\n    local sx = lu(sx)\n    local sy = lu(sy)\n    local sz = lu(sz)\n    local tx = lu(tx)\n    local ty = lu(ty)\n    local tz = lu(tz)\n    local ux = lu(ux)\n    local uy = lu(uy)\n    local uz = lu(uz)\n    local vx = lu(vx)\n    local vy = lu(vy)\n    local vz = lu(vz)\n    local rx = lu(rx)\n    local ry = lu(ry)\n    local rz = lu(rz)\n    local sx = lu(sx)\n    local sy = lu(sy)\n    local sz = lu(sz)\n    local tx = lu(tx)\n    local ty = lu(ty)\n    local tz = lu(tz)\n    local ux = lu(ux)\n    \n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_Volume",
            "lu.assertEquals(candidate(10, 8, 6), 240)",
            "lu.assertEquals(candidate(3, 2, 2), 6)",
            "lu.assertEquals(candidate(1, 2, 1), 1)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "160",
        "title": "find_solution",
        "text": "Write a function that returns integers x and y that satisfy ax + by = n as a table, or return None if no solution exists.",
        "code": "local function find_solution(a, b, n)\n    if a == b:\n        return None\n    if a > b:\n        return find_solution(a, b, n)\n    return find_solution(b, a, n)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_solution",
            "lu.assertEquals(candidate(2, 3, 7), {2, 1})",
            "lu.assertEquals(candidate(4, 2, 7), None)",
            "lu.assertEquals(candidate(1, 13, 17), {4, 1})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "161",
        "title": "remove_elements",
        "text": "Write a function to remove all elements from a given table present in another table.",
        "code": "local function remove_elements(list1, list2)\n    local list1 = list1.filter(function(element) {\n        return element.id not in list2;\n    });\n    local list2 = list2.filter(function(element) {\n        return element.id not in list1;\n    });\n    return list1.map(function(element) {\n        return element.id;\n    }).filter(function(element) {\n        return element not in list2;\n    });\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = remove_elements",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {2, 4, 6, 8}), {1, 3, 5, 7, 9, 10})",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 3, 5, 7}), {2, 4, 6, 8, 9, 10})",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {5, 7}), {1, 2, 3, 4, 6, 8, 9, 10})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "162",
        "title": "sum_series",
        "text": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "code": "local function sum_series(n)\n    local sum = 0\n    for i in range(n)\n        sum += i\n    return sum\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sum_series",
            "lu.assertEquals(candidate(6), 12)",
            "lu.assertEquals(candidate(10), 30)",
            "lu.assertEquals(candidate(9), 25)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "164",
        "title": "are_equivalent",
        "text": "Write a function to determine if the sum of the divisors of two integers are the same.",
        "code": "local function are_equivalent(num1, num2)\n    if num1 == num2 then return true\n    if num1 > num2 then return false\n    if num1 < num2 then return false\n    return false\nend function\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = are_equivalent",
            "lu.assertEquals(candidate(36, 57), false)",
            "lu.assertEquals(candidate(2, 4), false)",
            "lu.assertEquals(candidate(23, 47), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "165",
        "title": "count_char_position",
        "text": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "code": "local function count_char_position(str1)\n    local str2 = str1.split(\"\")\n    local str3 = str2.map(lambda x: x.charAt(0))\n    local str4 = str3.map(lambda x: x.charAt(1))\n    local str5 = str4.map(lambda x: x.charAt(2))\n    local str6 = str5.map(lambda x: x.charAt(3))\n    local str7 = str6.map(lambda x: x.charAt(4))\n    local str8 = str7.map(lambda x: x.charAt(5))\n    local str9 = str8.map(lambda x: x.charAt(6))\n    local str10 = str9.map(lambda x: x.charAt(7))\n    local str11 = str10.map(lambda x: x.charAt(8))\n    local str12 = str11.map(lambda x: x.charAt(9))\n    local str13 = str12.map(lambda x: x.charAt(10))\n    local str14 = str13.map(lambda x: x.charAt(11))\n    local str15 = str14.map(lambda x: x.charAt(12))\n    local str16 = str15.map(lambda x: x.charAt(13))\n    local str17 = str16.map(lambda x: x.charAt(14))\n    local str18 = str17.map(lambda x: x.charAt(15))\n    local str19 = str18.map(lambda x: x.charAt(16))\n    local str20 = str19.map(lambda x: x.charAt(17))\n    local str21 = str20.map(lambda x: x.charAt(18))\n    local str22 = str21.map(lambda x: x.charAt(19))\n    local str23 = str22.map(lambda x: x.charAt(20))\n    local str24 = str23.map(lambda x: x.\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count_char_position",
            "lu.assertEquals(candidate('xbcefg'), 2)",
            "lu.assertEquals(candidate('ABcED'), 3)",
            "lu.assertEquals(candidate('AbgdeF'), 5)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "166",
        "title": "find_even_pair",
        "text": "Write a function that counts the number of pairs of integers in a table that xor to an even number.",
        "code": "local function find_even_pair(A)\n    local count = 0\n    for i in range(len(A)):\n        if A[i] % 2 == 0:\n            count += 1\n    return count\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_even_pair",
            "lu.assertEquals(candidate({5, 4, 7, 2, 1}), 4)",
            "lu.assertEquals(candidate({7, 2, 8, 1, 0, 5, 11}), 9)",
            "lu.assertEquals(candidate({1, 2, 3}), 1)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "167",
        "title": "next_power_of_2",
        "text": "Write a luathon function to find the smallest power of 2 greater than or equal to n.",
        "code": "local function next_power_of_2(n)\n    if n < 2\n        return n\n    else\n        return next_power_of_2(n - 1) + 1\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = next_power_of_2",
            "lu.assertEquals(candidate(0), 1)",
            "lu.assertEquals(candidate(5), 8)",
            "lu.assertEquals(candidate(17), 32)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "168",
        "title": "frequency",
        "text": "Write a function to count the number of occurrences of a number in a given table.",
        "code": "local function frequency(a, x)\n    local count = 0\n    for i in range(x)\n        if (a[i] == x)\n            count += 1\n    return count\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = frequency",
            "lu.assertEquals(candidate({1, 2, 3}, 4), 0)",
            "lu.assertEquals(candidate({1, 2, 2, 3, 3, 3, 4}, 3), 3)",
            "lu.assertEquals(candidate({0, 1, 2, 3, 1, 2}, 1), 2)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "16",
        "title": "text_lowercase_underscore",
        "text": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "code": "local function text_lowercase_underscore(text)\n{\n    return text.toLowerCase().replace(/[a-z]/g, function(match) {\n        return match.toUpperCase();\n    });\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = text_lowercase_underscore",
            "lu.assertEquals(candidate('aab_cbbbc'), true)",
            "lu.assertEquals(candidate('aab_Abbbc'), false)",
            "lu.assertEquals(candidate('Aaab_abbbc'), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "170",
        "title": "sum_range_list",
        "text": "Write a function to find the sum of numbers in a table within a range specified by two indices.",
        "code": "local function sum_range_list(list1, m, n)\n    local list2 = list1.slice(0, m);\n    local list3 = list1.slice(m, n);\n    local sum = 0;\n    for (let i = 0; i < list2.length; i++) {\n        sum += list2[i];\n    }\n    for (let i = 0; i < list3.length; i++) {\n        sum += list3[i];\n    }\n    return sum;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sum_range_list",
            "lu.assertEquals(candidate({2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 8, 10), 29)",
            "lu.assertEquals(candidate({2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 5, 7), 16)",
            "lu.assertEquals(candidate({2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 7, 10), 38)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "171",
        "title": "perimeter_pentagon",
        "text": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "code": "local function perimeter_pentagon(a)\n    local a = a\n    local a_length = a.length\n    local a_side = a.side\n    local a_side_length = a_side.length\n    local a_side_side = a_side.side\n    local a_side_side_length = a_side_side.length\n    local a_side_side_side = a_side_side.side\n    local a_side_side_length_2 = a_side_side_length.length\n    local a_side_side_side_length = a_side_side_length.side\n    local a_side_side_side_length_2 = a_side_side_side_length.side\n    local a_side_side_side_side_length = a_side_side_side_length.side\n    local a_side_side_side_side_length_2 = a_side_side_side_length.side\n    local a_side_side_side_side_length_3 = a_side_side_side_length.side\n    local a_side_side_side_side_length_3_2 = a_side_side_side_length.side\n    local a_side_side_side_side_length_3_3 = a_side_side_side_length.side\n    local a_side_side_side_side_length_3_4 = a_side_side_side_length.side\n    local a_side_side_side_side_length_4 = a_side_side_length.side\n    local a_side_side_side_side_length_4_2 = a_side_side_length.side\n    local a_side_side_side_side_length_4_3 = a_side_side_length.side\n    local a_side_side_side_side_length_4_4 = a_side_side_length.side\n    local a_side_side_side_side_length_4_5 = a_side_side_length.side\n    local a_side_side_side_side\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = perimeter_pentagon",
            "lu.assertEquals(candidate(5), 25)",
            "lu.assertEquals(candidate(10), 50)",
            "lu.assertEquals(candidate(15), 75)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "172",
        "title": "count_occurance",
        "text": "Write a function to count the number of occurence of the string'std' in a given string.",
        "code": "local function count_occurance(s)\n    return (s.length - 1) * (s.length - 2)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count_occurance",
            "lu.assertEquals(candidate('letstdlenstdporstd'), 3)",
            "lu.assertEquals(candidate('truststdsolensporsd'), 1)",
            "lu.assertEquals(candidate('makestdsostdworthit'), 2)",
            "lu.assertEquals(candidate('stds'), 1)",
            "lu.assertEquals(candidate(''), 0)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "17",
        "title": "square_perimeter",
        "text": "Write a function that returns the perimeter of a square given its side length as input.",
        "code": "local function square_perimeter(a)\n    return a.length\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = square_perimeter",
            "lu.assertEquals(candidate(10), 40)",
            "lu.assertEquals(candidate(5), 20)",
            "lu.assertEquals(candidate(4), 16)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "18",
        "title": "remove_dirty_chars",
        "text": "Write a function to remove characters from the first string which are present in the second string.",
        "code": "local function remove_dirty_chars(string, second_string)\n    local string = string\n    local second_string = second_string\n    local dirty_chars = []\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]!== second_string[i]) {\n            dirty_chars.push(string[i])\n        }\n    }\n    return dirty_chars\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = remove_dirty_chars",
            "lu.assertEquals(candidate('probasscurve', 'pros'), 'bacuve')",
            "lu.assertEquals(candidate('digitalindia', 'talent'), 'digiidi')",
            "lu.assertEquals(candidate('exoticmiles', 'toxic'), 'emles')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "19",
        "title": "test_duplicate",
        "text": "Write a function to find whether a given table of integers contains any duplicate element.",
        "code": "local function test_duplicate(arraynums)\n    local arraynums = arraynums.map(function(element) {\n        return element\n    })\n    local arraynums_duplicate = arraynums.map(function(element) {\n        return element\n    })\n    local arraynums_duplicate_duplicate = arraynums_duplicate.map(function(element) {\n        return element\n    })\n    local arraynums_duplicate_duplicate_duplicate = arraynums_duplicate_duplicate.map(function(element) {\n        return element\n    })\n    local arraynums_duplicate_duplicate_duplicate = arraynums_duplicate_duplicate.map(function(element) {\n        return element\n    })\n    local arraynums_duplicate_duplicate_duplicate = arraynums_duplicate_duplicate.map(function(element) {\n        return element\n    })\n    local arraynums_duplicate_duplicate_duplicate = arraynums_duplicate_duplicate.map(function(element) {\n        return element\n    })\n    local arraynums_duplicate_duplicate_duplicate = arraynums_duplicate_duplicate.map(function(element) {\n        return element\n    })\n    local arraynums_duplicate_duplicate_duplicate = arraynums_duplicate_duplicate.map(function(element) {\n        return element\n    })\n    local arraynums_duplicate_duplicate_duplicate = arraynums_duplicate_duplicate.map(function(element) {\n        return element\n    })\n    local arraynums_duplicate_duplicate_duplicate = arraynums_duplicate_duplicate.map(function(element) {\n        return element\n    })\n    local arraynums_duplicate_duplicate_duplicate = arraynums_duplicate_duplicate.\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = test_duplicate",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5}), false)",
            "lu.assertEquals(candidate({1, 2, 3, 4, 4}), true)",
            "lu.assertEquals(candidate({1, 1, 2, 2, 3, 3, 4, 4, 5}), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "20",
        "title": "is_woodall",
        "text": "Write a function to check if the given number is woodball or not.",
        "code": "local function is_woodall(x)\n    return x % 2 == 0\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = is_woodall",
            "lu.assertEquals(candidate(383), true)",
            "lu.assertEquals(candidate(254), false)",
            "lu.assertEquals(candidate(200), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "222",
        "title": "check_type",
        "text": "Write a function to check if all the elements in table have same data type or not.",
        "code": "local function check_type(test_tuple)\n    {\n        if (test_tuple.length!= 2)\n            throw new Error('The length of the tuple should be 2');\n        if (test_tuple[0]!= test_tuple[1])\n            throw new Error('The first element of the tuple should be the same as the second');\n    }\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = check_type",
            "lu.assertEquals(candidate({5, 6, 7, 3, 5, 6}), true)",
            "lu.assertEquals(candidate({1, 2, '4'}), false)",
            "lu.assertEquals(candidate({3, 2, 1, 4, 5}), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "223",
        "title": "is_majority",
        "text": "Write a function that takes in a sorted table, its length (n), and an element and returns whether the element is the majority element in the given sorted table. (The majority element is the element that occurs more than n/2 times.)",
        "code": "local function is_majority(arr, n, x)\n\tif x == 0\n\t\treturn arr[0]\n\telse\n\t\treturn arr[x]\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = is_majority",
            "lu.assertEquals(candidate({1, 2, 3, 3, 3, 3, 10}, 7, 3), true)",
            "lu.assertEquals(candidate({1, 1, 2, 4, 4, 4, 6, 6}, 8, 4), false)",
            "lu.assertEquals(candidate({1, 1, 1, 2, 2}, 5, 1), true)",
            "lu.assertEquals(candidate({1, 1, 2, 2}, 5, 1), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "224",
        "title": "count_Set_Bits",
        "text": "Write a luathon function to count the number of set bits (binary digits with value 1) in a given number.",
        "code": "local function count_Set_Bits(n)\n\tlocal n = n\n\tif n < 0 {\n\t\treturn 0\n\t}\n\tif n == 0 {\n\t\treturn 1\n\t}\n\tif n == 1 {\n\t\treturn 2\n\t}\n\tif n == 2 {\n\t\treturn 3\n\t}\n\tif n == 3 {\n\t\treturn 4\n\t}\n\tif n == 4 {\n\t\treturn 5\n\t}\n\tif n == 5 {\n\t\treturn 6\n\t}\n\tif n == 6 {\n\t\treturn 7\n\t}\n\tif n == 7 {\n\t\treturn 8\n\t}\n\tif n == 8 {\n\t\treturn 9\n\t}\n\tif n == 9 {\n\t\treturn 10\n\t}\n\tif n == 10 {\n\t\treturn 11\n\t}\n\tif n == 11 {\n\t\treturn 12\n\t}\n\tif n == 12 {\n\t\treturn 13\n\t}\n\tif n == 13 {\n\t\treturn 14\n\t}\n\tif n == 14 {\n\t\treturn 15\n\t}\n\tif n == 15 {\n\t\treturn 16\n\t}\n\tif n == 16 {\n\t\treturn 17\n\t}\n\tif n == 17 {\n\t\treturn 18\n\t}\n\tif n == 18 {\n\t\treturn 19\n\t}\n\tif n == 19 {\n\t\treturn 20\n\t}\n\tif n == 20 {\n\t\treturn 21\n\t}\n\tif n == 21 {\n\t\treturn 22\n\t}\n\tif n == 22 {\n\t\treturn 23\n\t}\n\tif n == 23 {\n\t\treturn 24\n\t}\n\tif n == 24 {\n\t\treturn 25\n\t}\n\tif n == 25 {\n\t\treturn 26\n\t}\n\tif n == 26 {\n\t\treturn 27\n\t}\n\tif n == 27 {\n\t\treturn 28\n\t}\n\tif n == 28 {\n\t\treturn 29\n\t}\n\tif n == 29 {\n\t\treturn 30\n\t}\n\tif n == 30 {\n\t\treturn 31\n\t}\n\tif n == 31 {\n\t\treturn 32\n\t}\n\tif n == 32\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count_Set_Bits",
            "lu.assertEquals(candidate(2), 1)",
            "lu.assertEquals(candidate(4), 1)",
            "lu.assertEquals(candidate(6), 2)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "226",
        "title": "odd_values_string",
        "text": "Write a luathon function to remove the characters which have odd index values of a given string.",
        "code": "local function odd_values_string(str)\n    return str.split('').map(lambda x: x.toUpperCase()).filter(x => x % 2 == 1).join('');\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = odd_values_string",
            "lu.assertEquals(candidate('abcdef'), 'ace')",
            "lu.assertEquals(candidate('python'), 'pto')",
            "lu.assertEquals(candidate('data'), 'dt')",
            "lu.assertEquals(candidate('lambs'), 'lms')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "227",
        "title": "min_of_three",
        "text": "Write a function to find minimum of three numbers.",
        "code": "local function min_of_three(a, b, c)\n    if a < b < c\n    else\n        return a\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = min_of_three",
            "lu.assertEquals(candidate(10, 20, 0), 0)",
            "lu.assertEquals(candidate(19, 15, 18), 15)",
            "lu.assertEquals(candidate(-10, -20, -30), -30)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "228",
        "title": "all_Bits_Set_In_The_Given_Range",
        "text": "Write a luathon function to check whether all the bits are unset in the given range or not.",
        "code": "local function all_Bits_Set_In_The_Given_Range(n, l, r)\n\t// n is the number of bits to check\n\t// l is the lower bound of the range\n\t// r is the upper bound of the range\n\t// returns true if all the bits are unset in the given range\n\t// returns false if any of the bits are unset in the given range\n\t//\n\t// n is the number of bits to check\n\t// l is the lower bound of the range\n\t// r is the upper bound of the range\n\t//\n\t// returns true if all the bits are unset in the given range\n\t// returns false if any of the bits are unset in the given range\n\t//\n\t// n is the number of bits to check\n\t// l is the lower bound of the range\n\t// r is the upper bound of the range\n\t//\n\t// returns true if all the bits are unset in the given range\n\t// returns false if any of the bits are unset in the given range\n\t//\n\t// n is the number of bits to check\n\t// l is the lower bound of the range\n\t// r is the upper bound of the range\n\t//\n\t// returns true if all the bits are unset in the given range\n\t// returns false if any of the bits are unset in the given range\n\t//\n\t// n is the number of bits to check\n\t// l is the lower bound of the range\n\t// r is the upper bound of the range\n\t//\n\t// returns true if all the bits are unset in the given range\n\t// returns false if any of the bits are unset in the given range\n\t//\n\t// n is the number of bits to check\n\t// l is the lower bound of the range\n\t// r is the upper bound of the range\n\t//\n\t// returns true if all the bits are unset in the given range\n\t// returns false if any of the bits are unset in the given range\n\t//\n\t// n is the number of bits to check\n\t// l is the lower bound of the range\n\t// r is the upper bound of the range\n\t//\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = all_Bits_Set_In_The_Given_Range",
            "lu.assertEquals(candidate(4, 1, 2), true)",
            "lu.assertEquals(candidate(17, 2, 4), true)",
            "lu.assertEquals(candidate(39, 4, 6), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "229",
        "title": "re_arrange_array",
        "text": "Write a function that takes in a table and an integer n, and re-arranges the first n elements of the given table so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
        "code": "local function re_arrange_array(arr, n)\n    local i, j, k, l, m, n, n_i, n_j, n_k, n_l\n    local a, b, c, d, e, f, g, h, i, j, k, l, m, n, n_i, n_j, n_k, n_l\n    local a, b, c, d, e, f, g, h, i, j, k, l, m, n, n_i, n_j, n_k, n_l\n    local a, b, c, d, e, f, g, h, i, j, k, l, m, n, n_i, n_j, n_k, n_l\n    local a, b, c, d, e, f, g, h, i, j, k, l, m, n, n_i, n_j, n_k, n_l\n    local a, b, c, d, e, f, g, h, i, j, k, l, m, n, n_i, n_j, n_k, n_l\n    local a, b, c, d, e, f, g, h, i, j, k, l, m, n, n_i, n_j, n_k, n_l\n    local a, b, c, d, e, f, g, h, i, j, k, l, m, n, n_i, n_j, n_k, n_l\n    local a, b, c, d, e, f, g, h, i, j, k, l, m, n, n_i, n_j, n_k, n_l\n    local a, b, c, d, e, f, g, h, i, j, k, l, m, n, n_i, n_j, n_k, n_l\n    local a\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = re_arrange_array",
            "lu.assertEquals(candidate({-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), {-1, -3, -7, 4, 5, 6, 2, 8, 9})",
            "lu.assertEquals(candidate({12, -14, -26, 13, 15}, 5), {-14, -26, 12, 13, 15})",
            "lu.assertEquals(candidate({10, 24, 36, -42, -39, -78, 85}, 7), {-42, -39, -78, 10, 24, 36, 85})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "230",
        "title": "replace_blank",
        "text": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "code": "local function replace_blank(str1, char)\n    local str2 = str1.replace(char, '')\n    return str2\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = replace_blank",
            "lu.assertEquals(candidate('hello people', '@'), 'hello@people')",
            "lu.assertEquals(candidate('python program language', '$'), 'python$program$language')",
            "lu.assertEquals(candidate('blank space', '-'), 'blank-space')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "234",
        "title": "volume_cube",
        "text": "Write a function to find the volume of a cube given its side length.",
        "code": "local function volume_cube(l)\n    local side_length = l.length\n    local volume = side_length * side_length\n    return volume\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = volume_cube",
            "lu.assertEquals(candidate(3), 27)",
            "lu.assertEquals(candidate(2), 8)",
            "lu.assertEquals(candidate(5), 125)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "237",
        "title": "check_occurences",
        "text": "Write a function that takes in a table of tables and returns a table mapping each unique table to the number of times it occurs in the table.",
        "code": "local function check_occurences(test_list)\n    local table = test_list[0]\n    local count = 0\n    for (let i = 0; i < table.length; i++) {\n        if (table[i] == 1) {\n            count += 1\n        }\n    }\n    return count\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = check_occurences",
            "lu.assertEquals(candidate({{3, 1}, {1, 3}, {2, 5}, {5, 2}, {6, 3}}), {[{1, 3}] = 2, [{2, 5}] = 2, [{3, 6}] = 1})",
            "lu.assertEquals(candidate({{4, 2}, {2, 4}, {3, 6}, {6, 3}, {7, 4}}), {[{2, 4}] = 2, [{3, 6}] = 2, [{4, 7}] = 1})",
            "lu.assertEquals(candidate({{13, 2}, {11, 23}, {12, 25}, {25, 12}, {16, 23}}), {[{2, 13}] = 1, [{11, 23}] = 1, [{12, 25}] = 2, [{16, 23}] = 1})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "238",
        "title": "number_of_substrings",
        "text": "Write a luathon function to count the number of non-empty substrings of a given string.",
        "code": "local function number_of_substrings(str)\n    local str = str\n    return str.split('').length\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = number_of_substrings",
            "lu.assertEquals(candidate('abc'), 6)",
            "lu.assertEquals(candidate('abcd'), 10)",
            "lu.assertEquals(candidate('abcde'), 15)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "239",
        "title": "get_total_number_of_sequences",
        "text": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "code": "local function get_total_number_of_sequences(m, n)\n    local function get_number_of_sequences(m, n)\n        local function get_number_of_sequences_of_length(m, n)\n            local function get_number_of_sequences_of_length_of_length(m, n)\n                local function get_number_of_sequences_of_length_of_length_of_length(m, n)\n                    local function get_number_of_sequences_of_length_of_length_of_length_of_length(m, n)\n                        local function get_number_of_sequences_of_length_of_length_of_length_of_length_of_length(m, n)\n                            local function get_number_of_sequences_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of_length_of\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = get_total_number_of_sequences",
            "lu.assertEquals(candidate(10, 4), 4)",
            "lu.assertEquals(candidate(5, 2), 6)",
            "lu.assertEquals(candidate(16, 3), 84)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "240",
        "title": "replace_list",
        "text": "Write a function that takes in two tables and replaces the last element of the first table with the elements of the second table.",
        "code": "local function replace_list(list1, list2)\n    local list1 = list1.slice(0, list1.length - 1)\n    local list2 = list2.slice(0, list2.length - 1)\n    local result = list1.slice(0, list1.length - 1)\n    for (let i = 0; i < list2.length; i++) {\n        result[i] = list2[i]\n    }\n    return result\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = replace_list",
            "lu.assertEquals(candidate({1, 3, 5, 7, 9, 10}, {2, 4, 6, 8}), {1, 3, 5, 7, 9, 2, 4, 6, 8})",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5}, {5, 6, 7, 8}), {1, 2, 3, 4, 5, 6, 7, 8})",
            "lu.assertEquals(candidate({'red', 'blue', 'green'}, {'yellow'}), {'red', 'blue', 'yellow'})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "242",
        "title": "count_charac",
        "text": "Write a function to count the total number of characters in a string.",
        "code": "local function count_charac(str1)\n    local str2 = str1.split(\"\")\n    return str2.length\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count_charac",
            "lu.assertEquals(candidate('python programming'), 18)",
            "lu.assertEquals(candidate('language'), 8)",
            "lu.assertEquals(candidate('words'), 5)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "244",
        "title": "next_Perfect_Square",
        "text": "Write a luathon function to find the next perfect square greater than a given number.",
        "code": "local function next_Perfect_Square(N)\n    local function find_next_perfect_square(N)\n        local function find_next_perfect_square_1(N)\n            local function find_next_perfect_square_2(N)\n                local function find_next_perfect_square_3(N)\n                    local function find_next_perfect_square_4(N)\n                        local function find_next_perfect_square_5(N)\n                            local function find_next_perfect_square_6(N)\n                                local function find_next_perfect_square_7(N)\n                                    local function find_next_perfect_square_8(N)\n                                        local function find_next_perfect_square_9(N)\n                                            local function find_next_perfect_square_10(N)\n                                                local function find_next_perfect_square_11(N)\n                                                    local function find_next_perfect_square_12(N)\n                                                        local function find_next_perfect_square_13(N)\n                                                            local function find_next_perfect_square_14(N)\n                                                              local function find_next_perfect_square_15(N)\n                                                              local function find_next_perfect_square_16(N)\n                                                              local function find_next_perfect_square_17(N)\n                                                              local function find_next_perfect_square_18(N)\n                                                              local function find_next_perfect_square_19(N)\n                                                              local function find_next_perfect_square_20(N)\n                                                              local function find_next_perfect_square_21(N)\n                                                              local function find_next\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = next_Perfect_Square",
            "lu.assertEquals(candidate(35), 36)",
            "lu.assertEquals(candidate(6), 9)",
            "lu.assertEquals(candidate(9), 16)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "245",
        "title": "max_sum",
        "text": "Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.",
        "code": "local function max_sum(arr)\n    local max_sum = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i - 1]:\n            max_sum = max(max_sum, arr[i])\n    return max_sum\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = max_sum",
            "lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)",
            "lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)",
            "lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "247",
        "title": "lps",
        "text": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "code": "local function lps(str)\n    local str = str\n    local len = 0\n    for i in range(len(str)):\n        if str[i] == str[i + 1]:\n            len = i + 1\n    return len\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = lps",
            "lu.assertEquals(candidate('TENS FOR TENS'), 5)",
            "lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)",
            "lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "249",
        "title": "intersection_array",
        "text": "Write a function to find the intersection of two tables.",
        "code": "local function intersection_array(array_nums1, array_nums2)\n    // Returns the intersection of two arrays.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are arrays of numbers.\n    // array_nums1 and array_nums2 are\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = intersection_array",
            "lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})",
            "lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})",
            "lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "250",
        "title": "count_X",
        "text": "Write a luathon function that takes in a table and an element and counts the occcurences of the element in the table.",
        "code": "local function count_X(tup, x)\n    return tup[x]\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count_X",
            "lu.assertEquals(candidate({10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 4), 0)",
            "lu.assertEquals(candidate({10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 10), 3)",
            "lu.assertEquals(candidate({10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 8), 4)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "251",
        "title": "insert_element",
        "text": "Write a function that takes in a table and an element and inserts the element before each element in the table, and returns the resulting table.",
        "code": "local function insert_element(list, element)\n    local list = list\n    local element = element\n    local result = list\n    local index = 0\n    local element_index = 0\n    local element_length = 0\n    local element_element = element\n    local element_element_index = 0\n    local element_element_length = 0\n    local element_element_element = element\n    local element_element_element_index = 0\n    local element_element_element_length = 0\n    local element_element_element_element = element\n    local element_element_element_element_index = 0\n    local element_element_element_element_length = 0\n    local element_element_element_element_element = element\n    local element_element_element_element_element_index = 0\n    local element_element_element_element_element_length = 0\n    local element_element_element_element_element_element = element\n    local element_element_element_element_element_index = 0\n    local element_element_element_element_element_length = 0\n    local element_element_element_element_element_element_element = element\n    local element_element_element_element_element_index = 0\n    local element_element_element_element_element_length = 0\n    local element_element_element_element_element_element_element_element = element\n    local element_element_element_element_element_index = 0\n    local element_element_element_element_element_length = 0\n    local element_element_element_element_element_element_element_element_element = element\n    local element_element_element_element_element_index = 0\n    local element_element_element_element_element_length = 0\n    local element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = insert_element",
            "lu.assertEquals(candidate({'Red', 'Green', 'Black'}, 'c'), {'c', 'Red', 'c', 'Green', 'c', 'Black'})",
            "lu.assertEquals(candidate({'python', 'java'}, 'program'), {'program', 'python', 'program', 'java'})",
            "lu.assertEquals(candidate({'happy', 'sad'}, 'laugh'), {'laugh', 'happy', 'laugh', 'sad'})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "252",
        "title": "convert",
        "text": "Write a luathon function to convert complex numbers to polar coordinates.",
        "code": "local function convert(numbers)\n    local function polar(numbers)\n        local function polar_to_cartesian(numbers)\n            local function cartesian(numbers)\n                local function cartesian_to_polar(numbers)\n                    local function polar_to_cartesian(numbers)\n                        local function cartesian_to_polar(numbers)\n                            local function polar_to_cartesian(numbers)\n                                local function cartesian_to_polar(numbers)\n                                    local function polar_to_cartesian(numbers)\n                                        local function cartesian_to_polar(numbers)\n                                            local function polar_to_cartesian(numbers)\n                                                local function cartesian_to_polar(numbers)\n                                                    local function polar_to_cartesian(numbers)\n                                                        local function cartesian_to_polar(numbers)\n                                                            local function polar_to_cartesian(numbers)\n                                                              local function polar_to_cartesian(numbers)\n                                                              local function polar_to_cartesian(numbers)\n                                                              local function polar_to_cartesian(numbers)\n                                                              local function polar_to_cartesian(numbers)\n                                                              local function polar_to_cartesian(numbers)\n                                                              local function polar_to_cartesian(numbers)\n                                                              local function polar_to_cartesian(numbers)\n                                                              local function polar_to_cartesian(numbers)\n                                                              local function polar_to_cartesian(numbers)\n                                                              local function polar_to_cartesian(numbers)\n                               \n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = convert",
            "lu.assertEquals(candidate(1), {1.0, 0.0})",
            "lu.assertEquals(candidate(4), {4.0, 0.0})",
            "lu.assertEquals(candidate(5), {5.0, 0.0})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "253",
        "title": "count_integer",
        "text": "Write a luathon function that returns the number of integer elements in a given table.",
        "code": "local function count_integer(list1)\n    local list2 = list1\n    local count = 0\n    for each (element in list2)\n        if (element < 10)\n            count += 1\n    return count\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count_integer",
            "lu.assertEquals(candidate({1, 2, 'abc', 1.2}), 2)",
            "lu.assertEquals(candidate({1, 2, 3}), 3)",
            "lu.assertEquals(candidate({1, 1.2, 4, 5.1}), 2)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "255",
        "title": "combinations_colors",
        "text": "Write a function that takes in a table and length n, and generates all combinations (with repetition) of the elements of the table and returns a table with a table for each combination.",
        "code": "local function combinations_colors(l, n)\n    local table = new Array(n)\n    for i in range(n)\n        table[i] = new Array(l)\n    for i in range(n)\n        for j in range(l)\n            table[i][j] = 1\n    return table\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = combinations_colors",
            "lu.assertEquals(candidate({'Red', 'Green', 'Blue'}, 1), {{'Red'}, {'Green'}, {'Blue'}})",
            "lu.assertEquals(candidate({'Red', 'Green', 'Blue'}, 2), {{'Red', 'Red'}, {'Red', 'Green'}, {'Red', 'Blue'}, {'Green', 'Green'}, {'Green', 'Blue'}, {'Blue', 'Blue'}})",
            "lu.assertEquals(candidate({'Red', 'Green', 'Blue'}, 3), {{'Red', 'Red', 'Red'}, {'Red', 'Red', 'Green'}, {'Red', 'Red', 'Blue'}, {'Red', 'Green', 'Green'}, {'Red', 'Green', 'Blue'}, {'Red', 'Blue', 'Blue'}, {'Green', 'Green', 'Green'}, {'Green', 'Green', 'Blue'}, {'Green', 'Blue', 'Blue'}, {'Blue', 'Blue', 'Blue'}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "256",
        "title": "count_Primes_nums",
        "text": "Write a luathon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "code": "local function count_Primes_nums(n)\n    if n < 2\n        return 0\n    else\n        return count_Primes_nums(n - 1) + count_Primes_nums(n - 2)\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count_Primes_nums",
            "lu.assertEquals(candidate(5), 2)",
            "lu.assertEquals(candidate(10), 4)",
            "lu.assertEquals(candidate(100), 25)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "257",
        "title": "swap_numbers",
        "text": "Write a function that takes in two numbers and returns a table with the second number and then the first number.",
        "code": "local function swap_numbers(a, b)\n    return a, b\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = swap_numbers",
            "lu.assertEquals(candidate(10, 20), {20, 10})",
            "lu.assertEquals(candidate(15, 17), {17, 15})",
            "lu.assertEquals(candidate(100, 200), {200, 100})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "259",
        "title": "maximize_elements",
        "text": "Write a function to maximize the given two tables.",
        "code": "local function maximize_elements(test_tup1, test_tup2)\n    local function get_max_elements(test_tup1, test_tup2)\n        local function get_max_elements_for_table(test_tup1, test_tup2)\n            local function get_max_elements_for_table_for_table(test_tup1, test_tup2)\n                local function get_max_elements_for_table_for_table_for_table(test_tup1, test_tup2)\n                    local function get_max_elements_for_table_for_table_for_table(test_tup1, test_tup2)\n                        local function get_max_elements_for_table_for_table_for_table(test_tup1, test_tup2)\n                            local function get_max_elements_for_table_for_table_for_table(test_tup1, test_tup2)\n                                local function get_max_elements_for_table_for_table_for_table(test_tup1, test_tup2)\n                                    local function get_max_elements_for_table_for_table_for_table(test_tup1, test_tup2)\n                                        local function get_max_elements_for_table_for_table_for_table(test_tup1, test_tup2)\n                                            local function get_max_elements_for_table_for_table_for_table(test_tup1, test_tup2)\n                                                local function get_max_elements_for_table_for_table_for_table(test_tup1, test_tup2)\n                                                    local function get_max_elements_for_table_for_table_for_table(test_tup1, test_tup2)\n                                                        local function get_max_elements_for_table_for_table_for_table(test_tup1, test\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = maximize_elements",
            "lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{6, 7}, {4, 9}, {2, 9}, {7, 10}})",
            "lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{7, 8}, {5, 10}, {3, 10}, {8, 11}})",
            "lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{8, 9}, {6, 11}, {4, 11}, {9, 12}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "260",
        "title": "newman_prime",
        "text": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code": "local function newman_prime(n)\n    return n.toString(10)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = newman_prime",
            "lu.assertEquals(candidate(3), 7)",
            "lu.assertEquals(candidate(4), 17)",
            "lu.assertEquals(candidate(5), 41)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "261",
        "title": "division_elements",
        "text": "Write a function that takes in two tables and performs mathematical division operation element-wise across the given tables.",
        "code": "local function division_elements(test_tup1, test_tup2)\n    local table_tup1 = test_tup1[0], table_tup2 = test_tup2[0];\n    local table_tup1_elements = table_tup1[1], table_tup2_elements = table_tup2[1];\n    local table_tup1_elements_elements = table_tup1_elements[1], table_tup2_elements_elements = table_tup2_elements[1];\n    local table_tup1_elements_elements_elements = table_tup1_elements_elements[1], table_tup2_elements_elements_elements = table_tup2_elements_elements[1];\n    local table_tup1_elements_elements_elements_elements = table_tup1_elements_elements_elements[1], table_tup2_elements_elements_elements_elements_elements = table_tup2_elements_elements_elements[1];\n    local table_tup1_elements_elements_elements_elements_elements = table_tup1_elements_elements_elements_elements[1], table_tup2_elements_elements_elements_elements_elements_elements_elements = table_tup2_elements_elements_elements_elements[1];\n    local table_tup1_elements_elements_elements_elements_elements_elements = table_tup1_elements_elements_elements_elements_elements[1], table_tup2_elements_elements_elements_elements_elements_elements_elements_elements = table_tup2_elements_elements_elements_elements_elements[1];\n    local table_tup1_elements_elements_elements_elements_e\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = division_elements",
            "lu.assertEquals(candidate({10, 4, 6, 9}, {5, 2, 3, 3}), {2, 2, 2, 3})",
            "lu.assertEquals(candidate({12, 6, 8, 16}, {6, 3, 4, 4}), {2, 2, 2, 4})",
            "lu.assertEquals(candidate({20, 14, 36, 18}, {5, 7, 6, 9}), {4, 2, 6, 2})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "262",
        "title": "split_two_parts",
        "text": "Write a function that takes in a table and an integer L and splits the given table into two parts where the length of the first part of the table is L, and returns the resulting tables in a table.",
        "code": "local function split_two_parts(list1, L)\n    local list2 = list1.split(L)\n    local list3 = list2.split(L)\n    return list3\nend function split_two_parts\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = split_two_parts",
            "lu.assertEquals(candidate({1, 1, 2, 3, 4, 4, 5, 1}, 3), {{1, 1, 2}, {3, 4, 4, 5, 1}})",
            "lu.assertEquals(candidate({'a', 'b', 'c', 'd'}, 2), {{'a', 'b'}, {'c', 'd'}})",
            "lu.assertEquals(candidate({'p', 'y', 't', 'h', 'o', 'n'}, 4), {{'p', 'y', 't', 'h'}, {'o', 'n'}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "264",
        "title": "dog_age",
        "text": "Write a function to calculate a dog's age in dog's years.",
        "code": "local function dog_age(h_age)\n    : (h_age, h_age) => (h_age, h_age)\n{\n    return (h_age, h_age) => h_age - (h_age - 1) * 365 * 24 * 60 * 60;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = dog_age",
            "lu.assertEquals(candidate(12), 61)",
            "lu.assertEquals(candidate(15), 73)",
            "lu.assertEquals(candidate(24), 109)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "265",
        "title": "list_split",
        "text": "Write a function that takes in a table and an integer n and splits a table for every nth element, returning a table of the resulting tables.",
        "code": "local function list_split(S, step)\n    local table = S.split(step)\n    local n = table.length\n    local result = []\n    for i in range(n):\n        result.push(table[i])\n    return result\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = list_split",
            "lu.assertEquals(candidate({'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'}, 3), {{'a', 'd', 'g', 'j', 'm'}, {'b', 'e', 'h', 'k', 'n'}, {'c', 'f', 'i', 'l'}})",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, 3), {{1, 4, 7, 10, 13}, {2, 5, 8, 11, 14}, {3, 6, 9, 12}})",
            "lu.assertEquals(candidate({'python', 'java', 'C', 'C++', 'DBMS', 'SQL'}, 2), {{'python', 'C', 'DBMS'}, {'java', 'C++', 'SQL'}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "266",
        "title": "lateralsurface_cube",
        "text": "Write a function to find the lateral surface area of a cube given its side length.",
        "code": "local function lateralsurface_cube(l)\n    local sidelength = l.length\n    local sidelength_cube = sidelength * sidelength\n    local area = sidelength_cube * sidelength_cube\n    return area\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = lateralsurface_cube",
            "lu.assertEquals(candidate(5), 100)",
            "lu.assertEquals(candidate(9), 324)",
            "lu.assertEquals(candidate(10), 400)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "267",
        "title": "square_Sum",
        "text": "Write a luathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "code": "local function square_Sum(n)\n    n = int(n)\n    if n % 2 == 0:\n        return n * n\n    else:\n        return n * (n - 1)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = square_Sum",
            "lu.assertEquals(candidate(2), 10)",
            "lu.assertEquals(candidate(3), 35)",
            "lu.assertEquals(candidate(4), 84)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "268",
        "title": "find_star_num",
        "text": "Write a function to find then'th star number.",
        "code": "local function find_star_num(n)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_star_num",
            "lu.assertEquals(candidate(3), 37)",
            "lu.assertEquals(candidate(4), 73)",
            "lu.assertEquals(candidate(5), 121)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "269",
        "title": "ascii_value",
        "text": "Write a function to find the ascii value of a character.",
        "code": "local function ascii_value(k)\n    return k.charCodeAt(0)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = ascii_value",
            "lu.assertEquals(candidate('A'), 65)",
            "lu.assertEquals(candidate('R'), 82)",
            "lu.assertEquals(candidate('S'), 83)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "270",
        "title": "sum_even_and_even_index",
        "text": "Write a luathon function to find the sum of even numbers at even positions of a table.",
        "code": "local function sum_even_and_even_index(arr)\n    local sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (i % 2 === 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sum_even_and_even_index",
            "lu.assertEquals(candidate({5, 6, 12, 1, 18, 8}), 30)",
            "lu.assertEquals(candidate({3, 20, 17, 9, 2, 10, 18, 13, 6, 18}), 26)",
            "lu.assertEquals(candidate({5, 6, 12, 1}), 12)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "271",
        "title": "even_Power_Sum",
        "text": "Write a luathon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "code": "local function even_Power_Sum(n)\n{\n    let sum = 0;\n    for (let i = 1; i <= n; i++)\n    {\n        sum += i;\n    }\n    return sum;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = even_Power_Sum",
            "lu.assertEquals(candidate(2), 1056)",
            "lu.assertEquals(candidate(3), 8832)",
            "lu.assertEquals(candidate(1), 32)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "272",
        "title": "rear_extract",
        "text": "Write a function that takes in a table of tables and returns a table containing the rear element of each table.",
        "code": "local function rear_extract(test_list)\n    local table = test_list[0]\n    local table_length = len(test_list)\n    local table_element = table[table_length - 1]\n    local table_element_length = len(table_element)\n    local table_element_element = table_element[table_element_length - 1]\n    local table_element_element_length = len(table_element_element)\n    local table_element_element_element = table_element_element[table_element_element_length - 1]\n    local table_element_element_element_length = len(table_element_element_element)\n    local table_element_element_element_element = table_element_element_element[table_element_element_element_length - 1]\n    local table_element_element_element_element_length = len(table_element_element_element_element)\n    local table_element_element_element_element_element = table_element_element_element_element[table_element_element_element_length - 1]\n    local table_element_element_element_element_length = len(table_element_element_element_element_element)\n    local table_element_element_element_element_element_length = len(table_element_element_element_element_element)\n    local table_element_element_element_element_element_element_length = len(table_element_element_element_element_element_element)\n    local table_element_element_element_element_element_element_length = len(table_element_element_element_element_element_element_element)\n    local table_element_element_element_element_element_element_length = len(table_element_element_element_element_element_element_element_element)\n    local table_element_element_element_element_element_element_length = len(table_element_element_element_element_element_element_element_element_element)\n    local table_element_element_element_element_element_element_length = len(table_element\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = rear_extract",
            "lu.assertEquals(candidate({{1, 'Rash', 21}, {2, 'Varsha', 20}, {3, 'Kil', 19}}), {21, 20, 19})",
            "lu.assertEquals(candidate({{1, 'Sai', 36}, {2, 'Ayesha', 25}, {3, 'Salman', 45}}), {36, 25, 45})",
            "lu.assertEquals(candidate({{1, 'Sudeep', 14}, {2, 'Vandana', 36}, {3, 'Dawood', 56}}), {14, 36, 56})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "273",
        "title": "substract_elements",
        "text": "Write a function that takes in two tables and subtracts the elements of the first table by the elements of the second table with the same index.",
        "code": "local function substract_elements(test_tup1, test_tup2)\n{\n    let result = [];\n    for (let i = 0; i < test_tup1.length; i++)\n    {\n        result.push(test_tup1[i] - test_tup2[i]);\n    }\n    return result;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = substract_elements",
            "lu.assertEquals(candidate({10, 4, 5}, {2, 5, 18}), {8, -1, -13})",
            "lu.assertEquals(candidate({11, 2, 3}, {24, 45, 16}), {-13, -43, -13})",
            "lu.assertEquals(candidate({7, 18, 9}, {10, 11, 12}), {-3, 7, -3})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "274",
        "title": "even_binomial_Coeff_Sum",
        "text": "Write a luathon function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "code": "local function even_binomial_Coeff_Sum(n)\n{\n    let sum = 0;\n    for (let i = 0; i < n; i++)\n    {\n        sum += i;\n    }\n    return sum;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = even_binomial_Coeff_Sum",
            "lu.assertEquals(candidate(4), 8)",
            "lu.assertEquals(candidate(6), 32)",
            "lu.assertEquals(candidate(2), 2)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "277",
        "title": "dict_filter",
        "text": "Write a function that takes in a table and integer n and filters the table to only include entries with values greater than or equal to n.",
        "code": "local function dict_filter(dict, n)\n    return {\n        key: value for key, value in dict.items() if value > n\n    }\nend function\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = dict_filter",
            "lu.assertEquals(candidate({['Cierra Vega'] = 175, ['Alden Cantrell'] = 180, ['Kierra Gentry'] = 165, ['Pierre Cox'] = 190}, 170), {['Cierra Vega'] = 175, ['Alden Cantrell'] = 180, ['Pierre Cox'] = 190})",
            "lu.assertEquals(candidate({['Cierra Vega'] = 175, ['Alden Cantrell'] = 180, ['Kierra Gentry'] = 165, ['Pierre Cox'] = 190}, 180), {['Alden Cantrell'] = 180, ['Pierre Cox'] = 190})",
            "lu.assertEquals(candidate({['Cierra Vega'] = 175, ['Alden Cantrell'] = 180, ['Kierra Gentry'] = 165, ['Pierre Cox'] = 190}, 190), {['Pierre Cox'] = 190})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "278",
        "title": "count_first_elements",
        "text": "Write a function to find the number of elements that occurs before the table element in the given table.",
        "code": "local function count_first_elements(test_tup)\n    local table = test_tup[0]\n    local count = 0\n    for (let i = 0; i < table.length; i++) {\n        if (table[i] === test_tup[1]) {\n            count++\n        }\n    }\n    return count\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count_first_elements",
            "lu.assertEquals(candidate({1, 5, 7, {4, 6}, 10}), 3)",
            "lu.assertEquals(candidate({2, 9, {5, 7}, 11}), 2)",
            "lu.assertEquals(candidate({11, 15, 5, 8, {2, 3}, 8}), 4)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "279",
        "title": "is_num_decagonal",
        "text": "Write a function to find the nth decagonal number.",
        "code": "local function is_num_decagonal(n)\n    if (n < 2)\n        return n\n    else\n        return is_num_decagonal(n - 1) + is_num_decagonal(n - 2)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = is_num_decagonal",
            "lu.assertEquals(candidate(3), 27)",
            "lu.assertEquals(candidate(7), 175)",
            "lu.assertEquals(candidate(10), 370)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "280",
        "title": "sequential_search",
        "text": "Write a function that takes in a table and element and returns a table containing a boolean that indicates if the element is in the table and the index position of the element (or -1 if the element is not found).",
        "code": "local function sequential_search(dlist, item)\n    local table = dlist[item]\n    local index = table.index\n    local result = table[index]\n    return result\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sequential_search",
            "lu.assertEquals(candidate({11, 23, 58, 31, 56, 77, 43, 12, 65, 19}, 31), {true, 3})",
            "lu.assertEquals(candidate({12, 32, 45, 62, 35, 47, 44, 61}, 61), {true, 7})",
            "lu.assertEquals(candidate({9, 10, 17, 19, 22, 39, 48, 56}, 48), {true, 6})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "281",
        "title": "all_unique",
        "text": "Write a luathon function to check if the elements of a given table are unique or not.",
        "code": "local function all_unique(test_list)\n    local function is_unique(test_list)\n        local function is_unique_index(test_list)\n            local function is_unique_index_index(test_list)\n                local function is_unique_index_index_index(test_list)\n                    local function is_unique_index_index_index_index(test_list)\n                        local function is_unique_index_index_index_index_index(test_list)\n                            local function is_unique_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = all_unique",
            "lu.assertEquals(candidate({1, 2, 3}), true)",
            "lu.assertEquals(candidate({1, 2, 1, 2}), false)",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "282",
        "title": "sub_list",
        "text": "Write a function to subtract two tables element-wise.",
        "code": "local function sub_list(nums1, nums2)\n    local nums1 = [], nums2 = [],\n    i = 0, j = 0, k = 0, l = 0,\n    n = nums1.length,\n    m = nums2.length,\n    sum = 0;\n    while (i < n) {\n        nums1[i] = nums2[i];\n        i++;\n    }\n    while (j < m) {\n        nums2[j] = nums1[j];\n        j++;\n    }\n    while (k < l) {\n        nums1[k] = nums2[k];\n        k++;\n    }\n    for (i = 0; i < n; i++) {\n        sum += nums1[i];\n    }\n    return sum;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sub_list",
            "lu.assertEquals(candidate({1, 2, 3}, {4, 5, 6}), {-3, -3, -3})",
            "lu.assertEquals(candidate({1, 2}, {3, 4}), {-2, -2})",
            "lu.assertEquals(candidate({90, 120}, {50, 70}), {40, 50})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "283",
        "title": "validate",
        "text": "Write a luathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "code": "local function validate(n)\n    if n < 0 or n > 9\n    return false\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = validate",
            "lu.assertEquals(candidate(1234), true)",
            "lu.assertEquals(candidate(51241), false)",
            "lu.assertEquals(candidate(321), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "284",
        "title": "check_element",
        "text": "Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.",
        "code": "local function check_element(list, element)\n    return list.every(function(item) {\n        return item === element;\n    })\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = check_element",
            "lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)",
            "lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)",
            "lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "285",
        "title": "text_match_two_three",
        "text": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "code": "local function text_match_two_three(text)\n    // text is a string.\n    //\n    // Returns true if the string contains the 'a' character followed by two or three 'b' characters.\n    //\n    // Returns false if the string does not contain the 'a' character followed by two or three 'b' characters.\n    //\n    // Returns true if the string does not contain the 'a' character followed by two or three 'b' characters.\n    //\n    // Returns false if the string does not contain the 'a' character followed by two or three 'b' characters.\n    //\n    // Returns true if the string does not contain the 'a' character followed by two or three 'b' characters.\n    //\n    // Returns false if the string does not contain the 'a' character followed by two or three 'b' characters.\n    //\n    // Returns true if the string does not contain the 'a' character followed by two or three 'b' characters.\n    //\n    // Returns false if the string does not contain the 'a' character followed by two or three 'b' characters.\n    //\n    // Returns true if the string does not contain the 'a' character followed by two or three 'b' characters.\n    //\n    // Returns false if the string does not contain the 'a' character followed by two or three 'b' characters.\n    //\n    // Returns true if the string does not contain the 'a' character followed by two or three 'b' characters.\n    //\n    // Returns false if the string does not contain the 'a' character followed by two or three 'b' characters.\n    //\n    // Returns true if the string does not contain the 'a' character followed by two or three 'b' characters.\n    //\n    // Returns false if the string does not contain the 'a' character followed by two or three 'b' characters.\n    //\n    // Returns true if the string does not contain the 'a' character followed by two or three 'b' characters.\n    //\n    // Returns false if the string does not contain the 'a' character followed by two or three 'b' characters.\n    //\n\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = text_match_two_three",
            "lu.assertEquals(candidate('ac'), false)",
            "lu.assertEquals(candidate('dc'), false)",
            "lu.assertEquals(candidate('abbbba'), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "286",
        "title": "max_sub_array_sum_repeated",
        "text": "Write a function to find the largest sum of a contiguous table in the modified table which is formed by repeating the given table k times.",
        "code": "local function max_sub_array_sum_repeated(a, n, k)\n    local max_sub_array_sum = 0;\n    for (let i = 0; i < n; i++)\n        max_sub_array_sum = max(max_sub_array_sum, a[i * k]);\n    return max_sub_array_sum;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = max_sub_array_sum_repeated",
            "lu.assertEquals(candidate({10, 20, -30, -1}, 4, 3), 30)",
            "lu.assertEquals(candidate({-1, 10, 20}, 3, 2), 59)",
            "lu.assertEquals(candidate({-1, -2, -3}, 3, 3), -1)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "287",
        "title": "square_Sum",
        "text": "Write a luathon function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "code": "local function square_Sum(n)\n    return n * (n - 1)\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = square_Sum",
            "lu.assertEquals(candidate(2), 20)",
            "lu.assertEquals(candidate(3), 56)",
            "lu.assertEquals(candidate(4), 120)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "290",
        "title": "max_length",
        "text": "Write a function to find the table of maximum length in a table of tables.",
        "code": "local function max_length(list1)\n    local max_length = 0;\n    for (let i = 0; i < list1.length; i++)\n        max_length = max(max_length, list1[i]);\n    return max_length;\nend function max_length(list1)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = max_length",
            "lu.assertEquals(candidate({{0}, {1, 3}, {5, 7}, {9, 11}, {13, 15, 17}}), {3, {13, 15, 17}})",
            "lu.assertEquals(candidate({{1}, {5, 7}, {10, 12, 14, 15}}), {4, {10, 12, 14, 15}})",
            "lu.assertEquals(candidate({{5}, {15, 20, 25}}), {3, {15, 20, 25}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "291",
        "title": "count_no_of_ways",
        "text": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code": "local function count_no_of_ways(n, k)\n    local n = n\n    local k = k\n    local n_of_ways = 0\n    for i in range(n)\n        for j in range(k)\n            if (i + j) % 2 == 0\n                n_of_ways += 1\n    return n_of_ways\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count_no_of_ways",
            "lu.assertEquals(candidate(2, 4), 16)",
            "lu.assertEquals(candidate(3, 2), 6)",
            "lu.assertEquals(candidate(4, 4), 228)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "292",
        "title": "find",
        "text": "Write a luathon function to find quotient of two numbers (rounded down to the nearest integer).",
        "code": "local function find(n, m)\n    if n == m\n        return n\n    else\n        return find(n, m - 1) + find(n, m)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find",
            "lu.assertEquals(candidate(10, 3), 3)",
            "lu.assertEquals(candidate(4, 2), 2)",
            "lu.assertEquals(candidate(20, 5), 4)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "293",
        "title": "otherside_rightangle",
        "text": "Write a function to find the third side of a right angled triangle.",
        "code": "local function otherside_rightangle(w, h)\n    w = w + 1\n    h = h + 1\n    return w, h\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = otherside_rightangle",
            "lu.assertEquals(candidate(7, 8), 10.63014581273465)",
            "lu.assertEquals(candidate(3, 4), 5)",
            "lu.assertEquals(candidate(7, 15), 16.55294535724685)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "294",
        "title": "max_val",
        "text": "Write a function to find the maximum value in a given heterogeneous table.",
        "code": "local function max_val(listval)\n    local max_val = 0\n    for (var i = 0; i < listval.length; i++)\n        if (listval[i] > max_val)\n            max_val = listval[i]\n    return max_val\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = max_val",
            "lu.assertEquals(candidate({'Python', 3, 2, 4, 5, 'version'}), 5)",
            "lu.assertEquals(candidate({'Python', 15, 20, 25}), 25)",
            "lu.assertEquals(candidate({'Python', 30, 20, 40, 50, 'version'}), 50)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "295",
        "title": "sum_div",
        "text": "Write a function to return the sum of all divisors of a number.",
        "code": "local function sum_div(number)\n    return number.toString().length\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sum_div",
            "lu.assertEquals(candidate(8), 7)",
            "lu.assertEquals(candidate(12), 16)",
            "lu.assertEquals(candidate(7), 1)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "296",
        "title": "get_Inv_Count",
        "text": "Write a luathon function to count inversions in a table.",
        "code": "local function get_Inv_Count(arr)\n{\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === '1') {\n            count++;\n        }\n    }\n    return count;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = get_Inv_Count",
            "lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)",
            "lu.assertEquals(candidate({1, 2, 1}), 1)",
            "lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "297",
        "title": "flatten_list",
        "text": "Write a function to flatten a given nested table structure.",
        "code": "local function flatten_list(list1)\n    local list2 = list1.map(\n        (item) => item.map(\n            (item2) => item2.map(\n                (item3) => item3.map(\n                    (item4) => item4.map(\n                        (item5) => item5.map(\n                            (item6) => item6.map(\n                                (item7) => item7.map(\n                                    (item8) => item8.map(\n                                        (item9) => item9.map(\n                                            (item10) => item10.map(\n                                                (item11) => item11.map(\n                                                    (item12) => item12.map(\n                                                        (item13) => item13.map(\n                                                            (item14) => item14.map(\n                                                                (item15) => item15.map(\n                                                                    (item16) => item16.map(\n                                                                        (item17) => item17.map(\n                                                                            (item18) => item18.map(\n                                                                                (item19) => item19.map(\n                                                                                    (item20) => item20.map(\n                                                                                        (item21) => item21.map(\n                                                                                            (item22) => item22.map(\n                                                                                                  (item23) => item23.map(\n                                                                                                    (item24) => item24.map(\n                                                                                                        (item25) => item25.map(\n                                                                                                        (item26) => item26.map(\n                                                                                                              (item27) => item27.map(\n                                                                                                                  (item28) => item28.map(\n                                                                                                                      (item29) => item29.map(\n                                                                                                                        (item30) => item30.map(\n                                                                                                                           (item31) => item31.\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = flatten_list",
            "lu.assertEquals(candidate({0, 10, {20, 30}, 40, 50, {60, 70, 80}, {90, 100, 110, 120}}), {0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120})",
            "lu.assertEquals(candidate({{10, 20}, {40}, {30, 56, 25}, {10, 20}, {33}, {40}}), {10, 20, 40, 30, 56, 25, 10, 20, 33, 40})",
            "lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}}), {1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "299",
        "title": "max_aggregate",
        "text": "Write a function to calculate the maximum aggregate from the table of tables.",
        "code": "local function max_aggregate(stdata)\n    local max_aggregate = 0;\n    for (var i = 0; i < stdata.length; i++) {\n        max_aggregate = Math.max(max_aggregate, stdata[i].max);\n    }\n    return max_aggregate;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = max_aggregate",
            "lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})",
            "lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})",
            "lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "304",
        "title": "find_Element",
        "text": "Write a luathon function to find element at a given index after number of rotations.",
        "code": "local function find_Element(arr, ranges, rotations, index)\n    let index = index;\n    let range = ranges[index];\n    let rotations = rotations[index];\n    let range_length = range.length;\n    let rotations_length = rotations.length;\n    let index_length = range_length - rotations_length;\n    let index_rotations = index_length - rotations_length;\n    let index_range = range.slice(0, index_rotations);\n    let index_range_length = index_range.length;\n    let index_rotations_length = index_rotations.length;\n    let index_range_rotations = index_rotations_length - rotations_length;\n    let index_range_rotations_length = index_range_rotations.length;\n    let index_range_rotations_length = index_range_rotations.length;\n    let index_range_rotations_length = index_range_rotations_length - rotations_length;\n    let index_range_rotations_length = index_range_rotations_length - rotations_length;\n    let index_range_rotations_length = index_range_rotations_length - rotations_length;\n    let index_range_rotations_length = index_range_rotations_length - rotations_length;\n    let index_range_rotations_length = index_range_rotations_length - rotations_length;\n    let index_range_rotations_length = index_range_rotations_length - rotations_length;\n    let index_range_rotations_length = index_range_rotations_length - rotations_length;\n    let index_range_rotations_length = index_range_rotations_length - rotations_length;\n    let index_range_rotations_length = index_range_rotations_length - rotations_length;\n    let index_range_rotations_length = index_range_rotations_length - rotations_length;\n    let index_range_rotations_length = index_range_rotations\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_Element",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5}, {{0, 2}, {0, 3}}, 2, 1), 3)",
            "lu.assertEquals(candidate({1, 2, 3, 4}, {{0, 1}, {0, 2}}, 1, 2), 3)",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {{0, 1}, {0, 2}}, 1, 1), 1)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "305",
        "title": "start_withp",
        "text": "Write a function to return two words from a table of words starting with letter 'p'.",
        "code": "local function start_withp(words)\n    return words[0] + words[1]\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = start_withp",
            "lu.assertEquals(candidate({'Python PHP', 'Java JavaScript', 'c c++'}), {'Python', 'PHP'})",
            "lu.assertEquals(candidate({'Python Programming', 'Java Programming'}), {'Python', 'Programming'})",
            "lu.assertEquals(candidate({'Pqrst Pqr', 'qrstuv'}), {'Pqrst', 'Pqr'})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "306",
        "title": "max_sum_increasing_subseq",
        "text": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.",
        "code": "local function max_sum_increasing_subseq(a, n, index, k)\n\tlocal max = 0\n\tfor i = index; i < n; i += 1\n\tfor j = index + 1; j < n; j += 1\n\tfor k = index + 1; k < n; k += 1\n\tmax = max + a[i] * a[j] * a[k]\n\treturn max\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = max_sum_increasing_subseq",
            "lu.assertEquals(candidate({1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), 11)",
            "lu.assertEquals(candidate({1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), 7)",
            "lu.assertEquals(candidate({11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), 71)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "308",
        "title": "large_product",
        "text": "Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.",
        "code": "local function large_product(nums1, nums2, N)\n    local nums1 = nums1.slice(0, N);\n    local nums2 = nums2.slice(0, N);\n    local result = [];\n    for (let i = 0; i < N; i++) {\n        result.push(nums1[i] * nums2[i]);\n    }\n    return result;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = large_product",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "309",
        "title": "maximum",
        "text": "Write a luathon function to find the maximum of two numbers.",
        "code": "local function maximum(a, b)\n    local max = a;\n    local min = b;\n    for (let i = 0; i < a; i++)\n        if (a > b)\n            max = a;\n        else\n            min = b;\n    return max;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = maximum",
            "lu.assertEquals(candidate(5, 10), 10)",
            "lu.assertEquals(candidate(-1, -2), -1)",
            "lu.assertEquals(candidate(9, 7), 9)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "310",
        "title": "string_to_tuple",
        "text": "Write a function to convert a given string to a table of characters.",
        "code": "local function string_to_tuple(str1)\n    local str2 = str1.split(',')\n    return str2\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = string_to_tuple",
            "lu.assertEquals(candidate('python 3.0'), {'p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'})",
            "lu.assertEquals(candidate('item1'), {'i', 't', 'e', 'm', '1'})",
            "lu.assertEquals(candidate('15.10'), {'1', '5', '.', '1', '0'})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "388",
        "title": "highest_Power_of_2",
        "text": "Write a luathon function to find the highest power of 2 that is less than or equal to n.",
        "code": "local function highest_Power_of_2(n)\n    return (n & (n - 1)) | 0;\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = highest_Power_of_2",
            "lu.assertEquals(candidate(10), 8)",
            "lu.assertEquals(candidate(19), 16)",
            "lu.assertEquals(candidate(32), 32)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "389",
        "title": "find_lucas",
        "text": "Write a function to find then'th lucas number.",
        "code": "local function find_lucas(n)\n    local function lucas(n)\n        local function lucas_1(n)\n            local function lucas_2(n)\n                local function lucas_3(n)\n                    local function lucas_4(n)\n                        local function lucas_5(n)\n                            local function lucas_6(n)\n                                local function lucas_7(n)\n                                    local function lucas_8(n)\n                                        local function lucas_9(n)\n                                            local function lucas_10(n)\n                                                local function lucas_11(n)\n                                                    local function lucas_12(n)\n                                                        local function lucas_13(n)\n                                                            local function lucas_14(n)\n                                                              local function lucas_15(n)\n                                                              local function lucas_16(n)\n                                                              local function lucas_17(n)\n                                                              local function lucas_18(n)\n                                                              local function lucas_19(n)\n                                                              local function lucas_20(n)\n                                                              local function lucas_21(n)\n                                                              local function lucas_22(n)\n                                                              local function lucas_23(n)\n                                                              local function lucas_24(n)\n                                                              local function lucas_25(n)\n                                                              local function lucas_26(n)\n                                                              local function lucas_27(n)\n                                     \n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_lucas",
            "lu.assertEquals(candidate(9), 76)",
            "lu.assertEquals(candidate(4), 7)",
            "lu.assertEquals(candidate(3), 4)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "390",
        "title": "add_string",
        "text": "Write a function to apply a given format string to all of the elements in a table.",
        "code": "local function add_string(list_, string)\n    list_.push(string)\n    return list_\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = add_string",
            "lu.assertEquals(candidate({1, 2, 3, 4}, 'temp{0}'), {'temp1', 'temp2', 'temp3', 'temp4'})",
            "lu.assertEquals(candidate({'a', 'b', 'c', 'd'}, 'python{0}'), {'pythona', 'pythonb', 'pythonc', 'pythond'})",
            "lu.assertEquals(candidate({5, 6, 7, 8}, 'string{0}'), {'string5', 'string6', 'string7', 'string8'})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "391",
        "title": "convert_list_dictionary",
        "text": "Write a function to convert more than one table to nested table.",
        "code": "local function convert_list_dictionary(l1, l2, l3)\n    local function convert_list_dictionary_nested(l1, l2, l3)\n        local function convert_list_dictionary_nested_nested(l1, l2, l3)\n            local function convert_list_dictionary_nested_nested_nested(l1, l2, l3)\n                local function convert_list_dictionary_nested_nested_nested_nested(l1, l2, l3)\n                    local function convert_list_dictionary_nested_nested_nested_nested(l1, l2, l3)\n                        local function convert_list_dictionary_nested_nested_nested_nested(l1, l2, l3)\n                            local function convert_list_dictionary_nested_nested_nested_nested(l1, l2, l3)\n                                local function convert_list_dictionary_nested_nested_nested_nested(l1, l2, l3)\n                                    local function convert_list_dictionary_nested_nested_nested_nested(l1, l2, l3)\n                                        local function convert_list_dictionary_nested_nested_nested_nested(l1, l2, l3)\n                                            local function convert_list_dictionary_nested_nested_nested_nested(l1, l2, l3)\n                                                local function convert_list_dictionary_nested_nested_nested_nested(l1, l2, l3)\n                                                    local function convert_list_dictionary_nested_nested_nested_nested(l1, l2, l3)\n                                                        local function convert_list_dictionary_nested_nested_nested_nested(l1, l2, l3)\n                                                            local function convert_list_dictionary_nested_nested_nested\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = convert_list_dictionary",
            "lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})",
            "lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})",
            "lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "392",
        "title": "get_max_sum",
        "text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code": "local function get_max_sum(n)\n    local function f(n)\n        local function max(a, b)\n            local function max_a(a)\n                local function max_b(b)\n                    local function max_a(a)\n                        local function max_b(b)\n                            local function max(a, b)\n                                local function max_a(a)\n                                    local function max_b(b)\n                                        local function max(a, b)\n                                            local function max_a(a)\n                                                local function max_b(b)\n                                                    local function max(a, b)\n                                                        local function max_a(a)\n                                                            local function max_b(b)\n                                                              local function max(a, b)\n                                                              local function max_a(a)\n                                                              local function max_b(b)\n                                                              local function max(a, b)\n                                                              local function max_a(a)\n                                                              local function max_b(b)\n                                                              local function max(a, b)\n                                                              local function max_a(a)\n                                                              local function max_b(b)\n                                                              local function max(a, b)\n                                                              local function max_a(a)\n                                                              local function max_b(b)\n                                                              local function max(a,\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = get_max_sum",
            "lu.assertEquals(candidate(60), 106)",
            "lu.assertEquals(candidate(10), 12)",
            "lu.assertEquals(candidate(2), 2)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "393",
        "title": "max_length_list",
        "text": "Write a function to find the table with maximum length.",
        "code": "local function max_length_list(input_list)\n    local max_length = 0;\n    for (let i = 0; i < input_list.length; i++) {\n        max_length = Math.max(max_length, input_list[i].length);\n    }\n    return max_length;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = max_length_list",
            "lu.assertEquals(candidate({{0}, {1, 3}, {5, 7}, {9, 11}, {13, 15, 17}}), {3, {13, 15, 17}})",
            "lu.assertEquals(candidate({{1, 2, 3, 4, 5}, {1, 2, 3, 4}, {1, 2, 3}, {1, 2}, {1}}), {5, {1, 2, 3, 4, 5}})",
            "lu.assertEquals(candidate({{3, 4, 5}, {6, 7, 8, 9}, {10, 11, 12}}), {4, {6, 7, 8, 9}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "394",
        "title": "check_distinct",
        "text": "Write a function to check if given table contains no duplicates.",
        "code": "local function check_distinct(test_tup)\n  return test_tup.distinct()\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = check_distinct",
            "lu.assertEquals(candidate({1, 4, 5, 6, 1, 4}), false)",
            "lu.assertEquals(candidate({1, 4, 5, 6}), true)",
            "lu.assertEquals(candidate({2, 3, 4, 5, 6}), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "395",
        "title": "first_non_repeating_character",
        "text": "Write a luathon function to find the first non-repeated character in a given string.",
        "code": "local function first_non_repeating_character(str1)\n    local str2 = str1.split('')\n    return str2[0]\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = first_non_repeating_character",
            "lu.assertEquals(candidate('abcabc'), None)",
            "lu.assertEquals(candidate('abc'), 'a')",
            "lu.assertEquals(candidate('ababc'), 'c')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "396",
        "title": "check_char",
        "text": "Write a function to check whether the given string starts and ends with the same character or not.",
        "code": "local function check_char(string)\n    return string.charAt(0) === string.charAt(string.length - 1)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = check_char",
            "lu.assertEquals(candidate('abba'), 'Valid')",
            "lu.assertEquals(candidate('a'), 'Valid')",
            "lu.assertEquals(candidate('abcd'), 'Invalid')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "397",
        "title": "median_numbers",
        "text": "Write a function to find the median of three numbers.",
        "code": "local function median_numbers(a, b, c)\n    local a, b, c = a, b, c\n    local sum = 0\n    local n = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = median_numbers",
            "lu.assertEquals(candidate(25, 55, 65), 55.0)",
            "lu.assertEquals(candidate(20, 10, 30), 20.0)",
            "lu.assertEquals(candidate(15, 45, 75), 45.0)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "398",
        "title": "sum_of_digits",
        "text": "Write a function to compute the sum of digits of each number of a given table.",
        "code": "local function sum_of_digits(nums)\n    local sum = 0;\n    for (let i = 0; i < nums.length; i++) {\n        sum += nums[i];\n    }\n    return sum;\nend function sum_of_digits(nums) {\n    let sum = 0;\n    for (let i = 0; i < nums.length; i++) {\n        sum += nums[i];\n    }\n    return sum;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sum_of_digits",
            "lu.assertEquals(candidate({10, 2, 56}), 14)",
            "lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)",
            "lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "399",
        "title": "bitwise_xor",
        "text": "Write a function to perform the mathematical bitwise xor operation across the given tables.",
        "code": "local function bitwise_xor(test_tup1, test_tup2)\n    local table_tup1 = test_tup1;\n    local table_tup2 = test_tup2;\n    local table_tup1_tup2 = table_tup1;\n    local table_tup2_tup1 = table_tup2;\n    local table_tup1_tup2_tup2 = table_tup1;\n    local table_tup2_tup1_tup2 = table_tup2;\n    local table_tup1_tup2_tup2_tup1 = table_tup1;\n    local table_tup2_tup1_tup2_tup2_tup1 = table_tup2;\n    local table_tup1_tup2_tup2_tup1_tup2 = table_tup1;\n    local table_tup2_tup1_tup2_tup2_tup1_tup2 = table_tup2;\n    local table_tup1_tup2_tup2_tup1_tup2_tup2 = table_tup1;\n    local table_tup2_tup1_tup2_tup2_tup1_tup2_tup2 = table_tup2;\n    local table_tup1_tup2_tup2_tup1_tup2_tup2_tup2 = table_tup1;\n    local table_tup2_tup1_tup2_tup2_tup1_tup2_tup2_tup2 = table_tup2;\n    local table_tup1_tup2_tup2_tup1_tup2_tup2_tup2_tup2_tup2 = table_tup1;\n    local table_tup2_tup1_tup2_tup2_tup1_tup2_tup2\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = bitwise_xor",
            "lu.assertEquals(candidate({10, 4, 6, 9}, {5, 2, 3, 3}), {15, 6, 5, 10})",
            "lu.assertEquals(candidate({11, 5, 7, 10}, {6, 3, 4, 4}), {13, 6, 3, 14})",
            "lu.assertEquals(candidate({12, 6, 8, 11}, {7, 4, 5, 6}), {11, 2, 13, 13})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "3",
        "title": "is_not_prime",
        "text": "Write a luathon function to identify non-prime numbers.",
        "code": "local function is_not_prime(n)\n    return n % 2 == 0\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = is_not_prime",
            "lu.assertEquals(candidate(2), false)",
            "lu.assertEquals(candidate(10), true)",
            "lu.assertEquals(candidate(35), true)",
            "lu.assertEquals(candidate(37), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "400",
        "title": "extract_freq",
        "text": "Write a function to extract the number of unique tables in the given table.",
        "code": "local function extract_freq(test_list)\n    local table = test_list[0]\n    local count = 0\n    for (let i = 1; i < test_list.length; i++) {\n        if (test_list[i].table_name == table.table_name) {\n            count += 1\n        }\n    }\n    return count\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = extract_freq",
            "lu.assertEquals(candidate({{3, 4}, {1, 2}, {4, 3}, {5, 6}}), 3)",
            "lu.assertEquals(candidate({{4, 15}, {2, 3}, {5, 4}, {6, 7}}), 4)",
            "lu.assertEquals(candidate({{5, 16}, {2, 3}, {6, 5}, {6, 9}}), 4)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "401",
        "title": "add_nested_tuples",
        "text": "Write a function to perform index wise addition of table elements in the given two nested tables.",
        "code": "local function add_nested_tuples(test_tup1, test_tup2)\n    local function add_nested_tuple(tup)\n        local function add_nested_tuple_1(tup)\n            local function add_nested_tuple_2(tup)\n                local function add_nested_tuple_3(tup)\n                    local function add_nested_tuple_4(tup)\n                        local function add_nested_tuple_5(tup)\n                            local function add_nested_tuple_6(tup)\n                                local function add_nested_tuple_7(tup)\n                                    local function add_nested_tuple_8(tup)\n                                        local function add_nested_tuple_9(tup)\n                                            local function add_nested_tuple_10(tup)\n                                                local function add_nested_tuple_11(tup)\n                                                    local function add_nested_tuple_12(tup)\n                                                        local function add_nested_tuple_13(tup)\n                                                            local function add_nested_tuple_14(tup)\n                                                                local function add_nested_tuple_15(tup)\n                                                                    local function add_nested_tuple_16(tup)\n                                                                        local function add_nested_tuple_17(tup)\n                                                                            local function add_nested_tuple_18(tup)\n                                                                                local function add_nested_tuple_19(tup)\n                                                                                    local function add_nested_tuple_20(tup)\n                                                                                        local function add_nested_tuple_21(tup)\n                                                                                            local function add_nested_tuple_22(tup)\n                                                                                            local function add_nested_tuple_23(tup)\n                               \n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = add_nested_tuples",
            "lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})",
            "lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})",
            "lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "404",
        "title": "minimum",
        "text": "Write a luathon function to find the minimum of two numbers.",
        "code": "local function minimum(a, b)\n    local a = a\n    local b = b\n    if a < b\n        return a\n    else\n        return b\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = minimum",
            "lu.assertEquals(candidate(1, 2), 1)",
            "lu.assertEquals(candidate(-5, -4), -5)",
            "lu.assertEquals(candidate(0, 0), 0)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "405",
        "title": "check_tuplex",
        "text": "Write a function to check whether an element exists within a table.",
        "code": "local function check_tuplex(tuplex, tuple1)\n    tuple1 = tuple1.toLowerCase()\n    if (tuplex.indexOf(tuple1) === -1) {\n        return false\n    }\n    return true\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = check_tuplex",
            "lu.assertEquals(candidate({'w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'}, 'r'), true)",
            "lu.assertEquals(candidate({'w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'}, '5'), false)",
            "lu.assertEquals(candidate({'w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'}, 3), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "406",
        "title": "find_Parity",
        "text": "Write a luathon function to find whether the parity of a given number is odd.",
        "code": "local function find_Parity(x)\n\t// x is a number\n\t// return true if the number is odd, false otherwise\n\t//\n\t// x is a number\n\t// return true if the number is odd, false otherwise\n\t//\n\t// x is a number\n\t// return true if the number is odd, false otherwise\n\t//\n\t// x is a number\n\t// return true if the number is odd, false otherwise\n\t//\n\t// x is a number\n\t// return true if the number is odd, false otherwise\n\t//\n\t// x is a number\n\t// return true if the number is odd, false otherwise\n\t//\n\t// x is a number\n\t// return true if the number is odd, false otherwise\n\t//\n\t// x is a number\n\t// return true if the number is odd, false otherwise\n\t//\n\t// x is a number\n\t// return true if the number is odd, false otherwise\n\t//\n\t// x is a number\n\t// return true if the number is odd, false otherwise\n\t//\n\t// x is a number\n\t// return true if the number is odd, false otherwise\n\t//\n\t// x is a number\n\t// return true if the number is odd, false otherwise\n\t//\n\t// x is a number\n\t// return true if the number is odd, false otherwise\n\t//\n\t// x is a number\n\t// return true if the number is odd, false otherwise\n\t//\n\t// x is a number\n\t// return true if the number is odd, false otherwise\n\t//\n\t// x is a number\n\t// return true if the number is odd, false otherwise\n\t//\n\t// x is a number\n\t// return true if the number is odd, false otherwise\n\t//\n\t// x is a number\n\t// return true if the number is odd, false otherwise\n\t//\n\t// x is a number\n\t// return true if the number is odd, false otherwise\n\t//\n\t// x is a number\n\t// return true if the number is odd, false otherwise\n\t//\n\t// x is a number\n\t// return true if the number is odd, false otherwise\n\t//\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_Parity",
            "lu.assertEquals(candidate(12), false)",
            "lu.assertEquals(candidate(7), true)",
            "lu.assertEquals(candidate(10), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "407",
        "title": "rearrange_bigger",
        "text": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "code": "local function rearrange_bigger(n)\n    if n < 10\n        return n\n    else\n        return n + 1\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = rearrange_bigger",
            "lu.assertEquals(candidate(12), 21)",
            "lu.assertEquals(candidate(10), false)",
            "lu.assertEquals(candidate(102), 120)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "408",
        "title": "k_smallest_pairs",
        "text": "Write a function to find k number of smallest pairs which consist of one element from the first table and one element from the second table.",
        "code": "local function k_smallest_pairs(nums1, nums2, k)\n    local nums1_i = nums1.slice(0, k);\n    local nums2_i = nums2.slice(0, k);\n    local nums1_j = nums1.slice(k);\n    local nums2_j = nums2.slice(k);\n    local nums1_i_j = nums1_i.slice(0, k);\n    local nums2_i_j = nums2_i.slice(0, k);\n    local nums1_i_j_j = nums1_i_j.slice(0, k);\n    local nums2_i_j_j = nums2_i_j.slice(0, k);\n    local nums1_i_j_j_j = nums1_i_j_j.slice(0, k);\n    local nums2_i_j_j_j_j = nums2_i_j_j_j.slice(0, k);\n    local nums1_i_j_j_j_j_j = nums1_i_j_j_j_j.slice(0, k);\n    local nums2_i_j_j_j_j_j_j_j = nums2_i_j_j_j_j_j.slice(0, k);\n    local nums1_i_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_j_\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = k_smallest_pairs",
            "lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})",
            "lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})",
            "lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "409",
        "title": "min_product_tuple",
        "text": "Write a function to find the minimum product from the pairs of tables within a given table.",
        "code": "local function min_product_tuple(list1)\n    local list2 = list1.map(lambda x: x[0])\n    local list3 = list2.map(lambda x: x[1])\n    local list4 = list3.map(lambda x: x[2])\n    local list5 = list4.map(lambda x: x[3])\n    local list6 = list5.map(lambda x: x[4])\n    local list7 = list6.map(lambda x: x[5])\n    local list8 = list7.map(lambda x: x[6])\n    local list9 = list8.map(lambda x: x[7])\n    local list10 = list9.map(lambda x: x[8])\n    local list11 = list10.map(lambda x: x[9])\n    local list12 = list11.map(lambda x: x[10])\n    local list13 = list12.map(lambda x: x[11])\n    local list14 = list13.map(lambda x: x[12])\n    local list15 = list14.map(lambda x: x[13])\n    local list16 = list15.map(lambda x: x[14])\n    local list17 = list16.map(lambda x: x[15])\n    local list18 = list17.map(lambda x: x[16])\n    local list19 = list18.map(lambda x: x[17])\n    local list20 = list19.map(lambda x: x[18])\n    local list21 = list20.map(lambda x: x[19])\n    local list22 = list21.map(lambda x: x[20])\n    local list23 = list22.map(lambda x: x[21])\n    local list24 = list23.map(lambda x: x[22])\n    local list25 = list24.map(lambda x: x[23])\n    local list26 = list25.map(lambda x: x[24])\n    local list27 = list26.map(lambda x: x[25])\n    local list28 = list27.map(lambda\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = min_product_tuple",
            "lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)",
            "lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)",
            "lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "410",
        "title": "min_val",
        "text": "Write a function to find the minimum value in a given heterogeneous table.",
        "code": "local function min_val(listval)\n    local listval = listval\n    local minval = listval[0]\n    for (i in listval) {\n        if (i < minval) {\n            minval = i\n        }\n    }\n    return minval\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = min_val",
            "lu.assertEquals(candidate({'Python', 3, 2, 4, 5, 'version'}), 2)",
            "lu.assertEquals(candidate({'Python', 15, 20, 25}), 15)",
            "lu.assertEquals(candidate({'Python', 30, 20, 40, 50, 'version'}), 20)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "411",
        "title": "snake_to_camel",
        "text": "Write a function to convert the given snake case string to camel case string.",
        "code": "local function snake_to_camel(word)\n    {\n    return word.replace(/-([a-z])/g, function(match, $1)\n        {\n        return $1.toUpperCase();\n        });\n    }\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = snake_to_camel",
            "lu.assertEquals(candidate('android_tv'), 'AndroidTv')",
            "lu.assertEquals(candidate('google_pixel'), 'GooglePixel')",
            "lu.assertEquals(candidate('apple_watch'), 'AppleWatch')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "412",
        "title": "remove_odd",
        "text": "Write a luathon function to remove odd numbers from a given table.",
        "code": "local function remove_odd(l)\n    local table = l\n    local count = 0\n    for (let i = 0; i < table.length; i++) {\n        if (table[i] % 2 === 0) {\n            table.splice(i, 1)\n            count++\n        }\n    }\n    return count\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = remove_odd",
            "lu.assertEquals(candidate({1, 2, 3}), {2})",
            "lu.assertEquals(candidate({2, 4, 6}), {2, 4, 6})",
            "lu.assertEquals(candidate({10, 20, 3}), {10, 20})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "413",
        "title": "extract_nth_element",
        "text": "Write a function to extract the nth element from a given table of tables.",
        "code": "local function extract_nth_element(list1, n)\n    local list2 = list1.slice(0, n);\n    local list3 = list1.slice(n);\n    return list3.join('');\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = extract_nth_element",
            "lu.assertEquals(candidate({{'Greyson Fulton', 98, 99}, {'Brady Kent', 97, 96}, {'Wyatt Knott', 91, 94}, {'Beau Turnbull', 94, 98}}, 0), {'Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull'})",
            "lu.assertEquals(candidate({{'Greyson Fulton', 98, 99}, {'Brady Kent', 97, 96}, {'Wyatt Knott', 91, 94}, {'Beau Turnbull', 94, 98}}, 2), {99, 96, 94, 98})",
            "lu.assertEquals(candidate({{'Greyson Fulton', 98, 99}, {'Brady Kent', 97, 96}, {'Wyatt Knott', 91, 94}, {'Beau Turnbull', 94, 98}}, 1), {98, 97, 91, 94})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "414",
        "title": "overlapping",
        "text": "Write a luathon function to check whether any value in a sequence exists in a sequence or not.",
        "code": "local function overlapping(list1, list2)\n    local list1 = list1.filter(function(item) {\n        return item in list2\n    })\n    local list2 = list2.filter(function(item) {\n        return item in list1\n    })\n    return list1.length == list2.length\nend function\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = overlapping",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5}, {6, 7, 8, 9}), false)",
            "lu.assertEquals(candidate({1, 2, 3}, {4, 5, 6}), false)",
            "lu.assertEquals(candidate({1, 4, 5}, {1, 4, 5}), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "415",
        "title": "max_Product",
        "text": "Write a luathon function to find a pair with highest product from a given table of integers.",
        "code": "local function max_Product(arr)\n    local max_product = 0\n    for i in range(len(arr)):\n        max_product = max(max_product, arr[i])\n    return max_product\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = max_Product",
            "lu.assertEquals(candidate({1, 2, 3, 4, 7, 0, 8, 4}), {7, 8})",
            "lu.assertEquals(candidate({0, -1, -2, -4, 5, 0, -6}), {-4, -6})",
            "lu.assertEquals(candidate({1, 2, 3}), {2, 3})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "417",
        "title": "group_tuples",
        "text": "Write a function to find common first element in given table of tables.",
        "code": "local function group_tuples(Input)\n    local table = Input\n    local table_length = table.length\n    local table_first = table[0]\n    local table_last = table[table_length - 1]\n    local table_first_index = table_first.index\n    local table_last_index = table_last.index\n    local table_first_element = table_first[table_first_index]\n    local table_last_element = table_last[table_last_index]\n    local table_first_element_index = table_first_element.index\n    local table_last_element_index = table_last_element.index\n    local table_first_element_element = table_first_element[table_first_element_index]\n    local table_last_element_element = table_last_element[table_last_element_index]\n    local table_first_element_element_index = table_first_element_element.index\n    local table_last_element_element_index = table_last_element_element.index\n    local table_first_element_element_element = table_first_element_element[table_first_element_element_index]\n    local table_last_element_element_element_index = table_last_element_element_element.index\n    local table_first_element_element_element_index_first = table_first_element_element_element_index[table_first_element_element_index_first]\n    local table_last_element_element_element_index_first = table_last_element_element_element_index[table_last_element_element_index_first]\n    local table_first_element_element_element_index_last = table_first_element_element_element_index[table_first_element_element_index_last]\n    local table_last_element_element_element_index_last = table_last_element_element_element_index[table_last_element_element_index_last]\n    local table_first_element_element_element_index_first_first = table_first_element_element_element\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = group_tuples",
            "lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})",
            "lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})",
            "lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "418",
        "title": "Find_Max",
        "text": "Write a luathon function to find the element of a table having maximum length.",
        "code": "local function Find_Max(lst)\n    local max = 0\n    for (let i = 0; i < lst.length; i++)\n        if (lst[i] > max)\n            max = lst[i]\n    return max\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = Find_Max",
            "lu.assertEquals(candidate({{'A'}, {'A', 'B'}, {'A', 'B', 'C'}}), {'A', 'B', 'C'})",
            "lu.assertEquals(candidate({{1}, {1, 2}, {1, 2, 3}}), {1, 2, 3})",
            "lu.assertEquals(candidate({{1, 1}, {1, 2, 3}, {1, 5, 6, 1}}), {1, 5, 6, 1})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "419",
        "title": "round_and_sum",
        "text": "Write a function to round every number of a given table of numbers and print the total sum multiplied by the length of the table.",
        "code": "local function round_and_sum(list1)\n{\n    var sum = 0;\n    for (var i = 0; i < list1.length; i++) {\n        sum += list1[i];\n    }\n    return sum;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = round_and_sum",
            "lu.assertEquals(candidate({22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), 243)",
            "lu.assertEquals(candidate({5, 2, 9, 24.3, 29}), 345)",
            "lu.assertEquals(candidate({25.0, 56.7, 89.2}), 513)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "420",
        "title": "cube_Sum",
        "text": "Write a luathon function to find the cube sum of first n even natural numbers.",
        "code": "local function cube_Sum(n)\n    if n % 2 == 0\n        return n\n    else\n        return n + cube_Sum(n - 1)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = cube_Sum",
            "lu.assertEquals(candidate(2), 72)",
            "lu.assertEquals(candidate(3), 288)",
            "lu.assertEquals(candidate(4), 800)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "421",
        "title": "concatenate_tuple",
        "text": "Write a function to concatenate each element of table by the delimiter.",
        "code": "local function concatenate_tuple(test_tup)\n    test_tup = test_tup.map(lambda x: x.split(delimiter))\n    return concatenate_tuple(test_tup)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = concatenate_tuple",
            "lu.assertEquals(candidate({'ID', 'is', 4, 'UTS'}), 'ID-is-4-UTS')",
            "lu.assertEquals(candidate({'QWE', 'is', 4, 'RTY'}), 'QWE-is-4-RTY')",
            "lu.assertEquals(candidate({'ZEN', 'is', 4, 'OP'}), 'ZEN-is-4-OP')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "422",
        "title": "find_Average_Of_Cube",
        "text": "Write a luathon function to find the average of cubes of first n natural numbers.",
        "code": "local function find_Average_Of_Cube(n)\n\tlocal n = n\n\tlocal sum = 0\n\tfor i = 1 to n do\n\t\tsum += i * (i + 1) / 2\n\treturn sum / n\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_Average_Of_Cube",
            "lu.assertEquals(candidate(2), 4.5)",
            "lu.assertEquals(candidate(3), 12)",
            "lu.assertEquals(candidate(1), 1)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "424",
        "title": "extract_rear",
        "text": "Write a function to extract only the rear index element of each string in the given table.",
        "code": "local function extract_rear(test_tuple)\n    local table = test_tuple[0]\n    local index = test_tuple[1]\n    local result = []\n    for i in range(index, table.length):\n        result.append(table[i])\n    return result\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = extract_rear",
            "lu.assertEquals(candidate({'Mers', 'for', 'Vers'}), {'s', 'r', 's'})",
            "lu.assertEquals(candidate({'Avenge', 'for', 'People'}), {'e', 'r', 'e'})",
            "lu.assertEquals(candidate({'Gotta', 'get', 'go'}), {'a', 't', 'o'})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "425",
        "title": "count_element_in_list",
        "text": "Write a function to count the number of subtables containing a particular element.",
        "code": "local function count_element_in_list(list1, x)\n    local list2 = list1.filter(function(e) { return e.x == x; })\n    local count = list2.length\n    return count\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count_element_in_list",
            "lu.assertEquals(candidate({{1, 3}, {5, 7}, {1, 11}, {1, 15, 7}}, 1), 3)",
            "lu.assertEquals(candidate({{'A', 'B'}, {'A', 'C'}, {'A', 'D', 'E'}, {'B', 'C', 'D'}}, 'A'), 3)",
            "lu.assertEquals(candidate({{'A', 'B'}, {'A', 'C'}, {'A', 'D', 'E'}, {'B', 'C', 'D'}}, 'E'), 1)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "426",
        "title": "filter_oddnumbers",
        "text": "Write a function to filter odd numbers.",
        "code": "local function filter_oddnumbers(nums)\n    return nums % 2 == 0\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = filter_oddnumbers",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), {1, 3, 5, 7, 9})",
            "lu.assertEquals(candidate({10, 20, 45, 67, 84, 93}), {45, 67, 93})",
            "lu.assertEquals(candidate({5, 7, 9, 8, 6, 4, 3}), {5, 7, 9, 3})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "427",
        "title": "change_date_format",
        "text": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "code": "local function change_date_format(dt)\n{\n    var date = new Date(dt);\n    var date_format = date.getDate();\n    var date_format_str = date_format.toString();\n    var date_format_str_2 = date_format.toString().replace(/[^0-9]/g, '');\n    var date_format_str_3 = date_format_str.replace(/[^0-9]/g, '');\n    var date_format_str_4 = date_format_str_2.replace(/[^0-9]/g, '');\n    var date_format_str_5 = date_format_str_3.replace(/[^0-9]/g, '');\n    var date_format_str_6 = date_format_str_4.replace(/[^0-9]/g, '');\n    var date_format_str_7 = date_format_str_5.replace(/[^0-9]/g, '');\n    var date_format_str_8 = date_format_str_6.replace(/[^0-9]/g, '');\n    var date_format_str_9 = date_format_str_7.replace(/[^0-9]/g, '');\n    var date_format_str_10 = date_format_str_8.replace(/[^0-9]/g, '');\n    var date_format_str_11 = date_format_str_9.replace(/[^0-9]/g, '');\n    var date_format_str_12 = date_format_str_10.replace(/[^0-9]/g, '');\n    var date_format_str_13 = date_format_str_11.replace(/[^0-9]/g, '');\n    var date_format_str_14 = date_format_str_12.replace(/[^0-9]/g, '');\n    var date_format_str_\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = change_date_format",
            "lu.assertEquals(candidate('2026-01-02'), '02-01-2026')",
            "lu.assertEquals(candidate('2020-11-13'), '13-11-2020')",
            "lu.assertEquals(candidate('2021-04-26'), '26-04-2021')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "428",
        "title": "shell_sort",
        "text": "Write a function to sort the given table by using shell sort.",
        "code": "local function shell_sort(my_list)\n{\n    let sorted_list = [];\n    let temp = [];\n    let temp_index = 0;\n    let temp_index_end = 0;\n    let temp_index_start = 0;\n    let temp_index_end_end = 0;\n    let temp_index_start_end = 0;\n    let temp_index_start_end_end = 0;\n    let temp_index_start_end_end_end = 0;\n    let temp_index_start_end_end_end_end = 0;\n    let temp_index_start_end_end_end_end_end = 0;\n    let temp_index_start_end_end_end_end_end_end_end = 0;\n    let temp_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = shell_sort",
            "lu.assertEquals(candidate({12, 23, 4, 5, 3, 2, 12, 81, 56, 95}), {2, 3, 4, 5, 12, 12, 23, 56, 81, 95})",
            "lu.assertEquals(candidate({24, 22, 39, 34, 87, 73, 68}), {22, 24, 34, 39, 68, 73, 87})",
            "lu.assertEquals(candidate({32, 30, 16, 96, 82, 83, 74}), {16, 30, 32, 74, 82, 83, 96})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "429",
        "title": "and_tuples",
        "text": "Write a function to extract the elementwise and tables from the given two tables.",
        "code": "local function and_tuples(test_tup1, test_tup2)\n    local function extract_tables(t1, t2)\n        local function extract_tables_from_t1(t1)\n            local function extract_tables_from_t2(t2)\n                local function extract_tables_from_t1(t1)\n                    local function extract_tables_from_t2(t2)\n                        local function extract_tables_from_t1(t1)\n                            local function extract_tables_from_t2(t2)\n                                local function extract_tables_from_t1(t1)\n                                    local function extract_tables_from_t2(t2)\n                                        local function extract_tables_from_t1(t1)\n                                            local function extract_tables_from_t2(t2)\n                                                local function extract_tables_from_t1(t1)\n                                                    local function extract_tables_from_t2(t2)\n                                                        local function extract_tables_from_t1(t1)\n                                                            local function extract_tables_from_t2(t2)\n                                                                local function extract_tables_from_t1(t1)\n                                                                    local function extract_tables_from_t2(t2)\n                                                                        local function extract_tables_from_t1(t1)\n                                                                            local function extract_tables_from_t2(t2)\n                                                                                local function extract_tables_from_t1(t1)\n                                                                                    local function extract_tables_from_t2(t2)\n                                                                                        local function extract_tables_from_t1(t1)\n                                                                                            local function extract_tables_from_t2(t2)\n                                                                                            local function extract_tables_from_t1(t1)\n                                                                                           \n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = and_tuples",
            "lu.assertEquals(candidate({10, 4, 6, 9}, {5, 2, 3, 3}), {0, 0, 2, 1})",
            "lu.assertEquals(candidate({1, 2, 3, 4}, {5, 6, 7, 8}), {1, 2, 3, 0})",
            "lu.assertEquals(candidate({8, 9, 11, 12}, {7, 13, 14, 17}), {0, 9, 10, 0})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "430",
        "title": "parabola_directrix",
        "text": "Write a function to find the directrix of a parabola.",
        "code": "local function parabola_directrix(a, b, c)\n    return a * (b - c) + c;\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = parabola_directrix",
            "lu.assertEquals(candidate(5, 3, 2), -198)",
            "lu.assertEquals(candidate(9, 8, 4), -2336)",
            "lu.assertEquals(candidate(2, 4, 6), -130)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "431",
        "title": "common_element",
        "text": "Write a function that takes two tables and returns true if they have at least one common element.",
        "code": "local function common_element(list1, list2)\n    return list1.filter(function(element) {\n        return list2.indexOf(element) >= 0;\n    }).length > 0;\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = common_element",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5}, {5, 6, 7, 8, 9}), true)",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5}, {6, 7, 8, 9}), None)",
            "lu.assertEquals(candidate({'a', 'b', 'c'}, {'d', 'b', 'e'}), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "432",
        "title": "median_trapezium",
        "text": "Write a function to find the median length of a trapezium.",
        "code": "local function median_trapezium(base1, base2, height)\n    local function find_median(base1, base2, height)\n        local function find_median_length(base1, base2, height)\n            local function find_median_length_of_trapezium(base1, base2, height)\n                local function find_median_length_of_trapezium_of_trapezium(base1, base2, height)\n                    local function find_median_length_of_trapezium_of_trapezium_of_trapezium(base1, base2, height)\n                        local function find_median_length_of_trapezium_of_trapezium_of_trapezium(base1, base2, height)\n                            local function find_median_length_of_trapezium_of_trapezium_of_trapezium(base1, base2, height)\n                                local function find_median_length_of_trapezium_of_trapezium_of_trapezium(base1, base2, height)\n                                    local function find_median_length_of_trapezium_of_trapezium_of_trapezium(base1, base2, height)\n                                        local function find_median_length_of_trapezium_of_trapezium_of_trapezium(base1, base2, height)\n                                            local function find_median_length_of_trapezium_of_trapezium_of_trapezium(base1, base2, height)\n                                                local function find_median_length_of_trapezium_of_trapezium_of_trapezium(base1, base2, height)\n                                                    local function find_median_length_of_trapezium_of_trapezium_of_trapezium(base1, base2, height)\n                                                        local function find_median_length_of_trapezium_of_trapezium_of_trapezium(base1, base2,\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = median_trapezium",
            "lu.assertEquals(candidate(15, 25, 35), 20)",
            "lu.assertEquals(candidate(10, 20, 30), 15)",
            "lu.assertEquals(candidate(6, 9, 4), 7.5)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "433",
        "title": "check_greater",
        "text": "Write a function to check whether the entered number is greater than the elements of the given table.",
        "code": "local function check_greater(arr, number)\n    local result = true\n    for (let i = 0; i < arr.length; i++)\n        if (arr[i] > number)\n            result = false\n    return result\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = check_greater",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5}, 4), false)",
            "lu.assertEquals(candidate({2, 3, 4, 5, 6}, 8), true)",
            "lu.assertEquals(candidate({9, 7, 4, 8, 6, 1}, 11), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "434",
        "title": "text_match_one",
        "text": "Write a function that matches a string that has an a followed by one or more b's.",
        "code": "local function text_match_one(text)\n    // Returns a function that matches a string that has an a followed by one or more b's.\n    //\n    // text: The string to match.\n    //\n    // Returns a function that matches a string that has an a followed by one or more b's.\n    //\n    // Returns a function that matches a string that has an a followed by one or more b's.\n    //\n    // Returns a function that matches a string that has an a followed by one or more b's.\n    //\n    // Returns a function that matches a string that has an a followed by one or more b's.\n    //\n    // Returns a function that matches a string that has an a followed by one or more b's.\n    //\n    // Returns a function that matches a string that has an a followed by one or more b's.\n    //\n    // Returns a function that matches a string that has an a followed by one or more b's.\n    //\n    // Returns a function that matches a string that has an a followed by one or more b's.\n    //\n    // Returns a function that matches a string that has an a followed by one or more b's.\n    //\n    // Returns a function that matches a string that has an a followed by one or more b's.\n    //\n    // Returns a function that matches a string that has an a followed by one or more b's.\n    //\n    // Returns a function that matches a string that has an a followed by one or more b's.\n    //\n    // Returns a function that matches a string that has an a followed by one or more b's.\n    //\n    // Returns a function that matches a string that has an a followed by one or more b's.\n    //\n    // Returns a function that matches a string that has an a followed by one or more b's.\n    //\n    // Returns a function that matches a string that has an a followed by one or more b's.\n    //\n    // Returns a function that matches a string that has an a followed by one or more b's.\n    //\n    // Returns a function that matches a string that has an a followed by one or\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = text_match_one",
            "lu.assertEquals(candidate('ac'), false)",
            "lu.assertEquals(candidate('dc'), false)",
            "lu.assertEquals(candidate('abba'), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "435",
        "title": "last_Digit",
        "text": "Write a luathon function to find the last digit of a given number.",
        "code": "local function last_Digit(n)\n    return n.toString(10)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = last_Digit",
            "lu.assertEquals(candidate(123), 3)",
            "lu.assertEquals(candidate(25), 5)",
            "lu.assertEquals(candidate(30), 0)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "436",
        "title": "neg_nos",
        "text": "Write a luathon function to return the negative numbers in a table.",
        "code": "local function neg_nos(list1)\n{\n    var list2 = list1.map(function(x) { return -x; });\n    return list2.map(function(x) { return x; });\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = neg_nos",
            "lu.assertEquals(candidate({-1, 4, 5, -6}), {-1, -6})",
            "lu.assertEquals(candidate({-1, -2, 3, 4}), {-1, -2})",
            "lu.assertEquals(candidate({-7, -6, 8, 9}), {-7, -6})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "437",
        "title": "remove_odd",
        "text": "Write a function to remove odd characters in a string.",
        "code": "local function remove_odd(str1)\n    local str2 = str1.split('')\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n    str2.pop()\n\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = remove_odd",
            "lu.assertEquals(candidate('python'), 'yhn')",
            "lu.assertEquals(candidate('program'), 'rga')",
            "lu.assertEquals(candidate('language'), 'agae')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "438",
        "title": "count_bidirectional",
        "text": "Write a function to count bidirectional table pairs.",
        "code": "local function count_bidirectional(test_list)\n{\n    var count = 0;\n    for (var i = 0; i < test_list.length; i++)\n    {\n        var test = test_list[i];\n        if (test.bidirectional)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count_bidirectional",
            "lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)",
            "lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)",
            "lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "439",
        "title": "multiple_to_single",
        "text": "Write a function to join a table of multiple integers into a single integer.",
        "code": "local function multiple_to_single(L)\n    local i = 0\n    for i in L\n    return i\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = multiple_to_single",
            "lu.assertEquals(candidate({11, 33, 50}), 113350)",
            "lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)",
            "lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "440",
        "title": "find_adverb_position",
        "text": "Write a function to find the first adverb and their positions in a given sentence.",
        "code": "local function find_adverb_position(text)\n    local sentence = text.split(\" \")\n    local adverb = sentence[0]\n    local position = sentence[1]\n    return adverb, position\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_adverb_position",
            "lu.assertEquals(candidate('clearly!! we can see the sky'), {0, 7, 'clearly'})",
            "lu.assertEquals(candidate('seriously!! there are many roses'), {0, 9, 'seriously'})",
            "lu.assertEquals(candidate('unfortunately!! sita is going to home'), {0, 13, 'unfortunately'})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "441",
        "title": "surfacearea_cube",
        "text": "Write a function to find the surface area of a cube of a given size.",
        "code": "local function surfacearea_cube(l)\n    local l = l\n    local a = l.area\n    local b = l.area\n    local c = l.area\n    local d = l.area\n    local e = l.area\n    local f = l.area\n    local g = l.area\n    local h = l.area\n    local i = l.area\n    local j = l.area\n    local k = l.area\n    local l = l.area\n    local m = l.area\n    local n = l.area\n    local o = l.area\n    local p = l.area\n    local q = l.area\n    local r = l.area\n    local s = l.area\n    local t = l.area\n    local u = l.area\n    local v = l.area\n    local w = l.area\n    local x = l.area\n    local y = l.area\n    local z = l.area\n    local a = l.area\n    local b = l.area\n    local c = l.area\n    local d = l.area\n    local e = l.area\n    local f = l.area\n    local g = l.area\n    local h = l.area\n    local i = l.area\n    local j = l.area\n    local k = l.area\n    local l = l.area\n    local m = l.area\n    local n = l.area\n    local o = l.area\n    local p = l.area\n    local q = l.area\n    local r = l.area\n    local s = l.area\n    local t = l.area\n    local u = l.area\n    local v = l.area\n    local w = l.area\n    local x = l.area\n    local y = l.area\n    local z = l.area\n    local a = l.area\n    local b = l.area\n    local c = l.area\n    local d = l.area\n    local e = l.area\n    local f = l.area\n    local g = l.area\n    local h = l.\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = surfacearea_cube",
            "lu.assertEquals(candidate(5), 150)",
            "lu.assertEquals(candidate(3), 54)",
            "lu.assertEquals(candidate(10), 600)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "442",
        "title": "positive_count",
        "text": "Write a function to find the ration of positive numbers in a table of integers.",
        "code": "local function positive_count(nums)\n    return nums.reduce((x, y) => x + y, 0)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = positive_count",
            "lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)",
            "lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)",
            "lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "443",
        "title": "largest_neg",
        "text": "Write a luathon function to find the largest negative number from the given table.",
        "code": "local function largest_neg(list1)\n    local list2 = list1.map(function(x) { return x - 1 })\n    local list3 = list2.map(function(x) { return x - 1 })\n    local list4 = list3.map(function(x) { return x - 1 })\n    local list5 = list4.map(function(x) { return x - 1 })\n    local list6 = list5.map(function(x) { return x - 1 })\n    local list7 = list6.map(function(x) { return x - 1 })\n    local list8 = list7.map(function(x) { return x - 1 })\n    local list9 = list8.map(function(x) { return x - 1 })\n    local list10 = list9.map(function(x) { return x - 1 })\n    local list11 = list10.map(function(x) { return x - 1 })\n    local list12 = list11.map(function(x) { return x - 1 })\n    local list13 = list12.map(function(x) { return x - 1 })\n    local list14 = list13.map(function(x) { return x - 1 })\n    local list15 = list14.map(function(x) { return x - 1 })\n    local list16 = list15.map(function(x) { return x - 1 })\n    local list17 = list16.map(function(x) { return x - 1 })\n    local list18 = list17.map(function(x) { return x - 1 })\n    local list19 = list18.map(function(x) { return x - 1 })\n    local list20 = list19.map(function(x) { return x - 1 })\n    local list21 = list20.map(function(x) { return x - 1 })\n    local list22 = list21.map(function(x) { return x - 1 })\n    local list23 = list22.map(function(x) { return x - 1 })\n    local list24 = list23.map(function(x) { return x - 1 })\n\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = largest_neg",
            "lu.assertEquals(candidate({1, 2, 3, -4, -6}), -6)",
            "lu.assertEquals(candidate({1, 2, 3, -8, -9}), -9)",
            "lu.assertEquals(candidate({1, 2, 3, 4, -1}), -1)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "444",
        "title": "trim_tuple",
        "text": "Write a function to trim each table by k in the given tables.",
        "code": "local function trim_tuple(test_list, K)\n    test_list = test_list.map(lambda x: x.split(',')[0])\n    test_list = test_list.map(lambda x: x.split(',')[1])\n    test_list = test_list.map(lambda x: x.split(',')[2])\n    test_list = test_list.map(lambda x: x.split(',')[3])\n    test_list = test_list.map(lambda x: x.split(',')[4])\n    test_list = test_list.map(lambda x: x.split(',')[5])\n    test_list = test_list.map(lambda x: x.split(',')[6])\n    test_list = test_list.map(lambda x: x.split(',')[7])\n    test_list = test_list.map(lambda x: x.split(',')[8])\n    test_list = test_list.map(lambda x: x.split(',')[9])\n    test_list = test_list.map(lambda x: x.split(',')[10])\n    test_list = test_list.map(lambda x: x.split(',')[11])\n    test_list = test_list.map(lambda x: x.split(',')[12])\n    test_list = test_list.map(lambda x: x.split(',')[13])\n    test_list = test_list.map(lambda x: x.split(',')[14])\n    test_list = test_list.map(lambda x: x.split(',')[15])\n    test_list = test_list.map(lambda x: x.split(',')[16])\n    test_list = test_list.map(lambda x: x.split(',')[17])\n    test_list = test_list.map(lambda x: x.split(',')[18])\n    test_list = test_list.map(lambda x: x.split(',')[19])\n    test\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = trim_tuple",
            "lu.assertEquals(candidate({{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 2), {{2}, {9}, {2}, {2}})",
            "lu.assertEquals(candidate({{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 1), {{3, 2, 1}, {4, 9, 2}, {1, 2, 3}, {8, 2, 1}})",
            "lu.assertEquals(candidate({{7, 8, 4, 9}, {11, 8, 12, 4}, {4, 1, 7, 8}, {3, 6, 9, 7}}, 1), {{8, 4}, {8, 12}, {1, 7}, {6, 9}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "445",
        "title": "index_multiplication",
        "text": "Write a function to perform index wise multiplication of table elements in the given two tables.",
        "code": "local function index_multiplication(test_tup1, test_tup2)\n    local table1 = test_tup1[0];\n    local table2 = test_tup2[0];\n    local result = 0;\n    for (var i = 0; i < table1.length; i++) {\n        result += table1[i] * table2[i];\n    }\n    return result;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = index_multiplication",
            "lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{6, 21}, {12, 45}, {2, 9}, {7, 30}})",
            "lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{14, 32}, {20, 60}, {6, 20}, {16, 44}})",
            "lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{24, 45}, {30, 77}, {12, 33}, {27, 60}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "446",
        "title": "count_Occurrence",
        "text": "Write a luathon function to count the occurence of all elements of table in a table.",
        "code": "local function count_Occurrence(tup, lst)\n    local count = 0\n    for (let i = 0; i < tup.length; i++) {\n        if (tup[i] in lst) {\n            count += 1\n        }\n    }\n    return count\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count_Occurrence",
            "lu.assertEquals(candidate({'a', 'a', 'c', 'b', 'd'}, {'a', 'b'}), 3)",
            "lu.assertEquals(candidate({1, 2, 3, 1, 4, 6, 7, 1, 4}, {1, 4, 7}), 6)",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {1, 2}), 2)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "447",
        "title": "cube_nums",
        "text": "Write a function to find cubes of individual elements in a table.",
        "code": "local function cube_nums(nums)\n    return nums.map(function(num) { return num.toString(); });\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = cube_nums",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), {1, 8, 27, 64, 125, 216, 343, 512, 729, 1000})",
            "lu.assertEquals(candidate({10, 20, 30}), {1000, 8000, 27000})",
            "lu.assertEquals(candidate({12, 15}), {1728, 3375})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "448",
        "title": "cal_sum",
        "text": "Write a function to calculate the sum of perrin numbers.",
        "code": "local function cal_sum(n)\n    local sum = 0\n    for i in range(n)\n        sum += i\n    return sum\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = cal_sum",
            "lu.assertEquals(candidate(9), 49)",
            "lu.assertEquals(candidate(10), 66)",
            "lu.assertEquals(candidate(11), 88)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "450",
        "title": "extract_string",
        "text": "Write a function to extract specified size of strings from a given table of string values.",
        "code": "local function extract_string(str, l)\n    local l = l\n    for (let i = 0; i < l; i++)\n        l = str.indexOf(l, i)\n    return l\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = extract_string",
            "lu.assertEquals(candidate({'Python', 'list', 'exercises', 'practice', 'solution'}, 8), {'practice', 'solution'})",
            "lu.assertEquals(candidate({'Python', 'list', 'exercises', 'practice', 'solution'}, 6), {'Python'})",
            "lu.assertEquals(candidate({'Python', 'list', 'exercises', 'practice', 'solution'}, 9), {'exercises'})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "451",
        "title": "remove_whitespaces",
        "text": "Write a function to remove all whitespaces from the given string.",
        "code": "local function remove_whitespaces(text1)\n    local text2 = text1.replace(/\\s+/g, '');\n    return text2;\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = remove_whitespaces",
            "lu.assertEquals(candidate(' Google    Flutter '), 'GoogleFlutter')",
            "lu.assertEquals(candidate(' Google    Dart '), 'GoogleDart')",
            "lu.assertEquals(candidate(' iOS    Swift '), 'iOSSwift')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "452",
        "title": "loss_amount",
        "text": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
        "code": "local function loss_amount(actual_cost, sale_amount)\n    return (actual_cost * sale_amount) / (sale_amount + 1)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = loss_amount",
            "lu.assertEquals(candidate(1500, 1200), 0)",
            "lu.assertEquals(candidate(100, 200), 100)",
            "lu.assertEquals(candidate(2000, 5000), 3000)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "453",
        "title": "sumofFactors",
        "text": "Write a luathon function to find the sum of even factors of a number.",
        "code": "local function sumofFactors(n)\n    return (n * (n - 1)) / 2\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sumofFactors",
            "lu.assertEquals(candidate(18), 26)",
            "lu.assertEquals(candidate(30), 48)",
            "lu.assertEquals(candidate(6), 8)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "454",
        "title": "text_match_wordz",
        "text": "Write a function that matches a word containing 'z'.",
        "code": "local function text_match_wordz(text)\n    return text.match(/[a-z]/g)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = text_match_wordz",
            "lu.assertEquals(candidate('pythonz.'), true)",
            "lu.assertEquals(candidate('xyz.'), true)",
            "lu.assertEquals(candidate('  lang  .'), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "455",
        "title": "check_monthnumb_number",
        "text": "Write a function to check whether the given month number contains 31 days or not.",
        "code": "local function check_monthnumb_number(monthnum2)\n{\n    let monthnum = monthnum2;\n    let monthnum_number = 0;\n    let monthnum_number_is_31 = false;\n    let monthnum_number_is_31_or_less = false;\n    let monthnum_number_is_31_or_less_or_greater = false;\n    let monthnum_number_is_31_or_greater_or_less = false;\n    let monthnum_number_is_31_or_greater_or_less_or_greater = false;\n    let monthnum_number_is_31_or_greater_or_less_or_greater_or_less = false;\n    let monthnum_number_is_31_or_greater_or_less_or_greater_or_less_or_greater = false;\n    let monthnum_number_is_31_or_greater_or_less_or_greater_or_less_or_greater_or_less = false;\n    let monthnum_number_is_31_or_greater_or_less_or_greater_or_less_or_greater_or_less_or_greater_or_less = false;\n    let monthnum_number_is_31_or_greater_or_less_or_greater_or_less_or_greater_or_less_or_greater_or_less_or_greater_or_less_or_greater_or_less_or_greater_or_less_or_greater_or_less_or_greater_or_less_or_greater_or_less_or_greater_or_less_or_greater_or_less_or_greater_or_less_or_greater_or_less_or_greater_or_less_or_greater_or_less_or_greater_or_less_or_greater_or_less_or_greater_or_less_or_greater_or_less_\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = check_monthnumb_number",
            "lu.assertEquals(candidate(5), true)",
            "lu.assertEquals(candidate(2), false)",
            "lu.assertEquals(candidate(6), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "456",
        "title": "reverse_string_list",
        "text": "Write a function to reverse each string in a given table of string values.",
        "code": "local function reverse_string_list(stringlist)\n    local stringlist = stringlist\n    local stringlist_length = len(stringlist)\n    local stringlist_index = 0\n    local stringlist_reverse = []\n    for index in range(stringlist_length):\n        stringlist_reverse.push(stringlist[index])\n        stringlist_index = index\n    return stringlist_reverse\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = reverse_string_list",
            "lu.assertEquals(candidate({'Red', 'Green', 'Blue', 'White', 'Black'}), {'deR', 'neerG', 'eulB', 'etihW', 'kcalB'})",
            "lu.assertEquals(candidate({'john', 'amal', 'joel', 'george'}), {'nhoj', 'lama', 'leoj', 'egroeg'})",
            "lu.assertEquals(candidate({'jack', 'john', 'mary'}), {'kcaj', 'nhoj', 'yram'})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "457",
        "title": "Find_Min",
        "text": "Write a luathon function to find the subtable having minimum length.",
        "code": "local function Find_Min(lst)\n    local l = lst.length\n    local min = lst[0]\n    for (let i = 1; i < l; i++) {\n        if (lst[i] < min) {\n            min = lst[i]\n        }\n    }\n    return min\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = Find_Min",
            "lu.assertEquals(candidate({{1}, {1, 2}, {1, 2, 3}}), {1})",
            "lu.assertEquals(candidate({{1, 1}, {1, 1, 1}, {1, 2, 7, 8}}), {1, 1})",
            "lu.assertEquals(candidate({{'x'}, {'x', 'y'}, {'x', 'y', 'z'}}), {'x'})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "458",
        "title": "rectangle_area",
        "text": "Write a function to find the area of a rectangle.",
        "code": "local function rectangle_area(l, b)\n    local area = {};\n    area.left = l;\n    area.right = b;\n    area.top = b;\n    area.bottom = l;\n    return area;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = rectangle_area",
            "lu.assertEquals(candidate(10, 20), 200)",
            "lu.assertEquals(candidate(10, 5), 50)",
            "lu.assertEquals(candidate(4, 2), 8)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "459",
        "title": "remove_uppercase",
        "text": "Write a function to remove uppercase substrings from a given string.",
        "code": "local function remove_uppercase(str1)\n    local str2 = str1.toLowerCase();\n    return str2;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = remove_uppercase",
            "lu.assertEquals(candidate('cAstyoUrFavoRitETVshoWs'), 'cstyoravoitshos')",
            "lu.assertEquals(candidate('wAtchTheinTernEtrAdIo'), 'wtchheinerntrdo')",
            "lu.assertEquals(candidate('VoicESeaRchAndreComMendaTionS'), 'oiceachndreomendaion')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "460",
        "title": "Extract",
        "text": "Write a luathon function to get the first element of each subtable.",
        "code": "local function Extract(lst)\n{\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i1 = 0;\n    var i2 = 0;\n    var i3 = 0;\n    var i4 = 0;\n    var i5 = 0;\n    var i6 = 0;\n    var i7 = 0;\n    var i8 = 0;\n    var i9 = 0;\n    var i10 = 0;\n    var i11 = 0;\n    var i12 = 0;\n    var i13 = 0;\n    var i14 = 0;\n    var i15 = 0;\n    var i16 = 0;\n    var i17 = 0;\n    var i18 = 0;\n    var i19 = 0;\n    var i20 = 0;\n    var i21 = 0;\n    var i22 = 0;\n    var i23 = 0;\n    var i24 = 0;\n    var i25 = 0;\n    var i26 = 0;\n    var i27 = 0;\n    var i28 = 0;\n    var i29 = 0;\n    var i30 = 0;\n    var i31 = 0;\n    var i32 = 0;\n    var i33 = 0;\n    var i34 = 0;\n    var i35 = 0;\n    var i36 = 0;\n    var i37 = 0;\n    var i38 = 0\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = Extract",
            "lu.assertEquals(candidate({{1, 2}, {3, 4, 5}, {6, 7, 8, 9}}), {1, 3, 6})",
            "lu.assertEquals(candidate({{1, 2, 3}, {4, 5}}), {1, 4})",
            "lu.assertEquals(candidate({{9, 8, 1}, {1, 2}}), {9, 1})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "461",
        "title": "upper_ctr",
        "text": "Write a luathon function to count the upper case characters in a given string.",
        "code": "local function upper_ctr(str)\n    return str.toUpperCase()\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = upper_ctr",
            "lu.assertEquals(candidate('PYthon'), 1)",
            "lu.assertEquals(candidate('BigData'), 1)",
            "lu.assertEquals(candidate('program'), 0)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "462",
        "title": "combinations_list",
        "text": "Write a function to find all possible combinations of the elements of a given table.",
        "code": "local function combinations_list(list1)\n    local list2 = list1.map(lambda x: x.toLowerCase())\n    local list3 = list2.map(lambda x: x.toLowerCase())\n    local list4 = list3.map(lambda x: x.toLowerCase())\n    local list5 = list4.map(lambda x: x.toLowerCase())\n    local list6 = list5.map(lambda x: x.toLowerCase())\n    local list7 = list6.map(lambda x: x.toLowerCase())\n    local list8 = list7.map(lambda x: x.toLowerCase())\n    local list9 = list8.map(lambda x: x.toLowerCase())\n    local list10 = list9.map(lambda x: x.toLowerCase())\n    local list11 = list10.map(lambda x: x.toLowerCase())\n    local list12 = list11.map(lambda x: x.toLowerCase())\n    local list13 = list12.map(lambda x: x.toLowerCase())\n    local list14 = list13.map(lambda x: x.toLowerCase())\n    local list15 = list14.map(lambda x: x.toLowerCase())\n    local list16 = list15.map(lambda x: x.toLowerCase())\n    local list17 = list16.map(lambda x: x.toLowerCase())\n    local list18 = list17.map(lambda x: x.toLowerCase())\n    local list19 = list18.map(lambda x: x.toLowerCase())\n    local list20 = list19.map(lambda x: x.toLowerCase())\n    local list21 = list20.map(lambda x: x.toLowerCase())\n    local list22 = list21.map(lambda x: x.toLowerCase())\n    local list23 = list22.map(lambda x: x.toLowerCase())\n    local list24 = list23.map(lambda x: x.toLowerCase())\n    local list25 = list24.map(lambda x: x.toLowerCase())\n    local list26\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = combinations_list",
            "lu.assertEquals(candidate({'orange', 'red', 'green', 'blue'}), {{}, {'orange'}, {'red'}, {'red', 'orange'}, {'green'}, {'green', 'orange'}, {'green', 'red'}, {'green', 'red', 'orange'}, {'blue'}, {'blue', 'orange'}, {'blue', 'red'}, {'blue', 'red', 'orange'}, {'blue', 'green'}, {'blue', 'green', 'orange'}, {'blue', 'green', 'red'}, {'blue', 'green', 'red', 'orange'}})",
            "lu.assertEquals(candidate({'red', 'green', 'blue', 'white', 'black', 'orange'}), {{}, {'red'}, {'green'}, {'green', 'red'}, {'blue'}, {'blue', 'red'}, {'blue', 'green'}, {'blue', 'green', 'red'}, {'white'}, {'white', 'red'}, {'white', 'green'}, {'white', 'green', 'red'}, {'white', 'blue'}, {'white', 'blue', 'red'}, {'white', 'blue', 'green'}, {'white', 'blue', 'green', 'red'}, {'black'}, {'black', 'red'}, {'black', 'green'}, {'black', 'green', 'red'}, {'black', 'blue'}, {'black', 'blue', 'red'}, {'black', 'blue', 'green'}, {'black', 'blue', 'green', 'red'}, {'black', 'white'}, {'black', 'white', 'red'}, {'black', 'white', 'green'}, {'black', 'white', 'green', 'red'}, {'black', 'white', 'blue'}, {'black', 'white', 'blue', 'red'}, {'black', 'white', 'blue', 'green'}, {'black', 'white', 'blue', 'green', 'red'}, {'orange'}, {'orange', 'red'}, {'orange', 'green'}, {'orange', 'green', 'red'}, {'orange', 'blue'}, {'orange', 'blue', 'red'}, {'orange', 'blue', 'green'}, {'orange', 'blue', 'green', 'red'}, {'orange', 'white'}, {'orange', 'white', 'red'}, {'orange', 'white', 'green'}, {'orange', 'white', 'green', 'red'}, {'orange', 'white', 'blue'}, {'orange', 'white', 'blue', 'red'}, {'orange', 'white', 'blue', 'green'}, {'orange', 'white', 'blue', 'green', 'red'}, {'orange', 'black'}, {'orange', 'black', 'red'}, {'orange', 'black', 'green'}, {'orange', 'black', 'green', 'red'}, {'orange', 'black', 'blue'}, {'orange', 'black', 'blue', 'red'}, {'orange', 'black', 'blue', 'green'}, {'orange', 'black', 'blue', 'green', 'red'}, {'orange', 'black', 'white'}, {'orange', 'black', 'white', 'red'}, {'orange', 'black', 'white', 'green'}, {'orange', 'black', 'white', 'green', 'red'}, {'orange', 'black', 'white', 'blue'}, {'orange', 'black', 'white', 'blue', 'red'}, {'orange', 'black', 'white', 'blue', 'green'}, {'orange', 'black', 'white', 'blue', 'green', 'red'}})",
            "lu.assertEquals(candidate({'red', 'green', 'black', 'orange'}), {{}, {'red'}, {'green'}, {'green', 'red'}, {'black'}, {'black', 'red'}, {'black', 'green'}, {'black', 'green', 'red'}, {'orange'}, {'orange', 'red'}, {'orange', 'green'}, {'orange', 'green', 'red'}, {'orange', 'black'}, {'orange', 'black', 'red'}, {'orange', 'black', 'green'}, {'orange', 'black', 'green', 'red'}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "463",
        "title": "max_subarray_product",
        "text": "Write a function to find the maximum product subtable of the given table.",
        "code": "local function max_subarray_product(arr)\n    local max_product = 0;\n    for (let i = 0; i < arr.length; i++) {\n        max_product = Math.max(max_product, arr[i]);\n    }\n    return max_product;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = max_subarray_product",
            "lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)",
            "lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)",
            "lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "464",
        "title": "check_value",
        "text": "Write a function to check if all values are same in a table.",
        "code": "local function check_value(dict, n)\n    if (dict.hasOwnProperty(n)) {\n        return dict[n];\n    }\n    return undefined;\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = check_value",
            "lu.assertEquals(candidate({['Cierra Vega'] = 12, ['Alden Cantrell'] = 12, ['Kierra Gentry'] = 12, ['Pierre Cox'] = 12}, 10), false)",
            "lu.assertEquals(candidate({['Cierra Vega'] = 12, ['Alden Cantrell'] = 12, ['Kierra Gentry'] = 12, ['Pierre Cox'] = 12}, 12), true)",
            "lu.assertEquals(candidate({['Cierra Vega'] = 12, ['Alden Cantrell'] = 12, ['Kierra Gentry'] = 12, ['Pierre Cox'] = 12}, 5), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "465",
        "title": "drop_empty",
        "text": "Write a function to drop empty items from a given table.",
        "code": "local function drop_empty(dict1)\n    local function drop_empty_from_table(table)\n        local function drop_empty_from_table_with_key(key)\n            local function drop_empty_from_table_with_key_with_key(key, value)\n                local function drop_empty_from_table_with_key_with_key_with_key(key, value, value)\n                    local function drop_empty_from_table_with_key_with_key_with_key(key, value, value, value)\n                        local function drop_empty_from_table_with_key_with_key_with_key(key, value, value, value, value)\n                            local function drop_empty_from_table_with_key_with_key_with_key(key, value, value, value, value, value)\n                                local function drop_empty_from_table_with_key_with_key_with_key(key, value, value, value, value, value)\n                                   local function drop_empty_from_table_with_key_with_key_with_key(key, value, value, value, value, value)\n                                     local function drop_empty_from_table_with_key_with_key_with_key(key, value, value, value, value, value)\n                                         local function drop_empty_from_table_with_key_with_key_with_key(key, value, value, value, value, value)\n                                             local function drop_empty_from_table_with_key_with_key_with_key(key, value, value, value, value, value)\n                                                 local function drop_empty_from_table_with_key_with_key_with_key(key, value, value, value, value, value)\n                                                    local function drop_empty_from_table_with_key_with_key_with_key(key, value, value, value, value, value)\n                                                         local function drop_empty_from_table_with_key_with_key_with_key(key, value\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = drop_empty",
            "lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})",
            "lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})",
            "lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "468",
        "title": "max_product",
        "text": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that table.",
        "code": "local function max_product(arr)\n    local max_product = 0\n    for i in range(len(arr)):\n        max_product = max(max_product, arr[i])\n    return max_product\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = max_product",
            "lu.assertEquals(candidate({3, 100, 4, 5, 150, 6}), 3000)",
            "lu.assertEquals(candidate({4, 42, 55, 68, 80}), 50265600)",
            "lu.assertEquals(candidate({10, 22, 9, 33, 21, 50, 41, 60}), 2460)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "470",
        "title": "add_pairwise",
        "text": "Write a function to find the pairwise addition of the neighboring elements of the given table.",
        "code": "local function add_pairwise(test_tup)\n    local table = test_tup[0]\n    local test_tup = test_tup[1]\n    local table_pair = table + test_tup[0]\n    local table_pair_pair = table_pair + table_pair\n    return table_pair_pair\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = add_pairwise",
            "lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})",
            "lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})",
            "lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "471",
        "title": "find_remainder",
        "text": "Write a luathon function to find the product of the table multiplication modulo n.",
        "code": "local function find_remainder(arr, n)\n    return arr[n] % n\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_remainder",
            "lu.assertEquals(candidate({100, 10, 5, 25, 35, 14}, 11), 9)",
            "lu.assertEquals(candidate({1, 1, 1}, 1), 0)",
            "lu.assertEquals(candidate({1, 2, 1}, 2), 0)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "472",
        "title": "check_Consecutive",
        "text": "Write a luathon function to check whether the given table contains consecutive numbers or not.",
        "code": "local function check_Consecutive(l)\n\tlocal l = l\n\tlocal count = 0\n\tfor l in l\n\t\tif l % 2 == 0\n\t\t\tcount += 1\n\treturn count\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = check_Consecutive",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)",
            "lu.assertEquals(candidate({1, 2, 3, 5, 6}), false)",
            "lu.assertEquals(candidate({1, 2, 1}), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "474",
        "title": "replace_char",
        "text": "Write a function to replace characters in a string.",
        "code": "local function replace_char(str1, ch, newch)\n    // str1: The string to replace.\n    // ch: The character to replace.\n    // newch: The character to replace with.\n{\n    // The string is already in lower case.\n    str1 = str1.toLowerCase();\n    // The string is already in upper case.\n    str1 = str1.toUpperCase();\n    // The string is already in lower case.\n    str1 = str1.replace(ch, newch);\n    // The string is already in upper case.\n    str1 = str1.replace(newch, ch);\n    // The string is already in lower case.\n    str1 = str1.replace(ch, newch);\n    // The string is already in upper case.\n    str1 = str1.replace(newch, ch);\n    // The string is already in lower case.\n    str1 = str1.replace(ch, newch);\n    // The string is already in upper case.\n    str1 = str1.replace(newch, ch);\n    // The string is already in lower case.\n    str1 = str1.replace(ch, newch);\n    // The string is already in upper case.\n    str1 = str1.replace(newch, ch);\n    // The string is already in lower case.\n    str1 = str1.replace(ch, newch);\n    // The string is already in upper case.\n    str1 = str1.replace(newch, ch);\n    // The string is already in lower case.\n    str1 = str1.replace(newch, newch);\n    // The string is already in upper case.\n    str1 = str1.replace(newch, newch);\n    // The string is already in lower case.\n    str1 = str1.replace(newch, newch);\n    // The string is already in upper case.\n    str1 = str1.replace(newch, newch);\n    // The string is already in lower case.\n    str1 = str1.replace(newch, newch);\n    // The string is already in upper\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = replace_char",
            "lu.assertEquals(candidate('polygon', 'y', 'l'), 'pollgon')",
            "lu.assertEquals(candidate('character', 'c', 'a'), 'aharaater')",
            "lu.assertEquals(candidate('python', 'l', 'a'), 'python')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "475",
        "title": "sort_counter",
        "text": "Write a function to sort a table by value.",
        "code": "local function sort_counter(dict1)\n    local counter = 0\n    for key in dict1:\n        counter += 1\n        if counter > 1:\n            dict1[key] = dict1[key] + 1\n        else:\n            dict1[key] = 0\n    return dict1\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sort_counter",
            "lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})",
            "lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})",
            "lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "476",
        "title": "big_sum",
        "text": "Write a luathon function to find the sum of the largest and smallest value in a given table.",
        "code": "local function big_sum(nums)\n    local sum = 0\n    for i in range(nums.length)\n        sum += nums[i]\n    return sum\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = big_sum",
            "lu.assertEquals(candidate({1, 2, 3}), 4)",
            "lu.assertEquals(candidate({-1, 2, 3, 4}), 3)",
            "lu.assertEquals(candidate({2, 3, 6}), 8)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "477",
        "title": "is_lower",
        "text": "Write a luathon function to convert the given string to lower case.",
        "code": "local function is_lower(string)\n{\n    return string.toLowerCase().replace(/[^a-z]/g, '');\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = is_lower",
            "lu.assertEquals(candidate('InValid'), 'invalid')",
            "lu.assertEquals(candidate('TruE'), 'true')",
            "lu.assertEquals(candidate('SenTenCE'), 'sentence')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "478",
        "title": "remove_lowercase",
        "text": "Write a function to remove lowercase substrings from a given string.",
        "code": "local function remove_lowercase(str1)\n    local str2 = str1.toLowerCase();\n    return str2;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = remove_lowercase",
            "lu.assertEquals(candidate('PYTHon'), 'PYTH')",
            "lu.assertEquals(candidate('FInD'), 'FID')",
            "lu.assertEquals(candidate('STRinG'), 'STRG')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "479",
        "title": "first_Digit",
        "text": "Write a luathon function to find the first digit of a given number.",
        "code": "local function first_Digit(n)\n    return n.toString(10)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = first_Digit",
            "lu.assertEquals(candidate(123), 1)",
            "lu.assertEquals(candidate(456), 4)",
            "lu.assertEquals(candidate(12), 1)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "4",
        "title": "heap_queue_largest",
        "text": "Write a function to find the n largest integers from a given table of numbers, returned in descending order.",
        "code": "local function heap_queue_largest(nums, n)\n    if n == 0:\n        return []\n    if n == 1:\n        return [nums[0]]\n    if n == 2:\n        return [nums[0], nums[1]]\n    if n == 3:\n        return [nums[0], nums[1], nums[2]]\n    if n == 4:\n        return [nums[0], nums[1], nums[2], nums[3]]\n    if n == 5:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n    if n == 6:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n    if n == 7:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n    if n == 8:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]]\n    if n == 9:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8]]\n    if n == 10:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9]]\n    if n == 11:\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10]]\n    if n == 12:\n        return [nums[\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = heap_queue_largest",
            "lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})",
            "lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})",
            "lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "554",
        "title": "Split",
        "text": "Write a luathon function which takes a table of integers and only returns the odd ones.",
        "code": "local function Split(list)\n    return list[0:2]\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = Split",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})",
            "lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})",
            "lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "555",
        "title": "difference",
        "text": "Write a luathon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "code": "local function difference(n)\n    local sum = 0\n    for i in range(1, n)\n        sum += i\n    return sum\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = difference",
            "lu.assertEquals(candidate(3), 30)",
            "lu.assertEquals(candidate(5), 210)",
            "lu.assertEquals(candidate(2), 6)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "556",
        "title": "find_Odd_Pair",
        "text": "Write a luathon function to count the number of pairs whose xor value is odd.",
        "code": "local function find_Odd_Pair(A, N)\n    if A[N] % 2 == 1\n        return N\n    else\n        return find_Odd_Pair(A, N - 1) + find_Odd_Pair(A, N - 2)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_Odd_Pair",
            "lu.assertEquals(candidate({5, 4, 7, 2, 1}, 5), 6)",
            "lu.assertEquals(candidate({7, 2, 8, 1, 0, 5, 11}, 7), 12)",
            "lu.assertEquals(candidate({1, 2, 3}, 3), 2)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "557",
        "title": "toggle_string",
        "text": "Write a function to toggle the case of all characters in a string.",
        "code": "local function toggle_string(string)\n{\n    let str = string.toLowerCase();\n    let new_str = str.replace(/[^a-z]/g, '');\n    let new_str_lower = new_str.toLowerCase();\n    let new_str_upper = new_str.toUpperCase();\n    let new_str_lower_upper = new_str_lower.toUpperCase();\n    let new_str_lower_upper_lower = new_str_lower_upper.toLowerCase();\n    let new_str_upper_lower = new_str_upper.toLowerCase();\n    let new_str_upper_lower_upper = new_str_upper_lower.toUpperCase();\n    let new_str_upper_lower_upper_lower = new_str_upper_lower_upper.toLowerCase();\n    let new_str_upper_lower_upper_lower_upper = new_str_upper_lower_upper_upper.toLowerCase();\n    let new_str_upper_lower_upper_lower_upper_lower = new_str_upper_lower_upper_upper_lower.toLowerCase();\n    let new_str_upper_lower_upper_lower_upper_lower_upper = new_str_upper_lower_upper_upper_upper_lower.toLowerCase();\n    let new_str_upper_lower_upper_upper_lower_upper_lower_upper = new_str_upper_lower_upper_upper_upper_lower.toLowerCase();\n    let new_str_upper_lower_upper_upper_upper_lower_upper_upper_lower = new_str_upper_lower_upper_upper_upper_upper_lower.toLowerCase();\n    let new_str_upper_lower_upper_upper_upper_upper_upper_lower_upper_upper_lower = new_str_upper_lower_upper_upper_upper_upper_upper_lower.toLowerCase();\n    let new_str_upper_lower_upper_upper_upper_upper_upper_upper_upper_upper_lower_upper_upper_lower = new_str_upper\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = toggle_string",
            "lu.assertEquals(candidate('Python'), 'pYTHON')",
            "lu.assertEquals(candidate('Pangram'), 'pANGRAM')",
            "lu.assertEquals(candidate('LIttLE'), 'liTTle')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "558",
        "title": "digit_distance_nums",
        "text": "Write a luathon function to find the sum of the per-digit difference between two integers.",
        "code": "local function digit_distance_nums(n1, n2)\n    local sum = 0;\n    for (let i = 0; i < n1; i++) {\n        sum += n2 - n1 + i;\n    }\n    return sum;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = digit_distance_nums",
            "lu.assertEquals(candidate(1, 2), 1)",
            "lu.assertEquals(candidate(23, 56), 6)",
            "lu.assertEquals(candidate(123, 256), 7)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "559",
        "title": "max_sub_array_sum",
        "text": "Write a function to find the sum of the largest contiguous subtable in the given table.",
        "code": "local function max_sub_array_sum(a, size)\n    local sum = 0;\n    for (let i = 0; i < size; i++) {\n        sum = sum + a[i];\n    }\n    return sum;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = max_sub_array_sum",
            "lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)",
            "lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)",
            "lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "560",
        "title": "union_elements",
        "text": "Write a function to find the union of the elements of two given tables and output them in sorted order.",
        "code": "local function union_elements(test_tup1, test_tup2)\n    local table1 = test_tup1.table\n    local table2 = test_tup2.table\n    local result = []\n    for (local i = 0; i < table1.length; i++) {\n        result.push(table1[i])\n    }\n    for (local i = 0; i < table2.length; i++) {\n        result.push(table2[i])\n    }\n    return result\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = union_elements",
            "lu.assertEquals(candidate({3, 4, 5, 6}, {5, 7, 4, 10}), {3, 4, 5, 6, 7, 10})",
            "lu.assertEquals(candidate({1, 2, 3, 4}, {3, 4, 5, 6}), {1, 2, 3, 4, 5, 6})",
            "lu.assertEquals(candidate({11, 12, 13, 14}, {13, 15, 16, 17}), {11, 12, 13, 14, 15, 16, 17})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "562",
        "title": "Find_Max_Length",
        "text": "Write a luathon function to find the length of the longest subtables.",
        "code": "local function Find_Max_Length(lst)\n{\n    let max_length = 0;\n    for (let i = 0; i < lst.length; i++)\n    {\n        if (lst[i] > max_length)\n        {\n            max_length = lst[i];\n        }\n    }\n    return max_length;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = Find_Max_Length",
            "lu.assertEquals(candidate({{1}, {1, 4}, {5, 6, 7, 8}}), 4)",
            "lu.assertEquals(candidate({{0, 1}, {2, 2}, {3, 2, 1}}), 3)",
            "lu.assertEquals(candidate({{7}, {22, 23}, {13, 14, 15}, {10, 20, 30, 40, 50}}), 5)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "563",
        "title": "extract_values",
        "text": "Write a function to extract values between quotation marks from a string.",
        "code": "local function extract_values(text)\n    return text.split(/\\s+/).map(function(value) {\n        return value.replace(/^\\s+|\\s+$/g, '');\n    }).join('');\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = extract_values",
            "lu.assertEquals(candidate('\"Python\", \"PHP\", \"Java\"'), {'Python', 'PHP', 'Java'})",
            "lu.assertEquals(candidate('\"python\",\"program\",\"language\"'), {'python', 'program', 'language'})",
            "lu.assertEquals(candidate('\"red\",\"blue\",\"green\",\"yellow\"'), {'red', 'blue', 'green', 'yellow'})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "564",
        "title": "count_Pairs",
        "text": "Write a luathon function which takes a table of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "code": "local function count_Pairs(arr, n)\n    let count = 0\n    for (let i = 0; i < n; i++) {\n        if (arr[i]!= arr[i + 1]) {\n            count++\n        }\n    }\n    return count\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count_Pairs",
            "lu.assertEquals(candidate({1, 2, 1}, 3), 2)",
            "lu.assertEquals(candidate({1, 1, 1, 1}, 4), 0)",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5}, 5), 10)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "565",
        "title": "split",
        "text": "Write a luathon function to split a string into characters.",
        "code": "local function split(word)\n    return word.split(/[^a-zA-Z0-9]/g)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = split",
            "lu.assertEquals(candidate('python'), {'p', 'y', 't', 'h', 'o', 'n'})",
            "lu.assertEquals(candidate('Name'), {'N', 'a', 'm', 'e'})",
            "lu.assertEquals(candidate('program'), {'p', 'r', 'o', 'g', 'r', 'a', 'm'})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "566",
        "title": "sum_digits",
        "text": "Write a function to get the sum of the digits of a non-negative integer.",
        "code": "local function sum_digits(n)\n    local sum = 0\n    for i in range(1, n + 1)\n        sum += i\n    return sum\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sum_digits",
            "lu.assertEquals(candidate(345), 12)",
            "lu.assertEquals(candidate(12), 3)",
            "lu.assertEquals(candidate(97), 16)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "567",
        "title": "issort_list",
        "text": "Write a function to check whether a specified table is sorted or not.",
        "code": "local function issort_list(list1)\n    local list2 = list1.sort()\n    local list3 = list2.sort()\n    local list4 = list3.sort()\n    local list5 = list4.sort()\n    local list6 = list5.sort()\n    local list7 = list6.sort()\n    local list8 = list7.sort()\n    local list9 = list8.sort()\n    local list10 = list9.sort()\n    local list11 = list10.sort()\n    local list12 = list11.sort()\n    local list13 = list12.sort()\n    local list14 = list13.sort()\n    local list15 = list14.sort()\n    local list16 = list15.sort()\n    local list17 = list16.sort()\n    local list18 = list17.sort()\n    local list19 = list18.sort()\n    local list20 = list19.sort()\n    local list21 = list20.sort()\n    local list22 = list21.sort()\n    local list23 = list22.sort()\n    local list24 = list23.sort()\n    local list25 = list24.sort()\n    local list26 = list25.sort()\n    local list27 = list26.sort()\n    local list28 = list27.sort()\n    local list29 = list28.sort()\n    local list30 = list29.sort()\n    local list31 = list30.sort()\n    local list32 = list31.sort()\n    local list33 = list32.sort()\n    local list34 = list33.sort()\n    local list35 = list34.sort()\n    local list36 = list35.sort()\n    local list37 = list36.sort()\n    local list38 = list37.sort()\n    local list39 = list38.sort()\n    local list40 = list39.sort()\n    local list41 = list40.sort()\n    local list42 = list41.sort()\n    local list43 = list42.sort()\n    local list44 = list43.sort()\n    local list45 = list44.sort()\n    \n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = issort_list",
            "lu.assertEquals(candidate({1, 2, 4, 6, 8, 10, 12, 14, 16, 17}), true)",
            "lu.assertEquals(candidate({1, 2, 4, 6, 8, 10, 12, 14, 20, 17}), false)",
            "lu.assertEquals(candidate({1, 2, 4, 6, 8, 10, 15, 14, 20}), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "568",
        "title": "empty_list",
        "text": "Write a function to create a table of N empty dictionaries.",
        "code": "local function empty_list(length)\n    :length {Number}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array}\n    :return {Array\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = empty_list",
            "lu.assertEquals(candidate(5), {{}, {}, {}, {}, {}})",
            "lu.assertEquals(candidate(6), {{}, {}, {}, {}, {}, {}})",
            "lu.assertEquals(candidate(7), {{}, {}, {}, {}, {}, {}, {}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "569",
        "title": "sort_sublists",
        "text": "Write a function to sort each subtable of strings in a given table of tables.",
        "code": "local function sort_sublists(list1)\n    local list2 = list1.map(function(sublist) {\n        return sublist.map(function(sublist2) {\n            return sublist2.map(function(sublist3) {\n                return sublist3.map(function(sublist4) {\n                    return sublist4.map(function(sublist5) {\n                        return sublist5.map(function(sublist6) {\n                            return sublist6.map(function(sublist7) {\n                                return sublist7.map(function(sublist8) {\n                                    return sublist8.map(function(sublist9) {\n                                        return sublist9.map(function(sublist10) {\n                                            return sublist10.map(function(sublist11) {\n                                                return sublist11.map(function(sublist12) {\n                                                    return sublist12.map(function(sublist13) {\n                                                        return sublist13.map(function(sublist14) {\n                                                            return sublist14.map(function(sublist15) {\n                                                                return sublist15.map(function(sublist16) {\n                                                                    return sublist16.map(function(sublist17) {\n                                                                        return sublist17.map(function(sublist18) {\n                                                                            return sublist18.map(function(sublist19) {\n                                                                                return sublist19.map(function(sublist20) {\n                                                                                    return sublist20.map(function(sublist21) {\n                                                                                        return sublist21.map(function(sublist22) {\n                                                                                            return sublist22.map(function(sublist23) {\n                                                                                             return sublist23.map(function(sublist24) {\n                                                                                                return sublist24.map(function(sublist25) {\n                                                                                                    return sublist25.map(function(sublist26)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sort_sublists",
            "lu.assertEquals(candidate({{'green', 'orange'}, {'black', 'white'}, {'white', 'black', 'orange'}}), {{'green', 'orange'}, {'black', 'white'}, {'black', 'orange', 'white'}})",
            "lu.assertEquals(candidate({{'green', 'orange'}, {'black'}, {'green', 'orange'}, {'white'}}), {{'green', 'orange'}, {'black'}, {'green', 'orange'}, {'white'}})",
            "lu.assertEquals(candidate({{'a', 'b'}, {'d', 'c'}, {'g', 'h'}, {'f', 'e'}}), {{'a', 'b'}, {'c', 'd'}, {'g', 'h'}, {'e', 'f'}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "56",
        "title": "checks",
        "text": "Write a luathon function to check if a given number is one less than twice its reverse.",
        "code": "local function checks(n)\n    if (n % 2 == 0)\n        return true\n    else\n        return false\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = checks",
            "lu.assertEquals(candidate(70), false)",
            "lu.assertEquals(candidate(23), false)",
            "lu.assertEquals(candidate(73), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "572",
        "title": "two_unique_nums",
        "text": "Write a luathon function to remove duplicate numbers from a given number of tables.",
        "code": "local function two_unique_nums(nums)\n    local nums = nums.map(function(num) { return num + 1; });\n    return nums.reduce(function(prev, cur) { return prev + cur; });\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = two_unique_nums",
            "lu.assertEquals(candidate({1, 2, 3, 2, 3, 4, 5}), {1, 4, 5})",
            "lu.assertEquals(candidate({1, 2, 3, 2, 4, 5}), {1, 3, 4, 5})",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 2, 3, 4, 5})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "573",
        "title": "unique_product",
        "text": "Write a luathon function to calculate the product of the unique numbers in a given table.",
        "code": "local function unique_product(list_data)\n    local function get_unique_product(list_data)\n        local function get_product(list_data)\n            local function get_product_from_list(list_data)\n                local function get_product_from_list_element(list_data, index)\n                    local function get_product_from_list_element_element(list_data, index, index_element)\n                        local function get_product_from_list_element_element_element(list_data, index, index_element, index_element_element)\n                            local function get_product_from_list_element_element_element_element(list_data, index, index_element, index_element_element, index_element_element_element)\n                                local function get_product_from_list_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element_element\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = unique_product",
            "lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)",
            "lu.assertEquals(candidate({1, 2, 3, 1}), 6)",
            "lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "574",
        "title": "surfacearea_cylinder",
        "text": "Write a function to find the surface area of a cylinder.",
        "code": "local function surfacearea_cylinder(r, h)\n    double r, h;\n    double r2, h2;\n    double r3, h3;\n    double r4, h4;\n    double r5, h5;\n    double r6, h6;\n    double r7, h7;\n    double r8, h8;\n    double r9, h9;\n    double r10, h10;\n    double r11, h11;\n    double r12, h12;\n    double r13, h13;\n    double r14, h14;\n    double r15, h15;\n    double r16, h16;\n    double r17, h17;\n    double r18, h18;\n    double r19, h19;\n    double r20, h20;\n    double r21, h21;\n    double r22, h22;\n    double r23, h23;\n    double r24, h24;\n    double r25, h25;\n    double r26, h26;\n    double r27, h27;\n    double r28, h28;\n    double r29, h29;\n    double r30, h30;\n    double r31, h31;\n    double r32, h32;\n    double r33, h33;\n    double r34, h34;\n    double r35, h35;\n    double r36, h36;\n    double r37, h37;\n    double r38, h38;\n    double r39, h39;\n    double r40, h40;\n    double r41, h41;\n    double r42, h42;\n    double r43, h43;\n    double r44, h44;\n    double r45, h45;\n    double r46, h46;\n    double r47, h47;\n    double r48, h48;\n    double r49, h49;\n    double r50, h50;\n    double r51, h51;\n    double r52, h52;\n    double r53, h53;\n    double r54, h54;\n    \n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = surfacearea_cylinder",
            "lu.assertEquals(candidate(10, 5), 942.45)",
            "lu.assertEquals(candidate(4, 5), 226.18800000000002)",
            "lu.assertEquals(candidate(4, 10), 351.848)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "576",
        "title": "is_Sub_Array",
        "text": "Write a luathon function to check whether a table is subtable of another or not.",
        "code": "local function is_Sub_Array(A, B)\n{\n    if (A.length!= B.length)\n        return false;\n    for (var i = 0; i < A.length; i++)\n    {\n        if (A[i]!= B[i])\n            return false;\n    }\n    return true;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = is_Sub_Array",
            "lu.assertEquals(candidate({1, 4, 3, 5}, {1, 2}), false)",
            "lu.assertEquals(candidate({1, 2, 1}, {1, 2, 1}), true)",
            "lu.assertEquals(candidate({1, 0, 2, 2}, {2, 2, 0}), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "577",
        "title": "last_Digit_Factorial",
        "text": "Write a luathon function to find the last digit in factorial of a given number.",
        "code": "local function last_Digit_Factorial(n)\n    return n.toString().length\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = last_Digit_Factorial",
            "lu.assertEquals(candidate(4), 4)",
            "lu.assertEquals(candidate(21), 0)",
            "lu.assertEquals(candidate(30), 0)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "578",
        "title": "interleave_lists",
        "text": "Write a function to interleave 3 tables of the same length into a single flat table.",
        "code": "local function interleave_lists(list1, list2, list3)\n    local list1 = list1.map(lambda x: x[0])\n    local list2 = list2.map(lambda x: x[0])\n    local list3 = list3.map(lambda x: x[0])\n    local flat_list = list1.interleave(list2, list3)\n    return flat_list\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = interleave_lists",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})",
            "lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})",
            "lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "579",
        "title": "find_dissimilar",
        "text": "Write a function to find the dissimilar elements in the given two tables.",
        "code": "local function find_dissimilar(test_tup1, test_tup2)\n    local table1 = test_tup1[0];\n    local table2 = test_tup2[0];\n    local table1_len = table1.length;\n    local table2_len = table2.length;\n    local table1_idx = 0;\n    local table2_idx = 0;\n    while (table1_idx < table1_len) {\n        if (table1[table1_idx] < table2[table2_idx]) {\n            table1_idx++;\n        } else {\n            table2_idx++;\n        }\n    }\n    return table1_idx - table2_idx;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_dissimilar",
            "lu.assertEquals(candidate({3, 4, 5, 6}, {5, 7, 4, 10}), {3, 6, 7, 10})",
            "lu.assertEquals(candidate({1, 2, 3, 4}, {7, 2, 3, 9}), {1, 4, 7, 9})",
            "lu.assertEquals(candidate({21, 11, 25, 26}, {26, 34, 21, 36}), {34, 36, 11, 25})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "57",
        "title": "find_Max_Num",
        "text": "Write a luathon function to find the largest number that can be formed with the given table of digits.",
        "code": "local function find_Max_Num(arr)\n    local max = 0\n    for i in range(len(arr))\n        if arr[i] > max\n            max = arr[i]\n    return max\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_Max_Num",
            "lu.assertEquals(candidate({1, 2, 3}), 321)",
            "lu.assertEquals(candidate({4, 5, 6, 1}), 6541)",
            "lu.assertEquals(candidate({1, 2, 3, 9}), 9321)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "580",
        "title": "extract_even",
        "text": "Write a function to remove uneven elements in the nested mixed table.",
        "code": "local function extract_even(test_tuple)\n    local table = test_tuple.table\n    local table_even = table.extract_even(test_tuple)\n    local table_odd = table.extract_odd(test_tuple)\n    local table_even_odd = table_even.extract_odd(test_tuple)\n    local table_odd_even = table_odd.extract_even(test_tuple)\n    local table_even_odd_even = table_even_odd.extract_odd(test_tuple)\n    local table_odd_even_even = table_odd_even.extract_even(test_tuple)\n    local table_even_odd_even_even = table_even_odd_even.extract_odd(test_tuple)\n    local table_even_odd_even_even = table_even_odd_even.extract_even(test_tuple)\n    local table_even_odd_even_even = table_even_odd_even.extract_odd(test_tuple)\n    local table_even_odd_even_even = table_even_odd_even.extract_even(test_tuple)\n    local table_even_odd_even_even = table_even_odd_even.extract_odd(test_tuple)\n    local table_even_odd_even_even = table_even_odd_even.extract_even(test_tuple)\n    local table_even_odd_even_even = table_even_odd_even.extract_odd(test_tuple)\n    local table_even_odd_even_even = table_even_odd_even.extract_even(test_tuple)\n    local table_even_odd_even_even = table_even_odd_even.extract_odd(test_tuple)\n    local table_even_odd_even_even = table_even_odd_even.extract_even(test_tuple)\n    local table_even_odd_even_even = table_even_odd_even.extract_odd(test\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = extract_even",
            "lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})",
            "lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})",
            "lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "581",
        "title": "surface_Area",
        "text": "Write a luathon function to find the surface area of a square luaramid with a given base edge and height.",
        "code": "local function surface_Area(b, s)\n\tlocal x, y, z, w, h, ww, wh, x1, y1, z1, w1, h1, ww1, wh1, x2, y2, z2, w2, h2, ww2, wh2, x3, y3, z3, w3, h3, ww3, wh3, x4, y4, z4, w4, h4, ww4, wh4, x5, y5, z5, w5, h5, ww5, wh5, x6, y6, z6, w6, h6, ww6, wh6, x7, y7, z7, w7, h7, ww7, wh7, x8, y8, z8, w8, h8, ww8, wh8, x9, y9, z9, w9, h9, ww9, wh9, x10, y10, z10, w10, h10, ww10, wh10, x11, y11, z11, w11, h11, ww11, wh11, x12, y12, z12, w12, h12, ww12, wh12, x13, y13, z13, w13, h13, ww13, wh13, x14, y14, z14, w14, h14, ww14, wh14, x15, y15, z15, w15, h15, ww15, wh15, x16, y16, z16, w16, h16, ww16, wh16, x17, y17, z17, w17, h17, ww17, wh17, x18, y18, z18, w18, h18, ww18, wh18, x19, y19, z19, w19, h19, ww19, wh19, x20, y20, z20, w20, h20, ww20, wh20, x21, y21, z21, w21, h21, w\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = surface_Area",
            "lu.assertEquals(candidate(3, 4), 33)",
            "lu.assertEquals(candidate(4, 5), 56)",
            "lu.assertEquals(candidate(1, 2), 5)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "583",
        "title": "catalan_number",
        "text": "Write a function which returns nth catalan number.",
        "code": "local function catalan_number(num)\n    return num % 10;\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = catalan_number",
            "lu.assertEquals(candidate(10), 16796)",
            "lu.assertEquals(candidate(9), 4862)",
            "lu.assertEquals(candidate(7), 429)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "584",
        "title": "find_adverbs",
        "text": "Write a function to find the first adverb ending with ly and its positions in a given string.",
        "code": "local function find_adverbs(text)\n    local text = text.toLowerCase()\n    return find_adverbs_in_string(text)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_adverbs",
            "lu.assertEquals(candidate('Clearly, he has no excuse for such behavior.'), '0-7: Clearly')",
            "lu.assertEquals(candidate('Please handle the situation carefuly'), '28-36: carefuly')",
            "lu.assertEquals(candidate('Complete the task quickly'), '18-25: quickly')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "585",
        "title": "expensive_items",
        "text": "Write a function to find the n most expensive items in a given dataset.",
        "code": "local function expensive_items(items, n)\n    local n = n\n    local max = items[n]\n    for (let i = n - 1; i >= 0; i--)\n        if (items[i] > max)\n            max = items[i]\n    return max\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = expensive_items",
            "lu.assertEquals(candidate({{['name'] = 'Item-1', ['price'] = 101.1}, {['name'] = 'Item-2', ['price'] = 555.22}}, 1), {{['name'] = 'Item-2', ['price'] = 555.22}})",
            "lu.assertEquals(candidate({{['name'] = 'Item-1', ['price'] = 101.1}, {['name'] = 'Item-2', ['price'] = 555.22}, {['name'] = 'Item-3', ['price'] = 45.09}}, 2), {{['name'] = 'Item-2', ['price'] = 555.22}, {['name'] = 'Item-1', ['price'] = 101.1}})",
            "lu.assertEquals(candidate({{['name'] = 'Item-1', ['price'] = 101.1}, {['name'] = 'Item-2', ['price'] = 555.22}, {['name'] = 'Item-3', ['price'] = 45.09}, {['name'] = 'Item-4', ['price'] = 22.75}}, 1), {{['name'] = 'Item-2', ['price'] = 555.22}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "586",
        "title": "split_Arr",
        "text": "Write a luathon function to split a table at the nth eelment and add the first part to the end.",
        "code": "local function split_Arr(l, n)\n\tlocal l = l\n\tlocal n = n\n\tlocal i = 0\n\tlocal j = 0\n\tlocal k = 0\n\tlocal l = l\n\tfor (i = 0; i < n; i++) {\n\t\tl = l + 1\n\t\tif (l > lu_max) {\n\t\t\tl = lu_max\n\t\t}\n\t\tl = l + 1\n\t\tif (l > lu_max) {\n\t\t\tl = lu_max\n\t\t}\n\t\tl = l + 1\n\t\tif (l > lu_max) {\n\t\t\tl = lu_max\n\t\t}\n\t\tl = l + 1\n\t\tif (l > lu_max) {\n\t\t\tl = lu_max\n\t\t}\n\t\tl = l + 1\n\t\tif (l > lu_max) {\n\t\t\tl = lu_max\n\t\t}\n\t\tl = l + 1\n\t\tif (l > lu_max) {\n\t\t\tl = lu_max\n\t\t}\n\t\tl = l + 1\n\t\tif (l > lu_max) {\n\t\t\tl = lu_max\n\t\t}\n\t\tl = l + 1\n\t\tif (l > lu_max) {\n\t\t\tl = lu_max\n\t\t}\n\t\tl = l + 1\n\t\tif (l > lu_max) {\n\t\t\tl = lu_max\n\t\t}\n\t\tl = l + 1\n\t\tif (l > lu_max) {\n\t\t\tl = lu_max\n\t\t}\n\t\tl = l + 1\n\t\tif (l > lu_max) {\n\t\t\tl = lu_max\n\t\t}\n\t\tl = l + 1\n\t\tif (l > lu_max) {\n\t\t\tl = lu_max\n\t\t}\n\t\tl = l + 1\n\t\tif (l > lu_max) {\n\t\t\tl = lu_max\n\t\t}\n\t\tl = l + 1\n\t\tif (l > lu_max) {\n\t\t\tl = lu_max\n\t\t}\n\t\t\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = split_Arr",
            "lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})",
            "lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})",
            "lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "587",
        "title": "list_tuple",
        "text": "Write a function to convert a table to a table.",
        "code": "local function list_tuple(listx)\n    local listx = listx\n    local listx = listx.map(lambda x: x.to_string())\n    return listx\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = list_tuple",
            "lu.assertEquals(candidate({5, 10, 7, 4, 15, 3}), {5, 10, 7, 4, 15, 3})",
            "lu.assertEquals(candidate({2, 4, 5, 6, 2, 3, 4, 4, 7}), {2, 4, 5, 6, 2, 3, 4, 4, 7})",
            "lu.assertEquals(candidate({58, 44, 56}), {58, 44, 56})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "588",
        "title": "big_diff",
        "text": "Write a luathon function to find the difference between largest and smallest value in a given table.",
        "code": "local function big_diff(nums)\n    local max = 0\n    local min = 0\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] > max) {\n            max = nums[i]\n        }\n        if (nums[i] < min) {\n            min = nums[i]\n        }\n    }\n    return max - min\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = big_diff",
            "lu.assertEquals(candidate({1, 2, 3, 4}), 3)",
            "lu.assertEquals(candidate({4, 5, 12}), 8)",
            "lu.assertEquals(candidate({9, 2, 3}), 7)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "589",
        "title": "perfect_squares",
        "text": "Write a function to find perfect squares between two given numbers.",
        "code": "local function perfect_squares(a, b)\n    return a + b\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = perfect_squares",
            "lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})",
            "lu.assertEquals(candidate(50, 100), {64, 81, 100})",
            "lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "58",
        "title": "opposite_Signs",
        "text": "Write a luathon function to check whether the given two integers have opposite sign or not.",
        "code": "local function opposite_Signs(x, y)\n\t// x and y are two integers\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is positive\n\t// x is positive and y is positive\n\t// x is positive and y is negative\n\t// x is positive and y is positive\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is positive\n\t// x is positive and y is negative\n\t// x is positive and y is positive\n\t// x is positive and y is negative\n\t// x is positive and y is positive\n\t// x is positive and y is negative\n\t// x is positive and y is positive\n\t// x is positive and y is negative\n\t// x is positive and y is positive\n\t// x is positive and y is negative\n\t// x is positive and y is positive\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\t// x is positive and y is negative\n\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = opposite_Signs",
            "lu.assertEquals(candidate(1, -2), true)",
            "lu.assertEquals(candidate(3, 2), false)",
            "lu.assertEquals(candidate(-10, -10), false)",
            "lu.assertEquals(candidate(-2, 2), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "591",
        "title": "swap_List",
        "text": "Write a luathon function to interchange the first and last elements in a table.",
        "code": "local function swap_List(newList)\n{\n    let newList_ = newList;\n    let newList_length = newList_.length;\n    let i = 0;\n    let j = 0;\n    let temp = newList_[i];\n    newList_[i] = newList_[newList_length - 1];\n    newList_[newList_length - 1] = temp;\n    i++;\n    j++;\n    while (i < newList_length)\n    {\n        newList_[i] = newList_[j];\n        newList_[j] = newList_[i];\n        j++;\n        i++;\n    }\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = swap_List",
            "lu.assertEquals(candidate({12, 35, 9, 56, 24}), {24, 35, 9, 56, 12})",
            "lu.assertEquals(candidate({1, 2, 3}), {3, 2, 1})",
            "lu.assertEquals(candidate({4, 5, 6}), {6, 5, 4})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "592",
        "title": "sum_Of_product",
        "text": "Write a luathon function to find the sum of the product of consecutive binomial co-efficients.",
        "code": "local function sum_Of_product(n)\n    local sum = 0;\n    for (let i = 1; i <= n; i++)\n        sum += i * i;\n    return sum;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sum_Of_product",
            "lu.assertEquals(candidate(3), 15)",
            "lu.assertEquals(candidate(4), 56)",
            "lu.assertEquals(candidate(1), 1)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "593",
        "title": "removezero_ip",
        "text": "Write a function to remove leading zeroes from an ip address.",
        "code": "local function removezero_ip(ip)\n    if (ip.length == 0)\n        return ip;\n    return ip.substring(0, ip.length - 1);\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = removezero_ip",
            "lu.assertEquals(candidate('216.08.094.196'), '216.8.94.196')",
            "lu.assertEquals(candidate('12.01.024'), '12.1.24')",
            "lu.assertEquals(candidate('216.08.094.0196'), '216.8.94.196')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "594",
        "title": "diff_even_odd",
        "text": "Write a function to find the difference of the first even and first odd number of a given table.",
        "code": "local function diff_even_odd(list1)\n    local list2 = list1.split(',')\n    local list2_length = len(list2)\n    local list2_index = 0\n    local list2_index_even = 0\n    local list2_index_odd = 0\n    local list2_index_sum = 0\n    local list2_index_sum_even = 0\n    local list2_index_sum_odd = 0\n    local list2_index_sum_sum = 0\n    local list2_index_sum_sum_even = 0\n    local list2_index_sum_sum_odd = 0\n    local list2_index_sum_sum_sum = 0\n    local list2_index_sum_sum_sum_even = 0\n    local list2_index_sum_sum_sum_odd = 0\n    local list2_index_sum_sum_sum_sum = 0\n    local list2_index_sum_sum_sum_sum_even = 0\n    local list2_index_sum_sum_sum_sum_odd = 0\n    local list2_index_sum_sum_sum_sum_sum = 0\n    local list2_index_sum_sum_sum_sum_sum_even = 0\n    local list2_index_sum_sum_sum_sum_sum_odd = 0\n    local list2_index_sum_sum_sum_sum_sum_sum = 0\n    local list2_index_sum_sum_sum_sum_sum_sum_even = 0\n    local list2_index_sum_sum_sum_sum_sum_sum_odd = 0\n    local list2_index_sum_sum_sum_sum_sum_sum_sum = 0\n    local list2_index_sum_sum_sum_sum_sum_sum_sum_even = 0\n    local list2_index_sum_sum_sum_sum_sum_sum_sum_odd = 0\n    local list2_index_sum_sum_sum_sum_sum_sum_sum_sum = 0\n    local list2_index_sum_sum_\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = diff_even_odd",
            "lu.assertEquals(candidate({1, 3, 5, 7, 4, 1, 6, 8}), 3)",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), 1)",
            "lu.assertEquals(candidate({1, 5, 7, 9, 10}), 9)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "595",
        "title": "min_Swaps",
        "text": "Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.",
        "code": "local function min_Swaps(str1, str2)\n    return str1.length < str2.length? str1 : str2\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = min_Swaps",
            "lu.assertEquals(candidate('1101', '1110'), 1)",
            "lu.assertEquals(candidate('111', '000'), 'Not Possible')",
            "lu.assertEquals(candidate('111', '110'), 'Not Possible')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "597",
        "title": "find_kth",
        "text": "Write a function to find kth element from the given two sorted tables.",
        "code": "local function find_kth(arr1, arr2, k)\n    local kth = 0;\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] < arr2[k]) {\n            kth = i;\n        }\n    }\n    return kth;\nend function find_kth(arr1, arr2, k)\n    local kth = 0;\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] < arr2[k]) {\n            kth = i;\n        }\n    }\n    return kth;\nend function find_kth(arr1, arr2, k)\n    local kth = 0;\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] < arr2[k]) {\n            kth = i;\n        }\n    }\n    return kth;\nend function find_kth(arr1, arr2, k)\n    local kth = 0;\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] < arr2[k]) {\n            kth = i;\n        }\n    }\n    return kth;\nend function find_kth(arr1, arr2, k)\n    local kth = 0;\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] < arr2[k]) {\n            kth = i;\n        }\n    }\n    return kth;\nend function find_kth(arr1, arr2, k)\n    local kth = 0;\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] < arr2[k]) {\n            kth = i;\n        }\n    }\n    return kth;\nend function find_kth(arr1, arr2, k)\n    local kth = 0;\n    for (\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_kth",
            "lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)",
            "lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)",
            "lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "598",
        "title": "armstrong_number",
        "text": "Write a function to check whether the given number is armstrong or not.",
        "code": "local function armstrong_number(number)\n    return number\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = armstrong_number",
            "lu.assertEquals(candidate(153), true)",
            "lu.assertEquals(candidate(259), false)",
            "lu.assertEquals(candidate(4458), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "599",
        "title": "sum_average",
        "text": "Write a function to find sum and average of first n natural numbers.",
        "code": "local function sum_average(number)\n    local sum = 0\n    local n = number\n    for i in range(1, n + 1)\n        sum += i\n    return sum / (n + 1)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sum_average",
            "lu.assertEquals(candidate(10), {55, 5.5})",
            "lu.assertEquals(candidate(15), {120, 8.0})",
            "lu.assertEquals(candidate(20), {210, 10.5})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "59",
        "title": "is_octagonal",
        "text": "Write a function to find the nth octagonal number.",
        "code": "local function is_octagonal(n)\n    return n % 2 == 0\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = is_octagonal",
            "lu.assertEquals(candidate(5), 65)",
            "lu.assertEquals(candidate(10), 280)",
            "lu.assertEquals(candidate(15), 645)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "600",
        "title": "is_Even",
        "text": "Write a luathon function to check whether the given number is even or not.",
        "code": "local function is_Even(n)\n    return n % 2 == 0\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = is_Even",
            "lu.assertEquals(candidate(1), false)",
            "lu.assertEquals(candidate(2), true)",
            "lu.assertEquals(candidate(3), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "602",
        "title": "first_repeated_char",
        "text": "Write a luathon function to find the first repeated character in a given string.",
        "code": "local function first_repeated_char(str1)\n    local str2 = str1.split('')\n    return str2[0]\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = first_repeated_char",
            "lu.assertEquals(candidate('abcabc'), 'a')",
            "lu.assertEquals(candidate('abc'), None)",
            "lu.assertEquals(candidate('123123'), '1')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "603",
        "title": "get_ludic",
        "text": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
        "code": "local function get_ludic(n)\n    return n % 10\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = get_ludic",
            "lu.assertEquals(candidate(10), {1, 2, 3, 5, 7})",
            "lu.assertEquals(candidate(25), {1, 2, 3, 5, 7, 11, 13, 17, 23, 25})",
            "lu.assertEquals(candidate(45), {1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "604",
        "title": "reverse_words",
        "text": "Write a function to reverse words seperated by spaces in a given string.",
        "code": "local function reverse_words(s)\n    return s.split(' ').map(function(word) { return word.toUpperCase() }).join(' ');\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = reverse_words",
            "lu.assertEquals(candidate('python program'), 'program python')",
            "lu.assertEquals(candidate('java language'), 'language java')",
            "lu.assertEquals(candidate('indian man'), 'man indian')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "605",
        "title": "prime_num",
        "text": "Write a function to check if the given integer is a prime number.",
        "code": "local function prime_num(num)\n    if (num < 2)\n        return false\n    if (num % 2 == 0)\n        return false\n    return true\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = prime_num",
            "lu.assertEquals(candidate(13), true)",
            "lu.assertEquals(candidate(7), true)",
            "lu.assertEquals(candidate(-1010), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "606",
        "title": "radian_degree",
        "text": "Write a function to convert degrees to radians.",
        "code": "local function radian_degree(degree)\n    return degree * (Math.PI / 180)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = radian_degree",
            "lu.assertEquals(candidate(90), 1.5707963267948966)",
            "lu.assertEquals(candidate(60), 1.0471975511965976)",
            "lu.assertEquals(candidate(120), 2.0943951023931953)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "607",
        "title": "find_literals",
        "text": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "code": "local function find_literals(text, pattern)\n    return text.match(pattern)\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_literals",
            "lu.assertEquals(candidate('The quick brown fox jumps over the lazy dog.', 'fox'), {'fox', 16, 19})",
            "lu.assertEquals(candidate('Its been a very crazy procedure right', 'crazy'), {'crazy', 16, 21})",
            "lu.assertEquals(candidate('Hardest choices required strongest will', 'will'), {'will', 35, 39})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "608",
        "title": "bell_Number",
        "text": "Write a luathon function to find nth bell number.",
        "code": "local function bell_Number(n)\n    if (n < 0)\n        return 0\n    if (n > 100)\n        return 100\n    return n\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = bell_Number",
            "lu.assertEquals(candidate(2), 2)",
            "lu.assertEquals(candidate(3), 5)",
            "lu.assertEquals(candidate(4), 15)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "610",
        "title": "remove_kth_element",
        "text": "Write a luathon function which takes a table and returns a table with the same elements, but the k'th element removed.",
        "code": "local function remove_kth_element(list1, L)\n    local list2 = list1.slice(0, L);\n    local list3 = list1.slice(L);\n    return list3.filter(function(elem) {\n        return list2.indexOf(elem) === L;\n    });\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = remove_kth_element",
            "lu.assertEquals(candidate({1, 1, 2, 3, 4, 4, 5, 1}, 3), {1, 1, 3, 4, 4, 5, 1})",
            "lu.assertEquals(candidate({0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), {0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4})",
            "lu.assertEquals(candidate({10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), {10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "611",
        "title": "max_of_nth",
        "text": "Write a function which given a matrix represented as a table of tables returns the max of then'th column.",
        "code": "local function max_of_nth(test_list, N)\n    local max = 0;\n    for (let i = 0; i < N; i++)\n        max = max + test_list[i][i];\n    return max;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = max_of_nth",
            "lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)",
            "lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)",
            "lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "612",
        "title": "merge",
        "text": "Write a luathon function which takes a table of tables, where each subtable has two elements, and returns a table of two tables where the first table has the first element of each subtable and the second one has the second.",
        "code": "local function merge(lst)\n\tlocal lst = lst\n\tlocal lst2 = lst.map(function(e) { return e.subtables })\n\tlocal lst3 = lst2.map(function(e) { return e.subtables })\n\tlocal lst4 = lst3.map(function(e) { return e.subtables })\n\tlocal lst5 = lst4.map(function(e) { return e.subtables })\n\tlocal lst6 = lst5.map(function(e) { return e.subtables })\n\tlocal lst7 = lst6.map(function(e) { return e.subtables })\n\tlocal lst8 = lst7.map(function(e) { return e.subtables })\n\tlocal lst9 = lst8.map(function(e) { return e.subtables })\n\tlocal lst10 = lst9.map(function(e) { return e.subtables })\n\tlocal lst11 = lst10.map(function(e) { return e.subtables })\n\tlocal lst12 = lst11.map(function(e) { return e.subtables })\n\tlocal lst13 = lst12.map(function(e) { return e.subtables })\n\tlocal lst14 = lst13.map(function(e) { return e.subtables })\n\tlocal lst15 = lst14.map(function(e) { return e.subtables })\n\tlocal lst16 = lst15.map(function(e) { return e.subtables })\n\tlocal lst17 = lst16.map(function(e) { return e.subtables })\n\tlocal lst18 = lst17.map(function(e) { return e.subtables })\n\tlocal lst19 = lst18.map(function(e) { return e.subt\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = merge",
            "lu.assertEquals(candidate({{'x', 'y'}, {'a', 'b'}, {'m', 'n'}}), {{'x', 'a', 'm'}, {'y', 'b', 'n'}})",
            "lu.assertEquals(candidate({{1, 2}, {3, 4}, {5, 6}, {7, 8}}), {{1, 3, 5, 7}, {2, 4, 6, 8}})",
            "lu.assertEquals(candidate({{'x', 'y', 'z'}, {'a', 'b', 'c'}, {'m', 'n', 'o'}}), {{'x', 'a', 'm'}, {'y', 'b', 'n'}, {'z', 'c', 'o'}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "614",
        "title": "cummulative_sum",
        "text": "Write a function to find the cumulative sum of all the values that are present in the given table of tables.",
        "code": "local function cummulative_sum(test_list)\n    local function sum_of_values(test_list)\n        local function sum_of_values_of_all_values(test_list)\n            local function sum_of_values_of_all_values_of_all_values(test_list)\n                local function sum_of_values_of_all_values_of_all_values_of_all_values(test_list)\n                    local function sum_of_values_of_all_values_of_all_values_of_all_values_of_all_values(test_list)\n                        local function sum_of_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_of_all_values_\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = cummulative_sum",
            "lu.assertEquals(candidate({{1, 3}, {5, 6, 7}, {2, 6}}), 30)",
            "lu.assertEquals(candidate({{2, 4}, {6, 7, 8}, {3, 7}}), 37)",
            "lu.assertEquals(candidate({{3, 5}, {7, 8, 9}, {4, 8}}), 44)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "615",
        "title": "average_tuple",
        "text": "Write a function which takes a tables of tables and returns the average value for each subtable as a table.",
        "code": "local function average_tuple(nums)\n    return nums[0] + nums[1] / 2\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = average_tuple",
            "lu.assertEquals(candidate({{10, 10, 10, 12}, {30, 45, 56, 45}, {81, 80, 39, 32}, {1, 2, 3, 4}}), {30.5, 34.25, 27.0, 23.25})",
            "lu.assertEquals(candidate({{1, 1, -5}, {30, -15, 56}, {81, -60, -39}, {-10, 2, 3}}), {25.5, -18.0, 3.75})",
            "lu.assertEquals(candidate({{100, 100, 100, 120}, {300, 450, 560, 450}, {810, 800, 390, 320}, {10, 20, 30, 40}}), {305.0, 342.5, 270.0, 232.5})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "616",
        "title": "tuple_modulo",
        "text": "Write a function which takes two tables of the same length and performs the element wise modulo.",
        "code": "local function tuple_modulo(test_tup1, test_tup2)\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    return tuple_modulo(test_tup1, test_tup2)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = tuple_modulo",
            "lu.assertEquals(candidate({10, 4, 5, 6}, {5, 6, 7, 5}), {0, 4, 5, 1})",
            "lu.assertEquals(candidate({11, 5, 6, 7}, {6, 7, 8, 6}), {5, 5, 6, 1})",
            "lu.assertEquals(candidate({12, 6, 7, 8}, {7, 8, 9, 7}), {5, 6, 7, 1})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "617",
        "title": "min_Jumps",
        "text": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
        "code": "local function min_Jumps(steps, d)\n    local d = d\n    local steps = steps\n    local d_ = d\n    local steps_ = steps\n    local d__ = d\n    local steps__ = steps\n    local d___ = d\n    local steps___ = steps\n    local d____ = d\n    local steps____ = steps\n    local d_____ = d\n    local steps_____ = steps\n    local d______ = d\n    local steps______ = steps\n    local d_______ = d\n    local steps_______ = steps\n    local d________ = d\n    local steps________ = steps\n    local d__________ = d\n    local steps__________ = steps\n    local d_____________ = d\n    local steps______________ = steps\n    local d___________________________ = d\n    local steps________________ = steps\n    local d______________________ = d\n    local steps_________________\n    local d________________\n    local steps_______________\n    local d___________\n    local steps______________\n    local d_______________\n    local steps______________\n    \n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = min_Jumps",
            "lu.assertEquals(candidate({3, 4}, 11), 3.5)",
            "lu.assertEquals(candidate({3, 4}, 0), 0)",
            "lu.assertEquals(candidate({11, 14}, 11), 1)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "618",
        "title": "div_list",
        "text": "Write a function to divide two tables element wise.",
        "code": "local function div_list(nums1, nums2)\n    local nums1_i = nums1.slice(0, n)\n    local nums2_i = nums2.slice(0, n)\n    local nums1_j = nums1_i.slice(0, n)\n    local nums2_j = nums2_i.slice(0, n)\n    local nums1_k = nums1_j.slice(0, n)\n    local nums2_k = nums2_j.slice(0, n)\n    local nums1_l = nums1_k.slice(0, n)\n    local nums2_l = nums2_k.slice(0, n)\n    local nums1_m = nums1_l.slice(0, n)\n    local nums2_m = nums2_l.slice(0, n)\n    local nums1_n = nums1_m.slice(0, n)\n    local nums2_n = nums2_m.slice(0, n)\n    local nums1_o = nums1_n.slice(0, n)\n    local nums2_o = nums2_n.slice(0, n)\n    local nums1_p = nums1_o.slice(0, n)\n    local nums2_p = nums2_o.slice(0, n)\n    local nums1_q = nums1_p.slice(0, n)\n    local nums2_q = nums2_p.slice(0, n)\n    local nums1_r = nums1_q.slice(0, n)\n    local nums2_r = nums2_q.slice(0, n)\n    local nums1_s = nums1_r.slice(0, n)\n    local nums2_s = nums2_r.slice(0, n)\n    local nums1_t = nums1_s.slice(0, n)\n    local nums2_\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = div_list",
            "lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})",
            "lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})",
            "lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "619",
        "title": "move_num",
        "text": "Write a function to move all the numbers to the end of the given string.",
        "code": "local function move_num(test_str)\n    test_str = test_str.replace(/[^0-9]/g, '')\n    test_str = test_str.replace(/[^0-9]/g, '')\n    test_str = test_str.replace(/[^0-9]/g, '')\n    test_str = test_str.replace(/[^0-9]/g, '')\n    test_str = test_str.replace(/[^0-9]/g, '')\n    test_str = test_str.replace(/[^0-9]/g, '')\n    test_str = test_str.replace(/[^0-9]/g, '')\n    test_str = test_str.replace(/[^0-9]/g, '')\n    test_str = test_str.replace(/[^0-9]/g, '')\n    test_str = test_str.replace(/[^0-9]/g, '')\n    test_str = test_str.replace(/[^0-9]/g, '')\n    test_str = test_str.replace(/[^0-9]/g, '')\n    test_str = test_str.replace(/[^0-9]/g, '')\n    test_str = test_str.replace(/[^0-9]/g, '')\n    test_str = test_str.replace(/[^0-9]/g, '')\n    test_str = test_str.replace(/[^0-9]/g, '')\n    test_str = test_str.replace(/[^0-9]/g, '')\n    test_str = test_str.replace(/[^0-9]/g, '')\n    test_str = test_str.replace(/[^0-9]/g, '')\n    test_str = test_str.replace(/[^0-9]/g, '')\n    test_\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = move_num",
            "lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')",
            "lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')",
            "lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "61",
        "title": "count_Substrings",
        "text": "Write a luathon function to count the number of substrings with the sum of digits equal to their length.",
        "code": "local function count_Substrings(s)\n    local sum = 0\n    for i in range(0, len(s)):\n        sum += s[i]\n    return sum\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count_Substrings",
            "lu.assertEquals(candidate('112112'), 6)",
            "lu.assertEquals(candidate('111'), 6)",
            "lu.assertEquals(candidate('1101112'), 12)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "622",
        "title": "get_median",
        "text": "Write a function to find the median of two sorted tables of same size.",
        "code": "local function get_median(arr1, arr2, n)\n    local arr1 = arr1.sort()\n    local arr2 = arr2.sort()\n    local n = n\n    local arr1_len = len(arr1)\n    local arr2_len = len(arr2)\n    if (arr1_len < n) {\n        return arr1[(n - arr1_len) / 2]\n    }\n    if (arr2_len < n) {\n        return arr2[(n - arr2_len) / 2]\n    }\n    return arr1[(n - arr1_len) / 2]\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = get_median",
            "lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)",
            "lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)",
            "lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "623",
        "title": "nth_nums",
        "text": "Write a function to compute the n-th power of each number in a table.",
        "code": "local function nth_nums(nums, n)\n    n = nums[n]\n    if (n == 0) return 0\n    return pow(n, n-1)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = nth_nums",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), {1, 4, 9, 16, 25, 36, 49, 64, 81, 100})",
            "lu.assertEquals(candidate({10, 20, 30}, 3), {1000, 8000, 27000})",
            "lu.assertEquals(candidate({12, 15}, 5), {248832, 759375})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "624",
        "title": "is_upper",
        "text": "Write a luathon function to convert a given string to uppercase.",
        "code": "local function is_upper(string)\n{\n    return string.toUpperCase().replace(/[^A-Z]/g, '');\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = is_upper",
            "lu.assertEquals(candidate('person'), 'PERSON')",
            "lu.assertEquals(candidate('final'), 'FINAL')",
            "lu.assertEquals(candidate('Valid'), 'VALID')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "625",
        "title": "swap_List",
        "text": "Write a luathon function to interchange the first and last element in a given table.",
        "code": "local function swap_List(newList)\n{\n    let newList_ = newList;\n    let newList_[0] = newList_[1];\n    newList_[1] = newList_[0];\n    return newList_;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = swap_List",
            "lu.assertEquals(candidate({1, 2, 3}), {3, 2, 1})",
            "lu.assertEquals(candidate({1, 2, 3, 4, 4}), {4, 2, 3, 4, 1})",
            "lu.assertEquals(candidate({4, 5, 6}), {6, 5, 4})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "626",
        "title": "triangle_area",
        "text": "Write a luathon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
        "code": "local function triangle_area(r)\n    local area = 0\n    for i in range(1, r + 1)\n        for j in range(i + 1, r + 1)\n            if (i == j)\n                continue\n            area += (i * (i + 1)) / 2\n    return area\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = triangle_area",
            "lu.assertEquals(candidate(-1), None)",
            "lu.assertEquals(candidate(0), 0)",
            "lu.assertEquals(candidate(2), 4)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "627",
        "title": "find_First_Missing",
        "text": "Write a luathon function to find the smallest missing number from a sorted table of natural numbers.",
        "code": "local function find_First_Missing(array)\n\tlocal array = array\n\tlocal i = 0\n\tlocal j = 0\n\tlocal k = 0\n\tlocal l = 0\n\tlocal m = 0\n\tlocal n = 0\n\tlocal o = 0\n\tlocal p = 0\n\tlocal q = 0\n\tlocal r = 0\n\tlocal s = 0\n\tlocal t = 0\n\tlocal u = 0\n\tlocal v = 0\n\tlocal w = 0\n\tlocal x = 0\n\tlocal y = 0\n\tlocal z = 0\n\tlocal a = 0\n\tlocal b = 0\n\tlocal c = 0\n\tlocal d = 0\n\tlocal e = 0\n\tlocal f = 0\n\tlocal g = 0\n\tlocal h = 0\n\tlocal i = 0\n\tlocal j = 0\n\tlocal k = 0\n\tlocal l = 0\n\tlocal m = 0\n\tlocal n = 0\n\tlocal o = 0\n\tlocal p = 0\n\tlocal q = 0\n\tlocal r = 0\n\tlocal s = 0\n\tlocal t = 0\n\tlocal u = 0\n\tlocal v = 0\n\tlocal w = 0\n\tlocal x = 0\n\tlocal y = 0\n\tlocal z = 0\n\tlocal a = 0\n\tlocal b = 0\n\tlocal c = 0\n\tlocal d = 0\n\tlocal e = 0\n\tlocal f = 0\n\tlocal g = 0\n\tlocal h = 0\n\tlocal i = 0\n\tlocal j = 0\n\tlocal k = 0\n\tlocal l = 0\n\tlocal m = 0\n\tlocal n = 0\n\tlocal o = 0\n\tlocal p = 0\n\tlocal q = 0\n\tlocal r = 0\n\tlocal s = 0\n\tlocal t = 0\n\tlocal u = 0\n\tlocal v = 0\n\tlocal w = 0\n\tlocal x = 0\n\tlocal y = 0\n\tlocal z = 0\n\tlocal a = 0\n\tlocal b = 0\n\tlocal c = 0\n\tlocal d = 0\n\tlocal e = 0\n\tlocal f = 0\n\tlocal g = 0\n\tlocal h = 0\n\tlocal i = 0\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_First_Missing",
            "lu.assertEquals(candidate({0, 1, 2, 3}), 4)",
            "lu.assertEquals(candidate({0, 1, 2, 6, 9}), 3)",
            "lu.assertEquals(candidate({2, 3, 5, 8, 9}), 0)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "628",
        "title": "replace_spaces",
        "text": "Write a function to replace all spaces in the given string with '%20'.",
        "code": "local function replace_spaces(string)\n    : string\n    {\n        return string.replace(/\\s+/g, '%20');\n    }\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = replace_spaces",
            "lu.assertEquals(candidate('My Name is Dawood'), 'My%20Name%20is%20Dawood')",
            "lu.assertEquals(candidate('I am a Programmer'), 'I%20am%20a%20Programmer')",
            "lu.assertEquals(candidate('I love Coding'), 'I%20love%20Coding')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "629",
        "title": "Split",
        "text": "Write a luathon function to find even numbers from a table of numbers.",
        "code": "local function Split(list)\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {Array}\n    : list {\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = Split",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5}), {2, 4})",
            "lu.assertEquals(candidate({4, 5, 6, 7, 8, 0, 1}), {4, 6, 8, 0})",
            "lu.assertEquals(candidate({8, 12, 15, 19}), {8, 12})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "62",
        "title": "smallest_num",
        "text": "Write a luathon function to find smallest number in a table.",
        "code": "local function smallest_num(xs)\n    local x = xs[0];\n    local y = xs[1];\n    local z = xs[2];\n    local xs = xs[3];\n    local ys = ys[0];\n    local zs = zs[0];\n    local xs_min = xs[0];\n    local ys_min = ys[0];\n    local zs_min = zs[0];\n    local xs_max = xs[1];\n    local ys_max = ys[1];\n    local zs_max = zs[1];\n    local xs_min_max = xs_min;\n    local ys_min_max = ys_min;\n    local zs_min_max = zs_min;\n    local xs_max_max = xs_max;\n    local ys_max_max = ys_max;\n    local zs_max_max = zs_max;\n    local xs_min_max_max = xs_min_max;\n    local ys_min_max_max = ys_min_max;\n    local zs_min_max_max = zs_min_max;\n    local xs_max_max_max = xs_max_max;\n    local ys_max_max_max = ys_max_max;\n    local zs_max_max_max = zs_max_max;\n    local xs_max_max_max_max = xs_max_max_max;\n    local ys_max_max_max_max = ys_max_max_max;\n    local zs_max_max_max_max = zs_max_max_max;\n    local xs_max_max_max_max_max = xs_max_max_max_max;\n    local ys_max_max_max_max_max = ys_max_max_max_max;\n    local zs_max_max_max_max_max = zs_max\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = smallest_num",
            "lu.assertEquals(candidate({10, 20, 1, 45, 99}), 1)",
            "lu.assertEquals(candidate({1, 2, 3}), 1)",
            "lu.assertEquals(candidate({45, 46, 50, 60}), 45)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "630",
        "title": "get_coordinates",
        "text": "Write a function to extract all the adjacent coordinates of the given coordinate table.",
        "code": "local function get_coordinates(test_tup)\n    local test_tup = test_tup\n    local table = test_tup[0]\n    local table_size = len(table)\n    local table_coordinates = []\n    for i in range(table_size):\n        local table_coordinates.append(table[i])\n    return table_coordinates\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = get_coordinates",
            "lu.assertEquals(candidate({3, 4}), {{2, 3}, {2, 4}, {2, 5}, {3, 3}, {3, 4}, {3, 5}, {4, 3}, {4, 4}, {4, 5}})",
            "lu.assertEquals(candidate({4, 5}), {{3, 4}, {3, 5}, {3, 6}, {4, 4}, {4, 5}, {4, 6}, {5, 4}, {5, 5}, {5, 6}})",
            "lu.assertEquals(candidate({5, 6}), {{4, 5}, {4, 6}, {4, 7}, {5, 5}, {5, 6}, {5, 7}, {6, 5}, {6, 6}, {6, 7}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "631",
        "title": "replace_spaces",
        "text": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "code": "local function replace_spaces(text)\n{\n    return text.replace(/\\s+/g, '_').toLowerCase();\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = replace_spaces",
            "lu.assertEquals(candidate('Jumanji The Jungle'), 'Jumanji_The_Jungle')",
            "lu.assertEquals(candidate('The_Avengers'), 'The Avengers')",
            "lu.assertEquals(candidate('Fast and Furious'), 'Fast_and_Furious')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "632",
        "title": "move_zero",
        "text": "Write a luathon function to move all zeroes to the end of the given table.",
        "code": "local function move_zero(num_list)\n    local num_list = num_list.map(function(x) { return x == 0? x : x - 1 });\n    return num_list.sort();\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = move_zero",
            "lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})",
            "lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})",
            "lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "633",
        "title": "pair_xor_Sum",
        "text": "Write a luathon function to find the sum of xor of all pairs of numbers in the given table.",
        "code": "local function pair_xor_Sum(arr, n)\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n    return sum;\nend function pair_xor_Sum(arr, n) {\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = pair_xor_Sum",
            "lu.assertEquals(candidate({5, 9, 7, 6}, 4), 47)",
            "lu.assertEquals(candidate({7, 3, 5}, 3), 12)",
            "lu.assertEquals(candidate({7, 3}, 2), 4)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "635",
        "title": "heap_sort",
        "text": "Write a function to sort the given table.",
        "code": "local function heap_sort(iterable)\n    {\n    let heap = [];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = heap_sort",
            "lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})",
            "lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})",
            "lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "637",
        "title": "noprofit_noloss",
        "text": "Write a function to check whether the given amount has no profit and no loss",
        "code": "local function noprofit_noloss(actual_cost, sale_amount)\n{\n    if (actual_cost == 0)\n    {\n        return 0;\n    }\n    else if (sale_amount == 0)\n    {\n        return 1;\n    }\n    else\n    {\n        return 0;\n    }\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = noprofit_noloss",
            "lu.assertEquals(candidate(1500, 1200), false)",
            "lu.assertEquals(candidate(100, 100), true)",
            "lu.assertEquals(candidate(2000, 5000), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "638",
        "title": "wind_chill",
        "text": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "code": "local function wind_chill(v, t)\n    local wind_index = wind_index_from_wind_velocity(v, t)\n    return wind_index\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = wind_chill",
            "lu.assertEquals(candidate(120, 35), 40)",
            "lu.assertEquals(candidate(40, 20), 19)",
            "lu.assertEquals(candidate(10, 8), 6)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "639",
        "title": "sample_nam",
        "text": "Write a function to sum the length of the names of a given table of names after removing the names that start with a lowercase letter.",
        "code": "local function sample_nam(sample_names)\n    local function sum_names(sample_names)\n        local function sum_names_of_names(sample_names)\n            local function sum_names_of_names_of_names(sample_names)\n                local function sum_names_of_names_of_names_of_names(sample_names)\n                    local function sum_names_of_names_of_names_of_names_of_names(sample_names)\n                        local function sum_names_of_names_of_names_of_names_of_names_of_names(sample_names)\n                            local function sum_names_of_names_of_names_of_names_of_names_of_names_of_names(sample_names)\n                                local function sum_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_of_names_\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sample_nam",
            "lu.assertEquals(candidate({'sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'}), 16)",
            "lu.assertEquals(candidate({'php', 'res', 'Python', 'abcd', 'Java', 'aaa'}), 10)",
            "lu.assertEquals(candidate({'abcd', 'Python', 'abba', 'aba'}), 6)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "63",
        "title": "max_difference",
        "text": "Write a function to find the maximum difference between available pairs in the given table table.",
        "code": "local function max_difference(test_list)\n    local max_difference = 0;\n    for (let i = 0; i < test_list.length; i++)\n        max_difference = max(max_difference, test_list[i].difference);\n    return max_difference;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = max_difference",
            "lu.assertEquals(candidate({{3, 5}, {1, 7}, {10, 3}, {1, 2}}), 7)",
            "lu.assertEquals(candidate({{4, 6}, {2, 17}, {9, 13}, {11, 12}}), 15)",
            "lu.assertEquals(candidate({{12, 35}, {21, 27}, {13, 23}, {41, 22}}), 23)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "640",
        "title": "remove_parenthesis",
        "text": "Write a function to remove the parenthesis and what is inbetween them from a string.",
        "code": "local function remove_parenthesis(items)\n    return items.map(function(item) {\n        return item.replace(/^\\(|\\)/g, '');\n    }).join('');\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = remove_parenthesis",
            "lu.assertEquals(candidate({'python (chrome)'}), 'python')",
            "lu.assertEquals(candidate({'string(.abc)'}), 'string')",
            "lu.assertEquals(candidate({'alpha(num)'}), 'alpha')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "641",
        "title": "is_nonagonal",
        "text": "Write a function to find the nth nonagonal number.",
        "code": "local function is_nonagonal(n)\n    local n = n\n    if (n == 0) return n\n    if (n == 1) return n\n    if (n == 2) return n\n    if (n == 3) return n\n    if (n == 4) return n\n    if (n == 5) return n\n    if (n == 6) return n\n    if (n == 7) return n\n    if (n == 8) return n\n    if (n == 9) return n\n    if (n == 10) return n\n    if (n == 11) return n\n    if (n == 12) return n\n    if (n == 13) return n\n    if (n == 14) return n\n    if (n == 15) return n\n    if (n == 16) return n\n    if (n == 17) return n\n    if (n == 18) return n\n    if (n == 19) return n\n    if (n == 20) return n\n    if (n == 21) return n\n    if (n == 22) return n\n    if (n == 23) return n\n    if (n == 24) return n\n    if (n == 25) return n\n    if (n == 26) return n\n    if (n == 27) return n\n    if (n == 28) return n\n    if (n == 29) return n\n    if (n == 30) return n\n    if (n == 31) return n\n    if (n == 32) return n\n    if (n == 33) return n\n    if (n == 34) return n\n    if (n == 35) return n\n    if (n == 36) return n\n    if (n == 37) return n\n    if (n == 38) return n\n    if (n == 39) return n\n    if (n == 40) return n\n    if (n == 41) return n\n    if (n == 42) return n\n    if (n == 43) return n\n    if (n == 44) return n\n    if (n == 45) return n\n    if (n == 46) return n\n    if (n == 47) return n\n    if\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = is_nonagonal",
            "lu.assertEquals(candidate(10), 325)",
            "lu.assertEquals(candidate(15), 750)",
            "lu.assertEquals(candidate(18), 1089)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "643",
        "title": "text_match_wordz_middle",
        "text": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "code": "local function text_match_wordz_middle(text)\n    return text.match(/^[a-z]+$/)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = text_match_wordz_middle",
            "lu.assertEquals(candidate('pythonzabc.'), true)",
            "lu.assertEquals(candidate('zxyabc.'), false)",
            "lu.assertEquals(candidate('  lang  .'), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "644",
        "title": "reverse_Array_Upto_K",
        "text": "Write a luathon function to reverse a table upto a given position.",
        "code": "local function reverse_Array_Upto_K(input, k)\n    local output = [];\n    for (let i = 0; i < k; i++) {\n        output.push(input[i]);\n    }\n    return output;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = reverse_Array_Upto_K",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, 4), {4, 3, 2, 1, 5, 6})",
            "lu.assertEquals(candidate({4, 5, 6, 7}, 2), {5, 4, 6, 7})",
            "lu.assertEquals(candidate({9, 8, 7, 6, 5}, 3), {7, 8, 9, 6, 5})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "64",
        "title": "subject_marks",
        "text": "Write a function to sort a table of tables using the second value of each table.",
        "code": "local function subject_marks(subjectmarks)\n    local subjectmarks = subjectmarks\n    subjectmarks = subjectmarks.sort(function(a, b) {\n        return a.subjectmarks.length - b.subjectmarks.length\n    })\n    subjectmarks.forEach(function(subject) {\n        subject.subjectmarks.forEach(function(mark) {\n            subject.subjectmarks.push(mark)\n        })\n    })\n    return subjectmarks\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = subject_marks",
            "lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})",
            "lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})",
            "lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "65",
        "title": "recursive_list_sum",
        "text": "Write a function to flatten a table and sum all of its elements.",
        "code": "local function recursive_list_sum(data_list)\n    local sum = 0\n    for (let i = 0; i < data_list.length; i++) {\n        sum += data_list[i]\n    }\n    return sum\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = recursive_list_sum",
            "lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)",
            "lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)",
            "lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "66",
        "title": "pos_count",
        "text": "Write a luathon function to count the number of positive numbers in a table.",
        "code": "local function pos_count(list)\n    local count = 0\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count += 1\n        }\n    }\n    return count\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = pos_count",
            "lu.assertEquals(candidate({1, -2, 3, -4}), 2)",
            "lu.assertEquals(candidate({3, 4, 5, -1}), 3)",
            "lu.assertEquals(candidate({1, 2, 3, 4}), 4)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "67",
        "title": "bell_number",
        "text": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "code": "local function bell_number(n)\n    return n\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = bell_number",
            "lu.assertEquals(candidate(2), 2)",
            "lu.assertEquals(candidate(10), 115975)",
            "lu.assertEquals(candidate(56), 6775685320645824322581483068371419745979053216268760300)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "68",
        "title": "is_Monotonic",
        "text": "Write a luathon function to check whether the given table is monotonic or not.",
        "code": "local function is_Monotonic(A)\n{\n    let is_monotonic = true;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = is_Monotonic",
            "lu.assertEquals(candidate({6, 5, 4, 4}), true)",
            "lu.assertEquals(candidate({1, 2, 2, 3}), true)",
            "lu.assertEquals(candidate({1, 3, 2}), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "69",
        "title": "is_sublist",
        "text": "Write a function to check whether a table contains the given subtable or not.",
        "code": "local function is_sublist(l, s)\n    local table = l\n    local subtable = s\n    local result = false\n    while (table)\n        if (table.subtables.indexOf(subtable) >= 0)\n            result = true\n        table = table.parent\n    return result\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = is_sublist",
            "lu.assertEquals(candidate({2, 4, 3, 5, 7}, {3, 7}), false)",
            "lu.assertEquals(candidate({2, 4, 3, 5, 7}, {4, 3}), true)",
            "lu.assertEquals(candidate({2, 4, 3, 5, 7}, {1, 6}), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "6",
        "title": "differ_At_One_Bit_Pos",
        "text": "Write a luathon function to check whether the two numbers differ at one bit position only or not.",
        "code": "local function differ_At_One_Bit_Pos(a, b)\n    if (a > b)\n        return true;\n    else\n        return false;\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = differ_At_One_Bit_Pos",
            "lu.assertEquals(candidate(13, 9), true)",
            "lu.assertEquals(candidate(15, 8), false)",
            "lu.assertEquals(candidate(2, 4), false)",
            "lu.assertEquals(candidate(2, 3), true)",
            "lu.assertEquals(candidate(5, 1), true)",
            "lu.assertEquals(candidate(1, 5), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "70",
        "title": "get_equal",
        "text": "Write a function to find whether all the given tables have equal length or not.",
        "code": "local function get_equal(Input)\n    local table = Input\n    local length = 0\n    for (let i = 0; i < table.length; i++) {\n        if (table[i] === table[i]) {\n            length += 1\n        }\n    }\n    return length\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = get_equal",
            "lu.assertEquals(candidate({{11, 22, 33}, {44, 55, 66}}), true)",
            "lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6, 7}}), false)",
            "lu.assertEquals(candidate({{1, 2}, {3, 4}}), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "71",
        "title": "comb_sort",
        "text": "Write a function to sort a table of elements.",
        "code": "local function comb_sort(nums)\n    {\n    let sorted = [];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = comb_sort",
            "lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})",
            "lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})",
            "lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "720",
        "title": "add_dict_to_tuple",
        "text": "Write a function to add a table to the table. The output should be a table.",
        "code": "local function add_dict_to_tuple(test_tup, test_dict)\n    test_tup.append(test_dict)\n    return test_tup\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = add_dict_to_tuple",
            "lu.assertEquals(candidate({4, 5, 6}, {['MSAM'] = 1, ['is'] = 2, ['best'] = 3}), {4, 5, 6, {['MSAM'] = 1, ['is'] = 2, ['best'] = 3}})",
            "lu.assertEquals(candidate({1, 2, 3}, {['UTS'] = 2, ['is'] = 3, ['Worst'] = 4}), {1, 2, 3, {['UTS'] = 2, ['is'] = 3, ['Worst'] = 4}})",
            "lu.assertEquals(candidate({8, 9, 10}, {['POS'] = 3, ['is'] = 4, ['Okay'] = 5}), {8, 9, 10, {['POS'] = 3, ['is'] = 4, ['Okay'] = 5}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "721",
        "title": "maxAverageOfPath",
        "text": "Given a square matrix of size N*N given as a table of tables, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
        "code": "local function maxAverageOfPath(cost)\n    local max = 0\n    for i in range(N)\n        for j in range(N)\n            max = max + cost[i][j]\n    return max\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = maxAverageOfPath",
            "lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)",
            "lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)",
            "lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)",
            "lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "722",
        "title": "filter_data",
        "text": "The input is given as - a table with a student name as a key and a table of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
        "code": "local function filter_data(students, h, w)\n    students = [x for x in students if x.height > h and x.weight > w]\n    return students\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = filter_data",
            "lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})",
            "lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})",
            "lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "723",
        "title": "count_same_pair",
        "text": "The input is defined as two tables of the same length. Write a function to count indices where the tables have the same values.",
        "code": "local function count_same_pair(nums1, nums2)\n    local count = 0\n    for i in range(nums1.length)\n        for j in range(nums2.length)\n            if nums1[i] == nums2[j]\n        count += 1\n    return count\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count_same_pair",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}, {2, 2, 3, 1, 2, 6, 7, 9}), 4)",
            "lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}, {2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 11)",
            "lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}, {2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 1)",
            "lu.assertEquals(candidate({0, 1, 1, 2}, {0, 1, 2, 2}), 3)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "724",
        "title": "power_base_sum",
        "text": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
        "code": "local function power_base_sum(base, power)\n    local sum = 0;\n    for (var i = 0; i < power; i++)\n        sum += base;\n    return sum;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = power_base_sum",
            "lu.assertEquals(candidate(2, 100), 115)",
            "lu.assertEquals(candidate(8, 10), 37)",
            "lu.assertEquals(candidate(8, 15), 62)",
            "lu.assertEquals(candidate(3, 3), 9)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "725",
        "title": "extract_quotation",
        "text": "Write a function to extract values between quotation marks \" \" of the given string.",
        "code": "local function extract_quotation(text1)\n    local text2 = text1.split(\" \")\n    return text2.map(function(x) { return x.trim() })\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = extract_quotation",
            "lu.assertEquals(candidate('Cortex \"A53\" Based \"multi\" tasking \"Processor\"'), {'A53', 'multi', 'Processor'})",
            "lu.assertEquals(candidate('Cast your \"favorite\" entertainment \"apps\"'), {'favorite', 'apps'})",
            "lu.assertEquals(candidate('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support'), {'4k Ultra HD', 'HDR 10'})",
            "lu.assertEquals(candidate(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\"), {})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "726",
        "title": "multiply_elements",
        "text": "Write a function that takes as input a table of numbers (t_1,...,t_{N+1}) and returns a table of length N where the i-th element of the table is equal to t_i * t_{i+1}.",
        "code": "local function multiply_elements(test_tup)\n    local t_i = test_tup[0]\n    local t_N = test_tup[1]\n    local t_1 = test_tup[2]\n    local t_2 = test_tup[3]\n    local t_3 = test_tup[4]\n    local t_4 = test_tup[5]\n    local t_5 = test_tup[6]\n    local t_6 = test_tup[7]\n    local t_7 = test_tup[8]\n    local t_8 = test_tup[9]\n    local t_9 = test_tup[10]\n    local t_10 = test_tup[11]\n    local t_11 = test_tup[12]\n    local t_12 = test_tup[13]\n    local t_13 = test_tup[14]\n    local t_14 = test_tup[15]\n    local t_15 = test_tup[16]\n    local t_16 = test_tup[17]\n    local t_17 = test_tup[18]\n    local t_18 = test_tup[19]\n    local t_19 = test_tup[20]\n    local t_20 = test_tup[21]\n    local t_21 = test_tup[22]\n    local t_22 = test_tup[23]\n    local t_23 = test_tup[24]\n    local t_24 = test_tup[25]\n    local t_25 = test_tup[26]\n    local t_26 = test_tup[27]\n    local t_27 = test_tup[28]\n    local t_28 = test_tup[29]\n    local t_29 = test_tup[30]\n    local t_30 = test_tup[\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = multiply_elements",
            "lu.assertEquals(candidate({1, 5, 7, 8, 10}), {5, 35, 56, 80})",
            "lu.assertEquals(candidate({2, 4, 5, 6, 7}), {8, 20, 30, 42})",
            "lu.assertEquals(candidate({12, 13, 14, 9, 15}), {156, 182, 126, 135})",
            "lu.assertEquals(candidate({12}), {})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "728",
        "title": "sum_list",
        "text": "Write a function takes as input two tables [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
        "code": "local function sum_list(lst1, lst2)\n    lst1 = list(lst1)\n    lst2 = list(lst2)\n    sum = 0\n    for i in range(len(lst1)):\n        sum += lst1[i] + lst2[i]\n    return sum\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sum_list",
            "lu.assertEquals(candidate({10, 20, 30}, {15, 25, 35}), {25, 45, 65})",
            "lu.assertEquals(candidate({1, 2, 3}, {5, 6, 7}), {6, 8, 10})",
            "lu.assertEquals(candidate({15, 20, 30}, {15, 45, 75}), {30, 65, 105})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "72",
        "title": "dif_Square",
        "text": "Write a luathon function to check whether the given number can be represented as the difference of two squares or not.",
        "code": "local function dif_Square(n)\n    if (n < 2)\n        return 0\n    else\n        return n - 2\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = dif_Square",
            "lu.assertEquals(candidate(5), true)",
            "lu.assertEquals(candidate(10), false)",
            "lu.assertEquals(candidate(15), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "730",
        "title": "consecutive_duplicates",
        "text": "Write a function to remove consecutive duplicates of a given table.",
        "code": "local function consecutive_duplicates(nums)\n    local nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = consecutive_duplicates",
            "lu.assertEquals(candidate({0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4})",
            "lu.assertEquals(candidate({10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}), {10, 15, 19, 18, 17, 26, 17, 18, 10})",
            "lu.assertEquals(candidate({'a', 'a', 'b', 'c', 'd', 'd'}), {'a', 'b', 'c', 'd'})",
            "lu.assertEquals(candidate({'a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'}), {'a', 'b', 'c', 'd', 'a'})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "731",
        "title": "lateralsurface_cone",
        "text": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
        "code": "local function lateralsurface_cone(r, h)\n    local r = r\n    local h = h\n    local r2 = r * r\n    local h2 = h * h\n    if (r2 > r) r = r2\n    if (h2 > h) h = h2\n    return r2 + r * (h2 - h)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = lateralsurface_cone",
            "lu.assertEquals(candidate(5, 12), 204.20352248333654)",
            "lu.assertEquals(candidate(10, 15), 566.3586699569488)",
            "lu.assertEquals(candidate(19, 17), 1521.8090132193388)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "732",
        "title": "replace_specialchar",
        "text": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "code": "local function replace_specialchar(text)\n    // text: the text to replace\n    //\n    // Returns: the text with all special characters replaced\n    //\n    // This function replaces all occurrences of spaces, commas, or dots with a colon.\n    //\n    // This function is used by the `replace_specialchar` function in `React.js`.\n    //\n    // ### Example\n    //\n    // ```javascript\n    // replace_specialchar('a:b:c') => 'a:b:c'\n    // ```\n    //\n    // ### Example\n    //\n    // ```javascript\n    // replace_specialchar('a:b:c') => 'a:b:c'\n    // ```\n    //\n    // ### Example\n    //\n    // ```javascript\n    // replace_specialchar('a:b:c') => 'a:b:c'\n    // ```\n    //\n    // ### Example\n    //\n    // ```javascript\n    // replace_specialchar('a:b:c') => 'a:b:c'\n    // ```\n    //\n    // ### Example\n    //\n    // ```javascript\n    // replace_specialchar('a:b:c') => 'a:b:c'\n    // ```\n    //\n    // ### Example\n    //\n    // ```javascript\n    // replace_specialchar('a:b:c') => 'a:b:c'\n    // ```\n    //\n    // ### Example\n    //\n    // ```javascript\n    // replace_specialchar('a:b:c') => 'a:b:c'\n    // ```\n    //\n    // ### Example\n    //\n    // ```javascript\n    // replace_specialchar('a:b:c') => 'a:b:c'\n    // ```\n    //\n    // ### Example\n    //\n    // ```javascript\n    // replace_specialchar('a:b:c') => 'a:b:c'\n    // ```\n    //\n    // ### Example\n    //\n    \n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = replace_specialchar",
            "lu.assertEquals(candidate('Python language, Programming language.'), 'Python:language::Programming:language:')",
            "lu.assertEquals(candidate('a b c,d e f'), 'a:b:c:d:e:f')",
            "lu.assertEquals(candidate('ram reshma,ram rahim'), 'ram:reshma:ram:rahim')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "733",
        "title": "find_first_occurrence",
        "text": "Write a function to find the index of the first occurrence of a given number in a sorted table.",
        "code": "local function find_first_occurrence(A, x)\n    local index = 0\n    local x = x\n    while (index < A.length) {\n        if (A[index] === x) {\n            return index\n        }\n        index += 1\n    }\n    return -1\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_first_occurrence",
            "lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)",
            "lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)",
            "lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "734",
        "title": "sum_Of_Subarray_Prod",
        "text": "Write a luathon function to find sum of products of all possible subtables of a given table. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subtables/",
        "code": "local function sum_Of_Subarray_Prod(arr)\n{\n    var sum = 0;\n    for (var i = 0; i < arr.length; i++)\n    {\n        sum += arr[i];\n    }\n    return sum;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sum_Of_Subarray_Prod",
            "lu.assertEquals(candidate({1, 2, 3}), 20)",
            "lu.assertEquals(candidate({1, 2}), 5)",
            "lu.assertEquals(candidate({1, 2, 3, 4}), 84)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "735",
        "title": "toggle_middle_bits",
        "text": "Write a luathon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
        "code": "local function toggle_middle_bits(n)\n{\n    var middle_bits = n % 2;\n    var first_bit = (middle_bits == 0)? 1 : 0;\n    var last_bit = (middle_bits == 1)? 1 : 0;\n    return first_bit | last_bit;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = toggle_middle_bits",
            "lu.assertEquals(candidate(9), 15)",
            "lu.assertEquals(candidate(10), 12)",
            "lu.assertEquals(candidate(11), 13)",
            "lu.assertEquals(candidate(65), 127)",
            "lu.assertEquals(candidate(77), 115)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "736",
        "title": "left_insertion",
        "text": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/luathon-exercises/data-structures-and-algorithms/luathon-data-structure-exercise-24.php",
        "code": "local function left_insertion(a, x)\n{\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = left_insertion",
            "lu.assertEquals(candidate({1, 2, 4, 5}, 6), 4)",
            "lu.assertEquals(candidate({1, 2, 4, 5}, 3), 2)",
            "lu.assertEquals(candidate({1, 2, 4, 5}, 7), 4)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "737",
        "title": "check_str",
        "text": "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "code": "local function check_str(string)\n    return string.match(/[a-z]/)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = check_str",
            "lu.assertEquals(candidate('annie'), true)",
            "lu.assertEquals(candidate('dawood'), false)",
            "lu.assertEquals(candidate('Else'), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "738",
        "title": "geometric_sum",
        "text": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/luathon-exercises/data-structures-and-algorithms/luathon-recursion-exercise-9.php",
        "code": "local function geometric_sum(n)\n{\n    let sum = 0;\n    for (let i = 1; i <= n; i++)\n    {\n        sum += i;\n    }\n    return sum;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = geometric_sum",
            "lu.assertEquals(candidate(7), 1.9921875)",
            "lu.assertEquals(candidate(4), 1.9375)",
            "lu.assertEquals(candidate(8), 1.99609375)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "739",
        "title": "find_Index",
        "text": "Write a luathon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
        "code": "local function find_Index(n)\n{\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_Index",
            "lu.assertEquals(candidate(2), 4)",
            "lu.assertEquals(candidate(3), 14)",
            "lu.assertEquals(candidate(4), 45)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "740",
        "title": "tuple_to_dict",
        "text": "Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/",
        "code": "local function tuple_to_dict(test_tup)\n{\n    let result = {};\n    let key = test_tup[0];\n    let value = test_tup[1];\n    let key_value = {};\n    key_value[key] = value;\n    result[key] = key_value;\n    return result;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = tuple_to_dict",
            "lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})",
            "lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "741",
        "title": "all_Characters_Same",
        "text": "Write a luathon function to check whether all the characters are same or not.",
        "code": "local function all_Characters_Same(s)\n{\n    let s1 = s.split(\" \");\n    let s2 = s1.slice(0, 1);\n    let s3 = s1.slice(1);\n    let s4 = s2.slice(0, 1);\n    let s5 = s3.slice(1);\n    let s6 = s4.slice(0, 1);\n    let s7 = s5.slice(1);\n    let s8 = s6.slice(0, 1);\n    let s9 = s7.slice(1);\n    let s10 = s8.slice(0, 1);\n    let s11 = s9.slice(1);\n    let s12 = s10.slice(0, 1);\n    let s13 = s11.slice(1);\n    let s14 = s12.slice(0, 1);\n    let s15 = s13.slice(1);\n    let s16 = s14.slice(0, 1);\n    let s17 = s15.slice(1);\n    let s18 = s16.slice(0, 1);\n    let s19 = s17.slice(1);\n    let s20 = s18.slice(0, 1);\n    let s21 = s19.slice(1);\n    let s22 = s20.slice(0, 1);\n    let s23 = s21.slice(1);\n    let s24 = s22.slice(0, 1);\n    let s25 = s23.slice(1);\n    let s26 = s24.slice(0, 1);\n    let s27 = s25.slice(1);\n    let s28 = s26.slice(0, 1);\n    let s29 = s27.slice(1);\n    let s30 = s28.slice(0, 1);\n    let s31 = s29.slice(1);\n    let s32 = s30.slice(0, 1);\n    let s33 = s31.slice(1);\n    let s34 = s32.slice(0, 1);\n    let s35 =\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = all_Characters_Same",
            "lu.assertEquals(candidate('python'), false)",
            "lu.assertEquals(candidate('aaa'), true)",
            "lu.assertEquals(candidate('data'), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "742",
        "title": "area_tetrahedron",
        "text": "Write a function to caluclate the area of a tetrahedron.",
        "code": "local function area_tetrahedron(side)\n    local function area(side)\n        local function area_tetrahedron(side)\n            local function area_tetrahedron(side)\n                local function area_tetrahedron(side)\n                    local function area_tetrahedron(side)\n                        local function area_tetrahedron(side)\n                            local function area_tetrahedron(side)\n                                local function area_tetrahedron(side)\n                                    local function area_tetrahedron(side)\n                                        local function area_tetrahedron(side)\n                                            local function area_tetrahedron(side)\n                                                local function area_tetrahedron(side)\n                                                    local function area_tetrahedron(side)\n                                                        local function area_tetrahedron(side)\n                                                            local function area_tetrahedron(side)\n                                                              local function area_tetrahedron(side)\n                                                              local function area_tetrahedron(side)\n                                                              local function area_tetrahedron(side)\n                                                              local function area_tetrahedron(side)\n                                                              local function area_tetrahedron(side)\n                                                              local function area_tetrahedron(side)\n                                                              local function area_tetrahedron(side)\n                                                              local function area_tetrahedron(side)\n                                                              local function area_tetrahedron(side)\n                                                              local function area_tetrahedron(\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = area_tetrahedron",
            "lu.assertEquals(candidate(3), 15.588457268119894)",
            "lu.assertEquals(candidate(20), 692.8203230275509)",
            "lu.assertEquals(candidate(10), 173.20508075688772)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "743",
        "title": "rotate_right",
        "text": "Write a function to rotate a given table by specified number of items to the right direction. https://www.geeksforgeeks.org/luathon-program-right-rotate-table-n/",
        "code": "local function rotate_right(list, m)\n{\n    var i = list.length - 1;\n    while (i >= 0)\n    {\n        var j = i;\n        while (j >= 0 && list[j] < list[i])\n        {\n            list[j + 1] = list[j];\n            j--;\n        }\n        i--;\n    }\n    return list;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = rotate_right",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), {8, 9, 10, 1, 2, 3, 4, 5, 6, 7})",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), {9, 10, 1, 2, 3, 4, 5, 6, 7, 8})",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), {6, 7, 8, 9, 10, 1, 2, 3, 4, 5})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "744",
        "title": "check_none",
        "text": "Write a function to check if the given table has any none value or not.",
        "code": "local function check_none(test_tup)\n{\n    if (test_tup.value === undefined)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = check_none",
            "lu.assertEquals(candidate({10, 4, 5, 6, None}), true)",
            "lu.assertEquals(candidate({7, 8, 9, 11, 14}), false)",
            "lu.assertEquals(candidate({1, 2, 3, 4, None}), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "745",
        "title": "divisible_by_digits",
        "text": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php",
        "code": "local function divisible_by_digits(startnum, endnum)\n{\n    let divisible = true;\n    let num = startnum;\n    let num_digits = endnum - startnum;\n    while (num_digits > 0)\n    {\n        if (num % 10 == 0)\n        {\n            divisible = false;\n            break;\n        }\n        num_digits--;\n        num = num / 10;\n    }\n    return divisible;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = divisible_by_digits",
            "lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})",
            "lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})",
            "lu.assertEquals(candidate(20, 25), {22, 24})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "746",
        "title": "sector_area",
        "text": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.",
        "code": "local function sector_area(r, a)\n    if r > 360.0:\n        return None\n    return r * r * r\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sector_area",
            "lu.assertEquals(candidate(4, 45), 6.283185307179586)",
            "lu.assertEquals(candidate(9, 45), 31.808625617596654)",
            "lu.assertEquals(candidate(9, 361), None)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "747",
        "title": "lcs_of_three",
        "text": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/",
        "code": "local function lcs_of_three(X, Y, Z)\n{\n    let lcs = [];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let i_max = 0;\n    let j_max = 0;\n    let k_max = 0;\n    let l_max = 0;\n    let m_max = 0;\n    let n_max = 0;\n    let o_max = 0;\n    let p_max = 0;\n    let q_max = 0;\n    let r_max = 0;\n    let s_max = 0;\n    let t_max = 0;\n    let u_max = 0;\n    let v_max = 0;\n    let w_max = 0;\n    let x_max = 0;\n    let y_max = 0;\n    let z_max = 0;\n    let i_min = 0;\n    let j_min = 0;\n    let k_min = 0;\n    let l_min = 0;\n    let m_min = 0;\n    let n_min = 0;\n    let o_min = 0;\n    let p_min = 0;\n    let q_min = 0;\n    let r_min = 0;\n    let s_min = 0;\n    let t_min = 0;\n    let u_min = 0;\n    let v_min = 0;\n    let w_min = 0;\n    let x_min = 0;\n    let y_min = 0;\n    \n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = lcs_of_three",
            "lu.assertEquals(candidate('AGGT12', '12TXAYB', '12XBA'), 2)",
            "lu.assertEquals(candidate('Reels', 'Reelsfor', 'ReelsforReels'), 5)",
            "lu.assertEquals(candidate('abcd1e2', 'bc12ea', 'bd1ea'), 3)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "748",
        "title": "capital_words_spaces",
        "text": "Write a function to put spaces between words starting with capital letters in a given string.",
        "code": "local function capital_words_spaces(str1)\n    local str2 = str1.split(\" \")\n    local str3 = str2.map(lambda x: x.capitalize())\n    return str3\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = capital_words_spaces",
            "lu.assertEquals(candidate('Python'), 'Python')",
            "lu.assertEquals(candidate('PythonProgrammingExamples'), 'Python Programming Examples')",
            "lu.assertEquals(candidate('GetReadyToBeCodingFreak'), 'Get Ready To Be Coding Freak')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "749",
        "title": "sort_numeric_strings",
        "text": "Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/",
        "code": "local function sort_numeric_strings(nums_str)\n{\n    let sorted_nums = [];\n    let nums_len = nums_str.length;\n    let nums_i = 0;\n    let nums_j = 0;\n    let nums_k = 0;\n    let nums_l = 0;\n    let nums_m = 0;\n    let nums_n = 0;\n    let nums_o = 0;\n    let nums_p = 0;\n    let nums_q = 0;\n    let nums_r = 0;\n    let nums_s = 0;\n    let nums_t = 0;\n    let nums_u = 0;\n    let nums_v = 0;\n    let nums_w = 0;\n    let nums_x = 0;\n    let nums_y = 0;\n    let nums_z = 0;\n    let nums_w_i = 0;\n    let nums_w_j = 0;\n    let nums_w_k = 0;\n    let nums_w_l = 0;\n    let nums_w_m = 0;\n    let nums_w_n = 0;\n    let nums_w_o = 0;\n    let nums_w_p = 0;\n    let nums_w_q = 0;\n    let nums_w_r = 0;\n    let nums_w_s = 0;\n    let nums_w_t = 0;\n    let nums_w_u = 0;\n    let nums_w_v = 0;\n    let nums_w_w = 0;\n    let nums_w_x = 0;\n    let nums_w_y = 0;\n    let nums_w_z = 0;\n    let nums_w_w_i = 0;\n    let nums_w_w_j = 0;\n    let num\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sort_numeric_strings",
            "lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})",
            "lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})",
            "lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "74",
        "title": "is_samepatterns",
        "text": "Write a function to check whether it follows the sequence given in the patterns table.",
        "code": "local function is_samepatterns(colors, patterns)\n    return (colors.index(pattern) == patterns.index(pattern))\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = is_samepatterns",
            "lu.assertEquals(candidate({'red', 'green', 'green'}, {'a', 'b', 'b'}), true)",
            "lu.assertEquals(candidate({'red', 'green', 'greenn'}, {'a', 'b', 'b'}), false)",
            "lu.assertEquals(candidate({'red', 'green', 'greenn'}, {'a', 'b'}), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "750",
        "title": "add_tuple",
        "text": "Write a function to add the given table to the given table.",
        "code": "local function add_tuple(test_list, test_tup)\n    test_list.push(test_tup)\n    return test_list\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = add_tuple",
            "lu.assertEquals(candidate({5, 6, 7}, {9, 10}), {5, 6, 7, 9, 10})",
            "lu.assertEquals(candidate({6, 7, 8}, {10, 11}), {6, 7, 8, 10, 11})",
            "lu.assertEquals(candidate({7, 8, 9}, {11, 12}), {7, 8, 9, 11, 12})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "751",
        "title": "check_min_heap",
        "text": "Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/",
        "code": "local function check_min_heap(arr)\n{\n    var min_heap = [];\n    for (var i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < arr[i + 1])\n        {\n            min_heap.push(arr[i]);\n        }\n    }\n    return min_heap;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = check_min_heap",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)",
            "lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)",
            "lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "752",
        "title": "jacobsthal_num",
        "text": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...",
        "code": "local function jacobsthal_num(n)\n{\n    var jacobsthal = 0;\n    for (var i = 1; i <= n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            jacobsthal += i;\n        }\n    }\n    return jacobsthal;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = jacobsthal_num",
            "lu.assertEquals(candidate(5), 11)",
            "lu.assertEquals(candidate(2), 1)",
            "lu.assertEquals(candidate(4), 5)",
            "lu.assertEquals(candidate(13), 2731)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "753",
        "title": "min_k",
        "text": "Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases",
        "code": "local function min_k(test_list, K)\n{\n    var min_k = test_list[0];\n    for (var i = 1; i < test_list.length; i++)\n    {\n        if (test_list[i] < min_k)\n        {\n            min_k = test_list[i];\n        }\n    }\n    return min_k;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = min_k",
            "lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})",
            "lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})",
            "lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "754",
        "title": "extract_index_list",
        "text": "We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.",
        "code": "local function extract_index_list(l1, l2, l3)\n\tlocal table = l1\n\tlocal table_list = l2\n\tlocal table_list_length = len(table_list)\n\tlocal table_index = 0\n\tfor i in range(table_list_length)\n\t\tif table_list[i] == table\n\t\t\ttable_index = i\n\t\t\tbreak\n\treturn table_index\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = extract_index_list",
            "lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})",
            "lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})",
            "lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})",
            "lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "755",
        "title": "second_smallest",
        "text": "Write a function to find the second smallest number in a table.",
        "code": "local function second_smallest(numbers)\n    local smallest = numbers[0]\n    for (let i = 1; i < numbers.length; i++)\n        if (smallest < numbers[i])\n            smallest = numbers[i]\n    return smallest\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = second_smallest",
            "lu.assertEquals(candidate({1, 2, -8, -2, 0, -2}), -2)",
            "lu.assertEquals(candidate({1, 1, -0.5, 0, 2, -2, -2}), -0.5)",
            "lu.assertEquals(candidate({2, 2}), None)",
            "lu.assertEquals(candidate({2, 2, 2}), None)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "756",
        "title": "text_match_zero_one",
        "text": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/luathon-exercises/re/luathon-re-exercise-3.php",
        "code": "local function text_match_zero_one(text)\n{\n    return text.match(/^\\s*a\\s*b\\s*$/);\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = text_match_zero_one",
            "lu.assertEquals(candidate('ac'), false)",
            "lu.assertEquals(candidate('dc'), false)",
            "lu.assertEquals(candidate('abbbba'), true)",
            "lu.assertEquals(candidate('dsabbbba'), true)",
            "lu.assertEquals(candidate('asbbbba'), false)",
            "lu.assertEquals(candidate('abaaa'), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "757",
        "title": "count_reverse_pairs",
        "text": "Write a function to count the pairs of reverse strings in the given string table. https://www.geeksforgeeks.org/luathon-program-to-count-the-pairs-of-reverse-strings/",
        "code": "local function count_reverse_pairs(test_list)\n{\n    let count = 0;\n    for (let i = 0; i < test_list.length; i++)\n    {\n        let test = test_list[i];\n        let test_string = test.toString();\n        let test_string_len = test_string.length;\n        let test_string_index = test_string.indexOf(test_string.charAt(test_string_len - 1));\n        let test_string_index_end = test_string_index + test_string_len - 1;\n        let test_string_index_start = test_string_index - 1;\n        let test_string_index_end_start = test_string_index_end - 1;\n        let test_string_index_end_end = test_string_index_end + test_string_len;\n        let test_string_index_end_end_start = test_string_index_end_end - 1;\n        let test_string_index_end_end_end = test_string_index_end_end + test_string_len;\n        let test_string_index_end_end_end_start = test_string_index_end_end_end - 1;\n        let test_string_index_end_end_end_start = test_string_index_end_end_end + test_string_len;\n        let test_string_index_end_end_end_start = test_string_index_end_end_end + test_string_len;\n        let test_string_index_end_end_end_start = test_string_index_end_end_end + test_string_len;\n        let test_string_index_end_end_end_start = test_string_index_end_end_end + test_string_len;\n        let test_string_index_end_end_end_start = test_string_index_end_end_\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count_reverse_pairs",
            "lu.assertEquals(candidate({'julia', 'best', 'tseb', 'for', 'ailuj'}), 2)",
            "lu.assertEquals(candidate({'geeks', 'best', 'for', 'skeeg'}), 1)",
            "lu.assertEquals(candidate({'makes', 'best', 'sekam', 'for', 'rof'}), 2)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "759",
        "title": "is_decimal",
        "text": "Write a function to check whether a given string is a decimal number with a precision of 2.",
        "code": "local function is_decimal(num)\n    return (num % 1 === 0)\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = is_decimal",
            "lu.assertEquals(candidate('123.11'), true)",
            "lu.assertEquals(candidate('e666.86'), false)",
            "lu.assertEquals(candidate('3.124587'), false)",
            "lu.assertEquals(candidate('1.11'), true)",
            "lu.assertEquals(candidate('1.1.11'), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "75",
        "title": "find_tuples",
        "text": "Write a function to find tables which have all elements divisible by k from the given table of tables.",
        "code": "local function find_tuples(test_list, K)\n    local function find_tuple(tuple)\n        local function find_tuple_index(tuple)\n            local function find_tuple_index_of_element(tuple, element)\n                local function find_tuple_index_of_element_of_table(tuple, table)\n                    local function find_tuple_index_of_element_of_table_of_table(table, table)\n                        local function find_tuple_index_of_element_of_table_of_table(table, table)\n                            local function find_tuple_index_of_element_of_table_of_table(table, table)\n                                local function find_tuple_index_of_element_of_table_of_table(table, table)\n                                   local function find_tuple_index_of_element_of_table_of_table(table, table)\n                                     local function find_tuple_index_of_element_of_table_of_table(table, table)\n                                         local function find_tuple_index_of_element_of_table_of_table(table, table)\n                                             local function find_tuple_index_of_element_of_table_of_table(table, table)\n                                                 local function find_tuple_index_of_element_of_table_of_table(table, table)\n                                                    local function find_tuple_index_of_element_of_table_of_table(table, table)\n                                                        local function find_tuple_index_of_element_of_table_of_table(table, table)\n                                                            local function find_tuple_index_of_element_of_table_of_table(table, table)\n                                                                 local function find_tuple_index_of_element_of_table_of_table(table, table)\n                                                                   local function find_tuple_index_of_element_of_table\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_tuples",
            "lu.assertEquals(candidate({{6, 24, 12}, {7, 9, 6}, {12, 18, 21}}, 6), {{6, 24, 12}})",
            "lu.assertEquals(candidate({{5, 25, 30}, {4, 2, 3}, {7, 8, 9}}, 5), {{5, 25, 30}})",
            "lu.assertEquals(candidate({{7, 9, 16}, {8, 16, 4}, {19, 17, 18}}, 4), {{8, 16, 4}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "760",
        "title": "unique_Element",
        "text": "Write a luathon function to check whether a table of numbers contains only one distinct element or not.",
        "code": "local function unique_Element(arr)\n    local count = 0\n    for (let i = 0; i < arr.length; i++)\n        if (arr[i] === arr[i + 1])\n            count += 1\n    return count === 1\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = unique_Element",
            "lu.assertEquals(candidate({1, 1, 1}), true)",
            "lu.assertEquals(candidate({1, 2, 1, 2}), false)",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5}), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "762",
        "title": "check_monthnumber_number",
        "text": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "code": "local function check_monthnumber_number(monthnum3)\n    local monthnum = monthnum3\n    local monthnum2 = monthnum - 1\n    local monthnum1 = monthnum2 - 1\n    local monthnum4 = monthnum1 + 1\n    local monthnum5 = monthnum4 + 1\n    local monthnum6 = monthnum5 + 1\n    local monthnum7 = monthnum6 + 1\n    local monthnum8 = monthnum7 + 1\n    local monthnum9 = monthnum8 + 1\n    local monthnum10 = monthnum9 + 1\n    local monthnum11 = monthnum10 + 1\n    local monthnum12 = monthnum11 + 1\n    local monthnum13 = monthnum12 + 1\n    local monthnum14 = monthnum13 + 1\n    local monthnum15 = monthnum14 + 1\n    local monthnum16 = monthnum15 + 1\n    local monthnum17 = monthnum16 + 1\n    local monthnum18 = monthnum17 + 1\n    local monthnum19 = monthnum18 + 1\n    local monthnum20 = monthnum19 + 1\n    local monthnum21 = monthnum20 + 1\n    local monthnum22 = monthnum21 + 1\n    local monthnum23 = monthnum22 + 1\n    local monthnum24 = monthnum23 + 1\n    local monthnum25 = monthnum24 + 1\n    local monthnum26 = monthnum25 + 1\n    local monthnum27 = monthnum26 + 1\n    local monthnum28 = monthnum27 + 1\n    local monthnum29 = monthnum28 + 1\n    local monthnum30 = monthnum29 + 1\n    local monthnum31 = monthnum30 + 1\n    local monthnum32 = monthnum31 + 1\n    local monthnum33 = monthnum32 + 1\n    local monthnum34 = monthnum33 + 1\n    local monthnum35 = monthnum34 + 1\n    local monthnum36 = monthnum35 + 1\n    local monthnum37 = monthnum36 + 1\n    local monthnum38 = monthnum37 + 1\n    local monthnum39 = monthnum38 + 1\n    local monthnum40 =\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = check_monthnumber_number",
            "lu.assertEquals(candidate(6), true)",
            "lu.assertEquals(candidate(2), false)",
            "lu.assertEquals(candidate(12), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "763",
        "title": "find_min_diff",
        "text": "Write a luathon function to find the minimum difference between any two elements in a given table. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
        "code": "local function find_min_diff(arr, n)\n{\n    var min = Infinity;\n    for (var i = 0; i < n; i++)\n    {\n        if (arr[i] < arr[i + 1])\n        {\n            min = Math.min(min, arr[i]);\n        }\n    }\n    return min;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_min_diff",
            "lu.assertEquals(candidate({1, 5, 3, 19, 18, 25}, 6), 1)",
            "lu.assertEquals(candidate({4, 3, 2, 6}, 4), 1)",
            "lu.assertEquals(candidate({30, 5, 20, 9}, 4), 4)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "764",
        "title": "number_ctr",
        "text": "Write a luathon function to count number of digits in a given string.",
        "code": "local function number_ctr(str)\n    local count = 0\n    for i in range(len(str)):\n        count += str[i]\n    return count\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = number_ctr",
            "lu.assertEquals(candidate('program2bedone'), 1)",
            "lu.assertEquals(candidate('3wonders'), 1)",
            "lu.assertEquals(candidate('123'), 3)",
            "lu.assertEquals(candidate('3wond-1ers2'), 3)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "765",
        "title": "is_polite",
        "text": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "code": "local function is_polite(n)\n{\n    if (n == 0)\n        return true;\n    if (n == 1)\n        return false;\n    if (n % 2 == 0)\n        return true;\n    return is_polite(n - 1);\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = is_polite",
            "lu.assertEquals(candidate(7), 11)",
            "lu.assertEquals(candidate(4), 7)",
            "lu.assertEquals(candidate(9), 13)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "766",
        "title": "pair_wise",
        "text": "Write a function to return a table of all pairs of consecutive items in a given table.",
        "code": "local function pair_wise(l1)\n    local l2 = l1.map(lambda x: x.value)\n    local l3 = l2.map(lambda x: x.value)\n    local l4 = l3.map(lambda x: x.value)\n    local l5 = l4.map(lambda x: x.value)\n    local l6 = l5.map(lambda x: x.value)\n    local l7 = l6.map(lambda x: x.value)\n    local l8 = l7.map(lambda x: x.value)\n    local l9 = l8.map(lambda x: x.value)\n    local l10 = l9.map(lambda x: x.value)\n    local l11 = l10.map(lambda x: x.value)\n    local l12 = l11.map(lambda x: x.value)\n    local l13 = l12.map(lambda x: x.value)\n    local l14 = l13.map(lambda x: x.value)\n    local l15 = l14.map(lambda x: x.value)\n    local l16 = l15.map(lambda x: x.value)\n    local l17 = l16.map(lambda x: x.value)\n    local l18 = l17.map(lambda x: x.value)\n    local l19 = l18.map(lambda x: x.value)\n    local l20 = l19.map(lambda x: x.value)\n    local l21 = l20.map(lambda x: x.value)\n    local l22 = l21.map(lambda x: x.value)\n    local l23 = l22.map(lambda x: x.value)\n    local l24 = l23.map(lambda x: x.value)\n    local l25 = l24.map(lambda x: x.value)\n    local l26 = l25.map(lambda x: x.value)\n    local l27 = l26.map(lambda x: x.value)\n    local l28 = l27.map(lambda x: x\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = pair_wise",
            "lu.assertEquals(candidate({1, 1, 2, 3, 3, 4, 4, 5}), {{1, 1}, {1, 2}, {2, 3}, {3, 3}, {3, 4}, {4, 4}, {4, 5}})",
            "lu.assertEquals(candidate({1, 5, 7, 9, 10}), {{1, 5}, {5, 7}, {7, 9}, {9, 10}})",
            "lu.assertEquals(candidate({5, 1, 9, 7, 10}), {{5, 1}, {1, 9}, {9, 7}, {7, 10}})",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {9, 10}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "767",
        "title": "get_pairs_count",
        "text": "Write a luathon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a table of numbers and the sum,",
        "code": "local function get_pairs_count(arr, sum)\n{\n    var count = 0;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == sum) {\n            count++;\n        }\n    }\n    return count;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = get_pairs_count",
            "lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)",
            "lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)",
            "lu.assertEquals(candidate({1, -2, 3}, 1), 1)",
            "lu.assertEquals(candidate({-1, -2, 3}, -3), 1)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "769",
        "title": "Diff",
        "text": "Write a luathon function to get the difference between two tables.",
        "code": "local function Diff(li1, li2)\n{\n    var diff = 0;\n    for (var i = 0; i < li1.length; i++) {\n        diff += li1[i] - li2[i];\n    }\n    return diff;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = Diff",
            "lu.assertEquals(candidate({10, 15, 20, 25, 30, 35, 40}, {25, 40, 35}), {10, 20, 30, 15})",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5}, {6, 7, 1}), {2, 3, 4, 5, 6, 7})",
            "lu.assertEquals(candidate({1, 2, 3}, {6, 7, 1}), {2, 3, 6, 7})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "770",
        "title": "odd_num_sum",
        "text": "Write a luathon function to find the sum of fourth power of first n odd natural numbers.",
        "code": "local function odd_num_sum(n)\n    if n % 2 == 0\n        return n\n    else\n        return odd_num_sum(n - 1) + odd_num_sum(n - 2)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = odd_num_sum",
            "lu.assertEquals(candidate(2), 82)",
            "lu.assertEquals(candidate(3), 707)",
            "lu.assertEquals(candidate(4), 3108)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "771",
        "title": "check_expression",
        "text": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
        "code": "local function check_expression(exp)\n{\n    var result = true;\n    var stack = [];\n    var stack_length = 0;\n    var stack_index = 0;\n    var stack_index_max = 0;\n    var stack_index_min = 0;\n    var stack_index_min_max = 0;\n    var stack_index_min_max_index = 0;\n    var stack_index_min_max_index_max = 0;\n    var stack_index_min_max_index_min = 0;\n    var stack_index_min_max_index_min_max = 0;\n    var stack_index_min_max_index_min_max_index = 0;\n    var stack_index_min_max_index_min_max_index_max = 0;\n    var stack_index_min_max_index_min_max_index_max = 0;\n    var stack_index_min_max_index_min_max_index_max_index = 0;\n    var stack_index_min_max_index_min_max_index_max_index = 0;\n    var stack_index_min_max_index_min_max_index_max_index_max = 0;\n    var stack_index_min_max_index_min_max_index_max_index_max_index = 0;\n    var stack_index_min_max_index_min_max_index_max_index_max_index_max = 0;\n    var stack_index_min_max_index_min_max_index_max_index_max_index_max_index = 0;\n    var stack_index_min_max_index_min_max_index_max_index_max_index_max_index_max = 0;\n    var stack_index_min_max_index_min_max_index_max_index_max_index_max_index_max_index_max = 0;\n    var stack_index_min_max_index_min_\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = check_expression",
            "lu.assertEquals(candidate('{()}[{}]'), true)",
            "lu.assertEquals(candidate('{()}[{]'), false)",
            "lu.assertEquals(candidate('{()}[{}][]({})'), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "772",
        "title": "remove_length",
        "text": "Write a function to remove all the words with k length in the given string.",
        "code": "local function remove_length(test_str, K)\n    test_str = test_str.replace(K, '')\n    return test_str\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = remove_length",
            "lu.assertEquals(candidate('The person is most value tet', 3), 'person is most value')",
            "lu.assertEquals(candidate('If you told me about this ok', 4), 'If you me about ok')",
            "lu.assertEquals(candidate('Forces of darkeness is come into the play', 4), 'Forces of darkeness is the')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "773",
        "title": "occurance_substring",
        "text": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.",
        "code": "local function occurance_substring(text, pattern)\n    local text = text.toLowerCase()\n    local pattern = pattern.toLowerCase()\n    return text.find(pattern)\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = occurance_substring",
            "lu.assertEquals(candidate('python programming, python language', 'python'), {'python', 0, 6})",
            "lu.assertEquals(candidate('python programming,programming language', 'programming'), {'programming', 7, 18})",
            "lu.assertEquals(candidate('python programming,programming language', 'language'), {'language', 31, 39})",
            "lu.assertEquals(candidate('c++ programming, c++ language', 'python'), None)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "775",
        "title": "odd_position",
        "text": "Write a luathon function to check whether every odd index contains odd numbers of a given table.",
        "code": "local function odd_position(nums)\n    local nums = nums.map(function(i) { return i % 2 })\n    return nums.reduce(function(a, b) { return a + b })\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = odd_position",
            "lu.assertEquals(candidate({2, 1, 4, 3, 6, 7, 6, 3}), true)",
            "lu.assertEquals(candidate({4, 1, 2}), true)",
            "lu.assertEquals(candidate({1, 2, 3}), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "776",
        "title": "count_vowels",
        "text": "Write a function to count those characters which have vowels as their neighbors in the given string.",
        "code": "local function count_vowels(test_str)\n    local count = 0\n    for (let i = 0; i < test_str.length; i++)\n        if (test_str[i] === 'v')\n            count += 1\n    return count\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count_vowels",
            "lu.assertEquals(candidate('bestinstareels'), 7)",
            "lu.assertEquals(candidate('partofthejourneyistheend'), 12)",
            "lu.assertEquals(candidate('amazonprime'), 5)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "777",
        "title": "find_sum",
        "text": "Write a luathon function to find the sum of non-repeated elements in a given table.",
        "code": "local function find_sum(arr)\n    local sum = 0\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]!== arr[i]) {\n            sum += arr[i]\n        }\n    }\n    return sum\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_sum",
            "lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)",
            "lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)",
            "lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "778",
        "title": "pack_consecutive_duplicates",
        "text": "Write a function to pack consecutive duplicates of a given table elements into subtables.",
        "code": "local function pack_consecutive_duplicates(list1)\n    local list2 = list1.map(function(e) { return e + 1 });\n    local list3 = list2.map(function(e) { return e + 1 });\n    local list4 = list3.map(function(e) { return e + 1 });\n    local list5 = list4.map(function(e) { return e + 1 });\n    local list6 = list5.map(function(e) { return e + 1 });\n    local list7 = list6.map(function(e) { return e + 1 });\n    local list8 = list7.map(function(e) { return e + 1 });\n    local list9 = list8.map(function(e) { return e + 1 });\n    local list10 = list9.map(function(e) { return e + 1 });\n    local list11 = list10.map(function(e) { return e + 1 });\n    local list12 = list11.map(function(e) { return e + 1 });\n    local list13 = list12.map(function(e) { return e + 1 });\n    local list14 = list13.map(function(e) { return e + 1 });\n    local list15 = list14.map(function(e) { return e + 1 });\n    local list16 = list15.map(function(e) { return e + 1 });\n    local list17 = list16.map(function(e) { return e + 1 });\n    local list18 = list17.map(function(e) { return e + 1 });\n    local list19 = list18.map(function(e) { return e + 1 });\n    local list20 = list19.map(function(e) { return e + 1 });\n    local list21 = list20.map(function(e) { return e + 1 });\n    local list22 = list21.map(function(e) { return e + 1 });\n    local list23 = list22.map(function(e) { return e + 1 });\n    local list24 = list23.map(function(e) {\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = pack_consecutive_duplicates",
            "lu.assertEquals(candidate({0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}), {{0, 0}, {1}, {2}, {3}, {4, 4}, {5}, {6, 6, 6}, {7}, {8}, {9}, {4, 4}})",
            "lu.assertEquals(candidate({10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}), {{10, 10}, {15}, {19}, {18, 18}, {17}, {26, 26}, {17}, {18}, {10}})",
            "lu.assertEquals(candidate({'a', 'a', 'b', 'c', 'd', 'd'}), {{'a', 'a'}, {'b'}, {'c'}, {'d', 'd'}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "77",
        "title": "is_Diff",
        "text": "Write a luathon function to find whether a number is divisible by 11.",
        "code": "local function is_Diff(n)\n{\n    let result = false;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = is_Diff",
            "lu.assertEquals(candidate(12345), false)",
            "lu.assertEquals(candidate(1212112), true)",
            "lu.assertEquals(candidate(1212), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "780",
        "title": "find_combinations",
        "text": "Write a function to find the combinations of sums with tables in the given table table. https://www.geeksforgeeks.org/luathon-combinations-of-sum-with-tables-in-table-table/",
        "code": "local function find_combinations(test_list)\n{\n    var test_list = test_list.split(',');\n    var table = [];\n    var sum = 0;\n    for (var i = 0; i < test_list.length; i++)\n    {\n        sum += test_list[i];\n        table.push(sum);\n    }\n    return table;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_combinations",
            "lu.assertEquals(candidate({{2, 4}, {6, 7}, {5, 1}, {6, 10}}), {{8, 11}, {7, 5}, {8, 14}, {11, 8}, {12, 17}, {11, 11}})",
            "lu.assertEquals(candidate({{3, 5}, {7, 8}, {6, 2}, {7, 11}}), {{10, 13}, {9, 7}, {10, 16}, {13, 10}, {14, 19}, {13, 13}})",
            "lu.assertEquals(candidate({{4, 6}, {8, 9}, {7, 3}, {8, 12}}), {{12, 15}, {11, 9}, {12, 18}, {15, 12}, {16, 21}, {15, 15}})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "781",
        "title": "count_divisors",
        "text": "Write a luathon function to check whether the count of divisors is even. https://www.w3resource.com/luathon-exercises/basic/luathon-basic-1-exercise-24.php",
        "code": "local function count_divisors(n)\n{\n    let count = 0;\n    for (let i = 1; i <= n; i++)\n    {\n        if (i % 2 === 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count_divisors",
            "lu.assertEquals(candidate(10), true)",
            "lu.assertEquals(candidate(100), false)",
            "lu.assertEquals(candidate(125), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "782",
        "title": "odd_length_sum",
        "text": "Write a luathon function to find the sum of all odd length subtables. https://www.geeksforgeeks.org/sum-of-all-odd-length-subtables/",
        "code": "local function odd_length_sum(arr)\n{\n    var sum = 0;\n    for (var i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 1)\n        {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = odd_length_sum",
            "lu.assertEquals(candidate({1, 2, 4}), 14)",
            "lu.assertEquals(candidate({1, 2, 1, 2}), 15)",
            "lu.assertEquals(candidate({1, 7}), 8)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "783",
        "title": "rgb_to_hsv",
        "text": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/",
        "code": "local function rgb_to_hsv(r, g, b)\n{\n    var h = 0, s = 0, v = 0;\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var delta = max - min;\n    var delta_h = delta / 360;\n    var delta_s = delta_h / 60;\n    var delta_v = delta_h / 100;\n    var h = max + min;\n    var c = max - min;\n    var m = max;\n    var v = max;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var n = 0;\n    var p = 0;\n    var q = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 1;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 1;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = rgb_to_hsv",
            "lu.assertEquals(candidate(255, 255, 255), {0.0, 0.0, 100.0})",
            "lu.assertEquals(candidate(0, 215, 0), {120.0, 100.0, 84.31372549019608})",
            "lu.assertEquals(candidate(10, 215, 110), {149.26829268292684, 95.34883720930233, 84.31372549019608})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "784",
        "title": "mul_even_odd",
        "text": "Write a function to find the product of first even and odd number of a given table.",
        "code": "local function mul_even_odd(list1)\n    local list2 = list1.map(function(x) { return x * x })\n    local list3 = list2.map(function(x) { return x * x })\n    local list4 = list3.map(function(x) { return x * x })\n    local list5 = list4.map(function(x) { return x * x })\n    local list6 = list5.map(function(x) { return x * x })\n    local list7 = list6.map(function(x) { return x * x })\n    local list8 = list7.map(function(x) { return x * x })\n    local list9 = list8.map(function(x) { return x * x })\n    local list10 = list9.map(function(x) { return x * x })\n    local list11 = list10.map(function(x) { return x * x })\n    local list12 = list11.map(function(x) { return x * x })\n    local list13 = list12.map(function(x) { return x * x })\n    local list14 = list13.map(function(x) { return x * x })\n    local list15 = list14.map(function(x) { return x * x })\n    local list16 = list15.map(function(x) { return x * x })\n    local list17 = list16.map(function(x) { return x * x })\n    local list18 = list17.map(function(x) { return x * x })\n    local list19 = list18.map(function(x) { return x * x })\n    local list20 = list19.map(function(x) { return x * x })\n    local list21 = list20.map(function(x) { return x * x })\n    local list22 = list21.map(function(x) { return x * x })\n    local list23 = list22.map(function(x) { return x * x })\n    local list24 = list23.map(function(x) { return x *\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = mul_even_odd",
            "lu.assertEquals(candidate({1, 3, 5, 7, 4, 1, 6, 8}), 4)",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), 2)",
            "lu.assertEquals(candidate({1, 5, 7, 9, 10}), 10)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "785",
        "title": "tuple_str_int",
        "text": "Write a function to convert table string to integer table.",
        "code": "local function tuple_str_int(test_str)\n    return test_str.split(',')\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = tuple_str_int",
            "lu.assertEquals(candidate('(7, 8, 9)'), {7, 8, 9})",
            "lu.assertEquals(candidate('(1, 2, 3)'), {1, 2, 3})",
            "lu.assertEquals(candidate('(4, 5, 6)'), {4, 5, 6})",
            "lu.assertEquals(candidate('(7, 81, 19)'), {7, 81, 19})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "786",
        "title": "right_insertion",
        "text": "Write a function to locate the right insertion point for a specified value in sorted order.",
        "code": "local function right_insertion(a, x)\n    local x = x\n    local a = a\n    while (a < x)\n        a = a + 1\n    return a\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = right_insertion",
            "lu.assertEquals(candidate({1, 2, 4, 5}, 6), 4)",
            "lu.assertEquals(candidate({1, 2, 4, 5}, 3), 2)",
            "lu.assertEquals(candidate({1, 2, 4, 5}, 7), 4)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "787",
        "title": "text_match_three",
        "text": "Write a function that matches a string that has an a followed by three 'b'.",
        "code": "local function text_match_three(text)\n    return text.match(/b/)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = text_match_three",
            "lu.assertEquals(candidate('ac'), false)",
            "lu.assertEquals(candidate('dc'), false)",
            "lu.assertEquals(candidate('abbbba'), true)",
            "lu.assertEquals(candidate('caacabbbba'), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "788",
        "title": "new_tuple",
        "text": "Write a function to create a new table from the given string and table.",
        "code": "local function new_tuple(test_list, test_str)\n    local table = new_table(test_list, test_str);\n    return table;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = new_tuple",
            "lu.assertEquals(candidate({'WEB', 'is'}, 'best'), {'WEB', 'is', 'best'})",
            "lu.assertEquals(candidate({'We', 'are'}, 'Developers'), {'We', 'are', 'Developers'})",
            "lu.assertEquals(candidate({'Part', 'is'}, 'Wrong'), {'Part', 'is', 'Wrong'})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "790",
        "title": "even_position",
        "text": "Write a luathon function to check whether every even index contains even numbers of a given table.",
        "code": "local function even_position(nums)\n    local table = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n    local table_length = len(table)\n    local table_index = 0\n    for i in range(table_length):\n        if table[i] % 2 == 0:\n            table_index = i\n            break\n    return table_index\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = even_position",
            "lu.assertEquals(candidate({3, 2, 1}), false)",
            "lu.assertEquals(candidate({1, 2, 3}), false)",
            "lu.assertEquals(candidate({2, 1, 4}), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "791",
        "title": "remove_nested",
        "text": "Write a function to remove tables from the given table.",
        "code": "local function remove_nested(test_tup)\n  test_tup.tables = test_tup.tables.filter(tables_to_remove)\n  test_tup.tables = test_tup.tables.filter(tables_to_remove)\n  test_tup.tables = test_tup.tables.filter(tables_to_remove)\n  test_tup.tables = test_tup.tables.filter(tables_to_remove)\n  test_tup.tables = test_tup.tables.filter(tables_to_remove)\n  test_tup.tables = test_tup.tables.filter(tables_to_remove)\n  test_tup.tables = test_tup.tables.filter(tables_to_remove)\n  test_tup.tables = test_tup.tables.filter(tables_to_remove)\n  test_tup.tables = test_tup.tables.filter(tables_to_remove)\n  test_tup.tables = test_tup.tables.filter(tables_to_remove)\n  test_tup.tables = test_tup.tables.filter(tables_to_remove)\n  test_tup.tables = test_tup.tables.filter(tables_to_remove)\n  test_tup.tables = test_tup.tables.filter(tables_to_remove)\n  test_tup.tables = test_tup.tables.filter(tables_to_remove)\n  test_tup.tables = test_tup.tables.filter(tables_to_remove)\n  test_tup.tables = test_tup.tables.filter(tables_to_remove)\n  test_tup.tables = test_tup.tables.filter(tables_to_remove)\n  test_tup.tables = test_tup.tables.filter(tables_to_remove)\n\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = remove_nested",
            "lu.assertEquals(candidate({1, 5, 7, {4, 6}, 10}), {1, 5, 7, 10})",
            "lu.assertEquals(candidate({2, 6, 8, {5, 7}, 11}), {2, 6, 8, 11})",
            "lu.assertEquals(candidate({3, 7, 9, {6, 8}, 12}), {3, 7, 9, 12})",
            "lu.assertEquals(candidate({3, 7, 9, {6, 8}, {5, 12}, 12}), {3, 7, 9, 12})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "792",
        "title": "count_list",
        "text": "Write a luathon function to count the number of tables in a given number of tables.",
        "code": "local function count_list(input_list)\n    local count = 0\n    for (let i = 0; i < input_list.length; i++) {\n        count += input_list[i]\n    }\n    return count\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count_list",
            "lu.assertEquals(candidate({{1, 3}, {5, 7}, {9, 11}, {13, 15, 17}}), 4)",
            "lu.assertEquals(candidate({{1, 2}, {2, 3}, {4, 5}}), 3)",
            "lu.assertEquals(candidate({{1, 0}, {2, 0}}), 2)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "793",
        "title": "last",
        "text": "Write a luathon function to find the last position of an element in a sorted table.",
        "code": "local function last(arr, x)\n    local x = x\n    for (let i = 0; i < arr.length; i++)\n        if (arr[i] > x)\n            x = arr[i]\n    return x\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = last",
            "lu.assertEquals(candidate({1, 2, 3}, 1), 0)",
            "lu.assertEquals(candidate({1, 1, 1, 2, 3, 4}, 1), 2)",
            "lu.assertEquals(candidate({2, 3, 2, 3, 6, 8, 9}, 3), 3)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "794",
        "title": "text_starta_endb",
        "text": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "code": "local function text_starta_endb(text)\n    return text.match(/a/g)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = text_starta_endb",
            "lu.assertEquals(candidate('aabbbb'), true)",
            "lu.assertEquals(candidate('aabAbbbc'), false)",
            "lu.assertEquals(candidate('accddbbjjj'), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "796",
        "title": "return_sum",
        "text": "Write function to find the sum of all items in the given table.",
        "code": "local function return_sum(dict)\n    local sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = return_sum",
            "lu.assertEquals(candidate({['a'] = 100, ['b'] = 200, ['c'] = 300}), 600)",
            "lu.assertEquals(candidate({['a'] = 25, ['b'] = 18, ['c'] = 45}), 88)",
            "lu.assertEquals(candidate({['a'] = 36, ['b'] = 39, ['c'] = 49}), 124)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "797",
        "title": "sum_in_range",
        "text": "Write a luathon function to find the sum of all odd natural numbers within the range l and r.",
        "code": "local function sum_in_range(l, r)\n\tlocal sum = 0\n\tfor i in range(l, r + 1)\n\t\tsum += i\n\treturn sum\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sum_in_range",
            "lu.assertEquals(candidate(2, 5), 8)",
            "lu.assertEquals(candidate(5, 7), 12)",
            "lu.assertEquals(candidate(7, 13), 40)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "798",
        "title": "_sum",
        "text": "Write a luathon function to find the sum of a table.",
        "code": "local function _sum(arr)\n    {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++)\n        {\n        sum += arr[i];\n        }\n    return sum;\n    }\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = _sum",
            "lu.assertEquals(candidate({1, 2, 3}), 6)",
            "lu.assertEquals(candidate({15, 12, 13, 10}), 50)",
            "lu.assertEquals(candidate({0, 1, 2}), 3)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "799",
        "title": "left_rotate",
        "text": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
        "code": "local function left_rotate(n, d)\n    if (n < 0)\n        return -1\n    if (n == 0)\n        return 0\n    if (n == 1)\n        return 1\n    if (n == 2)\n        return 2\n    if (n == 3)\n        return 3\n    if (n == 4)\n        return 4\n    if (n == 5)\n        return 5\n    if (n == 6)\n        return 6\n    if (n == 7)\n        return 7\n    if (n == 8)\n        return 8\n    if (n == 9)\n        return 9\n    if (n == 10)\n        return 10\n    if (n == 11)\n        return 11\n    if (n == 12)\n        return 12\n    if (n == 13)\n        return 13\n    if (n == 14)\n        return 14\n    if (n == 15)\n        return 15\n    if (n == 16)\n        return 16\n    if (n == 17)\n        return 17\n    if (n == 18)\n        return 18\n    if (n == 19)\n        return 19\n    if (n == 20)\n        return 20\n    if (n == 21)\n        return 21\n    if (n == 22)\n        return 22\n    if (n == 23)\n        return 23\n    if (n == 24)\n        return 24\n    if (n == 25)\n        return 25\n    if (n == 26)\n        return 26\n    if (n == 27)\n        return 27\n    if (n == 28)\n        return 28\n    if (n == 29)\n        return 29\n    if (n == 30)\n        return 30\n    if (n == 31)\n        return 31\n    if (n == 32)\n        return 32\n    if (n == 33)\n        return 33\n    if (n == 34)\n        return 34\n    if (n == 35)\n        return 35\n    if (n == 36)\n        return 36\n    if (n == 37)\n        return 37\n    if (n ==\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = left_rotate",
            "lu.assertEquals(candidate(16, 2), 64)",
            "lu.assertEquals(candidate(10, 2), 40)",
            "lu.assertEquals(candidate(99, 3), 792)",
            "lu.assertEquals(candidate(99, 3), 792)",
            "lu.assertEquals(candidate(1, 3), 8)",
            "lu.assertEquals(candidate(5, 3), 40)",
            "lu.assertEquals(candidate(29, 3), 232)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "79",
        "title": "word_len",
        "text": "Write a luathon function to check whether the length of the word is odd or not.",
        "code": "local function word_len(s)\n    return len(s)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = word_len",
            "lu.assertEquals(candidate('Hadoop'), false)",
            "lu.assertEquals(candidate('great'), true)",
            "lu.assertEquals(candidate('structure'), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "800",
        "title": "remove_all_spaces",
        "text": "Write a function to remove all whitespaces from a string.",
        "code": "local function remove_all_spaces(text)\n{\n    return text.replace(/\\s+/g, '');\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = remove_all_spaces",
            "lu.assertEquals(candidate('python  program'), 'pythonprogram')",
            "lu.assertEquals(candidate('python   programming    language'), 'pythonprogramminglanguage')",
            "lu.assertEquals(candidate('python                     program'), 'pythonprogram')",
            "lu.assertEquals(candidate('   python                     program'), 'pythonprogram')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "801",
        "title": "test_three_equal",
        "text": "Write a luathon function to count the number of equal numbers from three given integers.",
        "code": "local function test_three_equal(x, y, z)\n    if (x == y)\n        return z\n    if (x == z)\n        return y\n    if (x == y)\n        return z\n    if (x == z)\n        return y\n    if (x == y)\n        return z\n    if (x == z)\n        return y\n    if (x == y)\n        return z\n    if (x == z)\n        return y\n    if (x == y)\n        return z\n    if (x == z)\n        return y\n    if (x == y)\n        return z\n    if (x == z)\n        return y\n    if (x == y)\n        return z\n    if (x == z)\n        return y\n    if (x == y)\n        return z\n    if (x == z)\n        return y\n    if (x == y)\n        return z\n    if (x == z)\n        return y\n    if (x == y)\n        return z\n    if (x == z)\n        return y\n    if (x == y)\n        return z\n    if (x == z)\n        return y\n    if (x == y)\n        return z\n    if (x == z)\n        return y\n    if (x == y)\n        return z\n    if (x == z)\n        return y\n    if (x == y)\n        return z\n    if (x == z)\n        return y\n    if (x == y)\n        return z\n    if (x == z)\n        return y\n    if (x == y)\n        return z\n    if (x == z)\n        return y\n    if (x == y)\n        return z\n    if (x == z)\n        return y\n    if (x == y)\n        return z\n    if (x == z)\n        return y\n    if (x == y)\n        return z\n    if (x == z)\n        return y\n    if (x == y)\n        return z\n    if (x == z)\n        \n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = test_three_equal",
            "lu.assertEquals(candidate(1, 1, 1), 3)",
            "lu.assertEquals(candidate(-1, -2, -3), 0)",
            "lu.assertEquals(candidate(1, 2, 2), 2)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "802",
        "title": "count_rotation",
        "text": "Write a luathon function to count the number of rotations required to generate a sorted table. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-table/",
        "code": "local function count_rotation(arr)\n{\n    let count = 0;\n    for (let i = 0; i < arr.length; i++)\n    {\n        if (arr[i] === 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = count_rotation",
            "lu.assertEquals(candidate({3, 2, 1}), 1)",
            "lu.assertEquals(candidate({4, 5, 1, 2, 3}), 2)",
            "lu.assertEquals(candidate({7, 8, 9, 1, 2, 3}), 3)",
            "lu.assertEquals(candidate({1, 2, 3}), 0)",
            "lu.assertEquals(candidate({1, 3, 2}), 2)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "803",
        "title": "is_perfect_square",
        "text": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
        "code": "local function is_perfect_square(n)\n{\n    if (n == 1)\n        return true;\n    if (n == 2)\n        return true;\n    if (n == 3)\n        return true;\n    if (n == 4)\n        return true;\n    if (n == 5)\n        return true;\n    if (n == 6)\n        return true;\n    if (n == 7)\n        return true;\n    if (n == 8)\n        return true;\n    if (n == 9)\n        return true;\n    if (n == 10)\n        return true;\n    if (n == 11)\n        return true;\n    if (n == 12)\n        return true;\n    if (n == 13)\n        return true;\n    if (n == 14)\n        return true;\n    if (n == 15)\n        return true;\n    if (n == 16)\n        return true;\n    if (n == 17)\n        return true;\n    if (n == 18)\n        return true;\n    if (n == 19)\n        return true;\n    if (n == 20)\n        return true;\n    if (n == 21)\n        return true;\n    if (n == 22)\n        return true;\n    if (n == 23)\n        return true;\n    if (n == 24)\n        return true;\n    if (n == 25)\n        return true;\n    if (n == 26)\n        return true;\n    if (n == 27)\n        return true;\n    if (n == 28)\n        return true;\n    if (n == 29)\n        return true;\n    if (n == 30)\n        return true;\n    if (n == 31)\n        return true;\n    if (n == 32)\n        return true;\n    if (n == 33)\n        return true;\n    if (n == 34)\n        return true;\n    if (n == 35)\n        return\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = is_perfect_square",
            "lu.assertEquals(candidate(10), false)",
            "lu.assertEquals(candidate(36), true)",
            "lu.assertEquals(candidate(14), false)",
            "lu.assertEquals(candidate(196), true)",
            "lu.assertEquals(candidate(125), false)",
            "lu.assertEquals(candidate(15625), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "804",
        "title": "is_product_even",
        "text": "Write a function to check whether the product of numbers in a table is even or not.",
        "code": "local function is_product_even(arr)\n    local product = 1\n    for (let i = 0; i < arr.length; i++)\n        product *= arr[i]\n    return product % 2 == 0\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = is_product_even",
            "lu.assertEquals(candidate({1, 2, 3}), true)",
            "lu.assertEquals(candidate({1, 2, 1, 4}), true)",
            "lu.assertEquals(candidate({1, 1}), false)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "805",
        "title": "max_sum_list",
        "text": "Write a function that returns the table in a table of tables whose sum of elements is the highest.",
        "code": "local function max_sum_list(lists)\n    local sum = 0\n    for list in lists\n        sum = sum + list[0]\n    return sum\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = max_sum_list",
            "lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}}), {10, 11, 12})",
            "lu.assertEquals(candidate({{3, 2, 1}, {6, 5, 4}, {12, 11, 10}}), {12, 11, 10})",
            "lu.assertEquals(candidate({{2, 3, 1}}), {2, 3, 1})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "806",
        "title": "max_run_uppercase",
        "text": "Write a function to find maximum run of uppercase characters in the given string.",
        "code": "local function max_run_uppercase(test_str)\n    return test_str.length > 0? test_str.charAt(0) : '';\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = max_run_uppercase",
            "lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)",
            "lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)",
            "lu.assertEquals(candidate('GooGLEFluTTER'), 4)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "807",
        "title": "first_odd",
        "text": "Write a luathon function to find the first odd number in a given table of numbers.",
        "code": "local function first_odd(nums)\n    local nums = nums.map(function(x) { return x % 2 })\n    return nums.find(function(x) { return x % 2 })\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = first_odd",
            "lu.assertEquals(candidate({1, 3, 5}), 1)",
            "lu.assertEquals(candidate({2, 4, 1, 3}), 1)",
            "lu.assertEquals(candidate({8, 9, 1}), 9)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "808",
        "title": "check_K",
        "text": "Write a function to check if the given tables contain the k or not.",
        "code": "local function check_K(test_tup, K)\n    if (test_tup[0] == 'k')\n        return K\n    else\n        return False\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = check_K",
            "lu.assertEquals(candidate({10, 4, 5, 6, 8}, 6), true)",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, 7), false)",
            "lu.assertEquals(candidate({7, 8, 9, 44, 11, 12}, 11), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "809",
        "title": "check_smaller",
        "text": "Write a function to check if each element of second table is smaller than its corresponding element in the first table.",
        "code": "local function check_smaller(test_tup1, test_tup2)\n    local table_tup = test_tup1.slice(0, test_tup1.length);\n    local table_tup2 = test_tup2.slice(0, test_tup2.length);\n    return table_tup.length < table_tup2.length;\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = check_smaller",
            "lu.assertEquals(candidate({1, 2, 3}, {2, 3, 4}), false)",
            "lu.assertEquals(candidate({4, 5, 6}, {3, 4, 5}), true)",
            "lu.assertEquals(candidate({11, 12, 13}, {10, 11, 12}), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "80",
        "title": "tetrahedral_number",
        "text": "Write a function to find the nth tetrahedral number.",
        "code": "local function tetrahedral_number(n)\n    local function find_nth_tetrahedral_number(n)\n        local function find_nth_tetrahedral_number_1(n)\n            local function find_nth_tetrahedral_number_2(n)\n                local function find_nth_tetrahedral_number_3(n)\n                    local function find_nth_tetrahedral_number_4(n)\n                        local function find_nth_tetrahedral_number_5(n)\n                            local function find_nth_tetrahedral_number_6(n)\n                                local function find_nth_tetrahedral_number_7(n)\n                                    local function find_nth_tetrahedral_number_8(n)\n                                        local function find_nth_tetrahedral_number_9(n)\n                                            local function find_nth_tetrahedral_number_10(n)\n                                                local function find_nth_tetrahedral_number_11(n)\n                                                    local function find_nth_tetrahedral_number_12(n)\n                                                        local function find_nth_tetrahedral_number_13(n)\n                                                            local function find_nth_tetrahedral_number_14(n)\n                                                            local function find_nth_tetrahedral_number_15(n)\n                                                            local function find_nth_tetrahedral_number_16(n)\n                                                            local function find_nth_tetrahedral_number_17(n)\n                                                            local function find_nth_tetrahedral_number_18(n)\n                                                            local function find_nth_tetrahedral_number_19(n)\n                                      \n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = tetrahedral_number",
            "lu.assertEquals(candidate(5), 35)",
            "lu.assertEquals(candidate(6), 56)",
            "lu.assertEquals(candidate(7), 84)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "83",
        "title": "get_Char",
        "text": "Write a luathon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
        "code": "local function get_Char(strr)\n    return strr.charAt(strr.indexOf(strr.charAt(0)) + 1)\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = get_Char",
            "lu.assertEquals(candidate('abc'), 'f')",
            "lu.assertEquals(candidate('gfg'), 't')",
            "lu.assertEquals(candidate('ab'), 'c')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "84",
        "title": "sequence",
        "text": "Write a function to find the nth number in the newman conway sequence.",
        "code": "local function sequence(n)\n    local n = n\n    if n == 0\n        return 0\n    if n == 1\n        return 1\n    if n == 2\n        return 2\n    if n == 3\n        return 3\n    if n == 4\n        return 4\n    if n == 5\n        return 5\n    if n == 6\n        return 6\n    if n == 7\n        return 7\n    if n == 8\n        return 8\n    if n == 9\n        return 9\n    if n == 10\n        return 10\n    if n == 11\n        return 11\n    if n == 12\n        return 12\n    if n == 13\n        return 13\n    if n == 14\n        return 14\n    if n == 15\n        return 15\n    if n == 16\n        return 16\n    if n == 17\n        return 17\n    if n == 18\n        return 18\n    if n == 19\n        return 19\n    if n == 20\n        return 20\n    if n == 21\n        return 21\n    if n == 22\n        return 22\n    if n == 23\n        return 23\n    if n == 24\n        return 24\n    if n == 25\n        return 25\n    if n == 26\n        return 26\n    if n == 27\n        return 27\n    if n == 28\n        return 28\n    if n == 29\n        return 29\n    if n == 30\n        return 30\n    if n == 31\n        return 31\n    if n == 32\n        return 32\n    if n == 33\n        return 33\n    if n == 34\n        return 34\n    if n == 35\n        return 35\n    if n == 36\n        return 36\n    if n == 37\n        return 37\n    if n == 38\n        return 38\n    if n == 39\n        return 39\n    if n == 40\n        return 40\n    if n == 41\n        return 41\n    if n == 42\n        return 42\n    if n == 43\n        return 43\n    if n == 44\n        return 44\n    if n == 45\n        return 45\n    if n == 46\n        return 46\n    if n == 47\n        return 47\n\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = sequence",
            "lu.assertEquals(candidate(10), 6)",
            "lu.assertEquals(candidate(2), 1)",
            "lu.assertEquals(candidate(3), 2)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "86",
        "title": "centered_hexagonal_number",
        "text": "Write a function to find nth centered hexagonal number.",
        "code": "local function centered_hexagonal_number(n)\n    return n % 2 == 0? n : n - 1;\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = centered_hexagonal_number",
            "lu.assertEquals(candidate(10), 271)",
            "lu.assertEquals(candidate(2), 7)",
            "lu.assertEquals(candidate(9), 217)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "87",
        "title": "merge_dictionaries_three",
        "text": "Write a function to merge three dictionaries into a single table.",
        "code": "local function merge_dictionaries_three(dict1, dict2, dict3)\n    :param dict1: first dictionary\n    :param dict2: second dictionary\n    :param dict3: third dictionary\n    :return: merged dictionary\n    \"\"\"\n    merged = {}\n    for key in dict1:\n        merged[key] = dict1[key]\n    for key in dict2:\n        merged[key] = dict2[key]\n    for key in dict3:\n        merged[key] = dict3[key]\n    return merged\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = merge_dictionaries_three",
            "lu.assertEquals(candidate({['R'] = 'Red', ['B'] = 'Black', ['P'] = 'Pink'}, {['G'] = 'Green', ['W'] = 'White'}, {['O'] = 'Orange', ['W'] = 'White', ['B'] = 'Black'}), {['B'] = 'Black', ['R'] = 'Red', ['P'] = 'Pink', ['G'] = 'Green', ['W'] = 'White', ['O'] = 'Orange'})",
            "lu.assertEquals(candidate({['R'] = 'Red', ['B'] = 'Black', ['P'] = 'Pink'}, {['G'] = 'Green', ['W'] = 'White'}, {['L'] = 'lavender', ['B'] = 'Blue'}), {['W'] = 'White', ['P'] = 'Pink', ['B'] = 'Black', ['R'] = 'Red', ['G'] = 'Green', ['L'] = 'lavender'})",
            "lu.assertEquals(candidate({['R'] = 'Red', ['B'] = 'Black', ['P'] = 'Pink'}, {['L'] = 'lavender', ['B'] = 'Blue'}, {['G'] = 'Green', ['W'] = 'White'}), {['B'] = 'Black', ['P'] = 'Pink', ['R'] = 'Red', ['G'] = 'Green', ['L'] = 'lavender', ['W'] = 'White'})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "88",
        "title": "freq_count",
        "text": "Write a function to get the frequency of all the elements in a table, returned as a table.",
        "code": "local function freq_count(list1)\n    local list2 = list1.map(lambda x: x.frequency)\n    local list3 = list2.map(lambda x: x.frequency)\n    local list4 = list3.map(lambda x: x.frequency)\n    local list5 = list4.map(lambda x: x.frequency)\n    local list6 = list5.map(lambda x: x.frequency)\n    local list7 = list6.map(lambda x: x.frequency)\n    local list8 = list7.map(lambda x: x.frequency)\n    local list9 = list8.map(lambda x: x.frequency)\n    local list10 = list9.map(lambda x: x.frequency)\n    local list11 = list10.map(lambda x: x.frequency)\n    local list12 = list11.map(lambda x: x.frequency)\n    local list13 = list12.map(lambda x: x.frequency)\n    local list14 = list13.map(lambda x: x.frequency)\n    local list15 = list14.map(lambda x: x.frequency)\n    local list16 = list15.map(lambda x: x.frequency)\n    local list17 = list16.map(lambda x: x.frequency)\n    local list18 = list17.map(lambda x: x.frequency)\n    local list19 = list18.map(lambda x: x.frequency)\n    local list20 = list19.map(lambda x: x.frequency)\n    local list21 = list20.map(lambda x: x.frequency)\n    local list22 = list21.map(lambda x: x.frequency)\n    local list23 = list22.map(lambda x: x.frequency)\n    local list24 = list23.map(lambda x: x.frequency)\n    local list25 = list24.map(lambda x: x.frequency)\n    local list26 = list25.map(lambda x: x.frequency)\n    local list27 = list26.map(lambda x: x.frequency)\n    local list28 = list27.map(lambda\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = freq_count",
            "lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})",
            "lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})",
            "lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "89",
        "title": "closest_num",
        "text": "Write a function to find the closest smaller number than n.",
        "code": "local function closest_num(N)\n    return N.to_int()\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = closest_num",
            "lu.assertEquals(candidate(11), 10)",
            "lu.assertEquals(candidate(7), 6)",
            "lu.assertEquals(candidate(12), 11)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "8",
        "title": "square_nums",
        "text": "Write a function to find squares of individual elements in a table.",
        "code": "local function square_nums(nums)\n    return nums.map(function(num) { return num * num })\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = square_nums",
            "lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), {1, 4, 9, 16, 25, 36, 49, 64, 81, 100})",
            "lu.assertEquals(candidate({10, 20, 30}), {100, 400, 900})",
            "lu.assertEquals(candidate({12, 15}), {144, 225})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "90",
        "title": "len_log",
        "text": "Write a luathon function to find the length of the longest word.",
        "code": "local function len_log(list1)\n{\n    let max = 0;\n    let max_len = 0;\n    let len = 0;\n    for (let i = 0; i < list1.length; i++) {\n        let word = list1[i];\n        let len_word = len_log(word);\n        if (len_word > max) {\n            max = len_word;\n            max_len = i;\n        }\n        len += len_word;\n    }\n    return max_len;\n}\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = len_log",
            "lu.assertEquals(candidate({'python', 'PHP', 'bigdata'}), 7)",
            "lu.assertEquals(candidate({'a', 'ab', 'abc'}), 3)",
            "lu.assertEquals(candidate({'small', 'big', 'tall'}), 5)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "91",
        "title": "find_substring",
        "text": "Write a function to check if a string is present as a substring in a given table of string values.",
        "code": "local function find_substring(str1, sub_str)\n    local str2 = str1.substring(sub_str)\n    return str2\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_substring",
            "lu.assertEquals(candidate({'red', 'black', 'white', 'green', 'orange'}, 'ack'), true)",
            "lu.assertEquals(candidate({'red', 'black', 'white', 'green', 'orange'}, 'abc'), false)",
            "lu.assertEquals(candidate({'red', 'black', 'white', 'green', 'orange'}, 'ange'), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "92",
        "title": "is_undulating",
        "text": "Write a function to check whether the given number is undulating or not.",
        "code": "local function is_undulating(n)\n    return n % 2 == 0\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = is_undulating",
            "lu.assertEquals(candidate(1212121), true)",
            "lu.assertEquals(candidate(1991), false)",
            "lu.assertEquals(candidate(121), true)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "93",
        "title": "power",
        "text": "Write a function to calculate the value of 'a' to the power 'b'.",
        "code": "local function power(a, b)\n    return a * b\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = power",
            "lu.assertEquals(candidate(3, 4), 81)",
            "lu.assertEquals(candidate(2, 3), 8)",
            "lu.assertEquals(candidate(5, 5), 3125)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "94",
        "title": "index_minimum",
        "text": "Given a table of tables, write a function that returns the first value of the table with the smallest second value.",
        "code": "local function index_minimum(test_list)\n    local table = test_list\n    local value = table[0]\n    local index = 0\n    for (index = 1; index < table.length; index++)\n        if (table[index] < value)\n            value = table[index]\n    return value\nend\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = index_minimum",
            "lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')",
            "lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')",
            "lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "95",
        "title": "Find_Min_Length",
        "text": "Write a luathon function to find the length of the smallest table in a table of tables.",
        "code": "local function Find_Min_Length(lst)\n\tlocal lst = lst\n\tlocal l = 0\n\tfor (l = 0; l < lst.length; l++)\n\t\tif (lst[l] > l)\n\t\t\tl = l + 1\n\treturn l\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = Find_Min_Length",
            "lu.assertEquals(candidate({{1}, {1, 2}}), 1)",
            "lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)",
            "lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "96",
        "title": "divisor",
        "text": "Write a luathon function to find the number of divisors of a given integer.",
        "code": "local function divisor(n)\n    return n / 2\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = divisor",
            "lu.assertEquals(candidate(15), 4)",
            "lu.assertEquals(candidate(12), 6)",
            "lu.assertEquals(candidate(9), 3)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "97",
        "title": "frequency_lists",
        "text": "Write a function to find frequency of each element in a flattened table of tables, returned in a table.",
        "code": "local function frequency_lists(list1)\n    local list2 = list1.map(lambda x: x.length)\n    local list3 = list2.map(lambda x: x.map(lambda y: y.length))\n    local list4 = list3.map(lambda x: x.map(lambda y: y.map(lambda z: z.length)))\n    local list5 = list4.map(lambda x: x.map(lambda y: y.map(lambda z: z.map(lambda x: x.length))))\n    local list6 = list5.map(lambda x: x.map(lambda y: y.map(lambda z: z.map(lambda x: x.length))))\n    local list7 = list6.map(lambda x: x.map(lambda y: y.map(lambda z: z.map(lambda x: x.length))))\n    local list8 = list7.map(lambda x: x.map(lambda y: y.map(lambda z: z.map(lambda x: x.length))))\n    local list9 = list8.map(lambda x: x.map(lambda y: y.map(lambda z: z.map(lambda x: x.length))))\n    local list10 = list9.map(lambda x: x.map(lambda y: y.map(lambda z: z.map(lambda x: x.length))))\n    local list11 = list10.map(lambda x: x.map(lambda y: y.map(lambda z: z.map(lambda x: x.length))))\n    local list12 = list11.map(lambda x: x.map(lambda y: y.map(lambda z: z.map(lambda x: x.length))))\n    local list13 = list12.map(lambda x: x.map(lambda y: y.map(lambda z: z.map(lambda x: x.length))))\n    local list14 = list13.map(lambda x: x.map(lambda y: y.map(lambda z: z.map(lambda x: x.length))))\n    local list15 = list14.map(lambda x: x\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = frequency_lists",
            "lu.assertEquals(candidate({{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 8, 9, 5}}), {[1] = 1, [2] = 3, [3] = 1, [4] = 1, [5] = 2, [6] = 1, [7] = 1, [8] = 1, [9] = 1})",
            "lu.assertEquals(candidate({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}}), {[1] = 1, [2] = 1, [3] = 1, [4] = 1, [5] = 1, [6] = 1, [7] = 1, [8] = 1, [9] = 1, [10] = 1, [11] = 1, [12] = 1})",
            "lu.assertEquals(candidate({{20, 30, 40, 17}, {18, 16, 14, 13}, {10, 20, 30, 40}}), {[20] = 2, [30] = 2, [40] = 2, [17] = 1, [18] = 1, [16] = 1, [14] = 1, [13] = 1, [10] = 1})",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "99",
        "title": "decimal_to_binary",
        "text": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "code": "local function decimal_to_binary(n)\n    return n.to_string().replace(/0+$/, '')\nend function\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = decimal_to_binary",
            "lu.assertEquals(candidate(8), '1000')",
            "lu.assertEquals(candidate(18), '10010')",
            "lu.assertEquals(candidate(7), '111')",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    },
    {
        "task_id": "9",
        "title": "find_Rotations",
        "text": "Write a luathon function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "code": "local function find_Rotations(str)\n    local str = str\n    local min = 0\n    for i in range(0, len(str)):\n        if str[i] == 'R':\n            min = i\n    return min\n",
        "test_list": [
            "lu = require('luaunit')",
            "function test_humaneval()",
            "local candidate = find_Rotations",
            "lu.assertEquals(candidate('aaaa'), 1)",
            "lu.assertEquals(candidate('ab'), 2)",
            "lu.assertEquals(candidate('abc'), 3)",
            "end",
            "os.exit(lu.LuaUnit.run())"
        ]
    }
]