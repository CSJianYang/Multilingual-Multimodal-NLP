[
    {
        "title": "Article Views I",
        "question_content": "Table: Views\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| article_id    | int     |\n| author_id     | int     |\n| viewer_id     | int     |\n| view_date     | date    |\n+---------------+---------+\nThere is no primary key (column with unique values) for this table, the table may have duplicate rows.\nEach row of this table indicates that some viewer viewed an article (written by some author) on some date. \nNote that equal author_id and viewer_id indicate the same person.\n\n&nbsp;\nWrite a solution to find all the authors that viewed at least one of their own articles.\nReturn the result table sorted by id in ascending order.\nThe result format is in the following example.\n&nbsp;\nExample 1:\n\nInput: \nViews table:\n+------------+-----------+-----------+------------+\n| article_id | author_id | viewer_id | view_date  |\n+------------+-----------+-----------+------------+\n| 1          | 3         | 5         | 2019-08-01 |\n| 1          | 3         | 6         | 2019-08-02 |\n| 2          | 7         | 7         | 2019-08-01 |\n| 2          | 7         | 6         | 2019-08-02 |\n| 4          | 7         | 1         | 2019-07-22 |\n| 3          | 4         | 4         | 2019-07-21 |\n| 3          | 4         | 4         | 2019-07-21 |\n+------------+-----------+-----------+------------+\nOutput: \n+------+\n| id   |\n+------+\n| 4    |\n| 7    |\n+------+",
        "solutions": [
            {
                "id": 3704391,
                "title": "sql-simple-straight-forward-approach",
                "content": "```\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id from Views\\nwhere author_id = viewer_id \\norder by id;\\n```\\n\\n![image](https://assets.leetcode.com/users/images/39451a8b-4887-46f6-9b8f-b994e2e40253_1687453528.6643982.jpeg)\\n\\n**please upvote!! if you like.**\\ncomment below\\uD83D\\uDC47",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id from Views\\nwhere author_id = viewer_id \\norder by id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 422348,
                "title": "three-approaches-mysql",
                "content": "1. If with distinct keyword,\\n```sql\\nSELECT DISTINCT author_id AS id FROM Views \\nwhere author_id = viewer_id \\nORDER BY id\\n```\\n2. If order by first, we need another Select and alias\\n```sql\\nSELECT id from (SELECT author_id AS id FROM Views \\nwhere author_id = viewer_id \\nORDER BY id)a\\nGROUP BY id\\n```\\n3. If just with group by (automatically sorted by id)\\n```sql\\nSELECT author_id AS id FROM Views \\nwhere author_id = viewer_id \\nGROUP BY id\\n```",
                "solutionTags": [],
                "code": "```sql\\nSELECT DISTINCT author_id AS id FROM Views \\nwhere author_id = viewer_id \\nORDER BY id\\n```\n```sql\\nSELECT id from (SELECT author_id AS id FROM Views \\nwhere author_id = viewer_id \\nORDER BY id)a\\nGROUP BY id\\n```\n```sql\\nSELECT author_id AS id FROM Views \\nwhere author_id = viewer_id \\nGROUP BY id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3852944,
                "title": "pandas-my-sql-very-simple-with-approach-and-explanation",
                "content": "# Pandas Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Create a new DataFrame named authors_viewed_own_articles by filtering the rows where the author_id and viewer_id are the same. This will give us the rows where authors viewed their own articles.\\n\\n- Extract the unique author_id values from the DataFrame authors_viewed_own_articles. We want to find the unique authors who viewed at least one of their own articles.\\n\\n- Sort the unique author_id values in ascending order to get the list of authors who viewed at least one of their own articles.\\n\\n- Create a new DataFrame named result_df with a single column named id containing the sorted unique author_id values.\\n\\n- Return the result_df, which will contain the list of authors who viewed at least one of their own articles, sorted by their IDs in ascending order.\\n\\n\\n# Pandas Code\\n```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    # Filter rows where author_id and viewer_id are the same (authors viewing their own articles)\\n    authors_viewed_own_articles = views[views[\\'author_id\\'] == views[\\'viewer_id\\']]\\n    \\n    # Get unique author_ids from the filtered data\\n    unique_authors = authors_viewed_own_articles[\\'author_id\\'].unique()\\n    \\n    # Sort the unique author_ids in ascending order\\n    unique_authors = sorted(unique_authors)\\n    \\n    # Create a DataFrame with the sorted unique author_ids and rename the \\'author_id\\' column to \\'id\\'\\n    result_df = pd.DataFrame({\\'id\\': unique_authors})\\n    \\n    return result_df\\n```\\n\\n# SQL Code\\n```\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY id ASC;\\n```\\n# Explanation\\n- We use the SELECT DISTINCT clause to get only the unique author_id values. We want to find the unique authors who viewed at least one of their own articles.\\n\\n- The WHERE clause filters the rows where author_id and viewer_id are the same. This ensures that we only get the rows where authors viewed their own articles.\\n\\n- We use the ORDER BY clause to sort the results in ascending order based on the author_id (renamed as id in the result).\\n\\nThe SQL query will return the list of authors who viewed at least one of their own articles, sorted by their IDs in ascending order.\\n![upvote img.jpg](https://assets.leetcode.com/users/images/65c5bfa9-cc0d-41c8-a00d-6fa1ea6e5fb2_1690976581.8963964.jpeg)\\n## Please upvote if it is helpful\\n\\n",
                "solutionTags": [
                    "MySQL",
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    # Filter rows where author_id and viewer_id are the same (authors viewing their own articles)\\n    authors_viewed_own_articles = views[views[\\'author_id\\'] == views[\\'viewer_id\\']]\\n    \\n    # Get unique author_ids from the filtered data\\n    unique_authors = authors_viewed_own_articles[\\'author_id\\'].unique()\\n    \\n    # Sort the unique author_ids in ascending order\\n    unique_authors = sorted(unique_authors)\\n    \\n    # Create a DataFrame with the sorted unique author_ids and rename the \\'author_id\\' column to \\'id\\'\\n    result_df = pd.DataFrame({\\'id\\': unique_authors})\\n    \\n    return result_df\\n```\n```\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY id ASC;\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2510878,
                "title": "mysql-beginner-level-3-line-solution-simple-short-solution",
                "content": "**Please upvote to motivate me in my quest of documenting all leetcode solutions. HAPPY CODING:)\\nAny suggestions and improvements are always welcome.***\\n*====================================================================*\\n\\u2705 **MySQL Code :**\\n```\\nSELECT DISTINCT(author_id) AS id \\nFROM Views WHERE author_id = viewer_id \\nORDER BY id ASC;\\n```\\n**Runtime:** 484 ms\\n**Memory Usage:**  0B\\n________________________________\\n__________________________________\\n\\nIf you like the solution, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT DISTINCT(author_id) AS id \\nFROM Views WHERE author_id = viewer_id \\nORDER BY id ASC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3578300,
                "title": "mysql-simple-and-clean-beats-99-83",
                "content": "### Please upvote if you find this helpful. \\u270C\\n<img src=\"https://assets.leetcode.com/users/images/b8e25620-d320-420a-ae09-94c7453bd033_1678818986.7001078.jpeg\" alt=\"Cute Robot - Stable diffusion\" width=\"200\"/>\\n\\n# Intuition\\nMy first thought on how to solve this problem was to use a `SELECT` statement to query the `Views` table and find all the authors that viewed at least one of their own articles.\\n\\n# Approach\\n1. Use a `SELECT` statement to query the `Views` table.\\n2. Use the `DISTINCT` keyword to return only distinct values of `author_id`.\\n3. Use a `WHERE` clause to filter the rows where `author_id` is equal to `viewer_id`.\\n4. Use an `ORDER BY` clause to sort the result table by `author_id` in ascending order.\\n\\n# Complexity\\n- Time complexity: The time complexity of this solution depends on the size of the `Views` table and the efficiency of the database management system.\\n- Space complexity: The space complexity of this solution is constant, as it only requires a fixed amount of memory to store the result table.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id ASC;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id ASC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3867192,
                "title": "pandas-vs-sql-elegant-short-all-30-days-of-pandas-solutions",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```Python []\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    return views.loc[\\n        views[\\'author_id\\'] == views[\\'viewer_id\\'], [\\'author_id\\']\\n    ].drop_duplicates().rename(columns={\\n        \\'author_id\\': \\'id\\',\\n    }).sort_values(\\n        by=[\\'id\\'],\\n    )\\n```\\n```SQL []\\nSELECT DISTINCT author_id AS id\\n  FROM Views\\n WHERE author_id = viewer_id\\n ORDER BY id;\\n```\\n\\n# Important!\\n###### If you like the solution or find it useful, feel free to upvote for it, it will support me in creating high quality solutions)\\n\\n# 30 Days of Pandas solutions\\n\\n### Data Filtering \\u2705\\n- [Big Countries](https://leetcode.com/problems/big-countries/solutions/3848474/pandas-elegant-short-1-line/)\\n- [Recyclable and Low Fat Products](https://leetcode.com/problems/recyclable-and-low-fat-products/solutions/3848500/pandas-elegant-short-1-line/)\\n- [Customers Who Never Order](https://leetcode.com/problems/customers-who-never-order/solutions/3848527/pandas-elegant-short-1-line/)\\n- [Article Views I](https://leetcode.com/problems/article-views-i/solutions/3867192/pandas-elegant-short-1-line/)\\n\\n\\n### String Methods \\u2705\\n- [Invalid Tweets](https://leetcode.com/problems/invalid-tweets/solutions/3849121/pandas-elegant-short-1-line/)\\n- [Calculate Special Bonus](https://leetcode.com/problems/calculate-special-bonus/solutions/3867209/pandas-elegant-short-1-line/)\\n- [Fix Names in a Table](https://leetcode.com/problems/fix-names-in-a-table/solutions/3849167/pandas-elegant-short-1-line/)\\n- [Find Users With Valid E-Mails](https://leetcode.com/problems/find-users-with-valid-e-mails/solutions/3849177/pandas-elegant-short-1-line/)\\n- [Patients With a Condition](https://leetcode.com/problems/patients-with-a-condition/solutions/3849196/pandas-elegant-short-1-line-regex/)\\n\\n\\n### Data Manipulation \\u2705\\n- [Nth Highest Salary](https://leetcode.com/problems/nth-highest-salary/solutions/3867257/pandas-elegant-short-1-line/)\\n- [Second Highest Salary](https://leetcode.com/problems/second-highest-salary/solutions/3867278/pandas-elegant-short/)\\n- [Department Highest Salary](https://leetcode.com/problems/department-highest-salary/solutions/3867312/pandas-elegant-short-1-line/)\\n- [Rank Scores](https://leetcode.com/problems/rank-scores/solutions/3872817/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Delete Duplicate Emails](https://leetcode.com/problems/delete-duplicate-emails/solutions/3849211/pandas-elegant-short/)\\n- [Rearrange Products Table](https://leetcode.com/problems/rearrange-products-table/solutions/3849226/pandas-elegant-short-1-line/)\\n\\n\\n### Statistics \\u2705\\n- [The Number of Rich Customers](https://leetcode.com/problems/the-number-of-rich-customers/solutions/3849251/pandas-elegant-short-1-line/)\\n- [Immediate Food Delivery I](https://leetcode.com/problems/immediate-food-delivery-i/solutions/3872719/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Count Salary Categories](https://leetcode.com/problems/count-salary-categories/solutions/3872801/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n\\n\\n### Data Aggregation \\u2705\\n- [Find Total Time Spent by Each Employee](https://leetcode.com/problems/find-total-time-spent-by-each-employee/solutions/3872715/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Game Play Analysis I](https://leetcode.com/problems/game-play-analysis-i/solutions/3863223/pandas-elegant-short-1-line/)\\n- [Number of Unique Subjects Taught by Each Teacher](https://leetcode.com/problems/number-of-unique-subjects-taught-by-each-teacher/solutions/3863239/pandas-elegant-short-1-line/)\\n- [Classes More Than 5 Students](https://leetcode.com/problems/classes-more-than-5-students/solutions/3863249/pandas-elegant-short/)\\n- [Customer Placing the Largest Number of Orders](https://leetcode.com/problems/customer-placing-the-largest-number-of-orders/solutions/3863257/pandas-elegant-short-1-line/)\\n- [Group Sold Products By The Date](https://leetcode.com/problems/group-sold-products-by-the-date/solutions/3863267/pandas-elegant-short-1-line/)\\n- [Daily Leads and Partners](https://leetcode.com/problems/daily-leads-and-partners/solutions/3863279/pandas-elegant-short-1-line/)\\n\\n\\n### Data Aggregation \\u2705\\n- [Actors and Directors Who Cooperated At Least Three Times](https://leetcode.com/problems/actors-and-directors-who-cooperated-at-least-three-times/solutions/3863309/pandas-elegant-short/)\\n- [Replace Employee ID With The Unique Identifier](https://leetcode.com/problems/replace-employee-id-with-the-unique-identifier/solutions/3872822/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Students and Examinations](https://leetcode.com/problems/students-and-examinations/solutions/3872699/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Managers with at Least 5 Direct Reports](https://leetcode.com/problems/managers-with-at-least-5-direct-reports/solutions/3872861/pandas-elegant-short/)\\n- [Sales Person](https://leetcode.com/problems/sales-person/solutions/3872712/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Pandas"
                ],
                "code": "```Python []\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    return views.loc[\\n        views[\\'author_id\\'] == views[\\'viewer_id\\'], [\\'author_id\\']\\n    ].drop_duplicates().rename(columns={\\n        \\'author_id\\': \\'id\\',\\n    }).sort_values(\\n        by=[\\'id\\'],\\n    )\\n```\n```SQL []\\nSELECT DISTINCT author_id AS id\\n  FROM Views\\n WHERE author_id = viewer_id\\n ORDER BY id;\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 688022,
                "title": "two-mysql-solutions-with-and-without-distinct",
                "content": "**Solution 1:**\\n\\n```\\nSELECT author_id as id \\nFROM Views \\nGROUP BY author_id \\nHAVING SUM(CASE WHEN author_id=viewer_id THEN 1 ELSE 0 END)>0 \\nORDER BY id\\n```\\n\\n**Solution 2:**\\n\\n```\\nSELECT DISTINCT author_id as id \\nFROM views \\nWHERE author_id = viewer_id \\nORDER BY id \\n```",
                "solutionTags": [],
                "code": "```\\nSELECT author_id as id \\nFROM Views \\nGROUP BY author_id \\nHAVING SUM(CASE WHEN author_id=viewer_id THEN 1 ELSE 0 END)>0 \\nORDER BY id\\n```\n```\\nSELECT DISTINCT author_id as id \\nFROM views \\nWHERE author_id = viewer_id \\nORDER BY id \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 732906,
                "title": "simple-query-using-1-where-clause",
                "content": "```\\n\\nselect distinct author_id as id from views \\nwhere author_id = viewer_id\\norder by id",
                "solutionTags": [],
                "code": "```\\n\\nselect distinct author_id as id from views \\nwhere author_id = viewer_id\\norder by id",
                "codeTag": "Unknown"
            },
            {
                "id": 3851605,
                "title": "1-line",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n  return views.loc[views[\"author_id\"] == views[\"viewer_id\"], [\"author_id\"]].drop_duplicates().rename(columns={\"author_id\" : \"id\"}).sort_values(by=[\"id\"])\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n  return views.loc[views[\"author_id\"] == views[\"viewer_id\"], [\"author_id\"]].drop_duplicates().rename(columns={\"author_id\" : \"id\"}).sort_values(by=[\"id\"])\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3697991,
                "title": "easily-understandable-solution",
                "content": "\\n\\n# Code\\n```\\nSELECT DISTINCT author_id  AS id \\nFROM Views \\nWHERE author_id =  viewer_id\\nORDER BY id\\n\\n\\n```PLEASE UPVOTE TO MOTIVATE ME WRITE MORE SOLUTION",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT DISTINCT author_id  AS id \\nFROM Views \\nWHERE author_id =  viewer_id\\nORDER BY id\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3488929,
                "title": "easy-solution-with-full-explanation-for-beginners",
                "content": "# Intuition\\nWhat do we have ?\\n-One table\\n-chance of repition\\n-order is important\\n\\n# Approach\\nSince we want to return ( id)  we renamed it author_id as id in our select statment \\nNotice we also used distinct , But why ? Well since we don\\'t want any dublicated rows or repeated ones ,  Distinct will solve that.\\nFinally after getting our rows and what we want we order it \\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSelect  distinct author_id as id  from Views\\nwhere author_id = viewer_id \\norder by id\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSelect  distinct author_id as id  from Views\\nwhere author_id = viewer_id \\norder by id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3581072,
                "title": "2-solutions-with-beginner-friendly-explanation-mysql-pandas-beats-90",
                "content": "# Intuition\\nThe query aims to retrieve a list of author IDs from the table \\'Views\\' where the author_id is same as the viewer_id. To ensure that we get unique author_id, we use the DISTINCT keyword.\\n\\n# Approach\\n1. In the SELECT statement, we select distinct author_id to obtain every author only once. To get the correct solution here, we need to name the author_id as \\'id\\' as given in the example output. \\n2. In the FROM statement, we write the table name \\'Views\\' from where we retrieve the columns.\\n3. In the WHERE clause, we define the condition which is that author_id is same as viewer_id.\\n4. Lastly, we need to arrange the output list \\'id\\' in ascending order and hence we use \\'ORDER BY\\' clause. The default order for \\'ORDER BY\\' is Ascending and hence there is no need to write ASC afterwards. If we need to arrange in a descending order, the query would become \\'ORDER BY id DESC\\'\\n\\n### Please upvote if you find my solution helpful.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT DISTINCT(author_id) as id \\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY id; #ORDER BY id ASC\\n```\\n```\\nimport pandas as pd\\n\\ndef article_views_i(views: pd.DataFrame) -> pd.DataFrame:\\n    views = views[views[\\'author_id\\'] == views[\\'viewer_id\\']]\\n    views = views[[\\'author_id\\']].sort_values(by = \\'author_id\\')\\n    views.drop_duplicates(subset = \\'author_id\\', inplace = True)\\n    views.rename(columns = {\\'author_id\\':\\'id\\'}, inplace = True)\\n    return views\\n```\\n",
                "solutionTags": [
                    "MySQL",
                    "Pandas"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT DISTINCT(author_id) as id \\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY id; #ORDER BY id ASC\\n```\n```\\nimport pandas as pd\\n\\ndef article_views_i(views: pd.DataFrame) -> pd.DataFrame:\\n    views = views[views[\\'author_id\\'] == views[\\'viewer_id\\']]\\n    views = views[[\\'author_id\\']].sort_values(by = \\'author_id\\')\\n    views.drop_duplicates(subset = \\'author_id\\', inplace = True)\\n    views.rename(columns = {\\'author_id\\':\\'id\\'}, inplace = True)\\n    return views\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3540326,
                "title": "mysql-solution-for-article-views-i-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe query aims to retrieve a list of author IDs from the \"Views\" table where the author and viewer IDs are the same. By using the DISTINCT keyword, it ensures that only unique author IDs are returned.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. The query selects the author ID as \"id\" from the \"Views\" table.\\n1. It applies a condition using the WHERE clause to filter rows where the author ID is equal to the viewer ID.\\n1. The DISTINCT keyword is used to remove duplicates and return only unique author IDs.\\n1. The result is ordered in ascending order based on the author ID using the ORDER BY clause\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the query depends on the size of the \"Views\" table and the efficiency of the underlying database\\'s query execution plan. In this case, the query involves a simple selection with a condition and ordering. If there are appropriate indexes on the \"author_id\" and \"viewer_id\" columns, the execution time can be optimized to achieve sublinear or linear time complexity.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of the query depends on the size of the result set, which is determined by the number of distinct author IDs that satisfy the condition. The space required to store the result grows linearly with the number of distinct author IDs.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect distinct author_id as id from Views where author_id = viewer_id order by author_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect distinct author_id as id from Views where author_id = viewer_id order by author_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3857197,
                "title": "100-easy-fast-clean-4-simple-solution",
                "content": "\\nIF THIS WILL BE HELPFUL TO YOU, PLEASE UPVOTE !\\n# Code1\\n```\\n/* Write your PL/SQL query statement below */\\nSELECT DISTINCT author_id AS id FROM Views WHERE\\n\\nauthor_id = viewer_id ORDER BY author_id\\n\\n```\\n# Code2\\n```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT DISTINCT author_id AS id FROM Views WHERE author_id IN \\n\\n(viewer_id) ORDER BY author_id\\n\\n```\\n# Code3\\n```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT UNIQUE author_id AS id FROM Views WHERE author_id IN \\n\\n(viewer_id) ORDER BY author_id\\n\\n```\\n# Code4\\n```\\n/* Write your PL/SQL query statement below */\\n\\n SELECT author_id AS id FROM Views WHERE author_id = viewer_id\\n\\n GROUP BY author_id ORDER BY author_id\\n```\\n![5kej8w.jpg](https://assets.leetcode.com/users/images/3e6af6c5-5254-4c77-85cf-a86601622e5f_1691052262.8782282.jpeg)\\n\\n",
                "solutionTags": [
                    "Oracle",
                    "Database"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nSELECT DISTINCT author_id AS id FROM Views WHERE\\n\\nauthor_id = viewer_id ORDER BY author_id\\n\\n```\n```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT DISTINCT author_id AS id FROM Views WHERE author_id IN \\n\\n(viewer_id) ORDER BY author_id\\n\\n```\n```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT UNIQUE author_id AS id FROM Views WHERE author_id IN \\n\\n(viewer_id) ORDER BY author_id\\n\\n```\n```\\n/* Write your PL/SQL query statement below */\\n\\n SELECT author_id AS id FROM Views WHERE author_id = viewer_id\\n\\n GROUP BY author_id ORDER BY author_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3850562,
                "title": "python-pandas-use-mask",
                "content": "\\nFilter using a mask, then sort and remove duplicates\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    # Filter and select the \\'author_id\\' column for authors who viewed their own articles\\n    result_df = views[views[\\'author_id\\'] == views[\\'viewer_id\\']][[\\'author_id\\']]\\n    \\n    # Sort the result by \\'author_id\\' in ascending order and remove duplicates\\n    result_df = result_df.sort_values(\\'author_id\\').drop_duplicates()\\n    result_df.columns = [\"id\"]\\n    return result_df\\n\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    # Filter and select the \\'author_id\\' column for authors who viewed their own articles\\n    result_df = views[views[\\'author_id\\'] == views[\\'viewer_id\\']][[\\'author_id\\']]\\n    \\n    # Sort the result by \\'author_id\\' in ascending order and remove duplicates\\n    result_df = result_df.sort_values(\\'author_id\\').drop_duplicates()\\n    result_df.columns = [\"id\"]\\n    return result_df\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2112380,
                "title": "beginner-friendly-solutions",
                "content": "```\\n# Write your MySQL query statement below\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by author_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by author_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3850318,
                "title": "pandas-one-liner",
                "content": "The only non-straightforward bit is that the pandas method `.unique()` returns a NumPy array. By applying `sorted()`, we cast this to a list, and then turn the result back into a DataFrame.\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    return pd.DataFrame({\\'id\\': sorted(views[views[\\'author_id\\'] == views[\\'viewer_id\\']]\\n                               .author_id\\n                               .unique())})\\n\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    return pd.DataFrame({\\'id\\': sorted(views[views[\\'author_id\\'] == views[\\'viewer_id\\']]\\n                               .author_id\\n                               .unique())})\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3177140,
                "title": "easiest-solution-in-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2234667,
                "title": "easy-to-understand-mysql",
                "content": "I use distinct to only display author_id once where author_id = viewer_id, in the order of ascending. Upvote if you like this!\\n\\n```\\nselect distinct author_id as id\\nfrom views\\nwhere author_id = viewer_id\\norder by id asc\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect distinct author_id as id\\nfrom views\\nwhere author_id = viewer_id\\norder by id asc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3956148,
                "title": "pandas-1-line-filter-drop-duplicates-sort-rename",
                "content": "# Intuition\\n\\nConsists of three steps:\\n\\n - filter bases on `df[\\'author_id\\'] == df[\\'viewer_id\\']`\\n - drop duplicates by `author_id`\\n - sort values by this field\\n - rename columns\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef article_views(df: pd.DataFrame) -> pd.DataFrame:\\n  return df[df[\\'author_id\\'] == df[\\'viewer_id\\']][[\\'author_id\\']].drop_duplicates().sort_values(by=\"author_id\").rename(columns={\"author_id\": \"id\"})\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef article_views(df: pd.DataFrame) -> pd.DataFrame:\\n  return df[df[\\'author_id\\'] == df[\\'viewer_id\\']][[\\'author_id\\']].drop_duplicates().sort_values(by=\"author_id\").rename(columns={\"author_id\": \"id\"})\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3895578,
                "title": "pandas-step-by-step-solution-for-beginners",
                "content": "**\\uD83D\\uDD3C IF YOU FIND THIS POST HELPFUL PLEASE UPVOTE \\uD83D\\uDC4D**\\n```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    res_df = views[views[\\'author_id\\'] == views[\\'viewer_id\\']]\\n    \\n    res_df = res_df[[\\'author_id\\']].rename(columns = {\\'author_id\\': \\'id\\'})\\n    \\n    res = res_df.sort_values(by = [\\'id\\']).drop_duplicates()\\n    \\n    return res\\n```\\n**Thank you for reading! \\uD83D\\uDE04 Comment if you have any questions or feedback.**",
                "solutionTags": [],
                "code": "```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    res_df = views[views[\\'author_id\\'] == views[\\'viewer_id\\']]\\n    \\n    res_df = res_df[[\\'author_id\\']].rename(columns = {\\'author_id\\': \\'id\\'})\\n    \\n    res = res_df.sort_values(by = [\\'id\\']).drop_duplicates()\\n    \\n    return res\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3873360,
                "title": "addressing-common-beginner-pandas-errors",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWhen running the intuitive solutions to return a single column, a common error to encounter would be the resulting vector being automatically converted to a Series instead of a single-column dataframe. \\nThis can result in various errors such as Leetcode raising the type error of the solution OR method errors if used in the start of the command chain. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse loc/iloc OR the [[\\'column\\']] method. If you use the simple df[\\'column\\'], you will get a series instead of a dataframe.\\n\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n  return views[(views.author_id == views.viewer_id)]\\\\\\n  .rename(columns={\"author_id\": \"id\"})[[\\'id\\']]\\\\\\n  .drop_duplicates()\\\\\\n  .sort_values(by=[\\'id\\'])\\n```",
                "solutionTags": [
                    "Python3",
                    "Database",
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n  return views[(views.author_id == views.viewer_id)]\\\\\\n  .rename(columns={\"author_id\": \"id\"})[[\\'id\\']]\\\\\\n  .drop_duplicates()\\\\\\n  .sort_values(by=[\\'id\\'])\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3260510,
                "title": "solution-with-group-by-having-sql-server",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\n\\n\\n\\nSELECT\\n    author_id AS id\\nFROM\\n    Views\\nWHERE\\n    author_id = viewer_id\\nGROUP BY \\n    author_id\\nHAVING COUNT(author_id) >= 1\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\n\\n\\n\\nSELECT\\n    author_id AS id\\nFROM\\n    Views\\nWHERE\\n    author_id = viewer_id\\nGROUP BY \\n    author_id\\nHAVING COUNT(author_id) >= 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3254370,
                "title": "easy-sql-query",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT distinct author_id As id\\nfrom Views\\nWHERE author_id = viewer_id\\nORDER BY author_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT distinct author_id As id\\nfrom Views\\nWHERE author_id = viewer_id\\nORDER BY author_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2548590,
                "title": "1148-article-views-i",
                "content": "```\\nSELECT DISTINCT author_id AS id FROM VIEWS\\nWHERE author_id = viewer_id \\nORDER BY author_id",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT DISTINCT author_id AS id FROM VIEWS\\nWHERE author_id = viewer_id \\nORDER BY author_id",
                "codeTag": "Unknown"
            },
            {
                "id": 2457755,
                "title": "mysql-two-solutions-distinct-and-group-by",
                "content": "Please give **upvote** :)\\n\\n***Solution-1:*** Using Distinct\\n```\\n# Write your MySQL query statement below\\nSELECT DISTINCT a.author_id AS id\\nFROM Views a\\nWHERE a.author_id = a.viewer_id\\nORDER BY a.author_id;\\n```\\n\\n***Solution-2:*** Using Group By\\n```\\n# Write your MySQL query statement below\\nSELECT a.author_id AS id\\nFROM Views a\\nWHERE a.author_id = a.viewer_id\\nGROUP BY a.author_id\\nORDER BY a.author_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT DISTINCT a.author_id AS id\\nFROM Views a\\nWHERE a.author_id = a.viewer_id\\nORDER BY a.author_id;\\n```\n```\\n# Write your MySQL query statement below\\nSELECT a.author_id AS id\\nFROM Views a\\nWHERE a.author_id = a.viewer_id\\nGROUP BY a.author_id\\nORDER BY a.author_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1614132,
                "title": "simple-mysql-self-join",
                "content": "```\\nSELECT\\n    DISTINCT t1.author_id AS id\\nFROM\\n    views t1\\nINNER JOIN\\n    views t2\\nON\\n    t1.author_id = t2.viewer_id AND t1.article_id = t2.article_id\\nORDER BY\\n    t1.author_id ASC;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT\\n    DISTINCT t1.author_id AS id\\nFROM\\n    views t1\\nINNER JOIN\\n    views t2\\nON\\n    t1.author_id = t2.viewer_id AND t1.article_id = t2.article_id\\nORDER BY\\n    t1.author_id ASC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3858765,
                "title": "step-by-step-beginner-friendly",
                "content": "\\n# Approach\\n-> simply perform the required steps line by line\\n\\n-> make a new data frame which only has the records fron the author_id column  where author_id and viewer_id match\\n\\n-> then rename the column as id as desired in output\\n\\n-> use thr drop_duplicates method to remove all the duplicate values\\n\\n-> Finally use the sort_values method to sort the column id and set the ascending property true\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    ans= views[(views[\\'author_id\\'] == views[\\'viewer_id\\'])]\\n    ans1 = ans[[\\'author_id\\']].rename(columns ={\\'author_id\\':\\'id\\'})\\n    ans1 = ans1.drop_duplicates()\\n    ans1 = ans1.sort_values(by=[\\'id\\'],ascending=True)\\n    return ans1\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    ans= views[(views[\\'author_id\\'] == views[\\'viewer_id\\'])]\\n    ans1 = ans[[\\'author_id\\']].rename(columns ={\\'author_id\\':\\'id\\'})\\n    ans1 = ans1.drop_duplicates()\\n    ans1 = ans1.sort_values(by=[\\'id\\'],ascending=True)\\n    return ans1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3851617,
                "title": "python-easy-solutions",
                "content": "# Code\\n```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    return views[views[\\'author_id\\'] == views[\\'viewer_id\\']][[\\'author_id\\']].drop_duplicates().rename(columns={\\'author_id\\': \\'id\\'}).sort_values(by=\\'id\\', ascending=True)\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    return views[views[\\'author_id\\'] == views[\\'viewer_id\\']][[\\'author_id\\']].drop_duplicates().rename(columns={\\'author_id\\': \\'id\\'}).sort_values(by=\\'id\\', ascending=True)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3731376,
                "title": "mysql-without-distinct-beats-96-65",
                "content": "# Approach\\n\\n![Screen Shot 2023-07-07 at 11.54.48.png](https://assets.leetcode.com/users/images/749b1c36-2455-4586-8b23-e4ab63830894_1688720683.7768404.png)\\n\\nJust group and order by author_id (The default order of `order by` operation is ASC)\\n\\n# Code\\n```\\nSELECT author_id AS id\\nFROM Views\\nWHERE Views.author_id = Views.viewer_id\\nGROUP BY author_id\\nORDER BY author_id;\\n```\\n\\nIf you found this helpful, please UPVOTE!",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT author_id AS id\\nFROM Views\\nWHERE Views.author_id = Views.viewer_id\\nGROUP BY author_id\\nORDER BY author_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3634164,
                "title": "simple-solution-using-unique",
                "content": "\\n# Code\\n```\\nselect unique author_id as id from Views where author_id=Viewer_id order by author_id\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nselect unique author_id as id from Views where author_id=Viewer_id order by author_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3276742,
                "title": "mysql-solution",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect distinct author_id as id from Views \\nwhere author_id = viewer_id order by author_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect distinct author_id as id from Views \\nwhere author_id = viewer_id order by author_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2936174,
                "title": "runtime-478-ms-beats-86",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect author_id as id\\nfrom\\n(select author_id,viewer_id\\nfrom Views\\nwhere author_id = viewer_id) T\\ngroup by 1\\norder by 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect author_id as id\\nfrom\\n(select author_id,viewer_id\\nfrom Views\\nwhere author_id = viewer_id) T\\ngroup by 1\\norder by 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2783019,
                "title": "mysql-article-views-i",
                "content": "```\\n# Write your MySQL query statement below\\nselect distinct(author_id) as id from Views\\nwhere author_id = viewer_id\\ngroup by author_id,viewer_id\\norder by author_id asc;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect distinct(author_id) as id from Views\\nwhere author_id = viewer_id\\ngroup by author_id,viewer_id\\norder by author_id asc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2441227,
                "title": "mysql-easy-solution-beats-28",
                "content": "```\\nselect distinct author_id as id\\nfrom Views \\nwhere author_id=viewer_id\\norder by id;",
                "solutionTags": [],
                "code": "```\\nselect distinct author_id as id\\nfrom Views \\nwhere author_id=viewer_id\\norder by id;",
                "codeTag": "Unknown"
            },
            {
                "id": 2093883,
                "title": "mysql-simple-solution",
                "content": "```\\nSELECT DISTINCT author_id as id\\nfrom views\\nWHERE author_id = viewer_id\\nORDER BY id",
                "solutionTags": [],
                "code": "```\\nSELECT DISTINCT author_id as id\\nfrom views\\nWHERE author_id = viewer_id\\nORDER BY id",
                "codeTag": "Unknown"
            },
            {
                "id": 1961585,
                "title": "select-distinct-solution",
                "content": "```\\nSELECT DISTINCT author_id as id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT DISTINCT author_id as id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3791422,
                "title": "easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSelect distinct author_id as id from Views \\nWhere author_id = viewer_id order by id;\\n```\\n![image.png](https://assets.leetcode.com/users/images/269f06e9-6381-4a37-906b-8b7f81dca1ab_1689841330.5084527.png)\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSelect distinct author_id as id from Views \\nWhere author_id = viewer_id order by id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3775974,
                "title": "easy-mysql-solution",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect distinct author_id as id  from Views where author_id =viewer_id order by id ;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect distinct author_id as id  from Views where author_id =viewer_id order by id ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3540741,
                "title": "simple-sql-solution",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nSelect distinct(v.author_id) as id\\nfrom Views v\\nwhere v.author_id = v.viewer_id \\norder by id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSelect distinct(v.author_id) as id\\nfrom Views v\\nwhere v.author_id = v.viewer_id \\norder by id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3540708,
                "title": "simple-sql-query",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nSelect distinct(author_id) as id\\nfrom Views v\\nwhere author_id in (Select viewer_id from Views v where v.author_id = v.viewer_id)\\norder by 1 asc;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSelect distinct(author_id) as id\\nfrom Views v\\nwhere author_id in (Select viewer_id from Views v where v.author_id = v.viewer_id)\\norder by 1 asc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3310268,
                "title": "sql-very-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT DISTINCT(AUTHOR_ID) AS id FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID ORDER BY AUTHOR_ID;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT DISTINCT(AUTHOR_ID) AS id FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID ORDER BY AUTHOR_ID;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3303937,
                "title": "sql-server-clean-easy",
                "content": "```\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY id ASC;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY id ASC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2717844,
                "title": "mysql-where-clause-followed-by-order-by",
                "content": "```\\nSELECT DISTINCT author_id AS id FROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT DISTINCT author_id AS id FROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2498385,
                "title": "mysql-simple-logic",
                "content": "\\n```\\nselect distinct author_id as id from Views where author_id= viewer_id order by 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect distinct author_id as id from Views where author_id= viewer_id order by 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2383492,
                "title": "self-join",
                "content": "SELECT  a1.author_id AS id\\nFROM Views a1 \\nJOIN Views a2\\nON a1.article_id = a2.article_id\\nAND a1.author_id = a2.viewer_id\\nGROUP BY a1.author_id\\nORDER BY a1.author_id",
                "solutionTags": [],
                "code": "SELECT  a1.author_id AS id\\nFROM Views a1 \\nJOIN Views a2\\nON a1.article_id = a2.article_id\\nAND a1.author_id = a2.viewer_id\\nGROUP BY a1.author_id\\nORDER BY a1.author_id",
                "codeTag": "Unknown"
            },
            {
                "id": 2187718,
                "title": "mssql-simple-answer",
                "content": "```\\n/* Write your T-SQL query statement below */\\nSELECT DISTINCT(author_id) AS id \\nFROM Views\\n    WHERE author_id = viewer_id\\nORDER BY author_id",
                "solutionTags": [],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT DISTINCT(author_id) AS id \\nFROM Views\\n    WHERE author_id = viewer_id\\nORDER BY author_id",
                "codeTag": "Unknown"
            },
            {
                "id": 2077131,
                "title": "using-self-join",
                "content": "```\\nSELECT DISTINCT V1.author_id AS id \\nFROM Views V1 JOIN Views V2\\nON V1.author_id = V2.viewer_id AND V1.article_id = V2.article_id\\nORDER BY id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT DISTINCT V1.author_id AS id \\nFROM Views V1 JOIN Views V2\\nON V1.author_id = V2.viewer_id AND V1.article_id = V2.article_id\\nORDER BY id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1972745,
                "title": "mysql-distinct-order-by-solution",
                "content": "```\\nselect distinct(author_id) as id from Views where author_id=viewer_id order by author_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect distinct(author_id) as id from Views where author_id=viewer_id order by author_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1952682,
                "title": "mysql-easy-implementation",
                "content": "```\\nSELECT DISTINCT author_id as id\\nFROM Views\\nWHERE author_id = viewer_id\\nOrder by author_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT DISTINCT author_id as id\\nFROM Views\\nWHERE author_id = viewer_id\\nOrder by author_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1943065,
                "title": "beginner-sql-solution-super-simple",
                "content": "```\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1638237,
                "title": "simple-answer",
                "content": "select distinct author_id as id  from views\\nwhere author_id = viewer_id\\norder by id",
                "solutionTags": [],
                "code": "select distinct author_id as id  from views\\nwhere author_id = viewer_id\\norder by id",
                "codeTag": "Unknown"
            },
            {
                "id": 4069777,
                "title": "pandas-easy-article-views-i",
                "content": "[see the Successfully Accepted Submission](https://leetcode.com/submissions/detail/1054304287/)\\n```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    # Initially,  we filter rows where the values in the \\'author_id\\' column are equal to the values in the \\'viewer_id\\' column.\\n    filtered_data = views[views[\\'author_id\\'] == views[\\'viewer_id\\']]\\n    \\n    # Then, we remove duplicate values from the Series, keeping only the unique values.Also we rename the Series to \\'id\\'\\n    unique_id = filtered_data[\\'author_id\\'].drop_duplicates().rename(\\'id\\')\\n    \\n    #  After that, we sort the values in the \"unique_id\" column in ascending order by default.\\n    new_id_column = unique_id.sort_values()\\n    \\n    # Finally, we create a Pandas DataFrame\\n    new_id_column=pd.DataFrame(new_id_column)\\n\\n    return new_id_column\\n\\n```\\n\\n![image](https://assets.leetcode.com/users/images/1528e04f-fab8-4047-b23b-65380460bef6_1695234866.838175.jpeg)\\n",
                "solutionTags": [],
                "code": "```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    # Initially,  we filter rows where the values in the \\'author_id\\' column are equal to the values in the \\'viewer_id\\' column.\\n    filtered_data = views[views[\\'author_id\\'] == views[\\'viewer_id\\']]\\n    \\n    # Then, we remove duplicate values from the Series, keeping only the unique values.Also we rename the Series to \\'id\\'\\n    unique_id = filtered_data[\\'author_id\\'].drop_duplicates().rename(\\'id\\')\\n    \\n    #  After that, we sort the values in the \"unique_id\" column in ascending order by default.\\n    new_id_column = unique_id.sort_values()\\n    \\n    # Finally, we create a Pandas DataFrame\\n    new_id_column=pd.DataFrame(new_id_column)\\n\\n    return new_id_column\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3864553,
                "title": "pandas-explained",
                "content": "\\n\\n```python\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    # gets dataframe where value of author_id is same as viewer_id, we rename the column to id since the answer requires that\\n    authour_viewer_same = views[views.author_id == views.viewer_id][[\\'author_id\\']].rename(columns={\\'author_id\\': \\'id\\'})\\n\\t# sort the values in the dataframe by id, and drop the duplicate values\\n    ans = authour_viewer_same.sort_values(by=\\'id\\').drop_duplicates()\\n    return ans\\n```\\n\\n",
                "solutionTags": [],
                "code": "```python\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    # gets dataframe where value of author_id is same as viewer_id, we rename the column to id since the answer requires that\\n    authour_viewer_same = views[views.author_id == views.viewer_id][[\\'author_id\\']].rename(columns={\\'author_id\\': \\'id\\'})\\n\\t# sort the values in the dataframe by id, and drop the duplicate values\\n    ans = authour_viewer_same.sort_values(by=\\'id\\').drop_duplicates()\\n    return ans\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3862818,
                "title": "detailed-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsing 2 new functions\\n->sort_values() \\n(for sorting the data)\\n->drop_duplicates()\\n(for droping duplicate values)\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    df=views[views[\\'author_id\\']==views[\\'viewer_id\\']][[\\'author_id\\']]\\n    ndf=df.sort_values(by=[\\'author_id\\'])\\n    ndf.rename(columns={\\'author_id\\':\\'id\\'},inplace=True)\\n    return ndf.drop_duplicates()\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    df=views[views[\\'author_id\\']==views[\\'viewer_id\\']][[\\'author_id\\']]\\n    ndf=df.sort_values(by=[\\'author_id\\'])\\n    ndf.rename(columns={\\'author_id\\':\\'id\\'},inplace=True)\\n    return ndf.drop_duplicates()\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3838097,
                "title": "easy-mysql-using-order-and-group",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement beloSA\\nSELECT author_id as id from Views where viewer_id = author_id group by author_id order by author_id asc\\n```\\n![upvote.jpg](https://assets.leetcode.com/users/images/1c83f872-3e03-4c7e-93f1-ec5873268be9_1690716312.3343408.jpeg)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement beloSA\\nSELECT author_id as id from Views where viewer_id = author_id group by author_id order by author_id asc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3805471,
                "title": "using-group-by-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect  author_id as id from views \\nwhere author_id = viewer_id group by author_id order by id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect  author_id as id from views \\nwhere author_id = viewer_id group by author_id order by id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3775207,
                "title": "article-views-i-mysql-solution-code",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect distinct author_id as id from Views where author_id = viewer_id order by id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect distinct author_id as id from Views where author_id = viewer_id order by id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3550480,
                "title": "easy-sql-code",
                "content": "# Intuition\\nJust putting the condition in the statement.\\n\\n# Approach\\n**POINT TO KEEP IN MIND**\\n- Since in the output we have to return with column name id so we will alias `author_id` as `id`.\\n- Just mention the condition to satisfy.\\n- Add `DISTINCT`clause to make sure the display of no duplicates.\\n- Just sort the `id` in ascending order\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id AS id  FROM Views WHERE  author_id=viewer_id ORDER BY author_id; \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id AS id  FROM Views WHERE  author_id=viewer_id ORDER BY author_id; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3548309,
                "title": "2-simple-query-solution-using-group-by-and-distinct",
                "content": "query 1\\n```\\nSelect distinct(author_id) as id from Views where author_id=viewer_id order by id;\\n```\\n\\nquery 2\\n```\\nselect author_id as id from views where author_id=viewer_id group by author_id order by id;\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle"
                ],
                "code": "```\\nSelect distinct(author_id) as id from Views where author_id=viewer_id order by id;\\n```\n```\\nselect author_id as id from views where author_id=viewer_id group by author_id order by id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3504007,
                "title": "explanation-of-the-query-using-a-very-simple-approach",
                "content": "\\n# Approach\\nIn this query we are expecting just the author id of the authers who have viewed there articles atleast once.So to do that\\n1. We select distinct author_id from views with column name as id which we want in the end as output .\\n2. when the author_id matches viewer_id which is when author views it\\'s own article\\n3. we return the id column with the order of author_id\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect  distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by author_id\\n```\\n\\n## Hope It Helped",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect  distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by author_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3350475,
                "title": "easy-code",
                "content": "\\n# Code\\n```\\nselect distinct(viewer_id) as id from views\\nwhere viewer_id = author_id\\norder by viewer_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect distinct(viewer_id) as id from views\\nwhere viewer_id = author_id\\norder by viewer_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3250698,
                "title": "mysql-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nSELECT distinct author_id As id\\nfrom Views\\nWHERE author_id = viewer_id\\nORDER BY author_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSELECT distinct author_id As id\\nfrom Views\\nWHERE author_id = viewer_id\\nORDER BY author_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3081372,
                "title": "simple-query-article-views",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect author_id as id from views  where author_id=viewer_id group by author_id order by author_id ;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect author_id as id from views  where author_id=viewer_id group by author_id order by author_id ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3027918,
                "title": "simple-mysql-solution",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nAuthor and viewer id should be same and it should be arrange in increasing order. \\n\\n\"Order by\" takes increment order by default so no need to write ASC in MySQL code.\\n\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT DISTINCT viewer_id as id \\nFROM views\\nWHERE author_id = viewer_id\\nORDER BY viewer_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT DISTINCT viewer_id as id \\nFROM views\\nWHERE author_id = viewer_id\\nORDER BY viewer_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2988938,
                "title": "easy-mysql-solution",
                "content": "# Intuition\\nEASY MYSQL SOLUTION \\n\\n# Code\\n```\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id \\nORDER BY author_id ASC\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id \\nORDER BY author_id ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2587215,
                "title": "simple-solution",
                "content": "``` \\nselect distinct author_id as id from views where author_id = viewer_id\\norder by id asc;\\n```",
                "solutionTags": [],
                "code": "``` \\nselect distinct author_id as id from views where author_id = viewer_id\\norder by id asc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2585197,
                "title": "simple-solution",
                "content": "```\\nSelect \\n  DISTINCT author_id as id \\nFROM \\n  Views \\nWHERE \\n  author_id = viewer_id \\nORDER by \\n  author_id ASC\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSelect \\n  DISTINCT author_id as id \\nFROM \\n  Views \\nWHERE \\n  author_id = viewer_id \\nORDER by \\n  author_id ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2573168,
                "title": "easy-mysql-solution",
                "content": "```\\nSELECT DISTINCT(author_id) AS id \\nFROM Views \\nWHERE viewer_id = author_id\\nORDER BY id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT DISTINCT(author_id) AS id \\nFROM Views \\nWHERE viewer_id = author_id\\nORDER BY id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2563807,
                "title": "mysql-solution-one-line-clean-and-easy",
                "content": "***Please UPVOTE \\uD83D\\uDD25***\\n\\n```\\nSELECT DISTINCT author_id AS id FROM Views WHERE author_id = viewer_id  ORDER BY id\\n```\\n* another solution\\n```\\nSELECT author_id AS id FROM Views WHERE author_id = viewer_id GROUP BY author_id ORDER BY author_id\\n```\\n\\n***Please UPVOTE \\uD83D\\uDD25***",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT DISTINCT author_id AS id FROM Views WHERE author_id = viewer_id  ORDER BY id\\n```\n```\\nSELECT author_id AS id FROM Views WHERE author_id = viewer_id GROUP BY author_id ORDER BY author_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2508769,
                "title": "runtime-509-ms-memory-usage-0b",
                "content": "Runtime: 509 ms, faster than 50.88% of MySQL online submissions for Article Views I.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Article Views I.\\n\\n```\\nSELECT author_id AS id\\nFROM Views \\nWHERE author_id = viewer_id\\nGROUP BY id\\nORDER BY id ASC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT author_id AS id\\nFROM Views \\nWHERE author_id = viewer_id\\nGROUP BY id\\nORDER BY id ASC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2472547,
                "title": "easy-sql-query-simple-approach",
                "content": "#Write Sql Query Here\\nSelect distinct(author_id) as id \\nfrom Views where author_id=viewer_id\\norder by id;\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "#Write Sql Query Here\\nSelect distinct(author_id) as id \\nfrom Views where author_id=viewer_id\\norder by id;\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2431778,
                "title": "mysql-easy-to-understand-solution",
                "content": "```\\nSELECT DISTINCT author_id AS id FROM Views\\nWHERE author_id=viewer_id ORDER BY 1;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT DISTINCT author_id AS id FROM Views\\nWHERE author_id=viewer_id ORDER BY 1;",
                "codeTag": "Unknown"
            },
            {
                "id": 2415430,
                "title": "different-approaches-with-runtime",
                "content": "```\\n#Approach 1:  934ms\\n\\nselect distinct v.author_id id from views v join views v2 on v.author_id=v2.viewer_id and v.article_id = v2.article_id order by v.author_id asc\\n\\n#Approach 2: 669ms\\n\\nselect author_id id from (select distinct author_id, case when author_id=viewer_id then \\'Yes\\' else \\'no\\' end ind from views ) a where ind=\\'Yes\\' order by author_id\\n\\n#Approach 3: 630ms\\n\\nselect author_id id from Views where author_id=viewer_id group by author_id order by author_id asc;\\n\\n#Approach 4: Best out of 4 432ms\\n\\nselect distinct author_id id from Views where author_id=viewer_id order by author_id asc;\\n```",
                "solutionTags": [],
                "code": "```\\n#Approach 1:  934ms\\n\\nselect distinct v.author_id id from views v join views v2 on v.author_id=v2.viewer_id and v.article_id = v2.article_id order by v.author_id asc\\n\\n#Approach 2: 669ms\\n\\nselect author_id id from (select distinct author_id, case when author_id=viewer_id then \\'Yes\\' else \\'no\\' end ind from views ) a where ind=\\'Yes\\' order by author_id\\n\\n#Approach 3: 630ms\\n\\nselect author_id id from Views where author_id=viewer_id group by author_id order by author_id asc;\\n\\n#Approach 4: Best out of 4 432ms\\n\\nselect distinct author_id id from Views where author_id=viewer_id order by author_id asc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2414729,
                "title": "oracle-easy-solution-with-join-without-join",
                "content": "**Without Join**\\nselect\\n    DISTINCT\\n    author_id as id\\nfrom views where author_id = viewer_id\\norder by 1;\\n\\n\\n**With Join**\\nselect\\n    DISTINCT\\n    v1.author_id as id\\nfrom views v1, views v2\\nwhere v1.author_id = v2.viewer_id and v1.author_id = v2.author_id\\norder by 1;\\n\\n**Please upvote if you like my solution**",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "**Without Join**\\nselect\\n    DISTINCT\\n    author_id as id\\nfrom views where author_id = viewer_id\\norder by 1;\\n\\n\\n**With Join**\\nselect\\n    DISTINCT\\n    v1.author_id as id\\nfrom views v1, views v2\\nwhere v1.author_id = v2.viewer_id and v1.author_id = v2.author_id\\norder by 1;\\n\\n**Please upvote if you like my solution**",
                "codeTag": "Unknown"
            },
            {
                "id": 2341474,
                "title": "it-is-very-simple-direct-query",
                "content": "# <<-- upvote\\n```\\nselect  distinct author_id as id from views where author_id = viewer_id order by id;\\n```",
                "solutionTags": [],
                "code": "```\\nselect  distinct author_id as id from views where author_id = viewer_id order by id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2338029,
                "title": "most-simple-soln",
                "content": "```\\nselect author_id as id from views where author_id=viewer_id group by id order by id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect author_id as id from views where author_id=viewer_id group by id order by id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2332809,
                "title": "sql-for-dummies",
                "content": "\\tSELECT DISTINCT(author_id) AS id FROM Views\\n\\tWHERE author_id = viewer_id\\n\\tORDER BY author_id ;",
                "solutionTags": [],
                "code": "\\tSELECT DISTINCT(author_id) AS id FROM Views\\n\\tWHERE author_id = viewer_id\\n\\tORDER BY author_id ;",
                "codeTag": "Unknown"
            },
            {
                "id": 2317694,
                "title": "simplest-solution-easy-to-understand",
                "content": "SELECT viewer_id as id FROM views\\nWHERE author_id=viewer_id\\nGROUP BY viewer_id\\nORDER BY viewer_id",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "SELECT viewer_id as id FROM views\\nWHERE author_id=viewer_id\\nGROUP BY viewer_id\\nORDER BY viewer_id",
                "codeTag": "Unknown"
            },
            {
                "id": 2289267,
                "title": "sql-straight-forward-easy-solution-1148-article-views-i",
                "content": "```\\nselect\\n  distinct author_id as id\\nfrom\\n  Views v\\nwhere\\n  author_id = viewer_id\\norder by\\n  1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect\\n  distinct author_id as id\\nfrom\\n  Views v\\nwhere\\n  author_id = viewer_id\\norder by\\n  1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2288434,
                "title": "sql-easy-fast",
                "content": "\\n\\'\\'\\'\\n\\nSELECT viewer_id as id\\nFROM Views \\nWHERE author_id=viewer_id\\nGROUP BY viewer_id\\nORDER BY viewer_id\\n\\n\\'\\'\\'",
                "solutionTags": [],
                "code": "\\n\\'\\'\\'\\n\\nSELECT viewer_id as id\\nFROM Views \\nWHERE author_id=viewer_id\\nGROUP BY viewer_id\\nORDER BY viewer_id\\n\\n\\'\\'\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 2181899,
                "title": "simple-solution",
                "content": "***simple***\\n```\\nselect distinct author_id as id\\nfrom Views v\\nwhere\\nv.author_id = v.viewer_id\\norder by id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect distinct author_id as id\\nfrom Views v\\nwhere\\nv.author_id = v.viewer_id\\norder by id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2155366,
                "title": "gotcha",
                "content": "## **Gotta Do it**\\n\\n![image](https://assets.leetcode.com/users/images/0a4cb14d-2d08-4950-aa91-7d001c907a39_1655305740.7447476.gif)\\n\\n```\\nselect distinct author_id  \\'id\\' from views \\nwhere author_id=viewer_id\\norder by 1;\\n```",
                "solutionTags": [],
                "code": "```\\nselect distinct author_id  \\'id\\' from views \\nwhere author_id=viewer_id\\norder by 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2151131,
                "title": "simple-sql-server-solution",
                "content": "```\\nSELECT\\n    DISTINCT(viewer_id) as id\\nFROM\\n    Views\\nWHERE\\n    author_id = viewer_id;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT\\n    DISTINCT(viewer_id) as id\\nFROM\\n    Views\\nWHERE\\n    author_id = viewer_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2073396,
                "title": "simple-solution",
                "content": "```\\nSELECT distinct(AUTHOR_ID) AS id\\nFROM VIEWS\\nWHERE AUTHOR_ID = VIEWER_ID\\norder by author_id;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT distinct(AUTHOR_ID) AS id\\nFROM VIEWS\\nWHERE AUTHOR_ID = VIEWER_ID\\norder by author_id;",
                "codeTag": "Unknown"
            },
            {
                "id": 2070594,
                "title": "easy-and-very-simple-solution",
                "content": "**Article Views I**\\n```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id AS id \\n    FROM Views\\n        WHERE author_id = viewer_id\\n            ORDER BY author_id;\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id AS id \\n    FROM Views\\n        WHERE author_id = viewer_id\\n            ORDER BY author_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2033843,
                "title": "mysql-easy-to-understand-clean-code",
                "content": "```\\nSELECT author_id AS id \\nFROM Views \\nWHERE author_id=viewer_id \\nGROUP BY author_id\\nORDER BY author_id\\n;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT author_id AS id \\nFROM Views \\nWHERE author_id=viewer_id \\nGROUP BY author_id\\nORDER BY author_id\\n;",
                "codeTag": "Unknown"
            },
            {
                "id": 2029729,
                "title": "do-it-any-way-sql",
                "content": "```\\nselect distinct author_id as id \\nfrom Views \\nwhere author_id = viewer_id\\norder by id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect distinct author_id as id \\nfrom Views \\nwhere author_id = viewer_id\\norder by id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1985861,
                "title": "easy-mysql",
                "content": "```\\nselect distinct author_id id\\nfrom views\\nwhere author_id = viewer_id\\norder by 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect distinct author_id id\\nfrom views\\nwhere author_id = viewer_id\\norder by 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1969397,
                "title": "easy-to-understand-java",
                "content": "```\\n#1\\nselect\\n    distinct author_id as id\\nfrom\\n    views\\nwhere\\n    author_id = viewer_id\\norder by\\n    author_id;\\n\\t\\n\\t\\n#2\\nselect\\n    author_id as id\\nfrom\\n    views\\nwhere\\n    author_id = viewer_id\\ngroup by\\n    author_id\\norder by\\n    author_id;\\n```\\n\\nIf you have any **doubts**, feel **free to ask**...\\nIf you understand the **concept**. Don\\'t Forget to **upvote**\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n#1\\nselect\\n    distinct author_id as id\\nfrom\\n    views\\nwhere\\n    author_id = viewer_id\\norder by\\n    author_id;\\n\\t\\n\\t\\n#2\\nselect\\n    author_id as id\\nfrom\\n    views\\nwhere\\n    author_id = viewer_id\\ngroup by\\n    author_id\\norder by\\n    author_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1959140,
                "title": "distinct-group-by",
                "content": "1. By selecting using `DISTINCT`, we can immediately retrieve those that has equal values in both `author_id` and `viewer_id` columns\\n```\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id ASC\\n```\\n2. Aggregating the result by `author_id` and subsequently retrieve those with `>=1` rows\\n```\\nSELECT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nGROUP BY author_id\\nHAVING COUNT(*) >= 1\\nORDER BY author_id ASC\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id ASC\\n```\n```\\nSELECT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nGROUP BY author_id\\nHAVING COUNT(*) >= 1\\nORDER BY author_id ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1952969,
                "title": "mysql-93-faster-group-by",
                "content": "```\\nselect author_id as id \\nfrom Views \\nwhere author_id = viewer_id\\ngroup by 1\\norder by 1;\\n```",
                "solutionTags": [],
                "code": "```\\nselect author_id as id \\nfrom Views \\nwhere author_id = viewer_id\\ngroup by 1\\norder by 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1945221,
                "title": "oracle-sql-simple-query-using-where-clause",
                "content": "\\n```\\nSELECT DISTINCT viewer_id AS id \\nFROM views \\nWHERE viewer_id = author_id \\nORDER BY id;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\nSELECT DISTINCT viewer_id AS id \\nFROM views \\nWHERE viewer_id = author_id \\nORDER BY id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1944068,
                "title": "simple-sql-solution-faster-than-94",
                "content": "```select distinct author_id as id from Views where author_id = viewer_id order by author_id;```",
                "solutionTags": [],
                "code": "```select distinct author_id as id from Views where author_id = viewer_id order by author_id;```",
                "codeTag": "Unknown"
            },
            {
                "id": 1897403,
                "title": "oracle-solution-almost-100-fast",
                "content": "```\\nselect distinct author_id as id from Views where author_id = viewer_id order by author_id asc\\n\\n```",
                "solutionTags": [],
                "code": "```\\nselect distinct author_id as id from Views where author_id = viewer_id order by author_id asc\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1839914,
                "title": "simple-clever-solution",
                "content": "```\\nSELECT DISTINCT author_id AS id\\nFROM Views \\nWHERE author_id - viewer_id = 0\\nORDER BY author_id ; \\n```\\n",
                "solutionTags": [],
                "code": "```\\nSELECT DISTINCT author_id AS id\\nFROM Views \\nWHERE author_id - viewer_id = 0\\nORDER BY author_id ; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1508877,
                "title": "select-distinct",
                "content": "```\\n/* Write your T-SQL query statement below */\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id ASC\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1474411,
                "title": "my-sql-only-where",
                "content": "\\'\\'\\'select distinct viewer_id as id from views where author_id=viewer_id order by viewer_id;\\'\\'\\'",
                "solutionTags": [],
                "code": "\\'\\'\\'select distinct viewer_id as id from views where author_id=viewer_id order by viewer_id;\\'\\'\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 1412364,
                "title": "mysql",
                "content": "```\\nSELECT \\n        distinct Author_id as id \\nFROM views \\nWHERE viewer_id = author_id order by author_id asc;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT \\n        distinct Author_id as id \\nFROM views \\nWHERE viewer_id = author_id order by author_id asc;",
                "codeTag": "Unknown"
            },
            {
                "id": 1245940,
                "title": "mysql",
                "content": "subquery, run time 422ms\\n```\\nwith newview as\\n(\\nselect author_id as id\\nfrom views\\nwhere author_id=viewer_id\\n)\\n\\nselect distinct id\\nfrom newview\\norder by id\\n```\\ndistinct, run time 461ms\\n```\\nselect distinct author_id as id\\nfrom views\\nwhere author_id=viewer_id\\norder by author_id\\n```",
                "solutionTags": [],
                "code": "```\\nwith newview as\\n(\\nselect author_id as id\\nfrom views\\nwhere author_id=viewer_id\\n)\\n\\nselect distinct id\\nfrom newview\\norder by id\\n```\n```\\nselect distinct author_id as id\\nfrom views\\nwhere author_id=viewer_id\\norder by author_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1236451,
                "title": "easy-solution",
                "content": "select distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;",
                "solutionTags": [],
                "code": "select distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;",
                "codeTag": "Unknown"
            },
            {
                "id": 1142037,
                "title": "mysql-simple-distinct-and-where-condition",
                "content": "```\\nselect distinct author_id as id\\nfrom views\\nwhere author_id = viewer_id\\norder by 1\\n```",
                "solutionTags": [],
                "code": "```\\nselect distinct author_id as id\\nfrom views\\nwhere author_id = viewer_id\\norder by 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 921175,
                "title": "simple-solution-using-distinct-where-clause-and-order-by",
                "content": "SELECT DISTINCT author_id AS id \\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id",
                "solutionTags": [],
                "code": "SELECT DISTINCT author_id AS id \\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id",
                "codeTag": "Unknown"
            },
            {
                "id": 910116,
                "title": "mysql-a-simple-select",
                "content": "```\\nSELECT DISTINCT author_id AS id FROM Views WHERE author_id = viewer_id ORDER BY author_id\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT DISTINCT author_id AS id FROM Views WHERE author_id = viewer_id ORDER BY author_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 904506,
                "title": "oracle-faster-then-94",
                "content": "```\\n/* Write your PL/SQL query statement below */\\nselect author_id id\\nfrom views\\ngroup by author_id\\nhaving sum(case when author_id = viewer_id then 1 else 0 end) >= 1\\norder by 1 asc\\n```\\n",
                "solutionTags": [],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nselect author_id id\\nfrom views\\ngroup by author_id\\nhaving sum(case when author_id = viewer_id then 1 else 0 end) >= 1\\norder by 1 asc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 812121,
                "title": "mysql-one-line-solution",
                "content": "```\\nselect distinct author_id as id from views where author_id = viewer_id order by author_id\\n```",
                "solutionTags": [],
                "code": "```\\nselect distinct author_id as id from views where author_id = viewer_id order by author_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 716827,
                "title": "my-solution",
                "content": "select distinct author_id as id\\nfrom\\n(select author_id, count(*) over(partition by author_id) as num\\nfrom Views\\nwhere author_id=viewer_id) t\\nwhere num>=1",
                "solutionTags": [],
                "code": "select distinct author_id as id\\nfrom\\n(select author_id, count(*) over(partition by author_id) as num\\nfrom Views\\nwhere author_id=viewer_id) t\\nwhere num>=1",
                "codeTag": "Unknown"
            },
            {
                "id": 700814,
                "title": "easy-mysql-using-where-clause",
                "content": "```\\nselect Distinct  author_id as id from Views where author_id=viewer_id  order by id;\\n```",
                "solutionTags": [],
                "code": "```\\nselect Distinct  author_id as id from Views where author_id=viewer_id  order by id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 417184,
                "title": "mysql-straightforward-solution",
                "content": "```\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id; \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 391296,
                "title": "simple-solution",
                "content": "select distinct author_id as id\\nfrom Views\\nwhere author_id=viewer_id\\norder by author_id",
                "solutionTags": [],
                "code": "select distinct author_id as id\\nfrom Views\\nwhere author_id=viewer_id\\norder by author_id",
                "codeTag": "Unknown"
            },
            {
                "id": 361925,
                "title": "easy-mysql-solution",
                "content": "```\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id \\n```",
                "solutionTags": [],
                "code": "```\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 356745,
                "title": "one-line-solution-faster-than-96-my-sql",
                "content": "select distinct viewer_id as id\\nfrom Views \\nwhere (if(author_id=viewer_id,1,0))=1 \\norder by viewer_id asc",
                "solutionTags": [],
                "code": "select distinct viewer_id as id\\nfrom Views \\nwhere (if(author_id=viewer_id,1,0))=1 \\norder by viewer_id asc",
                "codeTag": "Unknown"
            },
            {
                "id": 353392,
                "title": "simple-sql",
                "content": "```sql\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by 1;\\n```\\n",
                "solutionTags": [],
                "code": "```sql\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4091860,
                "title": "simple-sql-query",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect DISTINCT author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect DISTINCT author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4091819,
                "title": "python-clean-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nQuery, Filter, Sort, Rename, Return\\n\\n# Code\\n```\\n# MySQL\\nSELECT DISTINCT author_id as id\\nFROM Views\\nWHERE author_id=viewer_id\\nORDER BY author_id;\\n\\n# Pandas\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    result_df = pd.DataFrame(\\n        views.query(\\'author_id == viewer_id\\')[\\'author_id\\']\\n    )\\\\\\n    .drop_duplicates()\\\\\\n    .sort_values(by=\"author_id\")\\\\\\n    .rename(\\n        columns={\\n            \"author_id\": \"id\"\\n        }    \\n    )\\n\\n    return result_df\\n```",
                "solutionTags": [
                    "MySQL",
                    "Pandas"
                ],
                "code": "```\\n# MySQL\\nSELECT DISTINCT author_id as id\\nFROM Views\\nWHERE author_id=viewer_id\\nORDER BY author_id;\\n\\n# Pandas\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    result_df = pd.DataFrame(\\n        views.query(\\'author_id == viewer_id\\')[\\'author_id\\']\\n    )\\\\\\n    .drop_duplicates()\\\\\\n    .sort_values(by=\"author_id\")\\\\\\n    .rename(\\n        columns={\\n            \"author_id\": \"id\"\\n        }    \\n    )\\n\\n    return result_df\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4090592,
                "title": "148-article-views-i-solution-and-detailed-explanations",
                "content": "# Code 1\\n```\\nSELECT distinct author_id AS id\\n    FROM Views\\n    GROUP BY author_id,viewer_id\\n    HAVING author_id = viewer_id\\n    ORDER BY id ASC;\\n```\\n# Code 2\\n```\\nSELECT distinct viewer_id AS id\\n    FROM Views\\n    WHERE author_id = viewer_id\\n    ORDER BY id ASC;\\n```\\n# Intuition\\nFind all the authors that viewed at least one of their own article and print out their id\\n\\n# Steps\\nSELECT DISTINCT viewer_id AS id: \\n- This part of the code selects distinct values from the \"viewer_id\" column and assigns an alias \"id\" to the result. Using DISTINCT ensures that only unique \"viewer_id\" values are included in the result set.\\n\\nFROM Views: \\n- The data is being selected the \"Views\" table.\\n\\nWHERE author_id = viewer_id: \\n- This is the filter condition that selects rows where the \"author_id\" matches the \"viewer_id.\" It essentially selects views where the viewer is also the author.\\n\\nORDER BY id ASC:\\n- This orders the results by the \"id\" alias in ascending order (from the smallest to the largest).\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT distinct author_id AS id\\n    FROM Views\\n    GROUP BY author_id,viewer_id\\n    HAVING author_id = viewer_id\\n    ORDER BY id ASC;\\n```\n```\\nSELECT distinct viewer_id AS id\\n    FROM Views\\n    WHERE author_id = viewer_id\\n    ORDER BY id ASC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4090310,
                "title": "easy-sql-beats-68-10-of-users-with-mysql",
                "content": "# Code\\n```\\nSELECT DISTINCT author_id AS id \\nFROM Views \\n\\nWHERE author_id = viewer_id \\n# find all authors that viewed their own articles\\n\\nORDER BY id ASC; # order ascending by id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT DISTINCT author_id AS id \\nFROM Views \\n\\nWHERE author_id = viewer_id \\n# find all authors that viewed their own articles\\n\\nORDER BY id ASC; # order ascending by id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4090230,
                "title": "easy-to-understand-where-clause",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect distinct v1.author_id as id from Views v1\\nwhere v1.author_id = v1.viewer_id\\norder by id asc;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect distinct v1.author_id as id from Views v1\\nwhere v1.author_id = v1.viewer_id\\norder by id asc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4090155,
                "title": "simple-sql-query",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity -->\\n<!-- - Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSELECT DISTINCT author_id AS id FROM Views WHERE viewer_id = author_id ORDER BY id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT DISTINCT author_id AS id FROM Views WHERE viewer_id = author_id ORDER BY id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4089892,
                "title": "mysql-simple-approach-to-solve",
                "content": "select author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\ngroup by author_id\\norder by author_id asc",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "select author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\ngroup by author_id\\norder by author_id asc",
                "codeTag": "Unknown"
            },
            {
                "id": 4088766,
                "title": "simple-way",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nSELECT distinct AUTHOR_ID AS id\\nFROM VIEWS\\nWHERE AUTHOR_ID = (VIEWER_ID)\\nORDER BY AUTHOR_ID;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nSELECT distinct AUTHOR_ID AS id\\nFROM VIEWS\\nWHERE AUTHOR_ID = (VIEWER_ID)\\nORDER BY AUTHOR_ID;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4087227,
                "title": "using-where-clause",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect distinct author_id as id from views where author_id =viewer_id order by author_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect distinct author_id as id from views where author_id =viewer_id order by author_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4086459,
                "title": "distinct",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIt seemed easy however I forgot it needed to be a DISTINCT count\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nAdded DISTINCT to the SELECT line\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id=viewer_id \\nORDER BY author_id ASC\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id=viewer_id \\nORDER BY author_id ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4084081,
                "title": "sql-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id AS id \\nFROM Views \\nWHERE author_id = viewer_id \\nORDER BY author_id ASC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id AS id \\nFROM Views \\nWHERE author_id = viewer_id \\nORDER BY author_id ASC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4084073,
                "title": "best-straightforward-mysql-clean-code",
                "content": "\\tSELECT DISTINCT author_id AS id\\n\\tFROM Views\\n\\tWHERE author_id = viewer_id\\n\\tORDER BY id ASC;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "\\tSELECT DISTINCT author_id AS id\\n\\tFROM Views\\n\\tWHERE author_id = viewer_id\\n\\tORDER BY id ASC;",
                "codeTag": "Unknown"
            },
            {
                "id": 4081857,
                "title": "please-upvote-if-you-came-across-this",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id ORDER BY id ASC\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id ORDER BY id ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4081846,
                "title": "simple-solution",
                "content": "# Code\\n```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    df = pd.DataFrame()\\n    df[\\'id\\'] = views[views[\\'author_id\\'] == views[\\'viewer_id\\']][\\'author_id\\']\\n    df.drop_duplicates(inplace=True)\\n    df.sort_values(\\'id\\', axis=0, ascending=True, inplace=True)\\n    return df\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    df = pd.DataFrame()\\n    df[\\'id\\'] = views[views[\\'author_id\\'] == views[\\'viewer_id\\']][\\'author_id\\']\\n    df.drop_duplicates(inplace=True)\\n    df.sort_values(\\'id\\', axis=0, ascending=True, inplace=True)\\n    return df\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4079494,
                "title": "simple-solution-easy-understanding",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id asc\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id asc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4078858,
                "title": "mysql-solution",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id as id FROM Views WHERE author_id = viewer_id ORDER BY id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id as id FROM Views WHERE author_id = viewer_id ORDER BY id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4078719,
                "title": "sql-simple-solution",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id ASC\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4077528,
                "title": "mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id AS id\\nFROM Views WHERE author_id = viewer_id ORDER BY id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id AS id\\nFROM Views WHERE author_id = viewer_id ORDER BY id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4076169,
                "title": "using-self-join-beats-99",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nselect distinct author_id as id\\nfrom views\\nwhere author_id=viewer_id\\norder by id asc;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n\\nselect distinct author_id as id\\nfrom views\\nwhere author_id=viewer_id\\norder by id asc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4074933,
                "title": "my-sql-solution",
                "content": "\\nselect distinct author_id as id from Views\\nwhere author_id=viewer_id \\norder by id ASC;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "\\nselect distinct author_id as id from Views\\nwhere author_id=viewer_id \\norder by id ASC;",
                "codeTag": "Unknown"
            },
            {
                "id": 4074090,
                "title": "easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect distinct author_id as id  from Views where author_id=viewer_id order by id ASC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect distinct author_id as id  from Views where author_id=viewer_id order by id ASC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4074071,
                "title": "beats-94-49",
                "content": "\\n# Approach\\n- SELECT DISTINCT statement is used to return only distinct (different) values.\\n\\n- ORDER BY keyword is used to sort the result-set in ascending or descending order.\\n\\n- ORDER BY Syntax\\n\\n    SELECT column1, column2, ...\\n    FROM table_name\\n    ORDER BY column1, column2, ... ASC|DESC; \\n\\n# Complexity\\nRuntime :: 718ms\\nMemory :: 0.00MB Beats 100.00%\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect DISTINCT author_id as id from Views where author_id = viewer_id ORDER BY author_id ASC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect DISTINCT author_id as id from Views where author_id = viewer_id ORDER BY author_id ASC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4073825,
                "title": "group-by",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nselect author_id as id from views group by author_id, viewer_id having author_id=viewer_id order by author_id;\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nselect author_id as id from views group by author_id, viewer_id having author_id=viewer_id order by author_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4073198,
                "title": "article-views-using-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nPandas Documentation\\n# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\nO(n)\\n# Code\\n```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    df = views[views[\\'author_id\\'] == views[\\'viewer_id\\']][[\\'author_id\\']]\\n    df = df.drop_duplicates()\\n    df.rename(columns = {\"author_id\":\"id\"}, inplace=True)\\n    df = df.sort_values(by=[\\'id\\'])\\n    return df\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    df = views[views[\\'author_id\\'] == views[\\'viewer_id\\']][[\\'author_id\\']]\\n    df = df.drop_duplicates()\\n    df.rename(columns = {\"author_id\":\"id\"}, inplace=True)\\n    df = df.sort_values(by=[\\'id\\'])\\n    return df\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4073025,
                "title": "simple-code",
                "content": "\\n```\\n\\nselect Distinct(author_id) as id from views\\nwhere author_id=viewer_id\\nOrder by author_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n\\nselect Distinct(author_id) as id from views\\nwhere author_id=viewer_id\\nOrder by author_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072762,
                "title": "easy-mysql-solution",
                "content": "```\\nselect distinct author_id id \\nfrom Views where author_id=viewer_id \\norder by author_id;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect distinct author_id id \\nfrom Views where author_id=viewer_id \\norder by author_id;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072215,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query st\\nselect author_id as id\\nfrom Views\\nwhere author_id=viewer_id \\ngroup by author_id\\norder by author_id asc\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query st\\nselect author_id as id\\nfrom Views\\nwhere author_id=viewer_id \\ngroup by author_id\\norder by author_id asc\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072038,
                "title": "easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSO basically DISTINCT- gives unique values\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT DISTINCT(author_id)as id FROM Views  where author_id=viewer_id order by id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT DISTINCT(author_id)as id FROM Views  where author_id=viewer_id order by id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4071942,
                "title": "using-distinct-and-group-by",
                "content": "\\n# Using DISTINCT\\n```\\nSELECT DISTINCT author_id AS id \\nFROM Views\\nWHERE author_id = viewer_id ORDER BY author_id;\\n```\\n\\n# Using GROUP BY\\n```\\nSELECT author_id AS id \\nFROM Views \\nWHERE author_id = viewer_id \\nGROUP BY author_id \\nORDER BY author_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT DISTINCT author_id AS id \\nFROM Views\\nWHERE author_id = viewer_id ORDER BY author_id;\\n```\n```\\nSELECT author_id AS id \\nFROM Views \\nWHERE author_id = viewer_id \\nGROUP BY author_id \\nORDER BY author_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4071711,
                "title": "self-view-analysis-of-articles",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n1. Filtering out rows where author_id matches viewer_id \\u2014 this implies that the author is viewing their own article.\\n2. From the filtered rows, we retrieve the unique author_id values to understand which authors view their articles.\\n3. We then sort these unique author IDs for a structured output.\\n4. Lastly, we create a new dataframe to return these IDs in the desired format.\\n\\n# Complexity\\n- Time complexity: \\\\(O(n \\\\log n)\\\\)\\n   - Filtering rows is \\\\(O(n)\\\\).\\n   - Getting unique values is \\\\(O(n)\\\\) in average cases.\\n   - Sorting the unique author IDs has a complexity of \\\\(O(n \\\\log n)\\\\).\\n   Hence, the dominant factor is \\\\(O(n \\\\log n)\\\\).\\n\\n- Space complexity: \\\\(O(n)\\\\)\\n  - `df` can take up to \\\\(O(n)\\\\) space.\\n  - `data` also can take up to \\\\(O(n)\\\\) space.\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n  df = views[views.author_id == views.viewer_id]\\n  data = df[\\'author_id\\'].unique()\\n  data = sorted(data)\\n  df2 = pd.DataFrame({\\'id\\': data})\\n  return df2\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n  df = views[views.author_id == views.viewer_id]\\n  data = df[\\'author_id\\'].unique()\\n  data = sorted(data)\\n  df2 = pd.DataFrame({\\'id\\': data})\\n  return df2\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4071596,
                "title": "sql-straight-forward-simple-solution",
                "content": "\\n```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id as id\\n        FROM Views\\n        WHERE author_id = viewer_id\\n        ORDER BY id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id as id\\n        FROM Views\\n        WHERE author_id = viewer_id\\n        ORDER BY id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4071349,
                "title": "very-simple-solution-easy-to-understand",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by id ASC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by id ASC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4071170,
                "title": "find-the-result-and-assign-the-value-to-id-and-order-by-that-id",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect distinct author_id as id from views where author_id = viewer_id order by id asc;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect distinct author_id as id from views where author_id = viewer_id order by id asc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4070805,
                "title": "easy-mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id id FROM VIEWS\\nWHERE author_id = viewer_id order by id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id id FROM VIEWS\\nWHERE author_id = viewer_id order by id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4070492,
                "title": "article-views-i-here-s-the-solution",
                "content": "# Code\\n```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n  return views.loc[views[\"author_id\"] == views[\"viewer_id\"], [\"author_id\"]].drop_duplicates().rename(columns={\"author_id\" : \"id\"}).sort_values(by=[\"id\"])\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n  return views.loc[views[\"author_id\"] == views[\"viewer_id\"], [\"author_id\"]].drop_duplicates().rename(columns={\"author_id\" : \"id\"}).sort_values(by=[\"id\"])\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4068051,
                "title": "sql-simple-beats-98",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect distinct(author_id) as id from views where author_id = viewer_id order by author_id asc\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect distinct(author_id) as id from views where author_id = viewer_id order by author_id asc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4067080,
                "title": "distinct",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFair problem\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nI used Distinct to get a single Id value since one of the authors viewed their article multiple times \\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id =viewer_id\\nORDER BY 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id =viewer_id\\nORDER BY 1;\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1872461,
                "content": [
                    {
                        "username": "CoffeeCode247",
                        "content": "Keep the discussion area for discussion, wouldn\\'t that be wonderful."
                    },
                    {
                        "username": "Sanjaya23",
                        "content": "Absolutely.sometime when i do not know where to start i look at discussion for some hints only , and there is always whole solution."
                    },
                    {
                        "username": "suyash_5050",
                        "content": "Life was much better when there were No Solutions in Disussion :)"
                    },
                    {
                        "username": "atharva2104",
                        "content": "Easiest Solution-\\n\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;"
                    },
                    {
                        "username": "WanyueD",
                        "content": "Why should we write \"distinct\"? Thanks for answering"
                    },
                    {
                        "username": "Vi_bhatia",
                        "content": "Select author_id as id from Views where author_id=viewer_id GROUP BY author_id ORDER BY author_id ASC;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yes\\n\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id\\nfrom views \\nwhere author_id = viewer_id\\norder by author_id asc\\n\\n"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use this (please upvote)\\n`select distinct(author_id) as id from views where author_id=viewer_id order by author_id;`"
                    },
                    {
                        "username": "mahala",
                        "content": "Hello,\\nCan anybody please guide why the following solution is wrong? I am getting correct answer but it\\'s not accepting. Please help. Both answers are not being accept though I have passed test case.\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id\\nGROUP BY v1.article_id HAVING COUNT(v1.viewer_id) >= 1 ORDER BY v1.author_id;\\n\\nOR\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id  ORDER BY v1.author_id;"
                    },
                    {
                        "username": "danocam",
                        "content": "If it were a case in which you were attempting join a table to itself you might go with a Self-Join. Applied to this case it\\'d look something like this using a comma separated join in the FROM clause:\\n                             \\nSELECT DISTINCT a.column_name \\nFROM table1 a, table1 b \\nWHERE a.column_name1 = b.column_name2\\nORDER BY id: \\n\\n*basically we are trying to create a join that duplicates the same table ie same name, columns, data."
                    },
                    {
                        "username": "digantpatel404",
                        "content": "In 1st statement no need to groupby since you are selecting DISTINCT v1.authorid, \\nIn 2nd statement, use this\\nSELECT DISTINCT v1.author_id AS id \\nFROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id \\nWHERE v1.author_id = v2.author_id\\nORDER BY id;"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "[@BobMarl](/BobMarl) \\n\\nFOR 1st querry: you are using group by clouse without using any aggrigate function\\n\\nFOR 2nd querry you are joning those where view id and author id is equal which may give you those row where these id are similar for artical published by different author"
                    },
                    {
                        "username": "BobMarl",
                        "content": "TL;DR - just add to your join - \"and v1.article_id = v2.article_id\"\n\nExplanation:\nFirst of all your solution is a bit complicated but the problem is that your inner join combines rows from different articles, for example -\n| article_id | author_id | viewer_id | view_date  |\n| ---------- | --------- | --------- | ----------     |\n| 1             | 4             | 7            | 2019-07-01 |\n| 2             | 7             | 4            | 2019-07-02 |\n| 2             | 7             | 7            | 2019-07-03 |\n\nThe inner join result will be - \n| article_id | author_id | viewer_id | view_date  | article_id | author_id | viewer_id | view_date  | X/V |\n| ---------- | --------- | --------- | ---------- | ---------- | --------- | --------- | ---------- | ---------- |\n| 1          | 4         | 7         | 2019-07-02 | 2          | 7         | 4         | 2019-07-02 | X         |\n| 2          | 7         | 7         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | V         |\n| 2          | 7         | 7         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | V         |\n\nYou don't want the rows (with X) where the article of v2 is different from v1 (we get a viewer from other article).\nSo if you just add to your join - \"and v1.article_id = v2.article_id\" then it will result the correct one.\n\nGood luck!"
                    },
                    {
                        "username": "andradron",
                        "content": "1) Your solution is not accepted, because it doesn't pass all test cases.\n2) Your solution doesn't pass all cases, because it's wrong\n3) Your solution is wrong, because.... try to figure it out by yourself) \n4) Some hints for you: try to simplify it, by finding some logical pattern, it's going to help you to exclude unnecessary join, group by and having.\n5)The logic behind solution is simple like, if author and viewer is the same person, it means author has read his own article at least once, so you need to take person's id once, even if he read many own articles.\nHope it helps!  "
                    },
                    {
                        "username": "techieKundan",
                        "content": "select distinct v.viewer_id as id\\nfrom views v \\nwhere v.viewer_id = v.author_id\\ngroup by v.view_date\\norder by id;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "No need to group view_date, distinct is enough"
                    },
                    {
                        "username": "TuanMinh03",
                        "content": "my solution \\nSELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "tusharsingh1605",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT  DISTINCT AUTHOR_ID AS ID  FROM VIEWS   WHERE AUTHOR_ID  = VIEWER_ID \\nORDER BY AUTHOR_ID ASC  ;"
                    },
                    {
                        "username": "reduardorafa",
                        "content": "SELECT DISTINCT author_id as id\\nFROM views\\nWHERE  author_id = viewer_id\\nORDER BY author_id "
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 2016968,
                "content": [
                    {
                        "username": "CoffeeCode247",
                        "content": "Keep the discussion area for discussion, wouldn\\'t that be wonderful."
                    },
                    {
                        "username": "Sanjaya23",
                        "content": "Absolutely.sometime when i do not know where to start i look at discussion for some hints only , and there is always whole solution."
                    },
                    {
                        "username": "suyash_5050",
                        "content": "Life was much better when there were No Solutions in Disussion :)"
                    },
                    {
                        "username": "atharva2104",
                        "content": "Easiest Solution-\\n\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;"
                    },
                    {
                        "username": "WanyueD",
                        "content": "Why should we write \"distinct\"? Thanks for answering"
                    },
                    {
                        "username": "Vi_bhatia",
                        "content": "Select author_id as id from Views where author_id=viewer_id GROUP BY author_id ORDER BY author_id ASC;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yes\\n\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id\\nfrom views \\nwhere author_id = viewer_id\\norder by author_id asc\\n\\n"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use this (please upvote)\\n`select distinct(author_id) as id from views where author_id=viewer_id order by author_id;`"
                    },
                    {
                        "username": "mahala",
                        "content": "Hello,\\nCan anybody please guide why the following solution is wrong? I am getting correct answer but it\\'s not accepting. Please help. Both answers are not being accept though I have passed test case.\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id\\nGROUP BY v1.article_id HAVING COUNT(v1.viewer_id) >= 1 ORDER BY v1.author_id;\\n\\nOR\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id  ORDER BY v1.author_id;"
                    },
                    {
                        "username": "danocam",
                        "content": "If it were a case in which you were attempting join a table to itself you might go with a Self-Join. Applied to this case it\\'d look something like this using a comma separated join in the FROM clause:\\n                             \\nSELECT DISTINCT a.column_name \\nFROM table1 a, table1 b \\nWHERE a.column_name1 = b.column_name2\\nORDER BY id: \\n\\n*basically we are trying to create a join that duplicates the same table ie same name, columns, data."
                    },
                    {
                        "username": "digantpatel404",
                        "content": "In 1st statement no need to groupby since you are selecting DISTINCT v1.authorid, \\nIn 2nd statement, use this\\nSELECT DISTINCT v1.author_id AS id \\nFROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id \\nWHERE v1.author_id = v2.author_id\\nORDER BY id;"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "[@BobMarl](/BobMarl) \\n\\nFOR 1st querry: you are using group by clouse without using any aggrigate function\\n\\nFOR 2nd querry you are joning those where view id and author id is equal which may give you those row where these id are similar for artical published by different author"
                    },
                    {
                        "username": "BobMarl",
                        "content": "TL;DR - just add to your join - \"and v1.article_id = v2.article_id\"\n\nExplanation:\nFirst of all your solution is a bit complicated but the problem is that your inner join combines rows from different articles, for example -\n| article_id | author_id | viewer_id | view_date  |\n| ---------- | --------- | --------- | ----------     |\n| 1             | 4             | 7            | 2019-07-01 |\n| 2             | 7             | 4            | 2019-07-02 |\n| 2             | 7             | 7            | 2019-07-03 |\n\nThe inner join result will be - \n| article_id | author_id | viewer_id | view_date  | article_id | author_id | viewer_id | view_date  | X/V |\n| ---------- | --------- | --------- | ---------- | ---------- | --------- | --------- | ---------- | ---------- |\n| 1          | 4         | 7         | 2019-07-02 | 2          | 7         | 4         | 2019-07-02 | X         |\n| 2          | 7         | 7         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | V         |\n| 2          | 7         | 7         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | V         |\n\nYou don't want the rows (with X) where the article of v2 is different from v1 (we get a viewer from other article).\nSo if you just add to your join - \"and v1.article_id = v2.article_id\" then it will result the correct one.\n\nGood luck!"
                    },
                    {
                        "username": "andradron",
                        "content": "1) Your solution is not accepted, because it doesn't pass all test cases.\n2) Your solution doesn't pass all cases, because it's wrong\n3) Your solution is wrong, because.... try to figure it out by yourself) \n4) Some hints for you: try to simplify it, by finding some logical pattern, it's going to help you to exclude unnecessary join, group by and having.\n5)The logic behind solution is simple like, if author and viewer is the same person, it means author has read his own article at least once, so you need to take person's id once, even if he read many own articles.\nHope it helps!  "
                    },
                    {
                        "username": "techieKundan",
                        "content": "select distinct v.viewer_id as id\\nfrom views v \\nwhere v.viewer_id = v.author_id\\ngroup by v.view_date\\norder by id;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "No need to group view_date, distinct is enough"
                    },
                    {
                        "username": "TuanMinh03",
                        "content": "my solution \\nSELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "tusharsingh1605",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT  DISTINCT AUTHOR_ID AS ID  FROM VIEWS   WHERE AUTHOR_ID  = VIEWER_ID \\nORDER BY AUTHOR_ID ASC  ;"
                    },
                    {
                        "username": "reduardorafa",
                        "content": "SELECT DISTINCT author_id as id\\nFROM views\\nWHERE  author_id = viewer_id\\nORDER BY author_id "
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1710716,
                "content": [
                    {
                        "username": "CoffeeCode247",
                        "content": "Keep the discussion area for discussion, wouldn\\'t that be wonderful."
                    },
                    {
                        "username": "Sanjaya23",
                        "content": "Absolutely.sometime when i do not know where to start i look at discussion for some hints only , and there is always whole solution."
                    },
                    {
                        "username": "suyash_5050",
                        "content": "Life was much better when there were No Solutions in Disussion :)"
                    },
                    {
                        "username": "atharva2104",
                        "content": "Easiest Solution-\\n\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;"
                    },
                    {
                        "username": "WanyueD",
                        "content": "Why should we write \"distinct\"? Thanks for answering"
                    },
                    {
                        "username": "Vi_bhatia",
                        "content": "Select author_id as id from Views where author_id=viewer_id GROUP BY author_id ORDER BY author_id ASC;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yes\\n\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id\\nfrom views \\nwhere author_id = viewer_id\\norder by author_id asc\\n\\n"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use this (please upvote)\\n`select distinct(author_id) as id from views where author_id=viewer_id order by author_id;`"
                    },
                    {
                        "username": "mahala",
                        "content": "Hello,\\nCan anybody please guide why the following solution is wrong? I am getting correct answer but it\\'s not accepting. Please help. Both answers are not being accept though I have passed test case.\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id\\nGROUP BY v1.article_id HAVING COUNT(v1.viewer_id) >= 1 ORDER BY v1.author_id;\\n\\nOR\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id  ORDER BY v1.author_id;"
                    },
                    {
                        "username": "danocam",
                        "content": "If it were a case in which you were attempting join a table to itself you might go with a Self-Join. Applied to this case it\\'d look something like this using a comma separated join in the FROM clause:\\n                             \\nSELECT DISTINCT a.column_name \\nFROM table1 a, table1 b \\nWHERE a.column_name1 = b.column_name2\\nORDER BY id: \\n\\n*basically we are trying to create a join that duplicates the same table ie same name, columns, data."
                    },
                    {
                        "username": "digantpatel404",
                        "content": "In 1st statement no need to groupby since you are selecting DISTINCT v1.authorid, \\nIn 2nd statement, use this\\nSELECT DISTINCT v1.author_id AS id \\nFROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id \\nWHERE v1.author_id = v2.author_id\\nORDER BY id;"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "[@BobMarl](/BobMarl) \\n\\nFOR 1st querry: you are using group by clouse without using any aggrigate function\\n\\nFOR 2nd querry you are joning those where view id and author id is equal which may give you those row where these id are similar for artical published by different author"
                    },
                    {
                        "username": "BobMarl",
                        "content": "TL;DR - just add to your join - \"and v1.article_id = v2.article_id\"\n\nExplanation:\nFirst of all your solution is a bit complicated but the problem is that your inner join combines rows from different articles, for example -\n| article_id | author_id | viewer_id | view_date  |\n| ---------- | --------- | --------- | ----------     |\n| 1             | 4             | 7            | 2019-07-01 |\n| 2             | 7             | 4            | 2019-07-02 |\n| 2             | 7             | 7            | 2019-07-03 |\n\nThe inner join result will be - \n| article_id | author_id | viewer_id | view_date  | article_id | author_id | viewer_id | view_date  | X/V |\n| ---------- | --------- | --------- | ---------- | ---------- | --------- | --------- | ---------- | ---------- |\n| 1          | 4         | 7         | 2019-07-02 | 2          | 7         | 4         | 2019-07-02 | X         |\n| 2          | 7         | 7         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | V         |\n| 2          | 7         | 7         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | V         |\n\nYou don't want the rows (with X) where the article of v2 is different from v1 (we get a viewer from other article).\nSo if you just add to your join - \"and v1.article_id = v2.article_id\" then it will result the correct one.\n\nGood luck!"
                    },
                    {
                        "username": "andradron",
                        "content": "1) Your solution is not accepted, because it doesn't pass all test cases.\n2) Your solution doesn't pass all cases, because it's wrong\n3) Your solution is wrong, because.... try to figure it out by yourself) \n4) Some hints for you: try to simplify it, by finding some logical pattern, it's going to help you to exclude unnecessary join, group by and having.\n5)The logic behind solution is simple like, if author and viewer is the same person, it means author has read his own article at least once, so you need to take person's id once, even if he read many own articles.\nHope it helps!  "
                    },
                    {
                        "username": "techieKundan",
                        "content": "select distinct v.viewer_id as id\\nfrom views v \\nwhere v.viewer_id = v.author_id\\ngroup by v.view_date\\norder by id;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "No need to group view_date, distinct is enough"
                    },
                    {
                        "username": "TuanMinh03",
                        "content": "my solution \\nSELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "tusharsingh1605",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT  DISTINCT AUTHOR_ID AS ID  FROM VIEWS   WHERE AUTHOR_ID  = VIEWER_ID \\nORDER BY AUTHOR_ID ASC  ;"
                    },
                    {
                        "username": "reduardorafa",
                        "content": "SELECT DISTINCT author_id as id\\nFROM views\\nWHERE  author_id = viewer_id\\nORDER BY author_id "
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1749314,
                "content": [
                    {
                        "username": "CoffeeCode247",
                        "content": "Keep the discussion area for discussion, wouldn\\'t that be wonderful."
                    },
                    {
                        "username": "Sanjaya23",
                        "content": "Absolutely.sometime when i do not know where to start i look at discussion for some hints only , and there is always whole solution."
                    },
                    {
                        "username": "suyash_5050",
                        "content": "Life was much better when there were No Solutions in Disussion :)"
                    },
                    {
                        "username": "atharva2104",
                        "content": "Easiest Solution-\\n\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;"
                    },
                    {
                        "username": "WanyueD",
                        "content": "Why should we write \"distinct\"? Thanks for answering"
                    },
                    {
                        "username": "Vi_bhatia",
                        "content": "Select author_id as id from Views where author_id=viewer_id GROUP BY author_id ORDER BY author_id ASC;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yes\\n\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id\\nfrom views \\nwhere author_id = viewer_id\\norder by author_id asc\\n\\n"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use this (please upvote)\\n`select distinct(author_id) as id from views where author_id=viewer_id order by author_id;`"
                    },
                    {
                        "username": "mahala",
                        "content": "Hello,\\nCan anybody please guide why the following solution is wrong? I am getting correct answer but it\\'s not accepting. Please help. Both answers are not being accept though I have passed test case.\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id\\nGROUP BY v1.article_id HAVING COUNT(v1.viewer_id) >= 1 ORDER BY v1.author_id;\\n\\nOR\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id  ORDER BY v1.author_id;"
                    },
                    {
                        "username": "danocam",
                        "content": "If it were a case in which you were attempting join a table to itself you might go with a Self-Join. Applied to this case it\\'d look something like this using a comma separated join in the FROM clause:\\n                             \\nSELECT DISTINCT a.column_name \\nFROM table1 a, table1 b \\nWHERE a.column_name1 = b.column_name2\\nORDER BY id: \\n\\n*basically we are trying to create a join that duplicates the same table ie same name, columns, data."
                    },
                    {
                        "username": "digantpatel404",
                        "content": "In 1st statement no need to groupby since you are selecting DISTINCT v1.authorid, \\nIn 2nd statement, use this\\nSELECT DISTINCT v1.author_id AS id \\nFROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id \\nWHERE v1.author_id = v2.author_id\\nORDER BY id;"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "[@BobMarl](/BobMarl) \\n\\nFOR 1st querry: you are using group by clouse without using any aggrigate function\\n\\nFOR 2nd querry you are joning those where view id and author id is equal which may give you those row where these id are similar for artical published by different author"
                    },
                    {
                        "username": "BobMarl",
                        "content": "TL;DR - just add to your join - \"and v1.article_id = v2.article_id\"\n\nExplanation:\nFirst of all your solution is a bit complicated but the problem is that your inner join combines rows from different articles, for example -\n| article_id | author_id | viewer_id | view_date  |\n| ---------- | --------- | --------- | ----------     |\n| 1             | 4             | 7            | 2019-07-01 |\n| 2             | 7             | 4            | 2019-07-02 |\n| 2             | 7             | 7            | 2019-07-03 |\n\nThe inner join result will be - \n| article_id | author_id | viewer_id | view_date  | article_id | author_id | viewer_id | view_date  | X/V |\n| ---------- | --------- | --------- | ---------- | ---------- | --------- | --------- | ---------- | ---------- |\n| 1          | 4         | 7         | 2019-07-02 | 2          | 7         | 4         | 2019-07-02 | X         |\n| 2          | 7         | 7         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | V         |\n| 2          | 7         | 7         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | V         |\n\nYou don't want the rows (with X) where the article of v2 is different from v1 (we get a viewer from other article).\nSo if you just add to your join - \"and v1.article_id = v2.article_id\" then it will result the correct one.\n\nGood luck!"
                    },
                    {
                        "username": "andradron",
                        "content": "1) Your solution is not accepted, because it doesn't pass all test cases.\n2) Your solution doesn't pass all cases, because it's wrong\n3) Your solution is wrong, because.... try to figure it out by yourself) \n4) Some hints for you: try to simplify it, by finding some logical pattern, it's going to help you to exclude unnecessary join, group by and having.\n5)The logic behind solution is simple like, if author and viewer is the same person, it means author has read his own article at least once, so you need to take person's id once, even if he read many own articles.\nHope it helps!  "
                    },
                    {
                        "username": "techieKundan",
                        "content": "select distinct v.viewer_id as id\\nfrom views v \\nwhere v.viewer_id = v.author_id\\ngroup by v.view_date\\norder by id;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "No need to group view_date, distinct is enough"
                    },
                    {
                        "username": "TuanMinh03",
                        "content": "my solution \\nSELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "tusharsingh1605",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT  DISTINCT AUTHOR_ID AS ID  FROM VIEWS   WHERE AUTHOR_ID  = VIEWER_ID \\nORDER BY AUTHOR_ID ASC  ;"
                    },
                    {
                        "username": "reduardorafa",
                        "content": "SELECT DISTINCT author_id as id\\nFROM views\\nWHERE  author_id = viewer_id\\nORDER BY author_id "
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1574656,
                "content": [
                    {
                        "username": "CoffeeCode247",
                        "content": "Keep the discussion area for discussion, wouldn\\'t that be wonderful."
                    },
                    {
                        "username": "Sanjaya23",
                        "content": "Absolutely.sometime when i do not know where to start i look at discussion for some hints only , and there is always whole solution."
                    },
                    {
                        "username": "suyash_5050",
                        "content": "Life was much better when there were No Solutions in Disussion :)"
                    },
                    {
                        "username": "atharva2104",
                        "content": "Easiest Solution-\\n\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;"
                    },
                    {
                        "username": "WanyueD",
                        "content": "Why should we write \"distinct\"? Thanks for answering"
                    },
                    {
                        "username": "Vi_bhatia",
                        "content": "Select author_id as id from Views where author_id=viewer_id GROUP BY author_id ORDER BY author_id ASC;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yes\\n\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id\\nfrom views \\nwhere author_id = viewer_id\\norder by author_id asc\\n\\n"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use this (please upvote)\\n`select distinct(author_id) as id from views where author_id=viewer_id order by author_id;`"
                    },
                    {
                        "username": "mahala",
                        "content": "Hello,\\nCan anybody please guide why the following solution is wrong? I am getting correct answer but it\\'s not accepting. Please help. Both answers are not being accept though I have passed test case.\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id\\nGROUP BY v1.article_id HAVING COUNT(v1.viewer_id) >= 1 ORDER BY v1.author_id;\\n\\nOR\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id  ORDER BY v1.author_id;"
                    },
                    {
                        "username": "danocam",
                        "content": "If it were a case in which you were attempting join a table to itself you might go with a Self-Join. Applied to this case it\\'d look something like this using a comma separated join in the FROM clause:\\n                             \\nSELECT DISTINCT a.column_name \\nFROM table1 a, table1 b \\nWHERE a.column_name1 = b.column_name2\\nORDER BY id: \\n\\n*basically we are trying to create a join that duplicates the same table ie same name, columns, data."
                    },
                    {
                        "username": "digantpatel404",
                        "content": "In 1st statement no need to groupby since you are selecting DISTINCT v1.authorid, \\nIn 2nd statement, use this\\nSELECT DISTINCT v1.author_id AS id \\nFROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id \\nWHERE v1.author_id = v2.author_id\\nORDER BY id;"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "[@BobMarl](/BobMarl) \\n\\nFOR 1st querry: you are using group by clouse without using any aggrigate function\\n\\nFOR 2nd querry you are joning those where view id and author id is equal which may give you those row where these id are similar for artical published by different author"
                    },
                    {
                        "username": "BobMarl",
                        "content": "TL;DR - just add to your join - \"and v1.article_id = v2.article_id\"\n\nExplanation:\nFirst of all your solution is a bit complicated but the problem is that your inner join combines rows from different articles, for example -\n| article_id | author_id | viewer_id | view_date  |\n| ---------- | --------- | --------- | ----------     |\n| 1             | 4             | 7            | 2019-07-01 |\n| 2             | 7             | 4            | 2019-07-02 |\n| 2             | 7             | 7            | 2019-07-03 |\n\nThe inner join result will be - \n| article_id | author_id | viewer_id | view_date  | article_id | author_id | viewer_id | view_date  | X/V |\n| ---------- | --------- | --------- | ---------- | ---------- | --------- | --------- | ---------- | ---------- |\n| 1          | 4         | 7         | 2019-07-02 | 2          | 7         | 4         | 2019-07-02 | X         |\n| 2          | 7         | 7         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | V         |\n| 2          | 7         | 7         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | V         |\n\nYou don't want the rows (with X) where the article of v2 is different from v1 (we get a viewer from other article).\nSo if you just add to your join - \"and v1.article_id = v2.article_id\" then it will result the correct one.\n\nGood luck!"
                    },
                    {
                        "username": "andradron",
                        "content": "1) Your solution is not accepted, because it doesn't pass all test cases.\n2) Your solution doesn't pass all cases, because it's wrong\n3) Your solution is wrong, because.... try to figure it out by yourself) \n4) Some hints for you: try to simplify it, by finding some logical pattern, it's going to help you to exclude unnecessary join, group by and having.\n5)The logic behind solution is simple like, if author and viewer is the same person, it means author has read his own article at least once, so you need to take person's id once, even if he read many own articles.\nHope it helps!  "
                    },
                    {
                        "username": "techieKundan",
                        "content": "select distinct v.viewer_id as id\\nfrom views v \\nwhere v.viewer_id = v.author_id\\ngroup by v.view_date\\norder by id;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "No need to group view_date, distinct is enough"
                    },
                    {
                        "username": "TuanMinh03",
                        "content": "my solution \\nSELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "tusharsingh1605",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT  DISTINCT AUTHOR_ID AS ID  FROM VIEWS   WHERE AUTHOR_ID  = VIEWER_ID \\nORDER BY AUTHOR_ID ASC  ;"
                    },
                    {
                        "username": "reduardorafa",
                        "content": "SELECT DISTINCT author_id as id\\nFROM views\\nWHERE  author_id = viewer_id\\nORDER BY author_id "
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1925574,
                "content": [
                    {
                        "username": "CoffeeCode247",
                        "content": "Keep the discussion area for discussion, wouldn\\'t that be wonderful."
                    },
                    {
                        "username": "Sanjaya23",
                        "content": "Absolutely.sometime when i do not know where to start i look at discussion for some hints only , and there is always whole solution."
                    },
                    {
                        "username": "suyash_5050",
                        "content": "Life was much better when there were No Solutions in Disussion :)"
                    },
                    {
                        "username": "atharva2104",
                        "content": "Easiest Solution-\\n\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;"
                    },
                    {
                        "username": "WanyueD",
                        "content": "Why should we write \"distinct\"? Thanks for answering"
                    },
                    {
                        "username": "Vi_bhatia",
                        "content": "Select author_id as id from Views where author_id=viewer_id GROUP BY author_id ORDER BY author_id ASC;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yes\\n\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id\\nfrom views \\nwhere author_id = viewer_id\\norder by author_id asc\\n\\n"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use this (please upvote)\\n`select distinct(author_id) as id from views where author_id=viewer_id order by author_id;`"
                    },
                    {
                        "username": "mahala",
                        "content": "Hello,\\nCan anybody please guide why the following solution is wrong? I am getting correct answer but it\\'s not accepting. Please help. Both answers are not being accept though I have passed test case.\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id\\nGROUP BY v1.article_id HAVING COUNT(v1.viewer_id) >= 1 ORDER BY v1.author_id;\\n\\nOR\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id  ORDER BY v1.author_id;"
                    },
                    {
                        "username": "danocam",
                        "content": "If it were a case in which you were attempting join a table to itself you might go with a Self-Join. Applied to this case it\\'d look something like this using a comma separated join in the FROM clause:\\n                             \\nSELECT DISTINCT a.column_name \\nFROM table1 a, table1 b \\nWHERE a.column_name1 = b.column_name2\\nORDER BY id: \\n\\n*basically we are trying to create a join that duplicates the same table ie same name, columns, data."
                    },
                    {
                        "username": "digantpatel404",
                        "content": "In 1st statement no need to groupby since you are selecting DISTINCT v1.authorid, \\nIn 2nd statement, use this\\nSELECT DISTINCT v1.author_id AS id \\nFROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id \\nWHERE v1.author_id = v2.author_id\\nORDER BY id;"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "[@BobMarl](/BobMarl) \\n\\nFOR 1st querry: you are using group by clouse without using any aggrigate function\\n\\nFOR 2nd querry you are joning those where view id and author id is equal which may give you those row where these id are similar for artical published by different author"
                    },
                    {
                        "username": "BobMarl",
                        "content": "TL;DR - just add to your join - \"and v1.article_id = v2.article_id\"\n\nExplanation:\nFirst of all your solution is a bit complicated but the problem is that your inner join combines rows from different articles, for example -\n| article_id | author_id | viewer_id | view_date  |\n| ---------- | --------- | --------- | ----------     |\n| 1             | 4             | 7            | 2019-07-01 |\n| 2             | 7             | 4            | 2019-07-02 |\n| 2             | 7             | 7            | 2019-07-03 |\n\nThe inner join result will be - \n| article_id | author_id | viewer_id | view_date  | article_id | author_id | viewer_id | view_date  | X/V |\n| ---------- | --------- | --------- | ---------- | ---------- | --------- | --------- | ---------- | ---------- |\n| 1          | 4         | 7         | 2019-07-02 | 2          | 7         | 4         | 2019-07-02 | X         |\n| 2          | 7         | 7         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | V         |\n| 2          | 7         | 7         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | V         |\n\nYou don't want the rows (with X) where the article of v2 is different from v1 (we get a viewer from other article).\nSo if you just add to your join - \"and v1.article_id = v2.article_id\" then it will result the correct one.\n\nGood luck!"
                    },
                    {
                        "username": "andradron",
                        "content": "1) Your solution is not accepted, because it doesn't pass all test cases.\n2) Your solution doesn't pass all cases, because it's wrong\n3) Your solution is wrong, because.... try to figure it out by yourself) \n4) Some hints for you: try to simplify it, by finding some logical pattern, it's going to help you to exclude unnecessary join, group by and having.\n5)The logic behind solution is simple like, if author and viewer is the same person, it means author has read his own article at least once, so you need to take person's id once, even if he read many own articles.\nHope it helps!  "
                    },
                    {
                        "username": "techieKundan",
                        "content": "select distinct v.viewer_id as id\\nfrom views v \\nwhere v.viewer_id = v.author_id\\ngroup by v.view_date\\norder by id;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "No need to group view_date, distinct is enough"
                    },
                    {
                        "username": "TuanMinh03",
                        "content": "my solution \\nSELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "tusharsingh1605",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT  DISTINCT AUTHOR_ID AS ID  FROM VIEWS   WHERE AUTHOR_ID  = VIEWER_ID \\nORDER BY AUTHOR_ID ASC  ;"
                    },
                    {
                        "username": "reduardorafa",
                        "content": "SELECT DISTINCT author_id as id\\nFROM views\\nWHERE  author_id = viewer_id\\nORDER BY author_id "
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1800545,
                "content": [
                    {
                        "username": "CoffeeCode247",
                        "content": "Keep the discussion area for discussion, wouldn\\'t that be wonderful."
                    },
                    {
                        "username": "Sanjaya23",
                        "content": "Absolutely.sometime when i do not know where to start i look at discussion for some hints only , and there is always whole solution."
                    },
                    {
                        "username": "suyash_5050",
                        "content": "Life was much better when there were No Solutions in Disussion :)"
                    },
                    {
                        "username": "atharva2104",
                        "content": "Easiest Solution-\\n\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;"
                    },
                    {
                        "username": "WanyueD",
                        "content": "Why should we write \"distinct\"? Thanks for answering"
                    },
                    {
                        "username": "Vi_bhatia",
                        "content": "Select author_id as id from Views where author_id=viewer_id GROUP BY author_id ORDER BY author_id ASC;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yes\\n\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id\\nfrom views \\nwhere author_id = viewer_id\\norder by author_id asc\\n\\n"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use this (please upvote)\\n`select distinct(author_id) as id from views where author_id=viewer_id order by author_id;`"
                    },
                    {
                        "username": "mahala",
                        "content": "Hello,\\nCan anybody please guide why the following solution is wrong? I am getting correct answer but it\\'s not accepting. Please help. Both answers are not being accept though I have passed test case.\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id\\nGROUP BY v1.article_id HAVING COUNT(v1.viewer_id) >= 1 ORDER BY v1.author_id;\\n\\nOR\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id  ORDER BY v1.author_id;"
                    },
                    {
                        "username": "danocam",
                        "content": "If it were a case in which you were attempting join a table to itself you might go with a Self-Join. Applied to this case it\\'d look something like this using a comma separated join in the FROM clause:\\n                             \\nSELECT DISTINCT a.column_name \\nFROM table1 a, table1 b \\nWHERE a.column_name1 = b.column_name2\\nORDER BY id: \\n\\n*basically we are trying to create a join that duplicates the same table ie same name, columns, data."
                    },
                    {
                        "username": "digantpatel404",
                        "content": "In 1st statement no need to groupby since you are selecting DISTINCT v1.authorid, \\nIn 2nd statement, use this\\nSELECT DISTINCT v1.author_id AS id \\nFROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id \\nWHERE v1.author_id = v2.author_id\\nORDER BY id;"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "[@BobMarl](/BobMarl) \\n\\nFOR 1st querry: you are using group by clouse without using any aggrigate function\\n\\nFOR 2nd querry you are joning those where view id and author id is equal which may give you those row where these id are similar for artical published by different author"
                    },
                    {
                        "username": "BobMarl",
                        "content": "TL;DR - just add to your join - \"and v1.article_id = v2.article_id\"\n\nExplanation:\nFirst of all your solution is a bit complicated but the problem is that your inner join combines rows from different articles, for example -\n| article_id | author_id | viewer_id | view_date  |\n| ---------- | --------- | --------- | ----------     |\n| 1             | 4             | 7            | 2019-07-01 |\n| 2             | 7             | 4            | 2019-07-02 |\n| 2             | 7             | 7            | 2019-07-03 |\n\nThe inner join result will be - \n| article_id | author_id | viewer_id | view_date  | article_id | author_id | viewer_id | view_date  | X/V |\n| ---------- | --------- | --------- | ---------- | ---------- | --------- | --------- | ---------- | ---------- |\n| 1          | 4         | 7         | 2019-07-02 | 2          | 7         | 4         | 2019-07-02 | X         |\n| 2          | 7         | 7         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | V         |\n| 2          | 7         | 7         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | V         |\n\nYou don't want the rows (with X) where the article of v2 is different from v1 (we get a viewer from other article).\nSo if you just add to your join - \"and v1.article_id = v2.article_id\" then it will result the correct one.\n\nGood luck!"
                    },
                    {
                        "username": "andradron",
                        "content": "1) Your solution is not accepted, because it doesn't pass all test cases.\n2) Your solution doesn't pass all cases, because it's wrong\n3) Your solution is wrong, because.... try to figure it out by yourself) \n4) Some hints for you: try to simplify it, by finding some logical pattern, it's going to help you to exclude unnecessary join, group by and having.\n5)The logic behind solution is simple like, if author and viewer is the same person, it means author has read his own article at least once, so you need to take person's id once, even if he read many own articles.\nHope it helps!  "
                    },
                    {
                        "username": "techieKundan",
                        "content": "select distinct v.viewer_id as id\\nfrom views v \\nwhere v.viewer_id = v.author_id\\ngroup by v.view_date\\norder by id;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "No need to group view_date, distinct is enough"
                    },
                    {
                        "username": "TuanMinh03",
                        "content": "my solution \\nSELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "tusharsingh1605",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT  DISTINCT AUTHOR_ID AS ID  FROM VIEWS   WHERE AUTHOR_ID  = VIEWER_ID \\nORDER BY AUTHOR_ID ASC  ;"
                    },
                    {
                        "username": "reduardorafa",
                        "content": "SELECT DISTINCT author_id as id\\nFROM views\\nWHERE  author_id = viewer_id\\nORDER BY author_id "
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 2067948,
                "content": [
                    {
                        "username": "CoffeeCode247",
                        "content": "Keep the discussion area for discussion, wouldn\\'t that be wonderful."
                    },
                    {
                        "username": "Sanjaya23",
                        "content": "Absolutely.sometime when i do not know where to start i look at discussion for some hints only , and there is always whole solution."
                    },
                    {
                        "username": "suyash_5050",
                        "content": "Life was much better when there were No Solutions in Disussion :)"
                    },
                    {
                        "username": "atharva2104",
                        "content": "Easiest Solution-\\n\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;"
                    },
                    {
                        "username": "WanyueD",
                        "content": "Why should we write \"distinct\"? Thanks for answering"
                    },
                    {
                        "username": "Vi_bhatia",
                        "content": "Select author_id as id from Views where author_id=viewer_id GROUP BY author_id ORDER BY author_id ASC;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yes\\n\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id\\nfrom views \\nwhere author_id = viewer_id\\norder by author_id asc\\n\\n"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use this (please upvote)\\n`select distinct(author_id) as id from views where author_id=viewer_id order by author_id;`"
                    },
                    {
                        "username": "mahala",
                        "content": "Hello,\\nCan anybody please guide why the following solution is wrong? I am getting correct answer but it\\'s not accepting. Please help. Both answers are not being accept though I have passed test case.\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id\\nGROUP BY v1.article_id HAVING COUNT(v1.viewer_id) >= 1 ORDER BY v1.author_id;\\n\\nOR\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id  ORDER BY v1.author_id;"
                    },
                    {
                        "username": "danocam",
                        "content": "If it were a case in which you were attempting join a table to itself you might go with a Self-Join. Applied to this case it\\'d look something like this using a comma separated join in the FROM clause:\\n                             \\nSELECT DISTINCT a.column_name \\nFROM table1 a, table1 b \\nWHERE a.column_name1 = b.column_name2\\nORDER BY id: \\n\\n*basically we are trying to create a join that duplicates the same table ie same name, columns, data."
                    },
                    {
                        "username": "digantpatel404",
                        "content": "In 1st statement no need to groupby since you are selecting DISTINCT v1.authorid, \\nIn 2nd statement, use this\\nSELECT DISTINCT v1.author_id AS id \\nFROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id \\nWHERE v1.author_id = v2.author_id\\nORDER BY id;"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "[@BobMarl](/BobMarl) \\n\\nFOR 1st querry: you are using group by clouse without using any aggrigate function\\n\\nFOR 2nd querry you are joning those where view id and author id is equal which may give you those row where these id are similar for artical published by different author"
                    },
                    {
                        "username": "BobMarl",
                        "content": "TL;DR - just add to your join - \"and v1.article_id = v2.article_id\"\n\nExplanation:\nFirst of all your solution is a bit complicated but the problem is that your inner join combines rows from different articles, for example -\n| article_id | author_id | viewer_id | view_date  |\n| ---------- | --------- | --------- | ----------     |\n| 1             | 4             | 7            | 2019-07-01 |\n| 2             | 7             | 4            | 2019-07-02 |\n| 2             | 7             | 7            | 2019-07-03 |\n\nThe inner join result will be - \n| article_id | author_id | viewer_id | view_date  | article_id | author_id | viewer_id | view_date  | X/V |\n| ---------- | --------- | --------- | ---------- | ---------- | --------- | --------- | ---------- | ---------- |\n| 1          | 4         | 7         | 2019-07-02 | 2          | 7         | 4         | 2019-07-02 | X         |\n| 2          | 7         | 7         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | V         |\n| 2          | 7         | 7         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | V         |\n\nYou don't want the rows (with X) where the article of v2 is different from v1 (we get a viewer from other article).\nSo if you just add to your join - \"and v1.article_id = v2.article_id\" then it will result the correct one.\n\nGood luck!"
                    },
                    {
                        "username": "andradron",
                        "content": "1) Your solution is not accepted, because it doesn't pass all test cases.\n2) Your solution doesn't pass all cases, because it's wrong\n3) Your solution is wrong, because.... try to figure it out by yourself) \n4) Some hints for you: try to simplify it, by finding some logical pattern, it's going to help you to exclude unnecessary join, group by and having.\n5)The logic behind solution is simple like, if author and viewer is the same person, it means author has read his own article at least once, so you need to take person's id once, even if he read many own articles.\nHope it helps!  "
                    },
                    {
                        "username": "techieKundan",
                        "content": "select distinct v.viewer_id as id\\nfrom views v \\nwhere v.viewer_id = v.author_id\\ngroup by v.view_date\\norder by id;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "No need to group view_date, distinct is enough"
                    },
                    {
                        "username": "TuanMinh03",
                        "content": "my solution \\nSELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "tusharsingh1605",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT  DISTINCT AUTHOR_ID AS ID  FROM VIEWS   WHERE AUTHOR_ID  = VIEWER_ID \\nORDER BY AUTHOR_ID ASC  ;"
                    },
                    {
                        "username": "reduardorafa",
                        "content": "SELECT DISTINCT author_id as id\\nFROM views\\nWHERE  author_id = viewer_id\\nORDER BY author_id "
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 2060612,
                "content": [
                    {
                        "username": "CoffeeCode247",
                        "content": "Keep the discussion area for discussion, wouldn\\'t that be wonderful."
                    },
                    {
                        "username": "Sanjaya23",
                        "content": "Absolutely.sometime when i do not know where to start i look at discussion for some hints only , and there is always whole solution."
                    },
                    {
                        "username": "suyash_5050",
                        "content": "Life was much better when there were No Solutions in Disussion :)"
                    },
                    {
                        "username": "atharva2104",
                        "content": "Easiest Solution-\\n\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;"
                    },
                    {
                        "username": "WanyueD",
                        "content": "Why should we write \"distinct\"? Thanks for answering"
                    },
                    {
                        "username": "Vi_bhatia",
                        "content": "Select author_id as id from Views where author_id=viewer_id GROUP BY author_id ORDER BY author_id ASC;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yes\\n\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id\\nfrom views \\nwhere author_id = viewer_id\\norder by author_id asc\\n\\n"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use this (please upvote)\\n`select distinct(author_id) as id from views where author_id=viewer_id order by author_id;`"
                    },
                    {
                        "username": "mahala",
                        "content": "Hello,\\nCan anybody please guide why the following solution is wrong? I am getting correct answer but it\\'s not accepting. Please help. Both answers are not being accept though I have passed test case.\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id\\nGROUP BY v1.article_id HAVING COUNT(v1.viewer_id) >= 1 ORDER BY v1.author_id;\\n\\nOR\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id  ORDER BY v1.author_id;"
                    },
                    {
                        "username": "danocam",
                        "content": "If it were a case in which you were attempting join a table to itself you might go with a Self-Join. Applied to this case it\\'d look something like this using a comma separated join in the FROM clause:\\n                             \\nSELECT DISTINCT a.column_name \\nFROM table1 a, table1 b \\nWHERE a.column_name1 = b.column_name2\\nORDER BY id: \\n\\n*basically we are trying to create a join that duplicates the same table ie same name, columns, data."
                    },
                    {
                        "username": "digantpatel404",
                        "content": "In 1st statement no need to groupby since you are selecting DISTINCT v1.authorid, \\nIn 2nd statement, use this\\nSELECT DISTINCT v1.author_id AS id \\nFROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id \\nWHERE v1.author_id = v2.author_id\\nORDER BY id;"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "[@BobMarl](/BobMarl) \\n\\nFOR 1st querry: you are using group by clouse without using any aggrigate function\\n\\nFOR 2nd querry you are joning those where view id and author id is equal which may give you those row where these id are similar for artical published by different author"
                    },
                    {
                        "username": "BobMarl",
                        "content": "TL;DR - just add to your join - \"and v1.article_id = v2.article_id\"\n\nExplanation:\nFirst of all your solution is a bit complicated but the problem is that your inner join combines rows from different articles, for example -\n| article_id | author_id | viewer_id | view_date  |\n| ---------- | --------- | --------- | ----------     |\n| 1             | 4             | 7            | 2019-07-01 |\n| 2             | 7             | 4            | 2019-07-02 |\n| 2             | 7             | 7            | 2019-07-03 |\n\nThe inner join result will be - \n| article_id | author_id | viewer_id | view_date  | article_id | author_id | viewer_id | view_date  | X/V |\n| ---------- | --------- | --------- | ---------- | ---------- | --------- | --------- | ---------- | ---------- |\n| 1          | 4         | 7         | 2019-07-02 | 2          | 7         | 4         | 2019-07-02 | X         |\n| 2          | 7         | 7         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | V         |\n| 2          | 7         | 7         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | V         |\n\nYou don't want the rows (with X) where the article of v2 is different from v1 (we get a viewer from other article).\nSo if you just add to your join - \"and v1.article_id = v2.article_id\" then it will result the correct one.\n\nGood luck!"
                    },
                    {
                        "username": "andradron",
                        "content": "1) Your solution is not accepted, because it doesn't pass all test cases.\n2) Your solution doesn't pass all cases, because it's wrong\n3) Your solution is wrong, because.... try to figure it out by yourself) \n4) Some hints for you: try to simplify it, by finding some logical pattern, it's going to help you to exclude unnecessary join, group by and having.\n5)The logic behind solution is simple like, if author and viewer is the same person, it means author has read his own article at least once, so you need to take person's id once, even if he read many own articles.\nHope it helps!  "
                    },
                    {
                        "username": "techieKundan",
                        "content": "select distinct v.viewer_id as id\\nfrom views v \\nwhere v.viewer_id = v.author_id\\ngroup by v.view_date\\norder by id;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "No need to group view_date, distinct is enough"
                    },
                    {
                        "username": "TuanMinh03",
                        "content": "my solution \\nSELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "tusharsingh1605",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT  DISTINCT AUTHOR_ID AS ID  FROM VIEWS   WHERE AUTHOR_ID  = VIEWER_ID \\nORDER BY AUTHOR_ID ASC  ;"
                    },
                    {
                        "username": "reduardorafa",
                        "content": "SELECT DISTINCT author_id as id\\nFROM views\\nWHERE  author_id = viewer_id\\nORDER BY author_id "
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 2058772,
                "content": [
                    {
                        "username": "CoffeeCode247",
                        "content": "Keep the discussion area for discussion, wouldn\\'t that be wonderful."
                    },
                    {
                        "username": "Sanjaya23",
                        "content": "Absolutely.sometime when i do not know where to start i look at discussion for some hints only , and there is always whole solution."
                    },
                    {
                        "username": "suyash_5050",
                        "content": "Life was much better when there were No Solutions in Disussion :)"
                    },
                    {
                        "username": "atharva2104",
                        "content": "Easiest Solution-\\n\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;"
                    },
                    {
                        "username": "WanyueD",
                        "content": "Why should we write \"distinct\"? Thanks for answering"
                    },
                    {
                        "username": "Vi_bhatia",
                        "content": "Select author_id as id from Views where author_id=viewer_id GROUP BY author_id ORDER BY author_id ASC;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yes\\n\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id\\nfrom views \\nwhere author_id = viewer_id\\norder by author_id asc\\n\\n"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use this (please upvote)\\n`select distinct(author_id) as id from views where author_id=viewer_id order by author_id;`"
                    },
                    {
                        "username": "mahala",
                        "content": "Hello,\\nCan anybody please guide why the following solution is wrong? I am getting correct answer but it\\'s not accepting. Please help. Both answers are not being accept though I have passed test case.\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id\\nGROUP BY v1.article_id HAVING COUNT(v1.viewer_id) >= 1 ORDER BY v1.author_id;\\n\\nOR\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id  ORDER BY v1.author_id;"
                    },
                    {
                        "username": "danocam",
                        "content": "If it were a case in which you were attempting join a table to itself you might go with a Self-Join. Applied to this case it\\'d look something like this using a comma separated join in the FROM clause:\\n                             \\nSELECT DISTINCT a.column_name \\nFROM table1 a, table1 b \\nWHERE a.column_name1 = b.column_name2\\nORDER BY id: \\n\\n*basically we are trying to create a join that duplicates the same table ie same name, columns, data."
                    },
                    {
                        "username": "digantpatel404",
                        "content": "In 1st statement no need to groupby since you are selecting DISTINCT v1.authorid, \\nIn 2nd statement, use this\\nSELECT DISTINCT v1.author_id AS id \\nFROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id \\nWHERE v1.author_id = v2.author_id\\nORDER BY id;"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "[@BobMarl](/BobMarl) \\n\\nFOR 1st querry: you are using group by clouse without using any aggrigate function\\n\\nFOR 2nd querry you are joning those where view id and author id is equal which may give you those row where these id are similar for artical published by different author"
                    },
                    {
                        "username": "BobMarl",
                        "content": "TL;DR - just add to your join - \"and v1.article_id = v2.article_id\"\n\nExplanation:\nFirst of all your solution is a bit complicated but the problem is that your inner join combines rows from different articles, for example -\n| article_id | author_id | viewer_id | view_date  |\n| ---------- | --------- | --------- | ----------     |\n| 1             | 4             | 7            | 2019-07-01 |\n| 2             | 7             | 4            | 2019-07-02 |\n| 2             | 7             | 7            | 2019-07-03 |\n\nThe inner join result will be - \n| article_id | author_id | viewer_id | view_date  | article_id | author_id | viewer_id | view_date  | X/V |\n| ---------- | --------- | --------- | ---------- | ---------- | --------- | --------- | ---------- | ---------- |\n| 1          | 4         | 7         | 2019-07-02 | 2          | 7         | 4         | 2019-07-02 | X         |\n| 2          | 7         | 7         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | V         |\n| 2          | 7         | 7         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | V         |\n\nYou don't want the rows (with X) where the article of v2 is different from v1 (we get a viewer from other article).\nSo if you just add to your join - \"and v1.article_id = v2.article_id\" then it will result the correct one.\n\nGood luck!"
                    },
                    {
                        "username": "andradron",
                        "content": "1) Your solution is not accepted, because it doesn't pass all test cases.\n2) Your solution doesn't pass all cases, because it's wrong\n3) Your solution is wrong, because.... try to figure it out by yourself) \n4) Some hints for you: try to simplify it, by finding some logical pattern, it's going to help you to exclude unnecessary join, group by and having.\n5)The logic behind solution is simple like, if author and viewer is the same person, it means author has read his own article at least once, so you need to take person's id once, even if he read many own articles.\nHope it helps!  "
                    },
                    {
                        "username": "techieKundan",
                        "content": "select distinct v.viewer_id as id\\nfrom views v \\nwhere v.viewer_id = v.author_id\\ngroup by v.view_date\\norder by id;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "No need to group view_date, distinct is enough"
                    },
                    {
                        "username": "TuanMinh03",
                        "content": "my solution \\nSELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "tusharsingh1605",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT  DISTINCT AUTHOR_ID AS ID  FROM VIEWS   WHERE AUTHOR_ID  = VIEWER_ID \\nORDER BY AUTHOR_ID ASC  ;"
                    },
                    {
                        "username": "reduardorafa",
                        "content": "SELECT DISTINCT author_id as id\\nFROM views\\nWHERE  author_id = viewer_id\\nORDER BY author_id "
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1872461,
                "content": [
                    {
                        "username": "CoffeeCode247",
                        "content": "Keep the discussion area for discussion, wouldn\\'t that be wonderful."
                    },
                    {
                        "username": "Sanjaya23",
                        "content": "Absolutely.sometime when i do not know where to start i look at discussion for some hints only , and there is always whole solution."
                    },
                    {
                        "username": "suyash_5050",
                        "content": "Life was much better when there were No Solutions in Disussion :)"
                    },
                    {
                        "username": "atharva2104",
                        "content": "Easiest Solution-\\n\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;"
                    },
                    {
                        "username": "WanyueD",
                        "content": "Why should we write \"distinct\"? Thanks for answering"
                    },
                    {
                        "username": "Vi_bhatia",
                        "content": "Select author_id as id from Views where author_id=viewer_id GROUP BY author_id ORDER BY author_id ASC;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yes\\n\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id\\nfrom views \\nwhere author_id = viewer_id\\norder by author_id asc\\n\\n"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use this (please upvote)\\n`select distinct(author_id) as id from views where author_id=viewer_id order by author_id;`"
                    },
                    {
                        "username": "mahala",
                        "content": "Hello,\\nCan anybody please guide why the following solution is wrong? I am getting correct answer but it\\'s not accepting. Please help. Both answers are not being accept though I have passed test case.\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id\\nGROUP BY v1.article_id HAVING COUNT(v1.viewer_id) >= 1 ORDER BY v1.author_id;\\n\\nOR\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id  ORDER BY v1.author_id;"
                    },
                    {
                        "username": "danocam",
                        "content": "If it were a case in which you were attempting join a table to itself you might go with a Self-Join. Applied to this case it\\'d look something like this using a comma separated join in the FROM clause:\\n                             \\nSELECT DISTINCT a.column_name \\nFROM table1 a, table1 b \\nWHERE a.column_name1 = b.column_name2\\nORDER BY id: \\n\\n*basically we are trying to create a join that duplicates the same table ie same name, columns, data."
                    },
                    {
                        "username": "digantpatel404",
                        "content": "In 1st statement no need to groupby since you are selecting DISTINCT v1.authorid, \\nIn 2nd statement, use this\\nSELECT DISTINCT v1.author_id AS id \\nFROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id \\nWHERE v1.author_id = v2.author_id\\nORDER BY id;"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "[@BobMarl](/BobMarl) \\n\\nFOR 1st querry: you are using group by clouse without using any aggrigate function\\n\\nFOR 2nd querry you are joning those where view id and author id is equal which may give you those row where these id are similar for artical published by different author"
                    },
                    {
                        "username": "BobMarl",
                        "content": "TL;DR - just add to your join - \"and v1.article_id = v2.article_id\"\n\nExplanation:\nFirst of all your solution is a bit complicated but the problem is that your inner join combines rows from different articles, for example -\n| article_id | author_id | viewer_id | view_date  |\n| ---------- | --------- | --------- | ----------     |\n| 1             | 4             | 7            | 2019-07-01 |\n| 2             | 7             | 4            | 2019-07-02 |\n| 2             | 7             | 7            | 2019-07-03 |\n\nThe inner join result will be - \n| article_id | author_id | viewer_id | view_date  | article_id | author_id | viewer_id | view_date  | X/V |\n| ---------- | --------- | --------- | ---------- | ---------- | --------- | --------- | ---------- | ---------- |\n| 1          | 4         | 7         | 2019-07-02 | 2          | 7         | 4         | 2019-07-02 | X         |\n| 2          | 7         | 7         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | V         |\n| 2          | 7         | 7         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | V         |\n\nYou don't want the rows (with X) where the article of v2 is different from v1 (we get a viewer from other article).\nSo if you just add to your join - \"and v1.article_id = v2.article_id\" then it will result the correct one.\n\nGood luck!"
                    },
                    {
                        "username": "andradron",
                        "content": "1) Your solution is not accepted, because it doesn't pass all test cases.\n2) Your solution doesn't pass all cases, because it's wrong\n3) Your solution is wrong, because.... try to figure it out by yourself) \n4) Some hints for you: try to simplify it, by finding some logical pattern, it's going to help you to exclude unnecessary join, group by and having.\n5)The logic behind solution is simple like, if author and viewer is the same person, it means author has read his own article at least once, so you need to take person's id once, even if he read many own articles.\nHope it helps!  "
                    },
                    {
                        "username": "techieKundan",
                        "content": "select distinct v.viewer_id as id\\nfrom views v \\nwhere v.viewer_id = v.author_id\\ngroup by v.view_date\\norder by id;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "No need to group view_date, distinct is enough"
                    },
                    {
                        "username": "TuanMinh03",
                        "content": "my solution \\nSELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "tusharsingh1605",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT  DISTINCT AUTHOR_ID AS ID  FROM VIEWS   WHERE AUTHOR_ID  = VIEWER_ID \\nORDER BY AUTHOR_ID ASC  ;"
                    },
                    {
                        "username": "reduardorafa",
                        "content": "SELECT DISTINCT author_id as id\\nFROM views\\nWHERE  author_id = viewer_id\\nORDER BY author_id "
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 2016968,
                "content": [
                    {
                        "username": "CoffeeCode247",
                        "content": "Keep the discussion area for discussion, wouldn\\'t that be wonderful."
                    },
                    {
                        "username": "Sanjaya23",
                        "content": "Absolutely.sometime when i do not know where to start i look at discussion for some hints only , and there is always whole solution."
                    },
                    {
                        "username": "suyash_5050",
                        "content": "Life was much better when there were No Solutions in Disussion :)"
                    },
                    {
                        "username": "atharva2104",
                        "content": "Easiest Solution-\\n\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;"
                    },
                    {
                        "username": "WanyueD",
                        "content": "Why should we write \"distinct\"? Thanks for answering"
                    },
                    {
                        "username": "Vi_bhatia",
                        "content": "Select author_id as id from Views where author_id=viewer_id GROUP BY author_id ORDER BY author_id ASC;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yes\\n\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id\\nfrom views \\nwhere author_id = viewer_id\\norder by author_id asc\\n\\n"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use this (please upvote)\\n`select distinct(author_id) as id from views where author_id=viewer_id order by author_id;`"
                    },
                    {
                        "username": "mahala",
                        "content": "Hello,\\nCan anybody please guide why the following solution is wrong? I am getting correct answer but it\\'s not accepting. Please help. Both answers are not being accept though I have passed test case.\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id\\nGROUP BY v1.article_id HAVING COUNT(v1.viewer_id) >= 1 ORDER BY v1.author_id;\\n\\nOR\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id  ORDER BY v1.author_id;"
                    },
                    {
                        "username": "danocam",
                        "content": "If it were a case in which you were attempting join a table to itself you might go with a Self-Join. Applied to this case it\\'d look something like this using a comma separated join in the FROM clause:\\n                             \\nSELECT DISTINCT a.column_name \\nFROM table1 a, table1 b \\nWHERE a.column_name1 = b.column_name2\\nORDER BY id: \\n\\n*basically we are trying to create a join that duplicates the same table ie same name, columns, data."
                    },
                    {
                        "username": "digantpatel404",
                        "content": "In 1st statement no need to groupby since you are selecting DISTINCT v1.authorid, \\nIn 2nd statement, use this\\nSELECT DISTINCT v1.author_id AS id \\nFROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id \\nWHERE v1.author_id = v2.author_id\\nORDER BY id;"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "[@BobMarl](/BobMarl) \\n\\nFOR 1st querry: you are using group by clouse without using any aggrigate function\\n\\nFOR 2nd querry you are joning those where view id and author id is equal which may give you those row where these id are similar for artical published by different author"
                    },
                    {
                        "username": "BobMarl",
                        "content": "TL;DR - just add to your join - \"and v1.article_id = v2.article_id\"\n\nExplanation:\nFirst of all your solution is a bit complicated but the problem is that your inner join combines rows from different articles, for example -\n| article_id | author_id | viewer_id | view_date  |\n| ---------- | --------- | --------- | ----------     |\n| 1             | 4             | 7            | 2019-07-01 |\n| 2             | 7             | 4            | 2019-07-02 |\n| 2             | 7             | 7            | 2019-07-03 |\n\nThe inner join result will be - \n| article_id | author_id | viewer_id | view_date  | article_id | author_id | viewer_id | view_date  | X/V |\n| ---------- | --------- | --------- | ---------- | ---------- | --------- | --------- | ---------- | ---------- |\n| 1          | 4         | 7         | 2019-07-02 | 2          | 7         | 4         | 2019-07-02 | X         |\n| 2          | 7         | 7         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | V         |\n| 2          | 7         | 7         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | V         |\n\nYou don't want the rows (with X) where the article of v2 is different from v1 (we get a viewer from other article).\nSo if you just add to your join - \"and v1.article_id = v2.article_id\" then it will result the correct one.\n\nGood luck!"
                    },
                    {
                        "username": "andradron",
                        "content": "1) Your solution is not accepted, because it doesn't pass all test cases.\n2) Your solution doesn't pass all cases, because it's wrong\n3) Your solution is wrong, because.... try to figure it out by yourself) \n4) Some hints for you: try to simplify it, by finding some logical pattern, it's going to help you to exclude unnecessary join, group by and having.\n5)The logic behind solution is simple like, if author and viewer is the same person, it means author has read his own article at least once, so you need to take person's id once, even if he read many own articles.\nHope it helps!  "
                    },
                    {
                        "username": "techieKundan",
                        "content": "select distinct v.viewer_id as id\\nfrom views v \\nwhere v.viewer_id = v.author_id\\ngroup by v.view_date\\norder by id;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "No need to group view_date, distinct is enough"
                    },
                    {
                        "username": "TuanMinh03",
                        "content": "my solution \\nSELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "tusharsingh1605",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT  DISTINCT AUTHOR_ID AS ID  FROM VIEWS   WHERE AUTHOR_ID  = VIEWER_ID \\nORDER BY AUTHOR_ID ASC  ;"
                    },
                    {
                        "username": "reduardorafa",
                        "content": "SELECT DISTINCT author_id as id\\nFROM views\\nWHERE  author_id = viewer_id\\nORDER BY author_id "
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1710716,
                "content": [
                    {
                        "username": "CoffeeCode247",
                        "content": "Keep the discussion area for discussion, wouldn\\'t that be wonderful."
                    },
                    {
                        "username": "Sanjaya23",
                        "content": "Absolutely.sometime when i do not know where to start i look at discussion for some hints only , and there is always whole solution."
                    },
                    {
                        "username": "suyash_5050",
                        "content": "Life was much better when there were No Solutions in Disussion :)"
                    },
                    {
                        "username": "atharva2104",
                        "content": "Easiest Solution-\\n\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;"
                    },
                    {
                        "username": "WanyueD",
                        "content": "Why should we write \"distinct\"? Thanks for answering"
                    },
                    {
                        "username": "Vi_bhatia",
                        "content": "Select author_id as id from Views where author_id=viewer_id GROUP BY author_id ORDER BY author_id ASC;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yes\\n\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id\\nfrom views \\nwhere author_id = viewer_id\\norder by author_id asc\\n\\n"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use this (please upvote)\\n`select distinct(author_id) as id from views where author_id=viewer_id order by author_id;`"
                    },
                    {
                        "username": "mahala",
                        "content": "Hello,\\nCan anybody please guide why the following solution is wrong? I am getting correct answer but it\\'s not accepting. Please help. Both answers are not being accept though I have passed test case.\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id\\nGROUP BY v1.article_id HAVING COUNT(v1.viewer_id) >= 1 ORDER BY v1.author_id;\\n\\nOR\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id  ORDER BY v1.author_id;"
                    },
                    {
                        "username": "danocam",
                        "content": "If it were a case in which you were attempting join a table to itself you might go with a Self-Join. Applied to this case it\\'d look something like this using a comma separated join in the FROM clause:\\n                             \\nSELECT DISTINCT a.column_name \\nFROM table1 a, table1 b \\nWHERE a.column_name1 = b.column_name2\\nORDER BY id: \\n\\n*basically we are trying to create a join that duplicates the same table ie same name, columns, data."
                    },
                    {
                        "username": "digantpatel404",
                        "content": "In 1st statement no need to groupby since you are selecting DISTINCT v1.authorid, \\nIn 2nd statement, use this\\nSELECT DISTINCT v1.author_id AS id \\nFROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id \\nWHERE v1.author_id = v2.author_id\\nORDER BY id;"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "[@BobMarl](/BobMarl) \\n\\nFOR 1st querry: you are using group by clouse without using any aggrigate function\\n\\nFOR 2nd querry you are joning those where view id and author id is equal which may give you those row where these id are similar for artical published by different author"
                    },
                    {
                        "username": "BobMarl",
                        "content": "TL;DR - just add to your join - \"and v1.article_id = v2.article_id\"\n\nExplanation:\nFirst of all your solution is a bit complicated but the problem is that your inner join combines rows from different articles, for example -\n| article_id | author_id | viewer_id | view_date  |\n| ---------- | --------- | --------- | ----------     |\n| 1             | 4             | 7            | 2019-07-01 |\n| 2             | 7             | 4            | 2019-07-02 |\n| 2             | 7             | 7            | 2019-07-03 |\n\nThe inner join result will be - \n| article_id | author_id | viewer_id | view_date  | article_id | author_id | viewer_id | view_date  | X/V |\n| ---------- | --------- | --------- | ---------- | ---------- | --------- | --------- | ---------- | ---------- |\n| 1          | 4         | 7         | 2019-07-02 | 2          | 7         | 4         | 2019-07-02 | X         |\n| 2          | 7         | 7         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | V         |\n| 2          | 7         | 7         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | V         |\n\nYou don't want the rows (with X) where the article of v2 is different from v1 (we get a viewer from other article).\nSo if you just add to your join - \"and v1.article_id = v2.article_id\" then it will result the correct one.\n\nGood luck!"
                    },
                    {
                        "username": "andradron",
                        "content": "1) Your solution is not accepted, because it doesn't pass all test cases.\n2) Your solution doesn't pass all cases, because it's wrong\n3) Your solution is wrong, because.... try to figure it out by yourself) \n4) Some hints for you: try to simplify it, by finding some logical pattern, it's going to help you to exclude unnecessary join, group by and having.\n5)The logic behind solution is simple like, if author and viewer is the same person, it means author has read his own article at least once, so you need to take person's id once, even if he read many own articles.\nHope it helps!  "
                    },
                    {
                        "username": "techieKundan",
                        "content": "select distinct v.viewer_id as id\\nfrom views v \\nwhere v.viewer_id = v.author_id\\ngroup by v.view_date\\norder by id;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "No need to group view_date, distinct is enough"
                    },
                    {
                        "username": "TuanMinh03",
                        "content": "my solution \\nSELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "tusharsingh1605",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT  DISTINCT AUTHOR_ID AS ID  FROM VIEWS   WHERE AUTHOR_ID  = VIEWER_ID \\nORDER BY AUTHOR_ID ASC  ;"
                    },
                    {
                        "username": "reduardorafa",
                        "content": "SELECT DISTINCT author_id as id\\nFROM views\\nWHERE  author_id = viewer_id\\nORDER BY author_id "
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1749314,
                "content": [
                    {
                        "username": "CoffeeCode247",
                        "content": "Keep the discussion area for discussion, wouldn\\'t that be wonderful."
                    },
                    {
                        "username": "Sanjaya23",
                        "content": "Absolutely.sometime when i do not know where to start i look at discussion for some hints only , and there is always whole solution."
                    },
                    {
                        "username": "suyash_5050",
                        "content": "Life was much better when there were No Solutions in Disussion :)"
                    },
                    {
                        "username": "atharva2104",
                        "content": "Easiest Solution-\\n\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;"
                    },
                    {
                        "username": "WanyueD",
                        "content": "Why should we write \"distinct\"? Thanks for answering"
                    },
                    {
                        "username": "Vi_bhatia",
                        "content": "Select author_id as id from Views where author_id=viewer_id GROUP BY author_id ORDER BY author_id ASC;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yes\\n\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id\\nfrom views \\nwhere author_id = viewer_id\\norder by author_id asc\\n\\n"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use this (please upvote)\\n`select distinct(author_id) as id from views where author_id=viewer_id order by author_id;`"
                    },
                    {
                        "username": "mahala",
                        "content": "Hello,\\nCan anybody please guide why the following solution is wrong? I am getting correct answer but it\\'s not accepting. Please help. Both answers are not being accept though I have passed test case.\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id\\nGROUP BY v1.article_id HAVING COUNT(v1.viewer_id) >= 1 ORDER BY v1.author_id;\\n\\nOR\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id  ORDER BY v1.author_id;"
                    },
                    {
                        "username": "danocam",
                        "content": "If it were a case in which you were attempting join a table to itself you might go with a Self-Join. Applied to this case it\\'d look something like this using a comma separated join in the FROM clause:\\n                             \\nSELECT DISTINCT a.column_name \\nFROM table1 a, table1 b \\nWHERE a.column_name1 = b.column_name2\\nORDER BY id: \\n\\n*basically we are trying to create a join that duplicates the same table ie same name, columns, data."
                    },
                    {
                        "username": "digantpatel404",
                        "content": "In 1st statement no need to groupby since you are selecting DISTINCT v1.authorid, \\nIn 2nd statement, use this\\nSELECT DISTINCT v1.author_id AS id \\nFROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id \\nWHERE v1.author_id = v2.author_id\\nORDER BY id;"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "[@BobMarl](/BobMarl) \\n\\nFOR 1st querry: you are using group by clouse without using any aggrigate function\\n\\nFOR 2nd querry you are joning those where view id and author id is equal which may give you those row where these id are similar for artical published by different author"
                    },
                    {
                        "username": "BobMarl",
                        "content": "TL;DR - just add to your join - \"and v1.article_id = v2.article_id\"\n\nExplanation:\nFirst of all your solution is a bit complicated but the problem is that your inner join combines rows from different articles, for example -\n| article_id | author_id | viewer_id | view_date  |\n| ---------- | --------- | --------- | ----------     |\n| 1             | 4             | 7            | 2019-07-01 |\n| 2             | 7             | 4            | 2019-07-02 |\n| 2             | 7             | 7            | 2019-07-03 |\n\nThe inner join result will be - \n| article_id | author_id | viewer_id | view_date  | article_id | author_id | viewer_id | view_date  | X/V |\n| ---------- | --------- | --------- | ---------- | ---------- | --------- | --------- | ---------- | ---------- |\n| 1          | 4         | 7         | 2019-07-02 | 2          | 7         | 4         | 2019-07-02 | X         |\n| 2          | 7         | 7         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | V         |\n| 2          | 7         | 7         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | V         |\n\nYou don't want the rows (with X) where the article of v2 is different from v1 (we get a viewer from other article).\nSo if you just add to your join - \"and v1.article_id = v2.article_id\" then it will result the correct one.\n\nGood luck!"
                    },
                    {
                        "username": "andradron",
                        "content": "1) Your solution is not accepted, because it doesn't pass all test cases.\n2) Your solution doesn't pass all cases, because it's wrong\n3) Your solution is wrong, because.... try to figure it out by yourself) \n4) Some hints for you: try to simplify it, by finding some logical pattern, it's going to help you to exclude unnecessary join, group by and having.\n5)The logic behind solution is simple like, if author and viewer is the same person, it means author has read his own article at least once, so you need to take person's id once, even if he read many own articles.\nHope it helps!  "
                    },
                    {
                        "username": "techieKundan",
                        "content": "select distinct v.viewer_id as id\\nfrom views v \\nwhere v.viewer_id = v.author_id\\ngroup by v.view_date\\norder by id;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "No need to group view_date, distinct is enough"
                    },
                    {
                        "username": "TuanMinh03",
                        "content": "my solution \\nSELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "tusharsingh1605",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT  DISTINCT AUTHOR_ID AS ID  FROM VIEWS   WHERE AUTHOR_ID  = VIEWER_ID \\nORDER BY AUTHOR_ID ASC  ;"
                    },
                    {
                        "username": "reduardorafa",
                        "content": "SELECT DISTINCT author_id as id\\nFROM views\\nWHERE  author_id = viewer_id\\nORDER BY author_id "
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1574656,
                "content": [
                    {
                        "username": "CoffeeCode247",
                        "content": "Keep the discussion area for discussion, wouldn\\'t that be wonderful."
                    },
                    {
                        "username": "Sanjaya23",
                        "content": "Absolutely.sometime when i do not know where to start i look at discussion for some hints only , and there is always whole solution."
                    },
                    {
                        "username": "suyash_5050",
                        "content": "Life was much better when there were No Solutions in Disussion :)"
                    },
                    {
                        "username": "atharva2104",
                        "content": "Easiest Solution-\\n\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;"
                    },
                    {
                        "username": "WanyueD",
                        "content": "Why should we write \"distinct\"? Thanks for answering"
                    },
                    {
                        "username": "Vi_bhatia",
                        "content": "Select author_id as id from Views where author_id=viewer_id GROUP BY author_id ORDER BY author_id ASC;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yes\\n\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id\\nfrom views \\nwhere author_id = viewer_id\\norder by author_id asc\\n\\n"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use this (please upvote)\\n`select distinct(author_id) as id from views where author_id=viewer_id order by author_id;`"
                    },
                    {
                        "username": "mahala",
                        "content": "Hello,\\nCan anybody please guide why the following solution is wrong? I am getting correct answer but it\\'s not accepting. Please help. Both answers are not being accept though I have passed test case.\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id\\nGROUP BY v1.article_id HAVING COUNT(v1.viewer_id) >= 1 ORDER BY v1.author_id;\\n\\nOR\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id  ORDER BY v1.author_id;"
                    },
                    {
                        "username": "danocam",
                        "content": "If it were a case in which you were attempting join a table to itself you might go with a Self-Join. Applied to this case it\\'d look something like this using a comma separated join in the FROM clause:\\n                             \\nSELECT DISTINCT a.column_name \\nFROM table1 a, table1 b \\nWHERE a.column_name1 = b.column_name2\\nORDER BY id: \\n\\n*basically we are trying to create a join that duplicates the same table ie same name, columns, data."
                    },
                    {
                        "username": "digantpatel404",
                        "content": "In 1st statement no need to groupby since you are selecting DISTINCT v1.authorid, \\nIn 2nd statement, use this\\nSELECT DISTINCT v1.author_id AS id \\nFROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id \\nWHERE v1.author_id = v2.author_id\\nORDER BY id;"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "[@BobMarl](/BobMarl) \\n\\nFOR 1st querry: you are using group by clouse without using any aggrigate function\\n\\nFOR 2nd querry you are joning those where view id and author id is equal which may give you those row where these id are similar for artical published by different author"
                    },
                    {
                        "username": "BobMarl",
                        "content": "TL;DR - just add to your join - \"and v1.article_id = v2.article_id\"\n\nExplanation:\nFirst of all your solution is a bit complicated but the problem is that your inner join combines rows from different articles, for example -\n| article_id | author_id | viewer_id | view_date  |\n| ---------- | --------- | --------- | ----------     |\n| 1             | 4             | 7            | 2019-07-01 |\n| 2             | 7             | 4            | 2019-07-02 |\n| 2             | 7             | 7            | 2019-07-03 |\n\nThe inner join result will be - \n| article_id | author_id | viewer_id | view_date  | article_id | author_id | viewer_id | view_date  | X/V |\n| ---------- | --------- | --------- | ---------- | ---------- | --------- | --------- | ---------- | ---------- |\n| 1          | 4         | 7         | 2019-07-02 | 2          | 7         | 4         | 2019-07-02 | X         |\n| 2          | 7         | 7         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | V         |\n| 2          | 7         | 7         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | V         |\n\nYou don't want the rows (with X) where the article of v2 is different from v1 (we get a viewer from other article).\nSo if you just add to your join - \"and v1.article_id = v2.article_id\" then it will result the correct one.\n\nGood luck!"
                    },
                    {
                        "username": "andradron",
                        "content": "1) Your solution is not accepted, because it doesn't pass all test cases.\n2) Your solution doesn't pass all cases, because it's wrong\n3) Your solution is wrong, because.... try to figure it out by yourself) \n4) Some hints for you: try to simplify it, by finding some logical pattern, it's going to help you to exclude unnecessary join, group by and having.\n5)The logic behind solution is simple like, if author and viewer is the same person, it means author has read his own article at least once, so you need to take person's id once, even if he read many own articles.\nHope it helps!  "
                    },
                    {
                        "username": "techieKundan",
                        "content": "select distinct v.viewer_id as id\\nfrom views v \\nwhere v.viewer_id = v.author_id\\ngroup by v.view_date\\norder by id;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "No need to group view_date, distinct is enough"
                    },
                    {
                        "username": "TuanMinh03",
                        "content": "my solution \\nSELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "tusharsingh1605",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT  DISTINCT AUTHOR_ID AS ID  FROM VIEWS   WHERE AUTHOR_ID  = VIEWER_ID \\nORDER BY AUTHOR_ID ASC  ;"
                    },
                    {
                        "username": "reduardorafa",
                        "content": "SELECT DISTINCT author_id as id\\nFROM views\\nWHERE  author_id = viewer_id\\nORDER BY author_id "
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1925574,
                "content": [
                    {
                        "username": "CoffeeCode247",
                        "content": "Keep the discussion area for discussion, wouldn\\'t that be wonderful."
                    },
                    {
                        "username": "Sanjaya23",
                        "content": "Absolutely.sometime when i do not know where to start i look at discussion for some hints only , and there is always whole solution."
                    },
                    {
                        "username": "suyash_5050",
                        "content": "Life was much better when there were No Solutions in Disussion :)"
                    },
                    {
                        "username": "atharva2104",
                        "content": "Easiest Solution-\\n\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;"
                    },
                    {
                        "username": "WanyueD",
                        "content": "Why should we write \"distinct\"? Thanks for answering"
                    },
                    {
                        "username": "Vi_bhatia",
                        "content": "Select author_id as id from Views where author_id=viewer_id GROUP BY author_id ORDER BY author_id ASC;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yes\\n\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id\\nfrom views \\nwhere author_id = viewer_id\\norder by author_id asc\\n\\n"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use this (please upvote)\\n`select distinct(author_id) as id from views where author_id=viewer_id order by author_id;`"
                    },
                    {
                        "username": "mahala",
                        "content": "Hello,\\nCan anybody please guide why the following solution is wrong? I am getting correct answer but it\\'s not accepting. Please help. Both answers are not being accept though I have passed test case.\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id\\nGROUP BY v1.article_id HAVING COUNT(v1.viewer_id) >= 1 ORDER BY v1.author_id;\\n\\nOR\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id  ORDER BY v1.author_id;"
                    },
                    {
                        "username": "danocam",
                        "content": "If it were a case in which you were attempting join a table to itself you might go with a Self-Join. Applied to this case it\\'d look something like this using a comma separated join in the FROM clause:\\n                             \\nSELECT DISTINCT a.column_name \\nFROM table1 a, table1 b \\nWHERE a.column_name1 = b.column_name2\\nORDER BY id: \\n\\n*basically we are trying to create a join that duplicates the same table ie same name, columns, data."
                    },
                    {
                        "username": "digantpatel404",
                        "content": "In 1st statement no need to groupby since you are selecting DISTINCT v1.authorid, \\nIn 2nd statement, use this\\nSELECT DISTINCT v1.author_id AS id \\nFROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id \\nWHERE v1.author_id = v2.author_id\\nORDER BY id;"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "[@BobMarl](/BobMarl) \\n\\nFOR 1st querry: you are using group by clouse without using any aggrigate function\\n\\nFOR 2nd querry you are joning those where view id and author id is equal which may give you those row where these id are similar for artical published by different author"
                    },
                    {
                        "username": "BobMarl",
                        "content": "TL;DR - just add to your join - \"and v1.article_id = v2.article_id\"\n\nExplanation:\nFirst of all your solution is a bit complicated but the problem is that your inner join combines rows from different articles, for example -\n| article_id | author_id | viewer_id | view_date  |\n| ---------- | --------- | --------- | ----------     |\n| 1             | 4             | 7            | 2019-07-01 |\n| 2             | 7             | 4            | 2019-07-02 |\n| 2             | 7             | 7            | 2019-07-03 |\n\nThe inner join result will be - \n| article_id | author_id | viewer_id | view_date  | article_id | author_id | viewer_id | view_date  | X/V |\n| ---------- | --------- | --------- | ---------- | ---------- | --------- | --------- | ---------- | ---------- |\n| 1          | 4         | 7         | 2019-07-02 | 2          | 7         | 4         | 2019-07-02 | X         |\n| 2          | 7         | 7         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | V         |\n| 2          | 7         | 7         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | V         |\n\nYou don't want the rows (with X) where the article of v2 is different from v1 (we get a viewer from other article).\nSo if you just add to your join - \"and v1.article_id = v2.article_id\" then it will result the correct one.\n\nGood luck!"
                    },
                    {
                        "username": "andradron",
                        "content": "1) Your solution is not accepted, because it doesn't pass all test cases.\n2) Your solution doesn't pass all cases, because it's wrong\n3) Your solution is wrong, because.... try to figure it out by yourself) \n4) Some hints for you: try to simplify it, by finding some logical pattern, it's going to help you to exclude unnecessary join, group by and having.\n5)The logic behind solution is simple like, if author and viewer is the same person, it means author has read his own article at least once, so you need to take person's id once, even if he read many own articles.\nHope it helps!  "
                    },
                    {
                        "username": "techieKundan",
                        "content": "select distinct v.viewer_id as id\\nfrom views v \\nwhere v.viewer_id = v.author_id\\ngroup by v.view_date\\norder by id;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "No need to group view_date, distinct is enough"
                    },
                    {
                        "username": "TuanMinh03",
                        "content": "my solution \\nSELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "tusharsingh1605",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT  DISTINCT AUTHOR_ID AS ID  FROM VIEWS   WHERE AUTHOR_ID  = VIEWER_ID \\nORDER BY AUTHOR_ID ASC  ;"
                    },
                    {
                        "username": "reduardorafa",
                        "content": "SELECT DISTINCT author_id as id\\nFROM views\\nWHERE  author_id = viewer_id\\nORDER BY author_id "
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1800545,
                "content": [
                    {
                        "username": "CoffeeCode247",
                        "content": "Keep the discussion area for discussion, wouldn\\'t that be wonderful."
                    },
                    {
                        "username": "Sanjaya23",
                        "content": "Absolutely.sometime when i do not know where to start i look at discussion for some hints only , and there is always whole solution."
                    },
                    {
                        "username": "suyash_5050",
                        "content": "Life was much better when there were No Solutions in Disussion :)"
                    },
                    {
                        "username": "atharva2104",
                        "content": "Easiest Solution-\\n\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;"
                    },
                    {
                        "username": "WanyueD",
                        "content": "Why should we write \"distinct\"? Thanks for answering"
                    },
                    {
                        "username": "Vi_bhatia",
                        "content": "Select author_id as id from Views where author_id=viewer_id GROUP BY author_id ORDER BY author_id ASC;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yes\\n\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id\\nfrom views \\nwhere author_id = viewer_id\\norder by author_id asc\\n\\n"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use this (please upvote)\\n`select distinct(author_id) as id from views where author_id=viewer_id order by author_id;`"
                    },
                    {
                        "username": "mahala",
                        "content": "Hello,\\nCan anybody please guide why the following solution is wrong? I am getting correct answer but it\\'s not accepting. Please help. Both answers are not being accept though I have passed test case.\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id\\nGROUP BY v1.article_id HAVING COUNT(v1.viewer_id) >= 1 ORDER BY v1.author_id;\\n\\nOR\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id  ORDER BY v1.author_id;"
                    },
                    {
                        "username": "danocam",
                        "content": "If it were a case in which you were attempting join a table to itself you might go with a Self-Join. Applied to this case it\\'d look something like this using a comma separated join in the FROM clause:\\n                             \\nSELECT DISTINCT a.column_name \\nFROM table1 a, table1 b \\nWHERE a.column_name1 = b.column_name2\\nORDER BY id: \\n\\n*basically we are trying to create a join that duplicates the same table ie same name, columns, data."
                    },
                    {
                        "username": "digantpatel404",
                        "content": "In 1st statement no need to groupby since you are selecting DISTINCT v1.authorid, \\nIn 2nd statement, use this\\nSELECT DISTINCT v1.author_id AS id \\nFROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id \\nWHERE v1.author_id = v2.author_id\\nORDER BY id;"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "[@BobMarl](/BobMarl) \\n\\nFOR 1st querry: you are using group by clouse without using any aggrigate function\\n\\nFOR 2nd querry you are joning those where view id and author id is equal which may give you those row where these id are similar for artical published by different author"
                    },
                    {
                        "username": "BobMarl",
                        "content": "TL;DR - just add to your join - \"and v1.article_id = v2.article_id\"\n\nExplanation:\nFirst of all your solution is a bit complicated but the problem is that your inner join combines rows from different articles, for example -\n| article_id | author_id | viewer_id | view_date  |\n| ---------- | --------- | --------- | ----------     |\n| 1             | 4             | 7            | 2019-07-01 |\n| 2             | 7             | 4            | 2019-07-02 |\n| 2             | 7             | 7            | 2019-07-03 |\n\nThe inner join result will be - \n| article_id | author_id | viewer_id | view_date  | article_id | author_id | viewer_id | view_date  | X/V |\n| ---------- | --------- | --------- | ---------- | ---------- | --------- | --------- | ---------- | ---------- |\n| 1          | 4         | 7         | 2019-07-02 | 2          | 7         | 4         | 2019-07-02 | X         |\n| 2          | 7         | 7         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | V         |\n| 2          | 7         | 7         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | V         |\n\nYou don't want the rows (with X) where the article of v2 is different from v1 (we get a viewer from other article).\nSo if you just add to your join - \"and v1.article_id = v2.article_id\" then it will result the correct one.\n\nGood luck!"
                    },
                    {
                        "username": "andradron",
                        "content": "1) Your solution is not accepted, because it doesn't pass all test cases.\n2) Your solution doesn't pass all cases, because it's wrong\n3) Your solution is wrong, because.... try to figure it out by yourself) \n4) Some hints for you: try to simplify it, by finding some logical pattern, it's going to help you to exclude unnecessary join, group by and having.\n5)The logic behind solution is simple like, if author and viewer is the same person, it means author has read his own article at least once, so you need to take person's id once, even if he read many own articles.\nHope it helps!  "
                    },
                    {
                        "username": "techieKundan",
                        "content": "select distinct v.viewer_id as id\\nfrom views v \\nwhere v.viewer_id = v.author_id\\ngroup by v.view_date\\norder by id;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "No need to group view_date, distinct is enough"
                    },
                    {
                        "username": "TuanMinh03",
                        "content": "my solution \\nSELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "tusharsingh1605",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT  DISTINCT AUTHOR_ID AS ID  FROM VIEWS   WHERE AUTHOR_ID  = VIEWER_ID \\nORDER BY AUTHOR_ID ASC  ;"
                    },
                    {
                        "username": "reduardorafa",
                        "content": "SELECT DISTINCT author_id as id\\nFROM views\\nWHERE  author_id = viewer_id\\nORDER BY author_id "
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 2067948,
                "content": [
                    {
                        "username": "CoffeeCode247",
                        "content": "Keep the discussion area for discussion, wouldn\\'t that be wonderful."
                    },
                    {
                        "username": "Sanjaya23",
                        "content": "Absolutely.sometime when i do not know where to start i look at discussion for some hints only , and there is always whole solution."
                    },
                    {
                        "username": "suyash_5050",
                        "content": "Life was much better when there were No Solutions in Disussion :)"
                    },
                    {
                        "username": "atharva2104",
                        "content": "Easiest Solution-\\n\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;"
                    },
                    {
                        "username": "WanyueD",
                        "content": "Why should we write \"distinct\"? Thanks for answering"
                    },
                    {
                        "username": "Vi_bhatia",
                        "content": "Select author_id as id from Views where author_id=viewer_id GROUP BY author_id ORDER BY author_id ASC;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yes\\n\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id\\nfrom views \\nwhere author_id = viewer_id\\norder by author_id asc\\n\\n"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use this (please upvote)\\n`select distinct(author_id) as id from views where author_id=viewer_id order by author_id;`"
                    },
                    {
                        "username": "mahala",
                        "content": "Hello,\\nCan anybody please guide why the following solution is wrong? I am getting correct answer but it\\'s not accepting. Please help. Both answers are not being accept though I have passed test case.\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id\\nGROUP BY v1.article_id HAVING COUNT(v1.viewer_id) >= 1 ORDER BY v1.author_id;\\n\\nOR\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id  ORDER BY v1.author_id;"
                    },
                    {
                        "username": "danocam",
                        "content": "If it were a case in which you were attempting join a table to itself you might go with a Self-Join. Applied to this case it\\'d look something like this using a comma separated join in the FROM clause:\\n                             \\nSELECT DISTINCT a.column_name \\nFROM table1 a, table1 b \\nWHERE a.column_name1 = b.column_name2\\nORDER BY id: \\n\\n*basically we are trying to create a join that duplicates the same table ie same name, columns, data."
                    },
                    {
                        "username": "digantpatel404",
                        "content": "In 1st statement no need to groupby since you are selecting DISTINCT v1.authorid, \\nIn 2nd statement, use this\\nSELECT DISTINCT v1.author_id AS id \\nFROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id \\nWHERE v1.author_id = v2.author_id\\nORDER BY id;"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "[@BobMarl](/BobMarl) \\n\\nFOR 1st querry: you are using group by clouse without using any aggrigate function\\n\\nFOR 2nd querry you are joning those where view id and author id is equal which may give you those row where these id are similar for artical published by different author"
                    },
                    {
                        "username": "BobMarl",
                        "content": "TL;DR - just add to your join - \"and v1.article_id = v2.article_id\"\n\nExplanation:\nFirst of all your solution is a bit complicated but the problem is that your inner join combines rows from different articles, for example -\n| article_id | author_id | viewer_id | view_date  |\n| ---------- | --------- | --------- | ----------     |\n| 1             | 4             | 7            | 2019-07-01 |\n| 2             | 7             | 4            | 2019-07-02 |\n| 2             | 7             | 7            | 2019-07-03 |\n\nThe inner join result will be - \n| article_id | author_id | viewer_id | view_date  | article_id | author_id | viewer_id | view_date  | X/V |\n| ---------- | --------- | --------- | ---------- | ---------- | --------- | --------- | ---------- | ---------- |\n| 1          | 4         | 7         | 2019-07-02 | 2          | 7         | 4         | 2019-07-02 | X         |\n| 2          | 7         | 7         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | V         |\n| 2          | 7         | 7         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | V         |\n\nYou don't want the rows (with X) where the article of v2 is different from v1 (we get a viewer from other article).\nSo if you just add to your join - \"and v1.article_id = v2.article_id\" then it will result the correct one.\n\nGood luck!"
                    },
                    {
                        "username": "andradron",
                        "content": "1) Your solution is not accepted, because it doesn't pass all test cases.\n2) Your solution doesn't pass all cases, because it's wrong\n3) Your solution is wrong, because.... try to figure it out by yourself) \n4) Some hints for you: try to simplify it, by finding some logical pattern, it's going to help you to exclude unnecessary join, group by and having.\n5)The logic behind solution is simple like, if author and viewer is the same person, it means author has read his own article at least once, so you need to take person's id once, even if he read many own articles.\nHope it helps!  "
                    },
                    {
                        "username": "techieKundan",
                        "content": "select distinct v.viewer_id as id\\nfrom views v \\nwhere v.viewer_id = v.author_id\\ngroup by v.view_date\\norder by id;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "No need to group view_date, distinct is enough"
                    },
                    {
                        "username": "TuanMinh03",
                        "content": "my solution \\nSELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "tusharsingh1605",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT  DISTINCT AUTHOR_ID AS ID  FROM VIEWS   WHERE AUTHOR_ID  = VIEWER_ID \\nORDER BY AUTHOR_ID ASC  ;"
                    },
                    {
                        "username": "reduardorafa",
                        "content": "SELECT DISTINCT author_id as id\\nFROM views\\nWHERE  author_id = viewer_id\\nORDER BY author_id "
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 2060612,
                "content": [
                    {
                        "username": "CoffeeCode247",
                        "content": "Keep the discussion area for discussion, wouldn\\'t that be wonderful."
                    },
                    {
                        "username": "Sanjaya23",
                        "content": "Absolutely.sometime when i do not know where to start i look at discussion for some hints only , and there is always whole solution."
                    },
                    {
                        "username": "suyash_5050",
                        "content": "Life was much better when there were No Solutions in Disussion :)"
                    },
                    {
                        "username": "atharva2104",
                        "content": "Easiest Solution-\\n\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;"
                    },
                    {
                        "username": "WanyueD",
                        "content": "Why should we write \"distinct\"? Thanks for answering"
                    },
                    {
                        "username": "Vi_bhatia",
                        "content": "Select author_id as id from Views where author_id=viewer_id GROUP BY author_id ORDER BY author_id ASC;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yes\\n\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id\\nfrom views \\nwhere author_id = viewer_id\\norder by author_id asc\\n\\n"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use this (please upvote)\\n`select distinct(author_id) as id from views where author_id=viewer_id order by author_id;`"
                    },
                    {
                        "username": "mahala",
                        "content": "Hello,\\nCan anybody please guide why the following solution is wrong? I am getting correct answer but it\\'s not accepting. Please help. Both answers are not being accept though I have passed test case.\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id\\nGROUP BY v1.article_id HAVING COUNT(v1.viewer_id) >= 1 ORDER BY v1.author_id;\\n\\nOR\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id  ORDER BY v1.author_id;"
                    },
                    {
                        "username": "danocam",
                        "content": "If it were a case in which you were attempting join a table to itself you might go with a Self-Join. Applied to this case it\\'d look something like this using a comma separated join in the FROM clause:\\n                             \\nSELECT DISTINCT a.column_name \\nFROM table1 a, table1 b \\nWHERE a.column_name1 = b.column_name2\\nORDER BY id: \\n\\n*basically we are trying to create a join that duplicates the same table ie same name, columns, data."
                    },
                    {
                        "username": "digantpatel404",
                        "content": "In 1st statement no need to groupby since you are selecting DISTINCT v1.authorid, \\nIn 2nd statement, use this\\nSELECT DISTINCT v1.author_id AS id \\nFROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id \\nWHERE v1.author_id = v2.author_id\\nORDER BY id;"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "[@BobMarl](/BobMarl) \\n\\nFOR 1st querry: you are using group by clouse without using any aggrigate function\\n\\nFOR 2nd querry you are joning those where view id and author id is equal which may give you those row where these id are similar for artical published by different author"
                    },
                    {
                        "username": "BobMarl",
                        "content": "TL;DR - just add to your join - \"and v1.article_id = v2.article_id\"\n\nExplanation:\nFirst of all your solution is a bit complicated but the problem is that your inner join combines rows from different articles, for example -\n| article_id | author_id | viewer_id | view_date  |\n| ---------- | --------- | --------- | ----------     |\n| 1             | 4             | 7            | 2019-07-01 |\n| 2             | 7             | 4            | 2019-07-02 |\n| 2             | 7             | 7            | 2019-07-03 |\n\nThe inner join result will be - \n| article_id | author_id | viewer_id | view_date  | article_id | author_id | viewer_id | view_date  | X/V |\n| ---------- | --------- | --------- | ---------- | ---------- | --------- | --------- | ---------- | ---------- |\n| 1          | 4         | 7         | 2019-07-02 | 2          | 7         | 4         | 2019-07-02 | X         |\n| 2          | 7         | 7         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | V         |\n| 2          | 7         | 7         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | V         |\n\nYou don't want the rows (with X) where the article of v2 is different from v1 (we get a viewer from other article).\nSo if you just add to your join - \"and v1.article_id = v2.article_id\" then it will result the correct one.\n\nGood luck!"
                    },
                    {
                        "username": "andradron",
                        "content": "1) Your solution is not accepted, because it doesn't pass all test cases.\n2) Your solution doesn't pass all cases, because it's wrong\n3) Your solution is wrong, because.... try to figure it out by yourself) \n4) Some hints for you: try to simplify it, by finding some logical pattern, it's going to help you to exclude unnecessary join, group by and having.\n5)The logic behind solution is simple like, if author and viewer is the same person, it means author has read his own article at least once, so you need to take person's id once, even if he read many own articles.\nHope it helps!  "
                    },
                    {
                        "username": "techieKundan",
                        "content": "select distinct v.viewer_id as id\\nfrom views v \\nwhere v.viewer_id = v.author_id\\ngroup by v.view_date\\norder by id;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "No need to group view_date, distinct is enough"
                    },
                    {
                        "username": "TuanMinh03",
                        "content": "my solution \\nSELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "tusharsingh1605",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT  DISTINCT AUTHOR_ID AS ID  FROM VIEWS   WHERE AUTHOR_ID  = VIEWER_ID \\nORDER BY AUTHOR_ID ASC  ;"
                    },
                    {
                        "username": "reduardorafa",
                        "content": "SELECT DISTINCT author_id as id\\nFROM views\\nWHERE  author_id = viewer_id\\nORDER BY author_id "
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 2058772,
                "content": [
                    {
                        "username": "CoffeeCode247",
                        "content": "Keep the discussion area for discussion, wouldn\\'t that be wonderful."
                    },
                    {
                        "username": "Sanjaya23",
                        "content": "Absolutely.sometime when i do not know where to start i look at discussion for some hints only , and there is always whole solution."
                    },
                    {
                        "username": "suyash_5050",
                        "content": "Life was much better when there were No Solutions in Disussion :)"
                    },
                    {
                        "username": "atharva2104",
                        "content": "Easiest Solution-\\n\\nselect distinct author_id as id\\nfrom Views\\nwhere author_id = viewer_id\\norder by id;"
                    },
                    {
                        "username": "WanyueD",
                        "content": "Why should we write \"distinct\"? Thanks for answering"
                    },
                    {
                        "username": "Vi_bhatia",
                        "content": "Select author_id as id from Views where author_id=viewer_id GROUP BY author_id ORDER BY author_id ASC;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Yes\\n\\n# Write your MySQL query statement below\\n\\nselect distinct author_id as id\\nfrom views \\nwhere author_id = viewer_id\\norder by author_id asc\\n\\n"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Use this (please upvote)\\n`select distinct(author_id) as id from views where author_id=viewer_id order by author_id;`"
                    },
                    {
                        "username": "mahala",
                        "content": "Hello,\\nCan anybody please guide why the following solution is wrong? I am getting correct answer but it\\'s not accepting. Please help. Both answers are not being accept though I have passed test case.\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id\\nGROUP BY v1.article_id HAVING COUNT(v1.viewer_id) >= 1 ORDER BY v1.author_id;\\n\\nOR\\n\\nSELECT DISTINCT v1.author_id AS id FROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id  ORDER BY v1.author_id;"
                    },
                    {
                        "username": "danocam",
                        "content": "If it were a case in which you were attempting join a table to itself you might go with a Self-Join. Applied to this case it\\'d look something like this using a comma separated join in the FROM clause:\\n                             \\nSELECT DISTINCT a.column_name \\nFROM table1 a, table1 b \\nWHERE a.column_name1 = b.column_name2\\nORDER BY id: \\n\\n*basically we are trying to create a join that duplicates the same table ie same name, columns, data."
                    },
                    {
                        "username": "digantpatel404",
                        "content": "In 1st statement no need to groupby since you are selecting DISTINCT v1.authorid, \\nIn 2nd statement, use this\\nSELECT DISTINCT v1.author_id AS id \\nFROM Views AS v1 INNER JOIN Views AS v2 ON v1.author_id = v2.viewer_id \\nWHERE v1.author_id = v2.author_id\\nORDER BY id;"
                    },
                    {
                        "username": "akashdubey2047",
                        "content": "[@BobMarl](/BobMarl) \\n\\nFOR 1st querry: you are using group by clouse without using any aggrigate function\\n\\nFOR 2nd querry you are joning those where view id and author id is equal which may give you those row where these id are similar for artical published by different author"
                    },
                    {
                        "username": "BobMarl",
                        "content": "TL;DR - just add to your join - \"and v1.article_id = v2.article_id\"\n\nExplanation:\nFirst of all your solution is a bit complicated but the problem is that your inner join combines rows from different articles, for example -\n| article_id | author_id | viewer_id | view_date  |\n| ---------- | --------- | --------- | ----------     |\n| 1             | 4             | 7            | 2019-07-01 |\n| 2             | 7             | 4            | 2019-07-02 |\n| 2             | 7             | 7            | 2019-07-03 |\n\nThe inner join result will be - \n| article_id | author_id | viewer_id | view_date  | article_id | author_id | viewer_id | view_date  | X/V |\n| ---------- | --------- | --------- | ---------- | ---------- | --------- | --------- | ---------- | ---------- |\n| 1          | 4         | 7         | 2019-07-02 | 2          | 7         | 4         | 2019-07-02 | X         |\n| 2          | 7         | 7         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 1          | 4         | 7         | 2019-07-02 | V         |\n| 2          | 7         | 7         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | X         |\n| 2          | 7         | 4         | 2019-07-02 | 2          | 7         | 7         | 2019-07-02 | V         |\n\nYou don't want the rows (with X) where the article of v2 is different from v1 (we get a viewer from other article).\nSo if you just add to your join - \"and v1.article_id = v2.article_id\" then it will result the correct one.\n\nGood luck!"
                    },
                    {
                        "username": "andradron",
                        "content": "1) Your solution is not accepted, because it doesn't pass all test cases.\n2) Your solution doesn't pass all cases, because it's wrong\n3) Your solution is wrong, because.... try to figure it out by yourself) \n4) Some hints for you: try to simplify it, by finding some logical pattern, it's going to help you to exclude unnecessary join, group by and having.\n5)The logic behind solution is simple like, if author and viewer is the same person, it means author has read his own article at least once, so you need to take person's id once, even if he read many own articles.\nHope it helps!  "
                    },
                    {
                        "username": "techieKundan",
                        "content": "select distinct v.viewer_id as id\\nfrom views v \\nwhere v.viewer_id = v.author_id\\ngroup by v.view_date\\norder by id;"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "No need to group view_date, distinct is enough"
                    },
                    {
                        "username": "TuanMinh03",
                        "content": "my solution \\nSELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "tusharsingh1605",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views\\nWHERE author_id = viewer_id\\nORDER BY author_id\\n;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT  DISTINCT AUTHOR_ID AS ID  FROM VIEWS   WHERE AUTHOR_ID  = VIEWER_ID \\nORDER BY AUTHOR_ID ASC  ;"
                    },
                    {
                        "username": "reduardorafa",
                        "content": "SELECT DISTINCT author_id as id\\nFROM views\\nWHERE  author_id = viewer_id\\nORDER BY author_id "
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 2054826,
                "content": [
                    {
                        "username": "sakshirvaidya143",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID ORDER BY ID;"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Tomoe49",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID >= 1 ORDER BY ID; \\ncut runtime in half"
                    },
                    {
                        "username": "dhbarnett",
                        "content": "\"Return the result table sorted by id in ascending order.\"\\n\\nWhich id? author, article, or viewer?"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Author"
                    },
                    {
                        "username": "sshreyansh822",
                        "content": "can someone plz tell me the error\\n\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    df = views[views[\\'author_id\\']==views[\\'viewer_id\\']]\\n    df = df[[\\'author_id\\']].drop_duplicates()\\n    df=df.sort_values(by=\\'author_id\\')\\n    df[[\\'author_id\\']].rename(columns={\\'author_id\\':\\'id\\'})\\n    return df\\n\\n"
                    },
                    {
                        "username": "pankesh167",
                        "content": "import pandas as pd\n\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\n    df=views[views['author_id']==views['viewer_id']]\n    df=df[['author_id']].drop_duplicates()\n    df=df.sort_values(by='author_id')\n    df=df[['author_id']].rename(columns={'author_id':'id'})\n    return df\n\ntry this\nsorted does not return the result in dataframe format.\nuse sort_values,"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "dscharan97",
                        "content": "How to reduce the time , bcz my code is taking longer time compared to other, even though the entire code is almost same. I observed the code which is taking lesser time is written in upper case but my code which was in lower case took longer time.\\nSo does it mean even though it doesn\\'t affect the output it affect the time taken                                    "
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "with cte as (\\nselect author_id,viewer_id  from Views \\ngroup by author_id,viewer_id having author_id =viewer_id)\\n\\nselect distinct author_id as id from cte order by author_id"
                    },
                    {
                        "username": "pandyagunjan10",
                        "content": "select author_id as ID\\nfrom Views\\nwhere article_id >1\\ngroup by author_id\\norder by id asc;"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Aksinhaa",
                        "content": "import pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\ndf = views[views[\\'author_id\\'] == views[\\'viewer_id\\']]\\ndf = df[\\'author_id\\'].unique()\\nreturn sorted(df)\\n\\nwhy is this code not working"
                    },
                    {
                        "username": "pankesh167",
                        "content": "[@Aksinhaa](/Aksinhaa) import pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\ndf=views[views[\\'author_id\\']==views[\\'viewer_id\\']]\\ndf=df[[\\'author_id\\']].drop_duplicates()\\ndf=df.sort_values(by=\\'author_id\\')\\ndf[[\\'author_id\\']].rename(columns={\\'authord_id\\':\\'id\\'})\\nreturn df\\n\\ntry this\\nsorted does not return the result in dataframe format.\\nuse sort_values,"
                    },
                    {
                        "username": "Aksinhaa",
                        "content": "[@heysoymarvin](/heysoymarvin) \"You need to return a Pandas DataFrame instead of <class \\'list\\'>\" It still shows this error"
                    },
                    {
                        "username": "heysoymarvin",
                        "content": "Because the unique() method returns an array and this requires to return a pd.DataFrame, also, you should replace this line of code like this df = df[[\\'author_id\\']].drop_duplicates() this returns a df, instead of a pd.Series or array"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select author_id as Id from Views\\nwhere author_id=viewer_id group by author_id\\norder by author_id;"
                    },
                    {
                        "username": "Virat_Chauhan",
                        "content": "Applying the same for Pandas feels like such a hassle honestly speaking. I should look up the documentation more often."
                    }
                ]
            },
            {
                "id": 2054062,
                "content": [
                    {
                        "username": "sakshirvaidya143",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID ORDER BY ID;"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Tomoe49",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID >= 1 ORDER BY ID; \\ncut runtime in half"
                    },
                    {
                        "username": "dhbarnett",
                        "content": "\"Return the result table sorted by id in ascending order.\"\\n\\nWhich id? author, article, or viewer?"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Author"
                    },
                    {
                        "username": "sshreyansh822",
                        "content": "can someone plz tell me the error\\n\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    df = views[views[\\'author_id\\']==views[\\'viewer_id\\']]\\n    df = df[[\\'author_id\\']].drop_duplicates()\\n    df=df.sort_values(by=\\'author_id\\')\\n    df[[\\'author_id\\']].rename(columns={\\'author_id\\':\\'id\\'})\\n    return df\\n\\n"
                    },
                    {
                        "username": "pankesh167",
                        "content": "import pandas as pd\n\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\n    df=views[views['author_id']==views['viewer_id']]\n    df=df[['author_id']].drop_duplicates()\n    df=df.sort_values(by='author_id')\n    df=df[['author_id']].rename(columns={'author_id':'id'})\n    return df\n\ntry this\nsorted does not return the result in dataframe format.\nuse sort_values,"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "dscharan97",
                        "content": "How to reduce the time , bcz my code is taking longer time compared to other, even though the entire code is almost same. I observed the code which is taking lesser time is written in upper case but my code which was in lower case took longer time.\\nSo does it mean even though it doesn\\'t affect the output it affect the time taken                                    "
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "with cte as (\\nselect author_id,viewer_id  from Views \\ngroup by author_id,viewer_id having author_id =viewer_id)\\n\\nselect distinct author_id as id from cte order by author_id"
                    },
                    {
                        "username": "pandyagunjan10",
                        "content": "select author_id as ID\\nfrom Views\\nwhere article_id >1\\ngroup by author_id\\norder by id asc;"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Aksinhaa",
                        "content": "import pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\ndf = views[views[\\'author_id\\'] == views[\\'viewer_id\\']]\\ndf = df[\\'author_id\\'].unique()\\nreturn sorted(df)\\n\\nwhy is this code not working"
                    },
                    {
                        "username": "pankesh167",
                        "content": "[@Aksinhaa](/Aksinhaa) import pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\ndf=views[views[\\'author_id\\']==views[\\'viewer_id\\']]\\ndf=df[[\\'author_id\\']].drop_duplicates()\\ndf=df.sort_values(by=\\'author_id\\')\\ndf[[\\'author_id\\']].rename(columns={\\'authord_id\\':\\'id\\'})\\nreturn df\\n\\ntry this\\nsorted does not return the result in dataframe format.\\nuse sort_values,"
                    },
                    {
                        "username": "Aksinhaa",
                        "content": "[@heysoymarvin](/heysoymarvin) \"You need to return a Pandas DataFrame instead of <class \\'list\\'>\" It still shows this error"
                    },
                    {
                        "username": "heysoymarvin",
                        "content": "Because the unique() method returns an array and this requires to return a pd.DataFrame, also, you should replace this line of code like this df = df[[\\'author_id\\']].drop_duplicates() this returns a df, instead of a pd.Series or array"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select author_id as Id from Views\\nwhere author_id=viewer_id group by author_id\\norder by author_id;"
                    },
                    {
                        "username": "Virat_Chauhan",
                        "content": "Applying the same for Pandas feels like such a hassle honestly speaking. I should look up the documentation more often."
                    }
                ]
            },
            {
                "id": 2039102,
                "content": [
                    {
                        "username": "sakshirvaidya143",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID ORDER BY ID;"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Tomoe49",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID >= 1 ORDER BY ID; \\ncut runtime in half"
                    },
                    {
                        "username": "dhbarnett",
                        "content": "\"Return the result table sorted by id in ascending order.\"\\n\\nWhich id? author, article, or viewer?"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Author"
                    },
                    {
                        "username": "sshreyansh822",
                        "content": "can someone plz tell me the error\\n\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    df = views[views[\\'author_id\\']==views[\\'viewer_id\\']]\\n    df = df[[\\'author_id\\']].drop_duplicates()\\n    df=df.sort_values(by=\\'author_id\\')\\n    df[[\\'author_id\\']].rename(columns={\\'author_id\\':\\'id\\'})\\n    return df\\n\\n"
                    },
                    {
                        "username": "pankesh167",
                        "content": "import pandas as pd\n\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\n    df=views[views['author_id']==views['viewer_id']]\n    df=df[['author_id']].drop_duplicates()\n    df=df.sort_values(by='author_id')\n    df=df[['author_id']].rename(columns={'author_id':'id'})\n    return df\n\ntry this\nsorted does not return the result in dataframe format.\nuse sort_values,"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "dscharan97",
                        "content": "How to reduce the time , bcz my code is taking longer time compared to other, even though the entire code is almost same. I observed the code which is taking lesser time is written in upper case but my code which was in lower case took longer time.\\nSo does it mean even though it doesn\\'t affect the output it affect the time taken                                    "
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "with cte as (\\nselect author_id,viewer_id  from Views \\ngroup by author_id,viewer_id having author_id =viewer_id)\\n\\nselect distinct author_id as id from cte order by author_id"
                    },
                    {
                        "username": "pandyagunjan10",
                        "content": "select author_id as ID\\nfrom Views\\nwhere article_id >1\\ngroup by author_id\\norder by id asc;"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Aksinhaa",
                        "content": "import pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\ndf = views[views[\\'author_id\\'] == views[\\'viewer_id\\']]\\ndf = df[\\'author_id\\'].unique()\\nreturn sorted(df)\\n\\nwhy is this code not working"
                    },
                    {
                        "username": "pankesh167",
                        "content": "[@Aksinhaa](/Aksinhaa) import pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\ndf=views[views[\\'author_id\\']==views[\\'viewer_id\\']]\\ndf=df[[\\'author_id\\']].drop_duplicates()\\ndf=df.sort_values(by=\\'author_id\\')\\ndf[[\\'author_id\\']].rename(columns={\\'authord_id\\':\\'id\\'})\\nreturn df\\n\\ntry this\\nsorted does not return the result in dataframe format.\\nuse sort_values,"
                    },
                    {
                        "username": "Aksinhaa",
                        "content": "[@heysoymarvin](/heysoymarvin) \"You need to return a Pandas DataFrame instead of <class \\'list\\'>\" It still shows this error"
                    },
                    {
                        "username": "heysoymarvin",
                        "content": "Because the unique() method returns an array and this requires to return a pd.DataFrame, also, you should replace this line of code like this df = df[[\\'author_id\\']].drop_duplicates() this returns a df, instead of a pd.Series or array"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select author_id as Id from Views\\nwhere author_id=viewer_id group by author_id\\norder by author_id;"
                    },
                    {
                        "username": "Virat_Chauhan",
                        "content": "Applying the same for Pandas feels like such a hassle honestly speaking. I should look up the documentation more often."
                    }
                ]
            },
            {
                "id": 2038271,
                "content": [
                    {
                        "username": "sakshirvaidya143",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID ORDER BY ID;"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Tomoe49",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID >= 1 ORDER BY ID; \\ncut runtime in half"
                    },
                    {
                        "username": "dhbarnett",
                        "content": "\"Return the result table sorted by id in ascending order.\"\\n\\nWhich id? author, article, or viewer?"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Author"
                    },
                    {
                        "username": "sshreyansh822",
                        "content": "can someone plz tell me the error\\n\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    df = views[views[\\'author_id\\']==views[\\'viewer_id\\']]\\n    df = df[[\\'author_id\\']].drop_duplicates()\\n    df=df.sort_values(by=\\'author_id\\')\\n    df[[\\'author_id\\']].rename(columns={\\'author_id\\':\\'id\\'})\\n    return df\\n\\n"
                    },
                    {
                        "username": "pankesh167",
                        "content": "import pandas as pd\n\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\n    df=views[views['author_id']==views['viewer_id']]\n    df=df[['author_id']].drop_duplicates()\n    df=df.sort_values(by='author_id')\n    df=df[['author_id']].rename(columns={'author_id':'id'})\n    return df\n\ntry this\nsorted does not return the result in dataframe format.\nuse sort_values,"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "dscharan97",
                        "content": "How to reduce the time , bcz my code is taking longer time compared to other, even though the entire code is almost same. I observed the code which is taking lesser time is written in upper case but my code which was in lower case took longer time.\\nSo does it mean even though it doesn\\'t affect the output it affect the time taken                                    "
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "with cte as (\\nselect author_id,viewer_id  from Views \\ngroup by author_id,viewer_id having author_id =viewer_id)\\n\\nselect distinct author_id as id from cte order by author_id"
                    },
                    {
                        "username": "pandyagunjan10",
                        "content": "select author_id as ID\\nfrom Views\\nwhere article_id >1\\ngroup by author_id\\norder by id asc;"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Aksinhaa",
                        "content": "import pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\ndf = views[views[\\'author_id\\'] == views[\\'viewer_id\\']]\\ndf = df[\\'author_id\\'].unique()\\nreturn sorted(df)\\n\\nwhy is this code not working"
                    },
                    {
                        "username": "pankesh167",
                        "content": "[@Aksinhaa](/Aksinhaa) import pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\ndf=views[views[\\'author_id\\']==views[\\'viewer_id\\']]\\ndf=df[[\\'author_id\\']].drop_duplicates()\\ndf=df.sort_values(by=\\'author_id\\')\\ndf[[\\'author_id\\']].rename(columns={\\'authord_id\\':\\'id\\'})\\nreturn df\\n\\ntry this\\nsorted does not return the result in dataframe format.\\nuse sort_values,"
                    },
                    {
                        "username": "Aksinhaa",
                        "content": "[@heysoymarvin](/heysoymarvin) \"You need to return a Pandas DataFrame instead of <class \\'list\\'>\" It still shows this error"
                    },
                    {
                        "username": "heysoymarvin",
                        "content": "Because the unique() method returns an array and this requires to return a pd.DataFrame, also, you should replace this line of code like this df = df[[\\'author_id\\']].drop_duplicates() this returns a df, instead of a pd.Series or array"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select author_id as Id from Views\\nwhere author_id=viewer_id group by author_id\\norder by author_id;"
                    },
                    {
                        "username": "Virat_Chauhan",
                        "content": "Applying the same for Pandas feels like such a hassle honestly speaking. I should look up the documentation more often."
                    }
                ]
            },
            {
                "id": 2035854,
                "content": [
                    {
                        "username": "sakshirvaidya143",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID ORDER BY ID;"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Tomoe49",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID >= 1 ORDER BY ID; \\ncut runtime in half"
                    },
                    {
                        "username": "dhbarnett",
                        "content": "\"Return the result table sorted by id in ascending order.\"\\n\\nWhich id? author, article, or viewer?"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Author"
                    },
                    {
                        "username": "sshreyansh822",
                        "content": "can someone plz tell me the error\\n\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    df = views[views[\\'author_id\\']==views[\\'viewer_id\\']]\\n    df = df[[\\'author_id\\']].drop_duplicates()\\n    df=df.sort_values(by=\\'author_id\\')\\n    df[[\\'author_id\\']].rename(columns={\\'author_id\\':\\'id\\'})\\n    return df\\n\\n"
                    },
                    {
                        "username": "pankesh167",
                        "content": "import pandas as pd\n\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\n    df=views[views['author_id']==views['viewer_id']]\n    df=df[['author_id']].drop_duplicates()\n    df=df.sort_values(by='author_id')\n    df=df[['author_id']].rename(columns={'author_id':'id'})\n    return df\n\ntry this\nsorted does not return the result in dataframe format.\nuse sort_values,"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "dscharan97",
                        "content": "How to reduce the time , bcz my code is taking longer time compared to other, even though the entire code is almost same. I observed the code which is taking lesser time is written in upper case but my code which was in lower case took longer time.\\nSo does it mean even though it doesn\\'t affect the output it affect the time taken                                    "
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "with cte as (\\nselect author_id,viewer_id  from Views \\ngroup by author_id,viewer_id having author_id =viewer_id)\\n\\nselect distinct author_id as id from cte order by author_id"
                    },
                    {
                        "username": "pandyagunjan10",
                        "content": "select author_id as ID\\nfrom Views\\nwhere article_id >1\\ngroup by author_id\\norder by id asc;"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Aksinhaa",
                        "content": "import pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\ndf = views[views[\\'author_id\\'] == views[\\'viewer_id\\']]\\ndf = df[\\'author_id\\'].unique()\\nreturn sorted(df)\\n\\nwhy is this code not working"
                    },
                    {
                        "username": "pankesh167",
                        "content": "[@Aksinhaa](/Aksinhaa) import pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\ndf=views[views[\\'author_id\\']==views[\\'viewer_id\\']]\\ndf=df[[\\'author_id\\']].drop_duplicates()\\ndf=df.sort_values(by=\\'author_id\\')\\ndf[[\\'author_id\\']].rename(columns={\\'authord_id\\':\\'id\\'})\\nreturn df\\n\\ntry this\\nsorted does not return the result in dataframe format.\\nuse sort_values,"
                    },
                    {
                        "username": "Aksinhaa",
                        "content": "[@heysoymarvin](/heysoymarvin) \"You need to return a Pandas DataFrame instead of <class \\'list\\'>\" It still shows this error"
                    },
                    {
                        "username": "heysoymarvin",
                        "content": "Because the unique() method returns an array and this requires to return a pd.DataFrame, also, you should replace this line of code like this df = df[[\\'author_id\\']].drop_duplicates() this returns a df, instead of a pd.Series or array"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select author_id as Id from Views\\nwhere author_id=viewer_id group by author_id\\norder by author_id;"
                    },
                    {
                        "username": "Virat_Chauhan",
                        "content": "Applying the same for Pandas feels like such a hassle honestly speaking. I should look up the documentation more often."
                    }
                ]
            },
            {
                "id": 2035273,
                "content": [
                    {
                        "username": "sakshirvaidya143",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID ORDER BY ID;"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Tomoe49",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID >= 1 ORDER BY ID; \\ncut runtime in half"
                    },
                    {
                        "username": "dhbarnett",
                        "content": "\"Return the result table sorted by id in ascending order.\"\\n\\nWhich id? author, article, or viewer?"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Author"
                    },
                    {
                        "username": "sshreyansh822",
                        "content": "can someone plz tell me the error\\n\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    df = views[views[\\'author_id\\']==views[\\'viewer_id\\']]\\n    df = df[[\\'author_id\\']].drop_duplicates()\\n    df=df.sort_values(by=\\'author_id\\')\\n    df[[\\'author_id\\']].rename(columns={\\'author_id\\':\\'id\\'})\\n    return df\\n\\n"
                    },
                    {
                        "username": "pankesh167",
                        "content": "import pandas as pd\n\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\n    df=views[views['author_id']==views['viewer_id']]\n    df=df[['author_id']].drop_duplicates()\n    df=df.sort_values(by='author_id')\n    df=df[['author_id']].rename(columns={'author_id':'id'})\n    return df\n\ntry this\nsorted does not return the result in dataframe format.\nuse sort_values,"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "dscharan97",
                        "content": "How to reduce the time , bcz my code is taking longer time compared to other, even though the entire code is almost same. I observed the code which is taking lesser time is written in upper case but my code which was in lower case took longer time.\\nSo does it mean even though it doesn\\'t affect the output it affect the time taken                                    "
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "with cte as (\\nselect author_id,viewer_id  from Views \\ngroup by author_id,viewer_id having author_id =viewer_id)\\n\\nselect distinct author_id as id from cte order by author_id"
                    },
                    {
                        "username": "pandyagunjan10",
                        "content": "select author_id as ID\\nfrom Views\\nwhere article_id >1\\ngroup by author_id\\norder by id asc;"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Aksinhaa",
                        "content": "import pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\ndf = views[views[\\'author_id\\'] == views[\\'viewer_id\\']]\\ndf = df[\\'author_id\\'].unique()\\nreturn sorted(df)\\n\\nwhy is this code not working"
                    },
                    {
                        "username": "pankesh167",
                        "content": "[@Aksinhaa](/Aksinhaa) import pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\ndf=views[views[\\'author_id\\']==views[\\'viewer_id\\']]\\ndf=df[[\\'author_id\\']].drop_duplicates()\\ndf=df.sort_values(by=\\'author_id\\')\\ndf[[\\'author_id\\']].rename(columns={\\'authord_id\\':\\'id\\'})\\nreturn df\\n\\ntry this\\nsorted does not return the result in dataframe format.\\nuse sort_values,"
                    },
                    {
                        "username": "Aksinhaa",
                        "content": "[@heysoymarvin](/heysoymarvin) \"You need to return a Pandas DataFrame instead of <class \\'list\\'>\" It still shows this error"
                    },
                    {
                        "username": "heysoymarvin",
                        "content": "Because the unique() method returns an array and this requires to return a pd.DataFrame, also, you should replace this line of code like this df = df[[\\'author_id\\']].drop_duplicates() this returns a df, instead of a pd.Series or array"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select author_id as Id from Views\\nwhere author_id=viewer_id group by author_id\\norder by author_id;"
                    },
                    {
                        "username": "Virat_Chauhan",
                        "content": "Applying the same for Pandas feels like such a hassle honestly speaking. I should look up the documentation more often."
                    }
                ]
            },
            {
                "id": 2025543,
                "content": [
                    {
                        "username": "sakshirvaidya143",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID ORDER BY ID;"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Tomoe49",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID >= 1 ORDER BY ID; \\ncut runtime in half"
                    },
                    {
                        "username": "dhbarnett",
                        "content": "\"Return the result table sorted by id in ascending order.\"\\n\\nWhich id? author, article, or viewer?"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Author"
                    },
                    {
                        "username": "sshreyansh822",
                        "content": "can someone plz tell me the error\\n\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    df = views[views[\\'author_id\\']==views[\\'viewer_id\\']]\\n    df = df[[\\'author_id\\']].drop_duplicates()\\n    df=df.sort_values(by=\\'author_id\\')\\n    df[[\\'author_id\\']].rename(columns={\\'author_id\\':\\'id\\'})\\n    return df\\n\\n"
                    },
                    {
                        "username": "pankesh167",
                        "content": "import pandas as pd\n\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\n    df=views[views['author_id']==views['viewer_id']]\n    df=df[['author_id']].drop_duplicates()\n    df=df.sort_values(by='author_id')\n    df=df[['author_id']].rename(columns={'author_id':'id'})\n    return df\n\ntry this\nsorted does not return the result in dataframe format.\nuse sort_values,"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "dscharan97",
                        "content": "How to reduce the time , bcz my code is taking longer time compared to other, even though the entire code is almost same. I observed the code which is taking lesser time is written in upper case but my code which was in lower case took longer time.\\nSo does it mean even though it doesn\\'t affect the output it affect the time taken                                    "
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "with cte as (\\nselect author_id,viewer_id  from Views \\ngroup by author_id,viewer_id having author_id =viewer_id)\\n\\nselect distinct author_id as id from cte order by author_id"
                    },
                    {
                        "username": "pandyagunjan10",
                        "content": "select author_id as ID\\nfrom Views\\nwhere article_id >1\\ngroup by author_id\\norder by id asc;"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Aksinhaa",
                        "content": "import pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\ndf = views[views[\\'author_id\\'] == views[\\'viewer_id\\']]\\ndf = df[\\'author_id\\'].unique()\\nreturn sorted(df)\\n\\nwhy is this code not working"
                    },
                    {
                        "username": "pankesh167",
                        "content": "[@Aksinhaa](/Aksinhaa) import pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\ndf=views[views[\\'author_id\\']==views[\\'viewer_id\\']]\\ndf=df[[\\'author_id\\']].drop_duplicates()\\ndf=df.sort_values(by=\\'author_id\\')\\ndf[[\\'author_id\\']].rename(columns={\\'authord_id\\':\\'id\\'})\\nreturn df\\n\\ntry this\\nsorted does not return the result in dataframe format.\\nuse sort_values,"
                    },
                    {
                        "username": "Aksinhaa",
                        "content": "[@heysoymarvin](/heysoymarvin) \"You need to return a Pandas DataFrame instead of <class \\'list\\'>\" It still shows this error"
                    },
                    {
                        "username": "heysoymarvin",
                        "content": "Because the unique() method returns an array and this requires to return a pd.DataFrame, also, you should replace this line of code like this df = df[[\\'author_id\\']].drop_duplicates() this returns a df, instead of a pd.Series or array"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select author_id as Id from Views\\nwhere author_id=viewer_id group by author_id\\norder by author_id;"
                    },
                    {
                        "username": "Virat_Chauhan",
                        "content": "Applying the same for Pandas feels like such a hassle honestly speaking. I should look up the documentation more often."
                    }
                ]
            },
            {
                "id": 2024545,
                "content": [
                    {
                        "username": "sakshirvaidya143",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID ORDER BY ID;"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Tomoe49",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID >= 1 ORDER BY ID; \\ncut runtime in half"
                    },
                    {
                        "username": "dhbarnett",
                        "content": "\"Return the result table sorted by id in ascending order.\"\\n\\nWhich id? author, article, or viewer?"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Author"
                    },
                    {
                        "username": "sshreyansh822",
                        "content": "can someone plz tell me the error\\n\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    df = views[views[\\'author_id\\']==views[\\'viewer_id\\']]\\n    df = df[[\\'author_id\\']].drop_duplicates()\\n    df=df.sort_values(by=\\'author_id\\')\\n    df[[\\'author_id\\']].rename(columns={\\'author_id\\':\\'id\\'})\\n    return df\\n\\n"
                    },
                    {
                        "username": "pankesh167",
                        "content": "import pandas as pd\n\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\n    df=views[views['author_id']==views['viewer_id']]\n    df=df[['author_id']].drop_duplicates()\n    df=df.sort_values(by='author_id')\n    df=df[['author_id']].rename(columns={'author_id':'id'})\n    return df\n\ntry this\nsorted does not return the result in dataframe format.\nuse sort_values,"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "dscharan97",
                        "content": "How to reduce the time , bcz my code is taking longer time compared to other, even though the entire code is almost same. I observed the code which is taking lesser time is written in upper case but my code which was in lower case took longer time.\\nSo does it mean even though it doesn\\'t affect the output it affect the time taken                                    "
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "with cte as (\\nselect author_id,viewer_id  from Views \\ngroup by author_id,viewer_id having author_id =viewer_id)\\n\\nselect distinct author_id as id from cte order by author_id"
                    },
                    {
                        "username": "pandyagunjan10",
                        "content": "select author_id as ID\\nfrom Views\\nwhere article_id >1\\ngroup by author_id\\norder by id asc;"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Aksinhaa",
                        "content": "import pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\ndf = views[views[\\'author_id\\'] == views[\\'viewer_id\\']]\\ndf = df[\\'author_id\\'].unique()\\nreturn sorted(df)\\n\\nwhy is this code not working"
                    },
                    {
                        "username": "pankesh167",
                        "content": "[@Aksinhaa](/Aksinhaa) import pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\ndf=views[views[\\'author_id\\']==views[\\'viewer_id\\']]\\ndf=df[[\\'author_id\\']].drop_duplicates()\\ndf=df.sort_values(by=\\'author_id\\')\\ndf[[\\'author_id\\']].rename(columns={\\'authord_id\\':\\'id\\'})\\nreturn df\\n\\ntry this\\nsorted does not return the result in dataframe format.\\nuse sort_values,"
                    },
                    {
                        "username": "Aksinhaa",
                        "content": "[@heysoymarvin](/heysoymarvin) \"You need to return a Pandas DataFrame instead of <class \\'list\\'>\" It still shows this error"
                    },
                    {
                        "username": "heysoymarvin",
                        "content": "Because the unique() method returns an array and this requires to return a pd.DataFrame, also, you should replace this line of code like this df = df[[\\'author_id\\']].drop_duplicates() this returns a df, instead of a pd.Series or array"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select author_id as Id from Views\\nwhere author_id=viewer_id group by author_id\\norder by author_id;"
                    },
                    {
                        "username": "Virat_Chauhan",
                        "content": "Applying the same for Pandas feels like such a hassle honestly speaking. I should look up the documentation more often."
                    }
                ]
            },
            {
                "id": 2016485,
                "content": [
                    {
                        "username": "sakshirvaidya143",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID ORDER BY ID;"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Tomoe49",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID >= 1 ORDER BY ID; \\ncut runtime in half"
                    },
                    {
                        "username": "dhbarnett",
                        "content": "\"Return the result table sorted by id in ascending order.\"\\n\\nWhich id? author, article, or viewer?"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Author"
                    },
                    {
                        "username": "sshreyansh822",
                        "content": "can someone plz tell me the error\\n\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    df = views[views[\\'author_id\\']==views[\\'viewer_id\\']]\\n    df = df[[\\'author_id\\']].drop_duplicates()\\n    df=df.sort_values(by=\\'author_id\\')\\n    df[[\\'author_id\\']].rename(columns={\\'author_id\\':\\'id\\'})\\n    return df\\n\\n"
                    },
                    {
                        "username": "pankesh167",
                        "content": "import pandas as pd\n\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\n    df=views[views['author_id']==views['viewer_id']]\n    df=df[['author_id']].drop_duplicates()\n    df=df.sort_values(by='author_id')\n    df=df[['author_id']].rename(columns={'author_id':'id'})\n    return df\n\ntry this\nsorted does not return the result in dataframe format.\nuse sort_values,"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "dscharan97",
                        "content": "How to reduce the time , bcz my code is taking longer time compared to other, even though the entire code is almost same. I observed the code which is taking lesser time is written in upper case but my code which was in lower case took longer time.\\nSo does it mean even though it doesn\\'t affect the output it affect the time taken                                    "
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "with cte as (\\nselect author_id,viewer_id  from Views \\ngroup by author_id,viewer_id having author_id =viewer_id)\\n\\nselect distinct author_id as id from cte order by author_id"
                    },
                    {
                        "username": "pandyagunjan10",
                        "content": "select author_id as ID\\nfrom Views\\nwhere article_id >1\\ngroup by author_id\\norder by id asc;"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Aksinhaa",
                        "content": "import pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\ndf = views[views[\\'author_id\\'] == views[\\'viewer_id\\']]\\ndf = df[\\'author_id\\'].unique()\\nreturn sorted(df)\\n\\nwhy is this code not working"
                    },
                    {
                        "username": "pankesh167",
                        "content": "[@Aksinhaa](/Aksinhaa) import pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\ndf=views[views[\\'author_id\\']==views[\\'viewer_id\\']]\\ndf=df[[\\'author_id\\']].drop_duplicates()\\ndf=df.sort_values(by=\\'author_id\\')\\ndf[[\\'author_id\\']].rename(columns={\\'authord_id\\':\\'id\\'})\\nreturn df\\n\\ntry this\\nsorted does not return the result in dataframe format.\\nuse sort_values,"
                    },
                    {
                        "username": "Aksinhaa",
                        "content": "[@heysoymarvin](/heysoymarvin) \"You need to return a Pandas DataFrame instead of <class \\'list\\'>\" It still shows this error"
                    },
                    {
                        "username": "heysoymarvin",
                        "content": "Because the unique() method returns an array and this requires to return a pd.DataFrame, also, you should replace this line of code like this df = df[[\\'author_id\\']].drop_duplicates() this returns a df, instead of a pd.Series or array"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select author_id as Id from Views\\nwhere author_id=viewer_id group by author_id\\norder by author_id;"
                    },
                    {
                        "username": "Virat_Chauhan",
                        "content": "Applying the same for Pandas feels like such a hassle honestly speaking. I should look up the documentation more often."
                    }
                ]
            },
            {
                "id": 2014157,
                "content": [
                    {
                        "username": "sakshirvaidya143",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID ORDER BY ID;"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Tomoe49",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID=VIEWER_ID >= 1 ORDER BY ID; \\ncut runtime in half"
                    },
                    {
                        "username": "dhbarnett",
                        "content": "\"Return the result table sorted by id in ascending order.\"\\n\\nWhich id? author, article, or viewer?"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Author"
                    },
                    {
                        "username": "sshreyansh822",
                        "content": "can someone plz tell me the error\\n\\nimport pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\n    df = views[views[\\'author_id\\']==views[\\'viewer_id\\']]\\n    df = df[[\\'author_id\\']].drop_duplicates()\\n    df=df.sort_values(by=\\'author_id\\')\\n    df[[\\'author_id\\']].rename(columns={\\'author_id\\':\\'id\\'})\\n    return df\\n\\n"
                    },
                    {
                        "username": "pankesh167",
                        "content": "import pandas as pd\n\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\n    df=views[views['author_id']==views['viewer_id']]\n    df=df[['author_id']].drop_duplicates()\n    df=df.sort_values(by='author_id')\n    df=df[['author_id']].rename(columns={'author_id':'id'})\n    return df\n\ntry this\nsorted does not return the result in dataframe format.\nuse sort_values,"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "dscharan97",
                        "content": "How to reduce the time , bcz my code is taking longer time compared to other, even though the entire code is almost same. I observed the code which is taking lesser time is written in upper case but my code which was in lower case took longer time.\\nSo does it mean even though it doesn\\'t affect the output it affect the time taken                                    "
                    },
                    {
                        "username": "pankajmaheshwari128",
                        "content": "with cte as (\\nselect author_id,viewer_id  from Views \\ngroup by author_id,viewer_id having author_id =viewer_id)\\n\\nselect distinct author_id as id from cte order by author_id"
                    },
                    {
                        "username": "pandyagunjan10",
                        "content": "select author_id as ID\\nfrom Views\\nwhere article_id >1\\ngroup by author_id\\norder by id asc;"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "Aksinhaa",
                        "content": "import pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\ndf = views[views[\\'author_id\\'] == views[\\'viewer_id\\']]\\ndf = df[\\'author_id\\'].unique()\\nreturn sorted(df)\\n\\nwhy is this code not working"
                    },
                    {
                        "username": "pankesh167",
                        "content": "[@Aksinhaa](/Aksinhaa) import pandas as pd\\n\\ndef article_views(views: pd.DataFrame) -> pd.DataFrame:\\ndf=views[views[\\'author_id\\']==views[\\'viewer_id\\']]\\ndf=df[[\\'author_id\\']].drop_duplicates()\\ndf=df.sort_values(by=\\'author_id\\')\\ndf[[\\'author_id\\']].rename(columns={\\'authord_id\\':\\'id\\'})\\nreturn df\\n\\ntry this\\nsorted does not return the result in dataframe format.\\nuse sort_values,"
                    },
                    {
                        "username": "Aksinhaa",
                        "content": "[@heysoymarvin](/heysoymarvin) \"You need to return a Pandas DataFrame instead of <class \\'list\\'>\" It still shows this error"
                    },
                    {
                        "username": "heysoymarvin",
                        "content": "Because the unique() method returns an array and this requires to return a pd.DataFrame, also, you should replace this line of code like this df = df[[\\'author_id\\']].drop_duplicates() this returns a df, instead of a pd.Series or array"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select author_id as Id from Views\\nwhere author_id=viewer_id group by author_id\\norder by author_id;"
                    },
                    {
                        "username": "Virat_Chauhan",
                        "content": "Applying the same for Pandas feels like such a hassle honestly speaking. I should look up the documentation more often."
                    }
                ]
            },
            {
                "id": 2010077,
                "content": [
                    {
                        "username": "edithi",
                        "content": "\\nThe article_views function efficiently identifies authors who have viewed their own articles from a DataFrame views. By filtering rows where the author_id matches the viewer_id, it detects self-views. Unique author IDs are extracted and sorted in ascending order to create a new DataFrame, serving as the output. This approach optimizes performance through precise filtering and data manipulation using pandas methods."
                    },
                    {
                        "username": "pks101295nit2017",
                        "content": "`return  views[views[\\'author_id\\']==views[\\'viewer_id\\']][[\\'viewer_id\\']].drop_duplicates().set_axis([\\'id\\'], axis=\\'columns\\').sort_values(by=[\\'id\\'], ascending=True)`"
                    },
                    {
                        "username": "dumb1",
                        "content": "kind of strange to ask us to output the id\\'s in ascending order wouldn\\'t it make more sense to output them in the order that their view was created?"
                    },
                    {
                        "username": "Qingyu_G",
                        "content": "Hello, Can anyone please let me know why the below query is wrong? I just don\\'t know why I cannot use the inner join here.. Thank you so much in advance!!\\nselect distinct\\n    v1.author_id AS id\\nfrom\\n    views v1\\ninner join\\n    views v2\\non\\n    v1.author_id = v2.viewer_id\\norder by\\n    id ASC"
                    },
                    {
                        "username": "Qingyu_G",
                        "content": "Oh, is it because no primary key here so the error occured when using the inner join?"
                    },
                    {
                        "username": "souravkashyap753",
                        "content": "select distinct author_id as id from views\\nwhere author_id=viewer_id\\norder by id;"
                    },
                    {
                        "username": "user7698w",
                        "content": "easy solution with group by \\nbeast 96.33%\\n `select author_id as id from  Views \\ngroup by author_id , viewer_id\\nhaving author_id = viewer_id\\norder by author_id asc`"
                    },
                    {
                        "username": "VikasC",
                        "content": "select distinct author_id as id from Views where author_id in(select distinct viewer_id from Views) order by author_id\\n\\nWhat\\'s wrong with this query, can someone help here?"
                    },
                    {
                        "username": "EvanWhittaker",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS\\nWHERE AUTHOR_ID = VIEWER_ID"
                    },
                    {
                        "username": "coolsand1727",
                        "content": "You have to sort after that by using keyword ORDER BY."
                    },
                    {
                        "username": "KAMISETTY_NAVITHASRI",
                        "content": "select distinct author_id as id\\nfrom Views \\nwhere author_id=viewer_id\\norder by 1"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "select distinct author_id  from Views where author_id = viewer_id order by author_id;\\n\\nwhy is this not working? and why we are using distinct?"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "[@Itzsrn](/Itzsrn) got it got it thank you."
                    },
                    {
                        "username": "Itzsrn",
                        "content": "Use Aliases to rename the author_id with id since the output is mentioned and we use distinct to select unique author id"
                    }
                ]
            },
            {
                "id": 2008433,
                "content": [
                    {
                        "username": "edithi",
                        "content": "\\nThe article_views function efficiently identifies authors who have viewed their own articles from a DataFrame views. By filtering rows where the author_id matches the viewer_id, it detects self-views. Unique author IDs are extracted and sorted in ascending order to create a new DataFrame, serving as the output. This approach optimizes performance through precise filtering and data manipulation using pandas methods."
                    },
                    {
                        "username": "pks101295nit2017",
                        "content": "`return  views[views[\\'author_id\\']==views[\\'viewer_id\\']][[\\'viewer_id\\']].drop_duplicates().set_axis([\\'id\\'], axis=\\'columns\\').sort_values(by=[\\'id\\'], ascending=True)`"
                    },
                    {
                        "username": "dumb1",
                        "content": "kind of strange to ask us to output the id\\'s in ascending order wouldn\\'t it make more sense to output them in the order that their view was created?"
                    },
                    {
                        "username": "Qingyu_G",
                        "content": "Hello, Can anyone please let me know why the below query is wrong? I just don\\'t know why I cannot use the inner join here.. Thank you so much in advance!!\\nselect distinct\\n    v1.author_id AS id\\nfrom\\n    views v1\\ninner join\\n    views v2\\non\\n    v1.author_id = v2.viewer_id\\norder by\\n    id ASC"
                    },
                    {
                        "username": "Qingyu_G",
                        "content": "Oh, is it because no primary key here so the error occured when using the inner join?"
                    },
                    {
                        "username": "souravkashyap753",
                        "content": "select distinct author_id as id from views\\nwhere author_id=viewer_id\\norder by id;"
                    },
                    {
                        "username": "user7698w",
                        "content": "easy solution with group by \\nbeast 96.33%\\n `select author_id as id from  Views \\ngroup by author_id , viewer_id\\nhaving author_id = viewer_id\\norder by author_id asc`"
                    },
                    {
                        "username": "VikasC",
                        "content": "select distinct author_id as id from Views where author_id in(select distinct viewer_id from Views) order by author_id\\n\\nWhat\\'s wrong with this query, can someone help here?"
                    },
                    {
                        "username": "EvanWhittaker",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS\\nWHERE AUTHOR_ID = VIEWER_ID"
                    },
                    {
                        "username": "coolsand1727",
                        "content": "You have to sort after that by using keyword ORDER BY."
                    },
                    {
                        "username": "KAMISETTY_NAVITHASRI",
                        "content": "select distinct author_id as id\\nfrom Views \\nwhere author_id=viewer_id\\norder by 1"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "select distinct author_id  from Views where author_id = viewer_id order by author_id;\\n\\nwhy is this not working? and why we are using distinct?"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "[@Itzsrn](/Itzsrn) got it got it thank you."
                    },
                    {
                        "username": "Itzsrn",
                        "content": "Use Aliases to rename the author_id with id since the output is mentioned and we use distinct to select unique author id"
                    }
                ]
            },
            {
                "id": 1999076,
                "content": [
                    {
                        "username": "edithi",
                        "content": "\\nThe article_views function efficiently identifies authors who have viewed their own articles from a DataFrame views. By filtering rows where the author_id matches the viewer_id, it detects self-views. Unique author IDs are extracted and sorted in ascending order to create a new DataFrame, serving as the output. This approach optimizes performance through precise filtering and data manipulation using pandas methods."
                    },
                    {
                        "username": "pks101295nit2017",
                        "content": "`return  views[views[\\'author_id\\']==views[\\'viewer_id\\']][[\\'viewer_id\\']].drop_duplicates().set_axis([\\'id\\'], axis=\\'columns\\').sort_values(by=[\\'id\\'], ascending=True)`"
                    },
                    {
                        "username": "dumb1",
                        "content": "kind of strange to ask us to output the id\\'s in ascending order wouldn\\'t it make more sense to output them in the order that their view was created?"
                    },
                    {
                        "username": "Qingyu_G",
                        "content": "Hello, Can anyone please let me know why the below query is wrong? I just don\\'t know why I cannot use the inner join here.. Thank you so much in advance!!\\nselect distinct\\n    v1.author_id AS id\\nfrom\\n    views v1\\ninner join\\n    views v2\\non\\n    v1.author_id = v2.viewer_id\\norder by\\n    id ASC"
                    },
                    {
                        "username": "Qingyu_G",
                        "content": "Oh, is it because no primary key here so the error occured when using the inner join?"
                    },
                    {
                        "username": "souravkashyap753",
                        "content": "select distinct author_id as id from views\\nwhere author_id=viewer_id\\norder by id;"
                    },
                    {
                        "username": "user7698w",
                        "content": "easy solution with group by \\nbeast 96.33%\\n `select author_id as id from  Views \\ngroup by author_id , viewer_id\\nhaving author_id = viewer_id\\norder by author_id asc`"
                    },
                    {
                        "username": "VikasC",
                        "content": "select distinct author_id as id from Views where author_id in(select distinct viewer_id from Views) order by author_id\\n\\nWhat\\'s wrong with this query, can someone help here?"
                    },
                    {
                        "username": "EvanWhittaker",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS\\nWHERE AUTHOR_ID = VIEWER_ID"
                    },
                    {
                        "username": "coolsand1727",
                        "content": "You have to sort after that by using keyword ORDER BY."
                    },
                    {
                        "username": "KAMISETTY_NAVITHASRI",
                        "content": "select distinct author_id as id\\nfrom Views \\nwhere author_id=viewer_id\\norder by 1"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "select distinct author_id  from Views where author_id = viewer_id order by author_id;\\n\\nwhy is this not working? and why we are using distinct?"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "[@Itzsrn](/Itzsrn) got it got it thank you."
                    },
                    {
                        "username": "Itzsrn",
                        "content": "Use Aliases to rename the author_id with id since the output is mentioned and we use distinct to select unique author id"
                    }
                ]
            },
            {
                "id": 1997935,
                "content": [
                    {
                        "username": "edithi",
                        "content": "\\nThe article_views function efficiently identifies authors who have viewed their own articles from a DataFrame views. By filtering rows where the author_id matches the viewer_id, it detects self-views. Unique author IDs are extracted and sorted in ascending order to create a new DataFrame, serving as the output. This approach optimizes performance through precise filtering and data manipulation using pandas methods."
                    },
                    {
                        "username": "pks101295nit2017",
                        "content": "`return  views[views[\\'author_id\\']==views[\\'viewer_id\\']][[\\'viewer_id\\']].drop_duplicates().set_axis([\\'id\\'], axis=\\'columns\\').sort_values(by=[\\'id\\'], ascending=True)`"
                    },
                    {
                        "username": "dumb1",
                        "content": "kind of strange to ask us to output the id\\'s in ascending order wouldn\\'t it make more sense to output them in the order that their view was created?"
                    },
                    {
                        "username": "Qingyu_G",
                        "content": "Hello, Can anyone please let me know why the below query is wrong? I just don\\'t know why I cannot use the inner join here.. Thank you so much in advance!!\\nselect distinct\\n    v1.author_id AS id\\nfrom\\n    views v1\\ninner join\\n    views v2\\non\\n    v1.author_id = v2.viewer_id\\norder by\\n    id ASC"
                    },
                    {
                        "username": "Qingyu_G",
                        "content": "Oh, is it because no primary key here so the error occured when using the inner join?"
                    },
                    {
                        "username": "souravkashyap753",
                        "content": "select distinct author_id as id from views\\nwhere author_id=viewer_id\\norder by id;"
                    },
                    {
                        "username": "user7698w",
                        "content": "easy solution with group by \\nbeast 96.33%\\n `select author_id as id from  Views \\ngroup by author_id , viewer_id\\nhaving author_id = viewer_id\\norder by author_id asc`"
                    },
                    {
                        "username": "VikasC",
                        "content": "select distinct author_id as id from Views where author_id in(select distinct viewer_id from Views) order by author_id\\n\\nWhat\\'s wrong with this query, can someone help here?"
                    },
                    {
                        "username": "EvanWhittaker",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS\\nWHERE AUTHOR_ID = VIEWER_ID"
                    },
                    {
                        "username": "coolsand1727",
                        "content": "You have to sort after that by using keyword ORDER BY."
                    },
                    {
                        "username": "KAMISETTY_NAVITHASRI",
                        "content": "select distinct author_id as id\\nfrom Views \\nwhere author_id=viewer_id\\norder by 1"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "select distinct author_id  from Views where author_id = viewer_id order by author_id;\\n\\nwhy is this not working? and why we are using distinct?"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "[@Itzsrn](/Itzsrn) got it got it thank you."
                    },
                    {
                        "username": "Itzsrn",
                        "content": "Use Aliases to rename the author_id with id since the output is mentioned and we use distinct to select unique author id"
                    }
                ]
            },
            {
                "id": 1997391,
                "content": [
                    {
                        "username": "edithi",
                        "content": "\\nThe article_views function efficiently identifies authors who have viewed their own articles from a DataFrame views. By filtering rows where the author_id matches the viewer_id, it detects self-views. Unique author IDs are extracted and sorted in ascending order to create a new DataFrame, serving as the output. This approach optimizes performance through precise filtering and data manipulation using pandas methods."
                    },
                    {
                        "username": "pks101295nit2017",
                        "content": "`return  views[views[\\'author_id\\']==views[\\'viewer_id\\']][[\\'viewer_id\\']].drop_duplicates().set_axis([\\'id\\'], axis=\\'columns\\').sort_values(by=[\\'id\\'], ascending=True)`"
                    },
                    {
                        "username": "dumb1",
                        "content": "kind of strange to ask us to output the id\\'s in ascending order wouldn\\'t it make more sense to output them in the order that their view was created?"
                    },
                    {
                        "username": "Qingyu_G",
                        "content": "Hello, Can anyone please let me know why the below query is wrong? I just don\\'t know why I cannot use the inner join here.. Thank you so much in advance!!\\nselect distinct\\n    v1.author_id AS id\\nfrom\\n    views v1\\ninner join\\n    views v2\\non\\n    v1.author_id = v2.viewer_id\\norder by\\n    id ASC"
                    },
                    {
                        "username": "Qingyu_G",
                        "content": "Oh, is it because no primary key here so the error occured when using the inner join?"
                    },
                    {
                        "username": "souravkashyap753",
                        "content": "select distinct author_id as id from views\\nwhere author_id=viewer_id\\norder by id;"
                    },
                    {
                        "username": "user7698w",
                        "content": "easy solution with group by \\nbeast 96.33%\\n `select author_id as id from  Views \\ngroup by author_id , viewer_id\\nhaving author_id = viewer_id\\norder by author_id asc`"
                    },
                    {
                        "username": "VikasC",
                        "content": "select distinct author_id as id from Views where author_id in(select distinct viewer_id from Views) order by author_id\\n\\nWhat\\'s wrong with this query, can someone help here?"
                    },
                    {
                        "username": "EvanWhittaker",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS\\nWHERE AUTHOR_ID = VIEWER_ID"
                    },
                    {
                        "username": "coolsand1727",
                        "content": "You have to sort after that by using keyword ORDER BY."
                    },
                    {
                        "username": "KAMISETTY_NAVITHASRI",
                        "content": "select distinct author_id as id\\nfrom Views \\nwhere author_id=viewer_id\\norder by 1"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "select distinct author_id  from Views where author_id = viewer_id order by author_id;\\n\\nwhy is this not working? and why we are using distinct?"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "[@Itzsrn](/Itzsrn) got it got it thank you."
                    },
                    {
                        "username": "Itzsrn",
                        "content": "Use Aliases to rename the author_id with id since the output is mentioned and we use distinct to select unique author id"
                    }
                ]
            },
            {
                "id": 1994134,
                "content": [
                    {
                        "username": "edithi",
                        "content": "\\nThe article_views function efficiently identifies authors who have viewed their own articles from a DataFrame views. By filtering rows where the author_id matches the viewer_id, it detects self-views. Unique author IDs are extracted and sorted in ascending order to create a new DataFrame, serving as the output. This approach optimizes performance through precise filtering and data manipulation using pandas methods."
                    },
                    {
                        "username": "pks101295nit2017",
                        "content": "`return  views[views[\\'author_id\\']==views[\\'viewer_id\\']][[\\'viewer_id\\']].drop_duplicates().set_axis([\\'id\\'], axis=\\'columns\\').sort_values(by=[\\'id\\'], ascending=True)`"
                    },
                    {
                        "username": "dumb1",
                        "content": "kind of strange to ask us to output the id\\'s in ascending order wouldn\\'t it make more sense to output them in the order that their view was created?"
                    },
                    {
                        "username": "Qingyu_G",
                        "content": "Hello, Can anyone please let me know why the below query is wrong? I just don\\'t know why I cannot use the inner join here.. Thank you so much in advance!!\\nselect distinct\\n    v1.author_id AS id\\nfrom\\n    views v1\\ninner join\\n    views v2\\non\\n    v1.author_id = v2.viewer_id\\norder by\\n    id ASC"
                    },
                    {
                        "username": "Qingyu_G",
                        "content": "Oh, is it because no primary key here so the error occured when using the inner join?"
                    },
                    {
                        "username": "souravkashyap753",
                        "content": "select distinct author_id as id from views\\nwhere author_id=viewer_id\\norder by id;"
                    },
                    {
                        "username": "user7698w",
                        "content": "easy solution with group by \\nbeast 96.33%\\n `select author_id as id from  Views \\ngroup by author_id , viewer_id\\nhaving author_id = viewer_id\\norder by author_id asc`"
                    },
                    {
                        "username": "VikasC",
                        "content": "select distinct author_id as id from Views where author_id in(select distinct viewer_id from Views) order by author_id\\n\\nWhat\\'s wrong with this query, can someone help here?"
                    },
                    {
                        "username": "EvanWhittaker",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS\\nWHERE AUTHOR_ID = VIEWER_ID"
                    },
                    {
                        "username": "coolsand1727",
                        "content": "You have to sort after that by using keyword ORDER BY."
                    },
                    {
                        "username": "KAMISETTY_NAVITHASRI",
                        "content": "select distinct author_id as id\\nfrom Views \\nwhere author_id=viewer_id\\norder by 1"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "select distinct author_id  from Views where author_id = viewer_id order by author_id;\\n\\nwhy is this not working? and why we are using distinct?"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "[@Itzsrn](/Itzsrn) got it got it thank you."
                    },
                    {
                        "username": "Itzsrn",
                        "content": "Use Aliases to rename the author_id with id since the output is mentioned and we use distinct to select unique author id"
                    }
                ]
            },
            {
                "id": 1992015,
                "content": [
                    {
                        "username": "edithi",
                        "content": "\\nThe article_views function efficiently identifies authors who have viewed their own articles from a DataFrame views. By filtering rows where the author_id matches the viewer_id, it detects self-views. Unique author IDs are extracted and sorted in ascending order to create a new DataFrame, serving as the output. This approach optimizes performance through precise filtering and data manipulation using pandas methods."
                    },
                    {
                        "username": "pks101295nit2017",
                        "content": "`return  views[views[\\'author_id\\']==views[\\'viewer_id\\']][[\\'viewer_id\\']].drop_duplicates().set_axis([\\'id\\'], axis=\\'columns\\').sort_values(by=[\\'id\\'], ascending=True)`"
                    },
                    {
                        "username": "dumb1",
                        "content": "kind of strange to ask us to output the id\\'s in ascending order wouldn\\'t it make more sense to output them in the order that their view was created?"
                    },
                    {
                        "username": "Qingyu_G",
                        "content": "Hello, Can anyone please let me know why the below query is wrong? I just don\\'t know why I cannot use the inner join here.. Thank you so much in advance!!\\nselect distinct\\n    v1.author_id AS id\\nfrom\\n    views v1\\ninner join\\n    views v2\\non\\n    v1.author_id = v2.viewer_id\\norder by\\n    id ASC"
                    },
                    {
                        "username": "Qingyu_G",
                        "content": "Oh, is it because no primary key here so the error occured when using the inner join?"
                    },
                    {
                        "username": "souravkashyap753",
                        "content": "select distinct author_id as id from views\\nwhere author_id=viewer_id\\norder by id;"
                    },
                    {
                        "username": "user7698w",
                        "content": "easy solution with group by \\nbeast 96.33%\\n `select author_id as id from  Views \\ngroup by author_id , viewer_id\\nhaving author_id = viewer_id\\norder by author_id asc`"
                    },
                    {
                        "username": "VikasC",
                        "content": "select distinct author_id as id from Views where author_id in(select distinct viewer_id from Views) order by author_id\\n\\nWhat\\'s wrong with this query, can someone help here?"
                    },
                    {
                        "username": "EvanWhittaker",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS\\nWHERE AUTHOR_ID = VIEWER_ID"
                    },
                    {
                        "username": "coolsand1727",
                        "content": "You have to sort after that by using keyword ORDER BY."
                    },
                    {
                        "username": "KAMISETTY_NAVITHASRI",
                        "content": "select distinct author_id as id\\nfrom Views \\nwhere author_id=viewer_id\\norder by 1"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "select distinct author_id  from Views where author_id = viewer_id order by author_id;\\n\\nwhy is this not working? and why we are using distinct?"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "[@Itzsrn](/Itzsrn) got it got it thank you."
                    },
                    {
                        "username": "Itzsrn",
                        "content": "Use Aliases to rename the author_id with id since the output is mentioned and we use distinct to select unique author id"
                    }
                ]
            },
            {
                "id": 1980012,
                "content": [
                    {
                        "username": "edithi",
                        "content": "\\nThe article_views function efficiently identifies authors who have viewed their own articles from a DataFrame views. By filtering rows where the author_id matches the viewer_id, it detects self-views. Unique author IDs are extracted and sorted in ascending order to create a new DataFrame, serving as the output. This approach optimizes performance through precise filtering and data manipulation using pandas methods."
                    },
                    {
                        "username": "pks101295nit2017",
                        "content": "`return  views[views[\\'author_id\\']==views[\\'viewer_id\\']][[\\'viewer_id\\']].drop_duplicates().set_axis([\\'id\\'], axis=\\'columns\\').sort_values(by=[\\'id\\'], ascending=True)`"
                    },
                    {
                        "username": "dumb1",
                        "content": "kind of strange to ask us to output the id\\'s in ascending order wouldn\\'t it make more sense to output them in the order that their view was created?"
                    },
                    {
                        "username": "Qingyu_G",
                        "content": "Hello, Can anyone please let me know why the below query is wrong? I just don\\'t know why I cannot use the inner join here.. Thank you so much in advance!!\\nselect distinct\\n    v1.author_id AS id\\nfrom\\n    views v1\\ninner join\\n    views v2\\non\\n    v1.author_id = v2.viewer_id\\norder by\\n    id ASC"
                    },
                    {
                        "username": "Qingyu_G",
                        "content": "Oh, is it because no primary key here so the error occured when using the inner join?"
                    },
                    {
                        "username": "souravkashyap753",
                        "content": "select distinct author_id as id from views\\nwhere author_id=viewer_id\\norder by id;"
                    },
                    {
                        "username": "user7698w",
                        "content": "easy solution with group by \\nbeast 96.33%\\n `select author_id as id from  Views \\ngroup by author_id , viewer_id\\nhaving author_id = viewer_id\\norder by author_id asc`"
                    },
                    {
                        "username": "VikasC",
                        "content": "select distinct author_id as id from Views where author_id in(select distinct viewer_id from Views) order by author_id\\n\\nWhat\\'s wrong with this query, can someone help here?"
                    },
                    {
                        "username": "EvanWhittaker",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS\\nWHERE AUTHOR_ID = VIEWER_ID"
                    },
                    {
                        "username": "coolsand1727",
                        "content": "You have to sort after that by using keyword ORDER BY."
                    },
                    {
                        "username": "KAMISETTY_NAVITHASRI",
                        "content": "select distinct author_id as id\\nfrom Views \\nwhere author_id=viewer_id\\norder by 1"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "select distinct author_id  from Views where author_id = viewer_id order by author_id;\\n\\nwhy is this not working? and why we are using distinct?"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "[@Itzsrn](/Itzsrn) got it got it thank you."
                    },
                    {
                        "username": "Itzsrn",
                        "content": "Use Aliases to rename the author_id with id since the output is mentioned and we use distinct to select unique author id"
                    }
                ]
            },
            {
                "id": 1959662,
                "content": [
                    {
                        "username": "edithi",
                        "content": "\\nThe article_views function efficiently identifies authors who have viewed their own articles from a DataFrame views. By filtering rows where the author_id matches the viewer_id, it detects self-views. Unique author IDs are extracted and sorted in ascending order to create a new DataFrame, serving as the output. This approach optimizes performance through precise filtering and data manipulation using pandas methods."
                    },
                    {
                        "username": "pks101295nit2017",
                        "content": "`return  views[views[\\'author_id\\']==views[\\'viewer_id\\']][[\\'viewer_id\\']].drop_duplicates().set_axis([\\'id\\'], axis=\\'columns\\').sort_values(by=[\\'id\\'], ascending=True)`"
                    },
                    {
                        "username": "dumb1",
                        "content": "kind of strange to ask us to output the id\\'s in ascending order wouldn\\'t it make more sense to output them in the order that their view was created?"
                    },
                    {
                        "username": "Qingyu_G",
                        "content": "Hello, Can anyone please let me know why the below query is wrong? I just don\\'t know why I cannot use the inner join here.. Thank you so much in advance!!\\nselect distinct\\n    v1.author_id AS id\\nfrom\\n    views v1\\ninner join\\n    views v2\\non\\n    v1.author_id = v2.viewer_id\\norder by\\n    id ASC"
                    },
                    {
                        "username": "Qingyu_G",
                        "content": "Oh, is it because no primary key here so the error occured when using the inner join?"
                    },
                    {
                        "username": "souravkashyap753",
                        "content": "select distinct author_id as id from views\\nwhere author_id=viewer_id\\norder by id;"
                    },
                    {
                        "username": "user7698w",
                        "content": "easy solution with group by \\nbeast 96.33%\\n `select author_id as id from  Views \\ngroup by author_id , viewer_id\\nhaving author_id = viewer_id\\norder by author_id asc`"
                    },
                    {
                        "username": "VikasC",
                        "content": "select distinct author_id as id from Views where author_id in(select distinct viewer_id from Views) order by author_id\\n\\nWhat\\'s wrong with this query, can someone help here?"
                    },
                    {
                        "username": "EvanWhittaker",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS\\nWHERE AUTHOR_ID = VIEWER_ID"
                    },
                    {
                        "username": "coolsand1727",
                        "content": "You have to sort after that by using keyword ORDER BY."
                    },
                    {
                        "username": "KAMISETTY_NAVITHASRI",
                        "content": "select distinct author_id as id\\nfrom Views \\nwhere author_id=viewer_id\\norder by 1"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "select distinct author_id  from Views where author_id = viewer_id order by author_id;\\n\\nwhy is this not working? and why we are using distinct?"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "[@Itzsrn](/Itzsrn) got it got it thank you."
                    },
                    {
                        "username": "Itzsrn",
                        "content": "Use Aliases to rename the author_id with id since the output is mentioned and we use distinct to select unique author id"
                    }
                ]
            },
            {
                "id": 1959631,
                "content": [
                    {
                        "username": "edithi",
                        "content": "\\nThe article_views function efficiently identifies authors who have viewed their own articles from a DataFrame views. By filtering rows where the author_id matches the viewer_id, it detects self-views. Unique author IDs are extracted and sorted in ascending order to create a new DataFrame, serving as the output. This approach optimizes performance through precise filtering and data manipulation using pandas methods."
                    },
                    {
                        "username": "pks101295nit2017",
                        "content": "`return  views[views[\\'author_id\\']==views[\\'viewer_id\\']][[\\'viewer_id\\']].drop_duplicates().set_axis([\\'id\\'], axis=\\'columns\\').sort_values(by=[\\'id\\'], ascending=True)`"
                    },
                    {
                        "username": "dumb1",
                        "content": "kind of strange to ask us to output the id\\'s in ascending order wouldn\\'t it make more sense to output them in the order that their view was created?"
                    },
                    {
                        "username": "Qingyu_G",
                        "content": "Hello, Can anyone please let me know why the below query is wrong? I just don\\'t know why I cannot use the inner join here.. Thank you so much in advance!!\\nselect distinct\\n    v1.author_id AS id\\nfrom\\n    views v1\\ninner join\\n    views v2\\non\\n    v1.author_id = v2.viewer_id\\norder by\\n    id ASC"
                    },
                    {
                        "username": "Qingyu_G",
                        "content": "Oh, is it because no primary key here so the error occured when using the inner join?"
                    },
                    {
                        "username": "souravkashyap753",
                        "content": "select distinct author_id as id from views\\nwhere author_id=viewer_id\\norder by id;"
                    },
                    {
                        "username": "user7698w",
                        "content": "easy solution with group by \\nbeast 96.33%\\n `select author_id as id from  Views \\ngroup by author_id , viewer_id\\nhaving author_id = viewer_id\\norder by author_id asc`"
                    },
                    {
                        "username": "VikasC",
                        "content": "select distinct author_id as id from Views where author_id in(select distinct viewer_id from Views) order by author_id\\n\\nWhat\\'s wrong with this query, can someone help here?"
                    },
                    {
                        "username": "EvanWhittaker",
                        "content": "SELECT DISTINCT AUTHOR_ID AS ID FROM VIEWS\\nWHERE AUTHOR_ID = VIEWER_ID"
                    },
                    {
                        "username": "coolsand1727",
                        "content": "You have to sort after that by using keyword ORDER BY."
                    },
                    {
                        "username": "KAMISETTY_NAVITHASRI",
                        "content": "select distinct author_id as id\\nfrom Views \\nwhere author_id=viewer_id\\norder by 1"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "select distinct author_id  from Views where author_id = viewer_id order by author_id;\\n\\nwhy is this not working? and why we are using distinct?"
                    },
                    {
                        "username": "rakhikumari6602",
                        "content": "[@Itzsrn](/Itzsrn) got it got it thank you."
                    },
                    {
                        "username": "Itzsrn",
                        "content": "Use Aliases to rename the author_id with id since the output is mentioned and we use distinct to select unique author id"
                    }
                ]
            },
            {
                "id": 1956662,
                "content": [
                    {
                        "username": "Nidhi96",
                        "content": "select distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by id"
                    },
                    {
                        "username": "ak5683777",
                        "content": "SELECT distinct(author_id) as id from Views where author_id=viewer_id order by author_id; "
                    },
                    {
                        "username": "sumit_111",
                        "content": "Can anybody help me why I am getting Runtime error, even if I write correct code :\\nselect distinct author_id\\nfrom Views\\nwhere author_id = view_id\\norder by author_id;\\n\\n"
                    },
                    {
                        "username": "PawanKumar1",
                        "content": "used viewer_id in place of view_id"
                    },
                    {
                        "username": "Msey",
                        "content": "`truncate table discussion`"
                    },
                    {
                        "username": "Papal0tl",
                        "content": "Can anyone please guide me why I can't use self join here?\n\nSELECT DISTINCT v.author_id AS id\nFROM Views v\nJOIN Views i\n  ON v.author_id = i.viewer_id\nORDER BY id "
                    },
                    {
                        "username": "yanki37",
                        "content": "select author.author_id as id\\nfrom views as author\\njoin views as viewer on author.author_id = viewer.viewer_id\\ngroup by author.author_id\\norder by author.author_id"
                    },
                    {
                        "username": "user7275Aw",
                        "content": "for any generalized `k`,\\ni.e.   \\nWrite an SQL query to find all the authors that viewed `at least k` of their own articles.\\n\\nis `group by - count - having` the only way ? or any other also..."
                    },
                    {
                        "username": "aitachii",
                        "content": "Make sure to exclude duplicates."
                    },
                    {
                        "username": "Amirk692",
                        "content": "solved using self join\\n\\nselect author.author_id as id\\nfrom views as author\\njoin views as viewer on author.author_id = viewer.viewer_id\\ngroup by author.author_id\\norder by author.author_id"
                    },
                    {
                        "username": "safanali604",
                        "content": "select distinct(author_id) as \\'id\\' from views where (article_id,viewer_id) in\\n(select article_id,author_id from views group by article_id) order by author_id asc;"
                    },
                    {
                        "username": "mohamed1237",
                        "content": "select distinct v.author_id as id\\nfrom Views as v\\nwhere v.author_id in (select author_id\\n                    from  Views \\n                     where author_id=viewer_id )\\norder by id;"
                    }
                ]
            },
            {
                "id": 1944185,
                "content": [
                    {
                        "username": "Nidhi96",
                        "content": "select distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by id"
                    },
                    {
                        "username": "ak5683777",
                        "content": "SELECT distinct(author_id) as id from Views where author_id=viewer_id order by author_id; "
                    },
                    {
                        "username": "sumit_111",
                        "content": "Can anybody help me why I am getting Runtime error, even if I write correct code :\\nselect distinct author_id\\nfrom Views\\nwhere author_id = view_id\\norder by author_id;\\n\\n"
                    },
                    {
                        "username": "PawanKumar1",
                        "content": "used viewer_id in place of view_id"
                    },
                    {
                        "username": "Msey",
                        "content": "`truncate table discussion`"
                    },
                    {
                        "username": "Papal0tl",
                        "content": "Can anyone please guide me why I can't use self join here?\n\nSELECT DISTINCT v.author_id AS id\nFROM Views v\nJOIN Views i\n  ON v.author_id = i.viewer_id\nORDER BY id "
                    },
                    {
                        "username": "yanki37",
                        "content": "select author.author_id as id\\nfrom views as author\\njoin views as viewer on author.author_id = viewer.viewer_id\\ngroup by author.author_id\\norder by author.author_id"
                    },
                    {
                        "username": "user7275Aw",
                        "content": "for any generalized `k`,\\ni.e.   \\nWrite an SQL query to find all the authors that viewed `at least k` of their own articles.\\n\\nis `group by - count - having` the only way ? or any other also..."
                    },
                    {
                        "username": "aitachii",
                        "content": "Make sure to exclude duplicates."
                    },
                    {
                        "username": "Amirk692",
                        "content": "solved using self join\\n\\nselect author.author_id as id\\nfrom views as author\\njoin views as viewer on author.author_id = viewer.viewer_id\\ngroup by author.author_id\\norder by author.author_id"
                    },
                    {
                        "username": "safanali604",
                        "content": "select distinct(author_id) as \\'id\\' from views where (article_id,viewer_id) in\\n(select article_id,author_id from views group by article_id) order by author_id asc;"
                    },
                    {
                        "username": "mohamed1237",
                        "content": "select distinct v.author_id as id\\nfrom Views as v\\nwhere v.author_id in (select author_id\\n                    from  Views \\n                     where author_id=viewer_id )\\norder by id;"
                    }
                ]
            },
            {
                "id": 1940502,
                "content": [
                    {
                        "username": "Nidhi96",
                        "content": "select distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by id"
                    },
                    {
                        "username": "ak5683777",
                        "content": "SELECT distinct(author_id) as id from Views where author_id=viewer_id order by author_id; "
                    },
                    {
                        "username": "sumit_111",
                        "content": "Can anybody help me why I am getting Runtime error, even if I write correct code :\\nselect distinct author_id\\nfrom Views\\nwhere author_id = view_id\\norder by author_id;\\n\\n"
                    },
                    {
                        "username": "PawanKumar1",
                        "content": "used viewer_id in place of view_id"
                    },
                    {
                        "username": "Msey",
                        "content": "`truncate table discussion`"
                    },
                    {
                        "username": "Papal0tl",
                        "content": "Can anyone please guide me why I can't use self join here?\n\nSELECT DISTINCT v.author_id AS id\nFROM Views v\nJOIN Views i\n  ON v.author_id = i.viewer_id\nORDER BY id "
                    },
                    {
                        "username": "yanki37",
                        "content": "select author.author_id as id\\nfrom views as author\\njoin views as viewer on author.author_id = viewer.viewer_id\\ngroup by author.author_id\\norder by author.author_id"
                    },
                    {
                        "username": "user7275Aw",
                        "content": "for any generalized `k`,\\ni.e.   \\nWrite an SQL query to find all the authors that viewed `at least k` of their own articles.\\n\\nis `group by - count - having` the only way ? or any other also..."
                    },
                    {
                        "username": "aitachii",
                        "content": "Make sure to exclude duplicates."
                    },
                    {
                        "username": "Amirk692",
                        "content": "solved using self join\\n\\nselect author.author_id as id\\nfrom views as author\\njoin views as viewer on author.author_id = viewer.viewer_id\\ngroup by author.author_id\\norder by author.author_id"
                    },
                    {
                        "username": "safanali604",
                        "content": "select distinct(author_id) as \\'id\\' from views where (article_id,viewer_id) in\\n(select article_id,author_id from views group by article_id) order by author_id asc;"
                    },
                    {
                        "username": "mohamed1237",
                        "content": "select distinct v.author_id as id\\nfrom Views as v\\nwhere v.author_id in (select author_id\\n                    from  Views \\n                     where author_id=viewer_id )\\norder by id;"
                    }
                ]
            },
            {
                "id": 1934771,
                "content": [
                    {
                        "username": "Nidhi96",
                        "content": "select distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by id"
                    },
                    {
                        "username": "ak5683777",
                        "content": "SELECT distinct(author_id) as id from Views where author_id=viewer_id order by author_id; "
                    },
                    {
                        "username": "sumit_111",
                        "content": "Can anybody help me why I am getting Runtime error, even if I write correct code :\\nselect distinct author_id\\nfrom Views\\nwhere author_id = view_id\\norder by author_id;\\n\\n"
                    },
                    {
                        "username": "PawanKumar1",
                        "content": "used viewer_id in place of view_id"
                    },
                    {
                        "username": "Msey",
                        "content": "`truncate table discussion`"
                    },
                    {
                        "username": "Papal0tl",
                        "content": "Can anyone please guide me why I can't use self join here?\n\nSELECT DISTINCT v.author_id AS id\nFROM Views v\nJOIN Views i\n  ON v.author_id = i.viewer_id\nORDER BY id "
                    },
                    {
                        "username": "yanki37",
                        "content": "select author.author_id as id\\nfrom views as author\\njoin views as viewer on author.author_id = viewer.viewer_id\\ngroup by author.author_id\\norder by author.author_id"
                    },
                    {
                        "username": "user7275Aw",
                        "content": "for any generalized `k`,\\ni.e.   \\nWrite an SQL query to find all the authors that viewed `at least k` of their own articles.\\n\\nis `group by - count - having` the only way ? or any other also..."
                    },
                    {
                        "username": "aitachii",
                        "content": "Make sure to exclude duplicates."
                    },
                    {
                        "username": "Amirk692",
                        "content": "solved using self join\\n\\nselect author.author_id as id\\nfrom views as author\\njoin views as viewer on author.author_id = viewer.viewer_id\\ngroup by author.author_id\\norder by author.author_id"
                    },
                    {
                        "username": "safanali604",
                        "content": "select distinct(author_id) as \\'id\\' from views where (article_id,viewer_id) in\\n(select article_id,author_id from views group by article_id) order by author_id asc;"
                    },
                    {
                        "username": "mohamed1237",
                        "content": "select distinct v.author_id as id\\nfrom Views as v\\nwhere v.author_id in (select author_id\\n                    from  Views \\n                     where author_id=viewer_id )\\norder by id;"
                    }
                ]
            },
            {
                "id": 1919352,
                "content": [
                    {
                        "username": "Nidhi96",
                        "content": "select distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by id"
                    },
                    {
                        "username": "ak5683777",
                        "content": "SELECT distinct(author_id) as id from Views where author_id=viewer_id order by author_id; "
                    },
                    {
                        "username": "sumit_111",
                        "content": "Can anybody help me why I am getting Runtime error, even if I write correct code :\\nselect distinct author_id\\nfrom Views\\nwhere author_id = view_id\\norder by author_id;\\n\\n"
                    },
                    {
                        "username": "PawanKumar1",
                        "content": "used viewer_id in place of view_id"
                    },
                    {
                        "username": "Msey",
                        "content": "`truncate table discussion`"
                    },
                    {
                        "username": "Papal0tl",
                        "content": "Can anyone please guide me why I can't use self join here?\n\nSELECT DISTINCT v.author_id AS id\nFROM Views v\nJOIN Views i\n  ON v.author_id = i.viewer_id\nORDER BY id "
                    },
                    {
                        "username": "yanki37",
                        "content": "select author.author_id as id\\nfrom views as author\\njoin views as viewer on author.author_id = viewer.viewer_id\\ngroup by author.author_id\\norder by author.author_id"
                    },
                    {
                        "username": "user7275Aw",
                        "content": "for any generalized `k`,\\ni.e.   \\nWrite an SQL query to find all the authors that viewed `at least k` of their own articles.\\n\\nis `group by - count - having` the only way ? or any other also..."
                    },
                    {
                        "username": "aitachii",
                        "content": "Make sure to exclude duplicates."
                    },
                    {
                        "username": "Amirk692",
                        "content": "solved using self join\\n\\nselect author.author_id as id\\nfrom views as author\\njoin views as viewer on author.author_id = viewer.viewer_id\\ngroup by author.author_id\\norder by author.author_id"
                    },
                    {
                        "username": "safanali604",
                        "content": "select distinct(author_id) as \\'id\\' from views where (article_id,viewer_id) in\\n(select article_id,author_id from views group by article_id) order by author_id asc;"
                    },
                    {
                        "username": "mohamed1237",
                        "content": "select distinct v.author_id as id\\nfrom Views as v\\nwhere v.author_id in (select author_id\\n                    from  Views \\n                     where author_id=viewer_id )\\norder by id;"
                    }
                ]
            },
            {
                "id": 1904944,
                "content": [
                    {
                        "username": "Nidhi96",
                        "content": "select distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by id"
                    },
                    {
                        "username": "ak5683777",
                        "content": "SELECT distinct(author_id) as id from Views where author_id=viewer_id order by author_id; "
                    },
                    {
                        "username": "sumit_111",
                        "content": "Can anybody help me why I am getting Runtime error, even if I write correct code :\\nselect distinct author_id\\nfrom Views\\nwhere author_id = view_id\\norder by author_id;\\n\\n"
                    },
                    {
                        "username": "PawanKumar1",
                        "content": "used viewer_id in place of view_id"
                    },
                    {
                        "username": "Msey",
                        "content": "`truncate table discussion`"
                    },
                    {
                        "username": "Papal0tl",
                        "content": "Can anyone please guide me why I can't use self join here?\n\nSELECT DISTINCT v.author_id AS id\nFROM Views v\nJOIN Views i\n  ON v.author_id = i.viewer_id\nORDER BY id "
                    },
                    {
                        "username": "yanki37",
                        "content": "select author.author_id as id\\nfrom views as author\\njoin views as viewer on author.author_id = viewer.viewer_id\\ngroup by author.author_id\\norder by author.author_id"
                    },
                    {
                        "username": "user7275Aw",
                        "content": "for any generalized `k`,\\ni.e.   \\nWrite an SQL query to find all the authors that viewed `at least k` of their own articles.\\n\\nis `group by - count - having` the only way ? or any other also..."
                    },
                    {
                        "username": "aitachii",
                        "content": "Make sure to exclude duplicates."
                    },
                    {
                        "username": "Amirk692",
                        "content": "solved using self join\\n\\nselect author.author_id as id\\nfrom views as author\\njoin views as viewer on author.author_id = viewer.viewer_id\\ngroup by author.author_id\\norder by author.author_id"
                    },
                    {
                        "username": "safanali604",
                        "content": "select distinct(author_id) as \\'id\\' from views where (article_id,viewer_id) in\\n(select article_id,author_id from views group by article_id) order by author_id asc;"
                    },
                    {
                        "username": "mohamed1237",
                        "content": "select distinct v.author_id as id\\nfrom Views as v\\nwhere v.author_id in (select author_id\\n                    from  Views \\n                     where author_id=viewer_id )\\norder by id;"
                    }
                ]
            },
            {
                "id": 1899929,
                "content": [
                    {
                        "username": "Nidhi96",
                        "content": "select distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by id"
                    },
                    {
                        "username": "ak5683777",
                        "content": "SELECT distinct(author_id) as id from Views where author_id=viewer_id order by author_id; "
                    },
                    {
                        "username": "sumit_111",
                        "content": "Can anybody help me why I am getting Runtime error, even if I write correct code :\\nselect distinct author_id\\nfrom Views\\nwhere author_id = view_id\\norder by author_id;\\n\\n"
                    },
                    {
                        "username": "PawanKumar1",
                        "content": "used viewer_id in place of view_id"
                    },
                    {
                        "username": "Msey",
                        "content": "`truncate table discussion`"
                    },
                    {
                        "username": "Papal0tl",
                        "content": "Can anyone please guide me why I can't use self join here?\n\nSELECT DISTINCT v.author_id AS id\nFROM Views v\nJOIN Views i\n  ON v.author_id = i.viewer_id\nORDER BY id "
                    },
                    {
                        "username": "yanki37",
                        "content": "select author.author_id as id\\nfrom views as author\\njoin views as viewer on author.author_id = viewer.viewer_id\\ngroup by author.author_id\\norder by author.author_id"
                    },
                    {
                        "username": "user7275Aw",
                        "content": "for any generalized `k`,\\ni.e.   \\nWrite an SQL query to find all the authors that viewed `at least k` of their own articles.\\n\\nis `group by - count - having` the only way ? or any other also..."
                    },
                    {
                        "username": "aitachii",
                        "content": "Make sure to exclude duplicates."
                    },
                    {
                        "username": "Amirk692",
                        "content": "solved using self join\\n\\nselect author.author_id as id\\nfrom views as author\\njoin views as viewer on author.author_id = viewer.viewer_id\\ngroup by author.author_id\\norder by author.author_id"
                    },
                    {
                        "username": "safanali604",
                        "content": "select distinct(author_id) as \\'id\\' from views where (article_id,viewer_id) in\\n(select article_id,author_id from views group by article_id) order by author_id asc;"
                    },
                    {
                        "username": "mohamed1237",
                        "content": "select distinct v.author_id as id\\nfrom Views as v\\nwhere v.author_id in (select author_id\\n                    from  Views \\n                     where author_id=viewer_id )\\norder by id;"
                    }
                ]
            },
            {
                "id": 1863436,
                "content": [
                    {
                        "username": "Nidhi96",
                        "content": "select distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by id"
                    },
                    {
                        "username": "ak5683777",
                        "content": "SELECT distinct(author_id) as id from Views where author_id=viewer_id order by author_id; "
                    },
                    {
                        "username": "sumit_111",
                        "content": "Can anybody help me why I am getting Runtime error, even if I write correct code :\\nselect distinct author_id\\nfrom Views\\nwhere author_id = view_id\\norder by author_id;\\n\\n"
                    },
                    {
                        "username": "PawanKumar1",
                        "content": "used viewer_id in place of view_id"
                    },
                    {
                        "username": "Msey",
                        "content": "`truncate table discussion`"
                    },
                    {
                        "username": "Papal0tl",
                        "content": "Can anyone please guide me why I can't use self join here?\n\nSELECT DISTINCT v.author_id AS id\nFROM Views v\nJOIN Views i\n  ON v.author_id = i.viewer_id\nORDER BY id "
                    },
                    {
                        "username": "yanki37",
                        "content": "select author.author_id as id\\nfrom views as author\\njoin views as viewer on author.author_id = viewer.viewer_id\\ngroup by author.author_id\\norder by author.author_id"
                    },
                    {
                        "username": "user7275Aw",
                        "content": "for any generalized `k`,\\ni.e.   \\nWrite an SQL query to find all the authors that viewed `at least k` of their own articles.\\n\\nis `group by - count - having` the only way ? or any other also..."
                    },
                    {
                        "username": "aitachii",
                        "content": "Make sure to exclude duplicates."
                    },
                    {
                        "username": "Amirk692",
                        "content": "solved using self join\\n\\nselect author.author_id as id\\nfrom views as author\\njoin views as viewer on author.author_id = viewer.viewer_id\\ngroup by author.author_id\\norder by author.author_id"
                    },
                    {
                        "username": "safanali604",
                        "content": "select distinct(author_id) as \\'id\\' from views where (article_id,viewer_id) in\\n(select article_id,author_id from views group by article_id) order by author_id asc;"
                    },
                    {
                        "username": "mohamed1237",
                        "content": "select distinct v.author_id as id\\nfrom Views as v\\nwhere v.author_id in (select author_id\\n                    from  Views \\n                     where author_id=viewer_id )\\norder by id;"
                    }
                ]
            },
            {
                "id": 1849047,
                "content": [
                    {
                        "username": "Nidhi96",
                        "content": "select distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by id"
                    },
                    {
                        "username": "ak5683777",
                        "content": "SELECT distinct(author_id) as id from Views where author_id=viewer_id order by author_id; "
                    },
                    {
                        "username": "sumit_111",
                        "content": "Can anybody help me why I am getting Runtime error, even if I write correct code :\\nselect distinct author_id\\nfrom Views\\nwhere author_id = view_id\\norder by author_id;\\n\\n"
                    },
                    {
                        "username": "PawanKumar1",
                        "content": "used viewer_id in place of view_id"
                    },
                    {
                        "username": "Msey",
                        "content": "`truncate table discussion`"
                    },
                    {
                        "username": "Papal0tl",
                        "content": "Can anyone please guide me why I can't use self join here?\n\nSELECT DISTINCT v.author_id AS id\nFROM Views v\nJOIN Views i\n  ON v.author_id = i.viewer_id\nORDER BY id "
                    },
                    {
                        "username": "yanki37",
                        "content": "select author.author_id as id\\nfrom views as author\\njoin views as viewer on author.author_id = viewer.viewer_id\\ngroup by author.author_id\\norder by author.author_id"
                    },
                    {
                        "username": "user7275Aw",
                        "content": "for any generalized `k`,\\ni.e.   \\nWrite an SQL query to find all the authors that viewed `at least k` of their own articles.\\n\\nis `group by - count - having` the only way ? or any other also..."
                    },
                    {
                        "username": "aitachii",
                        "content": "Make sure to exclude duplicates."
                    },
                    {
                        "username": "Amirk692",
                        "content": "solved using self join\\n\\nselect author.author_id as id\\nfrom views as author\\njoin views as viewer on author.author_id = viewer.viewer_id\\ngroup by author.author_id\\norder by author.author_id"
                    },
                    {
                        "username": "safanali604",
                        "content": "select distinct(author_id) as \\'id\\' from views where (article_id,viewer_id) in\\n(select article_id,author_id from views group by article_id) order by author_id asc;"
                    },
                    {
                        "username": "mohamed1237",
                        "content": "select distinct v.author_id as id\\nfrom Views as v\\nwhere v.author_id in (select author_id\\n                    from  Views \\n                     where author_id=viewer_id )\\norder by id;"
                    }
                ]
            },
            {
                "id": 1846642,
                "content": [
                    {
                        "username": "Nidhi96",
                        "content": "select distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by id"
                    },
                    {
                        "username": "ak5683777",
                        "content": "SELECT distinct(author_id) as id from Views where author_id=viewer_id order by author_id; "
                    },
                    {
                        "username": "sumit_111",
                        "content": "Can anybody help me why I am getting Runtime error, even if I write correct code :\\nselect distinct author_id\\nfrom Views\\nwhere author_id = view_id\\norder by author_id;\\n\\n"
                    },
                    {
                        "username": "PawanKumar1",
                        "content": "used viewer_id in place of view_id"
                    },
                    {
                        "username": "Msey",
                        "content": "`truncate table discussion`"
                    },
                    {
                        "username": "Papal0tl",
                        "content": "Can anyone please guide me why I can't use self join here?\n\nSELECT DISTINCT v.author_id AS id\nFROM Views v\nJOIN Views i\n  ON v.author_id = i.viewer_id\nORDER BY id "
                    },
                    {
                        "username": "yanki37",
                        "content": "select author.author_id as id\\nfrom views as author\\njoin views as viewer on author.author_id = viewer.viewer_id\\ngroup by author.author_id\\norder by author.author_id"
                    },
                    {
                        "username": "user7275Aw",
                        "content": "for any generalized `k`,\\ni.e.   \\nWrite an SQL query to find all the authors that viewed `at least k` of their own articles.\\n\\nis `group by - count - having` the only way ? or any other also..."
                    },
                    {
                        "username": "aitachii",
                        "content": "Make sure to exclude duplicates."
                    },
                    {
                        "username": "Amirk692",
                        "content": "solved using self join\\n\\nselect author.author_id as id\\nfrom views as author\\njoin views as viewer on author.author_id = viewer.viewer_id\\ngroup by author.author_id\\norder by author.author_id"
                    },
                    {
                        "username": "safanali604",
                        "content": "select distinct(author_id) as \\'id\\' from views where (article_id,viewer_id) in\\n(select article_id,author_id from views group by article_id) order by author_id asc;"
                    },
                    {
                        "username": "mohamed1237",
                        "content": "select distinct v.author_id as id\\nfrom Views as v\\nwhere v.author_id in (select author_id\\n                    from  Views \\n                     where author_id=viewer_id )\\norder by id;"
                    }
                ]
            },
            {
                "id": 1816003,
                "content": [
                    {
                        "username": "anmoltalshi1",
                        "content": "SELECT x.author_id as id \\nFROM ( SELECT V1.article_id, V1.author_id,V1.viewer_id \\n       FROM Views V1, views V2 \\n       WHERE V1.author_id = V2.viewer_id     \\n     )x \\nGROUP BY x.author_id\\nHAVING COUNT(x.author_id) >=1\\nORDER BY x.author_id;"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select Distinct(a.author_id) as \\'id\\' from \\n(select article_id,author_id from views) a,(\\nselect article_id,viewer_id from views) b where a.article_id=b.article_id and a.author_id=b.viewer_id;"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "whats wrong in my query\\n\\n\\n\\nWITH CTE AS(\\n    SELECT author_id ,viewer_id,\\n    CASE when author_id=viewer_id THEN author_id end AS id\\n    FROM Views)\\n\\nSELECT id from CTE  group by author_id ,viewer_id order by id ;"
                    },
                    {
                        "username": "indra3369",
                        "content": "here the CTE contains two column. So you are not specifically mentioning which column to select.\\ngrouping by both author_id and viewer_id, will result in multiple rows for the same author_id if there are multiple viewer_id values for that author_id.\\nyou can use Disntinct author_id in CTE statement"
                    },
                    {
                        "username": "indra3369",
                        "content": "you cannot directly specify CTE, Use (select viewer_id from CTE). This will resolve the error"
                    },
                    {
                        "username": "user9571mM",
                        "content": "with cte long but i wanted to see other ways of solving it\\nWITH CTE AS (\\n    SELECT a.author_id, v.viewer_id from views a\\n    INNER JOIN views v ON a.author_id=v.viewer_id\\n    group by a.author_id\\n)\\nselect cte.author_id as ID from CTE \\norder by cte.author_id ASC;"
                    },
                    {
                        "username": "sourabhgarai_98",
                        "content": "select distinct(author_id) as id from Views where author_id in viewer_id order by id;"
                    },
                    {
                        "username": "Say_saurabh",
                        "content": "Achieve better execution time via CTE-\\n\\nWITH CTE AS (SELECT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID = VIEWER_ID)\\nSELECT DISTINCT ID FROM CTE ORDER BY 1\\n\\nPlease upvote if you found this hepful."
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT DISTINCT author_id AS id \\nFROM Views\\nWHERE author_id=viewer_id\\norder by author_id"
                    },
                    {
                        "username": "Jhanvi_chaudhary",
                        "content": "SELECT  author_id AS id \\nFROM Views\\nWHERE author_id=viewer_id \\nGROUP BY author_id \\nORDER BY  author_id;"
                    },
                    {
                        "username": "syntaxoo",
                        "content": " `SELECT distinct v.author_id as id\nFROM (\n        SELECT *\n        FROM Views\n    )v\nINNER JOIN\n    (\n        SELECT *\n        FROM Views\n    )v2\nON (v.article_id + v.author_id + v.viewer_id + v.view_date) =  (v2.article_id + v2.author_id + v2.viewer_id + v2.view_date)\nWHERE ((v.article_id + v.author_id) = (v2.article_id + v2.viewer_id)) and (v.author_id = v2.author_id)\nORDER BY id asc`"
                    },
                    {
                        "username": "lifesonrubik",
                        "content": "Just wanted to point out that query\\'s with the Distinct method runs faster in leetcode vs a group by, that shouldn\\'t be the case. As for my understanding, a group by should perform faster than a Distinct."
                    }
                ]
            },
            {
                "id": 1785292,
                "content": [
                    {
                        "username": "anmoltalshi1",
                        "content": "SELECT x.author_id as id \\nFROM ( SELECT V1.article_id, V1.author_id,V1.viewer_id \\n       FROM Views V1, views V2 \\n       WHERE V1.author_id = V2.viewer_id     \\n     )x \\nGROUP BY x.author_id\\nHAVING COUNT(x.author_id) >=1\\nORDER BY x.author_id;"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select Distinct(a.author_id) as \\'id\\' from \\n(select article_id,author_id from views) a,(\\nselect article_id,viewer_id from views) b where a.article_id=b.article_id and a.author_id=b.viewer_id;"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "whats wrong in my query\\n\\n\\n\\nWITH CTE AS(\\n    SELECT author_id ,viewer_id,\\n    CASE when author_id=viewer_id THEN author_id end AS id\\n    FROM Views)\\n\\nSELECT id from CTE  group by author_id ,viewer_id order by id ;"
                    },
                    {
                        "username": "indra3369",
                        "content": "here the CTE contains two column. So you are not specifically mentioning which column to select.\\ngrouping by both author_id and viewer_id, will result in multiple rows for the same author_id if there are multiple viewer_id values for that author_id.\\nyou can use Disntinct author_id in CTE statement"
                    },
                    {
                        "username": "indra3369",
                        "content": "you cannot directly specify CTE, Use (select viewer_id from CTE). This will resolve the error"
                    },
                    {
                        "username": "user9571mM",
                        "content": "with cte long but i wanted to see other ways of solving it\\nWITH CTE AS (\\n    SELECT a.author_id, v.viewer_id from views a\\n    INNER JOIN views v ON a.author_id=v.viewer_id\\n    group by a.author_id\\n)\\nselect cte.author_id as ID from CTE \\norder by cte.author_id ASC;"
                    },
                    {
                        "username": "sourabhgarai_98",
                        "content": "select distinct(author_id) as id from Views where author_id in viewer_id order by id;"
                    },
                    {
                        "username": "Say_saurabh",
                        "content": "Achieve better execution time via CTE-\\n\\nWITH CTE AS (SELECT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID = VIEWER_ID)\\nSELECT DISTINCT ID FROM CTE ORDER BY 1\\n\\nPlease upvote if you found this hepful."
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT DISTINCT author_id AS id \\nFROM Views\\nWHERE author_id=viewer_id\\norder by author_id"
                    },
                    {
                        "username": "Jhanvi_chaudhary",
                        "content": "SELECT  author_id AS id \\nFROM Views\\nWHERE author_id=viewer_id \\nGROUP BY author_id \\nORDER BY  author_id;"
                    },
                    {
                        "username": "syntaxoo",
                        "content": " `SELECT distinct v.author_id as id\nFROM (\n        SELECT *\n        FROM Views\n    )v\nINNER JOIN\n    (\n        SELECT *\n        FROM Views\n    )v2\nON (v.article_id + v.author_id + v.viewer_id + v.view_date) =  (v2.article_id + v2.author_id + v2.viewer_id + v2.view_date)\nWHERE ((v.article_id + v.author_id) = (v2.article_id + v2.viewer_id)) and (v.author_id = v2.author_id)\nORDER BY id asc`"
                    },
                    {
                        "username": "lifesonrubik",
                        "content": "Just wanted to point out that query\\'s with the Distinct method runs faster in leetcode vs a group by, that shouldn\\'t be the case. As for my understanding, a group by should perform faster than a Distinct."
                    }
                ]
            },
            {
                "id": 1764371,
                "content": [
                    {
                        "username": "anmoltalshi1",
                        "content": "SELECT x.author_id as id \\nFROM ( SELECT V1.article_id, V1.author_id,V1.viewer_id \\n       FROM Views V1, views V2 \\n       WHERE V1.author_id = V2.viewer_id     \\n     )x \\nGROUP BY x.author_id\\nHAVING COUNT(x.author_id) >=1\\nORDER BY x.author_id;"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select Distinct(a.author_id) as \\'id\\' from \\n(select article_id,author_id from views) a,(\\nselect article_id,viewer_id from views) b where a.article_id=b.article_id and a.author_id=b.viewer_id;"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "whats wrong in my query\\n\\n\\n\\nWITH CTE AS(\\n    SELECT author_id ,viewer_id,\\n    CASE when author_id=viewer_id THEN author_id end AS id\\n    FROM Views)\\n\\nSELECT id from CTE  group by author_id ,viewer_id order by id ;"
                    },
                    {
                        "username": "indra3369",
                        "content": "here the CTE contains two column. So you are not specifically mentioning which column to select.\\ngrouping by both author_id and viewer_id, will result in multiple rows for the same author_id if there are multiple viewer_id values for that author_id.\\nyou can use Disntinct author_id in CTE statement"
                    },
                    {
                        "username": "indra3369",
                        "content": "you cannot directly specify CTE, Use (select viewer_id from CTE). This will resolve the error"
                    },
                    {
                        "username": "user9571mM",
                        "content": "with cte long but i wanted to see other ways of solving it\\nWITH CTE AS (\\n    SELECT a.author_id, v.viewer_id from views a\\n    INNER JOIN views v ON a.author_id=v.viewer_id\\n    group by a.author_id\\n)\\nselect cte.author_id as ID from CTE \\norder by cte.author_id ASC;"
                    },
                    {
                        "username": "sourabhgarai_98",
                        "content": "select distinct(author_id) as id from Views where author_id in viewer_id order by id;"
                    },
                    {
                        "username": "Say_saurabh",
                        "content": "Achieve better execution time via CTE-\\n\\nWITH CTE AS (SELECT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID = VIEWER_ID)\\nSELECT DISTINCT ID FROM CTE ORDER BY 1\\n\\nPlease upvote if you found this hepful."
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT DISTINCT author_id AS id \\nFROM Views\\nWHERE author_id=viewer_id\\norder by author_id"
                    },
                    {
                        "username": "Jhanvi_chaudhary",
                        "content": "SELECT  author_id AS id \\nFROM Views\\nWHERE author_id=viewer_id \\nGROUP BY author_id \\nORDER BY  author_id;"
                    },
                    {
                        "username": "syntaxoo",
                        "content": " `SELECT distinct v.author_id as id\nFROM (\n        SELECT *\n        FROM Views\n    )v\nINNER JOIN\n    (\n        SELECT *\n        FROM Views\n    )v2\nON (v.article_id + v.author_id + v.viewer_id + v.view_date) =  (v2.article_id + v2.author_id + v2.viewer_id + v2.view_date)\nWHERE ((v.article_id + v.author_id) = (v2.article_id + v2.viewer_id)) and (v.author_id = v2.author_id)\nORDER BY id asc`"
                    },
                    {
                        "username": "lifesonrubik",
                        "content": "Just wanted to point out that query\\'s with the Distinct method runs faster in leetcode vs a group by, that shouldn\\'t be the case. As for my understanding, a group by should perform faster than a Distinct."
                    }
                ]
            },
            {
                "id": 1760744,
                "content": [
                    {
                        "username": "anmoltalshi1",
                        "content": "SELECT x.author_id as id \\nFROM ( SELECT V1.article_id, V1.author_id,V1.viewer_id \\n       FROM Views V1, views V2 \\n       WHERE V1.author_id = V2.viewer_id     \\n     )x \\nGROUP BY x.author_id\\nHAVING COUNT(x.author_id) >=1\\nORDER BY x.author_id;"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select Distinct(a.author_id) as \\'id\\' from \\n(select article_id,author_id from views) a,(\\nselect article_id,viewer_id from views) b where a.article_id=b.article_id and a.author_id=b.viewer_id;"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "whats wrong in my query\\n\\n\\n\\nWITH CTE AS(\\n    SELECT author_id ,viewer_id,\\n    CASE when author_id=viewer_id THEN author_id end AS id\\n    FROM Views)\\n\\nSELECT id from CTE  group by author_id ,viewer_id order by id ;"
                    },
                    {
                        "username": "indra3369",
                        "content": "here the CTE contains two column. So you are not specifically mentioning which column to select.\\ngrouping by both author_id and viewer_id, will result in multiple rows for the same author_id if there are multiple viewer_id values for that author_id.\\nyou can use Disntinct author_id in CTE statement"
                    },
                    {
                        "username": "indra3369",
                        "content": "you cannot directly specify CTE, Use (select viewer_id from CTE). This will resolve the error"
                    },
                    {
                        "username": "user9571mM",
                        "content": "with cte long but i wanted to see other ways of solving it\\nWITH CTE AS (\\n    SELECT a.author_id, v.viewer_id from views a\\n    INNER JOIN views v ON a.author_id=v.viewer_id\\n    group by a.author_id\\n)\\nselect cte.author_id as ID from CTE \\norder by cte.author_id ASC;"
                    },
                    {
                        "username": "sourabhgarai_98",
                        "content": "select distinct(author_id) as id from Views where author_id in viewer_id order by id;"
                    },
                    {
                        "username": "Say_saurabh",
                        "content": "Achieve better execution time via CTE-\\n\\nWITH CTE AS (SELECT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID = VIEWER_ID)\\nSELECT DISTINCT ID FROM CTE ORDER BY 1\\n\\nPlease upvote if you found this hepful."
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT DISTINCT author_id AS id \\nFROM Views\\nWHERE author_id=viewer_id\\norder by author_id"
                    },
                    {
                        "username": "Jhanvi_chaudhary",
                        "content": "SELECT  author_id AS id \\nFROM Views\\nWHERE author_id=viewer_id \\nGROUP BY author_id \\nORDER BY  author_id;"
                    },
                    {
                        "username": "syntaxoo",
                        "content": " `SELECT distinct v.author_id as id\nFROM (\n        SELECT *\n        FROM Views\n    )v\nINNER JOIN\n    (\n        SELECT *\n        FROM Views\n    )v2\nON (v.article_id + v.author_id + v.viewer_id + v.view_date) =  (v2.article_id + v2.author_id + v2.viewer_id + v2.view_date)\nWHERE ((v.article_id + v.author_id) = (v2.article_id + v2.viewer_id)) and (v.author_id = v2.author_id)\nORDER BY id asc`"
                    },
                    {
                        "username": "lifesonrubik",
                        "content": "Just wanted to point out that query\\'s with the Distinct method runs faster in leetcode vs a group by, that shouldn\\'t be the case. As for my understanding, a group by should perform faster than a Distinct."
                    }
                ]
            },
            {
                "id": 1752366,
                "content": [
                    {
                        "username": "anmoltalshi1",
                        "content": "SELECT x.author_id as id \\nFROM ( SELECT V1.article_id, V1.author_id,V1.viewer_id \\n       FROM Views V1, views V2 \\n       WHERE V1.author_id = V2.viewer_id     \\n     )x \\nGROUP BY x.author_id\\nHAVING COUNT(x.author_id) >=1\\nORDER BY x.author_id;"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select Distinct(a.author_id) as \\'id\\' from \\n(select article_id,author_id from views) a,(\\nselect article_id,viewer_id from views) b where a.article_id=b.article_id and a.author_id=b.viewer_id;"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "whats wrong in my query\\n\\n\\n\\nWITH CTE AS(\\n    SELECT author_id ,viewer_id,\\n    CASE when author_id=viewer_id THEN author_id end AS id\\n    FROM Views)\\n\\nSELECT id from CTE  group by author_id ,viewer_id order by id ;"
                    },
                    {
                        "username": "indra3369",
                        "content": "here the CTE contains two column. So you are not specifically mentioning which column to select.\\ngrouping by both author_id and viewer_id, will result in multiple rows for the same author_id if there are multiple viewer_id values for that author_id.\\nyou can use Disntinct author_id in CTE statement"
                    },
                    {
                        "username": "indra3369",
                        "content": "you cannot directly specify CTE, Use (select viewer_id from CTE). This will resolve the error"
                    },
                    {
                        "username": "user9571mM",
                        "content": "with cte long but i wanted to see other ways of solving it\\nWITH CTE AS (\\n    SELECT a.author_id, v.viewer_id from views a\\n    INNER JOIN views v ON a.author_id=v.viewer_id\\n    group by a.author_id\\n)\\nselect cte.author_id as ID from CTE \\norder by cte.author_id ASC;"
                    },
                    {
                        "username": "sourabhgarai_98",
                        "content": "select distinct(author_id) as id from Views where author_id in viewer_id order by id;"
                    },
                    {
                        "username": "Say_saurabh",
                        "content": "Achieve better execution time via CTE-\\n\\nWITH CTE AS (SELECT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID = VIEWER_ID)\\nSELECT DISTINCT ID FROM CTE ORDER BY 1\\n\\nPlease upvote if you found this hepful."
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT DISTINCT author_id AS id \\nFROM Views\\nWHERE author_id=viewer_id\\norder by author_id"
                    },
                    {
                        "username": "Jhanvi_chaudhary",
                        "content": "SELECT  author_id AS id \\nFROM Views\\nWHERE author_id=viewer_id \\nGROUP BY author_id \\nORDER BY  author_id;"
                    },
                    {
                        "username": "syntaxoo",
                        "content": " `SELECT distinct v.author_id as id\nFROM (\n        SELECT *\n        FROM Views\n    )v\nINNER JOIN\n    (\n        SELECT *\n        FROM Views\n    )v2\nON (v.article_id + v.author_id + v.viewer_id + v.view_date) =  (v2.article_id + v2.author_id + v2.viewer_id + v2.view_date)\nWHERE ((v.article_id + v.author_id) = (v2.article_id + v2.viewer_id)) and (v.author_id = v2.author_id)\nORDER BY id asc`"
                    },
                    {
                        "username": "lifesonrubik",
                        "content": "Just wanted to point out that query\\'s with the Distinct method runs faster in leetcode vs a group by, that shouldn\\'t be the case. As for my understanding, a group by should perform faster than a Distinct."
                    }
                ]
            },
            {
                "id": 1752356,
                "content": [
                    {
                        "username": "anmoltalshi1",
                        "content": "SELECT x.author_id as id \\nFROM ( SELECT V1.article_id, V1.author_id,V1.viewer_id \\n       FROM Views V1, views V2 \\n       WHERE V1.author_id = V2.viewer_id     \\n     )x \\nGROUP BY x.author_id\\nHAVING COUNT(x.author_id) >=1\\nORDER BY x.author_id;"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select Distinct(a.author_id) as \\'id\\' from \\n(select article_id,author_id from views) a,(\\nselect article_id,viewer_id from views) b where a.article_id=b.article_id and a.author_id=b.viewer_id;"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "whats wrong in my query\\n\\n\\n\\nWITH CTE AS(\\n    SELECT author_id ,viewer_id,\\n    CASE when author_id=viewer_id THEN author_id end AS id\\n    FROM Views)\\n\\nSELECT id from CTE  group by author_id ,viewer_id order by id ;"
                    },
                    {
                        "username": "indra3369",
                        "content": "here the CTE contains two column. So you are not specifically mentioning which column to select.\\ngrouping by both author_id and viewer_id, will result in multiple rows for the same author_id if there are multiple viewer_id values for that author_id.\\nyou can use Disntinct author_id in CTE statement"
                    },
                    {
                        "username": "indra3369",
                        "content": "you cannot directly specify CTE, Use (select viewer_id from CTE). This will resolve the error"
                    },
                    {
                        "username": "user9571mM",
                        "content": "with cte long but i wanted to see other ways of solving it\\nWITH CTE AS (\\n    SELECT a.author_id, v.viewer_id from views a\\n    INNER JOIN views v ON a.author_id=v.viewer_id\\n    group by a.author_id\\n)\\nselect cte.author_id as ID from CTE \\norder by cte.author_id ASC;"
                    },
                    {
                        "username": "sourabhgarai_98",
                        "content": "select distinct(author_id) as id from Views where author_id in viewer_id order by id;"
                    },
                    {
                        "username": "Say_saurabh",
                        "content": "Achieve better execution time via CTE-\\n\\nWITH CTE AS (SELECT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID = VIEWER_ID)\\nSELECT DISTINCT ID FROM CTE ORDER BY 1\\n\\nPlease upvote if you found this hepful."
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT DISTINCT author_id AS id \\nFROM Views\\nWHERE author_id=viewer_id\\norder by author_id"
                    },
                    {
                        "username": "Jhanvi_chaudhary",
                        "content": "SELECT  author_id AS id \\nFROM Views\\nWHERE author_id=viewer_id \\nGROUP BY author_id \\nORDER BY  author_id;"
                    },
                    {
                        "username": "syntaxoo",
                        "content": " `SELECT distinct v.author_id as id\nFROM (\n        SELECT *\n        FROM Views\n    )v\nINNER JOIN\n    (\n        SELECT *\n        FROM Views\n    )v2\nON (v.article_id + v.author_id + v.viewer_id + v.view_date) =  (v2.article_id + v2.author_id + v2.viewer_id + v2.view_date)\nWHERE ((v.article_id + v.author_id) = (v2.article_id + v2.viewer_id)) and (v.author_id = v2.author_id)\nORDER BY id asc`"
                    },
                    {
                        "username": "lifesonrubik",
                        "content": "Just wanted to point out that query\\'s with the Distinct method runs faster in leetcode vs a group by, that shouldn\\'t be the case. As for my understanding, a group by should perform faster than a Distinct."
                    }
                ]
            },
            {
                "id": 1745303,
                "content": [
                    {
                        "username": "anmoltalshi1",
                        "content": "SELECT x.author_id as id \\nFROM ( SELECT V1.article_id, V1.author_id,V1.viewer_id \\n       FROM Views V1, views V2 \\n       WHERE V1.author_id = V2.viewer_id     \\n     )x \\nGROUP BY x.author_id\\nHAVING COUNT(x.author_id) >=1\\nORDER BY x.author_id;"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select Distinct(a.author_id) as \\'id\\' from \\n(select article_id,author_id from views) a,(\\nselect article_id,viewer_id from views) b where a.article_id=b.article_id and a.author_id=b.viewer_id;"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "whats wrong in my query\\n\\n\\n\\nWITH CTE AS(\\n    SELECT author_id ,viewer_id,\\n    CASE when author_id=viewer_id THEN author_id end AS id\\n    FROM Views)\\n\\nSELECT id from CTE  group by author_id ,viewer_id order by id ;"
                    },
                    {
                        "username": "indra3369",
                        "content": "here the CTE contains two column. So you are not specifically mentioning which column to select.\\ngrouping by both author_id and viewer_id, will result in multiple rows for the same author_id if there are multiple viewer_id values for that author_id.\\nyou can use Disntinct author_id in CTE statement"
                    },
                    {
                        "username": "indra3369",
                        "content": "you cannot directly specify CTE, Use (select viewer_id from CTE). This will resolve the error"
                    },
                    {
                        "username": "user9571mM",
                        "content": "with cte long but i wanted to see other ways of solving it\\nWITH CTE AS (\\n    SELECT a.author_id, v.viewer_id from views a\\n    INNER JOIN views v ON a.author_id=v.viewer_id\\n    group by a.author_id\\n)\\nselect cte.author_id as ID from CTE \\norder by cte.author_id ASC;"
                    },
                    {
                        "username": "sourabhgarai_98",
                        "content": "select distinct(author_id) as id from Views where author_id in viewer_id order by id;"
                    },
                    {
                        "username": "Say_saurabh",
                        "content": "Achieve better execution time via CTE-\\n\\nWITH CTE AS (SELECT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID = VIEWER_ID)\\nSELECT DISTINCT ID FROM CTE ORDER BY 1\\n\\nPlease upvote if you found this hepful."
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT DISTINCT author_id AS id \\nFROM Views\\nWHERE author_id=viewer_id\\norder by author_id"
                    },
                    {
                        "username": "Jhanvi_chaudhary",
                        "content": "SELECT  author_id AS id \\nFROM Views\\nWHERE author_id=viewer_id \\nGROUP BY author_id \\nORDER BY  author_id;"
                    },
                    {
                        "username": "syntaxoo",
                        "content": " `SELECT distinct v.author_id as id\nFROM (\n        SELECT *\n        FROM Views\n    )v\nINNER JOIN\n    (\n        SELECT *\n        FROM Views\n    )v2\nON (v.article_id + v.author_id + v.viewer_id + v.view_date) =  (v2.article_id + v2.author_id + v2.viewer_id + v2.view_date)\nWHERE ((v.article_id + v.author_id) = (v2.article_id + v2.viewer_id)) and (v.author_id = v2.author_id)\nORDER BY id asc`"
                    },
                    {
                        "username": "lifesonrubik",
                        "content": "Just wanted to point out that query\\'s with the Distinct method runs faster in leetcode vs a group by, that shouldn\\'t be the case. As for my understanding, a group by should perform faster than a Distinct."
                    }
                ]
            },
            {
                "id": 1744520,
                "content": [
                    {
                        "username": "anmoltalshi1",
                        "content": "SELECT x.author_id as id \\nFROM ( SELECT V1.article_id, V1.author_id,V1.viewer_id \\n       FROM Views V1, views V2 \\n       WHERE V1.author_id = V2.viewer_id     \\n     )x \\nGROUP BY x.author_id\\nHAVING COUNT(x.author_id) >=1\\nORDER BY x.author_id;"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select Distinct(a.author_id) as \\'id\\' from \\n(select article_id,author_id from views) a,(\\nselect article_id,viewer_id from views) b where a.article_id=b.article_id and a.author_id=b.viewer_id;"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "whats wrong in my query\\n\\n\\n\\nWITH CTE AS(\\n    SELECT author_id ,viewer_id,\\n    CASE when author_id=viewer_id THEN author_id end AS id\\n    FROM Views)\\n\\nSELECT id from CTE  group by author_id ,viewer_id order by id ;"
                    },
                    {
                        "username": "indra3369",
                        "content": "here the CTE contains two column. So you are not specifically mentioning which column to select.\\ngrouping by both author_id and viewer_id, will result in multiple rows for the same author_id if there are multiple viewer_id values for that author_id.\\nyou can use Disntinct author_id in CTE statement"
                    },
                    {
                        "username": "indra3369",
                        "content": "you cannot directly specify CTE, Use (select viewer_id from CTE). This will resolve the error"
                    },
                    {
                        "username": "user9571mM",
                        "content": "with cte long but i wanted to see other ways of solving it\\nWITH CTE AS (\\n    SELECT a.author_id, v.viewer_id from views a\\n    INNER JOIN views v ON a.author_id=v.viewer_id\\n    group by a.author_id\\n)\\nselect cte.author_id as ID from CTE \\norder by cte.author_id ASC;"
                    },
                    {
                        "username": "sourabhgarai_98",
                        "content": "select distinct(author_id) as id from Views where author_id in viewer_id order by id;"
                    },
                    {
                        "username": "Say_saurabh",
                        "content": "Achieve better execution time via CTE-\\n\\nWITH CTE AS (SELECT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID = VIEWER_ID)\\nSELECT DISTINCT ID FROM CTE ORDER BY 1\\n\\nPlease upvote if you found this hepful."
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT DISTINCT author_id AS id \\nFROM Views\\nWHERE author_id=viewer_id\\norder by author_id"
                    },
                    {
                        "username": "Jhanvi_chaudhary",
                        "content": "SELECT  author_id AS id \\nFROM Views\\nWHERE author_id=viewer_id \\nGROUP BY author_id \\nORDER BY  author_id;"
                    },
                    {
                        "username": "syntaxoo",
                        "content": " `SELECT distinct v.author_id as id\nFROM (\n        SELECT *\n        FROM Views\n    )v\nINNER JOIN\n    (\n        SELECT *\n        FROM Views\n    )v2\nON (v.article_id + v.author_id + v.viewer_id + v.view_date) =  (v2.article_id + v2.author_id + v2.viewer_id + v2.view_date)\nWHERE ((v.article_id + v.author_id) = (v2.article_id + v2.viewer_id)) and (v.author_id = v2.author_id)\nORDER BY id asc`"
                    },
                    {
                        "username": "lifesonrubik",
                        "content": "Just wanted to point out that query\\'s with the Distinct method runs faster in leetcode vs a group by, that shouldn\\'t be the case. As for my understanding, a group by should perform faster than a Distinct."
                    }
                ]
            },
            {
                "id": 1730832,
                "content": [
                    {
                        "username": "anmoltalshi1",
                        "content": "SELECT x.author_id as id \\nFROM ( SELECT V1.article_id, V1.author_id,V1.viewer_id \\n       FROM Views V1, views V2 \\n       WHERE V1.author_id = V2.viewer_id     \\n     )x \\nGROUP BY x.author_id\\nHAVING COUNT(x.author_id) >=1\\nORDER BY x.author_id;"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select Distinct(a.author_id) as \\'id\\' from \\n(select article_id,author_id from views) a,(\\nselect article_id,viewer_id from views) b where a.article_id=b.article_id and a.author_id=b.viewer_id;"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "whats wrong in my query\\n\\n\\n\\nWITH CTE AS(\\n    SELECT author_id ,viewer_id,\\n    CASE when author_id=viewer_id THEN author_id end AS id\\n    FROM Views)\\n\\nSELECT id from CTE  group by author_id ,viewer_id order by id ;"
                    },
                    {
                        "username": "indra3369",
                        "content": "here the CTE contains two column. So you are not specifically mentioning which column to select.\\ngrouping by both author_id and viewer_id, will result in multiple rows for the same author_id if there are multiple viewer_id values for that author_id.\\nyou can use Disntinct author_id in CTE statement"
                    },
                    {
                        "username": "indra3369",
                        "content": "you cannot directly specify CTE, Use (select viewer_id from CTE). This will resolve the error"
                    },
                    {
                        "username": "user9571mM",
                        "content": "with cte long but i wanted to see other ways of solving it\\nWITH CTE AS (\\n    SELECT a.author_id, v.viewer_id from views a\\n    INNER JOIN views v ON a.author_id=v.viewer_id\\n    group by a.author_id\\n)\\nselect cte.author_id as ID from CTE \\norder by cte.author_id ASC;"
                    },
                    {
                        "username": "sourabhgarai_98",
                        "content": "select distinct(author_id) as id from Views where author_id in viewer_id order by id;"
                    },
                    {
                        "username": "Say_saurabh",
                        "content": "Achieve better execution time via CTE-\\n\\nWITH CTE AS (SELECT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID = VIEWER_ID)\\nSELECT DISTINCT ID FROM CTE ORDER BY 1\\n\\nPlease upvote if you found this hepful."
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT DISTINCT author_id AS id \\nFROM Views\\nWHERE author_id=viewer_id\\norder by author_id"
                    },
                    {
                        "username": "Jhanvi_chaudhary",
                        "content": "SELECT  author_id AS id \\nFROM Views\\nWHERE author_id=viewer_id \\nGROUP BY author_id \\nORDER BY  author_id;"
                    },
                    {
                        "username": "syntaxoo",
                        "content": " `SELECT distinct v.author_id as id\nFROM (\n        SELECT *\n        FROM Views\n    )v\nINNER JOIN\n    (\n        SELECT *\n        FROM Views\n    )v2\nON (v.article_id + v.author_id + v.viewer_id + v.view_date) =  (v2.article_id + v2.author_id + v2.viewer_id + v2.view_date)\nWHERE ((v.article_id + v.author_id) = (v2.article_id + v2.viewer_id)) and (v.author_id = v2.author_id)\nORDER BY id asc`"
                    },
                    {
                        "username": "lifesonrubik",
                        "content": "Just wanted to point out that query\\'s with the Distinct method runs faster in leetcode vs a group by, that shouldn\\'t be the case. As for my understanding, a group by should perform faster than a Distinct."
                    }
                ]
            },
            {
                "id": 1729543,
                "content": [
                    {
                        "username": "anmoltalshi1",
                        "content": "SELECT x.author_id as id \\nFROM ( SELECT V1.article_id, V1.author_id,V1.viewer_id \\n       FROM Views V1, views V2 \\n       WHERE V1.author_id = V2.viewer_id     \\n     )x \\nGROUP BY x.author_id\\nHAVING COUNT(x.author_id) >=1\\nORDER BY x.author_id;"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select Distinct(a.author_id) as \\'id\\' from \\n(select article_id,author_id from views) a,(\\nselect article_id,viewer_id from views) b where a.article_id=b.article_id and a.author_id=b.viewer_id;"
                    },
                    {
                        "username": "Preksha_Sharma",
                        "content": "whats wrong in my query\\n\\n\\n\\nWITH CTE AS(\\n    SELECT author_id ,viewer_id,\\n    CASE when author_id=viewer_id THEN author_id end AS id\\n    FROM Views)\\n\\nSELECT id from CTE  group by author_id ,viewer_id order by id ;"
                    },
                    {
                        "username": "indra3369",
                        "content": "here the CTE contains two column. So you are not specifically mentioning which column to select.\\ngrouping by both author_id and viewer_id, will result in multiple rows for the same author_id if there are multiple viewer_id values for that author_id.\\nyou can use Disntinct author_id in CTE statement"
                    },
                    {
                        "username": "indra3369",
                        "content": "you cannot directly specify CTE, Use (select viewer_id from CTE). This will resolve the error"
                    },
                    {
                        "username": "user9571mM",
                        "content": "with cte long but i wanted to see other ways of solving it\\nWITH CTE AS (\\n    SELECT a.author_id, v.viewer_id from views a\\n    INNER JOIN views v ON a.author_id=v.viewer_id\\n    group by a.author_id\\n)\\nselect cte.author_id as ID from CTE \\norder by cte.author_id ASC;"
                    },
                    {
                        "username": "sourabhgarai_98",
                        "content": "select distinct(author_id) as id from Views where author_id in viewer_id order by id;"
                    },
                    {
                        "username": "Say_saurabh",
                        "content": "Achieve better execution time via CTE-\\n\\nWITH CTE AS (SELECT AUTHOR_ID AS ID FROM VIEWS WHERE AUTHOR_ID = VIEWER_ID)\\nSELECT DISTINCT ID FROM CTE ORDER BY 1\\n\\nPlease upvote if you found this hepful."
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "SELECT DISTINCT author_id AS id \\nFROM Views\\nWHERE author_id=viewer_id\\norder by author_id"
                    },
                    {
                        "username": "Jhanvi_chaudhary",
                        "content": "SELECT  author_id AS id \\nFROM Views\\nWHERE author_id=viewer_id \\nGROUP BY author_id \\nORDER BY  author_id;"
                    },
                    {
                        "username": "syntaxoo",
                        "content": " `SELECT distinct v.author_id as id\nFROM (\n        SELECT *\n        FROM Views\n    )v\nINNER JOIN\n    (\n        SELECT *\n        FROM Views\n    )v2\nON (v.article_id + v.author_id + v.viewer_id + v.view_date) =  (v2.article_id + v2.author_id + v2.viewer_id + v2.view_date)\nWHERE ((v.article_id + v.author_id) = (v2.article_id + v2.viewer_id)) and (v.author_id = v2.author_id)\nORDER BY id asc`"
                    },
                    {
                        "username": "lifesonrubik",
                        "content": "Just wanted to point out that query\\'s with the Distinct method runs faster in leetcode vs a group by, that shouldn\\'t be the case. As for my understanding, a group by should perform faster than a Distinct."
                    }
                ]
            }
        ]
    },
    {
        "title": "Article Views II",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1569709,
                "content": [
                    {
                        "username": "Maddy_mok",
                        "content": "\\'\\'\\'\\nSelect distinct viewer_id \"id\"\\nfrom views \\ngroup by view_date, viewer_id\\nhaving count(distinct article_id) > 1\\norder by viewer_id\\n\\'\\'\\'"
                    },
                    {
                        "username": "Manikanta_Komuravelli",
                        "content": "with cte as (select viewer_id, view_date, count(distinct article_id) counts from views\\ngroup by 1,2\\norder by 1)\\n\\nselect distinct viewer_id as id from cte\\nwhere counts >1"
                    },
                    {
                        "username": "xiaoming1994",
                        "content": "\\'\\'\\'\\nselect distinct viewer_id as id\\nfrom Views\\ngroup by viewer_id, view_date\\nhaving count(distinct article_id) > 1\\norder by viewer_id\\n\\'\\'\\'"
                    },
                    {
                        "username": "Silmist",
                        "content": "How am I supposed to be aware of using  DISTINCT ?\\nMy first  submission\\n\\'\\'\\'\\nSELECT viewer_id AS id FROM Views GROUP BY view_date,viewer_id \\nHAVING COUNT(DISTINCT article_id) > 1 ORDER BY id;\\n\\'\\'\\'\\nWrong Answer\\nafter checking the failed test case,I found that  there\\'re two of viewer_id #13 that read more than 1 article but on 2 different dates(these rows are not duplicate rows) so my query returned 13 twice which\\'s kinda reasonable to me because the question says  \" Write an SQL query to find all the people who viewed more than one article on the same date ........\" and it doesn\\'t say anything about selecting only unique ids even though the dates were different."
                    }
                ]
            },
            {
                "id": 1575741,
                "content": [
                    {
                        "username": "Maddy_mok",
                        "content": "\\'\\'\\'\\nSelect distinct viewer_id \"id\"\\nfrom views \\ngroup by view_date, viewer_id\\nhaving count(distinct article_id) > 1\\norder by viewer_id\\n\\'\\'\\'"
                    },
                    {
                        "username": "Manikanta_Komuravelli",
                        "content": "with cte as (select viewer_id, view_date, count(distinct article_id) counts from views\\ngroup by 1,2\\norder by 1)\\n\\nselect distinct viewer_id as id from cte\\nwhere counts >1"
                    },
                    {
                        "username": "xiaoming1994",
                        "content": "\\'\\'\\'\\nselect distinct viewer_id as id\\nfrom Views\\ngroup by viewer_id, view_date\\nhaving count(distinct article_id) > 1\\norder by viewer_id\\n\\'\\'\\'"
                    },
                    {
                        "username": "Silmist",
                        "content": "How am I supposed to be aware of using  DISTINCT ?\\nMy first  submission\\n\\'\\'\\'\\nSELECT viewer_id AS id FROM Views GROUP BY view_date,viewer_id \\nHAVING COUNT(DISTINCT article_id) > 1 ORDER BY id;\\n\\'\\'\\'\\nWrong Answer\\nafter checking the failed test case,I found that  there\\'re two of viewer_id #13 that read more than 1 article but on 2 different dates(these rows are not duplicate rows) so my query returned 13 twice which\\'s kinda reasonable to me because the question says  \" Write an SQL query to find all the people who viewed more than one article on the same date ........\" and it doesn\\'t say anything about selecting only unique ids even though the dates were different."
                    }
                ]
            },
            {
                "id": 1573189,
                "content": [
                    {
                        "username": "Maddy_mok",
                        "content": "\\'\\'\\'\\nSelect distinct viewer_id \"id\"\\nfrom views \\ngroup by view_date, viewer_id\\nhaving count(distinct article_id) > 1\\norder by viewer_id\\n\\'\\'\\'"
                    },
                    {
                        "username": "Manikanta_Komuravelli",
                        "content": "with cte as (select viewer_id, view_date, count(distinct article_id) counts from views\\ngroup by 1,2\\norder by 1)\\n\\nselect distinct viewer_id as id from cte\\nwhere counts >1"
                    },
                    {
                        "username": "xiaoming1994",
                        "content": "\\'\\'\\'\\nselect distinct viewer_id as id\\nfrom Views\\ngroup by viewer_id, view_date\\nhaving count(distinct article_id) > 1\\norder by viewer_id\\n\\'\\'\\'"
                    },
                    {
                        "username": "Silmist",
                        "content": "How am I supposed to be aware of using  DISTINCT ?\\nMy first  submission\\n\\'\\'\\'\\nSELECT viewer_id AS id FROM Views GROUP BY view_date,viewer_id \\nHAVING COUNT(DISTINCT article_id) > 1 ORDER BY id;\\n\\'\\'\\'\\nWrong Answer\\nafter checking the failed test case,I found that  there\\'re two of viewer_id #13 that read more than 1 article but on 2 different dates(these rows are not duplicate rows) so my query returned 13 twice which\\'s kinda reasonable to me because the question says  \" Write an SQL query to find all the people who viewed more than one article on the same date ........\" and it doesn\\'t say anything about selecting only unique ids even though the dates were different."
                    }
                ]
            },
            {
                "id": 1906384,
                "content": [
                    {
                        "username": "Maddy_mok",
                        "content": "\\'\\'\\'\\nSelect distinct viewer_id \"id\"\\nfrom views \\ngroup by view_date, viewer_id\\nhaving count(distinct article_id) > 1\\norder by viewer_id\\n\\'\\'\\'"
                    },
                    {
                        "username": "Manikanta_Komuravelli",
                        "content": "with cte as (select viewer_id, view_date, count(distinct article_id) counts from views\\ngroup by 1,2\\norder by 1)\\n\\nselect distinct viewer_id as id from cte\\nwhere counts >1"
                    },
                    {
                        "username": "xiaoming1994",
                        "content": "\\'\\'\\'\\nselect distinct viewer_id as id\\nfrom Views\\ngroup by viewer_id, view_date\\nhaving count(distinct article_id) > 1\\norder by viewer_id\\n\\'\\'\\'"
                    },
                    {
                        "username": "Silmist",
                        "content": "How am I supposed to be aware of using  DISTINCT ?\\nMy first  submission\\n\\'\\'\\'\\nSELECT viewer_id AS id FROM Views GROUP BY view_date,viewer_id \\nHAVING COUNT(DISTINCT article_id) > 1 ORDER BY id;\\n\\'\\'\\'\\nWrong Answer\\nafter checking the failed test case,I found that  there\\'re two of viewer_id #13 that read more than 1 article but on 2 different dates(these rows are not duplicate rows) so my query returned 13 twice which\\'s kinda reasonable to me because the question says  \" Write an SQL query to find all the people who viewed more than one article on the same date ........\" and it doesn\\'t say anything about selecting only unique ids even though the dates were different."
                    }
                ]
            }
        ]
    }
]