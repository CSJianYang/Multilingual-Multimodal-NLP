[
    {
        "title": "Count Operations to Obtain Zero",
        "question_content": "You are given two non-negative integers num1 and num2.\nIn one operation, if num1 >= num2, you must subtract num2 from num1, otherwise subtract num1 from num2.\n\n\tFor example, if num1 = 5 and num2 = 4, subtract num2 from num1, thus obtaining num1 = 1 and num2 = 4. However, if num1 = 4 and num2 = 5, after one operation, num1 = 4 and num2 = 1.\n\nReturn the number of operations required to make either num1 = 0 or num2 = 0.\n&nbsp;\nExample 1:\n\nInput: num1 = 2, num2 = 3\nOutput: 3\nExplanation: \n- Operation 1: num1 = 2, num2 = 3. Since num1 < num2, we subtract num1 from num2 and get num1 = 2, num2 = 3 - 2 = 1.\n- Operation 2: num1 = 2, num2 = 1. Since num1 > num2, we subtract num2 from num1.\n- Operation 3: num1 = 1, num2 = 1. Since num1 == num2, we subtract num2 from num1.\nNow num1 = 0 and num2 = 1. Since num1 == 0, we do not need to perform any further operations.\nSo the total number of operations required is 3.\n\nExample 2:\n\nInput: num1 = 10, num2 = 10\nOutput: 1\nExplanation: \n- Operation 1: num1 = 10, num2 = 10. Since num1 == num2, we subtract num2 from num1 and get num1 = 10 - 10 = 0.\nNow num1 = 0 and num2 = 10. Since num1 == 0, we are done.\nSo the total number of operations required is 1.\n\n&nbsp;\nConstraints:\n\n\t0 <= num1, num2 <= 105",
        "solutions": [
            {
                "id": 1769387,
                "title": "euclidean-algorithm",
                "content": "We can observe that if `n1 `is `m` times greater than `n2`, we will perform the subtraction `m` times, and after that `n1` would be equal `n1 % n2`.\\n\\nThis is, pretty much, the Euclidean Algorithm. The complexity of this algorithm is O(log(min(a, b)).\\n\\n**Java**\\n```java\\npublic int countOperations(int a, int b) {\\n    return a * b == 0 ? 0 : a / b + countOperations(b, a % b);\\n}\\n```\\n**Python 3**\\n```python\\nclass Solution:\\n    def countOperations(self, a: int, b: int) -> int:\\n        return 0 if a * b == 0 else a // b + self.countOperations(b, a % b)\\n```\\n**C++**\\nIterative, just for fun.\\n```cpp\\nint countOperations(int a, int b) {\\n    int res = 0;\\n    while (min(a, b) > 0) {\\n        if (a > b)\\n            swap(a, b);\\n        res += b / a;\\n        b %= a;\\n    }\\n    return res;\\n}\\n```",
                "solutionTags": [],
                "code": "```java\\npublic int countOperations(int a, int b) {\\n    return a * b == 0 ? 0 : a / b + countOperations(b, a % b);\\n}\\n```\n```python\\nclass Solution:\\n    def countOperations(self, a: int, b: int) -> int:\\n        return 0 if a * b == 0 else a // b + self.countOperations(b, a % b)\\n```\n```cpp\\nint countOperations(int a, int b) {\\n    int res = 0;\\n    while (min(a, b) > 0) {\\n        if (a > b)\\n            swap(a, b);\\n        res += b / a;\\n        b %= a;\\n    }\\n    return res;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1766803,
                "title": "java-python-3-use-divmod-operation-w-explanation-and-analysis",
                "content": "1. Locate the smaller and the bigger from `num1` and `num2`;\\n2. bigger / smaller is the number of operations we need to accumulate; \\n3. bigger % smaller is the new value of the bigger;\\n4. repeat till one becomes `0`.\\n \\n```java\\n    public int countOperations(int num1, int num2) {\\n        int cnt = 0;\\n        while (Math.min(num1, num2) > 0) {\\n            if (num1 < num2) {\\n                int tmp = num1;\\n                num1 = num2;\\n                num2 = tmp;\\n            }\\n            cnt += num1 / num2;\\n            num1 %= num2;\\n        }\\n        return cnt;\\n    }\\n```\\n```python\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        cnt = 0\\n        while min(num1, num2) > 0:\\n            if num1 < num2:\\n                num1, num2 = num2, num1\\n            ops, num1 = divmod(num1, num2)    \\n            cnt += ops\\n        return cnt\\n```\\n**Analysis:**\\n\\nThe time and space complexities are same as that of Euclid algorithm to compute greatest common divisor, gcd(num1, num2), which are `O(log(min(num1, num2)))` and `O(1)`, respectively.\\n\\nTime: `O(log(min(num1, num2)))`, space: `O(1)`.",
                "solutionTags": [],
                "code": "```java\\n    public int countOperations(int num1, int num2) {\\n        int cnt = 0;\\n        while (Math.min(num1, num2) > 0) {\\n            if (num1 < num2) {\\n                int tmp = num1;\\n                num1 = num2;\\n                num2 = tmp;\\n            }\\n            cnt += num1 / num2;\\n            num1 %= num2;\\n        }\\n        return cnt;\\n    }\\n```\n```python\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        cnt = 0\\n        while min(num1, num2) > 0:\\n            if num1 < num2:\\n                num1, num2 = num2, num1\\n            ops, num1 = divmod(num1, num2)    \\n            cnt += ops\\n        return cnt\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1852620,
                "title": "java-beats-100",
                "content": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count=0;\\n        while(num1!=0 && num2!=0){\\n            if(num1<num2){\\n                count+=num2/num1;\\n                num2=num2%num1;\\n            }else{\\n                count+=num1/num2;\\n                num1=num1%num2;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count=0;\\n        while(num1!=0 && num2!=0){\\n            if(num1<num2){\\n                count+=num2/num1;\\n                num2=num2%num1;\\n            }else{\\n                count+=num1/num2;\\n                num1=num1%num2;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1766760,
                "title": "cpp-easy-solution",
                "content": "```\\nint countOperations(int num1, int num2) {\\n        int operation  = 0;                          //to store answer\\n        while(num1 != 0  &&  num2  != 0 )\\n        {\\n            if(num1 >= num2)\\n\\t\\t\\t\\t\\t num1-=num2;         // As given in question we will decreasw the num1\\n            else{\\n                num2-=num1;         // As given in question we will decreasw the num2\\n            }\\n            operation++;                       //Increase operation\\n        }\\n        return operation;\\n    }\\n\\t\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nint countOperations(int num1, int num2) {\\n        int operation  = 0;                          //to store answer\\n        while(num1 != 0  &&  num2  != 0 )\\n        {\\n            if(num1 >= num2)\\n\\t\\t\\t\\t\\t num1-=num2;         // As given in question we will decreasw the num1\\n            else{\\n                num2-=num1;         // As given in question we will decreasw the num2\\n            }\\n            operation++;                       //Increase operation\\n        }\\n        return operation;\\n    }\\n\\t\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3155096,
                "title": "python-easy-solution",
                "content": "# Code\\u2705\\n```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        count = 0\\n        while num1 != 0 and num2 != 0:\\n            if num1 >= num2:\\n                num1 -= num2\\n            else:\\n                num2 -= num1\\n            count +=1\\n        return count\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        count = 0\\n        while num1 != 0 and num2 != 0:\\n            if num1 >= num2:\\n                num1 -= num2\\n            else:\\n                num2 -= num1\\n            count +=1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3014124,
                "title": "java-easy-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int ans = 0;\\n        while (num1 != 0 && num2 != 0) {\\n            if (num1 >= num2) {\\n                num1 -= num2;\\n            } else {\\n                num2 -= num1;\\n            }\\n            ++ans;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int ans = 0;\\n        while (num1 != 0 && num2 != 0) {\\n            if (num1 >= num2) {\\n                num1 -= num2;\\n            } else {\\n                num2 -= num1;\\n            }\\n            ++ans;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1777464,
                "title": "log-n-solution-cpp-c",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\tint countOperations(int num1, int num2) \\n    {\\n        int count=0;\\n        while(num1!=0 && num2!=0)\\n        {\\n            if(num1>=num2)\\n            {\\n                count+=num1/num2;\\n                num1=num1%num2;\\n            }\\n            else \\n            {\\n                 count+=num2/num1;\\n                 num2=num2%num1;\\n            }\\n        }\\n        return count;\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n\\tpublic:\\n\\tint countOperations(int num1, int num2) \\n    {\\n        int count=0;\\n        while(num1!=0 && num2!=0)\\n        {\\n            if(num1>=num2)\\n            {\\n                count+=num1/num2;\\n                num1=num1%num2;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1772694,
                "title": "python-intuitive-simple-solution",
                "content": "**Python :**\\n\\n```\\ndef countOperations(self, num1: int, num2: int) -> int:\\n\\toperations = 0\\n\\n\\twhile num1 and num2:\\n\\t\\tif num2 > num1:\\n\\t\\t\\tnum2 -= num1\\n\\t\\t\\toperations += 1\\n\\n\\t\\tif num1 > num2:\\n\\t\\t\\tnum1 -= num2\\n\\t\\t\\toperations += 1\\n\\n\\t\\tif num1 == num2:\\n\\t\\t\\treturn operations + 1\\n\\n\\treturn operations\\n```\\n\\n**Like it ? please upvote !**",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef countOperations(self, num1: int, num2: int) -> int:\\n\\toperations = 0\\n\\n\\twhile num1 and num2:\\n\\t\\tif num2 > num1:\\n\\t\\t\\tnum2 -= num1\\n\\t\\t\\toperations += 1\\n\\n\\t\\tif num1 > num2:\\n\\t\\t\\tnum1 -= num2\\n\\t\\t\\toperations += 1\\n\\n\\t\\tif num1 == num2:\\n\\t\\t\\treturn operations + 1\\n\\n\\treturn operations\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1767023,
                "title": "javascript-2169-count-operations-to-obtain-zero",
                "content": "\\n---\\n\\n- **Weekly Contest 280 answers**\\n  - **Q1** answer\\n    - https://leetcode.com/problems/count-operations-to-obtain-zero/discuss/1767023/JavaScript-2169.-Count-Operations-to-Obtain-Zero\\n    - **below**\\n  - **Q2** answer\\n    - https://leetcode.com/problems/minimum-operations-to-make-the-array-alternating/discuss/1767232/JavaScript-2170.-Minimum-Operations-to-Make-the-Array-Alternating\\n  - **Q3** answer\\n    - https://leetcode.com/problems/removing-minimum-number-of-magic-beans/discuss/1768069/JavaScript-2171.-Removing-Minimum-Number-of-Magic-Beans\\n\\n---\\n\\n- Similar to `Euclidean GCD`\\n\\n---\\n\\nHope it is simple to understand.\\n\\n---\\n\\n```\\nvar countOperations = function (num1, num2) {\\n    if (num2 === 0) return 0;                       // done\\n    if (num1 < num2) countOperations(num2, num1);   // reverse if num1 is small\\n    return (\\n        Math.trunc(num1 / num2) +                   // quotient (equals repeated subtraction amount)\\n        countOperations(num2, num1 % num2)          // call smaller, remainder\\n    );\\n};\\n```\\n\\n---\\n\\n![image](https://assets.leetcode.com/users/images/d8f8ef81-41c6-4da5-82b5-b4488c7279b8_1644726133.3467588.png)\\n\\n---\\n\\nQ & A\\n\\n---\\n\\n**Q: Can you elaborate your solution**\\n**A**\\n\\nSure\\n\\n---\\n\\n**Case 1 - best case:**\\n\\nAssume, num1 = 5 and num2 = 1\\n\\nlet\\'s do the\\n\\n    num1 = num1 - num2\\n\\nso\\n\\n    num1 - num2 = 5-1 = 4, and total reductions is 1\\n\\nthat is\\n\\n    num1 - num2  = num1 will become\\n    5    -   1   = 4   ----- total = 1 time\\n\\nlets repeat subtract num2 from num1, it becomes:\\n\\n    num1 - num2  = num1 will become\\n    5    -   1   = 4   ----- total = 1 time\\n    4    -   1   = 3   ----- total = 2 time\\n    3    -   1   = 2   ----- total = 3 time\\n    2    -   1   = 1   ----- total = 4 time\\n    1    -   1   = 0   ----- total = 5 time, num1 becomes 0\\n\\nso total 5 times we reduced num2, from num1, and num1 became 0, we stop here\\n\\nthe same thing can be achieved by division\\n\\n    num2 / num1\\n    = 5 / 1\\n    = 5  --- this 5 is total, num1 becomes 0\\n\\nans is total which is 5\\n\\n---\\n\\n**Case 2 - not best case:**\\n\\nAssume, num1 = 5 and num2 = 2\\n\\nlet\\'s do the\\n\\n    num1 = num1 - num2\\n\\nsimilar to above\\n\\n    num1 - num2  = num1 will become\\n    5    -   2   = 3   ----- total = 1 times\\n    3    -   2   = 1   ----- total = 2 times\\n\\nnow num1 is 1, and num2 is 2\\n\\nthe same thing can be achieved by division\\n\\n    num1 / num2\\n    = 5 / 2\\n    = 2.5  --- we have to take Math.trunc(2.5) = 2 (remove decimals), this 2 is `total`\\n\\nand `num1` is reminder\\n\\n    num1 % num2\\n    = 5 % 2\\n    = 1\\n\\nsince num1 is 1, and num2 is 2\\nbut we need one of them to 0, we need to continue\\nthe only we can continue is by doing reverse\\n\\ninstead of reducing num2 from num1, that is num1-num2 (1 - 2)\\nnow we should reduce num1, from num2, that is num2-num1  (2 - 1)\\nOr,\\nthis can also be done by exchange the values of num1 & num2, when num1 is smaller than num2 (num1 < num2)\\nif so, we can just do the same operation as above\\n\\nlet\\'s do this\\n\\nafter exchange\\nnow num1 is 2, and num2 is 1\\n\\n    num1 - num2  = num1 will become\\n    2    -   1   = 1   ----- total = 3 times\\n    1    -   1   = 0   ----- total = 4 times\\n\\nans is total which is 4\\n\\n---\\n\\nhope that helps\\n\\n---\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countOperations = function (num1, num2) {\\n    if (num2 === 0) return 0;                       // done\\n    if (num1 < num2) countOperations(num2, num1);   // reverse if num1 is small\\n    return (\\n        Math.trunc(num1 / num2) +                   // quotient (equals repeated subtraction amount)\\n        countOperations(num2, num1 % num2)          // call smaller, remainder\\n    );\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1766882,
                "title": "python3-simulation",
                "content": "Please pull this [commit](https://github.com/gaosanyong/leetcode/commit/2506277d2af78559a0e58d2130fdbe87beab42b5) for solutions of weekly 280. \\n\\n```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        ans = 0 \\n        while num1 and num2: \\n            ans += num1//num2\\n            num1, num2 = num2, num1%num2\\n        return ans \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        ans = 0 \\n        while num1 and num2: \\n            ans += num1//num2\\n            num1, num2 = num2, num1%num2\\n        return ans \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1766767,
                "title": "c-short-simulation",
                "content": "\\n\\nSee my latest update in repo [LeetCode](https://github.com/lzl124631x/LeetCode)\\n\\n## Solution 1.\\n\\n```cpp\\n// OJ: https://leetcode.com/contest/weekly-contest-280/problems/count-operations-to-obtain-zero/\\n// Author: github.com/lzl124631x\\n// Time: O(max(num1, num2))\\n// Space: O(1)\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int ans = 0;\\n        for (; num1 && num2; ++ans) {\\n            if (num1 >= num2) num1 -= num2;\\n            else num2 -= num1;\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n## Solution 2.\\n\\n```cpp\\n// OJ: https://leetcode.com/problems/count-operations-to-obtain-zero/\\n// Author: github.com/lzl124631x\\n// Time: O(max(num1, num2))\\n// Space: O(1)\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int ans = 0;\\n        while (num1 && num2) {\\n            if (num1 >= num2) ans += num1 / num2, num1 %= num2;\\n            else ans += num2 / num1, num2 %= num1;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\n// OJ: https://leetcode.com/contest/weekly-contest-280/problems/count-operations-to-obtain-zero/\\n// Author: github.com/lzl124631x\\n// Time: O(max(num1, num2))\\n// Space: O(1)\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int ans = 0;\\n        for (; num1 && num2; ++ans) {\\n            if (num1 >= num2) num1 -= num2;\\n            else num2 -= num1;\\n        }\\n        return ans;\\n    }\\n};\\n```\n```cpp\\n// OJ: https://leetcode.com/problems/count-operations-to-obtain-zero/\\n// Author: github.com/lzl124631x\\n// Time: O(max(num1, num2))\\n// Space: O(1)\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int ans = 0;\\n        while (num1 && num2) {\\n            if (num1 >= num2) ans += num1 / num2, num1 %= num2;\\n            else ans += num2 / num1, num2 %= num1;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1767760,
                "title": "c-4-lines",
                "content": "```\\nclass Solution {\\npublic:\\n    int countOperations(int n1, int n2) {\\n        if(n1 == 0 || n2 == 0) return 0;\\n        if(n1 == n2) return 1;\\n        if(n1 > n2) return countOperations(n1-n2, n2)+1;\\n        else return countOperations(n1, n2-n1)+1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int n1, int n2) {\\n        if(n1 == 0 || n2 == 0) return 0;\\n        if(n1 == n2) return 1;\\n        if(n1 > n2) return countOperations(n1-n2, n2)+1;\\n        else return countOperations(n1, n2-n1)+1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1766784,
                "title": "simple-java-solution",
                "content": "\\n```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n       \\n        int op = 0;\\n        while(num1 >0 && num2 >0){\\n            if(num1 > num2){\\n                num1 -= num2;\\n            }\\n            else{\\n                num2 -= num1;\\n            }\\n            op++;\\n        }\\n        \\n        return op;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int countOperations(int num1, int num2) {\\n       \\n        int op = 0;\\n        while(num1 >0 && num2 >0){\\n            if(num1 > num2){\\n                num1 -= num2;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1768763,
                "title": "python3-2-approaches-normal-and-optimized-in-time",
                "content": "**Normal Solution**\\n```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        ct=0\\n        while num2 and num1:\\n            if num1>=num2:\\n                num1=num1-num2\\n            else:\\n                num2=num2-num1\\n            ct+=1\\n        return ct\\n```\\n\\n**More Optimized Solution**\\n```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        ans = 0\\n        if num1 < num2:\\n            num1, num2 = num2, num1\\n        while num2:\\n            num1, num2 = num2, num1 - num2\\n            if num1 < num2:\\n                num1, num2 = num2, num1\\n            ans += 1\\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        ct=0\\n        while num2 and num1:\\n            if num1>=num2:\\n                num1=num1-num2\\n            else:\\n                num2=num2-num1\\n            ct+=1\\n        return ct\\n```\n```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        ans = 0\\n        if num1 < num2:\\n            num1, num2 = num2, num1\\n        while num2:\\n            num1, num2 = num2, num1 - num2\\n            if num1 < num2:\\n                num1, num2 = num2, num1\\n            ans += 1\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3298423,
                "title": "beat-runtime-100-48-ms-using-while-ternary",
                "content": "# Intuition\\n![photo_2023-03-15_09-43-04.jpg](https://assets.leetcode.com/users/images/dd241497-eb16-4d98-9205-61e9b22b5512_1678848074.8472655.jpeg)\\n\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} num1\\n * @param {number} num2\\n * @return {number}\\n */\\nvar countOperations = function(num1, num2) {\\n  let count = 0;\\n  while (num1 && num2 !== 0) {\\n    num1 > num2 ? (num1 -= num2) : (num2 -= num1);\\n    count++;\\n  }\\n  return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num1\\n * @param {number} num2\\n * @return {number}\\n */\\nvar countOperations = function(num1, num2) {\\n  let count = 0;\\n  while (num1 && num2 !== 0) {\\n    num1 > num2 ? (num1 -= num2) : (num2 -= num1);\\n    count++;\\n  }\\n  return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3173929,
                "title": "c-solution-easy-understanding",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:$$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int cnt = 0 ; \\n\\n        while (num1 > 0 && num2 > 0)\\n        {\\n            if (num1 > num2)\\n            {\\n                cnt ++ ; \\n                num1 -= num2 ; \\n            }\\n            else\\n            {\\n                cnt ++ ;\\n                num2 -= num1 ;\\n            }\\n        }\\n        return cnt ; \\n    }\\n};\\n```\\n![815a317f-9cdf-46e2-a397-af8869dafa2e_1673498197.3721023.png](https://assets.leetcode.com/users/images/3750d065-d972-4f32-b26f-8a39208b7fd6_1676172409.956078.png)\\n",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int cnt = 0 ; \\n\\n        while (num1 > 0 && num2 > 0)\\n        {\\n            if (num1 > num2)\\n            {\\n                cnt ++ ; \\n                num1 -= num2 ; \\n            }\\n            else\\n            {\\n                cnt ++ ;\\n                num2 -= num1 ;\\n            }\\n        }\\n        return cnt ; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2719470,
                "title": "java-solution-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count=0;\\n        while(num1!=0&&num2!=0){\\n            if(num1>=num2) num1=num1-num2;\\n            else num2=num2-num1;\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count=0;\\n        while(num1!=0&&num2!=0){\\n            if(num1>=num2) num1=num1-num2;\\n            else num2=num2-num1;\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3872793,
                "title": "count-operations-to-obtain-zero-o-abc-javascript-runtime-98-94-meaningful-vars",
                "content": "```\\nvar countOperations = function(num1, num2) {\\n    let operations = 0;\\n    let reminder = null;\\n    let factorial = null;\\n    while (num1 !== 0 && num2 !== 0) {\\n        if (num1 < num2) {\\n            reminder = num2 % num1;\\n            factorial = parseInt(num2 / num1);\\n            operations += factorial;\\n            num2 = reminder;\\n        } else {\\n            reminder = num1 % num2;\\n            factorial = parseInt(num1 / num2);\\n            operations += factorial;\\n            num1 = reminder;\\n        }\\n    }\\n    return operations;\\n};\\n```\\n![image](https://assets.leetcode.com/users/images/bcf39e97-1b82-4259-b833-fb5b2a0fe947_1691322887.0186987.png)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countOperations = function(num1, num2) {\\n    let operations = 0;\\n    let reminder = null;\\n    let factorial = null;\\n    while (num1 !== 0 && num2 !== 0) {\\n        if (num1 < num2) {\\n            reminder = num2 % num1;\\n            factorial = parseInt(num2 / num1);\\n            operations += factorial;\\n            num2 = reminder;\\n        } else {\\n            reminder = num1 % num2;\\n            factorial = parseInt(num1 / num2);\\n            operations += factorial;\\n            num1 = reminder;\\n        }\\n    }\\n    return operations;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3415512,
                "title": "smartest-way-with-java-time-beats-90-space-beats-99",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int ope = 0;\\n        if(num1>0 && num2>0){\\n            while(true){\\n                if(num1==num2){\\n                    ope++;\\n                    break;\\n                }\\n                ope++;\\n                if(num1>num2)num1 -= num2;\\n                else num2 -= num1;\\n            }\\n        }\\n        return ope;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int ope = 0;\\n        if(num1>0 && num2>0){\\n            while(true){\\n                if(num1==num2){\\n                    ope++;\\n                    break;\\n                }\\n                ope++;\\n                if(num1>num2)num1 -= num2;\\n                else num2 -= num1;\\n            }\\n        }\\n        return ope;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2927782,
                "title": "accepted-swift",
                "content": "```\\nclass Solution {\\n    func countOperations(_ num1: Int, _ num2: Int, _ c: Int = 0) -> Int {\\n        guard num1 * num2 != 0 else { return c }\\n        return countOperations(max(num1, num2) - min(num1, num2), min(num1, num2), c + 1)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func countOperations(_ num1: Int, _ num2: Int, _ c: Int = 0) -> Int {\\n        guard num1 * num2 != 0 else { return c }\\n        return countOperations(max(num1, num2) - min(num1, num2), min(num1, num2), c + 1)\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2824784,
                "title": "c-easy-solution-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=0;\\n        while(num1!=0 && num2!=0){\\n            if(num1>num2)\\n                num1-=num2;\\n            else if(num2>num1)\\n                num2-=num1;\\n            else\\n                return count+1;\\n            count++;            \\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=0;\\n        while(num1!=0 && num2!=0){\\n            if(num1>num2)\\n                num1-=num2;\\n            else if(num2>num1)\\n                num2-=num1;\\n            else\\n                return count+1;\\n            count++;            \\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2732919,
                "title": "swift-faster-than-100",
                "content": "```\\nclass Solution {\\n    func countOperations(_ num1: Int, _ num2: Int) -> Int {\\n        return num1*num2 == 0 ? 0 : num1 / num2 + countOperations(num2, num1 % num2)\\n    }\\n}\\n```\\n\\n",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func countOperations(_ num1: Int, _ num2: Int) -> Int {\\n        return num1*num2 == 0 ? 0 : num1 / num2 + countOperations(num2, num1 % num2)\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2731626,
                "title": "python-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        count=0\\n        while num1!=0 and num2!=0:\\n            if num1>num2:\\n                num1=num1-num2\\n                count+=1\\n            else:\\n                num2=num2-num1\\n                count+=1\\n        return count\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        count=0\\n        while num1!=0 and num2!=0:\\n            if num1>num2:\\n                num1=num1-num2\\n                count+=1\\n            else:\\n                num2=num2-num1\\n                count+=1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2494535,
                "title": "if-else-easy-to-understand-java-solution",
                "content": "```\\n class Solution {\\n public int countOperations(int num1, int num2) {\\n int count=0;\\n while(num1>0 && num2>0 ){\\n    if(num2>=num1){\\n    num2= num2-num1;\\n     count ++;\\n }\\n    else if(num2<=num1){\\n     num1= num1-num2;\\n     count ++;\\n        \\n }\\n }\\n  return count;\\n  }\\n  } \\n```\\n",
                "solutionTags": [],
                "code": "```\\n class Solution {\\n public int countOperations(int num1, int num2) {\\n int count=0;\\n while(num1>0 && num2>0 ){\\n    if(num2>=num1){\\n    num2= num2-num1;\\n     count ++;\\n }\\n    else if(num2<=num1){\\n     num1= num1-num2;\\n     count ++;\\n        \\n }\\n }\\n  return count;\\n  }\\n  } \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2289275,
                "title": "simple-javascript-solution-withh-55-faster",
                "content": "Runtime: 88 ms, faster than 55.64% of JavaScript online submissions for Count Operations to Obtain Zero.\\n\\nconst countOperations = (num1, num2) => {\\n  let result = 0;\\n  while (num1 * num2 !== 0) {\\n    if (num1 >= num2) {\\n      num1 -= num2;\\n    } else {\\n      num2 -= num1;\\n    }\\n    result++;\\n  }\\n  return result;\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "Runtime: 88 ms, faster than 55.64% of JavaScript online submissions for Count Operations to Obtain Zero.\\n\\nconst countOperations = (num1, num2) => {\\n  let result = 0;\\n  while (num1 * num2 !== 0) {\\n    if (num1 >= num2) {\\n      num1 -= num2;\\n    } else {\\n      num2 -= num1;\\n    }\\n    result++;\\n  }\\n  return result;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1828100,
                "title": "beginner-friendly-java-solution",
                "content": "```\\nclass Solution {\\n    int count = 0;\\n    public int countOperations(int num1, int num2) {\\n        if(num1 == 0 || num2 == 0)  return count;\\n        if(num1 <= num2){    \\n            countOperations(num1, num2 - num1);\\n            count++;\\n        } else{    \\n            countOperations(num1 - num2, num2);\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    int count = 0;\\n    public int countOperations(int num1, int num2) {\\n        if(num1 == 0 || num2 == 0)  return count;\\n        if(num1 <= num2){    \\n            countOperations(num1, num2 - num1);\\n            count++;\\n        } else{    \\n            countOperations(num1 - num2, num2);\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1783838,
                "title": "java-most-easy-solution",
                "content": "\\n    class Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count = 0;\\n        while(num1 != 0 && num2 != 0){\\n            count++;\\n            if(num1 > num2){\\n                num1 = num1-num2;\\n            }else {\\n                num2 = num2 - num1;\\n            }            \\n        }\\n        return count;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count = 0;\\n        while(num1 != 0 && num2 != 0){\\n            count++;\\n            if(num1 > num2){\\n                num1 = num1-num2;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1779006,
                "title": "c-4-liner-using-recursion-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        if(num1==0 || num2==0) return 0;\\n        if(num1>=num2)   num1=num1-num2;\\n        else if(num2>num1)   num2=num2-num1;\\n        return 1+countOperations(num1,num2);\\n    }\\n};\\n```\\n\\nIf you liked the solution, then please upvote \\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        if(num1==0 || num2==0) return 0;\\n        if(num1>=num2)   num1=num1-num2;\\n        else if(num2>num1)   num2=num2-num1;\\n        return 1+countOperations(num1,num2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1769134,
                "title": "rust-solution",
                "content": "1. Simple simulation\\n```\\nimpl Solution {\\n    pub fn count_operations(mut num1: i32, mut num2: i32) -> i32 {\\n        let mut ops = 0;\\n        while num1 > 0 && num2 > 0 {\\n            match num1 < num2 {\\n                true => num2 -= num1,\\n                false => num1 -= num2,\\n            }\\n            ops += 1;\\n        }\\n        ops\\n    }\\n}\\n```\\n2. Optimal solution\\n```\\nimpl Solution {\\n    pub fn count_operations(mut num1: i32, mut num2: i32) -> i32 {\\n        let mut ops = 0;\\n        while num1 > 0 && num2 > 0 {\\n            if num1 > num2 {\\n                std::mem::swap(&mut num1, &mut num2);\\n            }\\n            ops += num2 / num1;\\n            num2 %= num1;\\n        }\\n        ops\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn count_operations(mut num1: i32, mut num2: i32) -> i32 {\\n        let mut ops = 0;\\n        while num1 > 0 && num2 > 0 {\\n            match num1 < num2 {\\n                true => num2 -= num1,\\n                false => num1 -= num2,\\n            }\\n            ops += 1;\\n        }\\n        ops\\n    }\\n}\\n```\n```\\nimpl Solution {\\n    pub fn count_operations(mut num1: i32, mut num2: i32) -> i32 {\\n        let mut ops = 0;\\n        while num1 > 0 && num2 > 0 {\\n            if num1 > num2 {\\n                std::mem::swap(&mut num1, &mut num2);\\n            }\\n            ops += num2 / num1;\\n            num2 %= num1;\\n        }\\n        ops\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1768812,
                "title": "c-2169-count-operations-to-obtain-zero",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int ans = 0; \\n        while (num1 && num2) {\\n            ans += num1/num2; \\n            num1 %= num2; \\n            swap(num1, num2); \\n        }\\n        return ans; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int ans = 0; \\n        while (num1 && num2) {\\n            ans += num1/num2; \\n            num1 %= num2; \\n            swap(num1, num2); \\n        }\\n        return ans; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1768175,
                "title": "java-easy-solution-for-beginner",
                "content": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count=0;\\n        while(num1>0 && num2>0)\\n        {\\n            if(num1>num2)\\n            {\\n                num1=num1-num2;\\n                count++;\\n                if(num1==0 || num2==0)\\n                    return count;\\n            }\\n            else\\n            {\\n                num2=num2-num1;\\n                count++;\\n                if(num2==0 || num1==0)\\n                    return count;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count=0;\\n        while(num1>0 && num2>0)\\n        {\\n            if(num1>num2)\\n            {\\n                num1=num1-num2;\\n                count++;\\n                if(num1==0 || num2==0)\\n                    return count;\\n            }\\n            else\\n            {\\n                num2=num2-num1;\\n                count++;\\n                if(num2==0 || num1==0)\\n                    return count;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1768076,
                "title": "go-bigger-smaller",
                "content": "There is a nasty case where subtracting the other number would be quite slow.\\n\\nConsider 1 and 100\\'000. There would be 100\\'000 subract-by-one operations.\\n\\nTo speed things up in this case, calculate how many times the smaller number can be removed from the bigger number and add it to the total number of operations. The result of the operation itself will be the leftover from the division, i.e. the remainder.\\n\\n```go\\nfunc countOperations(num1 int, num2 int) int {\\n\\tvar ops int\\n\\tfor num1 > 0 && num2 > 0 {\\n        if num2 > num1 {\\n            num1, num2 = num2, num1\\n        }\\n        ops += num1/num2\\n        num1 %= num2\\n\\t}\\n\\treturn ops\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc countOperations(num1 int, num2 int) int {\\n\\tvar ops int\\n\\tfor num1 > 0 && num2 > 0 {\\n        if num2 > num1 {\\n            num1, num2 = num2, num1\\n        }\\n        ops += num1/num2\\n        num1 %= num2\\n\\t}\\n\\treturn ops\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1766859,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int operations = 0;\\n        while(num1!=0 && num2!=0){\\n            if(num1>=num2) num1-=num2;\\n            else num2-=num1;\\n            operations++;\\n        }\\n        return operations;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int operations = 0;\\n        while(num1!=0 && num2!=0){\\n            if(num1>=num2) num1-=num2;\\n            else num2-=num1;\\n            operations++;\\n        }\\n        return operations;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1766811,
                "title": "python-short-and-easy",
                "content": "```\\nclass Solution(object):\\n    def countOperations(self, num1, num2):\\n        \"\"\"\\n        :type num1: int\\n        :type num2: int\\n        :rtype: int\\n        \"\"\"\\n        count=0\\n        while num1!=0 and num2!=0:\\n            count+=1\\n            if num1>=num2:\\n                num1=num1-num2\\n            else:\\n                num2=num2-num1\\n        return count\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def countOperations(self, num1, num2):\\n        \"\"\"\\n        :type num1: int\\n        :type num2: int\\n        :rtype: int\\n        \"\"\"\\n        count=0\\n        while num1!=0 and num2!=0:\\n            count+=1\\n            if num1>=num2:\\n                num1=num1-num2\\n            else:\\n                num2=num2-num1\\n        return count\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4065406,
                "title": "count-operations-to-obtain-zero",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        if(num1==0||num2==0)\\n        return 0;\\n        int count=1;\\n        while(num1!=num2){\\n            if(num1>=num2)\\n            num1-=num2;\\n            else\\n            num2-=num1;\\n            count++;\\n        }   \\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        if(num1==0||num2==0)\\n        return 0;\\n        int count=1;\\n        while(num1!=num2){\\n            if(num1>=num2)\\n            num1-=num2;\\n            else\\n            num2-=num1;\\n            count++;\\n        }   \\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3895909,
                "title": "basic-appraoch",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    int count = 0;\\n    public int countOperations(int num1, int num2) {\\n        return helper(num1,num2);\\n    }\\n\\n    public int helper(int num1,int num2){\\n        if(num1 == 0 || num2 == 0)  return count;\\n        if(num1 <= num2){    \\n            countOperations(num1, num2 - num1);\\n            count++;\\n        } else{    \\n            countOperations(num1 - num2, num2);\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    int count = 0;\\n    public int countOperations(int num1, int num2) {\\n        return helper(num1,num2);\\n    }\\n\\n    public int helper(int num1,int num2){\\n        if(num1 == 0 || num2 == 0)  return count;\\n        if(num1 <= num2){    \\n            countOperations(num1, num2 - num1);\\n            count++;\\n        } else{    \\n            countOperations(num1 - num2, num2);\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3891729,
                "title": "java-easy-runtime-2ms-beginner-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int c=0;\\n        while(num1!=0 && num2!=0){\\n            if(num1>=num2)\\n            num1-=num2;\\n            else\\n            num2-=num1;\\n            c++;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int c=0;\\n        while(num1!=0 && num2!=0){\\n            if(num1>=num2)\\n            num1-=num2;\\n            else\\n            num2-=num1;\\n            c++;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3737380,
                "title": "count-operations-to-obtain-zero-java-solution-code",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count = 0;\\n\\n        while(num1 > 0 && num2 > 0){\\n            if(num1 > num2){\\n                num1 = num1 - num2;\\n                count++;\\n            }\\n            else{\\n                num2 = num2 - num1;\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count = 0;\\n\\n        while(num1 > 0 && num2 > 0){\\n            if(num1 > num2){\\n                num1 = num1 - num2;\\n                count++;\\n            }\\n            else{\\n                num2 = num2 - num1;\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3640486,
                "title": "simple-while-loop-solution-python",
                "content": "# Code\\n```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        cnt=0\\n        while(num1>0 and num2>0):\\n            if num1>=num2:\\n                num1-=num2\\n            else:\\n                num2-=num1\\n            cnt+=1\\n        return cnt\\n```\\n\\n***Please Upvote***",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        cnt=0\\n        while(num1>0 and num2>0):\\n            if num1>=num2:\\n                num1-=num2\\n            else:\\n                num2-=num1\\n            cnt+=1\\n        return cnt\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3561819,
                "title": "dart-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    int countOperations(int num1, int num2) {\\n        int step = 0;\\n\\n        while(num1 != 0 && num2 != 0){\\n            num1 > num2 ? num1 -= num2 : num2 -= num1;\\n            step++;\\n        }\\n        return step;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n    int countOperations(int num1, int num2) {\\n        int step = 0;\\n\\n        while(num1 != 0 && num2 != 0){\\n            num1 > num2 ? num1 -= num2 : num2 -= num1;\\n            step++;\\n        }\\n        return step;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3550758,
                "title": "simplest-efficient-c-code-time-o-1-space-o-1",
                "content": "# Intuition\\nUpon analyzing the code, we can see that its purpose is to count the number of operations required to make both num1 and num2 equal to zero. The operations involve repeatedly subtracting the smaller number from the larger number until one of them becomes zero. We can assume that the code aims to calculate the minimum number of operations needed to achieve this.\\n\\n# Approach\\nTo solve the problem, we follow a straightforward iterative approach. We use a while loop that continues until either num1 or num2 becomes zero. Within the loop, we check which number is larger by using the if condition: num1 >= num2. If num1 is greater or equal, we subtract num2 from num1 and update the value of num1. Otherwise, we subtract num1 from num2 and update the value of num2. After each subtraction, we increment a counter variable count to keep track of the number of operations performed. Finally, we return the value of count.\\n\\n# Complexity\\n- Time complexity: $O(n)$ where, n is approximately num1+num2.\\n- Space complexity: The code has a constant space complexity. It uses only a few integer variables (num1, num2, count), which do not depend on the input size. Hence, the space complexity is $O(1)$.\\n\\n# Code\\n```\\nint countOperations(int num1, int num2)\\n{\\n    int count = 0;\\n    while(num1>0 && num2>0)\\n    {\\n        if(num1>=num2)\\n        num1 -= num2;\\n        else\\n        num2 -= num1;\\n        count++;\\n    }\\n    return count;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint countOperations(int num1, int num2)\\n{\\n    int count = 0;\\n    while(num1>0 && num2>0)\\n    {\\n        if(num1>=num2)\\n        num1 -= num2;\\n        else\\n        num2 -= num1;\\n        count++;\\n    }\\n    return count;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3427701,
                "title": "c-recursive-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe goal is counting how many operations are needed in order for one of the two inputs become 0.  A recursion of the same function is a reasonable choice for its simplicity, especially when numbers are being subtracted for each operation.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Create a condition where the operation stops - in this case either num1 or num2 is 0.  In this case, return 0\\n2. For the condition where num1 >= num2, one operation of calling the same function is needed.  Thus, return **1 + CountOperations(num1 - num2, num1)**\\n3. For the other condition of num1 < num2, return **1 + CountOperations(num1, num2 - num1)**\\n\\n\\n# Code\\n```\\npublic class Solution {\\n    public int CountOperations(int num1, int num2) {\\n\\n        if (num1 == 0 || num2 == 0) return 0;\\n        \\n        if (num1 >= num2) \\n            return 1 + CountOperations(num1 - num2, num2);\\n        else\\n            return 1 + CountOperations(num1, num2 - num1);        \\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int CountOperations(int num1, int num2) {\\n\\n        if (num1 == 0 || num2 == 0) return 0;\\n        \\n        if (num1 >= num2) \\n            return 1 + CountOperations(num1 - num2, num2);\\n        else\\n            return 1 + CountOperations(num1, num2 - num1);        \\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3382856,
                "title": "easy-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        counter = 0\\n        while num1 and num2:\\n            if num1 >= num2:\\n                num1 -= num2\\n            else:\\n                num2 -= num1\\n            counter += 1\\n        return counter\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        counter = 0\\n        while num1 and num2:\\n            if num1 >= num2:\\n                num1 -= num2\\n            else:\\n                num2 -= num1\\n            counter += 1\\n        return counter\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3297695,
                "title": "easy-to-understand-self-explanatory",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count = 0;\\n        while(true){\\n            if(num1==0||num2==0) return count;\\n            else if(num1>=num2){\\n                num1-=num2;\\n            }\\n            else{\\n                num2-=num1;\\n            }\\n            ++count;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count = 0;\\n        while(true){\\n            if(num1==0||num2==0) return count;\\n            else if(num1>=num2){\\n                num1-=num2;\\n            }\\n            else{\\n                num2-=num1;\\n            }\\n            ++count;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3276178,
                "title": "python-easy-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        ans = 0\\n\\n        while num1 > 0 and num2 > 0:\\n            if num1>=num2:\\n                num1 -= num2\\n            else:\\n                num2 -= num1\\n\\n            ans += 1\\n\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        ans = 0\\n\\n        while num1 > 0 and num2 > 0:\\n            if num1>=num2:\\n                num1 -= num2\\n            else:\\n                num2 -= num1\\n\\n            ans += 1\\n\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3193284,
                "title": "count-operations-to-obtain-zero-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=0;\\n        while(num1>0 && num2>0)\\n        {\\n            if(num1>=num2)\\n            {\\n                num1 -= num2;\\n            }\\n            else\\n            {\\n                num2 -= num1;\\n            }\\n            count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=0;\\n        while(num1>0 && num2>0)\\n        {\\n            if(num1>=num2)\\n            {\\n                num1 -= num2;\\n            }\\n            else\\n            {\\n                num2 -= num1;\\n            }\\n            count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3132475,
                "title": "beats-57-77-count-operations-to-obtain-zero",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        count=0\\n        while num1!=0 and num2!=0:\\n            if num1>=num2:\\n                num1=num1-num2\\n                count+=1\\n            else:\\n                num2=num2-num1\\n                count+=1\\n        return count\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        count=0\\n        while num1!=0 and num2!=0:\\n            if num1>=num2:\\n                num1=num1-num2\\n                count+=1\\n            else:\\n                num2=num2-num1\\n                count+=1\\n        return count\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3048254,
                "title": "easy-to-understand-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int ans=0;\\n      while(num1!=0 && num2!=0){\\n        if(num1>num2){\\n            num1=num1-num2;\\n            ans++;\\n        }\\n        else{\\n            num2=num2-num1;\\n            ans++;\\n        }\\n      }  \\n   return ans; }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int ans=0;\\n      while(num1!=0 && num2!=0){\\n        if(num1>num2){\\n            num1=num1-num2;\\n            ans++;\\n        }\\n        else{\\n            num2=num2-num1;\\n            ans++;\\n        }\\n      }  \\n   return ans; }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3048253,
                "title": "easy-to-understand-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int ans=0;\\n      while(num1!=0 && num2!=0){\\n        if(num1>num2){\\n            num1=num1-num2;\\n            ans++;\\n        }\\n        else{\\n            num2=num2-num1;\\n            ans++;\\n        }\\n      }  \\n   return ans; }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int ans=0;\\n      while(num1!=0 && num2!=0){\\n        if(num1>num2){\\n            num1=num1-num2;\\n            ans++;\\n        }\\n        else{\\n            num2=num2-num1;\\n            ans++;\\n        }\\n      }  \\n   return ans; }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2953748,
                "title": "c-0ms-easy-soloution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n0 ms\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n5 mb\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int t=0;\\n        if (num1==0 || num2==0){\\n            t=0;\\n        }\\n        else{\\n            while(num2>0 && num1>0){\\n            if(num1>num2){\\n                num1-=num2;\\n                t++;\\n            }\\n            else {\\n                num2-=num1;\\n                t++;\\n            }\\n        }\\n        }\\n        return t;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int t=0;\\n        if (num1==0 || num2==0){\\n            t=0;\\n        }\\n        else{\\n            while(num2>0 && num1>0){\\n            if(num1>num2){\\n                num1-=num2;\\n                t++;\\n            }\\n            else {\\n                num2-=num1;\\n                t++;\\n            }\\n        }\\n        }\\n        return t;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2826883,
                "title": "easiest-solution-c-plus-plus-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int a = 0;\\n        while(num1>0 && num2>0){\\n            if(num1==num2) num1-=num2;\\n            else if(num1>num2) num1-=num2;\\n            else if(num2>num1) num2-=num1;\\n            a++;\\n        }\\n        return a;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int a = 0;\\n        while(num1>0 && num2>0){\\n            if(num1==num2) num1-=num2;\\n            else if(num1>num2) num1-=num2;\\n            else if(num2>num1) num2-=num1;\\n            a++;\\n        }\\n        return a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2720844,
                "title": "c-easy-sol",
                "content": "```\\nclass Solution {\\npublic:\\n    int countOperations(int x, int y, int c = 0) {\\n        while(x and y)if(x>y) c+=x/y,x = x%y;else c+=y/x,y = y%x;\\n        return c;\\n    }\\n};\\n```\\n*Do upvote if you like my solution*",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int x, int y, int c = 0) {\\n        while(x and y)if(x>y) c+=x/y,x = x%y;else c+=y/x,y = y%x;\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2682583,
                "title": "c-easy-solution-runtime-0-ms-faster-than-100-00",
                "content": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) \\n {\\n     return fun(num1,num2);       \\n }\\n int fun(int num1,int num2)\\n {\\n \\tif(num1==0 or num2==0)\\n \\t{\\n \\t\\treturn 0;\\n\\t }\\n\\t if(num1>=num2)\\n\\t {\\n\\t \\t return 1+fun(num1-num2,num2);\\n\\t }\\n\\t else \\n\\t {\\n\\t \\treturn 1+fun(num1,num2-num1);\\n\\t }\\n }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) \\n {\\n     return fun(num1,num2);       \\n }\\n int fun(int num1,int num2)\\n {\\n \\tif(num1==0 or num2==0)\\n \\t{\\n \\t\\treturn 0;\\n\\t }\\n\\t if(num1>=num2)\\n\\t {\\n\\t \\t return 1+fun(num1-num2,num2);\\n\\t }\\n\\t else \\n\\t {\\n\\t \\treturn 1+fun(num1,num2-num1);\\n\\t }\\n }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2682116,
                "title": "python-simplest-approach",
                "content": "\\t\\tclass Solution:\\n\\t\\t\\tdef countOperations(self, num1: int, num2: int) -> int:\\n\\t\\t\\t\\tcount=0\\n\\t\\t\\t\\twhile num1!=0 and num2!=0:\\n\\t\\t\\t\\t\\tcount+=1\\n\\t\\t\\t\\t\\tif num1>num2:\\n\\t\\t\\t\\t\\t\\tnum1=num1-num2\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tnum2=num2-num1\\n\\t\\t\\t\\treturn count",
                "solutionTags": [],
                "code": "\\t\\tclass Solution:\\n\\t\\t\\tdef countOperations(self, num1: int, num2: int) -> int:\\n\\t\\t\\t\\tcount=0\\n\\t\\t\\t\\twhile num1!=0 and num2!=0:\\n\\t\\t\\t\\t\\tcount+=1\\n\\t\\t\\t\\t\\tif num1>num2:\\n\\t\\t\\t\\t\\t\\tnum1=num1-num2\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tnum2=num2-num1\\n\\t\\t\\t\\treturn count",
                "codeTag": "Java"
            },
            {
                "id": 2679740,
                "title": "",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count=0,max;\\n        while(num2!=0&&num1!=0){\\n            max=Math.max(Math.max(num1,num2)-Math.min(num1,num2),Math.min(num1,num2));\\n            num2=Math.min(Math.max(num1,num2)-Math.min(num1,num2),Math.min(num1,num2));\\n            num1=max;\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count=0,max;\\n        while(num2!=0&&num1!=0){\\n            max=Math.max(Math.max(num1,num2)-Math.min(num1,num2),Math.min(num1,num2));\\n            num2=Math.min(Math.max(num1,num2)-Math.min(num1,num2),Math.min(num1,num2));\\n            num1=max;\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2677163,
                "title": "java-bruetforce-2ms-simple-af",
                "content": "class Solution {\\n    public int countOperations(int num1, int num2) {\\n        int n=Math.max(num1,num2);\\n        int ans=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(num1==0 || num2==0)\\n                break;\\n         if(num1>=num2)\\n         {\\n             num1=num1-num2;\\n         }\\n            else\\n                num2=num2-num1;\\n            ans++;\\n            \\n        }\\n        return ans;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int countOperations(int num1, int num2) {\\n        int n=Math.max(num1,num2);\\n        int ans=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(num1==0 || num2==0)\\n                break;\\n         if(num1>=num2)\\n         {\\n             num1=num1-num2;\\n         }",
                "codeTag": "Java"
            },
            {
                "id": 2668722,
                "title": "python-simple-solution-95",
                "content": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        steps = 0\\n        while num1 != 0 and num2 != 0:\\n            if num1 > num2:\\n                steps += num1 // num2\\n                num1 = num1 % num2\\n            else:\\n                steps += num2 // num1\\n                num2 = num2 % num1\\n        return steps\\n\\t```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        steps = 0\\n        while num1 != 0 and num2 != 0:\\n            if num1 > num2:\\n                steps += num1 // num2\\n                num1 = num1 % num2\\n            else:\\n                steps += num2 // num1\\n                num2 = num2 % num1\\n        return steps\\n\\t```",
                "codeTag": "Java"
            },
            {
                "id": 2635903,
                "title": "c-simple-recursive-solution-with-description",
                "content": "A simple recursive solution for the problem using ternary operator eliminates if and else condition, reducing the code size. Further use of of recursion reduces the size of the code and makes the code clean. \\n```\\nclass Solution {\\npublic:\\n    int count_op = 0;\\n    int countOperations(int num1, int num2) {\\n        if (num1 == 0 or num2 == 0){ //base case\\n            return count_op;\\n        }\\n        num1 >= num2 ? count_op = 1 + countOperations(num1-num2,num2):count_op = 1+ countOperations(num1,num2-num1); // recursive step\\n        return count_op;\\n    }\\n};\\n```\\n\\nHope you like it.",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int count_op = 0;\\n    int countOperations(int num1, int num2) {\\n        if (num1 == 0 or num2 == 0){ //base case\\n            return count_op;\\n        }\\n        num1 >= num2 ? count_op = 1 + countOperations(num1-num2,num2):count_op = 1+ countOperations(num1,num2-num1); // recursive step\\n        return count_op;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2584198,
                "title": "java-solution",
                "content": "#### Please Upvote !!!\\n```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count = 0;\\n\\n        while (num1 != 0 && num2 != 0) {\\n            if (num1 >= num2) num1 -= num2;\\n            else num2 -= num1;\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n}\\n\\n// TC: O(n)\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count = 0;\\n\\n        while (num1 != 0 && num2 != 0) {\\n            if (num1 >= num2) num1 -= num2;\\n            else num2 -= num1;\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n}\\n\\n// TC: O(n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2509053,
                "title": "javascript",
                "content": "```\\nvar countOperations = function(num1, num2) {\\n    let count = 0\\n    \\n    while(num1 !== 0 && num2 !== 0){\\n        if(num1 > num2) num1 -= num2 \\n        else num2 -= num1\\n        count++\\n    }\\n    \\n    return count\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countOperations = function(num1, num2) {\\n    let count = 0\\n    \\n    while(num1 !== 0 && num2 !== 0){\\n        if(num1 > num2) num1 -= num2 \\n        else num2 -= num1\\n        count++\\n    }\\n    \\n    return count\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2457801,
                "title": "java-solution-just-using-while-loop-2ms-runtime",
                "content": "```\\nclass Solution {\\n    public int countOperations(int n1, int n2) {\\n        int cnt = 0;\\n        while (n1 != 0 && n2 != 0) {\\n            cnt++;\\n            if (n1 >= n2) n1 -= n2;\\n            else n2 -= n1;\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int n1, int n2) {\\n        int cnt = 0;\\n        while (n1 != 0 && n2 != 0) {\\n            cnt++;\\n            if (n1 >= n2) n1 -= n2;\\n            else n2 -= n1;\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2418334,
                "title": "c-solution",
                "content": "```\\nint countOperations(int num1, int num2) \\n{\\n\\tint count = 0;\\n\\n\\twhile(num1 != 0 && num2 != 0)\\n\\t{\\n\\t\\tif(num1 >= num2)\\n\\t\\t{\\n\\t\\t\\tnum1 -= num2;\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tnum2 -= num1;\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\treturn count;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nint countOperations(int num1, int num2) \\n{\\n\\tint count = 0;\\n\\n\\twhile(num1 != 0 && num2 != 0)\\n\\t{\\n\\t\\tif(num1 >= num2)\\n\\t\\t{\\n\\t\\t\\tnum1 -= num2;\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tnum2 -= num1;\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\treturn count;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2287529,
                "title": "python-efficient-solution",
                "content": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        \\n        count=0\\n        \\n        if (num1==0) | (num2==0):\\n            return 0\\n        \\n        while (num1!=0) | (num2!=0):\\n            \\n            if num1>num2:\\n                num1=num1-num2\\n                count+=1\\n                \\n            elif num1<num2:\\n                num2=num2-num1\\n                count+=1\\n                \\n            else:\\n                return count+1\\n                \\n                \\n            \\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        \\n        count=0\\n        \\n        if (num1==0) | (num2==0):\\n            return 0\\n        \\n        while (num1!=0) | (num2!=0):\\n            \\n            if num1>num2:\\n                num1=num1-num2\\n                count+=1\\n                \\n            elif num1<num2:\\n                num2=num2-num1\\n                count+=1\\n                \\n            else:\\n                return count+1\\n                \\n                \\n            \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2191979,
                "title": "javascript-simple-solution-using-recursion",
                "content": "## Steps:\\n1. if one of the numbers are zero,I don\\'t have any further operations, return noting\\n2. if num1 is bigger than num2, call the function again with `num1 = num1-num2` and add one to count one operation.\\n3. else, `num2 = num2 - num1`.\\n\\n```\\nvar countOperations = function(num1, num2) {\\n    if(num1 === 0 || num2 === 0) return null\\n    return (num1 >= num2)? 1+ countOperations(num1-num2, num2): 1+ countOperations(num1, num2-num1)\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```\\nvar countOperations = function(num1, num2) {\\n    if(num1 === 0 || num2 === 0) return null\\n    return (num1 >= num2)? 1+ countOperations(num1-num2, num2): 1+ countOperations(num1, num2-num1)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2139841,
                "title": "simple-c-soln",
                "content": "```\\n\\t\\tint cnt=0;\\n        \\n        while(num1 && num2)\\n        {\\n            if(num1>=num2)\\n                num1-=num2;\\n            else\\n                num2-=num1;\\n            cnt++;\\n        }\\n        return cnt;\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n\\t\\tint cnt=0;\\n        \\n        while(num1 && num2)\\n        {\\n            if(num1>=num2)\\n                num1-=num2;\\n            else\\n                num2-=num1;\\n            cnt++;\\n        }\\n        return cnt;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2118406,
                "title": "runtime-0ms-two-method-best-time-complexity-fastest-easy-c",
                "content": "Not better than that \\n# Method 1 -> O(log(min(a,b))\\nRuntime: 0 ms, faster than 100.00% of C++ online submissions for Count Operations to Obtain Zero.\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int maxi = max(num1,num2);\\n        int mini = min(num1,num2);\\n        int cnt=0;\\n        while(maxi !=0 &&  mini !=0){\\n            cnt += maxi/mini;\\n            maxi = maxi%mini;\\n            swap(maxi,mini);            \\n        }\\n        return cnt;\\n    }\\n};\\n\\n\\n\\n\\n```\\n\\n\\n\\n\\n\\n# Method 2 -> O(n) time\\n\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int maxi = max(num1,num2);\\n        int mini = min(num1,num2);\\n        int cnt=0;\\n        while(maxi !=0 &&  mini !=0){\\n            int temp=maxi-mini;\\n            maxi = max(temp,mini);\\n            mini = min(temp,mini);\\n            cnt++;\\n            \\n        }\\n        return cnt;\\n    }\\n};\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int maxi = max(num1,num2);\\n        int mini = min(num1,num2);\\n        int cnt=0;\\n        while(maxi !=0 &&  mini !=0){\\n            cnt += maxi/mini;\\n            maxi = maxi%mini;\\n            swap(maxi,mini);            \\n        }\\n        return cnt;\\n    }\\n};\\n\\n\\n\\n\\n```\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int maxi = max(num1,num2);\\n        int mini = min(num1,num2);\\n        int cnt=0;\\n        while(maxi !=0 &&  mini !=0){\\n            int temp=maxi-mini;\\n            maxi = max(temp,mini);\\n            mini = min(temp,mini);\\n            cnt++;\\n            \\n        }\\n        return cnt;\\n    }\\n};\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2096171,
                "title": "python-2-line-fast-recursive-solution",
                "content": "Imagine if `num1` equalled 3 and `num2` equalled 3,000,000.\\nIt would be inefficient to count 1,000,000 separate subtract operations, and more effecient to perform a division\\n\\n```\\nclass Solution(object):\\n    def countOperations(self, num1, num2):\\n        num1, num2 = min(num1, num2), max(num1, num2)\\n        return 0 if num1 == 0 else num2//num1 + self.countOperations(num1, num2 % num1)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def countOperations(self, num1, num2):\\n        num1, num2 = min(num1, num2), max(num1, num2)\\n        return 0 if num1 == 0 else num2//num1 + self.countOperations(num1, num2 % num1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2080559,
                "title": "c-100-faster-6-line-logicallly",
                "content": "**Upvote Fast Like The 100% Faster Solution**\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        if(num1==0 || num2==0){\\n            return 0;\\n        }\\n        int c=0;\\n        while(num1){\\n            if(num1>num2){\\n                num1-=num2;\\n            }\\n            else if(num2==num1){\\n                num1-=num2;\\n            }\\n            else{\\n                num2-=num1;\\n            }\\n            c++;\\n        }\\n        return c;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        if(num1==0 || num2==0){\\n            return 0;\\n        }\\n        int c=0;\\n        while(num1){\\n            if(num1>num2){\\n                num1-=num2;\\n            }\\n            else if(num2==num1){\\n                num1-=num2;\\n            }\\n            else{\\n                num2-=num1;\\n            }\\n            c++;\\n        }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2080475,
                "title": "simple-cpp-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=0;\\n        if(num1==0 || num2==0)\\n        {return 0;}\\n        \\n           while(num1!=0 || num2!=0)\\n           {\\n               if(num1>num2)\\n               {\\n                   num1=num1-num2;\\n                   count++;\\n               }\\n               else if(num2>num1)\\n               {\\n                   num2=num2-num1;\\n                   count++;\\n               }\\n               else \\n               {\\n                   num2=num2-num1;\\n                   count++;\\n                   return count;\\n               }\\n           }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=0;\\n        if(num1==0 || num2==0)\\n        {return 0;}\\n        \\n           while(num1!=0 || num2!=0)\\n           {\\n               if(num1>num2)\\n               {\\n                   num1=num1-num2;\\n                   count++;\\n               }\\n               else if(num2>num1)\\n               {\\n                   num2=num2-num1;\\n                   count++;\\n               }\\n               else \\n               {\\n                   num2=num2-num1;\\n                   count++;\\n                   return count;\\n               }\\n           }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2078763,
                "title": "c-simple-solution",
                "content": "```\\nint countOperations(int num1, int num2) {\\n        int ans=0;\\n        while(num1 && num2){\\n            if(num1>=num2){\\n                num1-=num2;\\n            }\\n            else{\\n                num2-=num1;\\n            }\\n            ans++;\\n        }\\n        return ans;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nint countOperations(int num1, int num2) {\\n        int ans=0;\\n        while(num1 && num2){\\n            if(num1>=num2){\\n                num1-=num2;\\n            }\\n            else{\\n                num2-=num1;\\n            }\\n            ans++;\\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2078648,
                "title": "0ms-100-c-two-lines-solution",
                "content": "Simplest Solution Ever ** 100 % Fast**\\n1. Using Recursion\\n```\\n  int countOperations(int num1, int num2) {\\n        if(num1==0 ||num2==0)return 0;\\n        return countOperations(abs(num1-num2),min(num1,num2))+1;\\n    }\\n```\\n\\n2. Iterative \\n``` \\nint countOperations(int num1, int num2) {\\n        int op=0,diff;        \\n        while(num1 && num2){\\n            diff = abs(num1-num2); num2= min(num1,num2); num1=diff;\\n            op++;\\n        } \\n        return op;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n  int countOperations(int num1, int num2) {\\n        if(num1==0 ||num2==0)return 0;\\n        return countOperations(abs(num1-num2),min(num1,num2))+1;\\n    }\\n```\n``` \\nint countOperations(int num1, int num2) {\\n        int op=0,diff;        \\n        while(num1 && num2){\\n            diff = abs(num1-num2); num2= min(num1,num2); num1=diff;\\n            op++;\\n        } \\n        return op;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2078598,
                "title": "c-easy-beats-100-easy-beginner-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=0;\\n        while(num1 and num2>0){\\n       if(num1>num2){\\n          num1=num1-num2;\\n       count++;\\n       }\\n        else if(num2>num1 or num2==num1){\\n            num2=num2-num1;\\n             count++;\\n        }\\n        }\\n        return count;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=0;\\n        while(num1 and num2>0){\\n       if(num1>num2){\\n          num1=num1-num2;\\n       count++;\\n       }",
                "codeTag": "Java"
            },
            {
                "id": 2077743,
                "title": "simple-c-solution-0-ms",
                "content": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int ansVar = 0;\\n        while(num1 && num2){\\n            if(num1 < num2) swap(num1, num2);\\n            \\n            ansVar = ansVar + ( num1 / num2 );\\n            num1 = num1 % num2;\\n        }\\n        \\n        return ansVar;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int ansVar = 0;\\n        while(num1 && num2){\\n            if(num1 < num2) swap(num1, num2);\\n            \\n            ansVar = ansVar + ( num1 / num2 );\\n            num1 = num1 % num2;\\n        }\\n        \\n        return ansVar;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1975555,
                "title": "sss-simple-swift-solution",
                "content": "```\\nfunc countOperations(_ num1: Int, _ num2: Int) -> Int {\\n\\tvar num1 = num1, num2 = num2, result = 0 \\n\\twhile num1 != 0 && num2 != 0 {\\n\\t\\tif num1 > num2 {\\n\\t\\t\\tnum1 = num1 - num2\\n\\t\\t} else {\\n\\t\\t\\tnum2 = num2 - num1\\n\\t\\t}\\n\\t\\tresult += 1\\n\\t}\\n\\treturn result\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nfunc countOperations(_ num1: Int, _ num2: Int) -> Int {\\n\\tvar num1 = num1, num2 = num2, result = 0 \\n\\twhile num1 != 0 && num2 != 0 {\\n\\t\\tif num1 > num2 {\\n\\t\\t\\tnum1 = num1 - num2\\n\\t\\t} else {\\n\\t\\t\\tnum2 = num2 - num1\\n\\t\\t}\\n\\t\\tresult += 1\\n\\t}\\n\\treturn result\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1974767,
                "title": "simple-maths-c-fast",
                "content": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int x = max(num1, num2);\\n        int y = min(num1,num2), temp;\\n        int ans=0;\\n        while(x!=0 &&y!=0)\\n        {\\n            ans+=(x/y);\\n            temp =x;\\n            x=max(y,x%y);\\n            y=min(y,temp%y);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int x = max(num1, num2);\\n        int y = min(num1,num2), temp;\\n        int ans=0;\\n        while(x!=0 &&y!=0)\\n        {\\n            ans+=(x/y);\\n            temp =x;\\n            x=max(y,x%y);\\n            y=min(y,temp%y);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1911332,
                "title": "python3-math-solution-faster-than-99-35-with-explanation",
                "content": "Let\\'s analyze the case of num1 = 10, num2 = 3\\n\\nAt first \\n10 / 3 = 3\\n10 % 3 = 1\\n\\nthat mean we need 3 steps to make 10 lower than 3 then we flip the number and start again\\nmeaning we forget about 10 and 3 and start with completely new num1 = 3, num2 = 1\\nand start again till one of them = 0\\n\\n![image](https://assets.leetcode.com/users/images/7d69b12b-fe5c-48b4-b00b-a2f32d9f6e87_1649008236.3773103.png)\\n\\n```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        \\n        # this important here in case one of them equal 0 or both equal 0 \\n\\t\\t# in this case we will not enter while loop\\n\\t\\tcnt = 0\\n        while min(num1, num2) > 0:\\n            if num1 >= num2:\\n                cnt += num1 // num2\\n                num1 = num1 % num2\\n            else:\\n                cnt += num2 // num1\\n                num2 = num2 % num1\\n        \\n        return cnt\\n```",
                "solutionTags": [
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        \\n        # this important here in case one of them equal 0 or both equal 0 \\n\\t\\t# in this case we will not enter while loop\\n\\t\\tcnt = 0\\n        while min(num1, num2) > 0:\\n            if num1 >= num2:\\n                cnt += num1 // num2\\n                num1 = num1 % num2\\n            else:\\n                cnt += num2 // num1\\n                num2 = num2 % num1\\n        \\n        return cnt\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1833893,
                "title": "java-solution",
                "content": "```java\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int c=0;\\n        while(num1!=0&&num2!=0)\\n        {\\n            if(num1>=num2)\\n                num1=num1-num2;\\n            else\\n                num2=num2-num1;\\n            c++;\\n        }\\n        return c;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int countOperations(int num1, int num2) {\\n        int c=0;\\n        while(num1!=0&&num2!=0)\\n        {\\n            if(num1>=num2)\\n                num1=num1-num2;\\n            else\\n                num2=num2-num1;\\n            c++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1828129,
                "title": "beginner-friendly-python-solution",
                "content": "```\\nclass Solution(object):\\n    def countOperations(self, num1, num2):\\n        count=0\\n        while num1!=0 and num2!=0:\\n            count+=1\\n            if num1 >= num2:\\n                num1 -= num2\\n            else:\\n                num2 -= num1\\n        return count\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def countOperations(self, num1, num2):\\n        count=0\\n        while num1!=0 and num2!=0:\\n            count+=1\\n            if num1 >= num2:\\n                num1 -= num2\\n            else:\\n                num2 -= num1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1828117,
                "title": "beginner-friendly-javascript-solution",
                "content": "```\\n/**\\n * @param {number} num1\\n * @param {number} num2\\n * @return {number}\\n */\\nvar countOperations = function(num1, num2) {\\n    let count = 0;\\n    while (num1 !== 0 && num2 !== 0) {\\n        if (num1 <= num2) num2 -= num1;\\n        else num1 -= num2;\\n        count++;\\n    }\\n    return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num1\\n * @param {number} num2\\n * @return {number}\\n */\\nvar countOperations = function(num1, num2) {\\n    let count = 0;\\n    while (num1 !== 0 && num2 !== 0) {\\n        if (num1 <= num2) num2 -= num1;\\n        else num1 -= num2;\\n        count++;\\n    }\\n    return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1826303,
                "title": "c-solution-100-faster-and-only-5-8mb-usage",
                "content": "```\\nint countOperations(int num1, int num2) {\\n        int count = 0;\\n        \\n        while(1) {\\n            if(num1 == 0 or num2 == 0) break;\\n            if(num1 >= num2) num1 -= num2;\\n            else num2 -= num1;\\n            count++;\\n        }\\n        return count;\\n }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint countOperations(int num1, int num2) {\\n        int count = 0;\\n        \\n        while(1) {\\n            if(num1 == 0 or num2 == 0) break;\\n            if(num1 >= num2) num1 -= num2;\\n            else num2 -= num1;\\n            count++;\\n        }\\n        return count;\\n }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1821291,
                "title": "100-faster-in-c",
                "content": "\\'\\'\\'class Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=0;\\n        while(num1 !=0 && num2!=0)\\n        {\\n            count++;\\n            if(num1>=num2)\\n                num1-=num2;\\n            else if(num2>=num1)\\n                num2-=num1;\\n        }\\n        return count;\\n    }\\n};\\'\\'\\'",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=0;\\n        while(num1 !=0 && num2!=0)\\n        {\\n            count++;\\n            if(num1>=num2)\\n                num1-=num2;\\n            else if(num2>=num1)\\n                num2-=num1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1812553,
                "title": "100-faster-simplest-approach-c",
                "content": "**AN UPVOTE WOULD BE HIGHLY APPERICIATED**\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=0;\\n        if(num1==0 || num2==0){\\n            return 0;\\n        }\\n        while(num1!=num2){\\n            if(num1>num2){\\n                num1=num1-num2;\\n            }else{\\n                num2=num2-num1;\\n            }count++;\\n        }return count+1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=0;\\n        if(num1==0 || num2==0){\\n            return 0;\\n        }\\n        while(num1!=num2){\\n            if(num1>num2){\\n                num1=num1-num2;\\n            }else{\\n                num2=num2-num1;\\n            }count++;\\n        }return count+1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1800875,
                "title": "easy-c-solution-0ms-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count = 0;\\n        while(num1 != 0 && num2 != 0){\\n            if(num1 > num2){\\n                num1 = num1 - num2;\\n                count++;\\n            }\\n            else{\\n                num2 = num2 - num1;\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count = 0;\\n        while(num1 != 0 && num2 != 0){\\n            if(num1 > num2){\\n                num1 = num1 - num2;\\n                count++;\\n            }\\n            else{\\n                num2 = num2 - num1;\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1795993,
                "title": "c-faster-than-90",
                "content": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int c=0;\\n        if((num1==0)||(num2==0)) return c;\\n        while(c>=0){\\n            if(num1>num2){\\n                num1 = num1-num2;\\n                c++;\\n                if(num1==0) break;\\n            }\\n            else if(num1<num2){\\n                num2 = num2-num1;\\n                c++;\\n                if(num2==0) break;\\n            }\\n            else if(num1==num2){\\n                c++;\\n                break;\\n            }\\n        }\\n        return c;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int c=0;\\n        if((num1==0)||(num2==0)) return c;\\n        while(c>=0){\\n            if(num1>num2){\\n                num1 = num1-num2;\\n                c++;\\n                if(num1==0) break;\\n            }\\n            else if(num1<num2){\\n                num2 = num2-num1;\\n                c++;\\n                if(num2==0) break;\\n            }\\n            else if(num1==num2){\\n                c++;\\n                break;\\n            }\\n        }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1794954,
                "title": "java-solution-runtime-2ms-less-than-95",
                "content": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        if(num1==0 || num2==0) return 0;\\n        int c=1;\\n        while((num1-num2)!=0){\\n            if(num1>num2){\\n                num1=num1-num2;\\n            }\\n            else{\\n                num2=num2-num1;\\n            }\\n            c++;\\n        }\\n        return c;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int countOperations(int num1, int num2) {\\n        if(num1==0 || num2==0) return 0;\\n        int c=1;\\n        while((num1-num2)!=0){\\n            if(num1>num2){\\n                num1=num1-num2;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1780696,
                "title": "c-simple",
                "content": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int cnt=0;\\n        while(num1>0 &&num2>0){\\n            cnt++;\\n            if(num1>num2){//1st condition\\n                num1-=num2;\\n            }else{//second conditionn\\n                num2-=num1;\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int cnt=0;\\n        while(num1>0 &&num2>0){\\n            cnt++;\\n            if(num1>num2){//1st condition\\n                num1-=num2;\\n            }else{//second conditionn\\n                num2-=num1;\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1778477,
                "title": "simple-easy-solution-by-python-3",
                "content": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        count = 0\\n        while num1 > 0 and num2 > 0:\\n            if num1 < num2:\\n                num1, num2 = num2, num1\\n            num1 -= num2\\n            count += 1\\n\\n        return count\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        count = 0\\n        while num1 > 0 and num2 > 0:\\n            if num1 < num2:\\n                num1, num2 = num2, num1\\n            num1 -= num2\\n            count += 1\\n\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1772118,
                "title": "jai-s-solution",
                "content": "```class Solution {\\n    public int countOperations(int num1, int num2) {\\n        \\n        int steps = 0;\\n        while(num1 != 0 && num2 != 0){\\n            if(num1 > num2){\\n                num1 -= num2;\\n            }else{\\n                num2 -= num1;\\n            }\\n            \\n            steps++;\\n        }\\n        \\n        return steps;\\n    }\\n}```\\n\\nThis is my code! this runs very fast !",
                "solutionTags": [
                    "Array",
                    "Iterator"
                ],
                "code": "```class Solution {\\n    public int countOperations(int num1, int num2) {\\n        \\n        int steps = 0;\\n        while(num1 != 0 && num2 != 0){\\n            if(num1 > num2){\\n                num1 -= num2;\\n            }else{\\n                num2 -= num1;\\n            }\\n            \\n            steps++;\\n        }\\n        \\n        return steps;\\n    }\\n}```",
                "codeTag": "Java"
            },
            {
                "id": 1771675,
                "title": "python-using-while-loop",
                "content": "```python\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        count = 0\\n        while num1 != 0 and num2 != 0:\\n            if num1 >= num2:\\n                num1 = num1 - num2\\n            else:\\n                num2 = num2 - num1\\n            count += 1\\n        return count\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```python\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        count = 0\\n        while num1 != 0 and num2 != 0:\\n            if num1 >= num2:\\n                num1 = num1 - num2\\n            else:\\n                num2 = num2 - num1\\n            count += 1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1768673,
                "title": "python-easy-two-solutions-loop-recursive",
                "content": "\\n```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        count = 0\\n        while num1 and num2:\\n            if num1 > num2: num1 -= num2\\n            else: num2 -= num1\\n            count += 1\\n        return count\\n```\\n**Recursive Approach**\\n\\n```\\nclass Solution:\\n    def __init__(self):\\n        self.count = 0\\n    def countOperations(self, num1: int, num2: int):\\n        if not (num1 and num2): return self.count\\n        self.count += 1\\n        return self.countOperations(abs(num1-num2),min(num1,num2))\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        count = 0\\n        while num1 and num2:\\n            if num1 > num2: num1 -= num2\\n            else: num2 -= num1\\n            count += 1\\n        return count\\n```\n```\\nclass Solution:\\n    def __init__(self):\\n        self.count = 0\\n    def countOperations(self, num1: int, num2: int):\\n        if not (num1 and num2): return self.count\\n        self.count += 1\\n        return self.countOperations(abs(num1-num2),min(num1,num2))\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1768663,
                "title": "c-simplest-solution-explained",
                "content": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        \\n        int count =0;\\n        while(num1 != 0 && num2 != 0)\\n        {\\n            if(num1 >= num2)\\n            {\\n                num1 = num1 - num2;\\n                count++;\\n            }\\n            else\\n            {\\n                num2 = num2 - num1;\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```\\n**Do upvote If u liked it. Happy coding.**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        \\n        int count =0;\\n        while(num1 != 0 && num2 != 0)\\n        {\\n            if(num1 >= num2)\\n            {\\n                num1 = num1 - num2;\\n                count++;\\n            }\\n            else\\n            {\\n                num2 = num2 - num1;\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1768653,
                "title": "c-iterative-and-recursive-solution",
                "content": "#### Iterative Solution\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint countOperations(int num1, int num2) {\\n\\t\\t\\tint c = 0;\\n\\t\\t\\twhile(num1 != 0 && num2 != 0){\\n\\t\\t\\t\\tif(num1 >= num2){\\n\\t\\t\\t\\t\\tnum1 -= num2;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\tnum2 -= num1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tc++;\\n\\t\\t\\t}\\n\\t\\t\\treturn c;\\n\\t\\t}\\n\\t};\\n\\t\\n#### Recursive Solution\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint countOperations(int num1, int num2) {\\n\\t\\t\\tif(num1 == 0 || num2 == 0){\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t}\\n\\t\\t\\telse if(num1 >= num2){\\n\\t\\t\\t\\treturn 1 + countOperations(num1 - num2, num2);\\n\\t\\t\\t}\\n\\t\\t\\treturn 1 + countOperations(num1, num2 - num1);\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion",
                    "Iterator"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint countOperations(int num1, int num2) {\\n\\t\\t\\tint c = 0;\\n\\t\\t\\twhile(num1 != 0 && num2 != 0){\\n\\t\\t\\t\\tif(num1 >= num2){\\n\\t\\t\\t\\t\\tnum1 -= num2;\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1768637,
                "title": "python3",
                "content": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        res = 0\\n        if num1<num2:\\n            return self.countOperations(num2, num1)\\n        while num1 and num2:\\n            res+=num1//num2\\n            num2, num1 = num1%num2, num2\\n        return res\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        res = 0\\n        if num1<num2:\\n            return self.countOperations(num2, num1)\\n        while num1 and num2:\\n            res+=num1//num2\\n            num2, num1 = num1%num2, num2\\n        return res\\n",
                "codeTag": "Java"
            },
            {
                "id": 1767626,
                "title": "python-recursion-division",
                "content": "```\\nclass Solution(object):\\n    def countOperations(self, num1, num2):\\n        \"\"\"\\n        :type num1: int\\n        :type num2: int\\n        :rtype: int\\n        \"\"\"\\n        if num1 == 0 or num2 == 0:\\n            return 0\\n        \\n        if num1 == num2:\\n            return 1\\n        \\n        if num2 > num1:\\n            return self.countOperations(num2, num1)\\n        \\n        steps = (num1 - 1) / num2\\n        num1 -= steps * num2 \\n        \\n        return steps + self.countOperations(num2, num1)\\n```",
                "solutionTags": [
                    "Python",
                    "Recursion"
                ],
                "code": "```\\nclass Solution(object):\\n    def countOperations(self, num1, num2):\\n        \"\"\"\\n        :type num1: int\\n        :type num2: int\\n        :rtype: int\\n        \"\"\"\\n        if num1 == 0 or num2 == 0:\\n            return 0\\n        \\n        if num1 == num2:\\n            return 1\\n        \\n        if num2 > num1:\\n            return self.countOperations(num2, num1)\\n        \\n        steps = (num1 - 1) / num2\\n        num1 -= steps * num2 \\n        \\n        return steps + self.countOperations(num2, num1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1767407,
                "title": "c-simple-solution-100-faster",
                "content": "**Method 1:** \\nnum1 =68->57->46->35->24->13->**(2)**\\nnum2 = **(11)**\\ntotal operation= no of time loop run=6\\nFor this we need to run loop for 6 times\\n\\n**Method 2: **\\ntotal operation= 68/11=6\\nnum1 = 68%11=(2)\\nnum2 = (11)\\nIn single pass we can do that.\\n\\nPlease upvote if you like my solution !!!\\uD83D\\uDE0A\\n\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n      long long int cnt=0;\\n      \\n         if(num1==0||num2==0) return 0;\\n          if(num1==num2) return 1;\\n\\t\\t  \\n        while(num1!=num2&&num1!=0&&num2!=0){\\n            if(num1>num2){\\n                cnt+=num1/num2;\\n                num1= num1%num2;\\n            }else{\\n                 cnt+=num2/num1;\\n                num2= num2%num1;\\n            }\\n        }\\n      \\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n      long long int cnt=0;\\n      \\n         if(num1==0||num2==0) return 0;\\n          if(num1==num2) return 1;\\n\\t\\t  \\n        while(num1!=num2&&num1!=0&&num2!=0){\\n            if(num1>num2){\\n                cnt+=num1/num2;\\n                num1= num1%num2;\\n            }else{\\n                 cnt+=num2/num1;\\n                num2= num2%num1;\\n            }\\n        }\\n      \\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1767122,
                "title": "easy-java-3-liner",
                "content": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        \\n        if(num1 == 0 || num2 == 0) return 0;\\n        \\n        if(num2 > num1) return 1 + countOperations(num1,num2 - num1);\\n         \\n        return 1 + countOperations(num1 - num2 ,num2);\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        \\n        if(num1 == 0 || num2 == 0) return 0;\\n        \\n        if(num2 > num1) return 1 + countOperations(num1,num2 - num1);\\n         \\n        return 1 + countOperations(num1 - num2 ,num2);\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1767035,
                "title": "c-easy-to-understand-basic-approach",
                "content": "Basic approach using while loop : \\n\\n\\nCode:\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int ct=0;\\n        while(true){\\n            if(num1==0 || num2==0){\\n                return ct;\\n            }\\n            else{\\n            if(num1>num2){\\n                num1=num1-num2;\\n                ct++;\\n            }\\n            else{\\n                num2=num2-num1;\\n                ct++;\\n            }\\n         }\\n        }\\n        return ct;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int ct=0;\\n        while(true){\\n            if(num1==0 || num2==0){\\n                return ct;\\n            }\\n            else{\\n            if(num1>num2){\\n                num1=num1-num2;\\n                ct++;\\n            }\\n            else{\\n                num2=num2-num1;\\n                ct++;\\n            }\\n         }\\n        }\\n        return ct;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1766954,
                "title": "cpp-solution-easy-and-simple-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int counter = 0;\\n        if(num1==0 || num2==0)\\n            return 0;\\n        if(num1==num2)\\n            return 1;\\n        while(num1!=0||num2!=0){\\n            if(num1>=num2)\\n                num1 = num1 - num2;\\n            else \\n                num2 = num2 - num1;\\n            counter++;\\n            if(num1==num2)\\n                return counter+1;\\n        }\\n        return counter;\\n    }\\n};\\n```\\n**Please upvote if you find this helpful**",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int counter = 0;\\n        if(num1==0 || num2==0)\\n            return 0;\\n        if(num1==num2)\\n            return 1;\\n        while(num1!=0||num2!=0){\\n            if(num1>=num2)\\n                num1 = num1 - num2;\\n            else \\n                num2 = num2 - num1;\\n            counter++;\\n            if(num1==num2)\\n                return counter+1;\\n        }\\n        return counter;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1766947,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int ans = 0;\\n        while (num1!=0 && num2!=0) {\\n            (num1 >= num2) ? (num1-=num2) : (num2-=num1);\\n            ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int ans = 0;\\n        while (num1!=0 && num2!=0) {\\n            (num1 >= num2) ? (num1-=num2) : (num2-=num1);\\n            ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1766927,
                "title": "simple-java-loop",
                "content": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        if(num1 == 0 || num2 == 0) return 0;\\n            \\n        int count = 0;\\n        while(num2 != 0 || num1 != 0){\\n            if(num1 >= num2){\\n                num1 = num1 - num2;\\n            }else if(num2 > num1){\\n                num2 = num2 - num1;\\n            }\\n            count++;\\n            if(num1 == 0 || num2 == 0){\\n                break;\\n            }\\n        }\\n        return count;\\n        \\n    }\\n}\\n\\n\\nplease upvote!\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        if(num1 == 0 || num2 == 0) return 0;\\n            \\n        int count = 0;\\n        while(num2 != 0 || num1 != 0){\\n            if(num1 >= num2){\\n                num1 = num1 - num2;\\n            }else if(num2 > num1){\\n                num2 = num2 - num1;\\n            }\\n            count++;\\n            if(num1 == 0 || num2 == 0){\\n                break;\\n            }\\n        }\\n        return count;\\n        \\n    }\\n}\\n\\n\\nplease upvote!\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1766857,
                "title": "simple-java-solution-explaination-with-minimum-code",
                "content": "if either of number 0 return 0\\nnow iterate till absolute diff of num1 and num2 >0\\njust check which one is greater and update num1 and num2 acc.\\nupdate counter.\\n```\\npublic int countOperations(int num1, int num2) {\\n        if(num1==0||num2==0) {\\n            return 0;\\n        }\\n        int op =1;\\n        while(Math.abs(num1-num2)>0 ) {\\n            op++;\\n            if(num1>num2) {\\n                num1=num1-num2;\\n            } else {\\n                num2=num2-num1;\\n            }\\n        }\\n        return op;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int countOperations(int num1, int num2) {\\n        if(num1==0||num2==0) {\\n            return 0;\\n        }\\n        int op =1;\\n        while(Math.abs(num1-num2)>0 ) {\\n            op++;\\n            if(num1>num2) {\\n                num1=num1-num2;\\n            } else {\\n                num2=num2-num1;\\n            }\\n        }\\n        return op;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1766849,
                "title": "c-simple-recursion",
                "content": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        if(num1==0 || num2==0){\\n            return 0;\\n        }\\n        if(num1==num2){\\n            return 1;\\n        }\\n        if(num1>num2){\\n            return 1+countOperations(num1-num2,num2);\\n        }\\n        else{\\n            return 1+countOperations(num2-num1,num1);\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        if(num1==0 || num2==0){\\n            return 0;\\n        }\\n        if(num1==num2){\\n            return 1;\\n        }\\n        if(num1>num2){\\n            return 1+countOperations(num1-num2,num2);\\n        }\\n        else{\\n            return 1+countOperations(num2-num1,num1);\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1766848,
                "title": "c-5-liners-fast-solution-using-modulo",
                "content": "```\\nint countOperations(int num1, int num2) \\n{\\n\\tint c=0;\\n\\twhile(num1&&num2)\\n\\t{\\n\\t\\tif(num1>=num2) c+=num1/num2,num1%=num2;\\n\\t\\telse c+=num2/num1,num2%=num1;\\n\\t}\\n\\treturn c;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint countOperations(int num1, int num2) \\n{\\n\\tint c=0;\\n\\twhile(num1&&num2)\\n\\t{\\n\\t\\tif(num1>=num2) c+=num1/num2,num1%=num2;\\n\\t\\telse c+=num2/num1,num2%=num1;\\n\\t}\\n\\treturn c;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1766833,
                "title": "javascript-solution",
                "content": "Of the two numbers if one is greater than the other, subtract the other value from it.\\n\\nCount those number of times one value reaches 0.\\n\\n```\\nvar countOperations = function(num1, num2) {\\n  let count = 0;\\n  while (num1 !== 0 && num2 !== 0) {\\n    if (num1 >= num2) num1 -= num2;\\n    else num2 -= num1;\\n    count++;\\n  }\\n  return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countOperations = function(num1, num2) {\\n  let count = 0;\\n  while (num1 !== 0 && num2 !== 0) {\\n    if (num1 >= num2) num1 -= num2;\\n    else num2 -= num1;\\n    count++;\\n  }\\n  return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1766789,
                "title": "easy-c-3-lines-solution-recursion",
                "content": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        if(num1==0 || num2==0)return 0;\\n        if(num1>num2)return 1+countOperations(num1-num2, num2);\\n        return 1+countOperations(num1, num2-num1);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        if(num1==0 || num2==0)return 0;\\n        if(num1>num2)return 1+countOperations(num1-num2, num2);\\n        return 1+countOperations(num1, num2-num1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1766772,
                "title": "java-simple",
                "content": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        \\n        if(num1==0 || num2==0)\\n        return 0;\\n        \\n        int count=0;\\n        \\n        while(num1!=0 && num2 !=0){\\n            if(num1>=num2)\\n            num1-=num2;\\n            else\\n            num2-=num1;\\n            \\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        \\n        if(num1==0 || num2==0)\\n        return 0;\\n        \\n        int count=0;\\n        \\n        while(num1!=0 && num2 !=0){\\n            if(num1>=num2)\\n            num1-=num2;\\n            else\\n            num2-=num1;\\n            \\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4083085,
                "title": "simple-c-solution",
                "content": "# Approach\\nUntil both are zeros, run the loop and subtract which one is greater\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n# Code\\n```\\nint countOperations(int num1, int num2){\\n    int ops=0;\\n    while(num1 && num2){\\n        if(num1>=num2){\\n            num1-=num2;\\n        }\\n        else{\\n            num2-=num1;\\n        }\\n        ops++;\\n    }\\n    return ops;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Number Theory"
                ],
                "code": "```\\nint countOperations(int num1, int num2){\\n    int ops=0;\\n    while(num1 && num2){\\n        if(num1>=num2){\\n            num1-=num2;\\n        }\\n        else{\\n            num2-=num1;\\n        }\\n        ops++;\\n    }\\n    return ops;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4065874,
                "title": "simple-and-very-easy-beats-100-00-users",
                "content": "# Intuition\\nFollow the Example\\n\\n# Approach\\nBruteForce\\n\\n# Complexity\\n- Time complexity:\\nO(max(num1,num2))\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n    int count =0;\\n    while(num1>0 and num2>0)\\n    {\\n        if(num1>num2)\\n        {\\n            num1 = num1-num2;\\n            count++;\\n        }\\n        else\\n        {\\n            num2 = num2-num1;\\n            count++;\\n        }\\n    }\\n    return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Enumeration",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n    int count =0;\\n    while(num1>0 and num2>0)\\n    {\\n        if(num1>num2)\\n        {\\n            num1 = num1-num2;\\n            count++;\\n        }\\n        else\\n        {\\n            num2 = num2-num1;\\n            count++;\\n        }\\n    }\\n    return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4052288,
                "title": "easy-to-understand-python3-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        count = 0\\n\\n        if num1 == 0 or num2 == 0:\\n            return 0\\n\\n        while num1 != 0 or num2 != 0:\\n            if num1 > num2:\\n                count += 1\\n                num1 -= num2\\n                if num1 == 0 or num2 == 0:\\n                    break\\n            elif num1 < num2:\\n                count += 1\\n                num2 -= num1\\n                if num1 == 0 or num2 == 0:\\n                    break\\n            else:\\n                count += 1\\n                num1 -= num2\\n                if num1 == 0 or num2 == 0:\\n                    break\\n        \\n        print(count)\\n\\n        return count\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        count = 0\\n\\n        if num1 == 0 or num2 == 0:\\n            return 0\\n\\n        while num1 != 0 or num2 != 0:\\n            if num1 > num2:\\n                count += 1\\n                num1 -= num2\\n                if num1 == 0 or num2 == 0:\\n                    break\\n            elif num1 < num2:\\n                count += 1\\n                num2 -= num1\\n                if num1 == 0 or num2 == 0:\\n                    break\\n            else:\\n                count += 1\\n                num1 -= num2\\n                if num1 == 0 or num2 == 0:\\n                    break\\n        \\n        print(count)\\n\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4050576,
                "title": "java-1ms",
                "content": "\\n# Complexity\\n- Time complexity:\\n- O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count=0;\\n        \\n        while(num1 != 0 && num2 != 0){\\n            if(num1 > num2)\\n            num1 -= num2;\\n\\n            else num2 -= num1;\\n\\n            count++;\\n        }\\n        return count;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count=0;\\n        \\n        while(num1 != 0 && num2 != 0){\\n            if(num1 > num2)\\n            num1 -= num2;\\n\\n            else num2 -= num1;\\n\\n            count++;\\n        }\\n        return count;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4040194,
                "title": "python-most-optimized-solution-easy",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe do not have to minus num1 from num2 or vice versa only once per loop. Simply calculate the `quotient` and `remainder` directly using `divmod` function (or `//` and `%`) and add quotient to ans and set `num1`/`num2` to the remainder.\\n\\nWhy?\\nBecause as long as `num1 >= num2` (or the other way around), we have to continuously minus `num2` from `num1` (This is what division is for !!!) \\n\\nI also recommend trying [780. Reaching Points](https://leetcode.com/problems/reaching-points/), after understanding this solution. That question can be solved using a similar principle.\\n\\n# Code\\n```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        ans = 0\\n        while num1 != 0 and num2 != 0:\\n            if num1 >= num2:\\n                q, num1 = divmod(num1, num2)\\n                ans += q\\n            else:\\n                q, num2 = divmod(num2, num1)\\n                ans += q\\n            \\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        ans = 0\\n        while num1 != 0 and num2 != 0:\\n            if num1 >= num2:\\n                q, num1 = divmod(num1, num2)\\n                ans += q\\n            else:\\n                q, num2 = divmod(num2, num1)\\n                ans += q\\n            \\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4036290,
                "title": "simple-code",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int countOperations(int num1, int num2) \\n    {\\n        int result,c=0;\\n        while(num1 !=0 && num2 !=0)\\n        {\\n            if(num1>=num2)\\n            {\\n                num1 -= num2;\\n                c++;\\n                if(num1 == 0)\\n                {\\n                    break;\\n                }\\n            }\\n            else\\n            {\\n                num2 -= num1;\\n                c++;\\n                if(num2 == 0)\\n                {\\n                    break;\\n                }\\n            }\\n        } \\n        return c;   \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) \\n    {\\n        int result,c=0;\\n        while(num1 !=0 && num2 !=0)\\n        {\\n            if(num1>=num2)\\n            {\\n                num1 -= num2;\\n                c++;\\n                if(num1 == 0)\\n                {\\n                    break;\\n                }\\n            }\\n            else\\n            {\\n                num2 -= num1;\\n                c++;\\n                if(num2 == 0)\\n                {\\n                    break;\\n                }\\n            }\\n        } \\n        return c;   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4031719,
                "title": "simple-java-solution-1ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int c=0;\\n        while(num1!=0 && num2!=0){\\n            if(num1>=num2)\\n                num1-=num2;\\n            else\\n                num2-=num1;\\n            c++;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int c=0;\\n        while(num1!=0 && num2!=0){\\n            if(num1>=num2)\\n                num1-=num2;\\n            else\\n                num2-=num1;\\n            c++;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4031302,
                "title": "beats-100-of-c-user-0ms-easy-to-understand-linear-time-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int cnt=0;\\n        while(num1!=0 && num2!=0){\\n            if(num1>=num2){\\n                num1-=num2;\\n                cnt+=1;\\n            }else{\\n                num2-=num1;\\n                cnt+=1;\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int cnt=0;\\n        while(num1!=0 && num2!=0){\\n            if(num1>=num2){\\n                num1-=num2;\\n                cnt+=1;\\n            }else{\\n                num2-=num1;\\n                cnt+=1;\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4018957,
                "title": "countoperations",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=0;\\n        while(num1!=0 && num2!=0){\\n            if(num1 > num2){\\n                num1 = num1 - num2;\\n                count++;\\n            }else{\\n                num2 =num2-num1;\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=0;\\n        while(num1!=0 && num2!=0){\\n            if(num1 > num2){\\n                num1 = num1 - num2;\\n                count++;\\n            }else{\\n                num2 =num2-num1;\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4017478,
                "title": "python-simple-solution-bruteforce",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```python\\nclass Solution:\\n  def countOperations(self, num1: int, num2: int) -> int:\\n    count = 0\\n    while num1 and num2:\\n      if num1 >= num2:\\n        num1 -= num2\\n      else:\\n        num2 -= num1\\n      count += 1\\n    return count\\n```\\n",
                "solutionTags": [
                    "Python3",
                    "Math"
                ],
                "code": "```python\\nclass Solution:\\n  def countOperations(self, num1: int, num2: int) -> int:\\n    count = 0\\n    while num1 and num2:\\n      if num1 >= num2:\\n        num1 -= num2\\n      else:\\n        num2 -= num1\\n      count += 1\\n    return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4017179,
                "title": "clean-and-intuitive-java-code-iterative-and-reecursive-self-explanatory-very-easy",
                "content": "\\n# Code\\n```\\n//Iterative Approach\\n\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n      int cnt=0;\\n      while(num1!=0 && num2!=0)\\n      {\\n          if(num1>=num2)\\n           num1=num1-num2;\\n          else\\n           num2=num2-num1; \\n          \\n          cnt++;\\n      }   \\n      return cnt;\\n    }\\n}\\n\\n```\\n\\n```\\n\\n\\n//Recursive Approach\\n\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n      if(num1==0 || num2==0)\\n        return 0; //Target Acheived,No More Operations Required so return 0\\n       \\n      if(num1>=num2)  \\n        return 1+countOperations(num1-num2,num2) ;\\n      else\\n        return 1+countOperations(num1,num2-num1) ;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math",
                    "Recursion",
                    "Iterator"
                ],
                "code": "```\\n//Iterative Approach\\n\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n      int cnt=0;\\n      while(num1!=0 && num2!=0)\\n      {\\n          if(num1>=num2)\\n           num1=num1-num2;\\n          else\\n           num2=num2-num1; \\n          \\n          cnt++;\\n      }   \\n      return cnt;\\n    }\\n}\\n\\n```\n```\\n\\n\\n//Recursive Approach\\n\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n      if(num1==0 || num2==0)\\n        return 0; //Target Acheived,No More Operations Required so return 0\\n       \\n      if(num1>=num2)  \\n        return 1+countOperations(num1-num2,num2) ;\\n      else\\n        return 1+countOperations(num1,num2-num1) ;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4010313,
                "title": "c",
                "content": "# Code\\n```\\nint countOperations(int num1, int num2){\\nint count=0;\\nwhile(num1!=0&&num2!=0)\\n{  \\n    count++;\\n    if(num1>=num2)\\n    num1-=num2;\\n    else\\n    num2-=num1;\\n}\\nreturn count;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint countOperations(int num1, int num2){\\nint count=0;\\nwhile(num1!=0&&num2!=0)\\n{  \\n    count++;\\n    if(num1>=num2)\\n    num1-=num2;\\n    else\\n    num2-=num1;\\n}\\nreturn count;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4000462,
                "title": "java-solution-96-beats",
                "content": "\\n# Complexity\\n- Time complexity:O(min(m,n))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count = 0;\\n\\n        while(num1!=0 && num2!=0){\\n            count++;\\n            if(num1>=num2){\\n                num1-=num2;\\n                continue;\\n            }\\n            num2-=num1;\\n        }\\n\\n\\n        return count ;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count = 0;\\n\\n        while(num1!=0 && num2!=0){\\n            count++;\\n            if(num1>=num2){\\n                num1-=num2;\\n                continue;\\n            }\\n            num2-=num1;\\n        }\\n\\n\\n        return count ;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3999300,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        if (num1 == 0 || num2 == 0)\\n        {\\n            return 0;\\n        }\\n        if (num1 > num2)\\n        {\\n            num1 -= num2;\\n        }\\n        else\\n        {\\n            num2 -= num1;\\n        }\\n        return 1 + countOperations(num1, num2);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        if (num1 == 0 || num2 == 0)\\n        {\\n            return 0;\\n        }\\n        if (num1 > num2)\\n        {\\n            num1 -= num2;\\n        }\\n        else\\n        {\\n            num2 -= num1;\\n        }\\n        return 1 + countOperations(num1, num2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3998247,
                "title": "solution-using-python",
                "content": "# Complexity\\n- Time complexity: 54ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 13.23 MB\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def countOperations(self, num1, num2):\\n        \"\"\"\\n        :type num1: int\\n        :type num2: int\\n        :rtype: int\\n        \"\"\"\\n        count = 0\\n        if num1 == 0 or num2 == 0:\\n            return count\\n        \\n        while num1!=0 or num2!=0:\\n            if num1 > num2:\\n                num1 = num1 - num2\\n                count += 1\\n            elif num2 > num1:\\n                num2 = num2 - num1\\n                count += 1\\n            elif num1 == num2:\\n                num1 = num1 - num2\\n                num2 = 0\\n                count += 1\\n            \\n        return count\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def countOperations(self, num1, num2):\\n        \"\"\"\\n        :type num1: int\\n        :type num2: int\\n        :rtype: int\\n        \"\"\"\\n        count = 0\\n        if num1 == 0 or num2 == 0:\\n            return count\\n        \\n        while num1!=0 or num2!=0:\\n            if num1 > num2:\\n                num1 = num1 - num2\\n                count += 1\\n            elif num2 > num1:\\n                num2 = num2 - num1\\n                count += 1\\n            elif num1 == num2:\\n                num1 = num1 - num2\\n                num2 = 0\\n                count += 1\\n            \\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3989643,
                "title": "simple-efficient-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nBasic approch\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\nRun a loop while subtracting the smaller number from larger one till we get 0. Loop terminates when either of the numbers reduced to zero.\\n\\n\\n# Complexity\\n- Time complexity:O(max_num)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunc countOperations(num1 int, num2 int) int {\\n    count := 0\\n\\n    for num1 != 0 && num2 != 0 {\\n\\n        if num1 >= num2 {\\n            num1 = num1 - num2\\n        } else {\\n            num2 = num2 - num1  \\n        } \\n        count++\\n    }\\n\\n\\n    return count \\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc countOperations(num1 int, num2 int) int {\\n    count := 0\\n\\n    for num1 != 0 && num2 != 0 {\\n\\n        if num1 >= num2 {\\n            num1 = num1 - num2\\n        } else {\\n            num2 = num2 - num1  \\n        } \\n        count++\\n    }\\n\\n\\n    return count \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3984126,
                "title": "easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nIf either of the number is already zero, we directly return 0 as no steps are needed.\\nElse we find number of steps taken to equalise num1 and num2 by the subtracting and then add 1 to the final count as it will be count of num1-num2 when num1=num2 so that either of them finally becomes zero! \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int cnt=0;\\n        if(num1==0 || num2==0)return 0;\\n        while(num1!=num2){\\n            if(num1>num2){\\n                num1=num1-num2;\\n                cnt++;\\n            }\\n            else if(num2>num1){\\n                num2=num2-num1;\\n                cnt++;\\n            }\\n        }\\n        return cnt+1;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int cnt=0;\\n        if(num1==0 || num2==0)return 0;\\n        while(num1!=num2){\\n            if(num1>num2){\\n                num1=num1-num2;\\n                cnt++;\\n            }\\n            else if(num2>num1){\\n                num2=num2-num1;\\n                cnt++;\\n            }\\n        }\\n        return cnt+1;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3981947,
                "title": "while-loop-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count=0;\\n        while(num1!=0 && num2!=0){\\n            if(num1>=num2)\\n            num1=num1-num2 ; \\n            else{\\n                num2=num2-num1 ;\\n            }\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count=0;\\n        while(num1!=0 && num2!=0){\\n            if(num1>=num2)\\n            num1=num1-num2 ; \\n            else{\\n                num2=num2-num1 ;\\n            }\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3980322,
                "title": "java-simple-and-clear-solution",
                "content": "\\n# Complexity\\n- Time complexity:  $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:  $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countOperations(int n1, int n2) {\\n        int k = 0;\\n\\n        while(n1 != n2){\\n            if(n1 == 0 && n2 != 0 || n1 != 0 && n2 == 0) return 0;\\n            k++;\\n\\n            if(n1 > n2)\\n              n1 -= n2;\\n            else n2 -= n1;\\n        }\\n\\n        return (n1 == 0) ? k : k+1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int n1, int n2) {\\n        int k = 0;\\n\\n        while(n1 != n2){\\n            if(n1 == 0 && n2 != 0 || n1 != 0 && n2 == 0) return 0;\\n            k++;\\n\\n            if(n1 > n2)\\n              n1 -= n2;\\n            else n2 -= n1;\\n        }\\n\\n        return (n1 == 0) ? k : k+1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3979647,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count = 0;\\n        while (num1>0 && num2>0) {\\n            if(num1>=num2) num1 -= num2;\\n            else num2 -= num1;\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int count = 0;\\n        while (num1>0 && num2>0) {\\n            if(num1>=num2) num1 -= num2;\\n            else num2 -= num1;\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3978400,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int counter = 0;\\n        while(num1!=0 && num2!=0) {\\n            if(num1 < num2) {\\n                num2 = num2-num1;\\n                counter++;\\n            }\\n            if(num1 > num2) {\\n                num1 = num1-num2;\\n                counter++;\\n            }\\n            if(num1 == num2) {\\n                counter++;\\n                break;\\n            }\\n        } \\n        return counter;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int counter = 0;\\n        while(num1!=0 && num2!=0) {\\n            if(num1 < num2) {\\n                num2 = num2-num1;\\n                counter++;\\n            }\\n            if(num1 > num2) {\\n                num1 = num1-num2;\\n                counter++;\\n            }\\n            if(num1 == num2) {\\n                counter++;\\n                break;\\n            }\\n        } \\n        return counter;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3955020,
                "title": "easy-java-solution-with-great-runtime-and-memory-usage",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public int countOperations(int num1, int num2) \\n    {\\n        int c = 0;\\n        while(num1>0 && num2>0)\\n        {\\n            if(num1>num2)\\n            {\\n                num1 = num1-num2;\\n                c++;\\n            }\\n            else\\n            {\\n                num2 = num2-num1;\\n                c++;\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int countOperations(int num1, int num2) \\n    {\\n        int c = 0;\\n        while(num1>0 && num2>0)\\n        {\\n            if(num1>num2)\\n            {\\n                num1 = num1-num2;\\n                c++;\\n            }\\n            else\\n            {\\n                num2 = num2-num1;\\n                c++;\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3936846,
                "title": "simple-and-easy-to-understand",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int opr=0; \\n        while(num1!=0 && num2!=0)\\n        { \\n            if(num1>num2)\\n            {\\n                num1-=num2; \\n                opr++;\\n            }\\n            else if(num2>num1)\\n            {\\n                num2-=num1; \\n                opr++; \\n            }\\n            else\\n            {\\n                num1-=num2; \\n                opr++; \\n            }\\n\\n        }\\n        return opr;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int opr=0; \\n        while(num1!=0 && num2!=0)\\n        { \\n            if(num1>num2)\\n            {\\n                num1-=num2; \\n                opr++;\\n            }\\n            else if(num2>num1)\\n            {\\n                num2-=num1; \\n                opr++; \\n            }\\n            else\\n            {\\n                num1-=num2; \\n                opr++; \\n            }\\n\\n        }\\n        return opr;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3936583,
                "title": "c-simple-and-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. First check if the input i.e num1 or num2 == 0,do not compute, just return 0.\\n2. Traverse through while loop by following the condition of num1 != num2.\\n3. update the num1 or num2 according to which is greater, if num1 > num2 then --> num1 = num1 - num2(num1 -= num2).\\n4. update the num2 or num1 according to which is greater, if num1 < num2 then --> num2 = num2 - num1(num2 -= num1).\\n5. The while loop will terminate when num1 == num2 and we want one of them to be 0.\\n6. So one more count will be stored for making one {0}.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=0;\\n        if(num1 == 0 || num2 == 0) return count;\\n        while(num1 != num2)\\n        {\\n            if(num1 > num2){\\n                num1 -= num2;\\n            }\\n            else{\\n                num2 -= num1;\\n            }\\n            count++;\\n        }\\n        return ++count;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=0;\\n        if(num1 == 0 || num2 == 0) return count;\\n        while(num1 != num2)\\n        {\\n            if(num1 > num2){\\n                num1 -= num2;\\n            }\\n            else{\\n                num2 -= num1;\\n            }\\n            count++;\\n        }\\n        return ++count;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3935005,
                "title": "c-python-optimized-approach-too-easy-fully-explained",
                "content": "# Approach\\n```\\nint num1 = 20;\\nint num2 = 8;\\n```\\n\\nNow, let\\'s go through the function step by step:\\n\\n1. Initialize the variable `cnt` to 0.\\n\\n2. Enter the `while` loop while both `num1` and `num2` are not 0:\\n   - In the first iteration, `num1` is 20 and `num2` is 8. Since `num1` is greater than `num2`, subtract `num2` from `num1`: `num1 = 20 - 8 = 12`. Increment `cnt` to 1.\\n   - In the second iteration, `num1` is 12 and `num2` is 8. Since `num1` is still greater than `num2`, subtract `num2` from `num1`: `num1 = 12 - 8 = 4`. Increment `cnt` to 2.\\n   - In the third iteration, `num1` is 4 and `num2` is 8. Since `num1` is less than `num2`, subtract `num1` from `num2`: `num2 = 8 - 4 = 4`. Increment `cnt` to 3.\\n\\n3. Now, one of the numbers becomes 0 (`num1` in this case), so the loop exits.\\n\\n4. The function returns the value of `cnt`, which is 4.\\n\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n``` C++ []\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int cnt = 0;\\n        while(num1 != 0 && num2 != 0){\\n            if(num1 > num2)\\n                num1 -= num2;\\n            else if(num1 < num2)\\n                num2 -= num1;\\n            else \\n                num1 -= num2;\\n            cnt++;\\n        }\\n    return cnt;\\n    }\\n};\\n```\\n``` Python []\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        cnt = 0\\n        while num1 != 0 and num2 != 0:\\n            if num1 > num2:\\n                num1 -= num2\\n            elif num2 > num1:\\n                num2 -= num1\\n            else:\\n                num1 -= num2\\n            cnt += 1\\n        return cnt\\n```",
                "solutionTags": [
                    "C++",
                    "Python3"
                ],
                "code": "```\\nint num1 = 20;\\nint num2 = 8;\\n```\n``` C++ []\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int cnt = 0;\\n        while(num1 != 0 && num2 != 0){\\n            if(num1 > num2)\\n                num1 -= num2;\\n            else if(num1 < num2)\\n                num2 -= num1;\\n            else \\n                num1 -= num2;\\n            cnt++;\\n        }\\n    return cnt;\\n    }\\n};\\n```\n``` Python []\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        cnt = 0\\n        while num1 != 0 and num2 != 0:\\n            if num1 > num2:\\n                num1 -= num2\\n            elif num2 > num1:\\n                num2 -= num1\\n            else:\\n                num1 -= num2\\n            cnt += 1\\n        return cnt\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3932968,
                "title": "using-python",
                "content": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        count = 0\\n        while num1 > 0 and num2 > 0:\\n            if num1 > num2:\\n                num1 = num1 - num2\\n            else:\\n                num2 = num2 - num1\\n            count = count + 1\\n        return count\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        count = 0\\n        while num1 > 0 and num2 > 0:\\n            if num1 > num2:\\n                num1 = num1 - num2\\n            else:\\n                num2 = num2 - num1\\n            count = count + 1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3928952,
                "title": "java-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic int countOperations(int num1, int num2) {\\n        int count = 0;\\n        while(num1 > 0 && num2 >0) {\\n            //System.out.println(num1 + \" \" + num2 );\\n            count++;\\n            if (num1 > num2) {\\n                num1 = num1-num2;\\n            } else if (num2>num1) {\\n                num2 = num2-num1;\\n            } else {\\n                return count;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\npublic int countOperations(int num1, int num2) {\\n        int count = 0;\\n        while(num1 > 0 && num2 >0) {\\n            //System.out.println(num1 + \" \" + num2 );\\n            count++;\\n            if (num1 > num2) {\\n                num1 = num1-num2;\\n            } else if (num2>num1) {\\n                num2 = num2-num1;\\n            } else {\\n                return count;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3927347,
                "title": "c-solution-beats-100-users-with-least-memory-required",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: 0ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 5.9mb\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=1;\\n        if((num1>=num2 || num2>=num1) && num1!=0 && num2!=0){\\n            while(num1!=num2){\\n                if(num1>num2){\\n                    num1=num1-num2;\\n                }\\n                else{\\n                    num2=num2-num1;\\n                }\\n                count++;\\n            }\\n            return count;\\n        }\\n        else{\\n            return 0;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=1;\\n        if((num1>=num2 || num2>=num1) && num1!=0 && num2!=0){\\n            while(num1!=num2){\\n                if(num1>num2){\\n                    num1=num1-num2;\\n                }\\n                else{\\n                    num2=num2-num1;\\n                }\\n                count++;\\n            }\\n            return count;\\n        }\\n        else{\\n            return 0;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3927137,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int ans =0;\\n        while (num1 > 0 && num2 > 0){\\n            if (num1 >= num2){\\n                num1 = num1-num2;\\n            }\\n            else{\\n                num2 = num2 - num1;\\n            }\\n            ans++;\\n        }    \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int ans =0;\\n        while (num1 > 0 && num2 > 0){\\n            if (num1 >= num2){\\n                num1 = num1-num2;\\n            }\\n            else{\\n                num2 = num2 - num1;\\n            }\\n            ans++;\\n        }    \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3922151,
                "title": "java-easy-solution-recursion-easy-to-understand",
                "content": "# Intuition\\nHere, We have to find number of steps to make any number to zero.\\nMay be there various approach to solve this issue but I will use Recursion to minimize the steps.\\n\\n# Approach\\nThe main thing is to make recurrence relation in Recursive approach.\\n1- First you have to define base condition to terminate recursive call.\\n2- Since I know either num1 or num2 would be zero at last. Hence base condition would be if one of them is zero then return number of count.\\n3- If num1 >= num2 then subtract num 2 from num1 (num1 - num2) and num2 would be remain same.\\n4- And if above is not true then subtract num1 from num2 (num2 - num1) and here num1 would be same as previous while doing recursive call.\\n5- Return or print value. \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public static int countOperations(int num1, int num2) {\\n\\t\\treturn helper(num1, num2, 0);\\n\\t}\\n\\n\\tpublic static int helper(int num1, int num2, int countSteps) {\\n\\t\\tif (num1 == 0 || num2 == 0) {\\n\\t\\t\\treturn countSteps;\\n\\t\\t}\\n\\n\\t\\tif (num1 >= num2) {\\n\\t\\t\\treturn helper(num1 - num2, num2, countSteps + 1);\\n\\t\\t}\\n\\t\\treturn helper(num1, num2 - num1, countSteps + 1);\\n\\t}\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public static int countOperations(int num1, int num2) {\\n\\t\\treturn helper(num1, num2, 0);\\n\\t}\\n\\n\\tpublic static int helper(int num1, int num2, int countSteps) {\\n\\t\\tif (num1 == 0 || num2 == 0) {\\n\\t\\t\\treturn countSteps;\\n\\t\\t}\\n\\n\\t\\tif (num1 >= num2) {\\n\\t\\t\\treturn helper(num1 - num2, num2, countSteps + 1);\\n\\t\\t}\\n\\t\\treturn helper(num1, num2 - num1, countSteps + 1);\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3919836,
                "title": "qs-2169-easy-short-java-sol-beats-93-21-in-runtime-94-96-in-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        if(num1==0 || num2==0)\\n        return 0;\\n        int count=1;\\n        while(num1!=num2)\\n        {\\n            if(num1>num2)\\n            num1=num1-num2;\\n            else\\n            num2=num2-num1;\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        if(num1==0 || num2==0)\\n        return 0;\\n        int count=1;\\n        while(num1!=num2)\\n        {\\n            if(num1>num2)\\n            num1=num1-num2;\\n            else\\n            num2=num2-num1;\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3918354,
                "title": "c-easy-worst-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=0;\\n        while(num1>0&&num2>0)\\n        {\\n            if(num1==num2)\\n            {\\n                num1=num1-num2;\\n            }\\n            else if(num1>num2)\\n            {\\n                num1=num1-num2;\\n            }\\n            else if(num2-num1)\\n            {\\n                num2=num2-num1;\\n            }\\n            count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=0;\\n        while(num1>0&&num2>0)\\n        {\\n            if(num1==num2)\\n            {\\n                num1=num1-num2;\\n            }\\n            else if(num1>num2)\\n            {\\n                num1=num1-num2;\\n            }\\n            else if(num2-num1)\\n            {\\n                num2=num2-num1;\\n            }\\n            count++;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3916765,
                "title": "easiest-solution-with-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=1;\\n        if(num1==0 || num2==0) return 0;\\n        while(num1!=num2){\\n            if(num1>num2)\\n            {num1-=num2;\\n            count++;}\\n            if(num2>num1)\\n            {num2-=num1;\\n            count++;}\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int count=1;\\n        if(num1==0 || num2==0) return 0;\\n        while(num1!=num2){\\n            if(num1>num2)\\n            {num1-=num2;\\n            count++;}\\n            if(num2>num1)\\n            {num2-=num1;\\n            count++;}\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3916495,
                "title": "easy-and-understandable-solution-for-beginners",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    func countOperations(_ num1: Int, _ num2: Int) -> Int {\\n        var numFirst = num1\\n        var numSecond = num2\\n        var answer = 0\\n\\n        while numFirst != 0 && numSecond != 0{\\n            if numFirst >= numSecond {\\n                numFirst -= numSecond\\n            } else {\\n                numSecond -= numFirst\\n            }\\n            answer += 1\\n        }\\n        return answer\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func countOperations(_ num1: Int, _ num2: Int) -> Int {\\n        var numFirst = num1\\n        var numSecond = num2\\n        var answer = 0\\n\\n        while numFirst != 0 && numSecond != 0{\\n            if numFirst >= numSecond {\\n                numFirst -= numSecond\\n            } else {\\n                numSecond -= numFirst\\n            }\\n            answer += 1\\n        }\\n        return answer\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3916344,
                "title": "c-100-faster-euclidean-algorithm-gcd",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(log(min(a, b))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\tint countOperations(int num1, int num2) {\\n\\n\\t\\tint ans = 0;\\n\\n\\t\\twhile(num2 != 0 && num1 != 0){\\n\\n\\t\\t\\tif(num1 > num2){\\n\\t\\t\\t\\tans += num1 / num2;\\n\\t\\t\\t\\tnum1 %= num2;\\n\\t\\t\\t}\\n\\t\\t\\telse{\\n\\t\\t\\t\\tans += num2 / num1;\\n\\t\\t\\t\\tnum2 %= num1;\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn ans;\\n\\n\\t}\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\tint countOperations(int num1, int num2) {\\n\\n\\t\\tint ans = 0;\\n\\n\\t\\twhile(num2 != 0 && num1 != 0){\\n\\n\\t\\t\\tif(num1 > num2){\\n\\t\\t\\t\\tans += num1 / num2;\\n\\t\\t\\t\\tnum1 %= num2;\\n\\t\\t\\t}\\n\\t\\t\\telse{\\n\\t\\t\\t\\tans += num2 / num1;\\n\\t\\t\\t\\tnum2 %= num1;\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\treturn ans;\\n\\n\\t}\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3910010,
                "title": "easy-javascript-solution-with-line-by-line-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} num1\\n * @param {number} num2\\n * @return {number}\\n */\\nvar countOperations = function (num1, num2) {\\n\\n    // initialize count to zero\\n    let count = 0;\\n\\n    // continue the loop if num1 or num2 grater than 0\\n    while (num1 > 0 && num2 > 0) {\\n\\n        // if num1 is grater than or equal to num2\\n        if (num1 >= num2) {\\n\\n            // subtract num2 from num1 and initialize it to num1\\n            num1 -= num2;\\n\\n            // increment count\\n            count++;\\n        } else { // else\\n            // subtract num1 from num2 and initialize it to num2\\n            num2 -= num1;\\n\\n            // increment count\\n            count++;\\n        }\\n    }\\n\\n    // return count\\n    return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num1\\n * @param {number} num2\\n * @return {number}\\n */\\nvar countOperations = function (num1, num2) {\\n\\n    // initialize count to zero\\n    let count = 0;\\n\\n    // continue the loop if num1 or num2 grater than 0\\n    while (num1 > 0 && num2 > 0) {\\n\\n        // if num1 is grater than or equal to num2\\n        if (num1 >= num2) {\\n\\n            // subtract num2 from num1 and initialize it to num1\\n            num1 -= num2;\\n\\n            // increment count\\n            count++;\\n        } else { // else\\n            // subtract num1 from num2 and initialize it to num2\\n            num2 -= num1;\\n\\n            // increment count\\n            count++;\\n        }\\n    }\\n\\n    // return count\\n    return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3907430,
                "title": "beats-easy-beginner-friendly-solution-simple-and-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int ans=0;\\n       while(num1!=0 && num2!=0){\\n           if(num1==num2){\\n               ans+=1;\\n               return ans;\\n           }\\n           else if(num1>num2){\\n               num1=num1-num2;\\n               ans+=1;\\n           }\\n           else{\\n               num2=num2-num1;\\n               ans+=1;\\n           }\\n       } \\n       return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        int ans=0;\\n       while(num1!=0 && num2!=0){\\n           if(num1==num2){\\n               ans+=1;\\n               return ans;\\n           }\\n           else if(num1>num2){\\n               num1=num1-num2;\\n               ans+=1;\\n           }\\n           else{\\n               num2=num2-num1;\\n               ans+=1;\\n           }\\n       } \\n       return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3904042,
                "title": "easy-python-code-with-less-memory-and-time",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        c=0\\n        while True:\\n            if num1==0 or num2==0:\\n                return c\\n            if num1>=num2:\\n                num1=num1-num2\\n                c+=1\\n            else:\\n                num2=num2-num1\\n                c+=1\\n        \\n            \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        c=0\\n        while True:\\n            if num1==0 or num2==0:\\n                return c\\n            if num1>=num2:\\n                num1=num1-num2\\n                c+=1\\n            else:\\n                num2=num2-num1\\n                c+=1\\n        \\n            \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3900723,
                "title": "easy-solution-c-beats-100",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int i=0;\\n        while(num1 != 0 && num2 !=0){\\n            if(num1 >= num2){\\n                num1 -= num2;\\n                i++;\\n            }else{\\n                num2 -= num1;\\n                i++;\\n            }\\n        }\\n        return i;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countOperations(int num1, int num2) {\\n        int i=0;\\n        while(num1 != 0 && num2 !=0){\\n            if(num1 >= num2){\\n                num1 -= num2;\\n                i++;\\n            }else{\\n                num2 -= num1;\\n                i++;\\n            }\\n        }\\n        return i;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3894916,
                "title": "python-recursion",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n\\n\\n        def count(a,b):\\n            if not a or not b:\\n                return 0\\n            return 1+count(abs(a-b),min(a,b))\\n        \\n        return count(num1,num2)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n\\n\\n        def count(a,b):\\n            if not a or not b:\\n                return 0\\n            return 1+count(abs(a-b),min(a,b))\\n        \\n        return count(num1,num2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3887721,
                "title": "simple-swap-and-count-no-ifs-no-subtract-faster-than-99",
                "content": "We just count the number of operations needed to get close to the other number, then swap numbers.\\n# Code\\n```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:  \\n        count = 0\\n        while num1:\\n            count += num2//num1\\n            num1,num2 = num2 % num1, num1        \\n        return count\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/750bc62f-385d-4455-b04b-44c5244faa3c_1691608201.5875232.png)\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:  \\n        count = 0\\n        while num1:\\n            count += num2//num1\\n            num1,num2 = num2 % num1, num1        \\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3886891,
                "title": "simple-jav",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        return helper(num1,num2,0);\\n    }\\nprivate int helper(int num1,int num2,int c){\\n        if(num1==0||num2==0){\\n            return c;\\n        }\\n        if(num1>=num2){\\n            return helper(num1-num2,num2,c+1);\\n        }\\n        return helper(num1,num2-num1,c+1); \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n        return helper(num1,num2,0);\\n    }\\nprivate int helper(int num1,int num2,int c){\\n        if(num1==0||num2==0){\\n            return c;\\n        }\\n        if(num1>=num2){\\n            return helper(num1-num2,num2,c+1);\\n        }\\n        return helper(num1,num2-num1,c+1); \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3884686,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n    int count=0;\\n    while(num1>0 && num2>0){\\n      if(num1>=num2){\\n        num1=num1-num2;\\n        count++;\\n      }\\n      else{\\n        num2=num2-num1;\\n         count++;\\n      }\\n    }\\n    return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countOperations(int num1, int num2) {\\n    int count=0;\\n    while(num1>0 && num2>0){\\n      if(num1>=num2){\\n        num1=num1-num2;\\n        count++;\\n      }\\n      else{\\n        num2=num2-num1;\\n         count++;\\n      }\\n    }\\n    return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3875728,
                "title": "count-gcd-steps-w-o-recursion-and-if-else",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nCount GCD steps.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIf there\\'s `num1 < num2` here, no steps are added and `nums` are swapped.\\n# Complexity\\n- Time complexity: $$O(GCD)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n---\\n* You could find some other extraordinary solutions in my [profile](https://leetcode.com/almostmonday/) on the Solutions tab (I don\\'t post obvious or not interesting solutions at all.)\\n* If this was helpful, please upvote so that others can see this solution too.\\n---\\n\\n# Code\\n```\\nclass Solution(object):\\n    def countOperations(self, num1, num2):\\n        res = 0\\n        while num2:\\n            res += num1 // num2\\n            num1, num2 = num2, num1 % num2\\n        \\n        return res\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math",
                    "Simulation"
                ],
                "code": "```\\nclass Solution(object):\\n    def countOperations(self, num1, num2):\\n        res = 0\\n        while num2:\\n            res += num1 // num2\\n            num1, num2 = num2, num1 % num2\\n        \\n        return res\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1710590,
                "content": [
                    {
                        "username": "aryan1113",
                        "content": "Dumb problem once you figure out the pattern (which is quite easy as the problem statement gives it out)"
                    },
                    {
                        "username": "sufiyan052",
                        "content": "# Approach\\nThe main thing is to make recurrence relation in Recursive approach.\\n1- First you have to define base condition to terminate recursive call.\\n2- Since I know either num1 or num2 would be zero at last. Hence base condition would be if one of them is zero then return number of count.\\n3- If num1 >= num2 then subtract num 2 from num1 (num1 - num2) and num2 would be remain same.\\n4- And if above is not true then subtract num1 from num2 (num2 - num1) and here num1 would be same as previous while doing recursive call.\\n5- Return or print value."
                    },
                    {
                        "username": "almostmonday",
                        "content": "You need to count steps of GCD algorithm. Number of steps could be helpful to figure out the time complicity of the algorithm. How to do it without any recursion and if-else operators you could see [here](https://leetcode.com/problems/count-operations-to-obtain-zero/solutions/3875728/count-gcd-steps-w-o-recursion-and-if-else/)."
                    },
                    {
                        "username": "UchihaKim",
                        "content": "instead of subtract the number multiple times, try to divide it. "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Is there a proof that the solution always exists?"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        sa = 0\\n        while num1 > 0 and num2 > 0:\\n            if num1 > num2:\\n                num1 -= num2\\n                sa += 1\\n            else:\\n                num2 -= num1\\n                sa +=1\\n        return sa"
                    },
                    {
                        "username": "signalskip",
                        "content": "My Python works on my system with given variables, but not in Leetcode. Can anyone see anything wrong here?\\n\\ncounter = 0\\nrun = True\\n\\nwhile run:\\n\\tif (num1 != 0) and (num2 != 0):\\n\\t\\tif num1 >= num2:\\n\\t\\t\\tnum1 = num1 - num2\\n\\t\\t\\tcounter += 1\\n\\t\\telse:\\n\\t\\t\\tnum2 = num2 -1\\n\\t\\t\\tcounter += 1\\n\\tif (num1 == 0) or (num2 == 0):\\n\\t\\treturn counter\\n\\t\\trun = False"
                    },
                    {
                        "username": "saravanakkumarta",
                        "content": "if the code was typed as same as the order you\\'ve pasted here then it\\'s indentation error."
                    },
                    {
                        "username": "sumeetrayat",
                        "content": "My compiler giving correct ans and there wrong"
                    },
                    {
                        "username": "srjnsing",
                        "content": "c++ solution :\n\n\nclass Solution {\npublic:\n        int count=0;\n\n    int countOperations(int num1, int num2) {\n    if(num1==0 or num2==0)\n    return 0;\n    count++;\n          if(num1>=num2)\n          countOperations(num1-num2, num2);\n          else\n          countOperations(num1, num2-num1);\n          \n      \n      return count;\n    }\n};"
                    }
                ]
            },
            {
                "id": 2017924,
                "content": [
                    {
                        "username": "aryan1113",
                        "content": "Dumb problem once you figure out the pattern (which is quite easy as the problem statement gives it out)"
                    },
                    {
                        "username": "sufiyan052",
                        "content": "# Approach\\nThe main thing is to make recurrence relation in Recursive approach.\\n1- First you have to define base condition to terminate recursive call.\\n2- Since I know either num1 or num2 would be zero at last. Hence base condition would be if one of them is zero then return number of count.\\n3- If num1 >= num2 then subtract num 2 from num1 (num1 - num2) and num2 would be remain same.\\n4- And if above is not true then subtract num1 from num2 (num2 - num1) and here num1 would be same as previous while doing recursive call.\\n5- Return or print value."
                    },
                    {
                        "username": "almostmonday",
                        "content": "You need to count steps of GCD algorithm. Number of steps could be helpful to figure out the time complicity of the algorithm. How to do it without any recursion and if-else operators you could see [here](https://leetcode.com/problems/count-operations-to-obtain-zero/solutions/3875728/count-gcd-steps-w-o-recursion-and-if-else/)."
                    },
                    {
                        "username": "UchihaKim",
                        "content": "instead of subtract the number multiple times, try to divide it. "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Is there a proof that the solution always exists?"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        sa = 0\\n        while num1 > 0 and num2 > 0:\\n            if num1 > num2:\\n                num1 -= num2\\n                sa += 1\\n            else:\\n                num2 -= num1\\n                sa +=1\\n        return sa"
                    },
                    {
                        "username": "signalskip",
                        "content": "My Python works on my system with given variables, but not in Leetcode. Can anyone see anything wrong here?\\n\\ncounter = 0\\nrun = True\\n\\nwhile run:\\n\\tif (num1 != 0) and (num2 != 0):\\n\\t\\tif num1 >= num2:\\n\\t\\t\\tnum1 = num1 - num2\\n\\t\\t\\tcounter += 1\\n\\t\\telse:\\n\\t\\t\\tnum2 = num2 -1\\n\\t\\t\\tcounter += 1\\n\\tif (num1 == 0) or (num2 == 0):\\n\\t\\treturn counter\\n\\t\\trun = False"
                    },
                    {
                        "username": "saravanakkumarta",
                        "content": "if the code was typed as same as the order you\\'ve pasted here then it\\'s indentation error."
                    },
                    {
                        "username": "sumeetrayat",
                        "content": "My compiler giving correct ans and there wrong"
                    },
                    {
                        "username": "srjnsing",
                        "content": "c++ solution :\n\n\nclass Solution {\npublic:\n        int count=0;\n\n    int countOperations(int num1, int num2) {\n    if(num1==0 or num2==0)\n    return 0;\n    count++;\n          if(num1>=num2)\n          countOperations(num1-num2, num2);\n          else\n          countOperations(num1, num2-num1);\n          \n      \n      return count;\n    }\n};"
                    }
                ]
            },
            {
                "id": 2004055,
                "content": [
                    {
                        "username": "aryan1113",
                        "content": "Dumb problem once you figure out the pattern (which is quite easy as the problem statement gives it out)"
                    },
                    {
                        "username": "sufiyan052",
                        "content": "# Approach\\nThe main thing is to make recurrence relation in Recursive approach.\\n1- First you have to define base condition to terminate recursive call.\\n2- Since I know either num1 or num2 would be zero at last. Hence base condition would be if one of them is zero then return number of count.\\n3- If num1 >= num2 then subtract num 2 from num1 (num1 - num2) and num2 would be remain same.\\n4- And if above is not true then subtract num1 from num2 (num2 - num1) and here num1 would be same as previous while doing recursive call.\\n5- Return or print value."
                    },
                    {
                        "username": "almostmonday",
                        "content": "You need to count steps of GCD algorithm. Number of steps could be helpful to figure out the time complicity of the algorithm. How to do it without any recursion and if-else operators you could see [here](https://leetcode.com/problems/count-operations-to-obtain-zero/solutions/3875728/count-gcd-steps-w-o-recursion-and-if-else/)."
                    },
                    {
                        "username": "UchihaKim",
                        "content": "instead of subtract the number multiple times, try to divide it. "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Is there a proof that the solution always exists?"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        sa = 0\\n        while num1 > 0 and num2 > 0:\\n            if num1 > num2:\\n                num1 -= num2\\n                sa += 1\\n            else:\\n                num2 -= num1\\n                sa +=1\\n        return sa"
                    },
                    {
                        "username": "signalskip",
                        "content": "My Python works on my system with given variables, but not in Leetcode. Can anyone see anything wrong here?\\n\\ncounter = 0\\nrun = True\\n\\nwhile run:\\n\\tif (num1 != 0) and (num2 != 0):\\n\\t\\tif num1 >= num2:\\n\\t\\t\\tnum1 = num1 - num2\\n\\t\\t\\tcounter += 1\\n\\t\\telse:\\n\\t\\t\\tnum2 = num2 -1\\n\\t\\t\\tcounter += 1\\n\\tif (num1 == 0) or (num2 == 0):\\n\\t\\treturn counter\\n\\t\\trun = False"
                    },
                    {
                        "username": "saravanakkumarta",
                        "content": "if the code was typed as same as the order you\\'ve pasted here then it\\'s indentation error."
                    },
                    {
                        "username": "sumeetrayat",
                        "content": "My compiler giving correct ans and there wrong"
                    },
                    {
                        "username": "srjnsing",
                        "content": "c++ solution :\n\n\nclass Solution {\npublic:\n        int count=0;\n\n    int countOperations(int num1, int num2) {\n    if(num1==0 or num2==0)\n    return 0;\n    count++;\n          if(num1>=num2)\n          countOperations(num1-num2, num2);\n          else\n          countOperations(num1, num2-num1);\n          \n      \n      return count;\n    }\n};"
                    }
                ]
            },
            {
                "id": 1789169,
                "content": [
                    {
                        "username": "aryan1113",
                        "content": "Dumb problem once you figure out the pattern (which is quite easy as the problem statement gives it out)"
                    },
                    {
                        "username": "sufiyan052",
                        "content": "# Approach\\nThe main thing is to make recurrence relation in Recursive approach.\\n1- First you have to define base condition to terminate recursive call.\\n2- Since I know either num1 or num2 would be zero at last. Hence base condition would be if one of them is zero then return number of count.\\n3- If num1 >= num2 then subtract num 2 from num1 (num1 - num2) and num2 would be remain same.\\n4- And if above is not true then subtract num1 from num2 (num2 - num1) and here num1 would be same as previous while doing recursive call.\\n5- Return or print value."
                    },
                    {
                        "username": "almostmonday",
                        "content": "You need to count steps of GCD algorithm. Number of steps could be helpful to figure out the time complicity of the algorithm. How to do it without any recursion and if-else operators you could see [here](https://leetcode.com/problems/count-operations-to-obtain-zero/solutions/3875728/count-gcd-steps-w-o-recursion-and-if-else/)."
                    },
                    {
                        "username": "UchihaKim",
                        "content": "instead of subtract the number multiple times, try to divide it. "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Is there a proof that the solution always exists?"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        sa = 0\\n        while num1 > 0 and num2 > 0:\\n            if num1 > num2:\\n                num1 -= num2\\n                sa += 1\\n            else:\\n                num2 -= num1\\n                sa +=1\\n        return sa"
                    },
                    {
                        "username": "signalskip",
                        "content": "My Python works on my system with given variables, but not in Leetcode. Can anyone see anything wrong here?\\n\\ncounter = 0\\nrun = True\\n\\nwhile run:\\n\\tif (num1 != 0) and (num2 != 0):\\n\\t\\tif num1 >= num2:\\n\\t\\t\\tnum1 = num1 - num2\\n\\t\\t\\tcounter += 1\\n\\t\\telse:\\n\\t\\t\\tnum2 = num2 -1\\n\\t\\t\\tcounter += 1\\n\\tif (num1 == 0) or (num2 == 0):\\n\\t\\treturn counter\\n\\t\\trun = False"
                    },
                    {
                        "username": "saravanakkumarta",
                        "content": "if the code was typed as same as the order you\\'ve pasted here then it\\'s indentation error."
                    },
                    {
                        "username": "sumeetrayat",
                        "content": "My compiler giving correct ans and there wrong"
                    },
                    {
                        "username": "srjnsing",
                        "content": "c++ solution :\n\n\nclass Solution {\npublic:\n        int count=0;\n\n    int countOperations(int num1, int num2) {\n    if(num1==0 or num2==0)\n    return 0;\n    count++;\n          if(num1>=num2)\n          countOperations(num1-num2, num2);\n          else\n          countOperations(num1, num2-num1);\n          \n      \n      return count;\n    }\n};"
                    }
                ]
            },
            {
                "id": 1777450,
                "content": [
                    {
                        "username": "aryan1113",
                        "content": "Dumb problem once you figure out the pattern (which is quite easy as the problem statement gives it out)"
                    },
                    {
                        "username": "sufiyan052",
                        "content": "# Approach\\nThe main thing is to make recurrence relation in Recursive approach.\\n1- First you have to define base condition to terminate recursive call.\\n2- Since I know either num1 or num2 would be zero at last. Hence base condition would be if one of them is zero then return number of count.\\n3- If num1 >= num2 then subtract num 2 from num1 (num1 - num2) and num2 would be remain same.\\n4- And if above is not true then subtract num1 from num2 (num2 - num1) and here num1 would be same as previous while doing recursive call.\\n5- Return or print value."
                    },
                    {
                        "username": "almostmonday",
                        "content": "You need to count steps of GCD algorithm. Number of steps could be helpful to figure out the time complicity of the algorithm. How to do it without any recursion and if-else operators you could see [here](https://leetcode.com/problems/count-operations-to-obtain-zero/solutions/3875728/count-gcd-steps-w-o-recursion-and-if-else/)."
                    },
                    {
                        "username": "UchihaKim",
                        "content": "instead of subtract the number multiple times, try to divide it. "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Is there a proof that the solution always exists?"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        sa = 0\\n        while num1 > 0 and num2 > 0:\\n            if num1 > num2:\\n                num1 -= num2\\n                sa += 1\\n            else:\\n                num2 -= num1\\n                sa +=1\\n        return sa"
                    },
                    {
                        "username": "signalskip",
                        "content": "My Python works on my system with given variables, but not in Leetcode. Can anyone see anything wrong here?\\n\\ncounter = 0\\nrun = True\\n\\nwhile run:\\n\\tif (num1 != 0) and (num2 != 0):\\n\\t\\tif num1 >= num2:\\n\\t\\t\\tnum1 = num1 - num2\\n\\t\\t\\tcounter += 1\\n\\t\\telse:\\n\\t\\t\\tnum2 = num2 -1\\n\\t\\t\\tcounter += 1\\n\\tif (num1 == 0) or (num2 == 0):\\n\\t\\treturn counter\\n\\t\\trun = False"
                    },
                    {
                        "username": "saravanakkumarta",
                        "content": "if the code was typed as same as the order you\\'ve pasted here then it\\'s indentation error."
                    },
                    {
                        "username": "sumeetrayat",
                        "content": "My compiler giving correct ans and there wrong"
                    },
                    {
                        "username": "srjnsing",
                        "content": "c++ solution :\n\n\nclass Solution {\npublic:\n        int count=0;\n\n    int countOperations(int num1, int num2) {\n    if(num1==0 or num2==0)\n    return 0;\n    count++;\n          if(num1>=num2)\n          countOperations(num1-num2, num2);\n          else\n          countOperations(num1, num2-num1);\n          \n      \n      return count;\n    }\n};"
                    }
                ]
            },
            {
                "id": 1775120,
                "content": [
                    {
                        "username": "aryan1113",
                        "content": "Dumb problem once you figure out the pattern (which is quite easy as the problem statement gives it out)"
                    },
                    {
                        "username": "sufiyan052",
                        "content": "# Approach\\nThe main thing is to make recurrence relation in Recursive approach.\\n1- First you have to define base condition to terminate recursive call.\\n2- Since I know either num1 or num2 would be zero at last. Hence base condition would be if one of them is zero then return number of count.\\n3- If num1 >= num2 then subtract num 2 from num1 (num1 - num2) and num2 would be remain same.\\n4- And if above is not true then subtract num1 from num2 (num2 - num1) and here num1 would be same as previous while doing recursive call.\\n5- Return or print value."
                    },
                    {
                        "username": "almostmonday",
                        "content": "You need to count steps of GCD algorithm. Number of steps could be helpful to figure out the time complicity of the algorithm. How to do it without any recursion and if-else operators you could see [here](https://leetcode.com/problems/count-operations-to-obtain-zero/solutions/3875728/count-gcd-steps-w-o-recursion-and-if-else/)."
                    },
                    {
                        "username": "UchihaKim",
                        "content": "instead of subtract the number multiple times, try to divide it. "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Is there a proof that the solution always exists?"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        sa = 0\\n        while num1 > 0 and num2 > 0:\\n            if num1 > num2:\\n                num1 -= num2\\n                sa += 1\\n            else:\\n                num2 -= num1\\n                sa +=1\\n        return sa"
                    },
                    {
                        "username": "signalskip",
                        "content": "My Python works on my system with given variables, but not in Leetcode. Can anyone see anything wrong here?\\n\\ncounter = 0\\nrun = True\\n\\nwhile run:\\n\\tif (num1 != 0) and (num2 != 0):\\n\\t\\tif num1 >= num2:\\n\\t\\t\\tnum1 = num1 - num2\\n\\t\\t\\tcounter += 1\\n\\t\\telse:\\n\\t\\t\\tnum2 = num2 -1\\n\\t\\t\\tcounter += 1\\n\\tif (num1 == 0) or (num2 == 0):\\n\\t\\treturn counter\\n\\t\\trun = False"
                    },
                    {
                        "username": "saravanakkumarta",
                        "content": "if the code was typed as same as the order you\\'ve pasted here then it\\'s indentation error."
                    },
                    {
                        "username": "sumeetrayat",
                        "content": "My compiler giving correct ans and there wrong"
                    },
                    {
                        "username": "srjnsing",
                        "content": "c++ solution :\n\n\nclass Solution {\npublic:\n        int count=0;\n\n    int countOperations(int num1, int num2) {\n    if(num1==0 or num2==0)\n    return 0;\n    count++;\n          if(num1>=num2)\n          countOperations(num1-num2, num2);\n          else\n          countOperations(num1, num2-num1);\n          \n      \n      return count;\n    }\n};"
                    }
                ]
            },
            {
                "id": 1745370,
                "content": [
                    {
                        "username": "aryan1113",
                        "content": "Dumb problem once you figure out the pattern (which is quite easy as the problem statement gives it out)"
                    },
                    {
                        "username": "sufiyan052",
                        "content": "# Approach\\nThe main thing is to make recurrence relation in Recursive approach.\\n1- First you have to define base condition to terminate recursive call.\\n2- Since I know either num1 or num2 would be zero at last. Hence base condition would be if one of them is zero then return number of count.\\n3- If num1 >= num2 then subtract num 2 from num1 (num1 - num2) and num2 would be remain same.\\n4- And if above is not true then subtract num1 from num2 (num2 - num1) and here num1 would be same as previous while doing recursive call.\\n5- Return or print value."
                    },
                    {
                        "username": "almostmonday",
                        "content": "You need to count steps of GCD algorithm. Number of steps could be helpful to figure out the time complicity of the algorithm. How to do it without any recursion and if-else operators you could see [here](https://leetcode.com/problems/count-operations-to-obtain-zero/solutions/3875728/count-gcd-steps-w-o-recursion-and-if-else/)."
                    },
                    {
                        "username": "UchihaKim",
                        "content": "instead of subtract the number multiple times, try to divide it. "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Is there a proof that the solution always exists?"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        sa = 0\\n        while num1 > 0 and num2 > 0:\\n            if num1 > num2:\\n                num1 -= num2\\n                sa += 1\\n            else:\\n                num2 -= num1\\n                sa +=1\\n        return sa"
                    },
                    {
                        "username": "signalskip",
                        "content": "My Python works on my system with given variables, but not in Leetcode. Can anyone see anything wrong here?\\n\\ncounter = 0\\nrun = True\\n\\nwhile run:\\n\\tif (num1 != 0) and (num2 != 0):\\n\\t\\tif num1 >= num2:\\n\\t\\t\\tnum1 = num1 - num2\\n\\t\\t\\tcounter += 1\\n\\t\\telse:\\n\\t\\t\\tnum2 = num2 -1\\n\\t\\t\\tcounter += 1\\n\\tif (num1 == 0) or (num2 == 0):\\n\\t\\treturn counter\\n\\t\\trun = False"
                    },
                    {
                        "username": "saravanakkumarta",
                        "content": "if the code was typed as same as the order you\\'ve pasted here then it\\'s indentation error."
                    },
                    {
                        "username": "sumeetrayat",
                        "content": "My compiler giving correct ans and there wrong"
                    },
                    {
                        "username": "srjnsing",
                        "content": "c++ solution :\n\n\nclass Solution {\npublic:\n        int count=0;\n\n    int countOperations(int num1, int num2) {\n    if(num1==0 or num2==0)\n    return 0;\n    count++;\n          if(num1>=num2)\n          countOperations(num1-num2, num2);\n          else\n          countOperations(num1, num2-num1);\n          \n      \n      return count;\n    }\n};"
                    }
                ]
            },
            {
                "id": 1714702,
                "content": [
                    {
                        "username": "aryan1113",
                        "content": "Dumb problem once you figure out the pattern (which is quite easy as the problem statement gives it out)"
                    },
                    {
                        "username": "sufiyan052",
                        "content": "# Approach\\nThe main thing is to make recurrence relation in Recursive approach.\\n1- First you have to define base condition to terminate recursive call.\\n2- Since I know either num1 or num2 would be zero at last. Hence base condition would be if one of them is zero then return number of count.\\n3- If num1 >= num2 then subtract num 2 from num1 (num1 - num2) and num2 would be remain same.\\n4- And if above is not true then subtract num1 from num2 (num2 - num1) and here num1 would be same as previous while doing recursive call.\\n5- Return or print value."
                    },
                    {
                        "username": "almostmonday",
                        "content": "You need to count steps of GCD algorithm. Number of steps could be helpful to figure out the time complicity of the algorithm. How to do it without any recursion and if-else operators you could see [here](https://leetcode.com/problems/count-operations-to-obtain-zero/solutions/3875728/count-gcd-steps-w-o-recursion-and-if-else/)."
                    },
                    {
                        "username": "UchihaKim",
                        "content": "instead of subtract the number multiple times, try to divide it. "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Is there a proof that the solution always exists?"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        sa = 0\\n        while num1 > 0 and num2 > 0:\\n            if num1 > num2:\\n                num1 -= num2\\n                sa += 1\\n            else:\\n                num2 -= num1\\n                sa +=1\\n        return sa"
                    },
                    {
                        "username": "signalskip",
                        "content": "My Python works on my system with given variables, but not in Leetcode. Can anyone see anything wrong here?\\n\\ncounter = 0\\nrun = True\\n\\nwhile run:\\n\\tif (num1 != 0) and (num2 != 0):\\n\\t\\tif num1 >= num2:\\n\\t\\t\\tnum1 = num1 - num2\\n\\t\\t\\tcounter += 1\\n\\t\\telse:\\n\\t\\t\\tnum2 = num2 -1\\n\\t\\t\\tcounter += 1\\n\\tif (num1 == 0) or (num2 == 0):\\n\\t\\treturn counter\\n\\t\\trun = False"
                    },
                    {
                        "username": "saravanakkumarta",
                        "content": "if the code was typed as same as the order you\\'ve pasted here then it\\'s indentation error."
                    },
                    {
                        "username": "sumeetrayat",
                        "content": "My compiler giving correct ans and there wrong"
                    },
                    {
                        "username": "srjnsing",
                        "content": "c++ solution :\n\n\nclass Solution {\npublic:\n        int count=0;\n\n    int countOperations(int num1, int num2) {\n    if(num1==0 or num2==0)\n    return 0;\n    count++;\n          if(num1>=num2)\n          countOperations(num1-num2, num2);\n          else\n          countOperations(num1, num2-num1);\n          \n      \n      return count;\n    }\n};"
                    }
                ]
            },
            {
                "id": 1671033,
                "content": [
                    {
                        "username": "aryan1113",
                        "content": "Dumb problem once you figure out the pattern (which is quite easy as the problem statement gives it out)"
                    },
                    {
                        "username": "sufiyan052",
                        "content": "# Approach\\nThe main thing is to make recurrence relation in Recursive approach.\\n1- First you have to define base condition to terminate recursive call.\\n2- Since I know either num1 or num2 would be zero at last. Hence base condition would be if one of them is zero then return number of count.\\n3- If num1 >= num2 then subtract num 2 from num1 (num1 - num2) and num2 would be remain same.\\n4- And if above is not true then subtract num1 from num2 (num2 - num1) and here num1 would be same as previous while doing recursive call.\\n5- Return or print value."
                    },
                    {
                        "username": "almostmonday",
                        "content": "You need to count steps of GCD algorithm. Number of steps could be helpful to figure out the time complicity of the algorithm. How to do it without any recursion and if-else operators you could see [here](https://leetcode.com/problems/count-operations-to-obtain-zero/solutions/3875728/count-gcd-steps-w-o-recursion-and-if-else/)."
                    },
                    {
                        "username": "UchihaKim",
                        "content": "instead of subtract the number multiple times, try to divide it. "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Is there a proof that the solution always exists?"
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def countOperations(self, num1: int, num2: int) -> int:\\n        sa = 0\\n        while num1 > 0 and num2 > 0:\\n            if num1 > num2:\\n                num1 -= num2\\n                sa += 1\\n            else:\\n                num2 -= num1\\n                sa +=1\\n        return sa"
                    },
                    {
                        "username": "signalskip",
                        "content": "My Python works on my system with given variables, but not in Leetcode. Can anyone see anything wrong here?\\n\\ncounter = 0\\nrun = True\\n\\nwhile run:\\n\\tif (num1 != 0) and (num2 != 0):\\n\\t\\tif num1 >= num2:\\n\\t\\t\\tnum1 = num1 - num2\\n\\t\\t\\tcounter += 1\\n\\t\\telse:\\n\\t\\t\\tnum2 = num2 -1\\n\\t\\t\\tcounter += 1\\n\\tif (num1 == 0) or (num2 == 0):\\n\\t\\treturn counter\\n\\t\\trun = False"
                    },
                    {
                        "username": "saravanakkumarta",
                        "content": "if the code was typed as same as the order you\\'ve pasted here then it\\'s indentation error."
                    },
                    {
                        "username": "sumeetrayat",
                        "content": "My compiler giving correct ans and there wrong"
                    },
                    {
                        "username": "srjnsing",
                        "content": "c++ solution :\n\n\nclass Solution {\npublic:\n        int count=0;\n\n    int countOperations(int num1, int num2) {\n    if(num1==0 or num2==0)\n    return 0;\n    count++;\n          if(num1>=num2)\n          countOperations(num1-num2, num2);\n          else\n          countOperations(num1, num2-num1);\n          \n      \n      return count;\n    }\n};"
                    }
                ]
            }
        ]
    }
]