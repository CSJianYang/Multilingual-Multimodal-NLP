[
    {
        "title": "Duplicate Zeros",
        "question_content": "Given a fixed-length integer array arr, duplicate each occurrence of zero, shifting the remaining elements to the right.\nNote that elements beyond the length of the original array are not written. Do the above modifications to the input array in place and do not return anything.\n&nbsp;\nExample 1:\n\nInput: arr = [1,0,2,3,0,4,5,0]\nOutput: [1,0,0,2,3,0,0,4]\nExplanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]\n\nExample 2:\n\nInput: arr = [1,2,3]\nOutput: [1,2,3]\nExplanation: After calling your function, the input array is modified to: [1,2,3]\n\n&nbsp;\nConstraints:\n\n\t1 <= arr.length <= 104\n\t0 <= arr[i] <= 9",
        "solutions": [
            {
                "id": 322576,
                "title": "python-3-real-in-place-solution",
                "content": "Start from the back and adjust items to correct locations. If item is zero then duplicate it.\\n\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        zeroes = arr.count(0)\\n        n = len(arr)\\n        for i in range(n-1, -1, -1):\\n            if i + zeroes < n:\\n                arr[i + zeroes] = arr[i]\\n            if arr[i] == 0: \\n                zeroes -= 1\\n                if i + zeroes < n:\\n                    arr[i + zeroes] = 0\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        zeroes = arr.count(0)\\n        n = len(arr)\\n        for i in range(n-1, -1, -1):\\n            if i + zeroes < n:\\n                arr[i + zeroes] = arr[i]\\n            if arr[i] == 0: \\n                zeroes -= 1\\n                if i + zeroes < n:\\n                    arr[i + zeroes] = 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 312727,
                "title": "c-java-two-pointers-space-o-1",
                "content": "# **Intuition**\\nThe problem can be easy solved:\\n1. with a copy (extra space)\\n2. by inserting zeros (extra time)\\n<br>\\n\\n**Python, with extra space**\\n```\\n    def duplicateZeros(self, A):\\n        A[:] = [x for a in A for x in ([a] if a else [0, 0])][:len(A)]\\n```\\n<br>\\n\\n# **Explanation**\\nWe can improve it to `O(N)` time and `O(1)` space.\\nBasically, we apply two pointers.\\n`i` is the position in the original array,\\n`j` is the position in the new array.\\n(the original and the new are actually the same array.)\\n\\nThe first we pass forward and count the zeros.\\nThe second we pass backward and assign the value from original input to the new array.\\nso that the original value won\\'t be overridden too early.\\n<br>\\n\\n**C++:**\\n```\\n    void duplicateZeros(vector<int>& A) {\\n        int n = A.size(), j = n + count(A.begin(), A.end(), 0);\\n        for (int i = n - 1; i >= 0; --i) {\\n            if (--j < n)\\n                A[j] = A[i];\\n            if (A[i] == 0 && --j < n)\\n                A[j] = 0;\\n        }\\n    }\\n```\\n\\n**Java**\\nVersion suggested by @davidluoyes\\n```java\\n    public void duplicateZeros(int[] arr) {\\n        int countZero = 0;\\n        for (int i = 0; i < arr.length; i++) {\\n            if (arr[i] == 0) countZero++;\\n        }\\n        int len = arr.length + countZero;\\n        //We just need O(1) space if we scan from back\\n        //i point to the original array, j point to the new location\\n        for (int i = arr.length - 1, j = len - 1; i < j; i--, j--) {\\n            if (arr[i] != 0) {\\n                if (j < arr.length) arr[j] = arr[i];\\n            } else {\\n                if (j < arr.length) arr[j] = arr[i];\\n                j--;\\n                if (j < arr.length) arr[j] = arr[i]; //copy twice when hit \\'0\\'\\n            }\\n        }\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    def duplicateZeros(self, A):\\n        A[:] = [x for a in A for x in ([a] if a else [0, 0])][:len(A)]\\n```\n```\\n    void duplicateZeros(vector<int>& A) {\\n        int n = A.size(), j = n + count(A.begin(), A.end(), 0);\\n        for (int i = n - 1; i >= 0; --i) {\\n            if (--j < n)\\n                A[j] = A[i];\\n            if (A[i] == 0 && --j < n)\\n                A[j] = 0;\\n        }\\n    }\\n```\n```java\\n    public void duplicateZeros(int[] arr) {\\n        int countZero = 0;\\n        for (int i = 0; i < arr.length; i++) {\\n            if (arr[i] == 0) countZero++;\\n        }\\n        int len = arr.length + countZero;\\n        //We just need O(1) space if we scan from back\\n        //i point to the original array, j point to the new location\\n        for (int i = arr.length - 1, j = len - 1; i < j; i--, j--) {\\n            if (arr[i] != 0) {\\n                if (j < arr.length) arr[j] = arr[i];\\n            } else {\\n                if (j < arr.length) arr[j] = arr[i];\\n                j--;\\n                if (j < arr.length) arr[j] = arr[i]; //copy twice when hit \\'0\\'\\n            }\\n        }\\n    }\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 312743,
                "title": "java-c-o-n-o-1",
                "content": "First, go left to right and count how many shifts (```sh```) we can fit in our array.\\nThen, go right to left and move items; if it\\'s zero - duplicate it and decrement the shift.\\n> Note: ```i + sh``` can exceed the array size. We need a check for this case.\\n```\\nvoid duplicateZeros(vector<int>& a, int i = 0, int sh = 0) {\\n  for (i = 0; sh + i < a.size(); ++i) sh += a[i] == 0;\\n  for (i = i - 1; sh > 0; --i) {\\n    if (i + sh < a.size()) a[i + sh] = a[i];\\n    if (a[i] == 0) a[i + --sh] = a[i];\\n  }\\n}\\n```\\nJava version:\\n```\\npublic void duplicateZeros(int[] a) {\\n  int i = 0, sh = 0;\\n  for (i = 0; sh + i < a.length; ++i) sh += a[i] == 0 ? 1 : 0;\\n  for (i = i - 1; sh > 0; --i) {\\n    if (i + sh < a.length) a[i + sh] = a[i];\\n    if (a[i] == 0) a[i + --sh] = a[i];\\n  }\\n}\\n```",
                "solutionTags": [],
                "code": "```sh```\n```i + sh```\n```\\nvoid duplicateZeros(vector<int>& a, int i = 0, int sh = 0) {\\n  for (i = 0; sh + i < a.size(); ++i) sh += a[i] == 0;\\n  for (i = i - 1; sh > 0; --i) {\\n    if (i + sh < a.size()) a[i + sh] = a[i];\\n    if (a[i] == 0) a[i + --sh] = a[i];\\n  }\\n}\\n```\n```\\npublic void duplicateZeros(int[] a) {\\n  int i = 0, sh = 0;\\n  for (i = 0; sh + i < a.length; ++i) sh += a[i] == 0 ? 1 : 0;\\n  for (i = i - 1; sh > 0; --i) {\\n    if (i + sh < a.length) a[i + sh] = a[i];\\n    if (a[i] == 0) a[i + --sh] = a[i];\\n  }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 315395,
                "title": "java-o-n-time-o-1-space-two-passes-for-loop-and-while-loop",
                "content": "**First pass** to count the number of 0\\'s.\\n**Second pass** is to write in the values in appropriate locations, moving from right to left (backwards from the usual), in which the `write` pointer initially extends outside of the length of the array (as if it was the full sized array without erasing values in the shift).\\n```java\\n  /*\\n  O(n) runtime\\n  O(1) space\\n  */\\n  public void duplicateZeros(int[] A) {\\n    \\n    int n = A.length, count = 0;\\n    \\n    for (int num : A) if (num == 0) count++;\\n    int i = n - 1;\\n    int write = n + count - 1;\\n    \\n    while (i >= 0 && write >= 0)  {\\n      \\n      if (A[i] != 0) { // Non-zero, just write it in\\n        if (write < n) A[write] = A[i];\\n        \\n      } else { // Zero found, write it in twice if we can\\n        if (write < n) A[write] = A[i];\\n        write--;\\n        if (write < n) A[write] = A[i];\\n      }\\n      \\n      i--;\\n      write--;\\n    }\\n  }\\n```",
                "solutionTags": [],
                "code": "```java\\n  /*\\n  O(n) runtime\\n  O(1) space\\n  */\\n  public void duplicateZeros(int[] A) {\\n    \\n    int n = A.length, count = 0;\\n    \\n    for (int num : A) if (num == 0) count++;\\n    int i = n - 1;\\n    int write = n + count - 1;\\n    \\n    while (i >= 0 && write >= 0)  {\\n      \\n      if (A[i] != 0) { // Non-zero, just write it in\\n        if (write < n) A[write] = A[i];\\n        \\n      } else { // Zero found, write it in twice if we can\\n        if (write < n) A[write] = A[i];\\n        write--;\\n        if (write < n) A[write] = A[i];\\n      }\\n      \\n      i--;\\n      write--;\\n    }\\n  }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 898225,
                "title": "python-2-solutions-easy-to-understand-time-o-n-space-o-1",
                "content": "**Solution 1: Straigh Forward**\\n```python\\nclass Solution(object):\\n    def duplicateZeros(self, arr):\\n        org = arr[:] # Copy values of `arr` to `org`\\n        i = j = 0\\n        n = len(arr)\\n        while j < n:\\n            arr[j] = org[i]\\n            j += 1\\n            if org[i] == 0: # Copy twice if ord[i] == 0\\n                if j < n: arr[j] = org[i]\\n                j += 1\\n            i += 1\\n```\\nComplexity\\n- Time: `O(N)`\\n- Space: `O(N)`\\n\\n**Solution 2: Copy values from the end to beginning**\\n```python\\nclass Solution(object):\\n    def duplicateZeros(self, arr):\\n        n = len(arr)\\n        cntZero = arr.count(0)\\n        newLen = n + cntZero # Length of new array if we don\\'t trim up to length `n`\\n        \\n        # Let\\'s copy values from the end\\n        i = n - 1\\n        j = newLen - 1\\n        while j >= 0:\\n            if j < n: arr[j] = arr[i]\\n            j -= 1\\n            if arr[i] == 0: # Copy twice if arr[i] == 0\\n                if j < n: arr[j] = arr[i]\\n                j -= 1\\n            i -= 1\\n```\\n\\nComplexity\\n- Time: `O(N)`\\n- Space: `O(1)`",
                "solutionTags": [],
                "code": "```python\\nclass Solution(object):\\n    def duplicateZeros(self, arr):\\n        org = arr[:] # Copy values of `arr` to `org`\\n        i = j = 0\\n        n = len(arr)\\n        while j < n:\\n            arr[j] = org[i]\\n            j += 1\\n            if org[i] == 0: # Copy twice if ord[i] == 0\\n                if j < n: arr[j] = org[i]\\n                j += 1\\n            i += 1\\n```\n```python\\nclass Solution(object):\\n    def duplicateZeros(self, arr):\\n        n = len(arr)\\n        cntZero = arr.count(0)\\n        newLen = n + cntZero # Length of new array if we don\\'t trim up to length `n`\\n        \\n        # Let\\'s copy values from the end\\n        i = n - 1\\n        j = newLen - 1\\n        while j >= 0:\\n            if j < n: arr[j] = arr[i]\\n            j -= 1\\n            if arr[i] == 0: # Copy twice if arr[i] == 0\\n                if j < n: arr[j] = arr[i]\\n                j -= 1\\n            i -= 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 505107,
                "title": "c-two-pass-shift-counter-fast-simple-explanation",
                "content": "First pass count `0s` in the array, this is our `shift` variable.\\nSecond reverse pass:\\n* If `arr[i] == 0` reduce `shift` count by 1.\\n* If `arr[i + shift]` within array boundary, then assign `arr[i + shift] = arr[i]` (shift element to it\\'s new position). If `arr[i] == 0` then also assign next element after `arr[i + shift]` to `0`, meaning `arr[i + shift + 1] = 0`, but don\\'t forget to check that `i + shift + 1` is withing array boundary.\\n\\n```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        int shift = count(begin(arr), end(arr), 0), size = arr.size();\\n        for (int i = arr.size() - 1; i >= 0; i--) {\\n            if (!arr[i]) shift--;\\n            if (i + shift < size) {\\n                arr[i + shift] = arr[i];\\n                if (!arr[i] && i + shift + 1 < size)\\n                    arr[i + shift + 1] = 0;\\n            }\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        int shift = count(begin(arr), end(arr), 0), size = arr.size();\\n        for (int i = arr.size() - 1; i >= 0; i--) {\\n            if (!arr[i]) shift--;\\n            if (i + shift < size) {\\n                arr[i + shift] = arr[i];\\n                if (!arr[i] && i + shift + 1 < size)\\n                    arr[i + shift + 1] = 0;\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 314126,
                "title": "python-o-n-time-o-1-space",
                "content": "```\\n# it requires us to do it in place, so we can\\'t use extra space here\\n# we can do it in 2 passes, the first pass record the count of 0s as shifts\\n# the second pass put the shifted elements in the right spot and put 0s in the right spot\\n# e.g, [1,0,2,3,0,4,5,0] will be extended as [1,0,0,2,3,0,0,4],5,0,0, only the first 8 elememnts\\n# fit in the array\\n\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        shift = 0\\n        l = len(arr)\\n        for i in range(l):\\n            if arr[i] == 0:\\n                shift += 1\\n        for i in range(l-1, -1, -1):\\n            # put the shifted number in the right spot\\n            if i + shift < l:\\n                arr[i+shift] = arr[i]\\n            # if we meet a 0, we need to duplicate 0\\n            if arr[i] == 0:\\n                shift -= 1\\n                if i + shift < l:\\n                    arr[i+shift] = 0\\n\\n```",
                "solutionTags": [],
                "code": "```\\n# it requires us to do it in place, so we can\\'t use extra space here\\n# we can do it in 2 passes, the first pass record the count of 0s as shifts\\n# the second pass put the shifted elements in the right spot and put 0s in the right spot\\n# e.g, [1,0,2,3,0,4,5,0] will be extended as [1,0,0,2,3,0,0,4],5,0,0, only the first 8 elememnts\\n# fit in the array\\n\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        shift = 0\\n        l = len(arr)\\n        for i in range(l):\\n            if arr[i] == 0:\\n                shift += 1\\n        for i in range(l-1, -1, -1):\\n            # put the shifted number in the right spot\\n            if i + shift < l:\\n                arr[i+shift] = arr[i]\\n            # if we meet a 0, we need to duplicate 0\\n            if arr[i] == 0:\\n                shift -= 1\\n                if i + shift < l:\\n                    arr[i+shift] = 0\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 353153,
                "title": "javascript-simple-solution",
                "content": "```\\nvar duplicateZeros = function(arr) {\\n    \\n    for (var i=0; i<arr.length; i++) {\\n        if (arr[i] === 0) {\\n            arr.splice(i, 0, 0);\\n            arr.pop();\\n            i+=1\\n        }\\n    }\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar duplicateZeros = function(arr) {\\n    \\n    for (var i=0; i<arr.length; i++) {\\n        if (arr[i] === 0) {\\n            arr.splice(i, 0, 0);\\n            arr.pop();\\n            i+=1\\n        }\\n    }\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 312751,
                "title": "java-from-a-beginner-programmer",
                "content": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        for(int i = 0; i < arr.length; i++){\\n            if(arr[i] == 0){\\n                shift(arr,i+1);\\n                if(i != arr.length-1){\\n                arr[i+1] = 0;\\n                    i++;\\n                }\\n            }\\n            }\\n        }\\n    public static void shift(int[] arr, int index){\\n        for(int i = arr.length-1; i > index; i--){\\n            arr[i] = arr[i-1];\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        for(int i = 0; i < arr.length; i++){\\n            if(arr[i] == 0){\\n                shift(arr,i+1);\\n                if(i != arr.length-1){\\n                arr[i+1] = 0;\\n                    i++;\\n                }\\n            }\\n            }\\n        }\\n    public static void shift(int[] arr, int index){\\n        for(int i = arr.length-1; i > index; i--){\\n            arr[i] = arr[i-1];\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 399944,
                "title": "c-32ms-faster-than-40-04-easy-understanding",
                "content": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        for(int i=0; i<arr.size();++i){\\n            if(arr[i]==0){\\n                arr.pop_back();\\n                arr.insert(arr.begin()+i,0);\\n                ++i;\\n            }\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        for(int i=0; i<arr.size();++i){\\n            if(arr[i]==0){\\n                arr.pop_back();\\n                arr.insert(arr.begin()+i,0);\\n                ++i;\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 408059,
                "title": "python-simple-solution",
                "content": "\\tclass Solution:\\n\\t\\tdef duplicateZeros(self, arr: List[int]) -> None:\\n\\t\\t\\ti = 0\\n\\t\\t\\tn = len(arr)\\n\\t\\t\\twhile(i<n):\\n\\t\\t\\t\\tif arr[i]==0:\\n\\t\\t\\t\\t\\tarr.pop()\\n\\t\\t\\t\\t\\tarr.insert(i,0)\\n\\t\\t\\t\\t\\ti+=1\\n\\t\\t\\t\\ti+=1",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "\\tclass Solution:\\n\\t\\tdef duplicateZeros(self, arr: List[int]) -> None:\\n\\t\\t\\ti = 0\\n\\t\\t\\tn = len(arr)\\n\\t\\t\\twhile(i<n):\\n\\t\\t\\t\\tif arr[i]==0:\\n\\t\\t\\t\\t\\tarr.pop()\\n\\t\\t\\t\\t\\tarr.insert(i,0)\\n\\t\\t\\t\\t\\ti+=1\\n\\t\\t\\t\\ti+=1",
                "codeTag": "Java"
            },
            {
                "id": 884016,
                "title": "easy-to-understand-no-extra-space-java",
                "content": "```\\n        int n = arr.length;\\n        for(int i = 0; i<arr.length; i++) {\\n            if(arr[i] ==0) {\\n                int j;\\n                for(j = n-2; j>=i+1; j--) {\\n                    arr[j+1] = arr[j];\\n                }\\n                arr[j+1] = 0;\\n                i++;\\n            }\\n        }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n        int n = arr.length;\\n        for(int i = 0; i<arr.length; i++) {\\n            if(arr[i] ==0) {\\n                int j;\\n                for(j = n-2; j>=i+1; j--) {\\n                    arr[j+1] = arr[j];\\n                }\\n                arr[j+1] = 0;\\n                i++;\\n            }\\n        }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1612544,
                "title": "very-easy-c",
                "content": "```\\n\\n```class Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(arr[i]==0)\\n            {\\n                for(int j=arr.size()-1;j>=i+1;j--)\\n                {\\n                    arr[j]=arr[j-1];\\n                }\\n                i=i+1;\\n            }\\n        }    \\n    }\\n};\\n\\npls upvote if it was helpful :)",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 316627,
                "title": "java-solution-two-pass-and-o-1-space",
                "content": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int count = 0;\\n        for(int i : arr) {\\n            if(i == 0) {\\n                count++;\\n            }\\n        }\\n        int len = arr.length;\\n        for(int i = len - 1; i >= 0; i--) {\\n            int temp = i + count;\\n            if(temp < len) {\\n                arr[temp] = arr[i];\\n            }\\n            if(arr[i] == 0) {\\n                count--;\\n                temp = i + count;\\n                if(temp < len) {\\n                    arr[temp] = arr[i];\\n                }\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int count = 0;\\n        for(int i : arr) {\\n            if(i == 0) {\\n                count++;\\n            }\\n        }\\n        int len = arr.length;\\n        for(int i = len - 1; i >= 0; i--) {\\n            int temp = i + count;\\n            if(temp < len) {\\n                arr[temp] = arr[i];\\n            }\\n            if(arr[i] == 0) {\\n                count--;\\n                temp = i + count;\\n                if(temp < len) {\\n                    arr[temp] = arr[i];\\n                }\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 319872,
                "title": "simple-java-solution-with-a-queue-100-memory",
                "content": "I have used the default LinkedList implementation from java (which could be used as a queue)\\n\\n```\\npublic void duplicateZeros(int[] arr) {\\n\\tLinkedList<Integer> queue=new LinkedList<Integer>();  \\n\\tfor(int i = 0; i < arr.length; i++) {\\n\\t\\tqueue.add(arr[i]);\\n\\t\\tif(arr[i] == 0) {\\n\\t\\t\\t//add another 0\\n\\t\\t\\tqueue.add(arr[i]);\\n\\t\\t}\\n\\t\\tarr[i] = queue.poll();\\n\\t}\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic void duplicateZeros(int[] arr) {\\n\\tLinkedList<Integer> queue=new LinkedList<Integer>();  \\n\\tfor(int i = 0; i < arr.length; i++) {\\n\\t\\tqueue.add(arr[i]);\\n\\t\\tif(arr[i] == 0) {\\n\\t\\t\\t//add another 0\\n\\t\\t\\tqueue.add(arr[i]);\\n\\t\\t}\\n\\t\\tarr[i] = queue.poll();\\n\\t}\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2127380,
                "title": "java-two-approaches-explained-with-codes",
                "content": "```\\n/*\\n     * Naive Approach:-\\n     * (1) Traverse array till length-1.\\n     * (2) If the element where you current at is zero then shift all the elements\\n     * including zero to one step ahead.\\n     * (3) Don\\'t forget increment the pointer by 1 else array will filled by 0s.\\n     * Time Complexity = O(n^2) for traversing & shifting.\\n     * Space Complexity = 0(1).\\n     */\\n\\n    static void duplicateZeros(int[] arr) {\\n        int n = arr.length;\\n        for (int i = 0; i < n - 1; i++) { // Traversing the array.\\n            if (arr[i] == 0) {\\n                for (int j = n - 2; j >= i; j--) {\\n                    arr[j + 1] = arr[j]; // Shifting The elements\\n                }\\n                i++; // incrementing i by 1\\n            }\\n        }\\n    }\\n\\n    /*\\n     * Better Approach:-\\n     * (1) Calculate the number of zeros in array.\\n     * (2) Create two pointers one is pointing to length-1 & other is pointing to\\n     * length+zeros-1.\\n     * (3) Start modifying array from back.\\n     * Time Complexity = O(n).\\n     * Space Complexity = 0(1).\\n     */\\n\\n    static void duplicateZeros(int[] arr) {\\n        int n = arr.length, count = 0;\\n\\n        for (int num : arr) {\\n            if (num == 0) {\\n                count++;\\n            }\\n        }\\n        int i = n - 1;\\n        int j = n + count - 1;\\n\\n        while (i >= 0 && j >= 0) {\\n\\n            if (arr[i] != 0) {\\n                if (j < n) {\\n                    arr[j] = arr[i];\\n                }\\n\\n            } else {\\n                if (j < n) {\\n                    arr[j] = arr[i];\\n                }\\n                j--;\\n                if (j < n) {\\n                    arr[j] = arr[i];\\n                }\\n            }\\n\\n            i--;\\n            j--;\\n        }\\n    }\\n\\t\\n\\tPlease Upvote if you find it helpful!\\n\\t```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/*\\n     * Naive Approach:-\\n     * (1) Traverse array till length-1.\\n     * (2) If the element where you current at is zero then shift all the elements\\n     * including zero to one step ahead.\\n     * (3) Don\\'t forget increment the pointer by 1 else array will filled by 0s.\\n     * Time Complexity = O(n^2) for traversing & shifting.\\n     * Space Complexity = 0(1).\\n     */\\n\\n    static void duplicateZeros(int[] arr) {\\n        int n = arr.length;\\n        for (int i = 0; i < n - 1; i++) { // Traversing the array.\\n            if (arr[i] == 0) {\\n                for (int j = n - 2; j >= i; j--) {\\n                    arr[j + 1] = arr[j]; // Shifting The elements\\n                }\\n                i++; // incrementing i by 1\\n            }\\n        }\\n    }\\n\\n    /*\\n     * Better Approach:-\\n     * (1) Calculate the number of zeros in array.\\n     * (2) Create two pointers one is pointing to length-1 & other is pointing to\\n     * length+zeros-1.\\n     * (3) Start modifying array from back.\\n     * Time Complexity = O(n).\\n     * Space Complexity = 0(1).\\n     */\\n\\n    static void duplicateZeros(int[] arr) {\\n        int n = arr.length, count = 0;\\n\\n        for (int num : arr) {\\n            if (num == 0) {\\n                count++;\\n            }\\n        }\\n        int i = n - 1;\\n        int j = n + count - 1;\\n\\n        while (i >= 0 && j >= 0) {\\n\\n            if (arr[i] != 0) {\\n                if (j < n) {\\n                    arr[j] = arr[i];\\n                }\\n\\n            } else {\\n                if (j < n) {\\n                    arr[j] = arr[i];\\n                }\\n                j--;\\n                if (j < n) {\\n                    arr[j] = arr[i];\\n                }\\n            }\\n\\n            i--;\\n            j--;\\n        }\\n    }\\n\\t\\n\\tPlease Upvote if you find it helpful!\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 3462758,
                "title": "duplicate-zeros-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n*n/2)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        int i=0, n=arr.size();\\n        while(i<n)\\n        {\\n            if(arr[i]==0)\\n            {\\n                arr.insert(arr.begin()+i, 0);\\n                i += 2;\\n            }\\n            else\\n            {\\n                i++;\\n            }\\n        }\\n        arr.resize(n);\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/79186693-bccb-4a98-9624-bd73ce99e074_1682665502.374058.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        int i=0, n=arr.size();\\n        while(i<n)\\n        {\\n            if(arr[i]==0)\\n            {\\n                arr.insert(arr.begin()+i, 0);\\n                i += 2;\\n            }\\n            else\\n            {\\n                i++;\\n            }\\n        }\\n        arr.resize(n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1162030,
                "title": "python-simple",
                "content": "```\\ndef duplicateZeros(self, arr: List[int]) -> None:\\n        i = 0\\n        \\n        while i < len(arr) - 1:\\n            if arr[i] == 0:\\n                arr.insert(i+1, 0)\\n                arr.pop()\\n                i += 2\\n            else:\\n                i += 1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef duplicateZeros(self, arr: List[int]) -> None:\\n        i = 0\\n        \\n        while i < len(arr) - 1:\\n            if arr[i] == 0:\\n                arr.insert(i+1, 0)\\n                arr.pop()\\n                i += 2\\n            else:\\n                i += 1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 313225,
                "title": "different-python-solutions",
                "content": "Solution 1: straightforward solution with O(n) time and O(n) space\\n```\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        res = []\\n        for x in arr:\\n            res.append(x)\\n            if x == 0:\\n                res.append(x)\\n        for i in range(len(arr)):\\n            arr[i] = res[i]\\n```\\nSolution 2: creat a map: i <--> i + # zeros in arr[:i]\\n```\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        n = len(arr)\\n        zeros = 0\\n        i = 0\\n        mp = dict()\\n        while i + zeros < n:\\n            mp[i+zeros] = i\\n            if arr[i] == 0:\\n                zeros += 1\\n                mp[i+zeros] = i\\n            i += 1\\n        for i in range(n - 1, -1, -1):\\n            arr[i] = arr[mp[i]]\\n```\\nSolution 3: improved version of solution 2\\n```\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        n = len(arr)\\n        zeros = 0\\n        i = 0\\n        while i + zeros < n:\\n            zeros += arr[i] == 0\\n            i += 1\\n\\t\\t# i + zeros is at most n + 1\\n        i -= 1\\n        while zeros > 0:\\n            if i + zeros < n:\\n                arr[i+zeros] = arr[i]\\n            if arr[i] == 0:\\n                zeros -= 1\\n                arr[i+zeros] = arr[i]\\n            i -= 1\\n```",
                "solutionTags": [],
                "code": "```\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        res = []\\n        for x in arr:\\n            res.append(x)\\n            if x == 0:\\n                res.append(x)\\n        for i in range(len(arr)):\\n            arr[i] = res[i]\\n```\n```\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        n = len(arr)\\n        zeros = 0\\n        i = 0\\n        mp = dict()\\n        while i + zeros < n:\\n            mp[i+zeros] = i\\n            if arr[i] == 0:\\n                zeros += 1\\n                mp[i+zeros] = i\\n            i += 1\\n        for i in range(n - 1, -1, -1):\\n            arr[i] = arr[mp[i]]\\n```\n```\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        n = len(arr)\\n        zeros = 0\\n        i = 0\\n        while i + zeros < n:\\n            zeros += arr[i] == 0\\n            i += 1\\n\\t\\t# i + zeros is at most n + 1\\n        i -= 1\\n        while zeros > 0:\\n            if i + zeros < n:\\n                arr[i+zeros] = arr[i]\\n            if arr[i] == 0:\\n                zeros -= 1\\n                arr[i+zeros] = arr[i]\\n            i -= 1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3101355,
                "title": "easy-python-solution-while",
                "content": "# Code\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        l = len(arr)\\n        i = 0\\n        while i < l:\\n            if arr[i] == 0:\\n                arr.insert(i+1, 0)\\n                arr.pop()\\n                i += 1\\n            i += 1               \\n```\\nDo upvote if you like the solution :)",
                "solutionTags": [
                    "Python3",
                    "Array"
                ],
                "code": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        l = len(arr)\\n        i = 0\\n        while i < l:\\n            if arr[i] == 0:\\n                arr.insert(i+1, 0)\\n                arr.pop()\\n                i += 1\\n            i += 1               \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1648310,
                "title": "java-100-simple-2-steps-solution-explained",
                "content": "Simple solution:\\n1. Count number of zeros.\\n2. Iterate from end of the array,\\n\\ta. Calculate index where current element needs to be shifted.\\n\\tb. Shift current element if index lies within array.\\n\\tc. Check if current element is zero:\\n\\t\\ti. Assign zero to (index-1) to duplicate zero if (index-1) lies within array.\\n\\t\\tii. Decrease zero counter by 1.\\n\\t\\t\\nHope this helps!!! :)\\n\\n\\n```\\npublic void duplicateZeros(int[] arr) \\n    {\\n        int noOfZeros = 0;\\n        int n = arr.length;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(arr[i] == 0) noOfZeros++;\\n        }\\n        for(int i=n-1;i>=0;i--)\\n        {\\n            int curIndex = i+noOfZeros;\\n            if(curIndex<n)\\n            {\\n                arr[curIndex] = arr[i];\\n            }\\n            if(arr[i] == 0)\\n            {\\n                if(curIndex-1 < n)\\n                {\\n                    arr[curIndex-1] = arr[i];\\n                }\\n                noOfZeros--;\\n            }\\n        } \\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic void duplicateZeros(int[] arr) \\n    {\\n        int noOfZeros = 0;\\n        int n = arr.length;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(arr[i] == 0) noOfZeros++;\\n        }\\n        for(int i=n-1;i>=0;i--)\\n        {\\n            int curIndex = i+noOfZeros;\\n            if(curIndex<n)\\n            {\\n                arr[curIndex] = arr[i];\\n            }\\n            if(arr[i] == 0)\\n            {\\n                if(curIndex-1 < n)\\n                {\\n                    arr[curIndex-1] = arr[i];\\n                }\\n                noOfZeros--;\\n            }\\n        } \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 364373,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        for(int i=0;i<arr.length;i++) {\\n        \\tif(arr[i]==0) {\\n        \\t\\tfor(int j=arr.length-1;j>i;j--) {\\n        \\t\\t\\tarr[j]=arr[j-1];\\n        \\t\\t}\\n        \\t\\ti++;\\n        \\t}\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        for(int i=0;i<arr.length;i++) {\\n        \\tif(arr[i]==0) {\\n        \\t\\tfor(int j=arr.length-1;j>i;j--) {\\n        \\t\\t\\tarr[j]=arr[j-1];\\n        \\t\\t}\\n        \\t\\ti++;\\n        \\t}\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1304795,
                "title": "python-efficient-one-line-code-95-and-85-1089",
                "content": "# Python One Liner <span>1L.py</span>\\nNeat and clean one line code\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        [arr.insert(i,0) or arr.pop() for i in range(len(arr)-1,-1,-1) if not arr[i]]\\n```\\n\\n\\n#### Lets look into breadcrumbs!!<br>\\n```python\\n[... for ... in ... if ...]\\n```\\nAnything which looks like something shown above is nothing but [conditional list comprehension](https://realpython.com/list-comprehension-python/#using-conditional-logic \"Real Python\")\\n```python\\narr.insert(i,0)\\n```\\nWell, above function inserts a new zero at ```i```th position. This function returns `None` on successful insertion.\\n```python\\narr.pop()\\n```\\nBut when inserted, the length of the array is one more than the original length. So we need to pop an element from the end.\\n```python\\narr.insert(i,0) or arr.pop()\\n```\\nSince we need to do two function calls, we need to use OR operator between function calls ([why not AND?](#q1), think for a bit on return object from `arr.insert()`).\\n```\\nfor i in range(len(arr)-1,-1,-1)\\n```\\nWe start iterating from the end of the list to avoid infinite insertion of zeros when first zero is encountered.\\n```python\\n# All the below statements are identical\\nif not arr[i]:\\nif arr[i]==0:\\nif arr[i]==None:\\n```\\nWhole point to the algorithm is to add a new zero whenever a zero is encountered. Right? (Well, partially yes)\\n\\n### Q&A\\n<h5 id=\"q1\">1. why not AND?</h5>\\n\\n`arr.insert()` returns `None` upon successful insertion. If we had used AND operator, because of python\\'s [short circuiting](https://stackoverflow.com/a/14892812 \"Stack Overflow\") of AND, the second function would never be executed which results in no elements being popped out and the answer being wrong.\\n### Performance\\n![image](https://assets.leetcode.com/users/images/e6606b28-a04b-4b99-a341-71f1c01b9bc1_1624969176.0958948.png)\\n<!---\\nSubmission time: SESSION_DELETED :(\\n-->",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        [arr.insert(i,0) or arr.pop() for i in range(len(arr)-1,-1,-1) if not arr[i]]\\n```\n```python\\n[... for ... in ... if ...]\\n```\n```python\\narr.insert(i,0)\\n```\n```i```\n```python\\narr.pop()\\n```\n```python\\narr.insert(i,0) or arr.pop()\\n```\n```\\nfor i in range(len(arr)-1,-1,-1)\\n```\n```python\\n# All the below statements are identical\\nif not arr[i]:\\nif arr[i]==0:\\nif arr[i]==None:\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1051352,
                "title": "python3-simple-solution-with-explanation",
                "content": "Let\\'s walk through an example: `10230450`.\\n\\nFirst, we count `0`s in the array (`cnt`). In this case, `cnt == 3` => our array needs 3 extra slots for 3 extra `0`s: `10230450|xxx`. We modify the array from the end, and at each index, we copy the element at position `i` to position `i + cnt`. If the element is `0`, we duplicate it, and decrease `cnt`.\\n\\nThe array gets modified as follows:\\n`1023045`**0**`|xxx` -> `1023045xx`**00** (since we copy a 0, we double it.)\\n```102304```**5**```x|x00``` -> ```102304xx|```**5**```00```\\n```10230```**4**```xx|500``` -> ```10230xx```**4**```|500```\\n```1023```**0**```xx4|500``` -> ```1023x```**00**```4|500``` (again, copying a 0 so doubled.)\\n```102```**3**```x004|500``` -> ```102x```**3**```004|500```\\n```10```**2**```x3004|500``` -> ```10x```**2**```3004|500```\\n```1```**0**```x23004|500``` -> ```1```**00**```23004|500```\\nEnd result: ```10023004|500```. We now return everything up to right before the ```|```.\\n\\nBut how do we use no extra space? We simply do not need to copy the elements over if they would end up outside our original array. So the last 3 slots ```|500``` are simulated, but not actually copied over.\\n\\nTime: ```O(n)```. Space: ```O(1)``` (we traverse the array twice (once to count ```0```s, once more to move elements)\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        cnt = arr.count(0)\\n\\n        for i in reversed(range(len(arr))):\\n            if i + cnt < len(arr): arr[i + cnt] = arr[i]  # copy the number over to correct position\\n            if arr[i] == 0:\\n                cnt -= 1\\n                if i + cnt < len(arr): arr[i + cnt] = arr[i]  # copy again if the number is 0\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```102304```\n```x|x00```\n```102304xx|```\n```00```\n```10230```\n```xx|500```\n```10230xx```\n```|500```\n```1023```\n```xx4|500```\n```1023x```\n```4|500```\n```102```\n```x004|500```\n```102x```\n```004|500```\n```10```\n```x3004|500```\n```10x```\n```3004|500```\n```1```\n```x23004|500```\n```1```\n```23004|500```\n```10023004|500```\n```|```\n```|500```\n```O(n)```\n```O(1)```\n```0```\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        cnt = arr.count(0)\\n\\n        for i in reversed(range(len(arr))):\\n            if i + cnt < len(arr): arr[i + cnt] = arr[i]  # copy the number over to correct position\\n            if arr[i] == 0:\\n                cnt -= 1\\n                if i + cnt < len(arr): arr[i + cnt] = arr[i]  # copy again if the number is 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 857654,
                "title": "java-duplicate-zeros-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n\\t\\tfor (int i = 0; i < arr.length - 1; i++) { //if we are on the last element it doesn\\'t matter if it is non-zero or not\\n        \\tif (arr[i] == 0) { //if we get a zero we shift everything from the back to the right by one\\n        \\t\\tfor (int j = arr.length - 1; j > i; j--) {\\n        \\t\\t\\tarr[j] = arr[j - 1]; \\n        \\t\\t}\\n                i++; //if we get a zero we need to shift \\'i\\' twice to avoid running into the zero we just duplicated\\n        \\t}\\n        }\\n    }\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n\\t\\tfor (int i = 0; i < arr.length - 1; i++) { //if we are on the last element it doesn\\'t matter if it is non-zero or not\\n        \\tif (arr[i] == 0) { //if we get a zero we shift everything from the back to the right by one\\n        \\t\\tfor (int j = arr.length - 1; j > i; j--) {\\n        \\t\\t\\tarr[j] = arr[j - 1]; \\n        \\t\\t}\\n                i++; //if we get a zero we need to shift \\'i\\' twice to avoid running into the zero we just duplicated\\n        \\t}\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1002778,
                "title": "o-n-easiest-solution-ever-if-u-finding-other-solution-difficult-plz-refer-this-and-upvote",
                "content": "/*\\n\\nconsider, int [] arr = {1,0,2,3,0,4,5,0};\\nwe need to add one duplicate zero followed by original one\\nso we will use, for loop to check for zeroes,and \\nwe will use extra space ArrayList just to add element of arr and extra zeroes, \\n\\n   if element is non zero we will add it as it is\\n   else we will add extra zero to our ArrayList\\n\\n    after above operation we will get ArrayList as {1,0,0,2,3,0,0,4,5,0,0};\\n    and we will also replace element at index i in arr with element at index i on ArrayList;\\n    arr[i]=ll.get(i);\\n\\nso we will get updated arr ={1,0,0,2,3,0,0,4};  \\n\\n*/\\n```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n    \\n        List <Integer> ll = new ArrayList();\\n\\t    \\n        int index=0;                          \\n        //index increment as we add elements in List\\n\\t    \\n        for(int i=0;i<arr.length;i++) {\\t\\n\\t    \\t\\n            if(arr[i]==0) \\n            {\\n              ll.add(index++,arr[i]);      // zero from array\\n              ll.add(index++,0);           // add duplicate zero \\n            }\\n\\t    \\t\\n            else \\n            { ll.add(index++,arr[i]); }\\n\\t    \\t\\n            arr[i]=ll.get(i);             \\n        // we will update our Arrays form 0 , with respect to our Updated list\\n\\t    }   \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n    \\n        List <Integer> ll = new ArrayList();\\n\\t    \\n        int index=0;                          \\n        //index increment as we add elements in List\\n\\t    \\n        for(int i=0;i<arr.length;i++) {\\t\\n\\t    \\t\\n            if(arr[i]==0) \\n            {\\n              ll.add(index++,arr[i]);      // zero from array\\n              ll.add(index++,0);           // add duplicate zero \\n            }\\n\\t    \\t\\n            else \\n            { ll.add(index++,arr[i]); }\\n\\t    \\t\\n            arr[i]=ll.get(i);             \\n        // we will update our Arrays form 0 , with respect to our Updated list\\n\\t    }   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3044179,
                "title": "python-easy-solution-with-comment",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n```\\narr = [1,0,2,3,0,4,5,0]\\n         ^\\n        (i=1) & i+2\\n        (insert)\\n    \\narr = [1,0,0,2,3,0,4,5,0]\\n             ^         ^      \\n            (i=3)     (pop) \\n\\narr = [1,0,0,2,3,0,4,5]\\n\\n```\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        \\n            <!-- use while loop to contorl \"i\" -->\\n        i=0\\n        while(i<len(arr)):\\n            if(arr[i]==0):\\n                arr.insert(i,0)\\n\\n            <!-- i+2 for skip the insert index -->\\n                i=i+2\\n                arr.pop()\\n            else:\\n                i=i+1\\n \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\narr = [1,0,2,3,0,4,5,0]\\n         ^\\n        (i=1) & i+2\\n        (insert)\\n    \\narr = [1,0,0,2,3,0,4,5,0]\\n             ^         ^      \\n            (i=3)     (pop) \\n\\narr = [1,0,0,2,3,0,4,5]\\n\\n```\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        \\n            <!-- use while loop to contorl \"i\" -->\\n        i=0\\n        while(i<len(arr)):\\n            if(arr[i]==0):\\n                arr.insert(i,0)\\n\\n            <!-- i+2 for skip the insert index -->\\n                i=i+2\\n                arr.pop()\\n            else:\\n                i=i+1\\n \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1024740,
                "title": "python-easy-to-understand-single-pass-brute-force-approach-optimal-in-place-solution",
                "content": "It took me some time to properly understand and get some intuition, so I wrote the brute force approach and the neatest solution as good as i could (hope I don\\'t overengineer it)... I hope this helps newcomers:\\n\\nFor the brute force approach we will do a single pass from left to right (0 to len(array) - 1). Every time we find a zero in the array, we will copy all values to the right. This copying right side is done from right to left in order to not to erase the next iteration value.\\n\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n\\t\\tcurr_idx = 0\\n\\t\\twhile curr_idx < len(array):\\n\\t\\t    if arr[curr_idx] == 0:\\n\\t\\t        self.copyRightSide(arr, curr_idx)\\n\\t\\t\\t    # We copied the right side including the current value, so the next idx would be the value of the curr_idx and we would get an infinite loop\\n\\t\\t\\t    curr_idx += 1\\n\\t        curr_idx += 1\\n\\n    def copyRightSide(self, arr: List[int], idx) -> None:\\n    \"\"\"   \\n    Insert an element at index idx and keep all values to the right aligned.\\n    E.g. \\n       copyRightSide([1, 0, 3, 7, 8, 5], idx=2) will yield [1, 0, 3, 3, 7, 8, 5]\\n\\t\"\"\"\\n   \\n    for curr_idx in range(len(arr) - 1, idx, -1):\\n       arr[curr_idx] = arr[curr_idx - 1]\\n```\\n\\nThe good thing about the approach above is that it\\'s straight forward and we do not have to consider the edge cases for many zeros. The problem though is that we\\'re iterating from left to right, copying the array, finding the next zero, and recopying elements that were already shifted. This is computationally expensive.\\n\\nAs shown in the solution, a better approach would be to do two passes: first count the amount of zeroes `total_zeroes`, then do another pass from right to left. \\nWe will effectively move the values in the array further to the right. The amount of spaces to the right that are shifted is the idx + amount of zeroes we found so far. That is, it holds `new_idx = curr_idx + total_zeroes` for every iteration. When we find a zero, we reduce the count of `total_zeroes` and recopy the same element a second time.\\nLet\\'s see what it looks like without having to worry about increasing the size of the array:\\n\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n\\t\\ttotal_zeroes = arr.count(0)\\n\\t\\t\\n\\t\\tlast_idx = len(arr) - 1\\n\\t\\tfor curr_idx in range(last_idx, -1, -1):\\n\\t\\t    \\n\\t\\t\\t# This is the place where the curr_idx gets extended in the array\\n\\t\\t    new_idx = curr_idx + total_zeroes\\n\\t\\t\\t\\n\\t\\t\\tarr[new_idx] = arr[curr_idx]\\n\\t\\t\\t\\n\\t\\t    if arr[curr_idx] == 0:\\n\\t\\t\\t    total_zeroes -= 1\\n\\t\\t\\t    arr[new_idx] = arr[curr_idx]\\n```\\n\\nThis effectively turns an array like `[0, 1, 0, 2, 3, 4, 0]` into `[0, 0, 1, 0, 0, 2, 3, 4, 0, 0]`. In order to comply then with the constraint, we should check first if the new_idx would still be within the length of the array before copying the values to the right i.e. add `if new_idx <= last_idx` before every assignment ```arr[new_idx] = arr[curr_idx]```\\n\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n\\t\\ttotal_zeroes = arr.count(0)\\n\\t\\t\\n\\t\\tlast_idx = len(arr) - 1\\n\\t\\tfor curr_idx in range(last_idx, -1, -1):\\n\\t\\t    \\n\\t\\t\\t# This is the place where the curr_idx gets extended in the array\\n\\t\\t    new_idx = curr_idx + total_zeroes\\n\\t\\t\\t\\n\\t\\t\\tif new_idx <= last_idx:\\n\\t\\t\\t    arr[new_idx] = arr[curr_idx]\\n\\t\\t\\t\\n\\t\\t    if arr[curr_idx] == 0:\\n\\t\\t\\t    total_zeroes -= 1\\n\\t\\t\\t\\tif new_idx <= last_idx:\\n\\t\\t\\t        arr[new_idx] = arr[curr_idx] # or simply arr[new_idx] = 0\\n```\\n\\nCredit for the last solution goes to @rokanor. See https://leetcode.com/problems/duplicate-zeros/discuss/322576/Python-3-real-in-place-solution\\n\\n\\t",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n\\t\\tcurr_idx = 0\\n\\t\\twhile curr_idx < len(array):\\n\\t\\t    if arr[curr_idx] == 0:\\n\\t\\t        self.copyRightSide(arr, curr_idx)\\n\\t\\t\\t    # We copied the right side including the current value, so the next idx would be the value of the curr_idx and we would get an infinite loop\\n\\t\\t\\t    curr_idx += 1\\n\\t        curr_idx += 1\\n\\n    def copyRightSide(self, arr: List[int], idx) -> None:\\n    \"\"\"   \\n    Insert an element at index idx and keep all values to the right aligned.\\n    E.g. \\n       copyRightSide([1, 0, 3, 7, 8, 5], idx=2) will yield [1, 0, 3, 3, 7, 8, 5]\\n\\t\"\"\"\\n   \\n    for curr_idx in range(len(arr) - 1, idx, -1):\\n       arr[curr_idx] = arr[curr_idx - 1]\\n```\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n\\t\\ttotal_zeroes = arr.count(0)\\n\\t\\t\\n\\t\\tlast_idx = len(arr) - 1\\n\\t\\tfor curr_idx in range(last_idx, -1, -1):\\n\\t\\t    \\n\\t\\t\\t# This is the place where the curr_idx gets extended in the array\\n\\t\\t    new_idx = curr_idx + total_zeroes\\n\\t\\t\\t\\n\\t\\t\\tarr[new_idx] = arr[curr_idx]\\n\\t\\t\\t\\n\\t\\t    if arr[curr_idx] == 0:\\n\\t\\t\\t    total_zeroes -= 1\\n\\t\\t\\t    arr[new_idx] = arr[curr_idx]\\n```\n```arr[new_idx] = arr[curr_idx]```\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n\\t\\ttotal_zeroes = arr.count(0)\\n\\t\\t\\n\\t\\tlast_idx = len(arr) - 1\\n\\t\\tfor curr_idx in range(last_idx, -1, -1):\\n\\t\\t    \\n\\t\\t\\t# This is the place where the curr_idx gets extended in the array\\n\\t\\t    new_idx = curr_idx + total_zeroes\\n\\t\\t\\t\\n\\t\\t\\tif new_idx <= last_idx:\\n\\t\\t\\t    arr[new_idx] = arr[curr_idx]\\n\\t\\t\\t\\n\\t\\t    if arr[curr_idx] == 0:\\n\\t\\t\\t    total_zeroes -= 1\\n\\t\\t\\t\\tif new_idx <= last_idx:\\n\\t\\t\\t        arr[new_idx] = arr[curr_idx] # or simply arr[new_idx] = 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 589488,
                "title": "go-simple-solution-beats-100-100-o-n-complexity-o-1-space",
                "content": "```go\\nfunc duplicateZeros(arr []int)  {\\n    zeros := 0\\n\\n    for _, v := range arr {\\n        if v == 0 {\\n            zeros++\\n        }\\n    }\\n\\n    for i := len(arr) - 1; i >= 0; i-- {\\n        if arr[i] == 0 {\\n            if zeros + i < len(arr) {\\n                arr[zeros + i] = 0\\n            }\\n            \\n            if zeros - 1 + i < len(arr) {\\n                arr[zeros - 1 + i] = 0\\n            }\\n            \\n            zeros--\\n        } else if i + zeros < len(arr) {\\n            arr[zeros + i] = arr[i]\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc duplicateZeros(arr []int)  {\\n    zeros := 0\\n\\n    for _, v := range arr {\\n        if v == 0 {\\n            zeros++\\n        }\\n    }\\n\\n    for i := len(arr) - 1; i >= 0; i-- {\\n        if arr[i] == 0 {\\n            if zeros + i < len(arr) {\\n                arr[zeros + i] = 0\\n            }\\n            \\n            if zeros - 1 + i < len(arr) {\\n                arr[zeros - 1 + i] = 0\\n            }\\n            \\n            zeros--\\n        } else if i + zeros < len(arr) {\\n            arr[zeros + i] = arr[i]\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 543558,
                "title": "very-simple-js-solution-memory-less-than-100",
                "content": "```\\n/**\\n * @param {number[]} arr\\n * @return {void} Do not return anything, modify arr in-place instead.\\n */\\nvar duplicateZeros = function(arr) {\\n    for (i = 0; i < arr.length; i++) {\\n        if (arr[i] == 0) {\\n            arr.splice(i, 0, 0);\\n            arr.pop();\\n            i++;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @return {void} Do not return anything, modify arr in-place instead.\\n */\\nvar duplicateZeros = function(arr) {\\n    for (i = 0; i < arr.length; i++) {\\n        if (arr[i] == 0) {\\n            arr.splice(i, 0, 0);\\n            arr.pop();\\n            i++;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4094396,
                "title": "two-simple-java-solutions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code1\\n```Java\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int length = arr.length;\\n        int zeros = 0;\\n\\n        for (int i = 0; i < length; i++) {\\n            if (arr[i] == 0) {\\n                zeros++;\\n            }\\n        }\\n\\n        int lastIndex = length - 1;\\n        int newIndex = length - 1 + zeros;\\n\\n        while (lastIndex >= 0) {\\n            if (newIndex < length) {\\n                arr[newIndex] = arr[lastIndex];\\n            }\\n\\n            if (arr[lastIndex] == 0) {\\n                newIndex--;\\n\\n                if (newIndex < length) {\\n                    arr[newIndex] = 0;\\n                }\\n            }\\n\\n            lastIndex--;\\n            newIndex--;\\n        }\\n    }\\n}\\n```\\n\\n\\n# Code2\\n```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int length = arr.length;\\n\\n        for (int i = 0; i < length ; i++)\\n        {\\n            if (arr[i] == 0 && i+1 < length)\\n            {\\n                for (int j = length - 1; j > i+1; j--)\\n                {\\n                    int temp = arr[j-1];\\n                    arr[j] = temp;\\n                }\\n                arr[i+1] = 0;\\n                i++;\\n            }\\n        }\\n    }\\n}\\n```\\n![abcd1.jpeg](https://assets.leetcode.com/users/images/8cefe933-b2ba-4b42-801b-1736daaf39b0_1695761536.3744702.jpeg)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```Java\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int length = arr.length;\\n        int zeros = 0;\\n\\n        for (int i = 0; i < length; i++) {\\n            if (arr[i] == 0) {\\n                zeros++;\\n            }\\n        }\\n\\n        int lastIndex = length - 1;\\n        int newIndex = length - 1 + zeros;\\n\\n        while (lastIndex >= 0) {\\n            if (newIndex < length) {\\n                arr[newIndex] = arr[lastIndex];\\n            }\\n\\n            if (arr[lastIndex] == 0) {\\n                newIndex--;\\n\\n                if (newIndex < length) {\\n                    arr[newIndex] = 0;\\n                }\\n            }\\n\\n            lastIndex--;\\n            newIndex--;\\n        }\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int length = arr.length;\\n\\n        for (int i = 0; i < length ; i++)\\n        {\\n            if (arr[i] == 0 && i+1 < length)\\n            {\\n                for (int j = length - 1; j > i+1; j--)\\n                {\\n                    int temp = arr[j-1];\\n                    arr[j] = temp;\\n                }\\n                arr[i+1] = 0;\\n                i++;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2951028,
                "title": "basic-approach-easy-solution",
                "content": "# Intuition\\nCreated a temp vector in which elements were pushed according to constraints. But during copying , only limited length was allowed to copy.\\n\\n# Approach\\nCreate a temp vector which accepts \\'0\\' twice and nonzero elements single time. Just copy the elements only till length of arr.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        vector<int> temp;\\n        for(int i = 0; i<arr.size();i++){\\n            if(arr[i] == 0){\\n                temp.push_back(0);\\n                temp.push_back(0);\\n            }\\n            else temp.push_back(arr[i]);\\n        }\\n        for(int i = 0;i<arr.size();i++){\\n            arr[i]=temp[i];\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        vector<int> temp;\\n        for(int i = 0; i<arr.size();i++){\\n            if(arr[i] == 0){\\n                temp.push_back(0);\\n                temp.push_back(0);\\n            }\\n            else temp.push_back(arr[i]);\\n        }\\n        for(int i = 0;i<arr.size();i++){\\n            arr[i]=temp[i];\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2799546,
                "title": "javascript-o-n-beats-90-easy",
                "content": "# Intuition\\nFrequence counter\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} arr\\n * @return {void} Do not return anything, modify arr in-place instead.\\n */\\nvar duplicateZeros = function (arr) {\\n  const newArr = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    newArr.push(arr[i]);\\n    arr[i] === 0 && newArr.push(0);\\n  }\\n  for (let i = 0; i < arr.length; i++) {\\n    arr[i] = newArr[i];\\n  }\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @return {void} Do not return anything, modify arr in-place instead.\\n */\\nvar duplicateZeros = function (arr) {\\n  const newArr = [];\\n  for (let i = 0; i < arr.length; i++) {\\n    newArr.push(arr[i]);\\n    arr[i] === 0 && newArr.push(0);\\n  }\\n  for (let i = 0; i < arr.length; i++) {\\n    arr[i] = newArr[i];\\n  }\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2496025,
                "title": "simple-python-solution",
                "content": "What the code does\\n1. Iterates through the array.\\n2. If the current element is 0, removes the last element from the array and Insert 0 at the current index.\\n4. Increment the index by 2.\\n5. If the current element is not 0, increment the index by 1\\n\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] == 0: \\n                arr.pop()\\n                arr.insert(i, 0)\\n                i += 2\\n            else:\\n                i += 1\\n```\\n\\nTime complexity is O(n) as it will iterate over the entire array and space complexity is O(1) as we are only inserting and deleting elements from the array.",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] == 0: \\n                arr.pop()\\n                arr.insert(i, 0)\\n                i += 2\\n            else:\\n                i += 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2364453,
                "title": "with-explanation-comments-time-67-ms-32-33-space-9-5-mb-99-62",
                "content": "**Like it? ->Upvote please!**\\n\\n**Solution 1:**\\n\\n\\'\\'\\'\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        \\n        //loop over the whole array elemenst\\n        for(int i=0;i<arr.size();i++){\\n            //if the current one is 0\\n            if(arr[i]==0){\\n                //remove one element from the last\\n                arr.pop_back();\\n                //insert 0 in the next position after this 0\\n                arr.insert(arr.begin()+i,0);\\n                //move an extra step, skip the new zero element\\n                i++;\\n            }\\n        }\\n    }\\n};\\n\\'\\'\\'\\n\\n**Solution 2: **\\n\\n\\'\\'\\'\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        \\n        //loop over the whole array elements\\n        for(int i=0;i<arr.size();i++)\\n            //if the current one is 0\\n            if(arr[i]==0){\\n                //shift elements from the last to the current element\\n                for(int j=arr.size()-1;j!=i;j--)\\n                    arr[j]=arr[j-1];\\n                    \\n                //move an extra step, skip the new zero element\\n                i++;\\n            }\\n    }\\n};\\n\\'\\'\\'\\n\\n**Like it? ->Upvote please!**",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "Two Pointers"
                ],
                "code": "class Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        \\n        //loop over the whole array elemenst\\n        for(int i=0;i<arr.size();i++){\\n            //if the current one is 0\\n            if(arr[i]==0){\\n                //remove one element from the last\\n                arr.pop_back();\\n                //insert 0 in the next position after this 0\\n                arr.insert(arr.begin()+i,0);\\n                //move an extra step, skip the new zero element\\n                i++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1486534,
                "title": "easy-java-solution",
                "content": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        for(int i=0;i<arr.length;i++){\\n            if(arr[i]==0){\\n                for(int j=arr.length-1;j>i;j--){\\n                    arr[j]=arr[j-1];\\n                }\\n                i++;\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        for(int i=0;i<arr.length;i++){\\n            if(arr[i]==0){\\n                for(int j=arr.length-1;j>i;j--){\\n                    arr[j]=arr[j-1];\\n                }\\n                i++;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 315352,
                "title": "python-solution",
                "content": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        j=0\\n        while j<len(arr)-1:\\n            if arr[j] == 0:\\n                arr[j+1:] = [0]+arr[j+1:-1]\\n                j+=2\\n            else:\\n                j+=1\\n\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        j=0\\n        while j<len(arr)-1:\\n            if arr[j] == 0:\\n                arr[j+1:] = [0]+arr[j+1:-1]\\n                j+=2\\n            else:\\n                j+=1\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2607097,
                "title": "java-faster-than-99-34-solution",
                "content": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int length = arr.length;\\n        int[] res = new int[length];\\n        int j = 0;\\n        \\n        for (int i = 0; i < length && j < length; i++){\\n            if (arr[i] != 0){\\n                res[j] = arr[i];\\n            } else {\\n                j++;\\n            }\\n            j++;\\n        }\\n        \\n        for (int i = 0; i < length; i++){\\n            arr[i] = res[i];\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int length = arr.length;\\n        int[] res = new int[length];\\n        int j = 0;\\n        \\n        for (int i = 0; i < length && j < length; i++){\\n            if (arr[i] != 0){\\n                res[j] = arr[i];\\n            } else {\\n                j++;\\n            }\\n            j++;\\n        }\\n        \\n        for (int i = 0; i < length; i++){\\n            arr[i] = res[i];\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1148874,
                "title": "simple-python-sol-with-detailed-explanation",
                "content": "\\n        i = 0\\n        \\n        while i <len(arr): # coz index will be out of range as we are poping the last ele\\n            \\n            # although we the length remains same but we are inserting at i+1  so we need to keep i < len(arr)\\n            \\n            if arr[i]!=0:\\n                i+=1\\n                \\n            else:\\n                arr.insert(i+1, 0) # insert (1 st parameter as the position and then val u want to insert)\\n                \\n                i+=2 # coz we have duplicated 0 in next place \\n                arr.pop()",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array"
                ],
                "code": "\\n        i = 0\\n        \\n        while i <len(arr): # coz index will be out of range as we are poping the last ele\\n            \\n            # although we the length remains same but we are inserting at i+1  so we need to keep i < len(arr)\\n            \\n            if arr[i]!=0:\\n                i+=1\\n                \\n            else:\\n                arr.insert(i+1, 0) # insert (1 st parameter as the position and then val u want to insert)\\n                \\n                i+=2 # coz we have duplicated 0 in next place \\n                arr.pop()",
                "codeTag": "Unknown"
            },
            {
                "id": 781693,
                "title": "c-one-pass-with-a-queue",
                "content": "Using a queue allows us to remember the elements we need to shift in the right order. \\nWe go through the list, and we add the current element in the queue, if it\\'s a zero we add a zero at the end of the queue. The current element is replaced by the first element of the queue.\\n\\n```\\n    void duplicateZeros(vector<int>& arr) {\\n        std::queue<int> q; \\n        for ( int i{0}; i < arr.size(); i++ ) {\\n            q.push(arr[i]);\\n            if ( arr[i] == 0 )\\n                q.push(0);\\n            arr[i] = q.front();\\n            q.pop();\\n        }\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    void duplicateZeros(vector<int>& arr) {\\n        std::queue<int> q; \\n        for ( int i{0}; i < arr.size(); i++ ) {\\n            q.push(arr[i]);\\n            if ( arr[i] == 0 )\\n                q.push(0);\\n            arr[i] = q.front();\\n            q.pop();\\n        }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 529613,
                "title": "golang-98-faster",
                "content": "```\\nfunc duplicateZeros(arr []int)  {\\n    for i:= 0; i < len(arr); i++ {\\n        if arr[i] == 0 {\\n            copy(arr[i+1:], arr[i:])\\n            i++\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc duplicateZeros(arr []int)  {\\n    for i:= 0; i < len(arr); i++ {\\n        if arr[i] == 0 {\\n            copy(arr[i+1:], arr[i:])\\n            i++\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 528320,
                "title": "100-faster-100-less-memory",
                "content": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        // Clone the current array as the source of inputs.\\n        int[] original = arr.clone();\\n        \\n        // Create two different counter, one for the original array\\n        // the other for the modified array.\\n        int cO = 0;\\n        int cA = 0;\\n        \\n        // Continue until the modified array counter\\n        // is equal to the length of array.\\n        while (cA < arr.length) {\\n            // Copy the current index of original array\\n            // to the current modified array.\\n            arr[cA] = original[cO];\\n            cA++;\\n            \\n            // Only if the current counter of array is still less than the modified array\\n            // and if the original counter points to a zero.\\n            if (cA < arr.length && original[cO] == 0) {\\n                arr[cA] = 0;\\n                cA++;\\n            }\\n            cO++;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        // Clone the current array as the source of inputs.\\n        int[] original = arr.clone();\\n        \\n        // Create two different counter, one for the original array\\n        // the other for the modified array.\\n        int cO = 0;\\n        int cA = 0;\\n        \\n        // Continue until the modified array counter\\n        // is equal to the length of array.\\n        while (cA < arr.length) {\\n            // Copy the current index of original array\\n            // to the current modified array.\\n            arr[cA] = original[cO];\\n            cA++;\\n            \\n            // Only if the current counter of array is still less than the modified array\\n            // and if the original counter points to a zero.\\n            if (cA < arr.length && original[cO] == 0) {\\n                arr[cA] = 0;\\n                cA++;\\n            }\\n            cO++;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3362616,
                "title": "easy-arraylist-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n      ArrayList<Integer> ans = new ArrayList<>();\\n        for(int i = 0 ; i < arr.length ; i++){\\n            if(arr[i] != 0){\\n                ans.add(arr[i]);\\n            }else{\\n                ans.add(0);\\n                ans.add(0);\\n            }\\n        }\\n        for(int i = 0 ; i < arr.length ;i++){\\n            arr[i] = ans.get(i);\\n        }\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n      ArrayList<Integer> ans = new ArrayList<>();\\n        for(int i = 0 ; i < arr.length ; i++){\\n            if(arr[i] != 0){\\n                ans.add(arr[i]);\\n            }else{\\n                ans.add(0);\\n                ans.add(0);\\n            }\\n        }\\n        for(int i = 0 ; i < arr.length ;i++){\\n            arr[i] = ans.get(i);\\n        }\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2777649,
                "title": "fast-easy-3-approaches-c-time-o-n-space-o-1",
                "content": "\\u2B50 Please upvote if you like the post \\u2B50\\n\\n---\\n\\n### Approach 1 - Brute Force\\n**Time Complexity :** O(n^2)\\n**Space Complexity :**  O(1)\\n**Explanation:**\\n1. Iterate over array\\n2. Check if element is 0\\n3. Shift all remaining elements to right by one\\n\\n**Code:**\\n```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        const int VALUE_ZERO = 0;\\n        const int ARRAY_LENGTH = arr.size();\\n        \\n        for(int i=0; i<ARRAY_LENGTH; i++){\\n            if(arr[i] != VALUE_ZERO)\\n                continue;\\n            \\n            for(int j=ARRAY_LENGTH-1; j>i; j--)\\n                arr[j] = arr[j-1];\\n            \\n            i++;\\n        }\\n    }\\n};\\n```\\n\\n---\\n\\n### Approach 2 - Queue\\n**Time Complexity :** O(n)\\n**Space Complexity :**  O(n)\\n**Explanation:**\\n1. Create a queue\\n2. Add element to queue\\n3. Check if element is zero\\n4. Then again add element to queue\\n5. Set frontmost elemnt of queue to array\\n6. Remove element from queue\\n\\n**Code:**\\n```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        const int VALUE_ZERO = 0;\\n        const int ARRAY_LENGTH = arr.size();\\n        queue<int> data;\\n    \\n        for(int index=0; index<ARRAY_LENGTH; index++){\\n            data.push(arr[index]);\\n            \\n            if(arr[index] == VALUE_ZERO)\\n                data.push(arr[index]);\\n            \\n            arr[index] = data.front();\\n            data.pop();\\n        }\\n    }\\n};\\n```\\n\\n---\\n\\n### Approach 3 - Two Pointers\\n**Time Complexity :** O(n)\\n**Space Complexity :**  O(1)\\n**Explanation:**\\n1. Set start to 0 and end to last index\\n2. Iterate over array until end\\n3. Decrement end occurance of 0\\n4. Later iterate over array in reverse until end pointer\\n5. Set end pointer value to current\\n6. Set previous index to 0 on occurence of 0 if start != end\\n\\n**Code:**\\n```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        const int VALUE_ZERO = 0;\\n        const int ARRAY_LENGTH = arr.size();\\n        \\n        int start = 0;\\n        int end = ARRAY_LENGTH-1;\\n        \\n        while(start < end){\\n            if(arr[start] == VALUE_ZERO)\\n                end--;\\n            start++;\\n        }\\n        \\n        for(int index=ARRAY_LENGTH-1; index>end; index--, end--){\\n            arr[index] = arr[end];\\n            \\n            if(arr[end] == VALUE_ZERO && start != end)\\n                arr[--index] = VALUE_ZERO;\\n        }\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        const int VALUE_ZERO = 0;\\n        const int ARRAY_LENGTH = arr.size();\\n        \\n        for(int i=0; i<ARRAY_LENGTH; i++){\\n            if(arr[i] != VALUE_ZERO)\\n                continue;\\n            \\n            for(int j=ARRAY_LENGTH-1; j>i; j--)\\n                arr[j] = arr[j-1];\\n            \\n            i++;\\n        }\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        const int VALUE_ZERO = 0;\\n        const int ARRAY_LENGTH = arr.size();\\n        queue<int> data;\\n    \\n        for(int index=0; index<ARRAY_LENGTH; index++){\\n            data.push(arr[index]);\\n            \\n            if(arr[index] == VALUE_ZERO)\\n                data.push(arr[index]);\\n            \\n            arr[index] = data.front();\\n            data.pop();\\n        }\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        const int VALUE_ZERO = 0;\\n        const int ARRAY_LENGTH = arr.size();\\n        \\n        int start = 0;\\n        int end = ARRAY_LENGTH-1;\\n        \\n        while(start < end){\\n            if(arr[start] == VALUE_ZERO)\\n                end--;\\n            start++;\\n        }\\n        \\n        for(int index=ARRAY_LENGTH-1; index>end; index--, end--){\\n            arr[index] = arr[end];\\n            \\n            if(arr[end] == VALUE_ZERO && start != end)\\n                arr[--index] = VALUE_ZERO;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2572094,
                "title": "java-my-solution-easy",
                "content": "```\\nclass Solution {\\n\\n    public void duplicateZeros(int[] arr) {\\n        List<Integer> list = new ArrayList<>();\\n        for (int i = 0; i < arr.length ; i++) {\\n            if (arr[i] == 0) {\\n                list.add(0);\\n                list.add(0);\\n            } \\n            else list.add(arr[i]);\\n        }\\n\\n        for (int i = 0; i < arr.length; i++) arr[i] = list.get(i);\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\n    public void duplicateZeros(int[] arr) {\\n        List<Integer> list = new ArrayList<>();\\n        for (int i = 0; i < arr.length ; i++) {\\n            if (arr[i] == 0) {\\n                list.add(0);\\n                list.add(0);\\n            } \\n            else list.add(arr[i]);\\n        }\\n\\n        for (int i = 0; i < arr.length; i++) arr[i] = list.get(i);\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2523683,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        ArrayList<Integer> al=new ArrayList<>();\\n        int n=arr.length;\\n        for(int i=0;i<arr.length;i++)\\n        {\\n            if(arr[i]==0)\\n            {\\n                al.add(0);\\n                al.add(0);\\n            }\\n            else al.add(arr[i]);\\n        }\\n        for(int i=0;i<n;i++)\\n            arr[i]=al.get(i);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        ArrayList<Integer> al=new ArrayList<>();\\n        int n=arr.length;\\n        for(int i=0;i<arr.length;i++)\\n        {\\n            if(arr[i]==0)\\n            {\\n                al.add(0);\\n                al.add(0);\\n            }\\n            else al.add(arr[i]);\\n        }\\n        for(int i=0;i<n;i++)\\n            arr[i]=al.get(i);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2521942,
                "title": "javascript-solution",
                "content": "var duplicateZeros = function(arr) {\\n\\n    for(let i = 0; i<arr.length;i++){\\n        if(arr[i]===0){\\n            arr.pop(); \\n            arr.splice(i+1,0,0);\\n            i++\\n        }\\n    }\\n    return arr; \\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "var duplicateZeros = function(arr) {\\n\\n    for(let i = 0; i<arr.length;i++){\\n        if(arr[i]===0){\\n            arr.pop(); \\n            arr.splice(i+1,0,0);\\n            i++\\n        }\\n    }\\n    return arr; \\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 2482397,
                "title": "c-two-pointer-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr)\\n    {\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(arr[i]==0)\\n            {\\n                for(int j=arr.size()-1;j>=i+1;j--)\\n                {\\n                    arr[j]=arr[j-1];\\n                }\\n                i++;\\n            }\\n        }\\n    }\\n};\\n//if you like the solution plz upvote.",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "class Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr)\\n    {\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(arr[i]==0)\\n            {\\n                for(int j=arr.size()-1;j>=i+1;j--)\\n                {\\n                    arr[j]=arr[j-1];\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2342060,
                "title": "very-simple-python-solution",
                "content": "```\\nfrom typing import List\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i]==0:\\n                arr.insert(i+1,0)\\n                arr.pop()\\n                i+=1\\n            i+=1\\n            \\n```\\n\\nfrom typing import List Because in Python bversion above 3.9 we need to import Lists",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nfrom typing import List\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i]==0:\\n                arr.insert(i+1,0)\\n                arr.pop()\\n                i+=1\\n            i+=1\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1831220,
                "title": "easy-to-understand-js-solution",
                "content": "```\\nvar duplicateZeros = function(arr) {\\n    \\n    for(let i=arr.length - 1; i >= 0; i--) {\\n        if (arr[i] == 0) {\\n            for (let j = arr.length - 1; j > i; j--) {\\n                arr[j] = arr[j-1];\\n            }\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\nvar duplicateZeros = function(arr) {\\n    \\n    for(let i=arr.length - 1; i >= 0; i--) {\\n        if (arr[i] == 0) {\\n            for (let j = arr.length - 1; j > i; j--) {\\n                arr[j] = arr[j-1];\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1727461,
                "title": "c-stl",
                "content": "```c++\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        int n = arr.size();\\n        for(int i=0; i<n; i++){\\n            if(arr[i] == 0){\\n                arr.insert(arr.begin()+i, 0);\\n                i++;\\n            }\\n        }\\n        arr.resize(n);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```c++\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        int n = arr.size();\\n        for(int i=0; i<n; i++){\\n            if(arr[i] == 0){\\n                arr.insert(arr.begin()+i, 0);\\n                i++;\\n            }\\n        }\\n        arr.resize(n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1713111,
                "title": "java-python-o-n",
                "content": "Its easy to do in O(n2) , but once we know the relationship i.e how many places a non zero element has to jump then one pass is pretty easy\\n\\n![image](https://assets.leetcode.com/users/images/9802d8d1-cc87-471d-99a6-1e8d9e77d8b0_1642946094.5311093.png)\\nJava\\n```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int[] count = new int[arr.length];\\n        int c=0;\\n        \\n        for( int i =0; i < arr.length; i++ ){\\n            if( arr[i] == 0 )   \\n                c++;\\n            count[i]=c;\\n        }\\n        \\n        for( int end = arr.length-1; end >= 0; end-- ){\\n            int newIndex = end + count[end];\\n            if( newIndex < arr.length )  // new index for the non zero element\\n                arr[newIndex]=arr[end];\\n            if( newIndex != end ) //to handle the case if we havent encountered a zero yet\\n                arr[end]=0;\\n        }\\n    }\\n}\\n```\\nPython\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        count = [0]*len(arr)\\n        c=0\\n        \\n        for i in range(0,len(arr)):\\n            if arr[i] == 0:\\n                c+=1\\n            count[i]=c\\n        \\n        for end in range(len(arr)-1,-1,-1):\\n            \\n            newIndex=end+count[end]\\n            \\n            if(newIndex < len(arr)):\\n                arr[newIndex]=arr[end]\\n            \\n            if(newIndex != end ):\\n                arr[end]=0\\n```\\nPlease **upvote** if you find it **useful**. Thanks.",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int[] count = new int[arr.length];\\n        int c=0;\\n        \\n        for( int i =0; i < arr.length; i++ ){\\n            if( arr[i] == 0 )   \\n                c++;\\n            count[i]=c;\\n        }\\n        \\n        for( int end = arr.length-1; end >= 0; end-- ){\\n            int newIndex = end + count[end];\\n            if( newIndex < arr.length )  // new index for the non zero element\\n                arr[newIndex]=arr[end];\\n            if( newIndex != end ) //to handle the case if we havent encountered a zero yet\\n                arr[end]=0;\\n        }\\n    }\\n}\\n```\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        count = [0]*len(arr)\\n        c=0\\n        \\n        for i in range(0,len(arr)):\\n            if arr[i] == 0:\\n                c+=1\\n            count[i]=c\\n        \\n        for end in range(len(arr)-1,-1,-1):\\n            \\n            newIndex=end+count[end]\\n            \\n            if(newIndex < len(arr)):\\n                arr[newIndex]=arr[end]\\n            \\n            if(newIndex != end ):\\n                arr[end]=0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1498916,
                "title": "c-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        vector<int> ans;\\n        for(int i=0;i<arr.size();i++){\\n            if(arr[i]==0){\\n                ans.push_back(0);   ans.push_back(0);\\n            }else{\\n                ans.push_back(arr[i]);\\n            }\\n            if(ans.size()>=arr.size()){\\n                break;\\n            }\\n        }\\n        if(ans.size()>arr.size()){\\n            ans.pop_back();\\n        }\\n        arr=ans;\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        vector<int> ans;\\n        for(int i=0;i<arr.size();i++){\\n            if(arr[i]==0){\\n                ans.push_back(0);   ans.push_back(0);\\n            }else{\\n                ans.push_back(arr[i]);\\n            }\\n            if(ans.size()>=arr.size()){\\n                break;\\n            }\\n        }\\n        if(ans.size()>arr.size()){\\n            ans.pop_back();\\n        }\\n        arr=ans;\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1091573,
                "title": "runtime-20-ms-c-3-line-of-code",
                "content": "Runtime: 20 ms, faster than 52.11% of C++ online submissions for Duplicate Zeros.\\nMemory Usage: 9.7 MB, less than 84.61% of C++ online submissions for Duplicate Zeros.\\n\\n```\\nfor(int i=0; i<arr.size();++i){\\n            if(arr[i]==0){\\n                arr.pop_back();\\n                arr.insert(arr.begin()+i,0);\\n                ++i;\\n            }\\n        }\\n\\t\\t\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "Runtime: 20 ms, faster than 52.11% of C++ online submissions for Duplicate Zeros.\\nMemory Usage: 9.7 MB, less than 84.61% of C++ online submissions for Duplicate Zeros.\\n\\n```\\nfor(int i=0; i<arr.size();++i){\\n            if(arr[i]==0){\\n                arr.pop_back();\\n                arr.insert(arr.begin()+i,0);\\n                ++i;\\n            }\\n        }\\n\\t\\t\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 967135,
                "title": "swift-solution",
                "content": "```\\nclass Solution {\\n    func duplicateZeros(_ arr: inout [Int]) {\\n        var index = 0\\n        while (index < arr.count) {\\n            if arr[index] == 0 {\\n                index += 1\\n                arr.insert(0, at: index)\\n                arr.removeLast()\\n            }\\n            index += 1\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func duplicateZeros(_ arr: inout [Int]) {\\n        var index = 0\\n        while (index < arr.count) {\\n            if arr[index] == 0 {\\n                index += 1\\n                arr.insert(0, at: index)\\n                arr.removeLast()\\n            }\\n            index += 1\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 894022,
                "title": "c-solution",
                "content": "Runtime: 236 ms, faster than 97.45% of C# online submissions for Duplicate Zeros.\\nMemory Usage: 33.5 MB, less than 5.40% of C# online submissions for Duplicate Zeros.\\n\\n```\\nvar zeros = 0;\\nfor (var i = 0; i < arr.Length; i++)\\n\\tif (arr[i] == 0)\\n\\t\\tzeros++;\\n\\nvar len = arr.Length - 1;\\n\\nwhile (len > 0 && zeros > 0)\\n{\\n\\tif (len + zeros <= arr.Length - 1)\\n\\t\\tarr[len + zeros] = arr[len];\\n\\n\\tif (arr[len] == 0)\\n\\t\\tzeros--;\\n\\n\\tarr[len] = 0;\\n\\tlen--;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nvar zeros = 0;\\nfor (var i = 0; i < arr.Length; i++)\\n\\tif (arr[i] == 0)\\n\\t\\tzeros++;\\n\\nvar len = arr.Length - 1;\\n\\nwhile (len > 0 && zeros > 0)\\n{\\n\\tif (len + zeros <= arr.Length - 1)\\n\\t\\tarr[len + zeros] = arr[len];\\n\\n\\tif (arr[len] == 0)\\n\\t\\tzeros--;\\n\\n\\tarr[len] = 0;\\n\\tlen--;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 750040,
                "title": "javascript-two-pass",
                "content": "```\\nvar duplicateZeros = function (arr) {\\n    if (arr == null || arr.length == 0) throw new Error(\"illegal input\");\\n    //move in place, so no extra space\\n    for (let i = 0; i < arr.length; i++) {\\n        if (arr[i] == 0) {\\n            //that means must remove last one in arr\\n            for (let j = arr.length - 1; j > i; j--) {\\n                arr[j] = arr[j - 1];\\n            }\\n            i++;\\n        }\\n        else {\\n            continue;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar duplicateZeros = function (arr) {\\n    if (arr == null || arr.length == 0) throw new Error(\"illegal input\");\\n    //move in place, so no extra space\\n    for (let i = 0; i < arr.length; i++) {\\n        if (arr[i] == 0) {\\n            //that means must remove last one in arr\\n            for (let j = arr.length - 1; j > i; j--) {\\n                arr[j] = arr[j - 1];\\n            }\\n            i++;\\n        }\\n        else {\\n            continue;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 628470,
                "title": "simple-java-solution-ya-dig",
                "content": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        for(int i=0; i<arr.length; i++){\\n            if(arr[i]==0){\\n                for(int j=arr.length-2; j>=i; j--){\\n                    arr[j+1] = arr[j];\\n                }\\n                i++;\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        for(int i=0; i<arr.length; i++){\\n            if(arr[i]==0){\\n                for(int j=arr.length-2; j>=i; j--){\\n                    arr[j+1] = arr[j];\\n                }\\n                i++;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 421807,
                "title": "python-solution-72-ms-faster-than-99-39-and-13-5-mb-less-than-100-00",
                "content": "```\\ndef duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        \\n        l = len(arr)\\n        i = 0\\n        \\n        while i < len(arr):\\n            if arr[i] == 0:\\n                i += 1\\n                arr.pop()\\n                arr.insert(i, 0)\\n            i += 1",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\ndef duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        \\n        l = len(arr)\\n        i = 0\\n        \\n        while i < len(arr):\\n            if arr[i] == 0:\\n                i += 1\\n                arr.pop()\\n                arr.insert(i, 0)\\n            i += 1",
                "codeTag": "Python3"
            },
            {
                "id": 313208,
                "title": "space-o-1-detailed-explanation",
                "content": "This solution is extended on @lee215 \\'s brilliant solution.\\nTo understand the algorithm better, let\\'s look at the following example:\\n\\nThe given array is\\n`[1, 0, 2, 3, 0, 4, 5, 0]`\\n\\n`[1, 0, 0, 2, 3, 0, 0, 4, 5, 0, 0]` // (A) Duplicating zeros\\n\\n`[1, 0, 0, 2, 3, 0, 0, 4 ] ` // (B) Then cut off the array based on the original array size\\n<br>\\nWe can then generalize the idea above to the following steps:\\n\\nWe can have two pointers - \\npt1 = arr.length - 1\\npt2 = the index after duplicating zeros\\n\\nIterate both pointers from back to front\\nOnce `pt2 < arr.length`, we start assigning `arr[pt1]` to the new index `arr[pt2]`,\\nand duplicate zeros on the way.\\n\\n<br>\\nThe whole process should look like this: \\n\\n...........................................pt1\\n`[1, 0, 2, 3, 0, 4, 5, 0]`\\n\\n............................................................pt2\\n`[1, 0, 0, 2, 3, 0, 0, 4, 5, 0, 0]`\\n\\n\\narr[pt1] == 0, so decrement pt2 twice.\\n.....................................pt1\\n`[1, 0, 2, 3, 0, 4, 5, 0]`\\n.................................................pt2\\n`[1, 0, 0, 2, 3, 0, 0, 4, 5, 0, 0]`\\n\\narr[pt1] == 5.\\n\\n..............................pt1\\n`[1, 0, 2, 3, 0, 4, 5, 0]`\\n..........................................pt2\\n`[1, 0, 0, 2, 3, 0, 0, 4, 5, 0, 0]`\\n\\nNow, `pt2 < arr.length`, so we start assigning\\n\\nAssign 4\\n...............................\\u2193.........\\u2193\\n`[1, 0, 2, 3, 0, 4, 5, 4]`\\n\\nAssign 0\\n..........................\\u2193.........\\u2193\\n`[1, 0, 2, 3, 0, 4, 0, 4]`\\n\\n..........................\\u2193...\\u2193\\n`[1, 0, 2, 3, 0, 0, 0, 4]`\\n\\nAssign 3\\n....................\\u2193...\\u2193\\n`[1, 0, 2, 3, 3, 0, 0, 4]`\\n\\nAssign 2\\n..............\\u2193...\\u2193\\n`[1, 0, 2, 2, 3, 0, 0, 4]`\\n\\nAssign 0\\n........\\u2193...\\u2193\\n`[1, 0, 0, 2, 3, 0, 0, 4]`\\n\\n........\\u2193\\n`[1, 0, 0, 2, 3, 0, 0, 4]`\\n\\nAssign 1\\n\\u2193\\n`[1, 0, 0, 2, 3, 0, 0, 4]`\\n\\n\\nImplenmentation -\\n```\\npublic void duplicateZeros(int[] arr) {\\n\\n        int pt2 = 0; // figuring out pt2\\n        for(int i = 0; i < arr.length; i++){\\n            if (arr[i] == 0) pt2++;\\n            pt2++;\\n        }\\n        \\n        int pt1 = arr.length - 1;\\n        pt2--;\\n        while (pt1 >= 0){\\n            if (pt2 < arr.length) arr[pt2] = arr[pt1];// assign if pt2 is in range\\n            pt2--;\\n            if (arr[pt1] == 0){\\n                if (pt2 < arr.length) arr[pt2] = 0; // duplicate zeros\\n                pt2--;\\n            } \\n            pt1--;\\n        }\\n        \\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic void duplicateZeros(int[] arr) {\\n\\n        int pt2 = 0; // figuring out pt2\\n        for(int i = 0; i < arr.length; i++){\\n            if (arr[i] == 0) pt2++;\\n            pt2++;\\n        }\\n        \\n        int pt1 = arr.length - 1;\\n        pt2--;\\n        while (pt1 >= 0){\\n            if (pt2 < arr.length) arr[pt2] = arr[pt1];// assign if pt2 is in range\\n            pt2--;\\n            if (arr[pt1] == 0){\\n                if (pt2 < arr.length) arr[pt2] = 0; // duplicate zeros\\n                pt2--;\\n            } \\n            pt1--;\\n        }\\n        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 313118,
                "title": "simple-python-solution",
                "content": "```\\nclass Solution(object):\\n    def duplicateZeros(self, arr):\\n        x = 0\\n        while x < len(arr):\\n            if arr[x] == 0:\\n                arr.insert(x, 0)\\n                arr.pop(-1)\\n                x+=1\\n            x += 1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def duplicateZeros(self, arr):\\n        x = 0\\n        while x < len(arr):\\n            if arr[x] == 0:\\n                arr.insert(x, 0)\\n                arr.pop(-1)\\n                x+=1\\n            x += 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3634221,
                "title": "c-solution-java-solution-beat-100-in-runtime-tc-o-n-sc-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nthe function scans the vector, identifies the positions where zeros need to be duplicated, shifts the elements accordingly, and inserts the duplicated zeros in the correct positions.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nInitialization of variables:\\n\\npos is initialized to 0, representing the position in the arr vector.\\nptr is initialized to 0, representing the index in the for loop.\\nFirst for loop:\\n\\nIt iterates over the elements of the arr vector using the index i.\\nIt also keeps track of the number of iterations in the ct variable.\\nInside the loop, it checks if the current element at index ct is equal to 0.\\nIf it is 0, it increments i by 1 to skip the next element.\\nOtherwise, it updates pos to the current value of ct and ptr to the current value of i.\\nSecond for loop:\\n\\nIt iterates backward starting from ptr and continues until index 0.\\nInside the loop, it assigns the value at index pos to the current element at index i.\\nIf the value at index pos is 0 and i is not 0, it decrements i by 1 and assigns 0 to the previous index.\\nIt then decrements pos to move to the previous element.\\nThird for loop:\\n\\nIt iterates over the elements of the arr vector starting from index ptr + 1.\\nInside the loop, it assigns 0 to each element.\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the duplicateZeros function can be analyzed as follows:\\n\\nThe first for loop iterates over the elements of the arr vector once, so its time complexity is O(n), where n is the size of the vector.\\n\\nThe second for loop iterates backward from ptr to 0, which can have at most n iterations. Therefore, its time complexity is O(n).\\n\\nThe third for loop iterates over the elements from ptr + 1 to the end of the arr vector, which also has at most n iterations. Thus, its time complexity is O(n).\\n\\nAs a result, the overall time complexity of the function is O(n), where n is the size of the input vector arr.\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nRegarding space complexity, the function does not use any additional data structures that grow with the input size. It only uses a constant amount of extra space for the variables pos and ptr. Therefore, the space complexity of the function is O(1), indicating constant space usage.\\n\\n# Code\\n``` C++ []\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        int pos = 0;  // Variable to track the position of the last non-zero element\\n        int ptr = 0;  // Variable to track the current index in the for loop\\n\\n        // First loop: Find positions for duplicating zeros and update `pos` and `ptr`\\n        for (int i = 0, ct = 0; i < arr.size(); i++, ct++) {\\n            if (arr[ct] == 0) {\\n                i++;  // Increment `i` to skip the next element when a zero is encountered\\n            } else {\\n                pos = ct;  // Update `pos` with the index of the last non-zero element\\n                ptr = i;   // Update `ptr` with the current index in the for loop\\n            }\\n        }\\n\\n        // Second loop: Perform duplication and shifting\\n        for (int i = ptr; i >= 0; i--) {\\n            arr[i] = arr[pos];  // Shift the elements to the right by assigning the value of the last non-zero element\\n\\n            // Duplicate zeros by inserting 0 in the correct position\\n            if (arr[pos] == 0 && i != 0) {\\n                arr[--i] = 0;  // Decrement `i` and assign 0 to the previous index\\n            }\\n\\n            pos--;  // Move to the previous non-zero element\\n        }\\n\\n        // Third loop: Set remaining elements to 0\\n        for (int i = ptr + 1; i < arr.size(); i++) {\\n            arr[i] = 0;  // Set the remaining elements to 0\\n        }\\n    }\\n};\\n\\n```\\n```Java []\\npublic class Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int pos = 0; // Variable to track the position of the last non-zero element\\n        int ptr = 0; // Variable to track the current index in the for loop\\n\\n        // First loop: Find positions for duplicating zeros and update `pos` and `ptr`\\n        for (int i = 0, ct = 0; i < arr.length; i++, ct++) {\\n            if (arr[ct] == 0) {\\n                i++; // Increment `i` to skip the next element when a zero is encountered\\n            } else {\\n                pos = ct; // Update `pos` with the index of the last non-zero element\\n                ptr = i;  // Update `ptr` with the current index in the for loop\\n            }\\n        }\\n\\n        // Second loop: Perform duplication and shifting\\n        for (int i = ptr; i >= 0; i--) {\\n            arr[i] = arr[pos]; // Shift the elements to the right by assigning the value of the last non-zero element\\n\\n            // Duplicate zeros by inserting 0 in the correct position\\n            if (arr[pos] == 0 && i != 0) {\\n                arr[--i] = 0; // Decrement `i` and assign 0 to the previous index\\n            }\\n\\n            pos--; // Move to the previous non-zero element\\n        }\\n\\n        // Third loop: Set remaining elements to 0\\n        for (int i = ptr + 1; i < arr.length; i++) {\\n            arr[i] = 0; // Set the remaining elements to 0\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java"
                ],
                "code": "``` C++ []\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        int pos = 0;  // Variable to track the position of the last non-zero element\\n        int ptr = 0;  // Variable to track the current index in the for loop\\n\\n        // First loop: Find positions for duplicating zeros and update `pos` and `ptr`\\n        for (int i = 0, ct = 0; i < arr.size(); i++, ct++) {\\n            if (arr[ct] == 0) {\\n                i++;  // Increment `i` to skip the next element when a zero is encountered\\n            } else {\\n                pos = ct;  // Update `pos` with the index of the last non-zero element\\n                ptr = i;   // Update `ptr` with the current index in the for loop\\n            }\\n        }\\n\\n        // Second loop: Perform duplication and shifting\\n        for (int i = ptr; i >= 0; i--) {\\n            arr[i] = arr[pos];  // Shift the elements to the right by assigning the value of the last non-zero element\\n\\n            // Duplicate zeros by inserting 0 in the correct position\\n            if (arr[pos] == 0 && i != 0) {\\n                arr[--i] = 0;  // Decrement `i` and assign 0 to the previous index\\n            }\\n\\n            pos--;  // Move to the previous non-zero element\\n        }\\n\\n        // Third loop: Set remaining elements to 0\\n        for (int i = ptr + 1; i < arr.size(); i++) {\\n            arr[i] = 0;  // Set the remaining elements to 0\\n        }\\n    }\\n};\\n\\n```\n```Java []\\npublic class Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int pos = 0; // Variable to track the position of the last non-zero element\\n        int ptr = 0; // Variable to track the current index in the for loop\\n\\n        // First loop: Find positions for duplicating zeros and update `pos` and `ptr`\\n        for (int i = 0, ct = 0; i < arr.length; i++, ct++) {\\n            if (arr[ct] == 0) {\\n                i++; // Increment `i` to skip the next element when a zero is encountered\\n            } else {\\n                pos = ct; // Update `pos` with the index of the last non-zero element\\n                ptr = i;  // Update `ptr` with the current index in the for loop\\n            }\\n        }\\n\\n        // Second loop: Perform duplication and shifting\\n        for (int i = ptr; i >= 0; i--) {\\n            arr[i] = arr[pos]; // Shift the elements to the right by assigning the value of the last non-zero element\\n\\n            // Duplicate zeros by inserting 0 in the correct position\\n            if (arr[pos] == 0 && i != 0) {\\n                arr[--i] = 0; // Decrement `i` and assign 0 to the previous index\\n            }\\n\\n            pos--; // Move to the previous non-zero element\\n        }\\n\\n        // Third loop: Set remaining elements to 0\\n        for (int i = ptr + 1; i < arr.length; i++) {\\n            arr[i] = 0; // Set the remaining elements to 0\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3057945,
                "title": "accepted-swift",
                "content": "```\\nclass Solution {\\n    func duplicateZeros(_ arr: inout [Int]) {\\n\\n        var i = 0\\n        \\n        while i < arr.count {\\n            if arr[i] == 0 {\\n                arr.insert(0, at: i)\\n                arr.removeLast()\\n                i += 2\\n            }\\n            else {\\n                i += 1\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func duplicateZeros(_ arr: inout [Int]) {\\n\\n        var i = 0\\n        \\n        while i < arr.count {\\n            if arr[i] == 0 {\\n                arr.insert(0, at: i)\\n                arr.removeLast()\\n                i += 2\\n            }\\n            else {\\n                i += 1\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2838928,
                "title": "python-one-pass-with-o-n-space-easy-understanding",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUse a new pointer to record index with duplicated zero.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nCreate a pointer `j=0`. When we encounter a `0`, add j twice.\\nOne thing to note is that in case of out of bound error, break is necessary in the for loop.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n# Code\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        j = 0\\n        for n in arr[:]:\\n            if n == 0:\\n                arr[j] = 0\\n                j += 1\\n                if j == len(arr):\\n                    break\\n                arr[j] = 0\\n            else:\\n                arr[j] = n\\n            j += 1\\n            if j == len(arr):\\n                break\\n        \\n            \\n        \\n```",
                "solutionTags": [
                    "Python3",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        j = 0\\n        for n in arr[:]:\\n            if n == 0:\\n                arr[j] = 0\\n                j += 1\\n                if j == len(arr):\\n                    break\\n                arr[j] = 0\\n            else:\\n                arr[j] = n\\n            j += 1\\n            if j == len(arr):\\n                break\\n        \\n            \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2641801,
                "title": "js-very-easy-solution",
                "content": "```\\nvar duplicateZeros = function(arr) {\\n    for (let i = 0 ; i < arr.length; i++) {\\n        if (!arr[i]) {\\n            arr.splice(i, 0, 0);\\n            arr.pop();\\n            i++;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar duplicateZeros = function(arr) {\\n    for (let i = 0 ; i < arr.length; i++) {\\n        if (!arr[i]) {\\n            arr.splice(i, 0, 0);\\n            arr.pop();\\n            i++;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2593862,
                "title": "java-solution-simple-solution-duplicate-zeros",
                "content": "```\\nclass Solution {\\n       public static void shift(int[] arr,int i)\\n    {\\n        for(int k=arr.length-1;k>i+1;k--)\\n        {\\n            arr[k]=arr[k-1];\\n        }\\n        \\n    }\\n    public void duplicateZeros(int[] arr) {\\n        \\n        \\n   for(int i=0;i<arr.length-1;i++)\\n        {\\n            if(arr[i]==0)\\n            {\\n                shift(arr,i);\\n                arr[i+1]=0;\\n                i++;\\n            }\\n        }\\n        \\n    }\\n    \\n \\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n       public static void shift(int[] arr,int i)\\n    {\\n        for(int k=arr.length-1;k>i+1;k--)\\n        {\\n            arr[k]=arr[k-1];\\n        }\\n        \\n    }\\n    public void duplicateZeros(int[] arr) {\\n        \\n        \\n   for(int i=0;i<arr.length-1;i++)\\n        {\\n            if(arr[i]==0)\\n            {\\n                shift(arr,i);\\n                arr[i+1]=0;\\n                i++;\\n            }\\n        }\\n        \\n    }\\n    \\n \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2458136,
                "title": "kotlin-with-queue",
                "content": "```\\nclass Solution {\\n    fun duplicateZeros(arr: IntArray) {\\n        var possibleDups = 0\\n        var length_ = arr.size - 1\\n\\n        // Find the number of zeros to be duplicated\\n        // Stopping when left points beyond the last element in the original array\\n        // which would be part of the modified array\\n        var left = 0\\n        while (left <= length_ - possibleDups) {\\n            // Count the zeros\\n            if (arr[left] == 0) {\\n                // Edge case: This zero can\\'t be duplicated. We have no more space,\\n                // as left is pointing to the last element which could be included\\n                if (left == length_ - possibleDups) {\\n                    // For this zero we just copy it without duplication.\\n                    arr[length_] = 0\\n                    length_ -= 1\\n                    break\\n                }\\n                possibleDups++\\n            }\\n            left++\\n        }\\n\\n        // Start backwards from the last element which would be part of the new array.\\n        var last = length_ - possibleDups\\n\\n        // Copy zero twice, and non-zero once.\\n        var i = last\\n        while (i >= 0) {\\n            if (arr[i] == 0) {\\n                arr[i + possibleDups] = 0\\n                possibleDups--\\n                arr[i + possibleDups] = 0\\n            } else {\\n                arr[i + possibleDups] = arr[i]\\n            }\\n            i--\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun duplicateZeros(arr: IntArray) {\\n        var possibleDups = 0\\n        var length_ = arr.size - 1\\n\\n        // Find the number of zeros to be duplicated\\n        // Stopping when left points beyond the last element in the original array\\n        // which would be part of the modified array\\n        var left = 0\\n        while (left <= length_ - possibleDups) {\\n            // Count the zeros\\n            if (arr[left] == 0) {\\n                // Edge case: This zero can\\'t be duplicated. We have no more space,\\n                // as left is pointing to the last element which could be included\\n                if (left == length_ - possibleDups) {\\n                    // For this zero we just copy it without duplication.\\n                    arr[length_] = 0\\n                    length_ -= 1\\n                    break\\n                }\\n                possibleDups++\\n            }\\n            left++\\n        }\\n\\n        // Start backwards from the last element which would be part of the new array.\\n        var last = length_ - possibleDups\\n\\n        // Copy zero twice, and non-zero once.\\n        var i = last\\n        while (i >= 0) {\\n            if (arr[i] == 0) {\\n                arr[i + possibleDups] = 0\\n                possibleDups--\\n                arr[i + possibleDups] = 0\\n            } else {\\n                arr[i + possibleDups] = arr[i]\\n            }\\n            i--\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2456817,
                "title": "go-o-n-2-with-shifting",
                "content": "```\\nfunc duplicateZeros(arr []int)  {\\n    i := 0\\n    \\n    for i < len(arr) {\\n        if arr[i] == 0 {\\n            for j := len(arr)-2; j > i; j-- {\\n                arr[j+1] = arr[j]\\n            }\\n            \\n            if i+1 < len(arr) {\\n                arr[i+1] = 0\\n            }\\n            \\n            i += 2\\n        } else {\\n            i++            \\n        }\\n    } \\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc duplicateZeros(arr []int)  {\\n    i := 0\\n    \\n    for i < len(arr) {\\n        if arr[i] == 0 {\\n            for j := len(arr)-2; j > i; j-- {\\n                arr[j+1] = arr[j]\\n            }\\n            \\n            if i+1 < len(arr) {\\n                arr[i+1] = 0\\n            }\\n            \\n            i += 2\\n        } else {\\n            i++            \\n        }\\n    } \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2253051,
                "title": "javascript-o-n-solution-faster-than-98",
                "content": "## Solution description:\\nIterate from the beginning of the array\\n\\nWhen we see a zero:\\n1. minus `lastKeepIdx` by one (move one index back), which means we\\'ll add duplicate the zero and remove item at `lastKeepIdx`. Keep items before the index of `lastKeepIdx`.\\n2. Set `lastDuplicatedZero` value to be current index to indicate the last index of zero we want to duplicate.\\n\\nRepeat the above process until current index is the last index we want to keep (`lastKeepIdx`). Note, if the current index has 0 value but it equals to the last index we want to keep, we don\\'t mark it as `lastDuplicatedZero` because we don\\'t have more space to duplicate a zero for it.\\n\\nWe only change the array when `lastKeepIdx` is not the last index of the array. If it\\'s the last index of the array, which means we want to keep the whole array and do nothing. (When no zeros in the array)\\n\\nIterate from the end of the array to shift whole array to the end and duplicate zeros\\n1. Replace the current index element with the element at `lastKeepIdx` (the last element that we want to keep)\\n2. If the element we want to keep is zero AND its index is less or equal to `lastDuplicatedZero` index -> duplicate the zero by replacing previous index with zero and reduce index by one\\n3. Reduce `lastKeepIdx` by one\\n\\nRepeat the process until `lastKeepIdx` is less than 0\\n\\n## Variables Declare:\\n`lastKeepIdx ` : last element\\'s index to keep in the array.\\n`lastDuplicatedZero` : last index of zero to duplicate(sometimes the last zero can\\'t be duplicated because there\\'s no more space). Default to be `undefined` because there may be no zero in the array.\\n\\n```\\nvar duplicateZeros = function(arr) {\\n    let lastKeepIdx = arr.length-1\\n    let lastDuplicatedZero\\n    \\n    for (let i = 0; i <= lastKeepIdx; i++) {\\n        if (arr[i] === 0 && i !== lastKeepIdx) {\\n            lastKeepIdx--\\n            lastDuplicatedZero = i\\n        }\\n    }\\n    if (lastKeepIdx < arr.length-1) {\\n        for (let i = arr.length - 1; lastKeepIdx >= 0; i--) {\\n            arr[i] = arr[lastKeepIdx]\\n            if (arr[lastKeepIdx] === 0 && lastKeepIdx <= lastDuplicatedZero) {\\n                arr[i-1] = 0\\n                i--\\n            }\\n            lastKeepIdx--\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Two Pointers"
                ],
                "code": "```\\nvar duplicateZeros = function(arr) {\\n    let lastKeepIdx = arr.length-1\\n    let lastDuplicatedZero\\n    \\n    for (let i = 0; i <= lastKeepIdx; i++) {\\n        if (arr[i] === 0 && i !== lastKeepIdx) {\\n            lastKeepIdx--\\n            lastDuplicatedZero = i\\n        }\\n    }\\n    if (lastKeepIdx < arr.length-1) {\\n        for (let i = arr.length - 1; lastKeepIdx >= 0; i--) {\\n            arr[i] = arr[lastKeepIdx]\\n            if (arr[lastKeepIdx] === 0 && lastKeepIdx <= lastDuplicatedZero) {\\n                arr[i-1] = 0\\n                i--\\n            }\\n            lastKeepIdx--\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2009080,
                "title": "python-faster-than-69-04-one-loop-solution",
                "content": "![image](https://assets.leetcode.com/users/images/67c595c7-1097-43f1-adf2-ee00ff0447dc_1651712212.6238477.png)\\n**Code:**\\n```\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        index = 0\\n        while index < len(arr):\\n            if arr[index] == 0:\\n                index += 1\\n                arr.insert(index - 1, 0)\\n                arr.pop()\\n            index += 1\\n```\\n______________________________________\\nKindly upvote the solution if you liked it. Any questions/suggestions are welcome, have a nice day :)\\n\\n**My GitHub with Leetcode Solutions --->** https://github.com/Krsmanovic-S/Leetcode-Exercises",
                "solutionTags": [],
                "code": "```\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        index = 0\\n        while index < len(arr):\\n            if arr[index] == 0:\\n                index += 1\\n                arr.insert(index - 1, 0)\\n                arr.pop()\\n            index += 1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1852747,
                "title": "python-3-in-place-easy-to-understand-using-two-pointers-o-n",
                "content": "I beleive this code will be helpful to you. \\n1. Count zeroes in the array\\n2. Define two pointers,  i and  j \\n3. iterate from the end of the array while i < j\\n4. if j is within the array\\'s range put arr[i] in arr[j]\\n5. if arr[i] ==0, move j one step to the left and if j is within the array\\'s range put arr[i] in arr[j]\\n\\nHere is an example:\\narr = [1,0,2,3,0,4,5,0]\\n\\ni = 7 and j = 10  --->   if arr[i] == 0  :  [1, 0, 2, 3, 0, 4, 5, 0]\\ni = 6 and j = 8\\ni = 5 and j = 7   --->  if j < len(arr) :  [1, 0, 2, 3, 0, 4, 5, 4]\\ni = 4 and j = 6   --->  if j < len(arr) :  [1, 0, 2, 3, 0, 4, 0, 4]\\n----------------->  if arr[i] == 0  :  [1, 0, 2, 3, 0, 0, 0, 4]\\ni = 3 and j = 4   --->  if j < len(arr) :  [1, 0, 2, 3, 3, 0, 0, 4]\\ni = 2 and j = 3   --->  if j < len(arr) :  [1, 0, 2, 2, 3, 0, 0, 4]\\ni = 1 and j = 2   --->  if j < len(arr) :  [1, 0, 0, 2, 3, 0, 0, 4]\\n----------------->  if arr[i] == 0  :  [1, 0, 0, 2, 3, 0, 0, 4]\\n```\\n\\t\\tzeroes = arr.count(0) #count the number of zeroes in the arr\\n        i , j = len(arr) - 1, len(arr) -1 + zeroes #define i and j pointers\\n        \\n        while i<j:\\n            if j < len(arr): #if j is within the array\\'s range\\n                arr[j] = arr[i]\\n                \\n            if arr[i] == 0: #if arr[i] has zero \\n                j -= 1\\n                if j < len(arr): #if j is within the array\\'s range\\n                    arr[j] = arr[i]\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t#move one step to the left\\n            i -=1\\n            j -=1\\n```\\n\\t\\t\\t\\nI figured when we put zero in the second if condiction instead of arr[i] it\\'s going to be faster. I recommend the second one better but the above code is good to first understand the code.\\n\\n\\n```\\n\\t\\tzeroes = arr.count(0) #count the number of zeroes in the arr\\n        i , j = len(arr) - 1, len(arr) -1 + zeroes #define i and j pointers\\n        \\n        while i<j:\\n            if j < len(arr):\\n                arr[j] = arr[i]\\n                \\n            if arr[i] == 0: \\n                j -= 1\\n                if j < len(arr):\\n                    arr[j] = 0\\n\\n\\t\\t\\t#moving two pointers one step to the left\\n            i -=1\\n            j -=1\\n```\\n\\nplease **UPVOTE** if you like \\uD83D\\uDE0A",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n\\t\\tzeroes = arr.count(0) #count the number of zeroes in the arr\\n        i , j = len(arr) - 1, len(arr) -1 + zeroes #define i and j pointers\\n        \\n        while i<j:\\n            if j < len(arr): #if j is within the array\\'s range\\n                arr[j] = arr[i]\\n                \\n            if arr[i] == 0: #if arr[i] has zero \\n                j -= 1\\n                if j < len(arr): #if j is within the array\\'s range\\n                    arr[j] = arr[i]\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t#move one step to the left\\n            i -=1\\n            j -=1\\n```\n```\\n\\t\\tzeroes = arr.count(0) #count the number of zeroes in the arr\\n        i , j = len(arr) - 1, len(arr) -1 + zeroes #define i and j pointers\\n        \\n        while i<j:\\n            if j < len(arr):\\n                arr[j] = arr[i]\\n                \\n            if arr[i] == 0: \\n                j -= 1\\n                if j < len(arr):\\n                    arr[j] = 0\\n\\n\\t\\t\\t#moving two pointers one step to the left\\n            i -=1\\n            j -=1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1741074,
                "title": "python3-99-03-faster-solution-easy-to-understand",
                "content": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        left = 0\\n        while(left<len(arr)):\\n            if arr[left]==0:\\n                arr.pop()\\n                arr.insert(left,0)\\n                left+=2\\n            else:\\n                left+=1\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        left = 0\\n        while(left<len(arr)):\\n            if arr[left]==0:\\n                arr.pop()\\n                arr.insert(left,0)\\n                left+=2\\n            else:\\n                left+=1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1620603,
                "title": "java-0ms-100-explanations",
                "content": "```\\nclass Solution {\\n    /** Algorithm :\\n     *  1. Create a new array (shifted[]) of the same Size. The correct elements from arr[] will be copied to shifted[]\\n     *  2. Loop with 2 indexes: i over arr[] and j over shifted[].\\n     *     - If arr[i] is != 0, copy it to shifted[j]. Increment i and j\\n     *     - If arr[i] == 0, increment i by 1 and j by 2 as shifted[j,j+1] are already 0.\\n     *     - Incrementing by 2 will simulate the insertion of a 0 in shifted\\n     */\\n    public void duplicateZeros(int[] arr) {\\n        int[] shifted = new int[arr.length];\\n        for (int i = 0, j = 0; i < arr.length && j < arr.length; i++) {\\n            if (arr[i] != 0) {\\n                shifted[j++] = arr[i];\\n            } else {\\n                j += 2;\\n            }\\n        }\\n        System.arraycopy(shifted, 0, arr, 0, arr.length);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    /** Algorithm :\\n     *  1. Create a new array (shifted[]) of the same Size. The correct elements from arr[] will be copied to shifted[]\\n     *  2. Loop with 2 indexes: i over arr[] and j over shifted[].\\n     *     - If arr[i] is != 0, copy it to shifted[j]. Increment i and j\\n     *     - If arr[i] == 0, increment i by 1 and j by 2 as shifted[j,j+1] are already 0.\\n     *     - Incrementing by 2 will simulate the insertion of a 0 in shifted\\n     */\\n    public void duplicateZeros(int[] arr) {\\n        int[] shifted = new int[arr.length];\\n        for (int i = 0, j = 0; i < arr.length && j < arr.length; i++) {\\n            if (arr[i] != 0) {\\n                shifted[j++] = arr[i];\\n            } else {\\n                j += 2;\\n            }\\n        }\\n        System.arraycopy(shifted, 0, arr, 0, arr.length);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1463052,
                "title": "easy-javascript-solution",
                "content": "```\\nvar duplicateZeros = function(arr) {\\n    let len = arr.length;\\n    \\n    if(!arr.includes(0)) return arr;\\n    \\n    for(let i = 0; i<len; i++) {\\n        if(arr[i] === 0) {\\n            arr.splice(i, 0, 0);\\n            i++;\\n        }\\n        arr.length = len;\\n    }\\n    return arr;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar duplicateZeros = function(arr) {\\n    let len = arr.length;\\n    \\n    if(!arr.includes(0)) return arr;\\n    \\n    for(let i = 0; i<len; i++) {\\n        if(arr[i] === 0) {\\n            arr.splice(i, 0, 0);\\n            i++;\\n        }\\n        arr.length = len;\\n    }\\n    return arr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1435919,
                "title": "javascript",
                "content": "```\\nvar duplicateZeros = function(arr) {\\n  const len = arr.length\\n  for ( let i = 0; i < len; i++ ) {\\n      if (arr[i] === 0) {\\n        arr.splice(i, 0, 0)\\n        i++\\n      }\\n  }\\n  arr.length = len\\n};\\n```\\n\\nRuntime: 97 ms\\nMemory Usage: 39.8 MB",
                "solutionTags": [],
                "code": "```\\nvar duplicateZeros = function(arr) {\\n  const len = arr.length\\n  for ( let i = 0; i < len; i++ ) {\\n      if (arr[i] === 0) {\\n        arr.splice(i, 0, 0)\\n        i++\\n      }\\n  }\\n  arr.length = len\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1346853,
                "title": "java-simple-solution-2-approach-o-n-space-o-1-space",
                "content": "Approch One \\n```\\n// Without using extra space \\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        for(int i=0;i<arr.length;i++)\\n        {\\n            if(arr[i]==0)\\n            {\\n\\t\\t\\t//if we found zero we have to shift all by one place to right till where we found zero\\n                for(int j=arr.length-1;j>i;j--)\\n                {\\n                    arr[j]=arr[j-1];\\n                }\\n\\t\\t\\t\\t// i is incremented because if we shift by one next we be zero only that\\'s we have skip that\\n                i++;\\n            }\\n        }\\n    }\\n}\\n```\\nApproch Two\\n```\\n// Using Extra Space\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        List<Integer> li=new ArrayList<>();\\n        for(int i=0;i<arr.length;i++)\\n        {\\n            if(arr[i]!=0)\\n            {\\n                li.add(arr[i]);\\n            }\\n            else\\n            {\\n                li.add(arr[i]);\\n                li.add(arr[i]);\\n            }\\n        }\\n        for(int i=0;i<arr.length;i++)\\n        {\\n            arr[i]=li.get(i);\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n// Without using extra space \\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        for(int i=0;i<arr.length;i++)\\n        {\\n            if(arr[i]==0)\\n            {\\n\\t\\t\\t//if we found zero we have to shift all by one place to right till where we found zero\\n                for(int j=arr.length-1;j>i;j--)\\n                {\\n                    arr[j]=arr[j-1];\\n                }\\n\\t\\t\\t\\t// i is incremented because if we shift by one next we be zero only that\\'s we have skip that\\n                i++;\\n            }\\n        }\\n    }\\n}\\n```\n```\\n// Using Extra Space\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        List<Integer> li=new ArrayList<>();\\n        for(int i=0;i<arr.length;i++)\\n        {\\n            if(arr[i]!=0)\\n            {\\n                li.add(arr[i]);\\n            }\\n            else\\n            {\\n                li.add(arr[i]);\\n                li.add(arr[i]);\\n            }\\n        }\\n        for(int i=0;i<arr.length;i++)\\n        {\\n            arr[i]=li.get(i);\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1331769,
                "title": "c-solution-brute-force-26-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        int n = arr.size();\\n        for(int i = 0; i < n-1; i++)\\n            if(arr[i] == 0){\\n                for(int j = n-1; j > i; j--) \\n                    arr[j] = arr[j-1];\\n                arr[i+1] = 0;\\n                i++;\\n            }     \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        int n = arr.size();\\n        for(int i = 0; i < n-1; i++)\\n            if(arr[i] == 0){\\n                for(int j = n-1; j > i; j--) \\n                    arr[j] = arr[j-1];\\n                arr[i+1] = 0;\\n                i++;\\n            }     \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1161240,
                "title": "runtime-52-ms-faster-than-84-20-python-simple-and-easy-to-understand",
                "content": "```\\n\\ni = 0\\nlength = len(arr)\\nwhile(i < length - 1):\\n\\tif arr[i] == 0:\\n\\t\\tarr.pop(-1)\\n\\t\\tarr.insert(i, 0)\\n\\t\\ti+=1\\n\\ti+=1\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n\\ni = 0\\nlength = len(arr)\\nwhile(i < length - 1):\\n\\tif arr[i] == 0:\\n\\t\\tarr.pop(-1)\\n\\t\\tarr.insert(i, 0)\\n\\t\\ti+=1\\n\\ti+=1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1089597,
                "title": "java-commented-o-n-solution-with-two-pointers",
                "content": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int zeroCount = 0;\\n        int newArraySize = 0;\\n        int iterator = 0;\\n        \\n        // count how many zeros should we duplicate\\n        // when \\'newArraySize\\' is the same as `arr.length` we stop our search because future zeroes will be out the array range\\n        while(iterator < arr.length && newArraySize < arr.length) { \\n            int val = arr[iterator];\\n            \\n            if(val == 0) {\\n                zeroCount++;\\n                newArraySize += 2; // 2 because we should add 2 zeroes to the result array\\n            } else {\\n                newArraySize++;\\n            }\\n            \\n            iterator++;\\n        }\\n        \\n        // two pointers which we will use to copy \\n        // pointer when the first array should be ended after we add necessary zeroes\\n        int copyFrom = iterator - 1; // \"-1\" because we increased \\'iterator\\' at the last step on our previous loop\\n        // where we will copy\\n        int copyTo = arr.length - 1;\\n        \\n        // if the last number is zero and if we copy it our new array will be longer than original one\\n        boolean isTrailingZero = newArraySize > arr.length;\\n        \\n        // go from the tail of array and move numbers\\n        while(copyFrom >= 0) {\\n            int val = arr[copyFrom];\\n            \\n            // if this numer is zero\\n            if(val == 0) {\\n                if(isTrailingZero && copyTo == arr.length - 1) {\\n                    // if it\\'s the last number is zero we shouldn\\'t add two zeroes to the result array\\n                    arr[copyTo] = val;\\n                } else {\\n                    // add two zeroes in a row \\n                    arr[copyTo] = val;\\n                    copyTo--;\\n                    arr[copyTo] = val;\\n                }\\n            } else {\\n                // just copy the number\\n                arr[copyTo] = val;\\n            }\\n            \\n            // move pointers\\n            copyFrom--;\\n            copyTo--;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int zeroCount = 0;\\n        int newArraySize = 0;\\n        int iterator = 0;\\n        \\n        // count how many zeros should we duplicate\\n        // when \\'newArraySize\\' is the same as `arr.length` we stop our search because future zeroes will be out the array range\\n        while(iterator < arr.length && newArraySize < arr.length) { \\n            int val = arr[iterator];\\n            \\n            if(val == 0) {\\n                zeroCount++;\\n                newArraySize += 2; // 2 because we should add 2 zeroes to the result array\\n            } else {\\n                newArraySize++;\\n            }\\n            \\n            iterator++;\\n        }\\n        \\n        // two pointers which we will use to copy \\n        // pointer when the first array should be ended after we add necessary zeroes\\n        int copyFrom = iterator - 1; // \"-1\" because we increased \\'iterator\\' at the last step on our previous loop\\n        // where we will copy\\n        int copyTo = arr.length - 1;\\n        \\n        // if the last number is zero and if we copy it our new array will be longer than original one\\n        boolean isTrailingZero = newArraySize > arr.length;\\n        \\n        // go from the tail of array and move numbers\\n        while(copyFrom >= 0) {\\n            int val = arr[copyFrom];\\n            \\n            // if this numer is zero\\n            if(val == 0) {\\n                if(isTrailingZero && copyTo == arr.length - 1) {\\n                    // if it\\'s the last number is zero we shouldn\\'t add two zeroes to the result array\\n                    arr[copyTo] = val;\\n                } else {\\n                    // add two zeroes in a row \\n                    arr[copyTo] = val;\\n                    copyTo--;\\n                    arr[copyTo] = val;\\n                }\\n            } else {\\n                // just copy the number\\n                arr[copyTo] = val;\\n            }\\n            \\n            // move pointers\\n            copyFrom--;\\n            copyTo--;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1057060,
                "title": "c-few-lines",
                "content": "```public void DuplicateZeros(int[] arr) {        \\n        for(int i = 0; i < arr.Length; i++){\\n            if(arr[i] == 0){\\n                int right = arr.Length - 1;\\n                while(right > i){\\n                    arr[right] = arr[right -1];\\n                    right--;\\n                }\\n                 i = i + 1;\\n            }\\n        }",
                "solutionTags": [],
                "code": "```public void DuplicateZeros(int[] arr) {        \\n        for(int i = 0; i < arr.Length; i++){\\n            if(arr[i] == 0){\\n                int right = arr.Length - 1;\\n                while(right > i){\\n                    arr[right] = arr[right -1];\\n                    right--;\\n                }\\n                 i = i + 1;\\n            }\\n        }",
                "codeTag": "Unknown"
            },
            {
                "id": 1054947,
                "title": "java-two-pass-easy-to-understand-two-pointers-o-1-space",
                "content": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int count = 0, n = arr.length;\\n        for(int num : arr) count += (num == 0) ? 1 : 0;\\n        int lastIndex = n + count - 1;\\n        \\n        for(int i = n-1; i >= 0 && lastIndex >= 0; i--) {\\n            if(arr[i] == 0) { // set zeroes and move two places backwards (via lastIndex)\\n                if(lastIndex < n)\\n\\t\\t\\t\\t   arr[lastIndex] = 0;\\n                if((lastIndex-1) < n && lastIndex > 0)\\n\\t\\t\\t\\t   arr[lastIndex-1] = 0;\\n                lastIndex -= 2;\\n            } else { // set same value and move one place backwards (via lastIndex)\\n                if(lastIndex < n)\\n\\t\\t\\t\\t   arr[lastIndex] = arr[i];\\n                lastIndex -= 1;\\n            }\\n        }\\n    }\\n}\\n```\\n\\nIdea using an example:\\n- Consider the array: `[8,4,5,0,0,0,0,7]`\\n- Consider an **imaginary additional length** next to the array that can accommodate the additional zeroes.\\n- With that idea in mind, the `lastIndex` will be at `length(arr) + count(zeroes) - 1` (in this case, it would be `lastIndex = 11` for `[8,4,5,0,0,0,0,7..0,0,0,0]`)\\n- Now loop through backwards with `i` being the last element of **actual** array and update the array with **valid** `lastIndex` value decrements.",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int count = 0, n = arr.length;\\n        for(int num : arr) count += (num == 0) ? 1 : 0;\\n        int lastIndex = n + count - 1;\\n        \\n        for(int i = n-1; i >= 0 && lastIndex >= 0; i--) {\\n            if(arr[i] == 0) { // set zeroes and move two places backwards (via lastIndex)\\n                if(lastIndex < n)\\n\\t\\t\\t\\t   arr[lastIndex] = 0;\\n                if((lastIndex-1) < n && lastIndex > 0)\\n\\t\\t\\t\\t   arr[lastIndex-1] = 0;\\n                lastIndex -= 2;\\n            } else { // set same value and move one place backwards (via lastIndex)\\n                if(lastIndex < n)\\n\\t\\t\\t\\t   arr[lastIndex] = arr[i];\\n                lastIndex -= 1;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 944706,
                "title": "python3-solution-hard-to-be-simpler-than-this",
                "content": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        \\n        n = len(arr)\\n        for i in reversed(range(len(arr))):\\n            if arr[i] == 0:\\n                arr.insert(i, 0)\\n                arr.pop()\\n```\\n\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        \\n        n = len(arr)\\n        for i in reversed(range(len(arr))):\\n            if arr[i] == 0:\\n                arr.insert(i, 0)\\n                arr.pop()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 939707,
                "title": "java-single-pass",
                "content": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        for(int i=0;i<arr.length-1;i++){\\n            if(arr[i]==0){\\n                for(int j=arr.length-2;j>i;j--){\\n                    arr[j+1]=arr[j];\\n                }\\n                i++;\\n                arr[i]=0;\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        for(int i=0;i<arr.length-1;i++){\\n            if(arr[i]==0){\\n                for(int j=arr.length-2;j>i;j--){\\n                    arr[j+1]=arr[j];\\n                }\\n                i++;\\n                arr[i]=0;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 916247,
                "title": "javascript-99-simple-short-comments",
                "content": "```\\nvar duplicateZeros = function(arr) {\\n    for (let i = 0; i < arr.length; i++) {\\n        if (!arr[i]) {\\n            arr.splice(i, 0, 0); // Insert new 0\\n            i++; // Increase pointer so that newly inserted 0 gets skipped\\n            arr.pop(); // Remove last element to maintain length\\n        }\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar duplicateZeros = function(arr) {\\n    for (let i = 0; i < arr.length; i++) {\\n        if (!arr[i]) {\\n            arr.splice(i, 0, 0); // Insert new 0\\n            i++; // Increase pointer so that newly inserted 0 gets skipped\\n            arr.pop(); // Remove last element to maintain length\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 903520,
                "title": "python-two-pass-in-place-time-o-n-space-o-1",
                "content": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        w = len(arr) - 1 + arr.count(0)  # \\'write to\\' index\\n        \\n        for r in range(len(arr) - 1, -1, -1): # \\'read from\\' index\\n            if arr[r] == 0:  # insert extra 0\\n                if w < len(arr):\\n                    arr[w] = 0\\n                w -= 1\\n                \\n            if w < len(arr):\\n                arr[w] = arr[r]\\n            w -= 1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        w = len(arr) - 1 + arr.count(0)  # \\'write to\\' index\\n        \\n        for r in range(len(arr) - 1, -1, -1): # \\'read from\\' index\\n            if arr[r] == 0:  # insert extra 0\\n                if w < len(arr):\\n                    arr[w] = 0\\n                w -= 1\\n                \\n            if w < len(arr):\\n                arr[w] = arr[r]\\n            w -= 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 772472,
                "title": "easy-c",
                "content": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        for(int i=0;i<arr.size()-1;i++){\\n            if(arr[i]==0){                   //if we bump into 0 \\n\\t\\t\\t  for(int j=arr.size()-1;j>i+1;j--){  //move all elements (from a[i+2] to end) to the left once \\n                    arr[j]=arr[j-1];\\n                }\\n\\t\\t\\t  arr[i+1]=0;    //duplicate a[i]\\n                i++;    //skip arr[i+1] and go on\\n            }\\n        }\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        for(int i=0;i<arr.size()-1;i++){\\n            if(arr[i]==0){                   //if we bump into 0 \\n\\t\\t\\t  for(int j=arr.size()-1;j>i+1;j--){  //move all elements (from a[i+2] to end) to the left once \\n                    arr[j]=arr[j-1];\\n                }\\n\\t\\t\\t  arr[i+1]=0;    //duplicate a[i]\\n                i++;    //skip arr[i+1] and go on\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 577431,
                "title": "simple-while-loop-python-beginner-solution-48ms-beat-96",
                "content": "```\\nclass Solution(object):\\n    def duplicateZeros(self, arr):\\n        \"\"\"\\n        :type arr: List[int]\\n        :rtype: None Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] != 0:\\n                i += 1\\n            else:\\n                arr.insert(i+1,0)\\n                i += 2\\n                arr.pop()\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def duplicateZeros(self, arr):\\n        \"\"\"\\n        :type arr: List[int]\\n        :rtype: None Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] != 0:\\n                i += 1\\n            else:\\n                arr.insert(i+1,0)\\n                i += 2\\n                arr.pop()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 565310,
                "title": "javascript",
                "content": "```\\nvar duplicateZeros = function(arr) {\\n    let length = arr.length;\\n    let snake = [];\\n    let part = 0;\\n    for (let i = 0; i < length; i++) {\\n        let cur = arr[i];\\n        if (cur === 0) {\\n            snake.push(0);\\n            snake.push(0);\\n        } else {\\n            snake.push(cur);\\n        };\\n        arr[i] = snake[part++];\\n    };\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar duplicateZeros = function(arr) {\\n    let length = arr.length;\\n    let snake = [];\\n    let part = 0;\\n    for (let i = 0; i < length; i++) {\\n        let cur = arr[i];\\n        if (cur === 0) {\\n            snake.push(0);\\n            snake.push(0);\\n        } else {\\n            snake.push(cur);\\n        };\\n        arr[i] = snake[part++];\\n    };\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 369747,
                "title": "simple-c-98-28-100-inplace",
                "content": "Runtime: 16 ms, faster than 98.28% of C++ online submissions for Duplicate Zeros.\\nMemory Usage: 9.1 MB, less than 100.00% of C++ online submissions for Duplicate Zeros.\\n\\n```\\nvoid duplicateZeros(vector<int>& arr) {\\n        \\n        int n = arr.size();\\n        int countZero = 0;\\n        for(int i=0; i<n; i++)\\n            countZero += (arr[i] == 0 ? 1 : 0);\\n        \\n        int newLen = n + countZero - 1;\\n        for(int i=n-1; i>=0; i--)\\n        {\\n            if(arr[i] == 0)\\n            {\\n                if(newLen < n)\\n                    arr[newLen] = 0;\\n                newLen--;\\n                \\n                if(newLen < n)\\n                    arr[newLen] = 0;\\n                newLen--;\\n            }\\n            else\\n            {\\n                if(newLen < n)\\n                    arr[newLen] = arr[i];\\n                newLen--;\\n            }\\n        }\\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "Runtime: 16 ms, faster than 98.28% of C++ online submissions for Duplicate Zeros.\\nMemory Usage: 9.1 MB, less than 100.00% of C++ online submissions for Duplicate Zeros.\\n\\n```\\nvoid duplicateZeros(vector<int>& arr) {\\n        \\n        int n = arr.size();\\n        int countZero = 0;\\n        for(int i=0; i<n; i++)\\n            countZero += (arr[i] == 0 ? 1 : 0);\\n        \\n        int newLen = n + countZero - 1;\\n        for(int i=n-1; i>=0; i--)\\n        {\\n            if(arr[i] == 0)\\n            {\\n                if(newLen < n)\\n                    arr[newLen] = 0;\\n                newLen--;\\n                \\n                if(newLen < n)\\n                    arr[newLen] = 0;\\n                newLen--;\\n            }\\n            else\\n            {\\n                if(newLen < n)\\n                    arr[newLen] = arr[i];\\n                newLen--;\\n            }\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 369620,
                "title": "java-1ms-2-passes",
                "content": "Sharing my solution, glad to hear opinions\\n```\\n    public void duplicateZeros(int[] arr) {\\n        int numOfZeroes = 0;\\n        for (int i = 0; i < arr.length; i++) {\\n            if (arr[i] == 0) {\\n                numOfZeroes++;\\n            }\\n        }\\n        if (numOfZeroes == 0) {\\n            return;\\n        }\\n        for (int i = arr.length - 1; i >= 0; i--) {\\n            if (i + numOfZeroes < arr.length) {\\n\\t\\t\\t\\t//moving number forward by number of remaining zeros\\n                arr[i + numOfZeroes] = arr[i];\\n            }\\n            if (arr[i] == 0) {\\n\\t\\t\\t\\t//decreasing number of zeros to correct future movements\\n                numOfZeroes--;\\n            } else {\\n\\t\\t\\t\\t//making current element 0 (it could be updated later)\\n                arr[i] = 0;\\n            }\\n            if (numOfZeroes == 0) {\\n                break;\\n            }\\n        }\\n    }",
                "solutionTags": [],
                "code": "Sharing my solution, glad to hear opinions\\n```\\n    public void duplicateZeros(int[] arr) {\\n        int numOfZeroes = 0;\\n        for (int i = 0; i < arr.length; i++) {\\n            if (arr[i] == 0) {\\n                numOfZeroes++;\\n            }\\n        }\\n        if (numOfZeroes == 0) {\\n            return;\\n        }\\n        for (int i = arr.length - 1; i >= 0; i--) {\\n            if (i + numOfZeroes < arr.length) {\\n\\t\\t\\t\\t//moving number forward by number of remaining zeros\\n                arr[i + numOfZeroes] = arr[i];\\n            }\\n            if (arr[i] == 0) {\\n\\t\\t\\t\\t//decreasing number of zeros to correct future movements\\n                numOfZeroes--;\\n            } else {\\n\\t\\t\\t\\t//making current element 0 (it could be updated later)\\n                arr[i] = 0;\\n            }\\n            if (numOfZeroes == 0) {\\n                break;\\n            }\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 354942,
                "title": "python-3-faster-than-98-less-space-than-100",
                "content": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        \\n        if not arr or len(arr) < 1:\\n            return\\n        \\n        zero_count = arr.count(0)\\n        p_short, p_long = len(arr) - 1, len(arr) + zero_count - 1\\n        while p_short >= 0:\\n            if arr[p_short] != 0:\\n                if p_long < len(arr):\\n                    arr[p_long] = arr[p_short]\\n            else:\\n                if p_long < len(arr):\\n                    arr[p_long] = 0\\n                p_long -= 1\\n                if p_long < len(arr):\\n                    arr[p_long] = 0\\n                    \\n            p_short -= 1\\n            p_long -= 1\\n                    \\n        \\n                \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        \\n        if not arr or len(arr) < 1:\\n            return\\n        \\n        zero_count = arr.count(0)\\n        p_short, p_long = len(arr) - 1, len(arr) + zero_count - 1\\n        while p_short >= 0:\\n            if arr[p_short] != 0:\\n                if p_long < len(arr):\\n                    arr[p_long] = arr[p_short]\\n            else:\\n                if p_long < len(arr):\\n                    arr[p_long] = 0\\n                p_long -= 1\\n                if p_long < len(arr):\\n                    arr[p_long] = 0\\n                    \\n            p_short -= 1\\n            p_long -= 1\\n                    \\n        \\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 332083,
                "title": "python-solution",
                "content": "Python solution using temporary list (100 % in memory)\\n\\t\\t\\t\\n\\t\\tlis=[]\\n        n=len(arr)\\n        for i in range(n):\\n            if(arr[i]==0):\\n                lis.append(0)    \\n            lis.append(arr[i])\\n        \\n        for i in range(n):\\n            arr[i]=lis[i]",
                "solutionTags": [],
                "code": "Python solution using temporary list (100 % in memory)\\n\\t\\t\\t\\n\\t\\tlis=[]\\n        n=len(arr)\\n        for i in range(n):\\n            if(arr[i]==0):\\n                lis.append(0)    \\n            lis.append(arr[i])\\n        \\n        for i in range(n):\\n            arr[i]=lis[i]",
                "codeTag": "Unknown"
            },
            {
                "id": 323122,
                "title": "2ms-java-solution",
                "content": "Ideas:\\n* Hold values from the original array in a queue and pop elements one by one\\n* If a 0 is at the front of the queue when popping, place it in the array twice\\n* This technique can easily be modified for placing zeros 3 times or 4 times or etc. Most of the two pointer \\nsolutions here would require significant changes. Most interviews have follow up questions/requirements so make robust solutions!\\n```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        Queue<Integer> queue = new LinkedList<>();\\n        for(int i : arr) queue.add(i);\\n        int i = 0;\\n        while(i <= arr.length - 1) {\\n            int top = queue.poll();\\n            if(top != 0) {\\n                arr[i++] = top;\\n            } else {\\n                arr[i++] = top;\\n                if(i > arr.length - 1) return;\\n                arr[i++] = top;\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        Queue<Integer> queue = new LinkedList<>();\\n        for(int i : arr) queue.add(i);\\n        int i = 0;\\n        while(i <= arr.length - 1) {\\n            int top = queue.poll();\\n            if(top != 0) {\\n                arr[i++] = top;\\n            } else {\\n                arr[i++] = top;\\n                if(i > arr.length - 1) return;\\n                arr[i++] = top;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 312986,
                "title": "c-faster-than-100-of-all-submissions",
                "content": "```\\nvoid duplicateZeros(vector<int>& a) {\\n        \\n        int i,j,n=a.size();\\n        for(i=0;i<n;i++)\\n        {\\n            if(a[i]==0)\\n            {\\n                a.insert(a.begin()+i, 0);\\n                a.pop_back();\\n                i++;\\n            }\\n        }\\n        return;\\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nvoid duplicateZeros(vector<int>& a) {\\n        \\n        int i,j,n=a.size();\\n        for(i=0;i<n;i++)\\n        {\\n            if(a[i]==0)\\n            {\\n                a.insert(a.begin()+i, 0);\\n                a.pop_back();\\n                i++;\\n            }\\n        }\\n        return;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3678498,
                "title": "2-easy-c-solution-beginner-friendly-approach-using-swap-insert-and-resize",
                "content": "\\n\\n# Code\\n```\\n// Solution (using swap())\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& nums) {\\n        int count=0, n=nums.size();\\n        for(int i=0; i<n; i++)\\n        {\\n            if(nums[i]==0 && (i+1)<n){\\n                for(int j=n-1; j>i+1; j--)\\n                    swap(nums[j], nums[j-1]);\\n                nums[++i]=0;\\n            }\\n        }\\n    }\\n};\\n\\n// Solution 2 (Using insert and resize)\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        int i=0, n=arr.size();\\n        while(i<n)\\n        {\\n            if(arr[i]==0)\\n            {\\n                arr.insert(arr.begin()+i, 0);\\n                i += 2;\\n            }\\n            else\\n                i++;\\n        }\\n        arr.resize(n);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n// Solution (using swap())\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& nums) {\\n        int count=0, n=nums.size();\\n        for(int i=0; i<n; i++)\\n        {\\n            if(nums[i]==0 && (i+1)<n){\\n                for(int j=n-1; j>i+1; j--)\\n                    swap(nums[j], nums[j-1]);\\n                nums[++i]=0;\\n            }\\n        }\\n    }\\n};\\n\\n// Solution 2 (Using insert and resize)\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        int i=0, n=arr.size();\\n        while(i<n)\\n        {\\n            if(arr[i]==0)\\n            {\\n                arr.insert(arr.begin()+i, 0);\\n                i += 2;\\n            }\\n            else\\n                i++;\\n        }\\n        arr.resize(n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3550951,
                "title": "easy-approach-using-string",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n    Use String and then update the element of array\\n\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        String s=\"\";\\n        StringBuilder t= new StringBuilder(); \\n        for(int a: arr) s+=a;\\n\\n        for(int i=0;i<s.length();i++){\\n            //if encounter 0 append one more zero and delete the last element\\n\\n            if(s.charAt(i)==\\'0\\'){\\n                t.append(\\'0\\');\\n                t.append(\\'0\\');\\n\\n            }else t.append(s.charAt(i));\\n\\n                    \\n            }\\n            String u= t.toString();\\n            for(int i=0;i<arr.length;i++){\\n                arr[i]=u.charAt(i)-\\'0\\';\\n            }\\n         return ;\\n    }\\n   \\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        String s=\"\";\\n        StringBuilder t= new StringBuilder(); \\n        for(int a: arr) s+=a;\\n\\n        for(int i=0;i<s.length();i++){\\n            //if encounter 0 append one more zero and delete the last element\\n\\n            if(s.charAt(i)==\\'0\\'){\\n                t.append(\\'0\\');\\n                t.append(\\'0\\');\\n\\n            }else t.append(s.charAt(i));\\n\\n                    \\n            }\\n            String u= t.toString();\\n            for(int i=0;i<arr.length;i++){\\n                arr[i]=u.charAt(i)-\\'0\\';\\n            }\\n         return ;\\n    }\\n   \\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3436746,
                "title": "easy-solution-with-explanation",
                "content": "# Duplicate Zeros Solution\\n\\nWe are going to duplicate each occurrence of zero and shift the remaining elements to the right.\\n\\nTo get started, let\\'s iterate over the array from left to right and check each element. Whenever we come across a zero, we\\'ll need to do a little bit of magic. We\\'ll shift all the remaining elements from one position to the right and the current position is already zero. \\n\\nIt may sound a bit complicated, but trust me, it\\'s easier than it sounds! With just a few lines of code, you\\'ll be able to duplicate those zeros in no time. \\n\\nNow, let\\'s put this into action with some JavaScript code:\\n\\n```\\nfor (let i = 0; i < arr.length; i++) {\\n        if (arr[i] === 0) {\\n            for (let j = arr.length - 1; j > i; j--) arr[j] = arr[j-1];\\n            i++\\n        }\\n    }\\n```\\n\\nThis code will loop through the array and check each element. If it encounters a zero, it will shift all the remaining elements one position to the right and duplicate the zero in the current position.\\n\\nAnd there you have it! With this algorithm, you can easily duplicate each occurrence of zero and shift the remaining elements to the right. Happy coding!",
                "solutionTags": [],
                "code": "```\\nfor (let i = 0; i < arr.length; i++) {\\n        if (arr[i] === 0) {\\n            for (let j = arr.length - 1; j > i; j--) arr[j] = arr[j-1];\\n            i++\\n        }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3319754,
                "title": "easy-python-solution-beats-91",
                "content": "# Intuition\\nEasy solution \\n\\n# Approach\\nusing insert in python\\n\\n# Complexity\\n- Time complexity:\\n  O(m) where m = length of final array\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        n = len(arr)\\n        a= []\\n        for i in range(len(arr)):\\n            if arr[i]==0:\\n                a.append(i)\\n        k =0\\n        for i in range(len(a)):\\n            arr.insert(a[i]+k,0)\\n            k+=1\\n        m = len(arr)\\n        for i in range(m-n):\\n            arr.pop()\\n        return arr\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        n = len(arr)\\n        a= []\\n        for i in range(len(arr)):\\n            if arr[i]==0:\\n                a.append(i)\\n        k =0\\n        for i in range(len(a)):\\n            arr.insert(a[i]+k,0)\\n            k+=1\\n        m = len(arr)\\n        for i in range(m-n):\\n            arr.pop()\\n        return arr\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3123265,
                "title": "java-easy-solution-100-faster-2-approach",
                "content": "\\n\\n# 1st approach (Java Code))\\n```\\nTime complexity: O(n)\\n\\nSpace complexity: O(n)\\n\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int[] nums = new int[arr.length];\\n        int i =0;\\n        int j =0;\\n        while(j<nums.length && i<arr.length) {\\n            if(arr[i] == 0) {\\n                nums[j] =0;\\n                if(j+1<arr.length) {\\n                    nums[j+1] =0;\\n                }\\n                j +=2;\\n                i++;\\n            } \\n            else {\\n                nums[j] = arr[i];\\n                i++;\\n                j++;\\n            }\\n        }\\n        for(int k =0;k<arr.length;k++) {\\n            arr[k] = nums[k];\\n        }\\n        \\n    }\\n}\\n```\\n# 2nd approach (Java Code))\\n```\\nTime complexity: O(n)\\n\\nSpace complexity: O(1)\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int nZe =0;\\n        for(int i : arr) {\\n            if(i==0) nZe++;\\n        }\\n        int i = arr.length-1;\\n        int j = arr.length+nZe-1;\\n        while(i!=j) {\\n            insert(arr,i,j);\\n            j--;\\n            if(arr[i]==0) {\\n                insert(arr,i,j);\\n                j--;\\n            }\\n            i--;\\n        }\\n    }\\n    void insert(int[] arr, int i, int j) {\\n        if(j<arr.length) {\\n            arr[j] = arr[i];\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nTime complexity: O(n)\\n\\nSpace complexity: O(n)\\n\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int[] nums = new int[arr.length];\\n        int i =0;\\n        int j =0;\\n        while(j<nums.length && i<arr.length) {\\n            if(arr[i] == 0) {\\n                nums[j] =0;\\n                if(j+1<arr.length) {\\n                    nums[j+1] =0;\\n                }\\n                j +=2;\\n                i++;\\n            } \\n            else {\\n                nums[j] = arr[i];\\n                i++;\\n                j++;\\n            }\\n        }\\n        for(int k =0;k<arr.length;k++) {\\n            arr[k] = nums[k];\\n        }\\n        \\n    }\\n}\\n```\n```\\nTime complexity: O(n)\\n\\nSpace complexity: O(1)\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int nZe =0;\\n        for(int i : arr) {\\n            if(i==0) nZe++;\\n        }\\n        int i = arr.length-1;\\n        int j = arr.length+nZe-1;\\n        while(i!=j) {\\n            insert(arr,i,j);\\n            j--;\\n            if(arr[i]==0) {\\n                insert(arr,i,j);\\n                j--;\\n            }\\n            i--;\\n        }\\n    }\\n    void insert(int[] arr, int i, int j) {\\n        if(j<arr.length) {\\n            arr[j] = arr[i];\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3082372,
                "title": "duplicate-zeros-java-solution",
                "content": "# Complexity\\n- Time complexity: (N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: (1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int len = arr.length;\\n        if(len == 1)\\n            return;\\n       int start = 0, end = len-1;\\n       while(start < end){\\n            if(arr[start] == 0)\\n                end--;\\n            start++;\\n        }\\n        if(end == len-1)\\n            return;\\n        for(int i = len-1; i >= 0 && end >= 0; i--, end--){\\n            arr[i] = arr[end];    \\n            if(arr[end] == 0 && end != start){\\n                arr[i-1] = 0;\\n                i--;\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int len = arr.length;\\n        if(len == 1)\\n            return;\\n       int start = 0, end = len-1;\\n       while(start < end){\\n            if(arr[start] == 0)\\n                end--;\\n            start++;\\n        }\\n        if(end == len-1)\\n            return;\\n        for(int i = len-1; i >= 0 && end >= 0; i--, end--){\\n            arr[i] = arr[end];    \\n            if(arr[end] == 0 && end != start){\\n                arr[i-1] = 0;\\n                i--;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2952717,
                "title": "java-1-ms-o-n-time-complexity-efficient",
                "content": "\\n# Complexity\\n- Time complexity:\\nO ( n )\\n\\n- Space complexity:\\nO ( n )\\n\\n# Code\\n```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int nums[]=new int[arr.length];\\n        int i=0;\\n        int j=0;\\n        while(j<nums.length && i<arr.length){\\n            if(arr[i]==0){\\n                nums[j]=0;\\n                if(j+1<nums.length){\\n                    nums[j+1]=0;\\n                }\\n                j+=2;\\n                i++;\\n            }\\n            else{\\n                nums[j]=arr[i];\\n                j++;\\n                i++;\\n            }\\n        }\\n        for(int k=0; k<nums.length; k++){\\n            arr[k]=nums[k];\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int nums[]=new int[arr.length];\\n        int i=0;\\n        int j=0;\\n        while(j<nums.length && i<arr.length){\\n            if(arr[i]==0){\\n                nums[j]=0;\\n                if(j+1<nums.length){\\n                    nums[j+1]=0;\\n                }\\n                j+=2;\\n                i++;\\n            }\\n            else{\\n                nums[j]=arr[i];\\n                j++;\\n                i++;\\n            }\\n        }\\n        for(int k=0; k<nums.length; k++){\\n            arr[k]=nums[k];\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2877660,
                "title": "my-solution-i-m-learning-kindly-check-the-code-and-advice-how-can-i-improve",
                "content": "```\\n\\n```class Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        l = len(arr)\\n        lst = []\\n        for i in range(len(arr)):\\n            if arr[i]==0:\\n                lst.append(i)\\n        lst\\n        for x,y in enumerate(lst):\\n            lst[x] = lst[x] + x\\n            arr.insert(lst[x-1],0)\\n        while l != len(arr):\\n            arr.pop(-1)",
                "solutionTags": [],
                "code": "```\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2734016,
                "title": "duplicate-zeros",
                "content": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int i =0;\\n        while(i<arr.length){\\n        if(arr[i]==0){\\n        int j=arr.length-1;\\n         while(j>i){\\n         arr[j]=arr[j-1];  \\n         j--;\\n     }\\n         i=i+1;\\n     }\\n         i++;\\n     }\\n    }\\n}\\n      ```\\n\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int i =0;\\n        while(i<arr.length){\\n        if(arr[i]==0){\\n        int j=arr.length-1;\\n         while(j>i){\\n         arr[j]=arr[j-1];  \\n         j--;\\n     }\\n         i=i+1;\\n     }\\n         i++;\\n     }\\n    }\\n}\\n      ```",
                "codeTag": "Java"
            },
            {
                "id": 2732666,
                "title": "java-duplicate-zeros",
                "content": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int a[]=new int[arr.length];\\n        int j=0;\\n        for(int i=0;i<arr.length;i++){\\n            if(j==arr.length)break;\\n            if(arr[i]==0){\\n                a[j++]=0;\\n                 if(j==arr.length)break;\\n                a[j++]=0;\\n            }\\n            else{\\n                a[j++]=arr[i];\\n            }\\n            \\n        }\\n        \\n        j=0;\\n        for(int ele:a){\\n            arr[j++]=ele;\\n        }\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int a[]=new int[arr.length];\\n        int j=0;\\n        for(int i=0;i<arr.length;i++){\\n            if(j==arr.length)break;\\n            if(arr[i]==0){\\n                a[j++]=0;\\n                 if(j==arr.length)break;\\n                a[j++]=0;\\n            }\\n            else{\\n                a[j++]=arr[i];\\n            }\\n            \\n        }\\n        \\n        j=0;\\n        for(int ele:a){\\n            arr[j++]=ele;\\n        }\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2705763,
                "title": "python-two-pointers",
                "content": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        oldLen = len(arr) \\n        i = 0\\n        j = len(arr)\\n        \\n        while i < j :\\n            if arr[i] == 0 :\\n                arr.insert(i+1 , 0)\\n                i += 1\\n            i += 1\\n        \\n        arr[:] = arr[:oldLen]\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        oldLen = len(arr) \\n        i = 0\\n        j = len(arr)\\n        \\n        while i < j :\\n            if arr[i] == 0 :\\n                arr.insert(i+1 , 0)\\n                i += 1\\n            i += 1\\n        \\n        arr[:] = arr[:oldLen]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2507113,
                "title": "in-place-javascript-solution-using-splice",
                "content": "Found this solution helpful? Consider showing support by upvoting this post.\\nHave a question? Kindly leave a comment below.\\nThank you and happy hacking!\\n```\\nvar duplicateZeros = function (arr) {\\n\\n    for (let i = 0; i < arr.length; i++) {\\n        if (arr[i] === 0) {\\n            arr.splice(i, 0, 0)  \\n            arr.pop()\\n            i++\\n        }\\n    }\\n\\n    return arr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar duplicateZeros = function (arr) {\\n\\n    for (let i = 0; i < arr.length; i++) {\\n        if (arr[i] === 0) {\\n            arr.splice(i, 0, 0)  \\n            arr.pop()\\n            i++\\n        }\\n    }\\n\\n    return arr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2494950,
                "title": "java-simple-and-easy-solution-beats-69",
                "content": "```\\n ArrayList<Integer> ans = new ArrayList<>();\\n        //first we make an arryalist ;\\n        \\n        //then we iterate through the arr and\\n        for(int i = 0 ; i < arr.length ; i++){\\n            //we add the element as it is if it is not equalls to 0 ;\\n            if(arr[i] != 0){\\n                ans.add(arr[i]);\\n            }else{\\n                //if not then we add two zeroes ;\\n                ans.add(0);\\n                ans.add(0);\\n            }\\n        }\\n        \\n        //then we use a for loop for changing the elements of arr array ;\\n        for(int i = 0 ; i < arr.length ;i++){\\n            arr[i] = ans.get(i);\\n        }\\n    //we don\\'t return anything bcz it\\'s a void function",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n ArrayList<Integer> ans = new ArrayList<>();\\n        //first we make an arryalist ;\\n        \\n        //then we iterate through the arr and\\n        for(int i = 0 ; i < arr.length ; i++){\\n            //we add the element as it is if it is not equalls to 0 ;\\n            if(arr[i] != 0){\\n                ans.add(arr[i]);\\n            }else{\\n                //if not then we add two zeroes ;\\n                ans.add(0);\\n                ans.add(0);\\n            }\\n        }\\n        \\n        //then we use a for loop for changing the elements of arr array ;\\n        for(int i = 0 ; i < arr.length ;i++){\\n            arr[i] = ans.get(i);\\n        }\\n    //we don\\'t return anything bcz it\\'s a void function",
                "codeTag": "Unknown"
            },
            {
                "id": 2409322,
                "title": "c-easiest-and-short-solution-for-duplicate-zeros",
                "content": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        for(int i=0;i<arr.size();i++){\\n            if(arr[i]==0){\\n                arr.pop_back();\\n                arr.insert(arr.begin()+i,0);\\n                ++i;\\n            }\\n        }\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        for(int i=0;i<arr.size();i++){\\n            if(arr[i]==0){\\n                arr.pop_back();\\n                arr.insert(arr.begin()+i,0);\\n                ++i;\\n            }\\n        }\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2400164,
                "title": "java-solution",
                "content": "**If we encounter a zero in the array we move the last but one element to the last position ans the last element is removed automatically so the void place created after zero is filled by zero as defalut int value**\\n```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        for(int i=0;i<arr.length;i++){\\n            if(arr[i]==0){\\n                for(int j=arr.length-1;j>i;j--){\\n                    arr[j]=arr[j-1];\\n                }\\n                i++;\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        for(int i=0;i<arr.length;i++){\\n            if(arr[i]==0){\\n                for(int j=arr.length-1;j>i;j--){\\n                    arr[j]=arr[j-1];\\n                }\\n                i++;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2359986,
                "title": "javascript-solution",
                "content": "The solution is based on the leetcode definition for array insertion and it followed all the criteria from the question.\\n\\n```\\nvar duplicateZeros = function(arr) {\\n    for(let i=arr.length-1; i>=0; i--) {\\n        if(arr[i] === 0) {\\n            for(let j=arr.length-1; j>=i; j--) {\\n             if(j+1 <= arr.length-1) { \\n                 arr[j+1] = arr[j] \\n                }\\n            }\\n        }\\n    }\\n};\\n```\\n",
                "solutionTags": [],
                "code": "```\\nvar duplicateZeros = function(arr) {\\n    for(let i=arr.length-1; i>=0; i--) {\\n        if(arr[i] === 0) {\\n            for(let j=arr.length-1; j>=i; j--) {\\n             if(j+1 <= arr.length-1) { \\n                 arr[j+1] = arr[j] \\n                }\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2319878,
                "title": "python-o-n-solution",
                "content": "#### **Final Code:**\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        count = 0\\n        while count < len(arr):\\n            if arr[count] == 0:\\n                arr.insert(count, 0)\\n                arr.pop()\\n                count += 2\\n            else:\\n                count += 1\\n```\\n\\n#### **Steps:**\\n* **Step1:**\\nCreate a count variable and set it to 0 (this will act as out index value)\\n```count = 0```\\n\\n* **Step2:**\\nRun a while loop till the count is not greater than the length of our array.\\n```while count < len(arr):```\\n\\n* **Step2:** At each position check if the element is 0 or not, and\\n**If it is zero**:\\ninsert a 0 in the place element at index value of our count.\\nafter this we will have 2 zeros now we need to jump ahead 2 steps so that we dont encounter the same \\nzero again,\\nAnd we also have to remove the element at last position of the array to kepp it the same size.\\n```\\n            if arr[count] == 0:\\n                arr.insert(count, 0)\\n                arr.pop()\\n                count += 2\\n```\\n**If it is Not zero**:\\njust increase the count by 1 and check again for zeros.\\n```\\n            else:\\n                count += 1\\n```\\n\\n* **Step3:**\\nAfter all this we shoud have modified our array in place : )\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        count = 0\\n        while count < len(arr):\\n            if arr[count] == 0:\\n                arr.insert(count, 0)\\n                arr.pop()\\n                count += 2\\n            else:\\n                count += 1\\n```\n```count = 0```\n```while count < len(arr):```\n```\\n            if arr[count] == 0:\\n                arr.insert(count, 0)\\n                arr.pop()\\n                count += 2\\n```\n```\\n            else:\\n                count += 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2243218,
                "title": "python-o-n-arr-in-place",
                "content": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        n = len(arr)\\n        count_zero = 0\\n        for x in arr:\\n            if x ==0:\\n                count_zero +=1\\n        for i in range(n-1,-1, -1):\\n            if i+count_zero < n:\\n                arr[i+count_zero] = arr[i]\\n            if arr[i] == 0:\\n                count_zero -= 1\\n                if i + count_zero < n:\\n                    arr[i + count_zero] = arr[i]\\n```\\t\\t\\t\\t\\t",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        n = len(arr)\\n        count_zero = 0\\n        for x in arr:\\n            if x ==0:\\n                count_zero +=1\\n        for i in range(n-1,-1, -1):\\n            if i+count_zero < n:\\n                arr[i+count_zero] = arr[i]\\n            if arr[i] == 0:\\n                count_zero -= 1\\n                if i + count_zero < n:\\n                    arr[i + count_zero] = arr[i]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2160356,
                "title": "hex-python3-two-pointers",
                "content": "## Solution\\n### Simulation\\n- A combination of python\\'s built-in functions pop and insert is used.\\n\\n- The time complexity of insert is O(n)\\n\\n```\\nLists:\\n                               Complexity\\nOperation     | Example      | Class         | Notes\\n--------------+--------------+---------------+-------------------------------\\nIndex         | l[i]         | O(1)          |\\nStore         | l[i] = 0     | O(1)          |\\nLength        | len(l)       | O(1)          |\\nAppend        | l.append(5)  | O(1)          |\\nClear         | l.clear()    | O(1)          | similar to l = []\\n\\nSlice         | l[a:b]       | O(b-a)        | l[1:5]:O(l)/l[:]:O(len(l)-0)=O(N)\\nExtend        | l.extend(...)| O(len(...))   | depends only on len of extension\\nConstruction  | list(...)    | len(...)      | depends on lenghth of argument\\n\\ncheck ==, !=  | l1 == l2     | O(N)          |\\nInsert        | l[a:b] = ... | O(N)          |\\nDelete        | del l[i]     | O(N)          |\\nRemove        | l.remove(...)| O(N)          |\\nContainment   | x in/not in l| O(N)          | searches list\\nCopy          | l.copy()     | O(N)          | Same as l[:] which is O(N)\\nPop           | l.pop(...)   | O(N)          |\\nPop           | l.pop()      | O(1)          | same as l.pop(-1), popping at end\\nExtreme value | min(l)/max(l)| O(N)          |\\nReverse       | l.reverse()  | O(N)          |\\nIteration     | for v in l:  | O(N)          |\\n\\nSort          | l.sort()     | O(N Log N)    | key/reverse doesn\\'t change this\\nMultiply      | k*l          | O(k N)        | 5*l is O(N): len(l)*l is O(N**2)\\n```\\n\\n```python\\n# O(n^2) time | O(1) space\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        idx = 0\\n        while idx < len(arr):\\n            if arr[idx] == 0:\\n                arr.pop()\\n                arr.insert(idx, 0)\\n                idx+=1\\n            idx+=1\\n```\\n\\n### Two Pointers\\nTraverse the number of zeros and the end position of the data,\\nImagine that each zero is pushed onto the stack twice, and the traversal ends when the stack is as long as the array. Pops elements from the top of the stack in order.\\n\\nA pointer left represents the data position (the top of the stack), and a pointer represents the write position (the current write position of the original array)\\n\\n```python\\n# O(n) time | O(1) space\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        left = -1\\n        top_idx = 0\\n        \\n        while top_idx < len(arr):\\n            left+=1\\n            if arr[left]:\\n                top_idx+=1\\n            else:\\n                top_idx+=2\\n            \\n        right = len(arr)-1\\n        if top_idx == len(arr) +1:\\n            arr[right] = 0\\n            right -=1\\n            left -=1\\n        \\n        while right >=0:\\n            arr[right] = arr[left]\\n            right -=1\\n            if arr[left] == 0:\\n                arr[right] = arr[left]\\n                right -=1\\n            left-=1\\n```",
                "solutionTags": [
                    "Python3",
                    "Two Pointers",
                    "Simulation"
                ],
                "code": "```\\nLists:\\n                               Complexity\\nOperation     | Example      | Class         | Notes\\n--------------+--------------+---------------+-------------------------------\\nIndex         | l[i]         | O(1)          |\\nStore         | l[i] = 0     | O(1)          |\\nLength        | len(l)       | O(1)          |\\nAppend        | l.append(5)  | O(1)          |\\nClear         | l.clear()    | O(1)          | similar to l = []\\n\\nSlice         | l[a:b]       | O(b-a)        | l[1:5]:O(l)/l[:]:O(len(l)-0)=O(N)\\nExtend        | l.extend(...)| O(len(...))   | depends only on len of extension\\nConstruction  | list(...)    | len(...)      | depends on lenghth of argument\\n\\ncheck ==, !=  | l1 == l2     | O(N)          |\\nInsert        | l[a:b] = ... | O(N)          |\\nDelete        | del l[i]     | O(N)          |\\nRemove        | l.remove(...)| O(N)          |\\nContainment   | x in/not in l| O(N)          | searches list\\nCopy          | l.copy()     | O(N)          | Same as l[:] which is O(N)\\nPop           | l.pop(...)   | O(N)          |\\nPop           | l.pop()      | O(1)          | same as l.pop(-1), popping at end\\nExtreme value | min(l)/max(l)| O(N)          |\\nReverse       | l.reverse()  | O(N)          |\\nIteration     | for v in l:  | O(N)          |\\n\\nSort          | l.sort()     | O(N Log N)    | key/reverse doesn\\'t change this\\nMultiply      | k*l          | O(k N)        | 5*l is O(N): len(l)*l is O(N**2)\\n```\n```python\\n# O(n^2) time | O(1) space\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        idx = 0\\n        while idx < len(arr):\\n            if arr[idx] == 0:\\n                arr.pop()\\n                arr.insert(idx, 0)\\n                idx+=1\\n            idx+=1\\n```\n```python\\n# O(n) time | O(1) space\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        left = -1\\n        top_idx = 0\\n        \\n        while top_idx < len(arr):\\n            left+=1\\n            if arr[left]:\\n                top_idx+=1\\n            else:\\n                top_idx+=2\\n            \\n        right = len(arr)-1\\n        if top_idx == len(arr) +1:\\n            arr[right] = 0\\n            right -=1\\n            left -=1\\n        \\n        while right >=0:\\n            arr[right] = arr[left]\\n            right -=1\\n            if arr[left] == 0:\\n                arr[right] = arr[left]\\n                right -=1\\n            left-=1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2143771,
                "title": "c-easy-brute-force",
                "content": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        \\n        int n=arr.size();\\n        //int val=count(arr.begin(),arr.end(),1);\\n        \\n        vector<int>aksh;\\n        // just removing the base case ............\\n        \\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(arr[i] !=0)\\n            {\\n             aksh.push_back(arr[i]);\\n            }\\n            else\\n            {\\n                aksh.push_back(0);\\n                aksh.push_back(0);\\n            }\\n            if(aksh.size()==n)\\n            {\\n                break;\\n            }\\n        }\\n        aksh.resize(n);\\n        arr=aksh;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        \\n        int n=arr.size();\\n        //int val=count(arr.begin(),arr.end(),1);\\n        \\n        vector<int>aksh;\\n        // just removing the base case ............\\n        \\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(arr[i] !=0)\\n            {\\n             aksh.push_back(arr[i]);\\n            }\\n            else\\n            {\\n                aksh.push_back(0);\\n                aksh.push_back(0);\\n            }\\n            if(aksh.size()==n)\\n            {\\n                break;\\n            }\\n        }\\n        aksh.resize(n);\\n        arr=aksh;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2076271,
                "title": "c-using-stack",
                "content": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        int n = arr.size();\\n        stack<int> st,st2 ;\\n\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            st.push(arr[i]);\\n            if(st.top()==0)\\n            {\\n                st.push(0);\\n            }\\n            \\n        }\\n        int k = st.size();\\n        while(k!=n)\\n        {\\n           st.pop(); \\n            k--;\\n        }\\n        int arr2[n];\\n        int i=0;\\nwhile(st.empty()!=true)\\n{\\n    st2.push(st.top());\\n    st.pop();\\n}\\n          while(st2.empty()!=true)\\n          {\\n              arr[i]=st2.top();\\n              st2.pop();\\n              i++;\\n          }\\n    }\\n};\\n```",
                "solutionTags": [
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        int n = arr.size();\\n        stack<int> st,st2 ;\\n\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            st.push(arr[i]);\\n            if(st.top()==0)\\n            {\\n                st.push(0);\\n            }\\n            \\n        }\\n        int k = st.size();\\n        while(k!=n)\\n        {\\n           st.pop(); \\n            k--;\\n        }\\n        int arr2[n];\\n        int i=0;\\nwhile(st.empty()!=true)\\n{\\n    st2.push(st.top());\\n    st.pop();\\n}\\n          while(st2.empty()!=true)\\n          {\\n              arr[i]=st2.top();\\n              st2.pop();\\n              i++;\\n          }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2025687,
                "title": "java-multiple-approaches-easy-understanding-brute-force-to-optimal",
                "content": "\\n\\tpublic class DuplicateZeros {\\n\\n    public static void main(String[] args) {\\n        int[] arr = {1, 0, 2, 3, 0, 4, 5, 0};\\n        duplicateZerosApproach3Optimal(arr);\\n        System.out.println(\"\");\\n    }\\n\\n    // TC: O(N^2) SC: O(1)\\n    private static void duplicateZerosApproach1(int[] arr) {\\n        for (int i = 0; i < arr.length; i++) {\\n            if (arr[i] == 0) {\\n                shiftRight(arr, i);\\n                i++;\\n            }\\n        }\\n    }\\n\\n    private static void shiftRight(int[] arr, int i) {\\n        for (int j = arr.length - 1; j > i; j--) {\\n            arr[j] = arr[j - 1];\\n        }\\n    }\\n\\n    // TC: O(N) SC: O(N)\\n    private static void duplicateZerosApproach2UsingQueue(int[] arr) {\\n        Queue<Integer> queue = new LinkedList<>();\\n        for (int i = 0; i < arr.length; i++) {\\n            queue.add(arr[i]);\\n            if (arr[i] == 0) {\\n                queue.add(0);\\n            }\\n            arr[i] = queue.remove();\\n        }\\n    }\\n\\n\\n    // TC: O(N) SC: O(1)\\n    private static void duplicateZerosApproach3Optimal(int[] arr) {\\n        int count =0;\\n        for(int i=0;i<arr.length;i++){\\n            if(arr[i]==0){\\n                count++;\\n            }\\n        }\\n        int i=arr.length-1, j=arr.length+count-1;\\n        while(i!=j){\\n            insert(arr,i,j--);\\n            if(arr[i]==0){\\n                insert(arr,i,j--);\\n            }\\n            i--;\\n        }\\n\\n    }\\n\\n    private static void insert(int[] arr, int i, int j) {\\n        if(j<arr.length){\\n            arr[j]=arr[i];\\n        }\\n    }\\n\\n\\n}\\n",
                "solutionTags": [
                    "Java",
                    "Queue"
                ],
                "code": "\\n\\tpublic class DuplicateZeros {\\n\\n    public static void main(String[] args) {\\n        int[] arr = {1, 0, 2, 3, 0, 4, 5, 0};\\n        duplicateZerosApproach3Optimal(arr);\\n        System.out.println(\"\");\\n    }\\n\\n    // TC: O(N^2) SC: O(1)\\n    private static void duplicateZerosApproach1(int[] arr) {\\n        for (int i = 0; i < arr.length; i++) {\\n            if (arr[i] == 0) {\\n                shiftRight(arr, i);\\n                i++;\\n            }\\n        }\\n    }\\n\\n    private static void shiftRight(int[] arr, int i) {\\n        for (int j = arr.length - 1; j > i; j--) {\\n            arr[j] = arr[j - 1];\\n        }\\n    }\\n\\n    // TC: O(N) SC: O(N)\\n    private static void duplicateZerosApproach2UsingQueue(int[] arr) {\\n        Queue<Integer> queue = new LinkedList<>();\\n        for (int i = 0; i < arr.length; i++) {\\n            queue.add(arr[i]);\\n            if (arr[i] == 0) {\\n                queue.add(0);\\n            }\\n            arr[i] = queue.remove();\\n        }\\n    }\\n\\n\\n    // TC: O(N) SC: O(1)\\n    private static void duplicateZerosApproach3Optimal(int[] arr) {\\n        int count =0;\\n        for(int i=0;i<arr.length;i++){\\n            if(arr[i]==0){\\n                count++;\\n            }\\n        }\\n        int i=arr.length-1, j=arr.length+count-1;\\n        while(i!=j){\\n            insert(arr,i,j--);\\n            if(arr[i]==0){\\n                insert(arr,i,j--);\\n            }\\n            i--;\\n        }\\n\\n    }\\n\\n    private static void insert(int[] arr, int i, int j) {\\n        if(j<arr.length){\\n            arr[j]=arr[i];\\n        }\\n    }\\n\\n\\n}\\n",
                "codeTag": "Java"
            },
            {
                "id": 1883014,
                "title": "c-solution",
                "content": "```\\n public void DuplicateZeros(int[] arr) {\\n        for(int i = 0; i < arr.Length; i++)\\n        {\\n            if (arr[i] == 0)\\n            {\\n                for(int j = arr.Length - 1; j > i; j--)\\n                {\\n                    arr[j] = arr[j - 1];\\n                }\\n                i++;\\n            }\\n        }\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n public void DuplicateZeros(int[] arr) {\\n        for(int i = 0; i < arr.Length; i++)\\n        {\\n            if (arr[i] == 0)\\n            {\\n                for(int j = arr.Length - 1; j > i; j--)\\n                {\\n                    arr[j] = arr[j - 1];\\n                }\\n                i++;\\n            }\\n        }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1862515,
                "title": "java-time-o-n-space-o-n",
                "content": "\\n```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int zeroCount = 0;\\n        int n = arr.length;\\n        \\n        //if input = [1,0,2,3,0,4,5,0]\\n            //zeroCount = 3\\n        for (int i = 0; i < n; i++) {\\n            if (arr[i] == 0) {\\n                zeroCount++;\\n            }\\n        }\\n        \\n        // temptArray size = n + 3\\n        int[] temptArray = new int[n + zeroCount];\\n        int index = 0;\\n        \\n        //temptArray = [1,0,0,2,3,0,0,4,5,0,0]\\n        for (int i = 0; i < n; i++) {\\n            if (arr[i] == 0) {\\n                temptArray[++index] = 0;\\n            }\\n            else {\\n                temptArray[index] = arr[i];\\n            }\\n            \\n            index++;\\n        }\\n        \\n        // arr = [1,0,0,2,3,0,0,4]  won\\'t add in [5, 0, 0]\\n        for (int i = 0; i < n; i++) {\\n            arr[i] = temptArray[i];\\n        }\\n        \\n        //Time: O(n)\\n        //Space: O(n)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int zeroCount = 0;\\n        int n = arr.length;\\n        \\n        //if input = [1,0,2,3,0,4,5,0]\\n            //zeroCount = 3\\n        for (int i = 0; i < n; i++) {\\n            if (arr[i] == 0) {\\n                zeroCount++;\\n            }\\n        }\\n        \\n        // temptArray size = n + 3\\n        int[] temptArray = new int[n + zeroCount];\\n        int index = 0;\\n        \\n        //temptArray = [1,0,0,2,3,0,0,4,5,0,0]\\n        for (int i = 0; i < n; i++) {\\n            if (arr[i] == 0) {\\n                temptArray[++index] = 0;\\n            }\\n            else {\\n                temptArray[index] = arr[i];\\n            }\\n            \\n            index++;\\n        }\\n        \\n        // arr = [1,0,0,2,3,0,0,4]  won\\'t add in [5, 0, 0]\\n        for (int i = 0; i < n; i++) {\\n            arr[i] = temptArray[i];\\n        }\\n        \\n        //Time: O(n)\\n        //Space: O(n)\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1724484,
                "title": "easy-java-solution-in-o-n",
                "content": "```class Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int i = 0 , len = arr.length;\\n        \\n       while(i < len-1){\\n            if(arr[i] == 0){\\n                for(int j = len - 2 ; j > i ; j--){\\n                    arr[j+1] = arr[j];\\n                }\\n                arr[i+1] = 0;\\n                i++;\\n            }\\n           i++;\\n        }\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int i = 0 , len = arr.length;\\n        \\n       while(i < len-1){\\n            if(arr[i] == 0){\\n                for(int j = len - 2 ; j > i ; j--){\\n                    arr[j+1] = arr[j];\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1688467,
                "title": "javascript",
                "content": "```\\n/**\\n * @param {number[]} arr\\n * @return {void} Do not return anything, modify arr in-place instead.\\n */\\nvar duplicateZeros = function(arr) {\\n    for(let i=0; i<arr.length; i++) {\\n        if(arr[i] == 0) {\\n            for(let j=arr.length-1; j>i; j--) {\\n                arr[j] = arr[j - 1];\\n            }\\n            i++;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @return {void} Do not return anything, modify arr in-place instead.\\n */\\nvar duplicateZeros = function(arr) {\\n    for(let i=0; i<arr.length; i++) {\\n        if(arr[i] == 0) {\\n            for(let j=arr.length-1; j>i; j--) {\\n                arr[j] = arr[j - 1];\\n            }\\n            i++;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1650941,
                "title": "two-pointers-python-with-easy-to-understand",
                "content": "```py\\nclass Solution:\\n    @staticmethod\\n    def duplicateZeros(arr: List[int]) -> None:\\n        N = len(arr)\\n        cnz = count(arr)\\n\\n        write_idx = N + cnz - 1\\n        curr = N - 1\\n        \\n        while curr >= 0 and write_idx >= 0:\\n            if write_idx < N:\\n                arr[write_idx] = arr[curr]\\n            write_idx -=1\\n            \\n            if arr[curr] == 0:\\n                if write_idx < N:\\n                    arr[write_idx] = arr[curr]\\n                write_idx -= 1\\n            curr-=1\\n    \\n    @staticmethod\\n    def count(arr: List[int]) -> int:\\n        count = 0\\n        for e in arr:\\n            if e == 0:\\n                count += 1\\n        return count\\n```",
                "solutionTags": [],
                "code": "```py\\nclass Solution:\\n    @staticmethod\\n    def duplicateZeros(arr: List[int]) -> None:\\n        N = len(arr)\\n        cnz = count(arr)\\n\\n        write_idx = N + cnz - 1\\n        curr = N - 1\\n        \\n        while curr >= 0 and write_idx >= 0:\\n            if write_idx < N:\\n                arr[write_idx] = arr[curr]\\n            write_idx -=1\\n            \\n            if arr[curr] == 0:\\n                if write_idx < N:\\n                    arr[write_idx] = arr[curr]\\n                write_idx -= 1\\n            curr-=1\\n    \\n    @staticmethod\\n    def count(arr: List[int]) -> int:\\n        count = 0\\n        for e in arr:\\n            if e == 0:\\n                count += 1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1622200,
                "title": "javascript-efficient-solution-w-o-splice-beats-99",
                "content": "```\\nvar duplicateZeros = function(arr) {\\n    let zeroesCount = arr.filter(x => x === 0).length;\\n    const len = arr.length;\\n    for (let i = len-1; i>= 0; i--) {\\n        if (i + zeroesCount < len) {\\n            arr[i + zeroesCount] = arr[i];\\n        }\\n        if (arr[i] === 0) {\\n            zeroesCount--;\\n            if (i + zeroesCount < len) {\\n                arr[i + zeroesCount] = 0;\\n            }\\n        }\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar duplicateZeros = function(arr) {\\n    let zeroesCount = arr.filter(x => x === 0).length;\\n    const len = arr.length;\\n    for (let i = len-1; i>= 0; i--) {\\n        if (i + zeroesCount < len) {\\n            arr[i + zeroesCount] = arr[i];\\n        }\\n        if (arr[i] === 0) {\\n            zeroesCount--;\\n            if (i + zeroesCount < len) {\\n                arr[i + zeroesCount] = 0;\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1584515,
                "title": "rust",
                "content": "```\\nimpl Solution {\\n    pub fn duplicate_zeros(arr: &mut Vec<i32>) {\\n        let mut i=0;\\n        while i < arr.len()-1{\\n            if arr[i] == 0{\\n                for j in (i+1..=arr.len()-1).rev(){\\n                    arr[j] = arr[j-1]\\n                }\\n                arr[i+1] = 0;\\n                i +=1;\\n            }\\n            i+=1\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn duplicate_zeros(arr: &mut Vec<i32>) {\\n        let mut i=0;\\n        while i < arr.len()-1{\\n            if arr[i] == 0{\\n                for j in (i+1..=arr.len()-1).rev(){\\n                    arr[j] = arr[j-1]\\n                }\\n                arr[i+1] = 0;\\n                i +=1;\\n            }\\n            i+=1\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1532914,
                "title": "python3-simple-and-easy-one-faster-than-94",
                "content": "class Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \\n        \"\"\"\\n        i = 0 \\n        n = len(arr)\\n        while i < n :\\n            \\n            if arr[i] == 0:\\n                ## remove the last one \\n                arr.pop()\\n                ### insert 0 next to 0 \\n                arr.insert(i+1, 0)\\n                i += 2\\n            else:\\n                i += 1\\n",
                "solutionTags": [],
                "code": "class Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \\n        \"\"\"\\n        i = 0 \\n        n = len(arr)\\n        while i < n :\\n            \\n            if arr[i] == 0:\\n                ## remove the last one \\n                arr.pop()\\n                ### insert 0 next to 0 \\n                arr.insert(i+1, 0)\\n                i += 2\\n            else:\\n                i += 1\\n",
                "codeTag": "Java"
            },
            {
                "id": 1421031,
                "title": "c-o-n-o-1-simple-solution-explained-faster-94-25-memory-99-85",
                "content": "Steps:\\n* First find how many elements will cover up the whole array if we duplicate 0. let, till index `i`.\\n* Then try to stretch the subarray `[0,i]` to the right.\\n[ if the value at index `i` is 0, duplicating it may exceed the array length ]\\n\\nConsider the given example:\\n`[1,0,2,3,0,4,5,0]`, array length is 8.\\n\\t\\t\\t\\t\\t\\t\\t\\tindex: `0 1 2 3 4 5 6 7`\\ncontribution in final array: `1 2 1 1 2 1 1 2`\\n\\nSo the  the subarray [0,5] will cover up the array of length 8.\\n\\nNow, stretch the array to the right:\\nput value of index \\n* 5 to index 7              ` [ -, -, -, -, -, -, -, 4]`\\n* 4 to index 6 & 5  ` [ -, -, -, -, -, 0, 0, 4]`\\n*  3 to index 4   `[ -, -, -, -,3, 0, 0, 4]`\\n*   2 to index 3   ` [ -, -, -, 2,3, 0, 0, 4]`\\n*   1 to index 2 & 1  ` [ -, 0, 0, 2,3, 0, 0, 4]`\\n*   0 to index 0   `[ 1, 0, 0, 2,3, 0, 0, 4]`\\n\\nConsider another case: [1,0,2,3,0,4]\\nHere, stretching range [0,4] will cover the full array. But duplicating all 0 will exceed the given array length.\\nI handled this case manually.\\n\\nHere is my solution:\\n```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        int n = arr.size();\\n        int cnt = 0, idx;\\n        for(idx=0;idx<n; idx++ ){\\n            cnt++;\\n            if(!arr[idx]) cnt++;\\n            if(cnt>=n) break;\\n        }\\n        int pos = n-1;\\n        if(cnt>n){\\n            arr[pos--] = 0;\\n            idx--;\\n        }\\n        while(idx>=0){\\n            if(arr[i]){\\n                arr[pos--] = arr[i];\\n            }\\n            else{\\n                arr[pos--] = 0;\\n                arr[pos--] = 0;\\n            }\\n            idx--;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        int n = arr.size();\\n        int cnt = 0, idx;\\n        for(idx=0;idx<n; idx++ ){\\n            cnt++;\\n            if(!arr[idx]) cnt++;\\n            if(cnt>=n) break;\\n        }\\n        int pos = n-1;\\n        if(cnt>n){\\n            arr[pos--] = 0;\\n            idx--;\\n        }\\n        while(idx>=0){\\n            if(arr[i]){\\n                arr[pos--] = arr[i];\\n            }\\n            else{\\n                arr[pos--] = 0;\\n                arr[pos--] = 0;\\n            }\\n            idx--;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1399539,
                "title": "simple-and-short-java-solution-must-check",
                "content": "```\\nclass Solution {\\n    public static void duplicateZeros(int[] arr) {\\n        for (int i = 0; i < arr.length; i++) {\\n            if (arr[i] == 0) {\\n                for (int j = arr.length - 1; j > i; j--) {\\n                    arr[j] = arr[j - 1];\\n                }\\n                i++;\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public static void duplicateZeros(int[] arr) {\\n        for (int i = 0; i < arr.length; i++) {\\n            if (arr[i] == 0) {\\n                for (int j = arr.length - 1; j > i; j--) {\\n                    arr[j] = arr[j - 1];\\n                }\\n                i++;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1352622,
                "title": "java-optimal-solution",
                "content": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        /*\\n        Ip:[1,0,2,3,0,4,5,0]\\n        convert: [1,0,0,2,3,0,0,4]\\n        */\\n         int i = 0, sh = 0;\\n         for (i = 0; sh + i < arr.length; i++){\\n             sh += arr[i] == 0 ? 1 : 0;  //count shift required because of 0\\n         } \\n        //i at end ..traverse from end \\n        //sh=3 i=8\\n        //System.out.println(sh+\":\"+i);\\n         for (i = i - 1; sh > 0; i--) {\\n            if (i + sh < arr.length){\\n                arr[i + sh] = arr[i];\\n            }\\n            if (arr[i] == 0){\\n                sh--;\\n                arr[i + sh] = arr[i];\\n            } \\n          }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        /*\\n        Ip:[1,0,2,3,0,4,5,0]\\n        convert: [1,0,0,2,3,0,0,4]\\n        */\\n         int i = 0, sh = 0;\\n         for (i = 0; sh + i < arr.length; i++){\\n             sh += arr[i] == 0 ? 1 : 0;  //count shift required because of 0\\n         } \\n        //i at end ..traverse from end \\n        //sh=3 i=8\\n        //System.out.println(sh+\":\"+i);\\n         for (i = i - 1; sh > 0; i--) {\\n            if (i + sh < arr.length){\\n                arr[i + sh] = arr[i];\\n            }\\n            if (arr[i] == 0){\\n                sh--;\\n                arr[i + sh] = arr[i];\\n            } \\n          }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1351369,
                "title": "duplicate-zeroes-java-solutiion",
                "content": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        /*\\n        Ip:[1,0,2,3,0,4,5,0]\\n        convert: [1,0,0,2,3,0,0,4]\\n        */\\n         int i = 0, sh = 0;\\n         for (i = 0; sh + i < arr.length; i++){\\n             sh += arr[i] == 0 ? 1 : 0;  //count shift required because of 0\\n         } \\n        //i at end ..traverse from end \\n        //sh=2 i=6\\n        //System.out.println(sh+\":\"+i);\\n         for (i = i - 1; sh > 0; i--) {\\n            if (i + sh < arr.length){\\n                arr[i + sh] = arr[i];\\n            }\\n            if (arr[i] == 0){\\n                sh--;\\n                arr[i + sh] = arr[i];\\n            } \\n          }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        /*\\n        Ip:[1,0,2,3,0,4,5,0]\\n        convert: [1,0,0,2,3,0,0,4]\\n        */\\n         int i = 0, sh = 0;\\n         for (i = 0; sh + i < arr.length; i++){\\n             sh += arr[i] == 0 ? 1 : 0;  //count shift required because of 0\\n         } \\n        //i at end ..traverse from end \\n        //sh=2 i=6\\n        //System.out.println(sh+\":\"+i);\\n         for (i = i - 1; sh > 0; i--) {\\n            if (i + sh < arr.length){\\n                arr[i + sh] = arr[i];\\n            }\\n            if (arr[i] == 0){\\n                sh--;\\n                arr[i + sh] = arr[i];\\n            } \\n          }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1350348,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n    for(int i=0 ; i<arr.size() ; i++)\\n    {if(arr[i]==0)\\n        { arr.pop_back();\\n         arr.insert(arr.begin()+ i , 0 );\\n          i++;}}\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n    for(int i=0 ; i<arr.size() ; i++)\\n    {if(arr[i]==0)\\n        { arr.pop_back();\\n         arr.insert(arr.begin()+ i , 0 );\\n          i++;}}\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1332592,
                "title": "easy-python-solution",
                "content": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i=0\\n        while i<len(arr):\\n\\n            if arr[i] ==0:\\n                arr.pop()\\n                arr.insert(i+1,0)\\n                i=i+2\\n            else:\\n                i=i+1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i=0\\n        while i<len(arr):\\n\\n            if arr[i] ==0:\\n                arr.pop()\\n                arr.insert(i+1,0)\\n                i=i+2\\n            else:\\n                i=i+1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1332132,
                "title": "java-solution-beginner-friendly-easy-to-follow",
                "content": "Here is my java solution that made the most sense to me after following the tutorial\\'s train of thinking. Any suggestions or thoughts? And may someone tell me the runtime of this.\\n```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        for (int i=0; i<arr.length-1; i++) {\\n            if(arr[i]==0){ \\n                for(int j=arr.length-1; j>i; j--){ \\n                    arr[j]=arr[j-1];\\n                }\\n                i+=1;\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        for (int i=0; i<arr.length-1; i++) {\\n            if(arr[i]==0){ \\n                for(int j=arr.length-1; j>i; j--){ \\n                    arr[j]=arr[j-1];\\n                }\\n                i+=1;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1300703,
                "title": "javascript-faster-than-96",
                "content": "Runtime: 80 ms, faster than 96.35% of JavaScript online submissions for Duplicate Zeros.\\nMemory Usage: 40.6 MB, less than 25.67% of JavaScript online submissions for Duplicate Zeros.\\n```\\n/**\\n * @param {number[]} arr\\n * @return {void} Do not return anything, modify arr in-place instead.\\n */\\nvar duplicateZeros = function(arr) {\\n    const res = []\\n    let count = 0\\n    let p = 0\\n    while (count < arr.length) {\\n        const cur = arr[p++]\\n        if (cur !== 0) {\\n            res.push(cur)\\n            count++\\n        } else {\\n            res.push(cur)\\n            res.push(cur)\\n            count += 2\\n        }\\n    }\\n    for (let i = 0; i < arr.length; i++) {\\n        arr[i] = res[i]\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} arr\\n * @return {void} Do not return anything, modify arr in-place instead.\\n */\\nvar duplicateZeros = function(arr) {\\n    const res = []\\n    let count = 0\\n    let p = 0\\n    while (count < arr.length) {\\n        const cur = arr[p++]\\n        if (cur !== 0) {\\n            res.push(cur)\\n            count++\\n        } else {\\n            res.push(cur)\\n            res.push(cur)\\n            count += 2\\n        }\\n    }\\n    for (let i = 0; i < arr.length; i++) {\\n        arr[i] = res[i]\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1295323,
                "title": "java-easy-to-understand-for-beginners-space-o-1",
                "content": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int len = arr.length;\\n        for(int i=0; i<len; i++){\\n            if(arr[i]==0){\\n                for(int j=len-1; j>i; j--){\\n                    arr[j] = arr[j-1];\\n                }\\n                i++;\\n            }\\n            \\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        int len = arr.length;\\n        for(int i=0; i<len; i++){\\n            if(arr[i]==0){\\n                for(int j=len-1; j>i; j--){\\n                    arr[j] = arr[j-1];\\n                }\\n                i++;\\n            }\\n            \\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1265119,
                "title": "simple-c-solution",
                "content": "simple c++ solution. Hoping it\\'s helpful for someone.\\n```\\nvoid duplicateZeros(vector<int> &arr)\\n{\\n    for (int i = 0; i < arr.size() - 1; i++)\\n    {\\n        if (arr[i] == 0)\\n        {\\n            for (int j = arr.size() - 1; j > i + 1; j--)\\n            {\\n                arr[j] = arr[j - 1];\\n            }\\n            arr[i + 1] = 0;\\n            i++;\\n        }\\n    }\\n    return;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nvoid duplicateZeros(vector<int> &arr)\\n{\\n    for (int i = 0; i < arr.size() - 1; i++)\\n    {\\n        if (arr[i] == 0)\\n        {\\n            for (int j = arr.size() - 1; j > i + 1; j--)\\n            {\\n                arr[j] = arr[j - 1];\\n            }\\n            arr[i + 1] = 0;\\n            i++;\\n        }\\n    }\\n    return;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1201839,
                "title": "python-simple-solution",
                "content": "\\'\\'\\'\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        i=0\\n        n = len(arr)\\n        while i < n-1:\\n            if arr[i]==0:\\n                arr[:] = arr[:i+1] + [0] + arr[i+1: n-1]\\n                i+=1\\n            i+=1\\n\\t\\t\\t\\n\\'\\'\\'",
                "solutionTags": [],
                "code": "\\'\\'\\'\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        i=0\\n        n = len(arr)\\n        while i < n-1:\\n            if arr[i]==0:\\n                arr[:] = arr[:i+1] + [0] + arr[i+1: n-1]\\n                i+=1\\n            i+=1\\n\\t\\t\\t\\n\\'\\'\\'",
                "codeTag": "Java"
            },
            {
                "id": 1181438,
                "title": "easy-python-solution",
                "content": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] == 0:\\n                arr.insert(i+1,0)\\n                arr.pop()\\n                i = i + 2\\n            else:\\n                i = i + 1\\n                \\n",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] == 0:\\n                arr.insert(i+1,0)\\n                arr.pop()\\n                i = i + 2\\n            else:\\n                i = i + 1\\n                \\n",
                "codeTag": "Java"
            },
            {
                "id": 1172179,
                "title": "python3-simple-and-easy-to-understand-solution-using-while-loop",
                "content": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] == 0:\\n                arr.insert(i+1,0)\\n                arr.pop()\\n                i += 2\\n            else:\\n                i += 1\\n```\\n**If you like this solution, please upvote for this**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] == 0:\\n                arr.insert(i+1,0)\\n                arr.pop()\\n                i += 2\\n            else:\\n                i += 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1143716,
                "title": "python-a-very-short-simple-and-intuitive-approach",
                "content": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        n = len(arr)\\n        i=0\\n        while(i<n):\\n            if arr[i] == 0:\\n                for j in range(n-1, i, -1):\\n                    arr[j] = arr[j-1]\\n                i=i+1\\n            i+=1\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        n = len(arr)\\n        i=0\\n        while(i<n):\\n            if arr[i] == 0:\\n                for j in range(n-1, i, -1):\\n                    arr[j] = arr[j-1]\\n                i=i+1\\n            i+=1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1143127,
                "title": "javascript-splice-pop",
                "content": "```\\nvar duplicateZeros = function (arr) {\\n  for (let i = 0; i < arr.length; i++) {\\n    if (arr[i] === 0) {\\n      arr.splice(i + 1, 0, 0);\\n      arr.pop();\\n      i++;\\n    }\\n  }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar duplicateZeros = function (arr) {\\n  for (let i = 0; i < arr.length; i++) {\\n    if (arr[i] === 0) {\\n      arr.splice(i + 1, 0, 0);\\n      arr.pop();\\n      i++;\\n    }\\n  }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1110170,
                "title": "rust-solution-o-n-no-extra-space-0ms-2-1mb",
                "content": "Notice: In Rust, we must convert usize to i32 to minus it, if not it will cause error.\\n```\\nimpl Solution {\\n    fn to_usize(value: i32) -> usize {\\n        value as usize\\n    }\\n    pub fn duplicate_zeros(arr: &mut Vec<i32>) {\\n        let mut pos_dups: i32 = 0;\\n        let mut len: i32 = (arr.len() as i32) - 1;\\n        let mut index: i32 = 0;\\n        while index <= len - pos_dups {\\n            if arr[index as usize] == 0 {\\n\\t\\t\\t\\t// Edge-case: Can\\'t add more item. Ex: [0], [0, 0, 3], etc.\\n                if index == len - pos_dups {\\n                    arr[len as usize] = 0;\\n                    len -= 1;\\n                    break;\\n                }\\n                pos_dups += 1;\\n            }\\n            index += 1;\\n        }\\n        \\n        let mut latest = len - pos_dups;\\n        let mut index = latest;\\n        while index >= 0 {\\n            if arr[index as usize] == 0 {\\n                arr[Solution::to_usize(index + pos_dups)] = 0;\\n                pos_dups -= 1;\\n                arr[Solution::to_usize(index + pos_dups)] = 0;\\n            } else {\\n                arr[Solution::to_usize(index + pos_dups)] = arr[index as usize];\\n            }\\n            index -= 1;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    fn to_usize(value: i32) -> usize {\\n        value as usize\\n    }\\n    pub fn duplicate_zeros(arr: &mut Vec<i32>) {\\n        let mut pos_dups: i32 = 0;\\n        let mut len: i32 = (arr.len() as i32) - 1;\\n        let mut index: i32 = 0;\\n        while index <= len - pos_dups {\\n            if arr[index as usize] == 0 {\\n\\t\\t\\t\\t// Edge-case: Can\\'t add more item. Ex: [0], [0, 0, 3], etc.\\n                if index == len - pos_dups {\\n                    arr[len as usize] = 0;\\n                    len -= 1;\\n                    break;\\n                }\\n                pos_dups += 1;\\n            }\\n            index += 1;\\n        }\\n        \\n        let mut latest = len - pos_dups;\\n        let mut index = latest;\\n        while index >= 0 {\\n            if arr[index as usize] == 0 {\\n                arr[Solution::to_usize(index + pos_dups)] = 0;\\n                pos_dups -= 1;\\n                arr[Solution::to_usize(index + pos_dups)] = 0;\\n            } else {\\n                arr[Solution::to_usize(index + pos_dups)] = arr[index as usize];\\n            }\\n            index -= 1;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1071588,
                "title": "easy-java-solution",
                "content": "```\\n\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        \\n        for(int i=0 ; i<arr.length-1 ; i++)\\n        {\\n            if(arr[i]==0)\\n            {\\n                for(int j=arr.length-1 ; j>i ; j--)\\n                {\\n                    arr[j]=arr[j-1];\\n                }\\n                arr[i+1]=0;\\n                i=i+1;\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\nclass Solution {\\n    public void duplicateZeros(int[] arr) {\\n        \\n        for(int i=0 ; i<arr.length-1 ; i++)\\n        {\\n            if(arr[i]==0)\\n            {\\n                for(int j=arr.length-1 ; j>i ; j--)\\n                {\\n                    arr[j]=arr[j-1];\\n                }\\n                arr[i+1]=0;\\n                i=i+1;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1033831,
                "title": "c-simple-o-n-2-time-o-1-space-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr)\\n    {\\n        int n = arr.size();\\n        for (int i = 0; i < n; ++i)\\n        {\\n            if (arr[i] == 0)\\n            {\\n                arr.insert(arr.begin() + i, 0);\\n                ++i;\\n            }\\n        }\\n        arr.erase(arr.begin() + n, arr.end());\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr)\\n    {\\n        int n = arr.size();\\n        for (int i = 0; i < n; ++i)\\n        {\\n            if (arr[i] == 0)\\n            {\\n                arr.insert(arr.begin() + i, 0);\\n                ++i;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 997995,
                "title": "go-solution",
                "content": "Simple solution:\\n```\\nfunc duplicateZeros(arr []int)  {\\n    zerosCount := 0\\n    for _, v := range arr {\\n        if v == 0 {\\n            zerosCount++\\n        }\\n    }\\n    \\n    for i := len(arr)-1; i>=0; i-- {\\n        if arr[i] == 0 {\\n            if i + zerosCount < len(arr) {\\n                arr[i+zerosCount] = 0\\n            }\\n            zerosCount--\\n        } \\n        if i + zerosCount < len(arr) {\\n            arr[i+zerosCount] = arr[i]\\n        }\\n    } \\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc duplicateZeros(arr []int)  {\\n    zerosCount := 0\\n    for _, v := range arr {\\n        if v == 0 {\\n            zerosCount++\\n        }\\n    }\\n    \\n    for i := len(arr)-1; i>=0; i-- {\\n        if arr[i] == 0 {\\n            if i + zerosCount < len(arr) {\\n                arr[i+zerosCount] = 0\\n            }\\n            zerosCount--\\n        } \\n        if i + zerosCount < len(arr) {\\n            arr[i+zerosCount] = arr[i]\\n        }\\n    } \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 972050,
                "title": "simple-python-code",
                "content": "loop through the list and i am doing this:\\n**when i find zero:** insert zero at next index and increament the index by two as we need to skip the next value. delete the last index from `arr`\\n\\n**when you dont find zero:** just move on to next value and increament the index by one\\n\\n\\n```\\nclass Solution(object):\\n    def duplicateZeros(self, arr):\\n        \"\"\"\\n        :type arr: List[int]\\n        :rtype: None Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] == 0:\\n                arr.insert(i + 1, 0)\\n                i += 1\\n                del arr[-1]\\n            i += 1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def duplicateZeros(self, arr):\\n        \"\"\"\\n        :type arr: List[int]\\n        :rtype: None Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] == 0:\\n                arr.insert(i + 1, 0)\\n                i += 1\\n                del arr[-1]\\n            i += 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 970218,
                "title": "simple-javascript-solution",
                "content": "```\\nvar duplicateZeros = function(arr) {\\n    for (var i = 0; i < arr.length; ++i) {\\n        if (arr[i] == 0) {\\n            arr.splice(arr.indexOf(0, i), 0, 0)\\n            arr.pop()\\n            i ++\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar duplicateZeros = function(arr) {\\n    for (var i = 0; i < arr.length; ++i) {\\n        if (arr[i] == 0) {\\n            arr.splice(arr.indexOf(0, i), 0, 0)\\n            arr.pop()\\n            i ++\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 970156,
                "title": "easy-python-code-w-video-explanation",
                "content": "Easy Python code w/ video explanation!\\n\\nhttps://www.youtube.com/watch?v=FPumX-iLtlo&t=182s\\n\\n```python\\nclass Solution:\\ndef duplicateZeros(self, arr: [int]) -> None:\\n        n = len(arr)\\n        zeros = arr.count(0)\\n\\n        i = n - 1\\n\\n        while i >= 0:\\n            if i + zeros < n:\\n                arr[i + zeros] = arr[i]\\n                if arr[i] == 0 and i + zeros - 1 >= 0:\\n                    zeros -= 1\\n                    arr[i + zeros] = 0\\n            elif arr[i] == 0:\\n                zeros -= 1\\n            else:\\n                arr[i] = 0\\n            i -= 1\\n\\n        return arr\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\ndef duplicateZeros(self, arr: [int]) -> None:\\n        n = len(arr)\\n        zeros = arr.count(0)\\n\\n        i = n - 1\\n\\n        while i >= 0:\\n            if i + zeros < n:\\n                arr[i + zeros] = arr[i]\\n                if arr[i] == 0 and i + zeros - 1 >= 0:\\n                    zeros -= 1\\n                    arr[i + zeros] = 0\\n            elif arr[i] == 0:\\n                zeros -= 1\\n            else:\\n                arr[i] = 0\\n            i -= 1\\n\\n        return arr\\n```",
                "codeTag": "Java"
            },
            {
                "id": 967481,
                "title": "python-eye-candy-solution",
                "content": "Looks like a bit repetitive code, but very easy on eyes and brain cells; song to ears, breeze to the face...\\n```\\ndef duplicateZeros(self, arr):\\n        \\n        numzeros = len([n for n in arr if n == 0])\\n        for i in reversed(range(len(arr))):\\n            \\n            if i + numzeros < len(arr):\\n                arr[i + numzeros] = arr[i]\\n                \\n            if arr[i] == 0:\\n                numzeros -= 1\\n                \\n                if i + numzeros < len(arr):\\n                    arr[i + numzeros] = arr[i]\\n```\\n\\nThis one below is a python specific solution since lists are flexible in python. Definitely more flexible than my back... Gosh I should start doing yoga again.\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] == 0:\\n                arr[i:i] = [0]\\n                arr.pop()\\n                i += 1\\n            i += 1\\n            \\n \\n\\n                    \\n```",
                "solutionTags": [],
                "code": "```\\ndef duplicateZeros(self, arr):\\n        \\n        numzeros = len([n for n in arr if n == 0])\\n        for i in reversed(range(len(arr))):\\n            \\n            if i + numzeros < len(arr):\\n                arr[i + numzeros] = arr[i]\\n                \\n            if arr[i] == 0:\\n                numzeros -= 1\\n                \\n                if i + numzeros < len(arr):\\n                    arr[i + numzeros] = arr[i]\\n```\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] == 0:\\n                arr[i:i] = [0]\\n                arr.pop()\\n                i += 1\\n            i += 1\\n            \\n \\n\\n                    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 902566,
                "title": "python-deque-a-single-forward-pass-time-o-n-space-o-n",
                "content": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:        \\n        d = deque()\\n        \\n        for idx, n in enumerate(arr):\\n            if n == 0:\\n                d.append(0)                \\n            d.append(n)    \\n            \\n            arr[idx] = d.popleft()\\n            \\n        return arr\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:        \\n        d = deque()\\n        \\n        for idx, n in enumerate(arr):\\n            if n == 0:\\n                d.append(0)                \\n            d.append(n)    \\n            \\n            arr[idx] = d.popleft()\\n            \\n        return arr\\n```",
                "codeTag": "Java"
            },
            {
                "id": 889298,
                "title": "simple-rust-implementation",
                "content": "Haven\\'t seen a rust tagged implementation in the dicussion so wanted to put my basic solution here. Been using leetcode exercises to learn rust and this one was suprisingly difficult if you are a rust newby and don\\'t realize you can\\'t modify iterator value in `for` loops. (like I didn\\'t for an embarssingly long amount of time). \\n\\n```rust\\nimpl Solution {\\n    pub fn duplicate_zeros(arr: &mut Vec<i32>) {\\n        let mut index = 0;\\n        let total_len = arr.len();\\n        \\n        while index < total_len {\\n            if (arr[index] == 0 && (index + 1) <= arr.len()) {\\n                arr.insert(index + 1, 0);\\n                arr.remove(arr.len() - 1);\\n                index += 2;\\n                continue;\\n            }\\n            \\n            index += 1;\\n        }\\n    }\\n}\\n```\\n\\nUsing rust vectors builtin `insert` and `remove` functions felt a bit like cheating the spirit of the exercise (which seems to be to implement those methods). However it seems implementing these requires(?) the use of rust\\'s `unsafe` keyword which I hadn\\'t had experince with yet. See The Rustonomicon section on [implementing vector insert and remove](https://doc.rust-lang.org/nomicon/vec-insert-remove.html) for more details.",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn duplicate_zeros(arr: &mut Vec<i32>) {\\n        let mut index = 0;\\n        let total_len = arr.len();\\n        \\n        while index < total_len {\\n            if (arr[index] == 0 && (index + 1) <= arr.len()) {\\n                arr.insert(index + 1, 0);\\n                arr.remove(arr.len() - 1);\\n                index += 2;\\n                continue;\\n            }\\n            \\n            index += 1;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 861379,
                "title": "different-python-solution-o-n-time-o-1-with-full-explantion-easier-to-understand",
                "content": "Let\\'s think about all possible scenarios. The tricky part is which one is the last element we need to fill in the array. For example, In `[1,0,2,0]`, we are looking for `2`\\'s position because `[1,0,0,2],0,0]`. In another example, `[1,0,2,0,1]`, we are looking for `0`\\'s position because `[1,0,0,2,0],0,1]`. If we loop from the beginning and increase `zeros` if we met a `0`, then there will be 2 possible scenarios:\\n1. `i+zeros == len(arr)-1`, which is the first example `[1,0,2,0,1]`->`[1,0,0,2],0,0]`. In this situation, `2+1=3`\\n2. `i+zeros > len(arr)-1`, which is the second example  `[1,0,2,0,1]`->`[1,0,0,2,0],0,1]`. In this situation, `3+2>4`. This is because `0` happens to be last one in the array, we increase `zeros` once we immediately found it.\\nBased on these two senarios, we determine the way how we filled in  from backwards. In the second scenario, we don\\'t need to replicate the last `0` .\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        zeros = 0\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                zeros += 1\\n            if i + zeros == len(arr)-1:\\n                last = i\\n                j = len(arr) - 1\\n                break            \\n            elif i + zeros > len(arr)-1:\\n                arr[-1] = arr[i]\\n                last = i - 1\\n                j = len(arr)-2\\n                break\\n        for i in range(last, -1, -1):\\n            if arr[i] == 0:\\n                arr[j] = 0\\n                arr[j-1] = 0\\n                j -= 2\\n            else:\\n                arr[j] = arr[i]\\n                j -= 1\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        zeros = 0\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                zeros += 1\\n            if i + zeros == len(arr)-1:\\n                last = i\\n                j = len(arr) - 1\\n                break            \\n            elif i + zeros > len(arr)-1:\\n                arr[-1] = arr[i]\\n                last = i - 1\\n                j = len(arr)-2\\n                break\\n        for i in range(last, -1, -1):\\n            if arr[i] == 0:\\n                arr[j] = 0\\n                arr[j-1] = 0\\n                j -= 2\\n            else:\\n                arr[j] = arr[i]\\n                j -= 1\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1568350,
                "content": [
                    {
                        "username": "reachapexadvert",
                        "content": "Bump THIS to MEDIUM :)"
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "It wasnt that hard to be honest. I have solved 60 easy questions and this was easy tooo"
                    },
                    {
                        "username": "sagarbarapatre",
                        "content": "I am really sorry to ask this kind of question in the discuss but i am not getting what do we exactly need to do in this question.\\nPlease don\\'t get offended. I am really sorry if someone feels bad.\\nPlease help me out"
                    },
                    {
                        "username": "nabeelcodes001",
                        "content": "Dont feel sorry bruh!!!!!!, If sm1 gets offended to help sm1, then their downfall is near,!!!!!!!!!!!!!!:)"
                    },
                    {
                        "username": "JDgoat",
                        "content": "What they asked is confused(I agree). So basically, they are asking you to put extra zero next to the zero that existed before. you can sort of see non zero number shifting to the right. Since the array size is fixed, some non zero number will be removed from the array if it is necessary(Ex. in the example 1, in the output, 5 is removed eventually due to extra zero is applied)"
                    },
                    {
                        "username": "KurtusKobeck",
                        "content": "Just a casual reminder: Read the description VERY carefully.\\nThis assignment specifically wants you to duplicate the zeros without changing the length of the vector!"
                    },
                    {
                        "username": "Jaber1028",
                        "content": "If you keep overriding every value with 0:\\nMake sure to add 1 to your loop variable after you do the first whole swap/insert. "
                    },
                    {
                        "username": "hemant_dhiman",
                        "content": "[@Jaber1028](/Jaber1028) Your tip helped 😁\n\ni know not the best but will reduce the runtime.\n\n```\nclass Solution {\n    public void shiftAndInsertAtIndex(int[] arr, int index){\n        if(index > 0){\n            for(int i = arr.length-1; i >= index; i--){\n                arr[i] = arr[i-1];\n            }\n            arr[index] = 0;\n        }\n    }\n    \n    public void duplicateZeros(int[] arr) {\n        for(int i = 0 ; i < arr.length ; i++) {\n            if (arr[i] == 0 && i < arr.length + 1) {\n                if (i == 0){\n                    shiftAndInsertAtIndex(arr, i+1);\n                }\n                shiftAndInsertAtIndex(arr, i);\n                i++;\n            }\n        }\n    }\n}\n```"
                    },
                    {
                        "username": "user5732L",
                        "content": "Thanks! :)"
                    },
                    {
                        "username": "Ali2023",
                        "content": "void duplicateZeros(List<int> arr) {\\n  int start = 0;\\n  int end = arr.length;\\n  while (start < end) {\\n    if (arr[start] == 0) {\\n      arr.removeLast();\\n      arr.insert(start, 0);\\n      start++;\\n    }\\n    start++;\\n  }\\n  print(arr);\\n} i used stack with pointers "
                    },
                    {
                        "username": "Mahesh_Bambhaniya",
                        "content": "i think leetcode provide to more explaination and give 3rd example to understand this question ."
                    },
                    {
                        "username": "undercovercoder_",
                        "content": " class Solution:\\n    def duplicateZeros(self, arr):\\n        x = arr.copy()\\n        length = len(x)\\n        for i in range(length):\\n            if x[i]==0:\\n                arr.insert(i+1,0)\\n        return arr[:length]\\n       \\nWhat\\'s the problem with this code?"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "This has one more logical problem: If you insert 0 at i+1 th in for loop, again in the next iteration it will find the inserted 0 and it will insert one more, so in this above code. Once it finds 0 rest all elements will be 0"
                    },
                    {
                        "username": "marwanmusa",
                        "content": "just don\\'t return anything and modify the inputted array instead"
                    },
                    {
                        "username": "aakriti__awasthi",
                        "content": "When i am using Arrays.toString it is returing the correct answer but when i am using return it is returning wrong output. why ??"
                    },
                    {
                        "username": "chloezhang1030",
                        "content": "I think we are modifying the `arr`, not returning one. The signature suggests that the return type is void."
                    },
                    {
                        "username": "beach_slav",
                        "content": "i also tried to declare the new array to the original array per Reference, and in intelliJ it functions perfectly when i print out the original array aswell. Strange"
                    },
                    {
                        "username": "beach_slav",
                        "content": "same problem over here"
                    },
                    {
                        "username": "sethupathi8",
                        "content": "Interesting!!\\n"
                    },
                    {
                        "username": "Denbruh",
                        "content": "Hi\\nCould anyone please help me out with this?\\n\\n `\\n\\n     void duplicateZeros(vector<int>& arr) {\\n        vector<int> newArr;\\n\\n        //arr = [1,0,2,3,0,4,5,0] (Input)\\n        for(int i = 0;i < arr.size();i++){\\n            newArr.push_back(arr[i]);\\n            if(arr[i] == 0){\\n                newArr.push_back(0);\\n            }\\n        }\\n        for(int j = 0;j < newArr.size() - arr.size();j++){\\n            newArr.pop_back();\\n        }\\n\\n        arr = newArr;\\n        //arr = [1,0,0,2,3,0,0,4,5] (Output)\\n        //Expected [1,0,0,2,3,0,0,4]\\n    }`\\n\\nIt works fine on Case 2 but it seems to forget to remove an element in Case 1\\nI\\'ve already used other successful methods but I still wanna know why this specific piece of code doesn\\'t work"
                    }
                ]
            },
            {
                "id": 1566971,
                "content": [
                    {
                        "username": "reachapexadvert",
                        "content": "Bump THIS to MEDIUM :)"
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "It wasnt that hard to be honest. I have solved 60 easy questions and this was easy tooo"
                    },
                    {
                        "username": "sagarbarapatre",
                        "content": "I am really sorry to ask this kind of question in the discuss but i am not getting what do we exactly need to do in this question.\\nPlease don\\'t get offended. I am really sorry if someone feels bad.\\nPlease help me out"
                    },
                    {
                        "username": "nabeelcodes001",
                        "content": "Dont feel sorry bruh!!!!!!, If sm1 gets offended to help sm1, then their downfall is near,!!!!!!!!!!!!!!:)"
                    },
                    {
                        "username": "JDgoat",
                        "content": "What they asked is confused(I agree). So basically, they are asking you to put extra zero next to the zero that existed before. you can sort of see non zero number shifting to the right. Since the array size is fixed, some non zero number will be removed from the array if it is necessary(Ex. in the example 1, in the output, 5 is removed eventually due to extra zero is applied)"
                    },
                    {
                        "username": "KurtusKobeck",
                        "content": "Just a casual reminder: Read the description VERY carefully.\\nThis assignment specifically wants you to duplicate the zeros without changing the length of the vector!"
                    },
                    {
                        "username": "Jaber1028",
                        "content": "If you keep overriding every value with 0:\\nMake sure to add 1 to your loop variable after you do the first whole swap/insert. "
                    },
                    {
                        "username": "hemant_dhiman",
                        "content": "[@Jaber1028](/Jaber1028) Your tip helped 😁\n\ni know not the best but will reduce the runtime.\n\n```\nclass Solution {\n    public void shiftAndInsertAtIndex(int[] arr, int index){\n        if(index > 0){\n            for(int i = arr.length-1; i >= index; i--){\n                arr[i] = arr[i-1];\n            }\n            arr[index] = 0;\n        }\n    }\n    \n    public void duplicateZeros(int[] arr) {\n        for(int i = 0 ; i < arr.length ; i++) {\n            if (arr[i] == 0 && i < arr.length + 1) {\n                if (i == 0){\n                    shiftAndInsertAtIndex(arr, i+1);\n                }\n                shiftAndInsertAtIndex(arr, i);\n                i++;\n            }\n        }\n    }\n}\n```"
                    },
                    {
                        "username": "user5732L",
                        "content": "Thanks! :)"
                    },
                    {
                        "username": "Ali2023",
                        "content": "void duplicateZeros(List<int> arr) {\\n  int start = 0;\\n  int end = arr.length;\\n  while (start < end) {\\n    if (arr[start] == 0) {\\n      arr.removeLast();\\n      arr.insert(start, 0);\\n      start++;\\n    }\\n    start++;\\n  }\\n  print(arr);\\n} i used stack with pointers "
                    },
                    {
                        "username": "Mahesh_Bambhaniya",
                        "content": "i think leetcode provide to more explaination and give 3rd example to understand this question ."
                    },
                    {
                        "username": "undercovercoder_",
                        "content": " class Solution:\\n    def duplicateZeros(self, arr):\\n        x = arr.copy()\\n        length = len(x)\\n        for i in range(length):\\n            if x[i]==0:\\n                arr.insert(i+1,0)\\n        return arr[:length]\\n       \\nWhat\\'s the problem with this code?"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "This has one more logical problem: If you insert 0 at i+1 th in for loop, again in the next iteration it will find the inserted 0 and it will insert one more, so in this above code. Once it finds 0 rest all elements will be 0"
                    },
                    {
                        "username": "marwanmusa",
                        "content": "just don\\'t return anything and modify the inputted array instead"
                    },
                    {
                        "username": "aakriti__awasthi",
                        "content": "When i am using Arrays.toString it is returing the correct answer but when i am using return it is returning wrong output. why ??"
                    },
                    {
                        "username": "chloezhang1030",
                        "content": "I think we are modifying the `arr`, not returning one. The signature suggests that the return type is void."
                    },
                    {
                        "username": "beach_slav",
                        "content": "i also tried to declare the new array to the original array per Reference, and in intelliJ it functions perfectly when i print out the original array aswell. Strange"
                    },
                    {
                        "username": "beach_slav",
                        "content": "same problem over here"
                    },
                    {
                        "username": "sethupathi8",
                        "content": "Interesting!!\\n"
                    },
                    {
                        "username": "Denbruh",
                        "content": "Hi\\nCould anyone please help me out with this?\\n\\n `\\n\\n     void duplicateZeros(vector<int>& arr) {\\n        vector<int> newArr;\\n\\n        //arr = [1,0,2,3,0,4,5,0] (Input)\\n        for(int i = 0;i < arr.size();i++){\\n            newArr.push_back(arr[i]);\\n            if(arr[i] == 0){\\n                newArr.push_back(0);\\n            }\\n        }\\n        for(int j = 0;j < newArr.size() - arr.size();j++){\\n            newArr.pop_back();\\n        }\\n\\n        arr = newArr;\\n        //arr = [1,0,0,2,3,0,0,4,5] (Output)\\n        //Expected [1,0,0,2,3,0,0,4]\\n    }`\\n\\nIt works fine on Case 2 but it seems to forget to remove an element in Case 1\\nI\\'ve already used other successful methods but I still wanna know why this specific piece of code doesn\\'t work"
                    }
                ]
            },
            {
                "id": 1740224,
                "content": [
                    {
                        "username": "reachapexadvert",
                        "content": "Bump THIS to MEDIUM :)"
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "It wasnt that hard to be honest. I have solved 60 easy questions and this was easy tooo"
                    },
                    {
                        "username": "sagarbarapatre",
                        "content": "I am really sorry to ask this kind of question in the discuss but i am not getting what do we exactly need to do in this question.\\nPlease don\\'t get offended. I am really sorry if someone feels bad.\\nPlease help me out"
                    },
                    {
                        "username": "nabeelcodes001",
                        "content": "Dont feel sorry bruh!!!!!!, If sm1 gets offended to help sm1, then their downfall is near,!!!!!!!!!!!!!!:)"
                    },
                    {
                        "username": "JDgoat",
                        "content": "What they asked is confused(I agree). So basically, they are asking you to put extra zero next to the zero that existed before. you can sort of see non zero number shifting to the right. Since the array size is fixed, some non zero number will be removed from the array if it is necessary(Ex. in the example 1, in the output, 5 is removed eventually due to extra zero is applied)"
                    },
                    {
                        "username": "KurtusKobeck",
                        "content": "Just a casual reminder: Read the description VERY carefully.\\nThis assignment specifically wants you to duplicate the zeros without changing the length of the vector!"
                    },
                    {
                        "username": "Jaber1028",
                        "content": "If you keep overriding every value with 0:\\nMake sure to add 1 to your loop variable after you do the first whole swap/insert. "
                    },
                    {
                        "username": "hemant_dhiman",
                        "content": "[@Jaber1028](/Jaber1028) Your tip helped 😁\n\ni know not the best but will reduce the runtime.\n\n```\nclass Solution {\n    public void shiftAndInsertAtIndex(int[] arr, int index){\n        if(index > 0){\n            for(int i = arr.length-1; i >= index; i--){\n                arr[i] = arr[i-1];\n            }\n            arr[index] = 0;\n        }\n    }\n    \n    public void duplicateZeros(int[] arr) {\n        for(int i = 0 ; i < arr.length ; i++) {\n            if (arr[i] == 0 && i < arr.length + 1) {\n                if (i == 0){\n                    shiftAndInsertAtIndex(arr, i+1);\n                }\n                shiftAndInsertAtIndex(arr, i);\n                i++;\n            }\n        }\n    }\n}\n```"
                    },
                    {
                        "username": "user5732L",
                        "content": "Thanks! :)"
                    },
                    {
                        "username": "Ali2023",
                        "content": "void duplicateZeros(List<int> arr) {\\n  int start = 0;\\n  int end = arr.length;\\n  while (start < end) {\\n    if (arr[start] == 0) {\\n      arr.removeLast();\\n      arr.insert(start, 0);\\n      start++;\\n    }\\n    start++;\\n  }\\n  print(arr);\\n} i used stack with pointers "
                    },
                    {
                        "username": "Mahesh_Bambhaniya",
                        "content": "i think leetcode provide to more explaination and give 3rd example to understand this question ."
                    },
                    {
                        "username": "undercovercoder_",
                        "content": " class Solution:\\n    def duplicateZeros(self, arr):\\n        x = arr.copy()\\n        length = len(x)\\n        for i in range(length):\\n            if x[i]==0:\\n                arr.insert(i+1,0)\\n        return arr[:length]\\n       \\nWhat\\'s the problem with this code?"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "This has one more logical problem: If you insert 0 at i+1 th in for loop, again in the next iteration it will find the inserted 0 and it will insert one more, so in this above code. Once it finds 0 rest all elements will be 0"
                    },
                    {
                        "username": "marwanmusa",
                        "content": "just don\\'t return anything and modify the inputted array instead"
                    },
                    {
                        "username": "aakriti__awasthi",
                        "content": "When i am using Arrays.toString it is returing the correct answer but when i am using return it is returning wrong output. why ??"
                    },
                    {
                        "username": "chloezhang1030",
                        "content": "I think we are modifying the `arr`, not returning one. The signature suggests that the return type is void."
                    },
                    {
                        "username": "beach_slav",
                        "content": "i also tried to declare the new array to the original array per Reference, and in intelliJ it functions perfectly when i print out the original array aswell. Strange"
                    },
                    {
                        "username": "beach_slav",
                        "content": "same problem over here"
                    },
                    {
                        "username": "sethupathi8",
                        "content": "Interesting!!\\n"
                    },
                    {
                        "username": "Denbruh",
                        "content": "Hi\\nCould anyone please help me out with this?\\n\\n `\\n\\n     void duplicateZeros(vector<int>& arr) {\\n        vector<int> newArr;\\n\\n        //arr = [1,0,2,3,0,4,5,0] (Input)\\n        for(int i = 0;i < arr.size();i++){\\n            newArr.push_back(arr[i]);\\n            if(arr[i] == 0){\\n                newArr.push_back(0);\\n            }\\n        }\\n        for(int j = 0;j < newArr.size() - arr.size();j++){\\n            newArr.pop_back();\\n        }\\n\\n        arr = newArr;\\n        //arr = [1,0,0,2,3,0,0,4,5] (Output)\\n        //Expected [1,0,0,2,3,0,0,4]\\n    }`\\n\\nIt works fine on Case 2 but it seems to forget to remove an element in Case 1\\nI\\'ve already used other successful methods but I still wanna know why this specific piece of code doesn\\'t work"
                    }
                ]
            },
            {
                "id": 1722995,
                "content": [
                    {
                        "username": "reachapexadvert",
                        "content": "Bump THIS to MEDIUM :)"
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "It wasnt that hard to be honest. I have solved 60 easy questions and this was easy tooo"
                    },
                    {
                        "username": "sagarbarapatre",
                        "content": "I am really sorry to ask this kind of question in the discuss but i am not getting what do we exactly need to do in this question.\\nPlease don\\'t get offended. I am really sorry if someone feels bad.\\nPlease help me out"
                    },
                    {
                        "username": "nabeelcodes001",
                        "content": "Dont feel sorry bruh!!!!!!, If sm1 gets offended to help sm1, then their downfall is near,!!!!!!!!!!!!!!:)"
                    },
                    {
                        "username": "JDgoat",
                        "content": "What they asked is confused(I agree). So basically, they are asking you to put extra zero next to the zero that existed before. you can sort of see non zero number shifting to the right. Since the array size is fixed, some non zero number will be removed from the array if it is necessary(Ex. in the example 1, in the output, 5 is removed eventually due to extra zero is applied)"
                    },
                    {
                        "username": "KurtusKobeck",
                        "content": "Just a casual reminder: Read the description VERY carefully.\\nThis assignment specifically wants you to duplicate the zeros without changing the length of the vector!"
                    },
                    {
                        "username": "Jaber1028",
                        "content": "If you keep overriding every value with 0:\\nMake sure to add 1 to your loop variable after you do the first whole swap/insert. "
                    },
                    {
                        "username": "hemant_dhiman",
                        "content": "[@Jaber1028](/Jaber1028) Your tip helped 😁\n\ni know not the best but will reduce the runtime.\n\n```\nclass Solution {\n    public void shiftAndInsertAtIndex(int[] arr, int index){\n        if(index > 0){\n            for(int i = arr.length-1; i >= index; i--){\n                arr[i] = arr[i-1];\n            }\n            arr[index] = 0;\n        }\n    }\n    \n    public void duplicateZeros(int[] arr) {\n        for(int i = 0 ; i < arr.length ; i++) {\n            if (arr[i] == 0 && i < arr.length + 1) {\n                if (i == 0){\n                    shiftAndInsertAtIndex(arr, i+1);\n                }\n                shiftAndInsertAtIndex(arr, i);\n                i++;\n            }\n        }\n    }\n}\n```"
                    },
                    {
                        "username": "user5732L",
                        "content": "Thanks! :)"
                    },
                    {
                        "username": "Ali2023",
                        "content": "void duplicateZeros(List<int> arr) {\\n  int start = 0;\\n  int end = arr.length;\\n  while (start < end) {\\n    if (arr[start] == 0) {\\n      arr.removeLast();\\n      arr.insert(start, 0);\\n      start++;\\n    }\\n    start++;\\n  }\\n  print(arr);\\n} i used stack with pointers "
                    },
                    {
                        "username": "Mahesh_Bambhaniya",
                        "content": "i think leetcode provide to more explaination and give 3rd example to understand this question ."
                    },
                    {
                        "username": "undercovercoder_",
                        "content": " class Solution:\\n    def duplicateZeros(self, arr):\\n        x = arr.copy()\\n        length = len(x)\\n        for i in range(length):\\n            if x[i]==0:\\n                arr.insert(i+1,0)\\n        return arr[:length]\\n       \\nWhat\\'s the problem with this code?"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "This has one more logical problem: If you insert 0 at i+1 th in for loop, again in the next iteration it will find the inserted 0 and it will insert one more, so in this above code. Once it finds 0 rest all elements will be 0"
                    },
                    {
                        "username": "marwanmusa",
                        "content": "just don\\'t return anything and modify the inputted array instead"
                    },
                    {
                        "username": "aakriti__awasthi",
                        "content": "When i am using Arrays.toString it is returing the correct answer but when i am using return it is returning wrong output. why ??"
                    },
                    {
                        "username": "chloezhang1030",
                        "content": "I think we are modifying the `arr`, not returning one. The signature suggests that the return type is void."
                    },
                    {
                        "username": "beach_slav",
                        "content": "i also tried to declare the new array to the original array per Reference, and in intelliJ it functions perfectly when i print out the original array aswell. Strange"
                    },
                    {
                        "username": "beach_slav",
                        "content": "same problem over here"
                    },
                    {
                        "username": "sethupathi8",
                        "content": "Interesting!!\\n"
                    },
                    {
                        "username": "Denbruh",
                        "content": "Hi\\nCould anyone please help me out with this?\\n\\n `\\n\\n     void duplicateZeros(vector<int>& arr) {\\n        vector<int> newArr;\\n\\n        //arr = [1,0,2,3,0,4,5,0] (Input)\\n        for(int i = 0;i < arr.size();i++){\\n            newArr.push_back(arr[i]);\\n            if(arr[i] == 0){\\n                newArr.push_back(0);\\n            }\\n        }\\n        for(int j = 0;j < newArr.size() - arr.size();j++){\\n            newArr.pop_back();\\n        }\\n\\n        arr = newArr;\\n        //arr = [1,0,0,2,3,0,0,4,5] (Output)\\n        //Expected [1,0,0,2,3,0,0,4]\\n    }`\\n\\nIt works fine on Case 2 but it seems to forget to remove an element in Case 1\\nI\\'ve already used other successful methods but I still wanna know why this specific piece of code doesn\\'t work"
                    }
                ]
            },
            {
                "id": 2000211,
                "content": [
                    {
                        "username": "reachapexadvert",
                        "content": "Bump THIS to MEDIUM :)"
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "It wasnt that hard to be honest. I have solved 60 easy questions and this was easy tooo"
                    },
                    {
                        "username": "sagarbarapatre",
                        "content": "I am really sorry to ask this kind of question in the discuss but i am not getting what do we exactly need to do in this question.\\nPlease don\\'t get offended. I am really sorry if someone feels bad.\\nPlease help me out"
                    },
                    {
                        "username": "nabeelcodes001",
                        "content": "Dont feel sorry bruh!!!!!!, If sm1 gets offended to help sm1, then their downfall is near,!!!!!!!!!!!!!!:)"
                    },
                    {
                        "username": "JDgoat",
                        "content": "What they asked is confused(I agree). So basically, they are asking you to put extra zero next to the zero that existed before. you can sort of see non zero number shifting to the right. Since the array size is fixed, some non zero number will be removed from the array if it is necessary(Ex. in the example 1, in the output, 5 is removed eventually due to extra zero is applied)"
                    },
                    {
                        "username": "KurtusKobeck",
                        "content": "Just a casual reminder: Read the description VERY carefully.\\nThis assignment specifically wants you to duplicate the zeros without changing the length of the vector!"
                    },
                    {
                        "username": "Jaber1028",
                        "content": "If you keep overriding every value with 0:\\nMake sure to add 1 to your loop variable after you do the first whole swap/insert. "
                    },
                    {
                        "username": "hemant_dhiman",
                        "content": "[@Jaber1028](/Jaber1028) Your tip helped 😁\n\ni know not the best but will reduce the runtime.\n\n```\nclass Solution {\n    public void shiftAndInsertAtIndex(int[] arr, int index){\n        if(index > 0){\n            for(int i = arr.length-1; i >= index; i--){\n                arr[i] = arr[i-1];\n            }\n            arr[index] = 0;\n        }\n    }\n    \n    public void duplicateZeros(int[] arr) {\n        for(int i = 0 ; i < arr.length ; i++) {\n            if (arr[i] == 0 && i < arr.length + 1) {\n                if (i == 0){\n                    shiftAndInsertAtIndex(arr, i+1);\n                }\n                shiftAndInsertAtIndex(arr, i);\n                i++;\n            }\n        }\n    }\n}\n```"
                    },
                    {
                        "username": "user5732L",
                        "content": "Thanks! :)"
                    },
                    {
                        "username": "Ali2023",
                        "content": "void duplicateZeros(List<int> arr) {\\n  int start = 0;\\n  int end = arr.length;\\n  while (start < end) {\\n    if (arr[start] == 0) {\\n      arr.removeLast();\\n      arr.insert(start, 0);\\n      start++;\\n    }\\n    start++;\\n  }\\n  print(arr);\\n} i used stack with pointers "
                    },
                    {
                        "username": "Mahesh_Bambhaniya",
                        "content": "i think leetcode provide to more explaination and give 3rd example to understand this question ."
                    },
                    {
                        "username": "undercovercoder_",
                        "content": " class Solution:\\n    def duplicateZeros(self, arr):\\n        x = arr.copy()\\n        length = len(x)\\n        for i in range(length):\\n            if x[i]==0:\\n                arr.insert(i+1,0)\\n        return arr[:length]\\n       \\nWhat\\'s the problem with this code?"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "This has one more logical problem: If you insert 0 at i+1 th in for loop, again in the next iteration it will find the inserted 0 and it will insert one more, so in this above code. Once it finds 0 rest all elements will be 0"
                    },
                    {
                        "username": "marwanmusa",
                        "content": "just don\\'t return anything and modify the inputted array instead"
                    },
                    {
                        "username": "aakriti__awasthi",
                        "content": "When i am using Arrays.toString it is returing the correct answer but when i am using return it is returning wrong output. why ??"
                    },
                    {
                        "username": "chloezhang1030",
                        "content": "I think we are modifying the `arr`, not returning one. The signature suggests that the return type is void."
                    },
                    {
                        "username": "beach_slav",
                        "content": "i also tried to declare the new array to the original array per Reference, and in intelliJ it functions perfectly when i print out the original array aswell. Strange"
                    },
                    {
                        "username": "beach_slav",
                        "content": "same problem over here"
                    },
                    {
                        "username": "sethupathi8",
                        "content": "Interesting!!\\n"
                    },
                    {
                        "username": "Denbruh",
                        "content": "Hi\\nCould anyone please help me out with this?\\n\\n `\\n\\n     void duplicateZeros(vector<int>& arr) {\\n        vector<int> newArr;\\n\\n        //arr = [1,0,2,3,0,4,5,0] (Input)\\n        for(int i = 0;i < arr.size();i++){\\n            newArr.push_back(arr[i]);\\n            if(arr[i] == 0){\\n                newArr.push_back(0);\\n            }\\n        }\\n        for(int j = 0;j < newArr.size() - arr.size();j++){\\n            newArr.pop_back();\\n        }\\n\\n        arr = newArr;\\n        //arr = [1,0,0,2,3,0,0,4,5] (Output)\\n        //Expected [1,0,0,2,3,0,0,4]\\n    }`\\n\\nIt works fine on Case 2 but it seems to forget to remove an element in Case 1\\nI\\'ve already used other successful methods but I still wanna know why this specific piece of code doesn\\'t work"
                    }
                ]
            },
            {
                "id": 1876680,
                "content": [
                    {
                        "username": "reachapexadvert",
                        "content": "Bump THIS to MEDIUM :)"
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "It wasnt that hard to be honest. I have solved 60 easy questions and this was easy tooo"
                    },
                    {
                        "username": "sagarbarapatre",
                        "content": "I am really sorry to ask this kind of question in the discuss but i am not getting what do we exactly need to do in this question.\\nPlease don\\'t get offended. I am really sorry if someone feels bad.\\nPlease help me out"
                    },
                    {
                        "username": "nabeelcodes001",
                        "content": "Dont feel sorry bruh!!!!!!, If sm1 gets offended to help sm1, then their downfall is near,!!!!!!!!!!!!!!:)"
                    },
                    {
                        "username": "JDgoat",
                        "content": "What they asked is confused(I agree). So basically, they are asking you to put extra zero next to the zero that existed before. you can sort of see non zero number shifting to the right. Since the array size is fixed, some non zero number will be removed from the array if it is necessary(Ex. in the example 1, in the output, 5 is removed eventually due to extra zero is applied)"
                    },
                    {
                        "username": "KurtusKobeck",
                        "content": "Just a casual reminder: Read the description VERY carefully.\\nThis assignment specifically wants you to duplicate the zeros without changing the length of the vector!"
                    },
                    {
                        "username": "Jaber1028",
                        "content": "If you keep overriding every value with 0:\\nMake sure to add 1 to your loop variable after you do the first whole swap/insert. "
                    },
                    {
                        "username": "hemant_dhiman",
                        "content": "[@Jaber1028](/Jaber1028) Your tip helped 😁\n\ni know not the best but will reduce the runtime.\n\n```\nclass Solution {\n    public void shiftAndInsertAtIndex(int[] arr, int index){\n        if(index > 0){\n            for(int i = arr.length-1; i >= index; i--){\n                arr[i] = arr[i-1];\n            }\n            arr[index] = 0;\n        }\n    }\n    \n    public void duplicateZeros(int[] arr) {\n        for(int i = 0 ; i < arr.length ; i++) {\n            if (arr[i] == 0 && i < arr.length + 1) {\n                if (i == 0){\n                    shiftAndInsertAtIndex(arr, i+1);\n                }\n                shiftAndInsertAtIndex(arr, i);\n                i++;\n            }\n        }\n    }\n}\n```"
                    },
                    {
                        "username": "user5732L",
                        "content": "Thanks! :)"
                    },
                    {
                        "username": "Ali2023",
                        "content": "void duplicateZeros(List<int> arr) {\\n  int start = 0;\\n  int end = arr.length;\\n  while (start < end) {\\n    if (arr[start] == 0) {\\n      arr.removeLast();\\n      arr.insert(start, 0);\\n      start++;\\n    }\\n    start++;\\n  }\\n  print(arr);\\n} i used stack with pointers "
                    },
                    {
                        "username": "Mahesh_Bambhaniya",
                        "content": "i think leetcode provide to more explaination and give 3rd example to understand this question ."
                    },
                    {
                        "username": "undercovercoder_",
                        "content": " class Solution:\\n    def duplicateZeros(self, arr):\\n        x = arr.copy()\\n        length = len(x)\\n        for i in range(length):\\n            if x[i]==0:\\n                arr.insert(i+1,0)\\n        return arr[:length]\\n       \\nWhat\\'s the problem with this code?"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "This has one more logical problem: If you insert 0 at i+1 th in for loop, again in the next iteration it will find the inserted 0 and it will insert one more, so in this above code. Once it finds 0 rest all elements will be 0"
                    },
                    {
                        "username": "marwanmusa",
                        "content": "just don\\'t return anything and modify the inputted array instead"
                    },
                    {
                        "username": "aakriti__awasthi",
                        "content": "When i am using Arrays.toString it is returing the correct answer but when i am using return it is returning wrong output. why ??"
                    },
                    {
                        "username": "chloezhang1030",
                        "content": "I think we are modifying the `arr`, not returning one. The signature suggests that the return type is void."
                    },
                    {
                        "username": "beach_slav",
                        "content": "i also tried to declare the new array to the original array per Reference, and in intelliJ it functions perfectly when i print out the original array aswell. Strange"
                    },
                    {
                        "username": "beach_slav",
                        "content": "same problem over here"
                    },
                    {
                        "username": "sethupathi8",
                        "content": "Interesting!!\\n"
                    },
                    {
                        "username": "Denbruh",
                        "content": "Hi\\nCould anyone please help me out with this?\\n\\n `\\n\\n     void duplicateZeros(vector<int>& arr) {\\n        vector<int> newArr;\\n\\n        //arr = [1,0,2,3,0,4,5,0] (Input)\\n        for(int i = 0;i < arr.size();i++){\\n            newArr.push_back(arr[i]);\\n            if(arr[i] == 0){\\n                newArr.push_back(0);\\n            }\\n        }\\n        for(int j = 0;j < newArr.size() - arr.size();j++){\\n            newArr.pop_back();\\n        }\\n\\n        arr = newArr;\\n        //arr = [1,0,0,2,3,0,0,4,5] (Output)\\n        //Expected [1,0,0,2,3,0,0,4]\\n    }`\\n\\nIt works fine on Case 2 but it seems to forget to remove an element in Case 1\\nI\\'ve already used other successful methods but I still wanna know why this specific piece of code doesn\\'t work"
                    }
                ]
            },
            {
                "id": 1822838,
                "content": [
                    {
                        "username": "reachapexadvert",
                        "content": "Bump THIS to MEDIUM :)"
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "It wasnt that hard to be honest. I have solved 60 easy questions and this was easy tooo"
                    },
                    {
                        "username": "sagarbarapatre",
                        "content": "I am really sorry to ask this kind of question in the discuss but i am not getting what do we exactly need to do in this question.\\nPlease don\\'t get offended. I am really sorry if someone feels bad.\\nPlease help me out"
                    },
                    {
                        "username": "nabeelcodes001",
                        "content": "Dont feel sorry bruh!!!!!!, If sm1 gets offended to help sm1, then their downfall is near,!!!!!!!!!!!!!!:)"
                    },
                    {
                        "username": "JDgoat",
                        "content": "What they asked is confused(I agree). So basically, they are asking you to put extra zero next to the zero that existed before. you can sort of see non zero number shifting to the right. Since the array size is fixed, some non zero number will be removed from the array if it is necessary(Ex. in the example 1, in the output, 5 is removed eventually due to extra zero is applied)"
                    },
                    {
                        "username": "KurtusKobeck",
                        "content": "Just a casual reminder: Read the description VERY carefully.\\nThis assignment specifically wants you to duplicate the zeros without changing the length of the vector!"
                    },
                    {
                        "username": "Jaber1028",
                        "content": "If you keep overriding every value with 0:\\nMake sure to add 1 to your loop variable after you do the first whole swap/insert. "
                    },
                    {
                        "username": "hemant_dhiman",
                        "content": "[@Jaber1028](/Jaber1028) Your tip helped 😁\n\ni know not the best but will reduce the runtime.\n\n```\nclass Solution {\n    public void shiftAndInsertAtIndex(int[] arr, int index){\n        if(index > 0){\n            for(int i = arr.length-1; i >= index; i--){\n                arr[i] = arr[i-1];\n            }\n            arr[index] = 0;\n        }\n    }\n    \n    public void duplicateZeros(int[] arr) {\n        for(int i = 0 ; i < arr.length ; i++) {\n            if (arr[i] == 0 && i < arr.length + 1) {\n                if (i == 0){\n                    shiftAndInsertAtIndex(arr, i+1);\n                }\n                shiftAndInsertAtIndex(arr, i);\n                i++;\n            }\n        }\n    }\n}\n```"
                    },
                    {
                        "username": "user5732L",
                        "content": "Thanks! :)"
                    },
                    {
                        "username": "Ali2023",
                        "content": "void duplicateZeros(List<int> arr) {\\n  int start = 0;\\n  int end = arr.length;\\n  while (start < end) {\\n    if (arr[start] == 0) {\\n      arr.removeLast();\\n      arr.insert(start, 0);\\n      start++;\\n    }\\n    start++;\\n  }\\n  print(arr);\\n} i used stack with pointers "
                    },
                    {
                        "username": "Mahesh_Bambhaniya",
                        "content": "i think leetcode provide to more explaination and give 3rd example to understand this question ."
                    },
                    {
                        "username": "undercovercoder_",
                        "content": " class Solution:\\n    def duplicateZeros(self, arr):\\n        x = arr.copy()\\n        length = len(x)\\n        for i in range(length):\\n            if x[i]==0:\\n                arr.insert(i+1,0)\\n        return arr[:length]\\n       \\nWhat\\'s the problem with this code?"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "This has one more logical problem: If you insert 0 at i+1 th in for loop, again in the next iteration it will find the inserted 0 and it will insert one more, so in this above code. Once it finds 0 rest all elements will be 0"
                    },
                    {
                        "username": "marwanmusa",
                        "content": "just don\\'t return anything and modify the inputted array instead"
                    },
                    {
                        "username": "aakriti__awasthi",
                        "content": "When i am using Arrays.toString it is returing the correct answer but when i am using return it is returning wrong output. why ??"
                    },
                    {
                        "username": "chloezhang1030",
                        "content": "I think we are modifying the `arr`, not returning one. The signature suggests that the return type is void."
                    },
                    {
                        "username": "beach_slav",
                        "content": "i also tried to declare the new array to the original array per Reference, and in intelliJ it functions perfectly when i print out the original array aswell. Strange"
                    },
                    {
                        "username": "beach_slav",
                        "content": "same problem over here"
                    },
                    {
                        "username": "sethupathi8",
                        "content": "Interesting!!\\n"
                    },
                    {
                        "username": "Denbruh",
                        "content": "Hi\\nCould anyone please help me out with this?\\n\\n `\\n\\n     void duplicateZeros(vector<int>& arr) {\\n        vector<int> newArr;\\n\\n        //arr = [1,0,2,3,0,4,5,0] (Input)\\n        for(int i = 0;i < arr.size();i++){\\n            newArr.push_back(arr[i]);\\n            if(arr[i] == 0){\\n                newArr.push_back(0);\\n            }\\n        }\\n        for(int j = 0;j < newArr.size() - arr.size();j++){\\n            newArr.pop_back();\\n        }\\n\\n        arr = newArr;\\n        //arr = [1,0,0,2,3,0,0,4,5] (Output)\\n        //Expected [1,0,0,2,3,0,0,4]\\n    }`\\n\\nIt works fine on Case 2 but it seems to forget to remove an element in Case 1\\nI\\'ve already used other successful methods but I still wanna know why this specific piece of code doesn\\'t work"
                    }
                ]
            },
            {
                "id": 1777965,
                "content": [
                    {
                        "username": "reachapexadvert",
                        "content": "Bump THIS to MEDIUM :)"
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "It wasnt that hard to be honest. I have solved 60 easy questions and this was easy tooo"
                    },
                    {
                        "username": "sagarbarapatre",
                        "content": "I am really sorry to ask this kind of question in the discuss but i am not getting what do we exactly need to do in this question.\\nPlease don\\'t get offended. I am really sorry if someone feels bad.\\nPlease help me out"
                    },
                    {
                        "username": "nabeelcodes001",
                        "content": "Dont feel sorry bruh!!!!!!, If sm1 gets offended to help sm1, then their downfall is near,!!!!!!!!!!!!!!:)"
                    },
                    {
                        "username": "JDgoat",
                        "content": "What they asked is confused(I agree). So basically, they are asking you to put extra zero next to the zero that existed before. you can sort of see non zero number shifting to the right. Since the array size is fixed, some non zero number will be removed from the array if it is necessary(Ex. in the example 1, in the output, 5 is removed eventually due to extra zero is applied)"
                    },
                    {
                        "username": "KurtusKobeck",
                        "content": "Just a casual reminder: Read the description VERY carefully.\\nThis assignment specifically wants you to duplicate the zeros without changing the length of the vector!"
                    },
                    {
                        "username": "Jaber1028",
                        "content": "If you keep overriding every value with 0:\\nMake sure to add 1 to your loop variable after you do the first whole swap/insert. "
                    },
                    {
                        "username": "hemant_dhiman",
                        "content": "[@Jaber1028](/Jaber1028) Your tip helped 😁\n\ni know not the best but will reduce the runtime.\n\n```\nclass Solution {\n    public void shiftAndInsertAtIndex(int[] arr, int index){\n        if(index > 0){\n            for(int i = arr.length-1; i >= index; i--){\n                arr[i] = arr[i-1];\n            }\n            arr[index] = 0;\n        }\n    }\n    \n    public void duplicateZeros(int[] arr) {\n        for(int i = 0 ; i < arr.length ; i++) {\n            if (arr[i] == 0 && i < arr.length + 1) {\n                if (i == 0){\n                    shiftAndInsertAtIndex(arr, i+1);\n                }\n                shiftAndInsertAtIndex(arr, i);\n                i++;\n            }\n        }\n    }\n}\n```"
                    },
                    {
                        "username": "user5732L",
                        "content": "Thanks! :)"
                    },
                    {
                        "username": "Ali2023",
                        "content": "void duplicateZeros(List<int> arr) {\\n  int start = 0;\\n  int end = arr.length;\\n  while (start < end) {\\n    if (arr[start] == 0) {\\n      arr.removeLast();\\n      arr.insert(start, 0);\\n      start++;\\n    }\\n    start++;\\n  }\\n  print(arr);\\n} i used stack with pointers "
                    },
                    {
                        "username": "Mahesh_Bambhaniya",
                        "content": "i think leetcode provide to more explaination and give 3rd example to understand this question ."
                    },
                    {
                        "username": "undercovercoder_",
                        "content": " class Solution:\\n    def duplicateZeros(self, arr):\\n        x = arr.copy()\\n        length = len(x)\\n        for i in range(length):\\n            if x[i]==0:\\n                arr.insert(i+1,0)\\n        return arr[:length]\\n       \\nWhat\\'s the problem with this code?"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "This has one more logical problem: If you insert 0 at i+1 th in for loop, again in the next iteration it will find the inserted 0 and it will insert one more, so in this above code. Once it finds 0 rest all elements will be 0"
                    },
                    {
                        "username": "marwanmusa",
                        "content": "just don\\'t return anything and modify the inputted array instead"
                    },
                    {
                        "username": "aakriti__awasthi",
                        "content": "When i am using Arrays.toString it is returing the correct answer but when i am using return it is returning wrong output. why ??"
                    },
                    {
                        "username": "chloezhang1030",
                        "content": "I think we are modifying the `arr`, not returning one. The signature suggests that the return type is void."
                    },
                    {
                        "username": "beach_slav",
                        "content": "i also tried to declare the new array to the original array per Reference, and in intelliJ it functions perfectly when i print out the original array aswell. Strange"
                    },
                    {
                        "username": "beach_slav",
                        "content": "same problem over here"
                    },
                    {
                        "username": "sethupathi8",
                        "content": "Interesting!!\\n"
                    },
                    {
                        "username": "Denbruh",
                        "content": "Hi\\nCould anyone please help me out with this?\\n\\n `\\n\\n     void duplicateZeros(vector<int>& arr) {\\n        vector<int> newArr;\\n\\n        //arr = [1,0,2,3,0,4,5,0] (Input)\\n        for(int i = 0;i < arr.size();i++){\\n            newArr.push_back(arr[i]);\\n            if(arr[i] == 0){\\n                newArr.push_back(0);\\n            }\\n        }\\n        for(int j = 0;j < newArr.size() - arr.size();j++){\\n            newArr.pop_back();\\n        }\\n\\n        arr = newArr;\\n        //arr = [1,0,0,2,3,0,0,4,5] (Output)\\n        //Expected [1,0,0,2,3,0,0,4]\\n    }`\\n\\nIt works fine on Case 2 but it seems to forget to remove an element in Case 1\\nI\\'ve already used other successful methods but I still wanna know why this specific piece of code doesn\\'t work"
                    }
                ]
            },
            {
                "id": 2069360,
                "content": [
                    {
                        "username": "reachapexadvert",
                        "content": "Bump THIS to MEDIUM :)"
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "It wasnt that hard to be honest. I have solved 60 easy questions and this was easy tooo"
                    },
                    {
                        "username": "sagarbarapatre",
                        "content": "I am really sorry to ask this kind of question in the discuss but i am not getting what do we exactly need to do in this question.\\nPlease don\\'t get offended. I am really sorry if someone feels bad.\\nPlease help me out"
                    },
                    {
                        "username": "nabeelcodes001",
                        "content": "Dont feel sorry bruh!!!!!!, If sm1 gets offended to help sm1, then their downfall is near,!!!!!!!!!!!!!!:)"
                    },
                    {
                        "username": "JDgoat",
                        "content": "What they asked is confused(I agree). So basically, they are asking you to put extra zero next to the zero that existed before. you can sort of see non zero number shifting to the right. Since the array size is fixed, some non zero number will be removed from the array if it is necessary(Ex. in the example 1, in the output, 5 is removed eventually due to extra zero is applied)"
                    },
                    {
                        "username": "KurtusKobeck",
                        "content": "Just a casual reminder: Read the description VERY carefully.\\nThis assignment specifically wants you to duplicate the zeros without changing the length of the vector!"
                    },
                    {
                        "username": "Jaber1028",
                        "content": "If you keep overriding every value with 0:\\nMake sure to add 1 to your loop variable after you do the first whole swap/insert. "
                    },
                    {
                        "username": "hemant_dhiman",
                        "content": "[@Jaber1028](/Jaber1028) Your tip helped 😁\n\ni know not the best but will reduce the runtime.\n\n```\nclass Solution {\n    public void shiftAndInsertAtIndex(int[] arr, int index){\n        if(index > 0){\n            for(int i = arr.length-1; i >= index; i--){\n                arr[i] = arr[i-1];\n            }\n            arr[index] = 0;\n        }\n    }\n    \n    public void duplicateZeros(int[] arr) {\n        for(int i = 0 ; i < arr.length ; i++) {\n            if (arr[i] == 0 && i < arr.length + 1) {\n                if (i == 0){\n                    shiftAndInsertAtIndex(arr, i+1);\n                }\n                shiftAndInsertAtIndex(arr, i);\n                i++;\n            }\n        }\n    }\n}\n```"
                    },
                    {
                        "username": "user5732L",
                        "content": "Thanks! :)"
                    },
                    {
                        "username": "Ali2023",
                        "content": "void duplicateZeros(List<int> arr) {\\n  int start = 0;\\n  int end = arr.length;\\n  while (start < end) {\\n    if (arr[start] == 0) {\\n      arr.removeLast();\\n      arr.insert(start, 0);\\n      start++;\\n    }\\n    start++;\\n  }\\n  print(arr);\\n} i used stack with pointers "
                    },
                    {
                        "username": "Mahesh_Bambhaniya",
                        "content": "i think leetcode provide to more explaination and give 3rd example to understand this question ."
                    },
                    {
                        "username": "undercovercoder_",
                        "content": " class Solution:\\n    def duplicateZeros(self, arr):\\n        x = arr.copy()\\n        length = len(x)\\n        for i in range(length):\\n            if x[i]==0:\\n                arr.insert(i+1,0)\\n        return arr[:length]\\n       \\nWhat\\'s the problem with this code?"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "This has one more logical problem: If you insert 0 at i+1 th in for loop, again in the next iteration it will find the inserted 0 and it will insert one more, so in this above code. Once it finds 0 rest all elements will be 0"
                    },
                    {
                        "username": "marwanmusa",
                        "content": "just don\\'t return anything and modify the inputted array instead"
                    },
                    {
                        "username": "aakriti__awasthi",
                        "content": "When i am using Arrays.toString it is returing the correct answer but when i am using return it is returning wrong output. why ??"
                    },
                    {
                        "username": "chloezhang1030",
                        "content": "I think we are modifying the `arr`, not returning one. The signature suggests that the return type is void."
                    },
                    {
                        "username": "beach_slav",
                        "content": "i also tried to declare the new array to the original array per Reference, and in intelliJ it functions perfectly when i print out the original array aswell. Strange"
                    },
                    {
                        "username": "beach_slav",
                        "content": "same problem over here"
                    },
                    {
                        "username": "sethupathi8",
                        "content": "Interesting!!\\n"
                    },
                    {
                        "username": "Denbruh",
                        "content": "Hi\\nCould anyone please help me out with this?\\n\\n `\\n\\n     void duplicateZeros(vector<int>& arr) {\\n        vector<int> newArr;\\n\\n        //arr = [1,0,2,3,0,4,5,0] (Input)\\n        for(int i = 0;i < arr.size();i++){\\n            newArr.push_back(arr[i]);\\n            if(arr[i] == 0){\\n                newArr.push_back(0);\\n            }\\n        }\\n        for(int j = 0;j < newArr.size() - arr.size();j++){\\n            newArr.pop_back();\\n        }\\n\\n        arr = newArr;\\n        //arr = [1,0,0,2,3,0,0,4,5] (Output)\\n        //Expected [1,0,0,2,3,0,0,4]\\n    }`\\n\\nIt works fine on Case 2 but it seems to forget to remove an element in Case 1\\nI\\'ve already used other successful methods but I still wanna know why this specific piece of code doesn\\'t work"
                    }
                ]
            },
            {
                "id": 2048224,
                "content": [
                    {
                        "username": "reachapexadvert",
                        "content": "Bump THIS to MEDIUM :)"
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "It wasnt that hard to be honest. I have solved 60 easy questions and this was easy tooo"
                    },
                    {
                        "username": "sagarbarapatre",
                        "content": "I am really sorry to ask this kind of question in the discuss but i am not getting what do we exactly need to do in this question.\\nPlease don\\'t get offended. I am really sorry if someone feels bad.\\nPlease help me out"
                    },
                    {
                        "username": "nabeelcodes001",
                        "content": "Dont feel sorry bruh!!!!!!, If sm1 gets offended to help sm1, then their downfall is near,!!!!!!!!!!!!!!:)"
                    },
                    {
                        "username": "JDgoat",
                        "content": "What they asked is confused(I agree). So basically, they are asking you to put extra zero next to the zero that existed before. you can sort of see non zero number shifting to the right. Since the array size is fixed, some non zero number will be removed from the array if it is necessary(Ex. in the example 1, in the output, 5 is removed eventually due to extra zero is applied)"
                    },
                    {
                        "username": "KurtusKobeck",
                        "content": "Just a casual reminder: Read the description VERY carefully.\\nThis assignment specifically wants you to duplicate the zeros without changing the length of the vector!"
                    },
                    {
                        "username": "Jaber1028",
                        "content": "If you keep overriding every value with 0:\\nMake sure to add 1 to your loop variable after you do the first whole swap/insert. "
                    },
                    {
                        "username": "hemant_dhiman",
                        "content": "[@Jaber1028](/Jaber1028) Your tip helped 😁\n\ni know not the best but will reduce the runtime.\n\n```\nclass Solution {\n    public void shiftAndInsertAtIndex(int[] arr, int index){\n        if(index > 0){\n            for(int i = arr.length-1; i >= index; i--){\n                arr[i] = arr[i-1];\n            }\n            arr[index] = 0;\n        }\n    }\n    \n    public void duplicateZeros(int[] arr) {\n        for(int i = 0 ; i < arr.length ; i++) {\n            if (arr[i] == 0 && i < arr.length + 1) {\n                if (i == 0){\n                    shiftAndInsertAtIndex(arr, i+1);\n                }\n                shiftAndInsertAtIndex(arr, i);\n                i++;\n            }\n        }\n    }\n}\n```"
                    },
                    {
                        "username": "user5732L",
                        "content": "Thanks! :)"
                    },
                    {
                        "username": "Ali2023",
                        "content": "void duplicateZeros(List<int> arr) {\\n  int start = 0;\\n  int end = arr.length;\\n  while (start < end) {\\n    if (arr[start] == 0) {\\n      arr.removeLast();\\n      arr.insert(start, 0);\\n      start++;\\n    }\\n    start++;\\n  }\\n  print(arr);\\n} i used stack with pointers "
                    },
                    {
                        "username": "Mahesh_Bambhaniya",
                        "content": "i think leetcode provide to more explaination and give 3rd example to understand this question ."
                    },
                    {
                        "username": "undercovercoder_",
                        "content": " class Solution:\\n    def duplicateZeros(self, arr):\\n        x = arr.copy()\\n        length = len(x)\\n        for i in range(length):\\n            if x[i]==0:\\n                arr.insert(i+1,0)\\n        return arr[:length]\\n       \\nWhat\\'s the problem with this code?"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "This has one more logical problem: If you insert 0 at i+1 th in for loop, again in the next iteration it will find the inserted 0 and it will insert one more, so in this above code. Once it finds 0 rest all elements will be 0"
                    },
                    {
                        "username": "marwanmusa",
                        "content": "just don\\'t return anything and modify the inputted array instead"
                    },
                    {
                        "username": "aakriti__awasthi",
                        "content": "When i am using Arrays.toString it is returing the correct answer but when i am using return it is returning wrong output. why ??"
                    },
                    {
                        "username": "chloezhang1030",
                        "content": "I think we are modifying the `arr`, not returning one. The signature suggests that the return type is void."
                    },
                    {
                        "username": "beach_slav",
                        "content": "i also tried to declare the new array to the original array per Reference, and in intelliJ it functions perfectly when i print out the original array aswell. Strange"
                    },
                    {
                        "username": "beach_slav",
                        "content": "same problem over here"
                    },
                    {
                        "username": "sethupathi8",
                        "content": "Interesting!!\\n"
                    },
                    {
                        "username": "Denbruh",
                        "content": "Hi\\nCould anyone please help me out with this?\\n\\n `\\n\\n     void duplicateZeros(vector<int>& arr) {\\n        vector<int> newArr;\\n\\n        //arr = [1,0,2,3,0,4,5,0] (Input)\\n        for(int i = 0;i < arr.size();i++){\\n            newArr.push_back(arr[i]);\\n            if(arr[i] == 0){\\n                newArr.push_back(0);\\n            }\\n        }\\n        for(int j = 0;j < newArr.size() - arr.size();j++){\\n            newArr.pop_back();\\n        }\\n\\n        arr = newArr;\\n        //arr = [1,0,0,2,3,0,0,4,5] (Output)\\n        //Expected [1,0,0,2,3,0,0,4]\\n    }`\\n\\nIt works fine on Case 2 but it seems to forget to remove an element in Case 1\\nI\\'ve already used other successful methods but I still wanna know why this specific piece of code doesn\\'t work"
                    }
                ]
            },
            {
                "id": 1568350,
                "content": [
                    {
                        "username": "reachapexadvert",
                        "content": "Bump THIS to MEDIUM :)"
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "It wasnt that hard to be honest. I have solved 60 easy questions and this was easy tooo"
                    },
                    {
                        "username": "sagarbarapatre",
                        "content": "I am really sorry to ask this kind of question in the discuss but i am not getting what do we exactly need to do in this question.\\nPlease don\\'t get offended. I am really sorry if someone feels bad.\\nPlease help me out"
                    },
                    {
                        "username": "nabeelcodes001",
                        "content": "Dont feel sorry bruh!!!!!!, If sm1 gets offended to help sm1, then their downfall is near,!!!!!!!!!!!!!!:)"
                    },
                    {
                        "username": "JDgoat",
                        "content": "What they asked is confused(I agree). So basically, they are asking you to put extra zero next to the zero that existed before. you can sort of see non zero number shifting to the right. Since the array size is fixed, some non zero number will be removed from the array if it is necessary(Ex. in the example 1, in the output, 5 is removed eventually due to extra zero is applied)"
                    },
                    {
                        "username": "KurtusKobeck",
                        "content": "Just a casual reminder: Read the description VERY carefully.\\nThis assignment specifically wants you to duplicate the zeros without changing the length of the vector!"
                    },
                    {
                        "username": "Jaber1028",
                        "content": "If you keep overriding every value with 0:\\nMake sure to add 1 to your loop variable after you do the first whole swap/insert. "
                    },
                    {
                        "username": "hemant_dhiman",
                        "content": "[@Jaber1028](/Jaber1028) Your tip helped 😁\n\ni know not the best but will reduce the runtime.\n\n```\nclass Solution {\n    public void shiftAndInsertAtIndex(int[] arr, int index){\n        if(index > 0){\n            for(int i = arr.length-1; i >= index; i--){\n                arr[i] = arr[i-1];\n            }\n            arr[index] = 0;\n        }\n    }\n    \n    public void duplicateZeros(int[] arr) {\n        for(int i = 0 ; i < arr.length ; i++) {\n            if (arr[i] == 0 && i < arr.length + 1) {\n                if (i == 0){\n                    shiftAndInsertAtIndex(arr, i+1);\n                }\n                shiftAndInsertAtIndex(arr, i);\n                i++;\n            }\n        }\n    }\n}\n```"
                    },
                    {
                        "username": "user5732L",
                        "content": "Thanks! :)"
                    },
                    {
                        "username": "Ali2023",
                        "content": "void duplicateZeros(List<int> arr) {\\n  int start = 0;\\n  int end = arr.length;\\n  while (start < end) {\\n    if (arr[start] == 0) {\\n      arr.removeLast();\\n      arr.insert(start, 0);\\n      start++;\\n    }\\n    start++;\\n  }\\n  print(arr);\\n} i used stack with pointers "
                    },
                    {
                        "username": "Mahesh_Bambhaniya",
                        "content": "i think leetcode provide to more explaination and give 3rd example to understand this question ."
                    },
                    {
                        "username": "undercovercoder_",
                        "content": " class Solution:\\n    def duplicateZeros(self, arr):\\n        x = arr.copy()\\n        length = len(x)\\n        for i in range(length):\\n            if x[i]==0:\\n                arr.insert(i+1,0)\\n        return arr[:length]\\n       \\nWhat\\'s the problem with this code?"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "This has one more logical problem: If you insert 0 at i+1 th in for loop, again in the next iteration it will find the inserted 0 and it will insert one more, so in this above code. Once it finds 0 rest all elements will be 0"
                    },
                    {
                        "username": "marwanmusa",
                        "content": "just don\\'t return anything and modify the inputted array instead"
                    },
                    {
                        "username": "aakriti__awasthi",
                        "content": "When i am using Arrays.toString it is returing the correct answer but when i am using return it is returning wrong output. why ??"
                    },
                    {
                        "username": "chloezhang1030",
                        "content": "I think we are modifying the `arr`, not returning one. The signature suggests that the return type is void."
                    },
                    {
                        "username": "beach_slav",
                        "content": "i also tried to declare the new array to the original array per Reference, and in intelliJ it functions perfectly when i print out the original array aswell. Strange"
                    },
                    {
                        "username": "beach_slav",
                        "content": "same problem over here"
                    },
                    {
                        "username": "sethupathi8",
                        "content": "Interesting!!\\n"
                    },
                    {
                        "username": "Denbruh",
                        "content": "Hi\\nCould anyone please help me out with this?\\n\\n `\\n\\n     void duplicateZeros(vector<int>& arr) {\\n        vector<int> newArr;\\n\\n        //arr = [1,0,2,3,0,4,5,0] (Input)\\n        for(int i = 0;i < arr.size();i++){\\n            newArr.push_back(arr[i]);\\n            if(arr[i] == 0){\\n                newArr.push_back(0);\\n            }\\n        }\\n        for(int j = 0;j < newArr.size() - arr.size();j++){\\n            newArr.pop_back();\\n        }\\n\\n        arr = newArr;\\n        //arr = [1,0,0,2,3,0,0,4,5] (Output)\\n        //Expected [1,0,0,2,3,0,0,4]\\n    }`\\n\\nIt works fine on Case 2 but it seems to forget to remove an element in Case 1\\nI\\'ve already used other successful methods but I still wanna know why this specific piece of code doesn\\'t work"
                    }
                ]
            },
            {
                "id": 1566971,
                "content": [
                    {
                        "username": "reachapexadvert",
                        "content": "Bump THIS to MEDIUM :)"
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "It wasnt that hard to be honest. I have solved 60 easy questions and this was easy tooo"
                    },
                    {
                        "username": "sagarbarapatre",
                        "content": "I am really sorry to ask this kind of question in the discuss but i am not getting what do we exactly need to do in this question.\\nPlease don\\'t get offended. I am really sorry if someone feels bad.\\nPlease help me out"
                    },
                    {
                        "username": "nabeelcodes001",
                        "content": "Dont feel sorry bruh!!!!!!, If sm1 gets offended to help sm1, then their downfall is near,!!!!!!!!!!!!!!:)"
                    },
                    {
                        "username": "JDgoat",
                        "content": "What they asked is confused(I agree). So basically, they are asking you to put extra zero next to the zero that existed before. you can sort of see non zero number shifting to the right. Since the array size is fixed, some non zero number will be removed from the array if it is necessary(Ex. in the example 1, in the output, 5 is removed eventually due to extra zero is applied)"
                    },
                    {
                        "username": "KurtusKobeck",
                        "content": "Just a casual reminder: Read the description VERY carefully.\\nThis assignment specifically wants you to duplicate the zeros without changing the length of the vector!"
                    },
                    {
                        "username": "Jaber1028",
                        "content": "If you keep overriding every value with 0:\\nMake sure to add 1 to your loop variable after you do the first whole swap/insert. "
                    },
                    {
                        "username": "hemant_dhiman",
                        "content": "[@Jaber1028](/Jaber1028) Your tip helped 😁\n\ni know not the best but will reduce the runtime.\n\n```\nclass Solution {\n    public void shiftAndInsertAtIndex(int[] arr, int index){\n        if(index > 0){\n            for(int i = arr.length-1; i >= index; i--){\n                arr[i] = arr[i-1];\n            }\n            arr[index] = 0;\n        }\n    }\n    \n    public void duplicateZeros(int[] arr) {\n        for(int i = 0 ; i < arr.length ; i++) {\n            if (arr[i] == 0 && i < arr.length + 1) {\n                if (i == 0){\n                    shiftAndInsertAtIndex(arr, i+1);\n                }\n                shiftAndInsertAtIndex(arr, i);\n                i++;\n            }\n        }\n    }\n}\n```"
                    },
                    {
                        "username": "user5732L",
                        "content": "Thanks! :)"
                    },
                    {
                        "username": "Ali2023",
                        "content": "void duplicateZeros(List<int> arr) {\\n  int start = 0;\\n  int end = arr.length;\\n  while (start < end) {\\n    if (arr[start] == 0) {\\n      arr.removeLast();\\n      arr.insert(start, 0);\\n      start++;\\n    }\\n    start++;\\n  }\\n  print(arr);\\n} i used stack with pointers "
                    },
                    {
                        "username": "Mahesh_Bambhaniya",
                        "content": "i think leetcode provide to more explaination and give 3rd example to understand this question ."
                    },
                    {
                        "username": "undercovercoder_",
                        "content": " class Solution:\\n    def duplicateZeros(self, arr):\\n        x = arr.copy()\\n        length = len(x)\\n        for i in range(length):\\n            if x[i]==0:\\n                arr.insert(i+1,0)\\n        return arr[:length]\\n       \\nWhat\\'s the problem with this code?"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "This has one more logical problem: If you insert 0 at i+1 th in for loop, again in the next iteration it will find the inserted 0 and it will insert one more, so in this above code. Once it finds 0 rest all elements will be 0"
                    },
                    {
                        "username": "marwanmusa",
                        "content": "just don\\'t return anything and modify the inputted array instead"
                    },
                    {
                        "username": "aakriti__awasthi",
                        "content": "When i am using Arrays.toString it is returing the correct answer but when i am using return it is returning wrong output. why ??"
                    },
                    {
                        "username": "chloezhang1030",
                        "content": "I think we are modifying the `arr`, not returning one. The signature suggests that the return type is void."
                    },
                    {
                        "username": "beach_slav",
                        "content": "i also tried to declare the new array to the original array per Reference, and in intelliJ it functions perfectly when i print out the original array aswell. Strange"
                    },
                    {
                        "username": "beach_slav",
                        "content": "same problem over here"
                    },
                    {
                        "username": "sethupathi8",
                        "content": "Interesting!!\\n"
                    },
                    {
                        "username": "Denbruh",
                        "content": "Hi\\nCould anyone please help me out with this?\\n\\n `\\n\\n     void duplicateZeros(vector<int>& arr) {\\n        vector<int> newArr;\\n\\n        //arr = [1,0,2,3,0,4,5,0] (Input)\\n        for(int i = 0;i < arr.size();i++){\\n            newArr.push_back(arr[i]);\\n            if(arr[i] == 0){\\n                newArr.push_back(0);\\n            }\\n        }\\n        for(int j = 0;j < newArr.size() - arr.size();j++){\\n            newArr.pop_back();\\n        }\\n\\n        arr = newArr;\\n        //arr = [1,0,0,2,3,0,0,4,5] (Output)\\n        //Expected [1,0,0,2,3,0,0,4]\\n    }`\\n\\nIt works fine on Case 2 but it seems to forget to remove an element in Case 1\\nI\\'ve already used other successful methods but I still wanna know why this specific piece of code doesn\\'t work"
                    }
                ]
            },
            {
                "id": 1740224,
                "content": [
                    {
                        "username": "reachapexadvert",
                        "content": "Bump THIS to MEDIUM :)"
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "It wasnt that hard to be honest. I have solved 60 easy questions and this was easy tooo"
                    },
                    {
                        "username": "sagarbarapatre",
                        "content": "I am really sorry to ask this kind of question in the discuss but i am not getting what do we exactly need to do in this question.\\nPlease don\\'t get offended. I am really sorry if someone feels bad.\\nPlease help me out"
                    },
                    {
                        "username": "nabeelcodes001",
                        "content": "Dont feel sorry bruh!!!!!!, If sm1 gets offended to help sm1, then their downfall is near,!!!!!!!!!!!!!!:)"
                    },
                    {
                        "username": "JDgoat",
                        "content": "What they asked is confused(I agree). So basically, they are asking you to put extra zero next to the zero that existed before. you can sort of see non zero number shifting to the right. Since the array size is fixed, some non zero number will be removed from the array if it is necessary(Ex. in the example 1, in the output, 5 is removed eventually due to extra zero is applied)"
                    },
                    {
                        "username": "KurtusKobeck",
                        "content": "Just a casual reminder: Read the description VERY carefully.\\nThis assignment specifically wants you to duplicate the zeros without changing the length of the vector!"
                    },
                    {
                        "username": "Jaber1028",
                        "content": "If you keep overriding every value with 0:\\nMake sure to add 1 to your loop variable after you do the first whole swap/insert. "
                    },
                    {
                        "username": "hemant_dhiman",
                        "content": "[@Jaber1028](/Jaber1028) Your tip helped 😁\n\ni know not the best but will reduce the runtime.\n\n```\nclass Solution {\n    public void shiftAndInsertAtIndex(int[] arr, int index){\n        if(index > 0){\n            for(int i = arr.length-1; i >= index; i--){\n                arr[i] = arr[i-1];\n            }\n            arr[index] = 0;\n        }\n    }\n    \n    public void duplicateZeros(int[] arr) {\n        for(int i = 0 ; i < arr.length ; i++) {\n            if (arr[i] == 0 && i < arr.length + 1) {\n                if (i == 0){\n                    shiftAndInsertAtIndex(arr, i+1);\n                }\n                shiftAndInsertAtIndex(arr, i);\n                i++;\n            }\n        }\n    }\n}\n```"
                    },
                    {
                        "username": "user5732L",
                        "content": "Thanks! :)"
                    },
                    {
                        "username": "Ali2023",
                        "content": "void duplicateZeros(List<int> arr) {\\n  int start = 0;\\n  int end = arr.length;\\n  while (start < end) {\\n    if (arr[start] == 0) {\\n      arr.removeLast();\\n      arr.insert(start, 0);\\n      start++;\\n    }\\n    start++;\\n  }\\n  print(arr);\\n} i used stack with pointers "
                    },
                    {
                        "username": "Mahesh_Bambhaniya",
                        "content": "i think leetcode provide to more explaination and give 3rd example to understand this question ."
                    },
                    {
                        "username": "undercovercoder_",
                        "content": " class Solution:\\n    def duplicateZeros(self, arr):\\n        x = arr.copy()\\n        length = len(x)\\n        for i in range(length):\\n            if x[i]==0:\\n                arr.insert(i+1,0)\\n        return arr[:length]\\n       \\nWhat\\'s the problem with this code?"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "This has one more logical problem: If you insert 0 at i+1 th in for loop, again in the next iteration it will find the inserted 0 and it will insert one more, so in this above code. Once it finds 0 rest all elements will be 0"
                    },
                    {
                        "username": "marwanmusa",
                        "content": "just don\\'t return anything and modify the inputted array instead"
                    },
                    {
                        "username": "aakriti__awasthi",
                        "content": "When i am using Arrays.toString it is returing the correct answer but when i am using return it is returning wrong output. why ??"
                    },
                    {
                        "username": "chloezhang1030",
                        "content": "I think we are modifying the `arr`, not returning one. The signature suggests that the return type is void."
                    },
                    {
                        "username": "beach_slav",
                        "content": "i also tried to declare the new array to the original array per Reference, and in intelliJ it functions perfectly when i print out the original array aswell. Strange"
                    },
                    {
                        "username": "beach_slav",
                        "content": "same problem over here"
                    },
                    {
                        "username": "sethupathi8",
                        "content": "Interesting!!\\n"
                    },
                    {
                        "username": "Denbruh",
                        "content": "Hi\\nCould anyone please help me out with this?\\n\\n `\\n\\n     void duplicateZeros(vector<int>& arr) {\\n        vector<int> newArr;\\n\\n        //arr = [1,0,2,3,0,4,5,0] (Input)\\n        for(int i = 0;i < arr.size();i++){\\n            newArr.push_back(arr[i]);\\n            if(arr[i] == 0){\\n                newArr.push_back(0);\\n            }\\n        }\\n        for(int j = 0;j < newArr.size() - arr.size();j++){\\n            newArr.pop_back();\\n        }\\n\\n        arr = newArr;\\n        //arr = [1,0,0,2,3,0,0,4,5] (Output)\\n        //Expected [1,0,0,2,3,0,0,4]\\n    }`\\n\\nIt works fine on Case 2 but it seems to forget to remove an element in Case 1\\nI\\'ve already used other successful methods but I still wanna know why this specific piece of code doesn\\'t work"
                    }
                ]
            },
            {
                "id": 1722995,
                "content": [
                    {
                        "username": "reachapexadvert",
                        "content": "Bump THIS to MEDIUM :)"
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "It wasnt that hard to be honest. I have solved 60 easy questions and this was easy tooo"
                    },
                    {
                        "username": "sagarbarapatre",
                        "content": "I am really sorry to ask this kind of question in the discuss but i am not getting what do we exactly need to do in this question.\\nPlease don\\'t get offended. I am really sorry if someone feels bad.\\nPlease help me out"
                    },
                    {
                        "username": "nabeelcodes001",
                        "content": "Dont feel sorry bruh!!!!!!, If sm1 gets offended to help sm1, then their downfall is near,!!!!!!!!!!!!!!:)"
                    },
                    {
                        "username": "JDgoat",
                        "content": "What they asked is confused(I agree). So basically, they are asking you to put extra zero next to the zero that existed before. you can sort of see non zero number shifting to the right. Since the array size is fixed, some non zero number will be removed from the array if it is necessary(Ex. in the example 1, in the output, 5 is removed eventually due to extra zero is applied)"
                    },
                    {
                        "username": "KurtusKobeck",
                        "content": "Just a casual reminder: Read the description VERY carefully.\\nThis assignment specifically wants you to duplicate the zeros without changing the length of the vector!"
                    },
                    {
                        "username": "Jaber1028",
                        "content": "If you keep overriding every value with 0:\\nMake sure to add 1 to your loop variable after you do the first whole swap/insert. "
                    },
                    {
                        "username": "hemant_dhiman",
                        "content": "[@Jaber1028](/Jaber1028) Your tip helped 😁\n\ni know not the best but will reduce the runtime.\n\n```\nclass Solution {\n    public void shiftAndInsertAtIndex(int[] arr, int index){\n        if(index > 0){\n            for(int i = arr.length-1; i >= index; i--){\n                arr[i] = arr[i-1];\n            }\n            arr[index] = 0;\n        }\n    }\n    \n    public void duplicateZeros(int[] arr) {\n        for(int i = 0 ; i < arr.length ; i++) {\n            if (arr[i] == 0 && i < arr.length + 1) {\n                if (i == 0){\n                    shiftAndInsertAtIndex(arr, i+1);\n                }\n                shiftAndInsertAtIndex(arr, i);\n                i++;\n            }\n        }\n    }\n}\n```"
                    },
                    {
                        "username": "user5732L",
                        "content": "Thanks! :)"
                    },
                    {
                        "username": "Ali2023",
                        "content": "void duplicateZeros(List<int> arr) {\\n  int start = 0;\\n  int end = arr.length;\\n  while (start < end) {\\n    if (arr[start] == 0) {\\n      arr.removeLast();\\n      arr.insert(start, 0);\\n      start++;\\n    }\\n    start++;\\n  }\\n  print(arr);\\n} i used stack with pointers "
                    },
                    {
                        "username": "Mahesh_Bambhaniya",
                        "content": "i think leetcode provide to more explaination and give 3rd example to understand this question ."
                    },
                    {
                        "username": "undercovercoder_",
                        "content": " class Solution:\\n    def duplicateZeros(self, arr):\\n        x = arr.copy()\\n        length = len(x)\\n        for i in range(length):\\n            if x[i]==0:\\n                arr.insert(i+1,0)\\n        return arr[:length]\\n       \\nWhat\\'s the problem with this code?"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "This has one more logical problem: If you insert 0 at i+1 th in for loop, again in the next iteration it will find the inserted 0 and it will insert one more, so in this above code. Once it finds 0 rest all elements will be 0"
                    },
                    {
                        "username": "marwanmusa",
                        "content": "just don\\'t return anything and modify the inputted array instead"
                    },
                    {
                        "username": "aakriti__awasthi",
                        "content": "When i am using Arrays.toString it is returing the correct answer but when i am using return it is returning wrong output. why ??"
                    },
                    {
                        "username": "chloezhang1030",
                        "content": "I think we are modifying the `arr`, not returning one. The signature suggests that the return type is void."
                    },
                    {
                        "username": "beach_slav",
                        "content": "i also tried to declare the new array to the original array per Reference, and in intelliJ it functions perfectly when i print out the original array aswell. Strange"
                    },
                    {
                        "username": "beach_slav",
                        "content": "same problem over here"
                    },
                    {
                        "username": "sethupathi8",
                        "content": "Interesting!!\\n"
                    },
                    {
                        "username": "Denbruh",
                        "content": "Hi\\nCould anyone please help me out with this?\\n\\n `\\n\\n     void duplicateZeros(vector<int>& arr) {\\n        vector<int> newArr;\\n\\n        //arr = [1,0,2,3,0,4,5,0] (Input)\\n        for(int i = 0;i < arr.size();i++){\\n            newArr.push_back(arr[i]);\\n            if(arr[i] == 0){\\n                newArr.push_back(0);\\n            }\\n        }\\n        for(int j = 0;j < newArr.size() - arr.size();j++){\\n            newArr.pop_back();\\n        }\\n\\n        arr = newArr;\\n        //arr = [1,0,0,2,3,0,0,4,5] (Output)\\n        //Expected [1,0,0,2,3,0,0,4]\\n    }`\\n\\nIt works fine on Case 2 but it seems to forget to remove an element in Case 1\\nI\\'ve already used other successful methods but I still wanna know why this specific piece of code doesn\\'t work"
                    }
                ]
            },
            {
                "id": 2000211,
                "content": [
                    {
                        "username": "reachapexadvert",
                        "content": "Bump THIS to MEDIUM :)"
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "It wasnt that hard to be honest. I have solved 60 easy questions and this was easy tooo"
                    },
                    {
                        "username": "sagarbarapatre",
                        "content": "I am really sorry to ask this kind of question in the discuss but i am not getting what do we exactly need to do in this question.\\nPlease don\\'t get offended. I am really sorry if someone feels bad.\\nPlease help me out"
                    },
                    {
                        "username": "nabeelcodes001",
                        "content": "Dont feel sorry bruh!!!!!!, If sm1 gets offended to help sm1, then their downfall is near,!!!!!!!!!!!!!!:)"
                    },
                    {
                        "username": "JDgoat",
                        "content": "What they asked is confused(I agree). So basically, they are asking you to put extra zero next to the zero that existed before. you can sort of see non zero number shifting to the right. Since the array size is fixed, some non zero number will be removed from the array if it is necessary(Ex. in the example 1, in the output, 5 is removed eventually due to extra zero is applied)"
                    },
                    {
                        "username": "KurtusKobeck",
                        "content": "Just a casual reminder: Read the description VERY carefully.\\nThis assignment specifically wants you to duplicate the zeros without changing the length of the vector!"
                    },
                    {
                        "username": "Jaber1028",
                        "content": "If you keep overriding every value with 0:\\nMake sure to add 1 to your loop variable after you do the first whole swap/insert. "
                    },
                    {
                        "username": "hemant_dhiman",
                        "content": "[@Jaber1028](/Jaber1028) Your tip helped 😁\n\ni know not the best but will reduce the runtime.\n\n```\nclass Solution {\n    public void shiftAndInsertAtIndex(int[] arr, int index){\n        if(index > 0){\n            for(int i = arr.length-1; i >= index; i--){\n                arr[i] = arr[i-1];\n            }\n            arr[index] = 0;\n        }\n    }\n    \n    public void duplicateZeros(int[] arr) {\n        for(int i = 0 ; i < arr.length ; i++) {\n            if (arr[i] == 0 && i < arr.length + 1) {\n                if (i == 0){\n                    shiftAndInsertAtIndex(arr, i+1);\n                }\n                shiftAndInsertAtIndex(arr, i);\n                i++;\n            }\n        }\n    }\n}\n```"
                    },
                    {
                        "username": "user5732L",
                        "content": "Thanks! :)"
                    },
                    {
                        "username": "Ali2023",
                        "content": "void duplicateZeros(List<int> arr) {\\n  int start = 0;\\n  int end = arr.length;\\n  while (start < end) {\\n    if (arr[start] == 0) {\\n      arr.removeLast();\\n      arr.insert(start, 0);\\n      start++;\\n    }\\n    start++;\\n  }\\n  print(arr);\\n} i used stack with pointers "
                    },
                    {
                        "username": "Mahesh_Bambhaniya",
                        "content": "i think leetcode provide to more explaination and give 3rd example to understand this question ."
                    },
                    {
                        "username": "undercovercoder_",
                        "content": " class Solution:\\n    def duplicateZeros(self, arr):\\n        x = arr.copy()\\n        length = len(x)\\n        for i in range(length):\\n            if x[i]==0:\\n                arr.insert(i+1,0)\\n        return arr[:length]\\n       \\nWhat\\'s the problem with this code?"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "This has one more logical problem: If you insert 0 at i+1 th in for loop, again in the next iteration it will find the inserted 0 and it will insert one more, so in this above code. Once it finds 0 rest all elements will be 0"
                    },
                    {
                        "username": "marwanmusa",
                        "content": "just don\\'t return anything and modify the inputted array instead"
                    },
                    {
                        "username": "aakriti__awasthi",
                        "content": "When i am using Arrays.toString it is returing the correct answer but when i am using return it is returning wrong output. why ??"
                    },
                    {
                        "username": "chloezhang1030",
                        "content": "I think we are modifying the `arr`, not returning one. The signature suggests that the return type is void."
                    },
                    {
                        "username": "beach_slav",
                        "content": "i also tried to declare the new array to the original array per Reference, and in intelliJ it functions perfectly when i print out the original array aswell. Strange"
                    },
                    {
                        "username": "beach_slav",
                        "content": "same problem over here"
                    },
                    {
                        "username": "sethupathi8",
                        "content": "Interesting!!\\n"
                    },
                    {
                        "username": "Denbruh",
                        "content": "Hi\\nCould anyone please help me out with this?\\n\\n `\\n\\n     void duplicateZeros(vector<int>& arr) {\\n        vector<int> newArr;\\n\\n        //arr = [1,0,2,3,0,4,5,0] (Input)\\n        for(int i = 0;i < arr.size();i++){\\n            newArr.push_back(arr[i]);\\n            if(arr[i] == 0){\\n                newArr.push_back(0);\\n            }\\n        }\\n        for(int j = 0;j < newArr.size() - arr.size();j++){\\n            newArr.pop_back();\\n        }\\n\\n        arr = newArr;\\n        //arr = [1,0,0,2,3,0,0,4,5] (Output)\\n        //Expected [1,0,0,2,3,0,0,4]\\n    }`\\n\\nIt works fine on Case 2 but it seems to forget to remove an element in Case 1\\nI\\'ve already used other successful methods but I still wanna know why this specific piece of code doesn\\'t work"
                    }
                ]
            },
            {
                "id": 1876680,
                "content": [
                    {
                        "username": "reachapexadvert",
                        "content": "Bump THIS to MEDIUM :)"
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "It wasnt that hard to be honest. I have solved 60 easy questions and this was easy tooo"
                    },
                    {
                        "username": "sagarbarapatre",
                        "content": "I am really sorry to ask this kind of question in the discuss but i am not getting what do we exactly need to do in this question.\\nPlease don\\'t get offended. I am really sorry if someone feels bad.\\nPlease help me out"
                    },
                    {
                        "username": "nabeelcodes001",
                        "content": "Dont feel sorry bruh!!!!!!, If sm1 gets offended to help sm1, then their downfall is near,!!!!!!!!!!!!!!:)"
                    },
                    {
                        "username": "JDgoat",
                        "content": "What they asked is confused(I agree). So basically, they are asking you to put extra zero next to the zero that existed before. you can sort of see non zero number shifting to the right. Since the array size is fixed, some non zero number will be removed from the array if it is necessary(Ex. in the example 1, in the output, 5 is removed eventually due to extra zero is applied)"
                    },
                    {
                        "username": "KurtusKobeck",
                        "content": "Just a casual reminder: Read the description VERY carefully.\\nThis assignment specifically wants you to duplicate the zeros without changing the length of the vector!"
                    },
                    {
                        "username": "Jaber1028",
                        "content": "If you keep overriding every value with 0:\\nMake sure to add 1 to your loop variable after you do the first whole swap/insert. "
                    },
                    {
                        "username": "hemant_dhiman",
                        "content": "[@Jaber1028](/Jaber1028) Your tip helped 😁\n\ni know not the best but will reduce the runtime.\n\n```\nclass Solution {\n    public void shiftAndInsertAtIndex(int[] arr, int index){\n        if(index > 0){\n            for(int i = arr.length-1; i >= index; i--){\n                arr[i] = arr[i-1];\n            }\n            arr[index] = 0;\n        }\n    }\n    \n    public void duplicateZeros(int[] arr) {\n        for(int i = 0 ; i < arr.length ; i++) {\n            if (arr[i] == 0 && i < arr.length + 1) {\n                if (i == 0){\n                    shiftAndInsertAtIndex(arr, i+1);\n                }\n                shiftAndInsertAtIndex(arr, i);\n                i++;\n            }\n        }\n    }\n}\n```"
                    },
                    {
                        "username": "user5732L",
                        "content": "Thanks! :)"
                    },
                    {
                        "username": "Ali2023",
                        "content": "void duplicateZeros(List<int> arr) {\\n  int start = 0;\\n  int end = arr.length;\\n  while (start < end) {\\n    if (arr[start] == 0) {\\n      arr.removeLast();\\n      arr.insert(start, 0);\\n      start++;\\n    }\\n    start++;\\n  }\\n  print(arr);\\n} i used stack with pointers "
                    },
                    {
                        "username": "Mahesh_Bambhaniya",
                        "content": "i think leetcode provide to more explaination and give 3rd example to understand this question ."
                    },
                    {
                        "username": "undercovercoder_",
                        "content": " class Solution:\\n    def duplicateZeros(self, arr):\\n        x = arr.copy()\\n        length = len(x)\\n        for i in range(length):\\n            if x[i]==0:\\n                arr.insert(i+1,0)\\n        return arr[:length]\\n       \\nWhat\\'s the problem with this code?"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "This has one more logical problem: If you insert 0 at i+1 th in for loop, again in the next iteration it will find the inserted 0 and it will insert one more, so in this above code. Once it finds 0 rest all elements will be 0"
                    },
                    {
                        "username": "marwanmusa",
                        "content": "just don\\'t return anything and modify the inputted array instead"
                    },
                    {
                        "username": "aakriti__awasthi",
                        "content": "When i am using Arrays.toString it is returing the correct answer but when i am using return it is returning wrong output. why ??"
                    },
                    {
                        "username": "chloezhang1030",
                        "content": "I think we are modifying the `arr`, not returning one. The signature suggests that the return type is void."
                    },
                    {
                        "username": "beach_slav",
                        "content": "i also tried to declare the new array to the original array per Reference, and in intelliJ it functions perfectly when i print out the original array aswell. Strange"
                    },
                    {
                        "username": "beach_slav",
                        "content": "same problem over here"
                    },
                    {
                        "username": "sethupathi8",
                        "content": "Interesting!!\\n"
                    },
                    {
                        "username": "Denbruh",
                        "content": "Hi\\nCould anyone please help me out with this?\\n\\n `\\n\\n     void duplicateZeros(vector<int>& arr) {\\n        vector<int> newArr;\\n\\n        //arr = [1,0,2,3,0,4,5,0] (Input)\\n        for(int i = 0;i < arr.size();i++){\\n            newArr.push_back(arr[i]);\\n            if(arr[i] == 0){\\n                newArr.push_back(0);\\n            }\\n        }\\n        for(int j = 0;j < newArr.size() - arr.size();j++){\\n            newArr.pop_back();\\n        }\\n\\n        arr = newArr;\\n        //arr = [1,0,0,2,3,0,0,4,5] (Output)\\n        //Expected [1,0,0,2,3,0,0,4]\\n    }`\\n\\nIt works fine on Case 2 but it seems to forget to remove an element in Case 1\\nI\\'ve already used other successful methods but I still wanna know why this specific piece of code doesn\\'t work"
                    }
                ]
            },
            {
                "id": 1822838,
                "content": [
                    {
                        "username": "reachapexadvert",
                        "content": "Bump THIS to MEDIUM :)"
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "It wasnt that hard to be honest. I have solved 60 easy questions and this was easy tooo"
                    },
                    {
                        "username": "sagarbarapatre",
                        "content": "I am really sorry to ask this kind of question in the discuss but i am not getting what do we exactly need to do in this question.\\nPlease don\\'t get offended. I am really sorry if someone feels bad.\\nPlease help me out"
                    },
                    {
                        "username": "nabeelcodes001",
                        "content": "Dont feel sorry bruh!!!!!!, If sm1 gets offended to help sm1, then their downfall is near,!!!!!!!!!!!!!!:)"
                    },
                    {
                        "username": "JDgoat",
                        "content": "What they asked is confused(I agree). So basically, they are asking you to put extra zero next to the zero that existed before. you can sort of see non zero number shifting to the right. Since the array size is fixed, some non zero number will be removed from the array if it is necessary(Ex. in the example 1, in the output, 5 is removed eventually due to extra zero is applied)"
                    },
                    {
                        "username": "KurtusKobeck",
                        "content": "Just a casual reminder: Read the description VERY carefully.\\nThis assignment specifically wants you to duplicate the zeros without changing the length of the vector!"
                    },
                    {
                        "username": "Jaber1028",
                        "content": "If you keep overriding every value with 0:\\nMake sure to add 1 to your loop variable after you do the first whole swap/insert. "
                    },
                    {
                        "username": "hemant_dhiman",
                        "content": "[@Jaber1028](/Jaber1028) Your tip helped 😁\n\ni know not the best but will reduce the runtime.\n\n```\nclass Solution {\n    public void shiftAndInsertAtIndex(int[] arr, int index){\n        if(index > 0){\n            for(int i = arr.length-1; i >= index; i--){\n                arr[i] = arr[i-1];\n            }\n            arr[index] = 0;\n        }\n    }\n    \n    public void duplicateZeros(int[] arr) {\n        for(int i = 0 ; i < arr.length ; i++) {\n            if (arr[i] == 0 && i < arr.length + 1) {\n                if (i == 0){\n                    shiftAndInsertAtIndex(arr, i+1);\n                }\n                shiftAndInsertAtIndex(arr, i);\n                i++;\n            }\n        }\n    }\n}\n```"
                    },
                    {
                        "username": "user5732L",
                        "content": "Thanks! :)"
                    },
                    {
                        "username": "Ali2023",
                        "content": "void duplicateZeros(List<int> arr) {\\n  int start = 0;\\n  int end = arr.length;\\n  while (start < end) {\\n    if (arr[start] == 0) {\\n      arr.removeLast();\\n      arr.insert(start, 0);\\n      start++;\\n    }\\n    start++;\\n  }\\n  print(arr);\\n} i used stack with pointers "
                    },
                    {
                        "username": "Mahesh_Bambhaniya",
                        "content": "i think leetcode provide to more explaination and give 3rd example to understand this question ."
                    },
                    {
                        "username": "undercovercoder_",
                        "content": " class Solution:\\n    def duplicateZeros(self, arr):\\n        x = arr.copy()\\n        length = len(x)\\n        for i in range(length):\\n            if x[i]==0:\\n                arr.insert(i+1,0)\\n        return arr[:length]\\n       \\nWhat\\'s the problem with this code?"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "This has one more logical problem: If you insert 0 at i+1 th in for loop, again in the next iteration it will find the inserted 0 and it will insert one more, so in this above code. Once it finds 0 rest all elements will be 0"
                    },
                    {
                        "username": "marwanmusa",
                        "content": "just don\\'t return anything and modify the inputted array instead"
                    },
                    {
                        "username": "aakriti__awasthi",
                        "content": "When i am using Arrays.toString it is returing the correct answer but when i am using return it is returning wrong output. why ??"
                    },
                    {
                        "username": "chloezhang1030",
                        "content": "I think we are modifying the `arr`, not returning one. The signature suggests that the return type is void."
                    },
                    {
                        "username": "beach_slav",
                        "content": "i also tried to declare the new array to the original array per Reference, and in intelliJ it functions perfectly when i print out the original array aswell. Strange"
                    },
                    {
                        "username": "beach_slav",
                        "content": "same problem over here"
                    },
                    {
                        "username": "sethupathi8",
                        "content": "Interesting!!\\n"
                    },
                    {
                        "username": "Denbruh",
                        "content": "Hi\\nCould anyone please help me out with this?\\n\\n `\\n\\n     void duplicateZeros(vector<int>& arr) {\\n        vector<int> newArr;\\n\\n        //arr = [1,0,2,3,0,4,5,0] (Input)\\n        for(int i = 0;i < arr.size();i++){\\n            newArr.push_back(arr[i]);\\n            if(arr[i] == 0){\\n                newArr.push_back(0);\\n            }\\n        }\\n        for(int j = 0;j < newArr.size() - arr.size();j++){\\n            newArr.pop_back();\\n        }\\n\\n        arr = newArr;\\n        //arr = [1,0,0,2,3,0,0,4,5] (Output)\\n        //Expected [1,0,0,2,3,0,0,4]\\n    }`\\n\\nIt works fine on Case 2 but it seems to forget to remove an element in Case 1\\nI\\'ve already used other successful methods but I still wanna know why this specific piece of code doesn\\'t work"
                    }
                ]
            },
            {
                "id": 1777965,
                "content": [
                    {
                        "username": "reachapexadvert",
                        "content": "Bump THIS to MEDIUM :)"
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "It wasnt that hard to be honest. I have solved 60 easy questions and this was easy tooo"
                    },
                    {
                        "username": "sagarbarapatre",
                        "content": "I am really sorry to ask this kind of question in the discuss but i am not getting what do we exactly need to do in this question.\\nPlease don\\'t get offended. I am really sorry if someone feels bad.\\nPlease help me out"
                    },
                    {
                        "username": "nabeelcodes001",
                        "content": "Dont feel sorry bruh!!!!!!, If sm1 gets offended to help sm1, then their downfall is near,!!!!!!!!!!!!!!:)"
                    },
                    {
                        "username": "JDgoat",
                        "content": "What they asked is confused(I agree). So basically, they are asking you to put extra zero next to the zero that existed before. you can sort of see non zero number shifting to the right. Since the array size is fixed, some non zero number will be removed from the array if it is necessary(Ex. in the example 1, in the output, 5 is removed eventually due to extra zero is applied)"
                    },
                    {
                        "username": "KurtusKobeck",
                        "content": "Just a casual reminder: Read the description VERY carefully.\\nThis assignment specifically wants you to duplicate the zeros without changing the length of the vector!"
                    },
                    {
                        "username": "Jaber1028",
                        "content": "If you keep overriding every value with 0:\\nMake sure to add 1 to your loop variable after you do the first whole swap/insert. "
                    },
                    {
                        "username": "hemant_dhiman",
                        "content": "[@Jaber1028](/Jaber1028) Your tip helped 😁\n\ni know not the best but will reduce the runtime.\n\n```\nclass Solution {\n    public void shiftAndInsertAtIndex(int[] arr, int index){\n        if(index > 0){\n            for(int i = arr.length-1; i >= index; i--){\n                arr[i] = arr[i-1];\n            }\n            arr[index] = 0;\n        }\n    }\n    \n    public void duplicateZeros(int[] arr) {\n        for(int i = 0 ; i < arr.length ; i++) {\n            if (arr[i] == 0 && i < arr.length + 1) {\n                if (i == 0){\n                    shiftAndInsertAtIndex(arr, i+1);\n                }\n                shiftAndInsertAtIndex(arr, i);\n                i++;\n            }\n        }\n    }\n}\n```"
                    },
                    {
                        "username": "user5732L",
                        "content": "Thanks! :)"
                    },
                    {
                        "username": "Ali2023",
                        "content": "void duplicateZeros(List<int> arr) {\\n  int start = 0;\\n  int end = arr.length;\\n  while (start < end) {\\n    if (arr[start] == 0) {\\n      arr.removeLast();\\n      arr.insert(start, 0);\\n      start++;\\n    }\\n    start++;\\n  }\\n  print(arr);\\n} i used stack with pointers "
                    },
                    {
                        "username": "Mahesh_Bambhaniya",
                        "content": "i think leetcode provide to more explaination and give 3rd example to understand this question ."
                    },
                    {
                        "username": "undercovercoder_",
                        "content": " class Solution:\\n    def duplicateZeros(self, arr):\\n        x = arr.copy()\\n        length = len(x)\\n        for i in range(length):\\n            if x[i]==0:\\n                arr.insert(i+1,0)\\n        return arr[:length]\\n       \\nWhat\\'s the problem with this code?"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "This has one more logical problem: If you insert 0 at i+1 th in for loop, again in the next iteration it will find the inserted 0 and it will insert one more, so in this above code. Once it finds 0 rest all elements will be 0"
                    },
                    {
                        "username": "marwanmusa",
                        "content": "just don\\'t return anything and modify the inputted array instead"
                    },
                    {
                        "username": "aakriti__awasthi",
                        "content": "When i am using Arrays.toString it is returing the correct answer but when i am using return it is returning wrong output. why ??"
                    },
                    {
                        "username": "chloezhang1030",
                        "content": "I think we are modifying the `arr`, not returning one. The signature suggests that the return type is void."
                    },
                    {
                        "username": "beach_slav",
                        "content": "i also tried to declare the new array to the original array per Reference, and in intelliJ it functions perfectly when i print out the original array aswell. Strange"
                    },
                    {
                        "username": "beach_slav",
                        "content": "same problem over here"
                    },
                    {
                        "username": "sethupathi8",
                        "content": "Interesting!!\\n"
                    },
                    {
                        "username": "Denbruh",
                        "content": "Hi\\nCould anyone please help me out with this?\\n\\n `\\n\\n     void duplicateZeros(vector<int>& arr) {\\n        vector<int> newArr;\\n\\n        //arr = [1,0,2,3,0,4,5,0] (Input)\\n        for(int i = 0;i < arr.size();i++){\\n            newArr.push_back(arr[i]);\\n            if(arr[i] == 0){\\n                newArr.push_back(0);\\n            }\\n        }\\n        for(int j = 0;j < newArr.size() - arr.size();j++){\\n            newArr.pop_back();\\n        }\\n\\n        arr = newArr;\\n        //arr = [1,0,0,2,3,0,0,4,5] (Output)\\n        //Expected [1,0,0,2,3,0,0,4]\\n    }`\\n\\nIt works fine on Case 2 but it seems to forget to remove an element in Case 1\\nI\\'ve already used other successful methods but I still wanna know why this specific piece of code doesn\\'t work"
                    }
                ]
            },
            {
                "id": 2069360,
                "content": [
                    {
                        "username": "reachapexadvert",
                        "content": "Bump THIS to MEDIUM :)"
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "It wasnt that hard to be honest. I have solved 60 easy questions and this was easy tooo"
                    },
                    {
                        "username": "sagarbarapatre",
                        "content": "I am really sorry to ask this kind of question in the discuss but i am not getting what do we exactly need to do in this question.\\nPlease don\\'t get offended. I am really sorry if someone feels bad.\\nPlease help me out"
                    },
                    {
                        "username": "nabeelcodes001",
                        "content": "Dont feel sorry bruh!!!!!!, If sm1 gets offended to help sm1, then their downfall is near,!!!!!!!!!!!!!!:)"
                    },
                    {
                        "username": "JDgoat",
                        "content": "What they asked is confused(I agree). So basically, they are asking you to put extra zero next to the zero that existed before. you can sort of see non zero number shifting to the right. Since the array size is fixed, some non zero number will be removed from the array if it is necessary(Ex. in the example 1, in the output, 5 is removed eventually due to extra zero is applied)"
                    },
                    {
                        "username": "KurtusKobeck",
                        "content": "Just a casual reminder: Read the description VERY carefully.\\nThis assignment specifically wants you to duplicate the zeros without changing the length of the vector!"
                    },
                    {
                        "username": "Jaber1028",
                        "content": "If you keep overriding every value with 0:\\nMake sure to add 1 to your loop variable after you do the first whole swap/insert. "
                    },
                    {
                        "username": "hemant_dhiman",
                        "content": "[@Jaber1028](/Jaber1028) Your tip helped 😁\n\ni know not the best but will reduce the runtime.\n\n```\nclass Solution {\n    public void shiftAndInsertAtIndex(int[] arr, int index){\n        if(index > 0){\n            for(int i = arr.length-1; i >= index; i--){\n                arr[i] = arr[i-1];\n            }\n            arr[index] = 0;\n        }\n    }\n    \n    public void duplicateZeros(int[] arr) {\n        for(int i = 0 ; i < arr.length ; i++) {\n            if (arr[i] == 0 && i < arr.length + 1) {\n                if (i == 0){\n                    shiftAndInsertAtIndex(arr, i+1);\n                }\n                shiftAndInsertAtIndex(arr, i);\n                i++;\n            }\n        }\n    }\n}\n```"
                    },
                    {
                        "username": "user5732L",
                        "content": "Thanks! :)"
                    },
                    {
                        "username": "Ali2023",
                        "content": "void duplicateZeros(List<int> arr) {\\n  int start = 0;\\n  int end = arr.length;\\n  while (start < end) {\\n    if (arr[start] == 0) {\\n      arr.removeLast();\\n      arr.insert(start, 0);\\n      start++;\\n    }\\n    start++;\\n  }\\n  print(arr);\\n} i used stack with pointers "
                    },
                    {
                        "username": "Mahesh_Bambhaniya",
                        "content": "i think leetcode provide to more explaination and give 3rd example to understand this question ."
                    },
                    {
                        "username": "undercovercoder_",
                        "content": " class Solution:\\n    def duplicateZeros(self, arr):\\n        x = arr.copy()\\n        length = len(x)\\n        for i in range(length):\\n            if x[i]==0:\\n                arr.insert(i+1,0)\\n        return arr[:length]\\n       \\nWhat\\'s the problem with this code?"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "This has one more logical problem: If you insert 0 at i+1 th in for loop, again in the next iteration it will find the inserted 0 and it will insert one more, so in this above code. Once it finds 0 rest all elements will be 0"
                    },
                    {
                        "username": "marwanmusa",
                        "content": "just don\\'t return anything and modify the inputted array instead"
                    },
                    {
                        "username": "aakriti__awasthi",
                        "content": "When i am using Arrays.toString it is returing the correct answer but when i am using return it is returning wrong output. why ??"
                    },
                    {
                        "username": "chloezhang1030",
                        "content": "I think we are modifying the `arr`, not returning one. The signature suggests that the return type is void."
                    },
                    {
                        "username": "beach_slav",
                        "content": "i also tried to declare the new array to the original array per Reference, and in intelliJ it functions perfectly when i print out the original array aswell. Strange"
                    },
                    {
                        "username": "beach_slav",
                        "content": "same problem over here"
                    },
                    {
                        "username": "sethupathi8",
                        "content": "Interesting!!\\n"
                    },
                    {
                        "username": "Denbruh",
                        "content": "Hi\\nCould anyone please help me out with this?\\n\\n `\\n\\n     void duplicateZeros(vector<int>& arr) {\\n        vector<int> newArr;\\n\\n        //arr = [1,0,2,3,0,4,5,0] (Input)\\n        for(int i = 0;i < arr.size();i++){\\n            newArr.push_back(arr[i]);\\n            if(arr[i] == 0){\\n                newArr.push_back(0);\\n            }\\n        }\\n        for(int j = 0;j < newArr.size() - arr.size();j++){\\n            newArr.pop_back();\\n        }\\n\\n        arr = newArr;\\n        //arr = [1,0,0,2,3,0,0,4,5] (Output)\\n        //Expected [1,0,0,2,3,0,0,4]\\n    }`\\n\\nIt works fine on Case 2 but it seems to forget to remove an element in Case 1\\nI\\'ve already used other successful methods but I still wanna know why this specific piece of code doesn\\'t work"
                    }
                ]
            },
            {
                "id": 2048224,
                "content": [
                    {
                        "username": "reachapexadvert",
                        "content": "Bump THIS to MEDIUM :)"
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "It wasnt that hard to be honest. I have solved 60 easy questions and this was easy tooo"
                    },
                    {
                        "username": "sagarbarapatre",
                        "content": "I am really sorry to ask this kind of question in the discuss but i am not getting what do we exactly need to do in this question.\\nPlease don\\'t get offended. I am really sorry if someone feels bad.\\nPlease help me out"
                    },
                    {
                        "username": "nabeelcodes001",
                        "content": "Dont feel sorry bruh!!!!!!, If sm1 gets offended to help sm1, then their downfall is near,!!!!!!!!!!!!!!:)"
                    },
                    {
                        "username": "JDgoat",
                        "content": "What they asked is confused(I agree). So basically, they are asking you to put extra zero next to the zero that existed before. you can sort of see non zero number shifting to the right. Since the array size is fixed, some non zero number will be removed from the array if it is necessary(Ex. in the example 1, in the output, 5 is removed eventually due to extra zero is applied)"
                    },
                    {
                        "username": "KurtusKobeck",
                        "content": "Just a casual reminder: Read the description VERY carefully.\\nThis assignment specifically wants you to duplicate the zeros without changing the length of the vector!"
                    },
                    {
                        "username": "Jaber1028",
                        "content": "If you keep overriding every value with 0:\\nMake sure to add 1 to your loop variable after you do the first whole swap/insert. "
                    },
                    {
                        "username": "hemant_dhiman",
                        "content": "[@Jaber1028](/Jaber1028) Your tip helped 😁\n\ni know not the best but will reduce the runtime.\n\n```\nclass Solution {\n    public void shiftAndInsertAtIndex(int[] arr, int index){\n        if(index > 0){\n            for(int i = arr.length-1; i >= index; i--){\n                arr[i] = arr[i-1];\n            }\n            arr[index] = 0;\n        }\n    }\n    \n    public void duplicateZeros(int[] arr) {\n        for(int i = 0 ; i < arr.length ; i++) {\n            if (arr[i] == 0 && i < arr.length + 1) {\n                if (i == 0){\n                    shiftAndInsertAtIndex(arr, i+1);\n                }\n                shiftAndInsertAtIndex(arr, i);\n                i++;\n            }\n        }\n    }\n}\n```"
                    },
                    {
                        "username": "user5732L",
                        "content": "Thanks! :)"
                    },
                    {
                        "username": "Ali2023",
                        "content": "void duplicateZeros(List<int> arr) {\\n  int start = 0;\\n  int end = arr.length;\\n  while (start < end) {\\n    if (arr[start] == 0) {\\n      arr.removeLast();\\n      arr.insert(start, 0);\\n      start++;\\n    }\\n    start++;\\n  }\\n  print(arr);\\n} i used stack with pointers "
                    },
                    {
                        "username": "Mahesh_Bambhaniya",
                        "content": "i think leetcode provide to more explaination and give 3rd example to understand this question ."
                    },
                    {
                        "username": "undercovercoder_",
                        "content": " class Solution:\\n    def duplicateZeros(self, arr):\\n        x = arr.copy()\\n        length = len(x)\\n        for i in range(length):\\n            if x[i]==0:\\n                arr.insert(i+1,0)\\n        return arr[:length]\\n       \\nWhat\\'s the problem with this code?"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "This has one more logical problem: If you insert 0 at i+1 th in for loop, again in the next iteration it will find the inserted 0 and it will insert one more, so in this above code. Once it finds 0 rest all elements will be 0"
                    },
                    {
                        "username": "marwanmusa",
                        "content": "just don\\'t return anything and modify the inputted array instead"
                    },
                    {
                        "username": "aakriti__awasthi",
                        "content": "When i am using Arrays.toString it is returing the correct answer but when i am using return it is returning wrong output. why ??"
                    },
                    {
                        "username": "chloezhang1030",
                        "content": "I think we are modifying the `arr`, not returning one. The signature suggests that the return type is void."
                    },
                    {
                        "username": "beach_slav",
                        "content": "i also tried to declare the new array to the original array per Reference, and in intelliJ it functions perfectly when i print out the original array aswell. Strange"
                    },
                    {
                        "username": "beach_slav",
                        "content": "same problem over here"
                    },
                    {
                        "username": "sethupathi8",
                        "content": "Interesting!!\\n"
                    },
                    {
                        "username": "Denbruh",
                        "content": "Hi\\nCould anyone please help me out with this?\\n\\n `\\n\\n     void duplicateZeros(vector<int>& arr) {\\n        vector<int> newArr;\\n\\n        //arr = [1,0,2,3,0,4,5,0] (Input)\\n        for(int i = 0;i < arr.size();i++){\\n            newArr.push_back(arr[i]);\\n            if(arr[i] == 0){\\n                newArr.push_back(0);\\n            }\\n        }\\n        for(int j = 0;j < newArr.size() - arr.size();j++){\\n            newArr.pop_back();\\n        }\\n\\n        arr = newArr;\\n        //arr = [1,0,0,2,3,0,0,4,5] (Output)\\n        //Expected [1,0,0,2,3,0,0,4]\\n    }`\\n\\nIt works fine on Case 2 but it seems to forget to remove an element in Case 1\\nI\\'ve already used other successful methods but I still wanna know why this specific piece of code doesn\\'t work"
                    }
                ]
            },
            {
                "id": 2045622,
                "content": [
                    {
                        "username": "iuri0072",
                        "content": "Hi! does anyone knows why my solution won\\'t work? I\\'m not talking about how easier or harder it would be, or more efficient. but i modified my input, and for some reason it is not reflecting on the output:\\n\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        arrSize = len(arr)\\n        i = 0\\n        while i < arrSize:\\n            if arr[i] == 0:\\n                aux = arr[i+1 : arrSize - 1]\\n                arr = arr[:i+1]\\n                arr.append(0)\\n                for j in aux:\\n                    arr.append(j)\\n                i += 1\\n            i += 1\\n        #print (arr)"
                    },
                    {
                        "username": "iuri0072",
                        "content": "[@ChethanKailashnath](/ChethanKailashnath) \nthanks a lot for the reply. I think i understood what's going on by your explanation. managed to solve the problem using arr.insert and it works well :)"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "Here you are trying to re assign the \"arr\" variable. which means you are creating a new list and modifying it. which does not affect the original arr list. To solve you need to manipulate the original array. Instead of slicing the array, you can try index manipulation."
                    },
                    {
                        "username": "Applethal",
                        "content": "<details>\\n  <summary>Spoiler warning</summary>\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        n = arr.count(0)\\n        arr1 = arr.copy()\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                arr1.insert(i+1,0)\\n                \\n                arr1.pop(-1)\\n        \\n        \\n        \\n        arr[:] = arr1\\n        \\n\\n</details>\\nMade it to testcase 13/31"
                    },
                    {
                        "username": "skavale",
                        "content": "this is not easy its a mdeium"
                    },
                    {
                        "username": "shailesh_rajpurohit",
                        "content": "This sh*t needs to be Medium level."
                    },
                    {
                        "username": "RiGa7",
                        "content": "I\\'m getting a runtime error with [8,4,5,0,0,0,0,7] test case. Can anyone figure out the mistake in the code?\\n\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        for(int i = 0 ; i<arr.size() ;i++)\\n        {\\n             if(arr[i]==0){\\n                 for (int j = arr.size()-2; j > i; j-- )\\n                 {\\n                    arr[j + 1] = arr[j];   \\n                 } \\n                 arr[i+1] = 0;\\n                 i++;\\n             }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "kennyhml",
                        "content": "Should be a medium question and just let the ugly solutions TLE"
                    },
                    {
                        "username": "vianj26",
                        "content": "the no return value makes it complicated."
                    },
                    {
                        "username": "mochiball",
                        "content": "Easy problem to use O(n) space. Medium if we do O(1) space "
                    },
                    {
                        "username": "kartikey090803",
                        "content": "\\n// can someone tell me what\\'s wrong with this ??\\n\\nvoid duplicateZeros(vector<int>& arr) {\\n        \\n        vector<int>N;\\n        for(int i=0; i<N.size(); i++)\\n        {\\n            N.push_back(arr[i]);\\n        }\\n\\n        int i,j;\\n        int n=arr.size();\\n\\n        for(i=0,j=0;i<n,j<n;i++,j++)\\n        {\\n            if(N[j]==0)\\n            {\\n                arr[i]=0;\\n                arr[i+1]=0;\\n                i++;\\n            }\\n            else\\n            {\\n                arr[i]=N[j];\\n            }\\n        }\\n\\n    } "
                    },
                    {
                        "username": "user2740qi",
                        "content": "You need to perform in place update."
                    },
                    {
                        "username": "rishabhtomar2014",
                        "content": "Can anyone tell me what\\'s wrong with my approach?\\nI tried printing the arr at the end and it\\'s value is exactly what\\'s expected.\\n`       \\n        \\n        left = 0\\n        size = len(arr)\\n\\n        if 0 in arr:\\n            while left < size:\\n                if arr[left] == 0 and left + 1 < size:\\n                    temp = arr[left + 1:]\\n                    arr[left + 1] = 0\\n                    arr = arr[:left + 2] + temp\\n                    left += 2\\n                else:\\n                    left += 1\\n            arr = arr[:size]\\n            #print(arr)`"
                    }
                ]
            },
            {
                "id": 2039475,
                "content": [
                    {
                        "username": "iuri0072",
                        "content": "Hi! does anyone knows why my solution won\\'t work? I\\'m not talking about how easier or harder it would be, or more efficient. but i modified my input, and for some reason it is not reflecting on the output:\\n\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        arrSize = len(arr)\\n        i = 0\\n        while i < arrSize:\\n            if arr[i] == 0:\\n                aux = arr[i+1 : arrSize - 1]\\n                arr = arr[:i+1]\\n                arr.append(0)\\n                for j in aux:\\n                    arr.append(j)\\n                i += 1\\n            i += 1\\n        #print (arr)"
                    },
                    {
                        "username": "iuri0072",
                        "content": "[@ChethanKailashnath](/ChethanKailashnath) \nthanks a lot for the reply. I think i understood what's going on by your explanation. managed to solve the problem using arr.insert and it works well :)"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "Here you are trying to re assign the \"arr\" variable. which means you are creating a new list and modifying it. which does not affect the original arr list. To solve you need to manipulate the original array. Instead of slicing the array, you can try index manipulation."
                    },
                    {
                        "username": "Applethal",
                        "content": "<details>\\n  <summary>Spoiler warning</summary>\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        n = arr.count(0)\\n        arr1 = arr.copy()\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                arr1.insert(i+1,0)\\n                \\n                arr1.pop(-1)\\n        \\n        \\n        \\n        arr[:] = arr1\\n        \\n\\n</details>\\nMade it to testcase 13/31"
                    },
                    {
                        "username": "skavale",
                        "content": "this is not easy its a mdeium"
                    },
                    {
                        "username": "shailesh_rajpurohit",
                        "content": "This sh*t needs to be Medium level."
                    },
                    {
                        "username": "RiGa7",
                        "content": "I\\'m getting a runtime error with [8,4,5,0,0,0,0,7] test case. Can anyone figure out the mistake in the code?\\n\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        for(int i = 0 ; i<arr.size() ;i++)\\n        {\\n             if(arr[i]==0){\\n                 for (int j = arr.size()-2; j > i; j-- )\\n                 {\\n                    arr[j + 1] = arr[j];   \\n                 } \\n                 arr[i+1] = 0;\\n                 i++;\\n             }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "kennyhml",
                        "content": "Should be a medium question and just let the ugly solutions TLE"
                    },
                    {
                        "username": "vianj26",
                        "content": "the no return value makes it complicated."
                    },
                    {
                        "username": "mochiball",
                        "content": "Easy problem to use O(n) space. Medium if we do O(1) space "
                    },
                    {
                        "username": "kartikey090803",
                        "content": "\\n// can someone tell me what\\'s wrong with this ??\\n\\nvoid duplicateZeros(vector<int>& arr) {\\n        \\n        vector<int>N;\\n        for(int i=0; i<N.size(); i++)\\n        {\\n            N.push_back(arr[i]);\\n        }\\n\\n        int i,j;\\n        int n=arr.size();\\n\\n        for(i=0,j=0;i<n,j<n;i++,j++)\\n        {\\n            if(N[j]==0)\\n            {\\n                arr[i]=0;\\n                arr[i+1]=0;\\n                i++;\\n            }\\n            else\\n            {\\n                arr[i]=N[j];\\n            }\\n        }\\n\\n    } "
                    },
                    {
                        "username": "user2740qi",
                        "content": "You need to perform in place update."
                    },
                    {
                        "username": "rishabhtomar2014",
                        "content": "Can anyone tell me what\\'s wrong with my approach?\\nI tried printing the arr at the end and it\\'s value is exactly what\\'s expected.\\n`       \\n        \\n        left = 0\\n        size = len(arr)\\n\\n        if 0 in arr:\\n            while left < size:\\n                if arr[left] == 0 and left + 1 < size:\\n                    temp = arr[left + 1:]\\n                    arr[left + 1] = 0\\n                    arr = arr[:left + 2] + temp\\n                    left += 2\\n                else:\\n                    left += 1\\n            arr = arr[:size]\\n            #print(arr)`"
                    }
                ]
            },
            {
                "id": 2039474,
                "content": [
                    {
                        "username": "iuri0072",
                        "content": "Hi! does anyone knows why my solution won\\'t work? I\\'m not talking about how easier or harder it would be, or more efficient. but i modified my input, and for some reason it is not reflecting on the output:\\n\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        arrSize = len(arr)\\n        i = 0\\n        while i < arrSize:\\n            if arr[i] == 0:\\n                aux = arr[i+1 : arrSize - 1]\\n                arr = arr[:i+1]\\n                arr.append(0)\\n                for j in aux:\\n                    arr.append(j)\\n                i += 1\\n            i += 1\\n        #print (arr)"
                    },
                    {
                        "username": "iuri0072",
                        "content": "[@ChethanKailashnath](/ChethanKailashnath) \nthanks a lot for the reply. I think i understood what's going on by your explanation. managed to solve the problem using arr.insert and it works well :)"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "Here you are trying to re assign the \"arr\" variable. which means you are creating a new list and modifying it. which does not affect the original arr list. To solve you need to manipulate the original array. Instead of slicing the array, you can try index manipulation."
                    },
                    {
                        "username": "Applethal",
                        "content": "<details>\\n  <summary>Spoiler warning</summary>\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        n = arr.count(0)\\n        arr1 = arr.copy()\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                arr1.insert(i+1,0)\\n                \\n                arr1.pop(-1)\\n        \\n        \\n        \\n        arr[:] = arr1\\n        \\n\\n</details>\\nMade it to testcase 13/31"
                    },
                    {
                        "username": "skavale",
                        "content": "this is not easy its a mdeium"
                    },
                    {
                        "username": "shailesh_rajpurohit",
                        "content": "This sh*t needs to be Medium level."
                    },
                    {
                        "username": "RiGa7",
                        "content": "I\\'m getting a runtime error with [8,4,5,0,0,0,0,7] test case. Can anyone figure out the mistake in the code?\\n\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        for(int i = 0 ; i<arr.size() ;i++)\\n        {\\n             if(arr[i]==0){\\n                 for (int j = arr.size()-2; j > i; j-- )\\n                 {\\n                    arr[j + 1] = arr[j];   \\n                 } \\n                 arr[i+1] = 0;\\n                 i++;\\n             }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "kennyhml",
                        "content": "Should be a medium question and just let the ugly solutions TLE"
                    },
                    {
                        "username": "vianj26",
                        "content": "the no return value makes it complicated."
                    },
                    {
                        "username": "mochiball",
                        "content": "Easy problem to use O(n) space. Medium if we do O(1) space "
                    },
                    {
                        "username": "kartikey090803",
                        "content": "\\n// can someone tell me what\\'s wrong with this ??\\n\\nvoid duplicateZeros(vector<int>& arr) {\\n        \\n        vector<int>N;\\n        for(int i=0; i<N.size(); i++)\\n        {\\n            N.push_back(arr[i]);\\n        }\\n\\n        int i,j;\\n        int n=arr.size();\\n\\n        for(i=0,j=0;i<n,j<n;i++,j++)\\n        {\\n            if(N[j]==0)\\n            {\\n                arr[i]=0;\\n                arr[i+1]=0;\\n                i++;\\n            }\\n            else\\n            {\\n                arr[i]=N[j];\\n            }\\n        }\\n\\n    } "
                    },
                    {
                        "username": "user2740qi",
                        "content": "You need to perform in place update."
                    },
                    {
                        "username": "rishabhtomar2014",
                        "content": "Can anyone tell me what\\'s wrong with my approach?\\nI tried printing the arr at the end and it\\'s value is exactly what\\'s expected.\\n`       \\n        \\n        left = 0\\n        size = len(arr)\\n\\n        if 0 in arr:\\n            while left < size:\\n                if arr[left] == 0 and left + 1 < size:\\n                    temp = arr[left + 1:]\\n                    arr[left + 1] = 0\\n                    arr = arr[:left + 2] + temp\\n                    left += 2\\n                else:\\n                    left += 1\\n            arr = arr[:size]\\n            #print(arr)`"
                    }
                ]
            },
            {
                "id": 2032837,
                "content": [
                    {
                        "username": "iuri0072",
                        "content": "Hi! does anyone knows why my solution won\\'t work? I\\'m not talking about how easier or harder it would be, or more efficient. but i modified my input, and for some reason it is not reflecting on the output:\\n\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        arrSize = len(arr)\\n        i = 0\\n        while i < arrSize:\\n            if arr[i] == 0:\\n                aux = arr[i+1 : arrSize - 1]\\n                arr = arr[:i+1]\\n                arr.append(0)\\n                for j in aux:\\n                    arr.append(j)\\n                i += 1\\n            i += 1\\n        #print (arr)"
                    },
                    {
                        "username": "iuri0072",
                        "content": "[@ChethanKailashnath](/ChethanKailashnath) \nthanks a lot for the reply. I think i understood what's going on by your explanation. managed to solve the problem using arr.insert and it works well :)"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "Here you are trying to re assign the \"arr\" variable. which means you are creating a new list and modifying it. which does not affect the original arr list. To solve you need to manipulate the original array. Instead of slicing the array, you can try index manipulation."
                    },
                    {
                        "username": "Applethal",
                        "content": "<details>\\n  <summary>Spoiler warning</summary>\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        n = arr.count(0)\\n        arr1 = arr.copy()\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                arr1.insert(i+1,0)\\n                \\n                arr1.pop(-1)\\n        \\n        \\n        \\n        arr[:] = arr1\\n        \\n\\n</details>\\nMade it to testcase 13/31"
                    },
                    {
                        "username": "skavale",
                        "content": "this is not easy its a mdeium"
                    },
                    {
                        "username": "shailesh_rajpurohit",
                        "content": "This sh*t needs to be Medium level."
                    },
                    {
                        "username": "RiGa7",
                        "content": "I\\'m getting a runtime error with [8,4,5,0,0,0,0,7] test case. Can anyone figure out the mistake in the code?\\n\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        for(int i = 0 ; i<arr.size() ;i++)\\n        {\\n             if(arr[i]==0){\\n                 for (int j = arr.size()-2; j > i; j-- )\\n                 {\\n                    arr[j + 1] = arr[j];   \\n                 } \\n                 arr[i+1] = 0;\\n                 i++;\\n             }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "kennyhml",
                        "content": "Should be a medium question and just let the ugly solutions TLE"
                    },
                    {
                        "username": "vianj26",
                        "content": "the no return value makes it complicated."
                    },
                    {
                        "username": "mochiball",
                        "content": "Easy problem to use O(n) space. Medium if we do O(1) space "
                    },
                    {
                        "username": "kartikey090803",
                        "content": "\\n// can someone tell me what\\'s wrong with this ??\\n\\nvoid duplicateZeros(vector<int>& arr) {\\n        \\n        vector<int>N;\\n        for(int i=0; i<N.size(); i++)\\n        {\\n            N.push_back(arr[i]);\\n        }\\n\\n        int i,j;\\n        int n=arr.size();\\n\\n        for(i=0,j=0;i<n,j<n;i++,j++)\\n        {\\n            if(N[j]==0)\\n            {\\n                arr[i]=0;\\n                arr[i+1]=0;\\n                i++;\\n            }\\n            else\\n            {\\n                arr[i]=N[j];\\n            }\\n        }\\n\\n    } "
                    },
                    {
                        "username": "user2740qi",
                        "content": "You need to perform in place update."
                    },
                    {
                        "username": "rishabhtomar2014",
                        "content": "Can anyone tell me what\\'s wrong with my approach?\\nI tried printing the arr at the end and it\\'s value is exactly what\\'s expected.\\n`       \\n        \\n        left = 0\\n        size = len(arr)\\n\\n        if 0 in arr:\\n            while left < size:\\n                if arr[left] == 0 and left + 1 < size:\\n                    temp = arr[left + 1:]\\n                    arr[left + 1] = 0\\n                    arr = arr[:left + 2] + temp\\n                    left += 2\\n                else:\\n                    left += 1\\n            arr = arr[:size]\\n            #print(arr)`"
                    }
                ]
            },
            {
                "id": 1998212,
                "content": [
                    {
                        "username": "iuri0072",
                        "content": "Hi! does anyone knows why my solution won\\'t work? I\\'m not talking about how easier or harder it would be, or more efficient. but i modified my input, and for some reason it is not reflecting on the output:\\n\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        arrSize = len(arr)\\n        i = 0\\n        while i < arrSize:\\n            if arr[i] == 0:\\n                aux = arr[i+1 : arrSize - 1]\\n                arr = arr[:i+1]\\n                arr.append(0)\\n                for j in aux:\\n                    arr.append(j)\\n                i += 1\\n            i += 1\\n        #print (arr)"
                    },
                    {
                        "username": "iuri0072",
                        "content": "[@ChethanKailashnath](/ChethanKailashnath) \nthanks a lot for the reply. I think i understood what's going on by your explanation. managed to solve the problem using arr.insert and it works well :)"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "Here you are trying to re assign the \"arr\" variable. which means you are creating a new list and modifying it. which does not affect the original arr list. To solve you need to manipulate the original array. Instead of slicing the array, you can try index manipulation."
                    },
                    {
                        "username": "Applethal",
                        "content": "<details>\\n  <summary>Spoiler warning</summary>\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        n = arr.count(0)\\n        arr1 = arr.copy()\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                arr1.insert(i+1,0)\\n                \\n                arr1.pop(-1)\\n        \\n        \\n        \\n        arr[:] = arr1\\n        \\n\\n</details>\\nMade it to testcase 13/31"
                    },
                    {
                        "username": "skavale",
                        "content": "this is not easy its a mdeium"
                    },
                    {
                        "username": "shailesh_rajpurohit",
                        "content": "This sh*t needs to be Medium level."
                    },
                    {
                        "username": "RiGa7",
                        "content": "I\\'m getting a runtime error with [8,4,5,0,0,0,0,7] test case. Can anyone figure out the mistake in the code?\\n\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        for(int i = 0 ; i<arr.size() ;i++)\\n        {\\n             if(arr[i]==0){\\n                 for (int j = arr.size()-2; j > i; j-- )\\n                 {\\n                    arr[j + 1] = arr[j];   \\n                 } \\n                 arr[i+1] = 0;\\n                 i++;\\n             }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "kennyhml",
                        "content": "Should be a medium question and just let the ugly solutions TLE"
                    },
                    {
                        "username": "vianj26",
                        "content": "the no return value makes it complicated."
                    },
                    {
                        "username": "mochiball",
                        "content": "Easy problem to use O(n) space. Medium if we do O(1) space "
                    },
                    {
                        "username": "kartikey090803",
                        "content": "\\n// can someone tell me what\\'s wrong with this ??\\n\\nvoid duplicateZeros(vector<int>& arr) {\\n        \\n        vector<int>N;\\n        for(int i=0; i<N.size(); i++)\\n        {\\n            N.push_back(arr[i]);\\n        }\\n\\n        int i,j;\\n        int n=arr.size();\\n\\n        for(i=0,j=0;i<n,j<n;i++,j++)\\n        {\\n            if(N[j]==0)\\n            {\\n                arr[i]=0;\\n                arr[i+1]=0;\\n                i++;\\n            }\\n            else\\n            {\\n                arr[i]=N[j];\\n            }\\n        }\\n\\n    } "
                    },
                    {
                        "username": "user2740qi",
                        "content": "You need to perform in place update."
                    },
                    {
                        "username": "rishabhtomar2014",
                        "content": "Can anyone tell me what\\'s wrong with my approach?\\nI tried printing the arr at the end and it\\'s value is exactly what\\'s expected.\\n`       \\n        \\n        left = 0\\n        size = len(arr)\\n\\n        if 0 in arr:\\n            while left < size:\\n                if arr[left] == 0 and left + 1 < size:\\n                    temp = arr[left + 1:]\\n                    arr[left + 1] = 0\\n                    arr = arr[:left + 2] + temp\\n                    left += 2\\n                else:\\n                    left += 1\\n            arr = arr[:size]\\n            #print(arr)`"
                    }
                ]
            },
            {
                "id": 1991616,
                "content": [
                    {
                        "username": "iuri0072",
                        "content": "Hi! does anyone knows why my solution won\\'t work? I\\'m not talking about how easier or harder it would be, or more efficient. but i modified my input, and for some reason it is not reflecting on the output:\\n\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        arrSize = len(arr)\\n        i = 0\\n        while i < arrSize:\\n            if arr[i] == 0:\\n                aux = arr[i+1 : arrSize - 1]\\n                arr = arr[:i+1]\\n                arr.append(0)\\n                for j in aux:\\n                    arr.append(j)\\n                i += 1\\n            i += 1\\n        #print (arr)"
                    },
                    {
                        "username": "iuri0072",
                        "content": "[@ChethanKailashnath](/ChethanKailashnath) \nthanks a lot for the reply. I think i understood what's going on by your explanation. managed to solve the problem using arr.insert and it works well :)"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "Here you are trying to re assign the \"arr\" variable. which means you are creating a new list and modifying it. which does not affect the original arr list. To solve you need to manipulate the original array. Instead of slicing the array, you can try index manipulation."
                    },
                    {
                        "username": "Applethal",
                        "content": "<details>\\n  <summary>Spoiler warning</summary>\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        n = arr.count(0)\\n        arr1 = arr.copy()\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                arr1.insert(i+1,0)\\n                \\n                arr1.pop(-1)\\n        \\n        \\n        \\n        arr[:] = arr1\\n        \\n\\n</details>\\nMade it to testcase 13/31"
                    },
                    {
                        "username": "skavale",
                        "content": "this is not easy its a mdeium"
                    },
                    {
                        "username": "shailesh_rajpurohit",
                        "content": "This sh*t needs to be Medium level."
                    },
                    {
                        "username": "RiGa7",
                        "content": "I\\'m getting a runtime error with [8,4,5,0,0,0,0,7] test case. Can anyone figure out the mistake in the code?\\n\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        for(int i = 0 ; i<arr.size() ;i++)\\n        {\\n             if(arr[i]==0){\\n                 for (int j = arr.size()-2; j > i; j-- )\\n                 {\\n                    arr[j + 1] = arr[j];   \\n                 } \\n                 arr[i+1] = 0;\\n                 i++;\\n             }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "kennyhml",
                        "content": "Should be a medium question and just let the ugly solutions TLE"
                    },
                    {
                        "username": "vianj26",
                        "content": "the no return value makes it complicated."
                    },
                    {
                        "username": "mochiball",
                        "content": "Easy problem to use O(n) space. Medium if we do O(1) space "
                    },
                    {
                        "username": "kartikey090803",
                        "content": "\\n// can someone tell me what\\'s wrong with this ??\\n\\nvoid duplicateZeros(vector<int>& arr) {\\n        \\n        vector<int>N;\\n        for(int i=0; i<N.size(); i++)\\n        {\\n            N.push_back(arr[i]);\\n        }\\n\\n        int i,j;\\n        int n=arr.size();\\n\\n        for(i=0,j=0;i<n,j<n;i++,j++)\\n        {\\n            if(N[j]==0)\\n            {\\n                arr[i]=0;\\n                arr[i+1]=0;\\n                i++;\\n            }\\n            else\\n            {\\n                arr[i]=N[j];\\n            }\\n        }\\n\\n    } "
                    },
                    {
                        "username": "user2740qi",
                        "content": "You need to perform in place update."
                    },
                    {
                        "username": "rishabhtomar2014",
                        "content": "Can anyone tell me what\\'s wrong with my approach?\\nI tried printing the arr at the end and it\\'s value is exactly what\\'s expected.\\n`       \\n        \\n        left = 0\\n        size = len(arr)\\n\\n        if 0 in arr:\\n            while left < size:\\n                if arr[left] == 0 and left + 1 < size:\\n                    temp = arr[left + 1:]\\n                    arr[left + 1] = 0\\n                    arr = arr[:left + 2] + temp\\n                    left += 2\\n                else:\\n                    left += 1\\n            arr = arr[:size]\\n            #print(arr)`"
                    }
                ]
            },
            {
                "id": 1984861,
                "content": [
                    {
                        "username": "iuri0072",
                        "content": "Hi! does anyone knows why my solution won\\'t work? I\\'m not talking about how easier or harder it would be, or more efficient. but i modified my input, and for some reason it is not reflecting on the output:\\n\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        arrSize = len(arr)\\n        i = 0\\n        while i < arrSize:\\n            if arr[i] == 0:\\n                aux = arr[i+1 : arrSize - 1]\\n                arr = arr[:i+1]\\n                arr.append(0)\\n                for j in aux:\\n                    arr.append(j)\\n                i += 1\\n            i += 1\\n        #print (arr)"
                    },
                    {
                        "username": "iuri0072",
                        "content": "[@ChethanKailashnath](/ChethanKailashnath) \nthanks a lot for the reply. I think i understood what's going on by your explanation. managed to solve the problem using arr.insert and it works well :)"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "Here you are trying to re assign the \"arr\" variable. which means you are creating a new list and modifying it. which does not affect the original arr list. To solve you need to manipulate the original array. Instead of slicing the array, you can try index manipulation."
                    },
                    {
                        "username": "Applethal",
                        "content": "<details>\\n  <summary>Spoiler warning</summary>\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        n = arr.count(0)\\n        arr1 = arr.copy()\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                arr1.insert(i+1,0)\\n                \\n                arr1.pop(-1)\\n        \\n        \\n        \\n        arr[:] = arr1\\n        \\n\\n</details>\\nMade it to testcase 13/31"
                    },
                    {
                        "username": "skavale",
                        "content": "this is not easy its a mdeium"
                    },
                    {
                        "username": "shailesh_rajpurohit",
                        "content": "This sh*t needs to be Medium level."
                    },
                    {
                        "username": "RiGa7",
                        "content": "I\\'m getting a runtime error with [8,4,5,0,0,0,0,7] test case. Can anyone figure out the mistake in the code?\\n\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        for(int i = 0 ; i<arr.size() ;i++)\\n        {\\n             if(arr[i]==0){\\n                 for (int j = arr.size()-2; j > i; j-- )\\n                 {\\n                    arr[j + 1] = arr[j];   \\n                 } \\n                 arr[i+1] = 0;\\n                 i++;\\n             }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "kennyhml",
                        "content": "Should be a medium question and just let the ugly solutions TLE"
                    },
                    {
                        "username": "vianj26",
                        "content": "the no return value makes it complicated."
                    },
                    {
                        "username": "mochiball",
                        "content": "Easy problem to use O(n) space. Medium if we do O(1) space "
                    },
                    {
                        "username": "kartikey090803",
                        "content": "\\n// can someone tell me what\\'s wrong with this ??\\n\\nvoid duplicateZeros(vector<int>& arr) {\\n        \\n        vector<int>N;\\n        for(int i=0; i<N.size(); i++)\\n        {\\n            N.push_back(arr[i]);\\n        }\\n\\n        int i,j;\\n        int n=arr.size();\\n\\n        for(i=0,j=0;i<n,j<n;i++,j++)\\n        {\\n            if(N[j]==0)\\n            {\\n                arr[i]=0;\\n                arr[i+1]=0;\\n                i++;\\n            }\\n            else\\n            {\\n                arr[i]=N[j];\\n            }\\n        }\\n\\n    } "
                    },
                    {
                        "username": "user2740qi",
                        "content": "You need to perform in place update."
                    },
                    {
                        "username": "rishabhtomar2014",
                        "content": "Can anyone tell me what\\'s wrong with my approach?\\nI tried printing the arr at the end and it\\'s value is exactly what\\'s expected.\\n`       \\n        \\n        left = 0\\n        size = len(arr)\\n\\n        if 0 in arr:\\n            while left < size:\\n                if arr[left] == 0 and left + 1 < size:\\n                    temp = arr[left + 1:]\\n                    arr[left + 1] = 0\\n                    arr = arr[:left + 2] + temp\\n                    left += 2\\n                else:\\n                    left += 1\\n            arr = arr[:size]\\n            #print(arr)`"
                    }
                ]
            },
            {
                "id": 1957691,
                "content": [
                    {
                        "username": "iuri0072",
                        "content": "Hi! does anyone knows why my solution won\\'t work? I\\'m not talking about how easier or harder it would be, or more efficient. but i modified my input, and for some reason it is not reflecting on the output:\\n\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        arrSize = len(arr)\\n        i = 0\\n        while i < arrSize:\\n            if arr[i] == 0:\\n                aux = arr[i+1 : arrSize - 1]\\n                arr = arr[:i+1]\\n                arr.append(0)\\n                for j in aux:\\n                    arr.append(j)\\n                i += 1\\n            i += 1\\n        #print (arr)"
                    },
                    {
                        "username": "iuri0072",
                        "content": "[@ChethanKailashnath](/ChethanKailashnath) \nthanks a lot for the reply. I think i understood what's going on by your explanation. managed to solve the problem using arr.insert and it works well :)"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "Here you are trying to re assign the \"arr\" variable. which means you are creating a new list and modifying it. which does not affect the original arr list. To solve you need to manipulate the original array. Instead of slicing the array, you can try index manipulation."
                    },
                    {
                        "username": "Applethal",
                        "content": "<details>\\n  <summary>Spoiler warning</summary>\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        n = arr.count(0)\\n        arr1 = arr.copy()\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                arr1.insert(i+1,0)\\n                \\n                arr1.pop(-1)\\n        \\n        \\n        \\n        arr[:] = arr1\\n        \\n\\n</details>\\nMade it to testcase 13/31"
                    },
                    {
                        "username": "skavale",
                        "content": "this is not easy its a mdeium"
                    },
                    {
                        "username": "shailesh_rajpurohit",
                        "content": "This sh*t needs to be Medium level."
                    },
                    {
                        "username": "RiGa7",
                        "content": "I\\'m getting a runtime error with [8,4,5,0,0,0,0,7] test case. Can anyone figure out the mistake in the code?\\n\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        for(int i = 0 ; i<arr.size() ;i++)\\n        {\\n             if(arr[i]==0){\\n                 for (int j = arr.size()-2; j > i; j-- )\\n                 {\\n                    arr[j + 1] = arr[j];   \\n                 } \\n                 arr[i+1] = 0;\\n                 i++;\\n             }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "kennyhml",
                        "content": "Should be a medium question and just let the ugly solutions TLE"
                    },
                    {
                        "username": "vianj26",
                        "content": "the no return value makes it complicated."
                    },
                    {
                        "username": "mochiball",
                        "content": "Easy problem to use O(n) space. Medium if we do O(1) space "
                    },
                    {
                        "username": "kartikey090803",
                        "content": "\\n// can someone tell me what\\'s wrong with this ??\\n\\nvoid duplicateZeros(vector<int>& arr) {\\n        \\n        vector<int>N;\\n        for(int i=0; i<N.size(); i++)\\n        {\\n            N.push_back(arr[i]);\\n        }\\n\\n        int i,j;\\n        int n=arr.size();\\n\\n        for(i=0,j=0;i<n,j<n;i++,j++)\\n        {\\n            if(N[j]==0)\\n            {\\n                arr[i]=0;\\n                arr[i+1]=0;\\n                i++;\\n            }\\n            else\\n            {\\n                arr[i]=N[j];\\n            }\\n        }\\n\\n    } "
                    },
                    {
                        "username": "user2740qi",
                        "content": "You need to perform in place update."
                    },
                    {
                        "username": "rishabhtomar2014",
                        "content": "Can anyone tell me what\\'s wrong with my approach?\\nI tried printing the arr at the end and it\\'s value is exactly what\\'s expected.\\n`       \\n        \\n        left = 0\\n        size = len(arr)\\n\\n        if 0 in arr:\\n            while left < size:\\n                if arr[left] == 0 and left + 1 < size:\\n                    temp = arr[left + 1:]\\n                    arr[left + 1] = 0\\n                    arr = arr[:left + 2] + temp\\n                    left += 2\\n                else:\\n                    left += 1\\n            arr = arr[:size]\\n            #print(arr)`"
                    }
                ]
            },
            {
                "id": 1950692,
                "content": [
                    {
                        "username": "iuri0072",
                        "content": "Hi! does anyone knows why my solution won\\'t work? I\\'m not talking about how easier or harder it would be, or more efficient. but i modified my input, and for some reason it is not reflecting on the output:\\n\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        arrSize = len(arr)\\n        i = 0\\n        while i < arrSize:\\n            if arr[i] == 0:\\n                aux = arr[i+1 : arrSize - 1]\\n                arr = arr[:i+1]\\n                arr.append(0)\\n                for j in aux:\\n                    arr.append(j)\\n                i += 1\\n            i += 1\\n        #print (arr)"
                    },
                    {
                        "username": "iuri0072",
                        "content": "[@ChethanKailashnath](/ChethanKailashnath) \nthanks a lot for the reply. I think i understood what's going on by your explanation. managed to solve the problem using arr.insert and it works well :)"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "Here you are trying to re assign the \"arr\" variable. which means you are creating a new list and modifying it. which does not affect the original arr list. To solve you need to manipulate the original array. Instead of slicing the array, you can try index manipulation."
                    },
                    {
                        "username": "Applethal",
                        "content": "<details>\\n  <summary>Spoiler warning</summary>\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        n = arr.count(0)\\n        arr1 = arr.copy()\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                arr1.insert(i+1,0)\\n                \\n                arr1.pop(-1)\\n        \\n        \\n        \\n        arr[:] = arr1\\n        \\n\\n</details>\\nMade it to testcase 13/31"
                    },
                    {
                        "username": "skavale",
                        "content": "this is not easy its a mdeium"
                    },
                    {
                        "username": "shailesh_rajpurohit",
                        "content": "This sh*t needs to be Medium level."
                    },
                    {
                        "username": "RiGa7",
                        "content": "I\\'m getting a runtime error with [8,4,5,0,0,0,0,7] test case. Can anyone figure out the mistake in the code?\\n\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        for(int i = 0 ; i<arr.size() ;i++)\\n        {\\n             if(arr[i]==0){\\n                 for (int j = arr.size()-2; j > i; j-- )\\n                 {\\n                    arr[j + 1] = arr[j];   \\n                 } \\n                 arr[i+1] = 0;\\n                 i++;\\n             }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "kennyhml",
                        "content": "Should be a medium question and just let the ugly solutions TLE"
                    },
                    {
                        "username": "vianj26",
                        "content": "the no return value makes it complicated."
                    },
                    {
                        "username": "mochiball",
                        "content": "Easy problem to use O(n) space. Medium if we do O(1) space "
                    },
                    {
                        "username": "kartikey090803",
                        "content": "\\n// can someone tell me what\\'s wrong with this ??\\n\\nvoid duplicateZeros(vector<int>& arr) {\\n        \\n        vector<int>N;\\n        for(int i=0; i<N.size(); i++)\\n        {\\n            N.push_back(arr[i]);\\n        }\\n\\n        int i,j;\\n        int n=arr.size();\\n\\n        for(i=0,j=0;i<n,j<n;i++,j++)\\n        {\\n            if(N[j]==0)\\n            {\\n                arr[i]=0;\\n                arr[i+1]=0;\\n                i++;\\n            }\\n            else\\n            {\\n                arr[i]=N[j];\\n            }\\n        }\\n\\n    } "
                    },
                    {
                        "username": "user2740qi",
                        "content": "You need to perform in place update."
                    },
                    {
                        "username": "rishabhtomar2014",
                        "content": "Can anyone tell me what\\'s wrong with my approach?\\nI tried printing the arr at the end and it\\'s value is exactly what\\'s expected.\\n`       \\n        \\n        left = 0\\n        size = len(arr)\\n\\n        if 0 in arr:\\n            while left < size:\\n                if arr[left] == 0 and left + 1 < size:\\n                    temp = arr[left + 1:]\\n                    arr[left + 1] = 0\\n                    arr = arr[:left + 2] + temp\\n                    left += 2\\n                else:\\n                    left += 1\\n            arr = arr[:size]\\n            #print(arr)`"
                    }
                ]
            },
            {
                "id": 1933071,
                "content": [
                    {
                        "username": "iuri0072",
                        "content": "Hi! does anyone knows why my solution won\\'t work? I\\'m not talking about how easier or harder it would be, or more efficient. but i modified my input, and for some reason it is not reflecting on the output:\\n\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        arrSize = len(arr)\\n        i = 0\\n        while i < arrSize:\\n            if arr[i] == 0:\\n                aux = arr[i+1 : arrSize - 1]\\n                arr = arr[:i+1]\\n                arr.append(0)\\n                for j in aux:\\n                    arr.append(j)\\n                i += 1\\n            i += 1\\n        #print (arr)"
                    },
                    {
                        "username": "iuri0072",
                        "content": "[@ChethanKailashnath](/ChethanKailashnath) \nthanks a lot for the reply. I think i understood what's going on by your explanation. managed to solve the problem using arr.insert and it works well :)"
                    },
                    {
                        "username": "ChethanKailashnath",
                        "content": "Here you are trying to re assign the \"arr\" variable. which means you are creating a new list and modifying it. which does not affect the original arr list. To solve you need to manipulate the original array. Instead of slicing the array, you can try index manipulation."
                    },
                    {
                        "username": "Applethal",
                        "content": "<details>\\n  <summary>Spoiler warning</summary>\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        n = arr.count(0)\\n        arr1 = arr.copy()\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                arr1.insert(i+1,0)\\n                \\n                arr1.pop(-1)\\n        \\n        \\n        \\n        arr[:] = arr1\\n        \\n\\n</details>\\nMade it to testcase 13/31"
                    },
                    {
                        "username": "skavale",
                        "content": "this is not easy its a mdeium"
                    },
                    {
                        "username": "shailesh_rajpurohit",
                        "content": "This sh*t needs to be Medium level."
                    },
                    {
                        "username": "RiGa7",
                        "content": "I\\'m getting a runtime error with [8,4,5,0,0,0,0,7] test case. Can anyone figure out the mistake in the code?\\n\\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n        for(int i = 0 ; i<arr.size() ;i++)\\n        {\\n             if(arr[i]==0){\\n                 for (int j = arr.size()-2; j > i; j-- )\\n                 {\\n                    arr[j + 1] = arr[j];   \\n                 } \\n                 arr[i+1] = 0;\\n                 i++;\\n             }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "kennyhml",
                        "content": "Should be a medium question and just let the ugly solutions TLE"
                    },
                    {
                        "username": "vianj26",
                        "content": "the no return value makes it complicated."
                    },
                    {
                        "username": "mochiball",
                        "content": "Easy problem to use O(n) space. Medium if we do O(1) space "
                    },
                    {
                        "username": "kartikey090803",
                        "content": "\\n// can someone tell me what\\'s wrong with this ??\\n\\nvoid duplicateZeros(vector<int>& arr) {\\n        \\n        vector<int>N;\\n        for(int i=0; i<N.size(); i++)\\n        {\\n            N.push_back(arr[i]);\\n        }\\n\\n        int i,j;\\n        int n=arr.size();\\n\\n        for(i=0,j=0;i<n,j<n;i++,j++)\\n        {\\n            if(N[j]==0)\\n            {\\n                arr[i]=0;\\n                arr[i+1]=0;\\n                i++;\\n            }\\n            else\\n            {\\n                arr[i]=N[j];\\n            }\\n        }\\n\\n    } "
                    },
                    {
                        "username": "user2740qi",
                        "content": "You need to perform in place update."
                    },
                    {
                        "username": "rishabhtomar2014",
                        "content": "Can anyone tell me what\\'s wrong with my approach?\\nI tried printing the arr at the end and it\\'s value is exactly what\\'s expected.\\n`       \\n        \\n        left = 0\\n        size = len(arr)\\n\\n        if 0 in arr:\\n            while left < size:\\n                if arr[left] == 0 and left + 1 < size:\\n                    temp = arr[left + 1:]\\n                    arr[left + 1] = 0\\n                    arr = arr[:left + 2] + temp\\n                    left += 2\\n                else:\\n                    left += 1\\n            arr = arr[:size]\\n            #print(arr)`"
                    }
                ]
            },
            {
                "id": 1910065,
                "content": [
                    {
                        "username": "lokesh_uppala_G4",
                        "content": "lis=\"\".join([str(i) for i in arr])\\nlis=lis.replace(\\'0\\',\\'00\\')\\narr = list(map(int,lis))[:len(arr)]\\nreturn arr\\n\\ncan I know where the code is wrong\\n"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "no need to return anything. you need to modify the array `arr` itself (using methods, don\\'t try to reassign it) "
                    },
                    {
                        "username": "abj_32",
                        "content": "I saw people writing a very complex code here. Here is what I have written and I think its pretty simple \\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n     int i,j,n;\\n     i=0;\\n     n=arr.size();\\n     while(i<n)\\n     {\\n         if(arr[i]==0)\\n         {\\n             j=n-1;\\n             while(j>i)\\n             {\\n                 arr[j]=arr[j-1];\\n                 j--;\\n             }\\n             if(i+1 < n) \\n             { \\n                    arr[i+1] = 0;\\n                    i++;\\n             }\\n         }\\n         i++;\\n     }   \\n    }\\n};\\n"
                    },
                    {
                        "username": "Bhashkar_3241",
                        "content": "i am unable to understand how he is deleting element &inserting zeroes.\nplease explain anyone"
                    },
                    {
                        "username": "debjeetsarkar",
                        "content": "Golang sol doesnt get accepted. \\n\\n `import (\\n\"fmt\"\\n)\\n\\nfunc shiftRight(arr []int, pos int) []int{\\nnew_arr := append(arr, 0) // Make space\\ncopy(new_arr[pos+1:], new_arr[pos:]) // shift elements\\nreturn new_arr\\n}\\n\\nfunc duplicateZeros(arr []int) {\\nl := len(arr)\\nfor i := 0; i < l; i++ {\\nif arr[i] == 0 {\\narr = shiftRight(arr, i+1)\\narr[i+1] = 0\\ni +=1 // Move position beacuse i+1 has now been replaced by a 0\\n}\\n}\\narr = arr[:l]\\nfmt.Println(arr)\\n}`\\n\\n"
                    },
                    {
                        "username": "geckguy",
                        "content": "\\n class Solution: \\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        z=set()\\n        n = len(arr)\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                z.add(i)\\n        i=0\\n        while i < n + len(z) and len(z) > 0:\\n            if arr[i] ==  0:\\n                arr.insert(i,0)\\n                i=i+2\\n            else:\\n                i=i+1\\n        arr = arr[0:n]\\n\\nwhy isnt this code working in LC, it works fine in vscode"
                    },
                    {
                        "username": "timyang2333",
                        "content": "If you getting an output of [1,0,0,0,0,0,0,0] like this, don\\'t forget to skip next one which already duplicated as zero by your code, so skip the next one and focus on next next one"
                    },
                    {
                        "username": "coddar",
                        "content": "I have a working solution, but I do not like it. It seems O(n^2) in worst case. The runtime is also beating only 7% or so. Does anybody have a better solution? Mine is below:\\n\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] == 0:\\n                for j in range(len(arr)-1, i+1, -1):\\n                    arr[j] = arr[j-1]\\n                if i+1 < len(arr): arr[i+1] = 0\\n                i += 1\\n            i += 1\\n```"
                    },
                    {
                        "username": "rahulsanjayshah",
                        "content": "Can anyone help me find the error in this?\\nFor an input of arr =[1,0,2,3,0,4,5,0], getting an output of [1,0,0,0,0,0,0,0] instead of [1,0,0,2,3,0,0,4]\\n\\n`for i in range(len(arr)):\\n            if(arr[i]==0):\\n                j=len(arr)-1\\n                while(j>i):\\n                    arr[j] = arr[j-1]\\n                    j=j-1\\n                I+=1\\n        return arr`"
                    },
                    {
                        "username": "Bhanu_009",
                        "content": "Your not skipping the additional zero. like after the first zero the iteration should go to 2 but in your case it coming to the duplicate zero that is added it goes until the loop ends. Solution is to skip the iteration after adding zero encountered."
                    },
                    {
                        "username": "Mradul_singh0100-",
                        "content": "    `def duplicateZeros(self, arr: List[int]) -> None:`\n        `l = len(arr)`\n        `d = [i for i in range(l) if arr[i] == 0]`\n       ` [arr.insert(j+d[j], 0) for j in range(len(d))]  `\n        `arr[:] = arr[:l]`"
                    },
                    {
                        "username": "ajinkode",
                        "content": "Good question!"
                    }
                ]
            },
            {
                "id": 1841553,
                "content": [
                    {
                        "username": "lokesh_uppala_G4",
                        "content": "lis=\"\".join([str(i) for i in arr])\\nlis=lis.replace(\\'0\\',\\'00\\')\\narr = list(map(int,lis))[:len(arr)]\\nreturn arr\\n\\ncan I know where the code is wrong\\n"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "no need to return anything. you need to modify the array `arr` itself (using methods, don\\'t try to reassign it) "
                    },
                    {
                        "username": "abj_32",
                        "content": "I saw people writing a very complex code here. Here is what I have written and I think its pretty simple \\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n     int i,j,n;\\n     i=0;\\n     n=arr.size();\\n     while(i<n)\\n     {\\n         if(arr[i]==0)\\n         {\\n             j=n-1;\\n             while(j>i)\\n             {\\n                 arr[j]=arr[j-1];\\n                 j--;\\n             }\\n             if(i+1 < n) \\n             { \\n                    arr[i+1] = 0;\\n                    i++;\\n             }\\n         }\\n         i++;\\n     }   \\n    }\\n};\\n"
                    },
                    {
                        "username": "Bhashkar_3241",
                        "content": "i am unable to understand how he is deleting element &inserting zeroes.\nplease explain anyone"
                    },
                    {
                        "username": "debjeetsarkar",
                        "content": "Golang sol doesnt get accepted. \\n\\n `import (\\n\"fmt\"\\n)\\n\\nfunc shiftRight(arr []int, pos int) []int{\\nnew_arr := append(arr, 0) // Make space\\ncopy(new_arr[pos+1:], new_arr[pos:]) // shift elements\\nreturn new_arr\\n}\\n\\nfunc duplicateZeros(arr []int) {\\nl := len(arr)\\nfor i := 0; i < l; i++ {\\nif arr[i] == 0 {\\narr = shiftRight(arr, i+1)\\narr[i+1] = 0\\ni +=1 // Move position beacuse i+1 has now been replaced by a 0\\n}\\n}\\narr = arr[:l]\\nfmt.Println(arr)\\n}`\\n\\n"
                    },
                    {
                        "username": "geckguy",
                        "content": "\\n class Solution: \\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        z=set()\\n        n = len(arr)\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                z.add(i)\\n        i=0\\n        while i < n + len(z) and len(z) > 0:\\n            if arr[i] ==  0:\\n                arr.insert(i,0)\\n                i=i+2\\n            else:\\n                i=i+1\\n        arr = arr[0:n]\\n\\nwhy isnt this code working in LC, it works fine in vscode"
                    },
                    {
                        "username": "timyang2333",
                        "content": "If you getting an output of [1,0,0,0,0,0,0,0] like this, don\\'t forget to skip next one which already duplicated as zero by your code, so skip the next one and focus on next next one"
                    },
                    {
                        "username": "coddar",
                        "content": "I have a working solution, but I do not like it. It seems O(n^2) in worst case. The runtime is also beating only 7% or so. Does anybody have a better solution? Mine is below:\\n\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] == 0:\\n                for j in range(len(arr)-1, i+1, -1):\\n                    arr[j] = arr[j-1]\\n                if i+1 < len(arr): arr[i+1] = 0\\n                i += 1\\n            i += 1\\n```"
                    },
                    {
                        "username": "rahulsanjayshah",
                        "content": "Can anyone help me find the error in this?\\nFor an input of arr =[1,0,2,3,0,4,5,0], getting an output of [1,0,0,0,0,0,0,0] instead of [1,0,0,2,3,0,0,4]\\n\\n`for i in range(len(arr)):\\n            if(arr[i]==0):\\n                j=len(arr)-1\\n                while(j>i):\\n                    arr[j] = arr[j-1]\\n                    j=j-1\\n                I+=1\\n        return arr`"
                    },
                    {
                        "username": "Bhanu_009",
                        "content": "Your not skipping the additional zero. like after the first zero the iteration should go to 2 but in your case it coming to the duplicate zero that is added it goes until the loop ends. Solution is to skip the iteration after adding zero encountered."
                    },
                    {
                        "username": "Mradul_singh0100-",
                        "content": "    `def duplicateZeros(self, arr: List[int]) -> None:`\n        `l = len(arr)`\n        `d = [i for i in range(l) if arr[i] == 0]`\n       ` [arr.insert(j+d[j], 0) for j in range(len(d))]  `\n        `arr[:] = arr[:l]`"
                    },
                    {
                        "username": "ajinkode",
                        "content": "Good question!"
                    }
                ]
            },
            {
                "id": 1832922,
                "content": [
                    {
                        "username": "lokesh_uppala_G4",
                        "content": "lis=\"\".join([str(i) for i in arr])\\nlis=lis.replace(\\'0\\',\\'00\\')\\narr = list(map(int,lis))[:len(arr)]\\nreturn arr\\n\\ncan I know where the code is wrong\\n"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "no need to return anything. you need to modify the array `arr` itself (using methods, don\\'t try to reassign it) "
                    },
                    {
                        "username": "abj_32",
                        "content": "I saw people writing a very complex code here. Here is what I have written and I think its pretty simple \\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n     int i,j,n;\\n     i=0;\\n     n=arr.size();\\n     while(i<n)\\n     {\\n         if(arr[i]==0)\\n         {\\n             j=n-1;\\n             while(j>i)\\n             {\\n                 arr[j]=arr[j-1];\\n                 j--;\\n             }\\n             if(i+1 < n) \\n             { \\n                    arr[i+1] = 0;\\n                    i++;\\n             }\\n         }\\n         i++;\\n     }   \\n    }\\n};\\n"
                    },
                    {
                        "username": "Bhashkar_3241",
                        "content": "i am unable to understand how he is deleting element &inserting zeroes.\nplease explain anyone"
                    },
                    {
                        "username": "debjeetsarkar",
                        "content": "Golang sol doesnt get accepted. \\n\\n `import (\\n\"fmt\"\\n)\\n\\nfunc shiftRight(arr []int, pos int) []int{\\nnew_arr := append(arr, 0) // Make space\\ncopy(new_arr[pos+1:], new_arr[pos:]) // shift elements\\nreturn new_arr\\n}\\n\\nfunc duplicateZeros(arr []int) {\\nl := len(arr)\\nfor i := 0; i < l; i++ {\\nif arr[i] == 0 {\\narr = shiftRight(arr, i+1)\\narr[i+1] = 0\\ni +=1 // Move position beacuse i+1 has now been replaced by a 0\\n}\\n}\\narr = arr[:l]\\nfmt.Println(arr)\\n}`\\n\\n"
                    },
                    {
                        "username": "geckguy",
                        "content": "\\n class Solution: \\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        z=set()\\n        n = len(arr)\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                z.add(i)\\n        i=0\\n        while i < n + len(z) and len(z) > 0:\\n            if arr[i] ==  0:\\n                arr.insert(i,0)\\n                i=i+2\\n            else:\\n                i=i+1\\n        arr = arr[0:n]\\n\\nwhy isnt this code working in LC, it works fine in vscode"
                    },
                    {
                        "username": "timyang2333",
                        "content": "If you getting an output of [1,0,0,0,0,0,0,0] like this, don\\'t forget to skip next one which already duplicated as zero by your code, so skip the next one and focus on next next one"
                    },
                    {
                        "username": "coddar",
                        "content": "I have a working solution, but I do not like it. It seems O(n^2) in worst case. The runtime is also beating only 7% or so. Does anybody have a better solution? Mine is below:\\n\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] == 0:\\n                for j in range(len(arr)-1, i+1, -1):\\n                    arr[j] = arr[j-1]\\n                if i+1 < len(arr): arr[i+1] = 0\\n                i += 1\\n            i += 1\\n```"
                    },
                    {
                        "username": "rahulsanjayshah",
                        "content": "Can anyone help me find the error in this?\\nFor an input of arr =[1,0,2,3,0,4,5,0], getting an output of [1,0,0,0,0,0,0,0] instead of [1,0,0,2,3,0,0,4]\\n\\n`for i in range(len(arr)):\\n            if(arr[i]==0):\\n                j=len(arr)-1\\n                while(j>i):\\n                    arr[j] = arr[j-1]\\n                    j=j-1\\n                I+=1\\n        return arr`"
                    },
                    {
                        "username": "Bhanu_009",
                        "content": "Your not skipping the additional zero. like after the first zero the iteration should go to 2 but in your case it coming to the duplicate zero that is added it goes until the loop ends. Solution is to skip the iteration after adding zero encountered."
                    },
                    {
                        "username": "Mradul_singh0100-",
                        "content": "    `def duplicateZeros(self, arr: List[int]) -> None:`\n        `l = len(arr)`\n        `d = [i for i in range(l) if arr[i] == 0]`\n       ` [arr.insert(j+d[j], 0) for j in range(len(d))]  `\n        `arr[:] = arr[:l]`"
                    },
                    {
                        "username": "ajinkode",
                        "content": "Good question!"
                    }
                ]
            },
            {
                "id": 1810742,
                "content": [
                    {
                        "username": "lokesh_uppala_G4",
                        "content": "lis=\"\".join([str(i) for i in arr])\\nlis=lis.replace(\\'0\\',\\'00\\')\\narr = list(map(int,lis))[:len(arr)]\\nreturn arr\\n\\ncan I know where the code is wrong\\n"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "no need to return anything. you need to modify the array `arr` itself (using methods, don\\'t try to reassign it) "
                    },
                    {
                        "username": "abj_32",
                        "content": "I saw people writing a very complex code here. Here is what I have written and I think its pretty simple \\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n     int i,j,n;\\n     i=0;\\n     n=arr.size();\\n     while(i<n)\\n     {\\n         if(arr[i]==0)\\n         {\\n             j=n-1;\\n             while(j>i)\\n             {\\n                 arr[j]=arr[j-1];\\n                 j--;\\n             }\\n             if(i+1 < n) \\n             { \\n                    arr[i+1] = 0;\\n                    i++;\\n             }\\n         }\\n         i++;\\n     }   \\n    }\\n};\\n"
                    },
                    {
                        "username": "Bhashkar_3241",
                        "content": "i am unable to understand how he is deleting element &inserting zeroes.\nplease explain anyone"
                    },
                    {
                        "username": "debjeetsarkar",
                        "content": "Golang sol doesnt get accepted. \\n\\n `import (\\n\"fmt\"\\n)\\n\\nfunc shiftRight(arr []int, pos int) []int{\\nnew_arr := append(arr, 0) // Make space\\ncopy(new_arr[pos+1:], new_arr[pos:]) // shift elements\\nreturn new_arr\\n}\\n\\nfunc duplicateZeros(arr []int) {\\nl := len(arr)\\nfor i := 0; i < l; i++ {\\nif arr[i] == 0 {\\narr = shiftRight(arr, i+1)\\narr[i+1] = 0\\ni +=1 // Move position beacuse i+1 has now been replaced by a 0\\n}\\n}\\narr = arr[:l]\\nfmt.Println(arr)\\n}`\\n\\n"
                    },
                    {
                        "username": "geckguy",
                        "content": "\\n class Solution: \\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        z=set()\\n        n = len(arr)\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                z.add(i)\\n        i=0\\n        while i < n + len(z) and len(z) > 0:\\n            if arr[i] ==  0:\\n                arr.insert(i,0)\\n                i=i+2\\n            else:\\n                i=i+1\\n        arr = arr[0:n]\\n\\nwhy isnt this code working in LC, it works fine in vscode"
                    },
                    {
                        "username": "timyang2333",
                        "content": "If you getting an output of [1,0,0,0,0,0,0,0] like this, don\\'t forget to skip next one which already duplicated as zero by your code, so skip the next one and focus on next next one"
                    },
                    {
                        "username": "coddar",
                        "content": "I have a working solution, but I do not like it. It seems O(n^2) in worst case. The runtime is also beating only 7% or so. Does anybody have a better solution? Mine is below:\\n\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] == 0:\\n                for j in range(len(arr)-1, i+1, -1):\\n                    arr[j] = arr[j-1]\\n                if i+1 < len(arr): arr[i+1] = 0\\n                i += 1\\n            i += 1\\n```"
                    },
                    {
                        "username": "rahulsanjayshah",
                        "content": "Can anyone help me find the error in this?\\nFor an input of arr =[1,0,2,3,0,4,5,0], getting an output of [1,0,0,0,0,0,0,0] instead of [1,0,0,2,3,0,0,4]\\n\\n`for i in range(len(arr)):\\n            if(arr[i]==0):\\n                j=len(arr)-1\\n                while(j>i):\\n                    arr[j] = arr[j-1]\\n                    j=j-1\\n                I+=1\\n        return arr`"
                    },
                    {
                        "username": "Bhanu_009",
                        "content": "Your not skipping the additional zero. like after the first zero the iteration should go to 2 but in your case it coming to the duplicate zero that is added it goes until the loop ends. Solution is to skip the iteration after adding zero encountered."
                    },
                    {
                        "username": "Mradul_singh0100-",
                        "content": "    `def duplicateZeros(self, arr: List[int]) -> None:`\n        `l = len(arr)`\n        `d = [i for i in range(l) if arr[i] == 0]`\n       ` [arr.insert(j+d[j], 0) for j in range(len(d))]  `\n        `arr[:] = arr[:l]`"
                    },
                    {
                        "username": "ajinkode",
                        "content": "Good question!"
                    }
                ]
            },
            {
                "id": 1803112,
                "content": [
                    {
                        "username": "lokesh_uppala_G4",
                        "content": "lis=\"\".join([str(i) for i in arr])\\nlis=lis.replace(\\'0\\',\\'00\\')\\narr = list(map(int,lis))[:len(arr)]\\nreturn arr\\n\\ncan I know where the code is wrong\\n"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "no need to return anything. you need to modify the array `arr` itself (using methods, don\\'t try to reassign it) "
                    },
                    {
                        "username": "abj_32",
                        "content": "I saw people writing a very complex code here. Here is what I have written and I think its pretty simple \\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n     int i,j,n;\\n     i=0;\\n     n=arr.size();\\n     while(i<n)\\n     {\\n         if(arr[i]==0)\\n         {\\n             j=n-1;\\n             while(j>i)\\n             {\\n                 arr[j]=arr[j-1];\\n                 j--;\\n             }\\n             if(i+1 < n) \\n             { \\n                    arr[i+1] = 0;\\n                    i++;\\n             }\\n         }\\n         i++;\\n     }   \\n    }\\n};\\n"
                    },
                    {
                        "username": "Bhashkar_3241",
                        "content": "i am unable to understand how he is deleting element &inserting zeroes.\nplease explain anyone"
                    },
                    {
                        "username": "debjeetsarkar",
                        "content": "Golang sol doesnt get accepted. \\n\\n `import (\\n\"fmt\"\\n)\\n\\nfunc shiftRight(arr []int, pos int) []int{\\nnew_arr := append(arr, 0) // Make space\\ncopy(new_arr[pos+1:], new_arr[pos:]) // shift elements\\nreturn new_arr\\n}\\n\\nfunc duplicateZeros(arr []int) {\\nl := len(arr)\\nfor i := 0; i < l; i++ {\\nif arr[i] == 0 {\\narr = shiftRight(arr, i+1)\\narr[i+1] = 0\\ni +=1 // Move position beacuse i+1 has now been replaced by a 0\\n}\\n}\\narr = arr[:l]\\nfmt.Println(arr)\\n}`\\n\\n"
                    },
                    {
                        "username": "geckguy",
                        "content": "\\n class Solution: \\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        z=set()\\n        n = len(arr)\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                z.add(i)\\n        i=0\\n        while i < n + len(z) and len(z) > 0:\\n            if arr[i] ==  0:\\n                arr.insert(i,0)\\n                i=i+2\\n            else:\\n                i=i+1\\n        arr = arr[0:n]\\n\\nwhy isnt this code working in LC, it works fine in vscode"
                    },
                    {
                        "username": "timyang2333",
                        "content": "If you getting an output of [1,0,0,0,0,0,0,0] like this, don\\'t forget to skip next one which already duplicated as zero by your code, so skip the next one and focus on next next one"
                    },
                    {
                        "username": "coddar",
                        "content": "I have a working solution, but I do not like it. It seems O(n^2) in worst case. The runtime is also beating only 7% or so. Does anybody have a better solution? Mine is below:\\n\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] == 0:\\n                for j in range(len(arr)-1, i+1, -1):\\n                    arr[j] = arr[j-1]\\n                if i+1 < len(arr): arr[i+1] = 0\\n                i += 1\\n            i += 1\\n```"
                    },
                    {
                        "username": "rahulsanjayshah",
                        "content": "Can anyone help me find the error in this?\\nFor an input of arr =[1,0,2,3,0,4,5,0], getting an output of [1,0,0,0,0,0,0,0] instead of [1,0,0,2,3,0,0,4]\\n\\n`for i in range(len(arr)):\\n            if(arr[i]==0):\\n                j=len(arr)-1\\n                while(j>i):\\n                    arr[j] = arr[j-1]\\n                    j=j-1\\n                I+=1\\n        return arr`"
                    },
                    {
                        "username": "Bhanu_009",
                        "content": "Your not skipping the additional zero. like after the first zero the iteration should go to 2 but in your case it coming to the duplicate zero that is added it goes until the loop ends. Solution is to skip the iteration after adding zero encountered."
                    },
                    {
                        "username": "Mradul_singh0100-",
                        "content": "    `def duplicateZeros(self, arr: List[int]) -> None:`\n        `l = len(arr)`\n        `d = [i for i in range(l) if arr[i] == 0]`\n       ` [arr.insert(j+d[j], 0) for j in range(len(d))]  `\n        `arr[:] = arr[:l]`"
                    },
                    {
                        "username": "ajinkode",
                        "content": "Good question!"
                    }
                ]
            },
            {
                "id": 1779046,
                "content": [
                    {
                        "username": "lokesh_uppala_G4",
                        "content": "lis=\"\".join([str(i) for i in arr])\\nlis=lis.replace(\\'0\\',\\'00\\')\\narr = list(map(int,lis))[:len(arr)]\\nreturn arr\\n\\ncan I know where the code is wrong\\n"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "no need to return anything. you need to modify the array `arr` itself (using methods, don\\'t try to reassign it) "
                    },
                    {
                        "username": "abj_32",
                        "content": "I saw people writing a very complex code here. Here is what I have written and I think its pretty simple \\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n     int i,j,n;\\n     i=0;\\n     n=arr.size();\\n     while(i<n)\\n     {\\n         if(arr[i]==0)\\n         {\\n             j=n-1;\\n             while(j>i)\\n             {\\n                 arr[j]=arr[j-1];\\n                 j--;\\n             }\\n             if(i+1 < n) \\n             { \\n                    arr[i+1] = 0;\\n                    i++;\\n             }\\n         }\\n         i++;\\n     }   \\n    }\\n};\\n"
                    },
                    {
                        "username": "Bhashkar_3241",
                        "content": "i am unable to understand how he is deleting element &inserting zeroes.\nplease explain anyone"
                    },
                    {
                        "username": "debjeetsarkar",
                        "content": "Golang sol doesnt get accepted. \\n\\n `import (\\n\"fmt\"\\n)\\n\\nfunc shiftRight(arr []int, pos int) []int{\\nnew_arr := append(arr, 0) // Make space\\ncopy(new_arr[pos+1:], new_arr[pos:]) // shift elements\\nreturn new_arr\\n}\\n\\nfunc duplicateZeros(arr []int) {\\nl := len(arr)\\nfor i := 0; i < l; i++ {\\nif arr[i] == 0 {\\narr = shiftRight(arr, i+1)\\narr[i+1] = 0\\ni +=1 // Move position beacuse i+1 has now been replaced by a 0\\n}\\n}\\narr = arr[:l]\\nfmt.Println(arr)\\n}`\\n\\n"
                    },
                    {
                        "username": "geckguy",
                        "content": "\\n class Solution: \\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        z=set()\\n        n = len(arr)\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                z.add(i)\\n        i=0\\n        while i < n + len(z) and len(z) > 0:\\n            if arr[i] ==  0:\\n                arr.insert(i,0)\\n                i=i+2\\n            else:\\n                i=i+1\\n        arr = arr[0:n]\\n\\nwhy isnt this code working in LC, it works fine in vscode"
                    },
                    {
                        "username": "timyang2333",
                        "content": "If you getting an output of [1,0,0,0,0,0,0,0] like this, don\\'t forget to skip next one which already duplicated as zero by your code, so skip the next one and focus on next next one"
                    },
                    {
                        "username": "coddar",
                        "content": "I have a working solution, but I do not like it. It seems O(n^2) in worst case. The runtime is also beating only 7% or so. Does anybody have a better solution? Mine is below:\\n\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] == 0:\\n                for j in range(len(arr)-1, i+1, -1):\\n                    arr[j] = arr[j-1]\\n                if i+1 < len(arr): arr[i+1] = 0\\n                i += 1\\n            i += 1\\n```"
                    },
                    {
                        "username": "rahulsanjayshah",
                        "content": "Can anyone help me find the error in this?\\nFor an input of arr =[1,0,2,3,0,4,5,0], getting an output of [1,0,0,0,0,0,0,0] instead of [1,0,0,2,3,0,0,4]\\n\\n`for i in range(len(arr)):\\n            if(arr[i]==0):\\n                j=len(arr)-1\\n                while(j>i):\\n                    arr[j] = arr[j-1]\\n                    j=j-1\\n                I+=1\\n        return arr`"
                    },
                    {
                        "username": "Bhanu_009",
                        "content": "Your not skipping the additional zero. like after the first zero the iteration should go to 2 but in your case it coming to the duplicate zero that is added it goes until the loop ends. Solution is to skip the iteration after adding zero encountered."
                    },
                    {
                        "username": "Mradul_singh0100-",
                        "content": "    `def duplicateZeros(self, arr: List[int]) -> None:`\n        `l = len(arr)`\n        `d = [i for i in range(l) if arr[i] == 0]`\n       ` [arr.insert(j+d[j], 0) for j in range(len(d))]  `\n        `arr[:] = arr[:l]`"
                    },
                    {
                        "username": "ajinkode",
                        "content": "Good question!"
                    }
                ]
            },
            {
                "id": 1771851,
                "content": [
                    {
                        "username": "lokesh_uppala_G4",
                        "content": "lis=\"\".join([str(i) for i in arr])\\nlis=lis.replace(\\'0\\',\\'00\\')\\narr = list(map(int,lis))[:len(arr)]\\nreturn arr\\n\\ncan I know where the code is wrong\\n"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "no need to return anything. you need to modify the array `arr` itself (using methods, don\\'t try to reassign it) "
                    },
                    {
                        "username": "abj_32",
                        "content": "I saw people writing a very complex code here. Here is what I have written and I think its pretty simple \\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n     int i,j,n;\\n     i=0;\\n     n=arr.size();\\n     while(i<n)\\n     {\\n         if(arr[i]==0)\\n         {\\n             j=n-1;\\n             while(j>i)\\n             {\\n                 arr[j]=arr[j-1];\\n                 j--;\\n             }\\n             if(i+1 < n) \\n             { \\n                    arr[i+1] = 0;\\n                    i++;\\n             }\\n         }\\n         i++;\\n     }   \\n    }\\n};\\n"
                    },
                    {
                        "username": "Bhashkar_3241",
                        "content": "i am unable to understand how he is deleting element &inserting zeroes.\nplease explain anyone"
                    },
                    {
                        "username": "debjeetsarkar",
                        "content": "Golang sol doesnt get accepted. \\n\\n `import (\\n\"fmt\"\\n)\\n\\nfunc shiftRight(arr []int, pos int) []int{\\nnew_arr := append(arr, 0) // Make space\\ncopy(new_arr[pos+1:], new_arr[pos:]) // shift elements\\nreturn new_arr\\n}\\n\\nfunc duplicateZeros(arr []int) {\\nl := len(arr)\\nfor i := 0; i < l; i++ {\\nif arr[i] == 0 {\\narr = shiftRight(arr, i+1)\\narr[i+1] = 0\\ni +=1 // Move position beacuse i+1 has now been replaced by a 0\\n}\\n}\\narr = arr[:l]\\nfmt.Println(arr)\\n}`\\n\\n"
                    },
                    {
                        "username": "geckguy",
                        "content": "\\n class Solution: \\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        z=set()\\n        n = len(arr)\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                z.add(i)\\n        i=0\\n        while i < n + len(z) and len(z) > 0:\\n            if arr[i] ==  0:\\n                arr.insert(i,0)\\n                i=i+2\\n            else:\\n                i=i+1\\n        arr = arr[0:n]\\n\\nwhy isnt this code working in LC, it works fine in vscode"
                    },
                    {
                        "username": "timyang2333",
                        "content": "If you getting an output of [1,0,0,0,0,0,0,0] like this, don\\'t forget to skip next one which already duplicated as zero by your code, so skip the next one and focus on next next one"
                    },
                    {
                        "username": "coddar",
                        "content": "I have a working solution, but I do not like it. It seems O(n^2) in worst case. The runtime is also beating only 7% or so. Does anybody have a better solution? Mine is below:\\n\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] == 0:\\n                for j in range(len(arr)-1, i+1, -1):\\n                    arr[j] = arr[j-1]\\n                if i+1 < len(arr): arr[i+1] = 0\\n                i += 1\\n            i += 1\\n```"
                    },
                    {
                        "username": "rahulsanjayshah",
                        "content": "Can anyone help me find the error in this?\\nFor an input of arr =[1,0,2,3,0,4,5,0], getting an output of [1,0,0,0,0,0,0,0] instead of [1,0,0,2,3,0,0,4]\\n\\n`for i in range(len(arr)):\\n            if(arr[i]==0):\\n                j=len(arr)-1\\n                while(j>i):\\n                    arr[j] = arr[j-1]\\n                    j=j-1\\n                I+=1\\n        return arr`"
                    },
                    {
                        "username": "Bhanu_009",
                        "content": "Your not skipping the additional zero. like after the first zero the iteration should go to 2 but in your case it coming to the duplicate zero that is added it goes until the loop ends. Solution is to skip the iteration after adding zero encountered."
                    },
                    {
                        "username": "Mradul_singh0100-",
                        "content": "    `def duplicateZeros(self, arr: List[int]) -> None:`\n        `l = len(arr)`\n        `d = [i for i in range(l) if arr[i] == 0]`\n       ` [arr.insert(j+d[j], 0) for j in range(len(d))]  `\n        `arr[:] = arr[:l]`"
                    },
                    {
                        "username": "ajinkode",
                        "content": "Good question!"
                    }
                ]
            },
            {
                "id": 1750097,
                "content": [
                    {
                        "username": "lokesh_uppala_G4",
                        "content": "lis=\"\".join([str(i) for i in arr])\\nlis=lis.replace(\\'0\\',\\'00\\')\\narr = list(map(int,lis))[:len(arr)]\\nreturn arr\\n\\ncan I know where the code is wrong\\n"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "no need to return anything. you need to modify the array `arr` itself (using methods, don\\'t try to reassign it) "
                    },
                    {
                        "username": "abj_32",
                        "content": "I saw people writing a very complex code here. Here is what I have written and I think its pretty simple \\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n     int i,j,n;\\n     i=0;\\n     n=arr.size();\\n     while(i<n)\\n     {\\n         if(arr[i]==0)\\n         {\\n             j=n-1;\\n             while(j>i)\\n             {\\n                 arr[j]=arr[j-1];\\n                 j--;\\n             }\\n             if(i+1 < n) \\n             { \\n                    arr[i+1] = 0;\\n                    i++;\\n             }\\n         }\\n         i++;\\n     }   \\n    }\\n};\\n"
                    },
                    {
                        "username": "Bhashkar_3241",
                        "content": "i am unable to understand how he is deleting element &inserting zeroes.\nplease explain anyone"
                    },
                    {
                        "username": "debjeetsarkar",
                        "content": "Golang sol doesnt get accepted. \\n\\n `import (\\n\"fmt\"\\n)\\n\\nfunc shiftRight(arr []int, pos int) []int{\\nnew_arr := append(arr, 0) // Make space\\ncopy(new_arr[pos+1:], new_arr[pos:]) // shift elements\\nreturn new_arr\\n}\\n\\nfunc duplicateZeros(arr []int) {\\nl := len(arr)\\nfor i := 0; i < l; i++ {\\nif arr[i] == 0 {\\narr = shiftRight(arr, i+1)\\narr[i+1] = 0\\ni +=1 // Move position beacuse i+1 has now been replaced by a 0\\n}\\n}\\narr = arr[:l]\\nfmt.Println(arr)\\n}`\\n\\n"
                    },
                    {
                        "username": "geckguy",
                        "content": "\\n class Solution: \\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        z=set()\\n        n = len(arr)\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                z.add(i)\\n        i=0\\n        while i < n + len(z) and len(z) > 0:\\n            if arr[i] ==  0:\\n                arr.insert(i,0)\\n                i=i+2\\n            else:\\n                i=i+1\\n        arr = arr[0:n]\\n\\nwhy isnt this code working in LC, it works fine in vscode"
                    },
                    {
                        "username": "timyang2333",
                        "content": "If you getting an output of [1,0,0,0,0,0,0,0] like this, don\\'t forget to skip next one which already duplicated as zero by your code, so skip the next one and focus on next next one"
                    },
                    {
                        "username": "coddar",
                        "content": "I have a working solution, but I do not like it. It seems O(n^2) in worst case. The runtime is also beating only 7% or so. Does anybody have a better solution? Mine is below:\\n\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] == 0:\\n                for j in range(len(arr)-1, i+1, -1):\\n                    arr[j] = arr[j-1]\\n                if i+1 < len(arr): arr[i+1] = 0\\n                i += 1\\n            i += 1\\n```"
                    },
                    {
                        "username": "rahulsanjayshah",
                        "content": "Can anyone help me find the error in this?\\nFor an input of arr =[1,0,2,3,0,4,5,0], getting an output of [1,0,0,0,0,0,0,0] instead of [1,0,0,2,3,0,0,4]\\n\\n`for i in range(len(arr)):\\n            if(arr[i]==0):\\n                j=len(arr)-1\\n                while(j>i):\\n                    arr[j] = arr[j-1]\\n                    j=j-1\\n                I+=1\\n        return arr`"
                    },
                    {
                        "username": "Bhanu_009",
                        "content": "Your not skipping the additional zero. like after the first zero the iteration should go to 2 but in your case it coming to the duplicate zero that is added it goes until the loop ends. Solution is to skip the iteration after adding zero encountered."
                    },
                    {
                        "username": "Mradul_singh0100-",
                        "content": "    `def duplicateZeros(self, arr: List[int]) -> None:`\n        `l = len(arr)`\n        `d = [i for i in range(l) if arr[i] == 0]`\n       ` [arr.insert(j+d[j], 0) for j in range(len(d))]  `\n        `arr[:] = arr[:l]`"
                    },
                    {
                        "username": "ajinkode",
                        "content": "Good question!"
                    }
                ]
            },
            {
                "id": 1740168,
                "content": [
                    {
                        "username": "lokesh_uppala_G4",
                        "content": "lis=\"\".join([str(i) for i in arr])\\nlis=lis.replace(\\'0\\',\\'00\\')\\narr = list(map(int,lis))[:len(arr)]\\nreturn arr\\n\\ncan I know where the code is wrong\\n"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "no need to return anything. you need to modify the array `arr` itself (using methods, don\\'t try to reassign it) "
                    },
                    {
                        "username": "abj_32",
                        "content": "I saw people writing a very complex code here. Here is what I have written and I think its pretty simple \\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n     int i,j,n;\\n     i=0;\\n     n=arr.size();\\n     while(i<n)\\n     {\\n         if(arr[i]==0)\\n         {\\n             j=n-1;\\n             while(j>i)\\n             {\\n                 arr[j]=arr[j-1];\\n                 j--;\\n             }\\n             if(i+1 < n) \\n             { \\n                    arr[i+1] = 0;\\n                    i++;\\n             }\\n         }\\n         i++;\\n     }   \\n    }\\n};\\n"
                    },
                    {
                        "username": "Bhashkar_3241",
                        "content": "i am unable to understand how he is deleting element &inserting zeroes.\nplease explain anyone"
                    },
                    {
                        "username": "debjeetsarkar",
                        "content": "Golang sol doesnt get accepted. \\n\\n `import (\\n\"fmt\"\\n)\\n\\nfunc shiftRight(arr []int, pos int) []int{\\nnew_arr := append(arr, 0) // Make space\\ncopy(new_arr[pos+1:], new_arr[pos:]) // shift elements\\nreturn new_arr\\n}\\n\\nfunc duplicateZeros(arr []int) {\\nl := len(arr)\\nfor i := 0; i < l; i++ {\\nif arr[i] == 0 {\\narr = shiftRight(arr, i+1)\\narr[i+1] = 0\\ni +=1 // Move position beacuse i+1 has now been replaced by a 0\\n}\\n}\\narr = arr[:l]\\nfmt.Println(arr)\\n}`\\n\\n"
                    },
                    {
                        "username": "geckguy",
                        "content": "\\n class Solution: \\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        z=set()\\n        n = len(arr)\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                z.add(i)\\n        i=0\\n        while i < n + len(z) and len(z) > 0:\\n            if arr[i] ==  0:\\n                arr.insert(i,0)\\n                i=i+2\\n            else:\\n                i=i+1\\n        arr = arr[0:n]\\n\\nwhy isnt this code working in LC, it works fine in vscode"
                    },
                    {
                        "username": "timyang2333",
                        "content": "If you getting an output of [1,0,0,0,0,0,0,0] like this, don\\'t forget to skip next one which already duplicated as zero by your code, so skip the next one and focus on next next one"
                    },
                    {
                        "username": "coddar",
                        "content": "I have a working solution, but I do not like it. It seems O(n^2) in worst case. The runtime is also beating only 7% or so. Does anybody have a better solution? Mine is below:\\n\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] == 0:\\n                for j in range(len(arr)-1, i+1, -1):\\n                    arr[j] = arr[j-1]\\n                if i+1 < len(arr): arr[i+1] = 0\\n                i += 1\\n            i += 1\\n```"
                    },
                    {
                        "username": "rahulsanjayshah",
                        "content": "Can anyone help me find the error in this?\\nFor an input of arr =[1,0,2,3,0,4,5,0], getting an output of [1,0,0,0,0,0,0,0] instead of [1,0,0,2,3,0,0,4]\\n\\n`for i in range(len(arr)):\\n            if(arr[i]==0):\\n                j=len(arr)-1\\n                while(j>i):\\n                    arr[j] = arr[j-1]\\n                    j=j-1\\n                I+=1\\n        return arr`"
                    },
                    {
                        "username": "Bhanu_009",
                        "content": "Your not skipping the additional zero. like after the first zero the iteration should go to 2 but in your case it coming to the duplicate zero that is added it goes until the loop ends. Solution is to skip the iteration after adding zero encountered."
                    },
                    {
                        "username": "Mradul_singh0100-",
                        "content": "    `def duplicateZeros(self, arr: List[int]) -> None:`\n        `l = len(arr)`\n        `d = [i for i in range(l) if arr[i] == 0]`\n       ` [arr.insert(j+d[j], 0) for j in range(len(d))]  `\n        `arr[:] = arr[:l]`"
                    },
                    {
                        "username": "ajinkode",
                        "content": "Good question!"
                    }
                ]
            },
            {
                "id": 1734362,
                "content": [
                    {
                        "username": "lokesh_uppala_G4",
                        "content": "lis=\"\".join([str(i) for i in arr])\\nlis=lis.replace(\\'0\\',\\'00\\')\\narr = list(map(int,lis))[:len(arr)]\\nreturn arr\\n\\ncan I know where the code is wrong\\n"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "no need to return anything. you need to modify the array `arr` itself (using methods, don\\'t try to reassign it) "
                    },
                    {
                        "username": "abj_32",
                        "content": "I saw people writing a very complex code here. Here is what I have written and I think its pretty simple \\nclass Solution {\\npublic:\\n    void duplicateZeros(vector<int>& arr) {\\n     int i,j,n;\\n     i=0;\\n     n=arr.size();\\n     while(i<n)\\n     {\\n         if(arr[i]==0)\\n         {\\n             j=n-1;\\n             while(j>i)\\n             {\\n                 arr[j]=arr[j-1];\\n                 j--;\\n             }\\n             if(i+1 < n) \\n             { \\n                    arr[i+1] = 0;\\n                    i++;\\n             }\\n         }\\n         i++;\\n     }   \\n    }\\n};\\n"
                    },
                    {
                        "username": "Bhashkar_3241",
                        "content": "i am unable to understand how he is deleting element &inserting zeroes.\nplease explain anyone"
                    },
                    {
                        "username": "debjeetsarkar",
                        "content": "Golang sol doesnt get accepted. \\n\\n `import (\\n\"fmt\"\\n)\\n\\nfunc shiftRight(arr []int, pos int) []int{\\nnew_arr := append(arr, 0) // Make space\\ncopy(new_arr[pos+1:], new_arr[pos:]) // shift elements\\nreturn new_arr\\n}\\n\\nfunc duplicateZeros(arr []int) {\\nl := len(arr)\\nfor i := 0; i < l; i++ {\\nif arr[i] == 0 {\\narr = shiftRight(arr, i+1)\\narr[i+1] = 0\\ni +=1 // Move position beacuse i+1 has now been replaced by a 0\\n}\\n}\\narr = arr[:l]\\nfmt.Println(arr)\\n}`\\n\\n"
                    },
                    {
                        "username": "geckguy",
                        "content": "\\n class Solution: \\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        z=set()\\n        n = len(arr)\\n        for i in range(len(arr)):\\n            if arr[i] == 0:\\n                z.add(i)\\n        i=0\\n        while i < n + len(z) and len(z) > 0:\\n            if arr[i] ==  0:\\n                arr.insert(i,0)\\n                i=i+2\\n            else:\\n                i=i+1\\n        arr = arr[0:n]\\n\\nwhy isnt this code working in LC, it works fine in vscode"
                    },
                    {
                        "username": "timyang2333",
                        "content": "If you getting an output of [1,0,0,0,0,0,0,0] like this, don\\'t forget to skip next one which already duplicated as zero by your code, so skip the next one and focus on next next one"
                    },
                    {
                        "username": "coddar",
                        "content": "I have a working solution, but I do not like it. It seems O(n^2) in worst case. The runtime is also beating only 7% or so. Does anybody have a better solution? Mine is below:\\n\\n```\\nclass Solution:\\n    def duplicateZeros(self, arr: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify arr in-place instead.\\n        \"\"\"\\n        i = 0\\n        while i < len(arr):\\n            if arr[i] == 0:\\n                for j in range(len(arr)-1, i+1, -1):\\n                    arr[j] = arr[j-1]\\n                if i+1 < len(arr): arr[i+1] = 0\\n                i += 1\\n            i += 1\\n```"
                    },
                    {
                        "username": "rahulsanjayshah",
                        "content": "Can anyone help me find the error in this?\\nFor an input of arr =[1,0,2,3,0,4,5,0], getting an output of [1,0,0,0,0,0,0,0] instead of [1,0,0,2,3,0,0,4]\\n\\n`for i in range(len(arr)):\\n            if(arr[i]==0):\\n                j=len(arr)-1\\n                while(j>i):\\n                    arr[j] = arr[j-1]\\n                    j=j-1\\n                I+=1\\n        return arr`"
                    },
                    {
                        "username": "Bhanu_009",
                        "content": "Your not skipping the additional zero. like after the first zero the iteration should go to 2 but in your case it coming to the duplicate zero that is added it goes until the loop ends. Solution is to skip the iteration after adding zero encountered."
                    },
                    {
                        "username": "Mradul_singh0100-",
                        "content": "    `def duplicateZeros(self, arr: List[int]) -> None:`\n        `l = len(arr)`\n        `d = [i for i in range(l) if arr[i] == 0]`\n       ` [arr.insert(j+d[j], 0) for j in range(len(d))]  `\n        `arr[:] = arr[:l]`"
                    },
                    {
                        "username": "ajinkode",
                        "content": "Good question!"
                    }
                ]
            }
        ]
    }
]