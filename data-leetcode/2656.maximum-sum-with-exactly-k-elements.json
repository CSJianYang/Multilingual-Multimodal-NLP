[
    {
        "title": "Maximum Sum With Exactly K Elements ",
        "question_content": "You are given a 0-indexed integer array nums and an integer k. Your task is to perform the following operation exactly k times in order to maximize your score:\n\n\tSelect an element m from nums.\n\tRemove the selected element m from the array.\n\tAdd a new element with a value of m + 1 to the array.\n\tIncrease your score by m.\n\nReturn the maximum score you can achieve after performing the operation exactly k times.\n&nbsp;\nExample 1:\n\nInput: nums = [1,2,3,4,5], k = 3\nOutput: 18\nExplanation: We need to choose exactly 3 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [1,2,3,4,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 and nums = [1,2,3,4,7]\nFor the third iteration, we choose 7. Then sum is 5 + 6 + 7 = 18 and nums = [1,2,3,4,8]\nSo, we will return 18.\nIt can be proven, that 18 is the maximum answer that we can achieve.\n\nExample 2:\n\nInput: nums = [5,5,5], k = 2\nOutput: 11\nExplanation: We need to choose exactly 2 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [5,5,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 = 11 and nums = [5,5,7]\nSo, we will return 11.\nIt can be proven, that 11 is the maximum answer that we can achieve.\n\n&nbsp;\nConstraints:\n\n\t1 <= nums.length <= 100\n\t1 <= nums[i] <= 100\n\t1 <= k <= 100\n\n&nbsp;\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0; \n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}",
        "solutions": [
            {
                "id": 3466678,
                "title": "max-element-formula",
                "content": "We find max element `m`, and the result is `m + (m + 1) ... + (m + k - 1)`.\\n\\nWe can rewrite this as `k * m` plus `0 + 1 + 2 + ... k - 1`. \\n\\nWe compute the second part using the formula for the sum of arithmetic progression: `k * (k - 1) / 2`.\\n\\n**Python 3**\\n```python\\nclass Solution:\\n    def maximizeSum(self, n: List[int], k: int) -> int:\\n        return  k * max(n) + k * (k - 1) // 2;\\n```\\n\\n**C++**\\n```cpp\\nint maximizeSum(vector<int>& n, int k) {\\n    int m = *max_element(begin(n), end(n));\\n    return k * m + k * (k - 1) / 2;    \\n}",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def maximizeSum(self, n: List[int], k: int) -> int:\\n        return  k * max(n) + k * (k - 1) // 2;\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3467980,
                "title": "easiest-solution-out-there-in-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n + k)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = 0;\\n        for(int i = 0; i<nums.length; i++){ \\n            max = Math.max(max, nums[i]);\\n        }\\n        \\n        int ans = 0;\\n        while(k>0){\\n            ans+=max;\\n            max = max+1;\\n            k--;\\n        }\\n        return ans;\\n    }   \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = 0;\\n        for(int i = 0; i<nums.length; i++){ \\n            max = Math.max(max, nums[i]);\\n        }\\n        \\n        int ans = 0;\\n        while(k>0){\\n            ans+=max;\\n            max = max+1;\\n            k--;\\n        }\\n        return ans;\\n    }   \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466875,
                "title": "very-simple-easy-to-understand-solution",
                "content": "With observation, the ans will be the sum of ( largest element to largets element + k) numbers\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumUptoN(int n){ return n*(n+1)/2; }\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int mx = nums[0];\\n        for(auto n: nums) mx = max(mx, n);\\n        return sumUptoN(mx+k-1) - sumUptoN(mx-1);\\n    }\\n};\\n```\\n\\nHere is an article of my last interview experience - A Journey to FAANG Company, I recomand you to go through this to know which all resources I have used & how I cracked interview at Amazon:\\nhttps://leetcode.com/discuss/interview-experience/3171859/Journey-to-a-FAANG-Company-Amazon-or-SDE2-(L5)-or-Bangalore-or-Oct-2022-Accepted",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumUptoN(int n){ return n*(n+1)/2; }\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int mx = nums[0];\\n        for(auto n: nums) mx = max(mx, n);\\n        return sumUptoN(mx+k-1) - sumUptoN(mx-1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466659,
                "title": "c-arithmetic-progression-simple-math",
                "content": "observation:\\n1. U have to choose max Element , remove it and add max_element+1\\n2. so u are just choosing same element again and again and they are in AP\\n\\nFor ex:[1,3,4,5,1] k=3\\nchoosen element =5,6,7  this is in AP\\nans=5+6+7\\n\\nFormula For Sum of Element In AP=n*(2*A+(n-1)*d)/2\\nhere n=k and A=max_element\\n\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int A=*max_element(nums.begin(),nums.end());      \\n         int ans=k*(2*A+(k-1)*1)/2;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int A=*max_element(nums.begin(),nums.end());      \\n         int ans=k*(2*A+(k-1)*1)/2;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3467607,
                "title": "python-3-2-lines-w-explanation-t-m-162-ms-16-mb",
                "content": "Here\\'s the intuition:\\nThe problem is equivalent to evaluating the sum of `n,n+1, ..., n+k-1`, where`n = max(nums)`. Because this sequence is arithmetic, the sum is equal to`k*(2*n+k-1)//2`.\\n\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        \\n        n = max(nums)\\n\\n        return k*(2*n+k-1)//2\\n```\\n[https://leetcode.com/problems/maximum-sum-with-exactly-k-elements/submissions/941730954/](http://)\\n\\n\\n\\nI could be wrong, but I think that time complexity is *O*(*N*) and space complexity is *O*(1).\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        \\n        n = max(nums)\\n\\n        return k*(2*n+k-1)//2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3467153,
                "title": "c-python-easy-solution",
                "content": "\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n + k)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# C++\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int m = nums[0];\\n        for(auto i : nums) {\\n            if(i > m) m = i;\\n        }\\n        int ans = 0;\\n        for(int i = 0; i < k; i++) {\\n            ans += m;\\n            m++;\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n# Python / Python3\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        m = nums[0]\\n        for i in nums:\\n            if i > m:\\n                m = i\\n        ans = 0\\n        for i in range(0, k):\\n            ans += m\\n            m += 1\\n        return ans\\n```",
                "solutionTags": [
                    "C++",
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int m = nums[0];\\n        for(auto i : nums) {\\n            if(i > m) m = i;\\n        }\\n        int ans = 0;\\n        for(int i = 0; i < k; i++) {\\n            ans += m;\\n            m++;\\n        }\\n        return ans;\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        m = nums[0]\\n        for i in nums:\\n            if i > m:\\n                m = i\\n        ans = 0\\n        for i in range(0, k):\\n            ans += m\\n            m += 1\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3488552,
                "title": "python-go-easy-solution",
                "content": "# Python \\u2705\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        sums = max(nums)\\n        for i in range(sums+1,sums+k):\\n            sums += i\\n        return sums\\n\\n```\\n# Go \\u2705\\n```\\nimport (\\n   \"sort\"\\n)\\nfunc maximizeSum(nums []int, k int) int {\\n   sort.Ints(nums)\\n   sum := nums[len(nums)-1]\\n   start := sum+1\\n   last := sum+k\\n   for start<last{\\n       sum += start\\n       start++\\n   }\\n   return sum\\n}\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Go"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        sums = max(nums)\\n        for i in range(sums+1,sums+k):\\n            sums += i\\n        return sums\\n\\n```\n```\\nimport (\\n   \"sort\"\\n)\\nfunc maximizeSum(nums []int, k int) int {\\n   sort.Ints(nums)\\n   sum := nums[len(nums)-1]\\n   start := sum+1\\n   last := sum+k\\n   for start<last{\\n       sum += start\\n       start++\\n   }\\n   return sum\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3469405,
                "title": "java-maximum-sum-with-exactly-k-elements",
                "content": "\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n                int max = nums[0];\\n        for (int m: nums)\\n            max = Math.max(m, max);\\n        int sum = max++;\\n        for (int i = 0; i < k - 1; i++)\\n            sum += max++;\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n                int max = nums[0];\\n        for (int m: nums)\\n            max = Math.max(m, max);\\n        int sum = max++;\\n        for (int i = 0; i < k - 1; i++)\\n            sum += max++;\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466844,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\nThe given code aims to find the maximum possible sum of a subarray with k elements from the input array, nums. The code first sorts the elements of nums in ascending order. Then, it initializes a variable called ans to the maximum value of nums. It iterates through the array nums and adds the maximum element to the variable ans in each iteration. It does this k times, adding 1 to a counter variable i in each iteration. Finally, the code returns the variable ans as the maximum sum of the subarray. In other words, the code is trying to find the sum of the largest k elements in the input array.\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\nArrays.sort(nums);\\n   // int n = nums.length;\\n    int max =nums[nums.length-1] ;\\n        int ans=max;\\n   for(int i=1;i<k;i++)\\n   {\\n       ans=ans+(max+i);\\n   }\\n        return ans;\\n}\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\nArrays.sort(nums);\\n   // int n = nums.length;\\n    int max =nums[nums.length-1] ;\\n        int ans=max;\\n   for(int i=1;i<k;i++)\\n   {\\n       ans=ans+(max+i);\\n   }\\n        return ans;\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466834,
                "title": "formula-max-elements-k-k-1-k-2-c",
                "content": "\\n# Approach\\nformula= max_elements*k+ (k-1)*k/2\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N*LOG(N))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        sort(nums.begin(),nums.end());\\n        int yk=nums[nums.size()-1]*k;\\n        // int op=k;\\n        k--;\\n       int yk2=k*(k+1);\\n        yk2/=2;\\n        // yk*=op;\\n        yk+=yk2;\\n        return yk;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        sort(nums.begin(),nums.end());\\n        int yk=nums[nums.size()-1]*k;\\n        // int op=k;\\n        k--;\\n       int yk2=k*(k+1);\\n        yk2/=2;\\n        // yk*=op;\\n        yk+=yk2;\\n        return yk;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466735,
                "title": "python3-solution",
                "content": "\\n\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        max_num = max(nums)\\n        ans = 0\\n        for _ in range(k):\\n            ans += max_num\\n            max_num += 1\\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        max_num = max(nums)\\n        ans = 0\\n        for _ in range(k):\\n            ans += max_num\\n            max_num += 1\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466632,
                "title": "simple-java-solution",
                "content": "# Complexity\\n- Time complexity: $$O(n log n)$$\\n\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        List<Integer> nm=new ArrayList<>();\\n        for(int i:nums)\\n        {\\n            nm.add(i);\\n        }\\n        Collections.sort(nm);\\n        int sum=0;\\n        int len=nm.size();\\n        while(k>0)\\n        {\\n            int ele=nm.get(len-1);\\n            sum+=ele;\\n            nm.remove(len-1);\\n            nm.add(ele+1);\\n            k--;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        List<Integer> nm=new ArrayList<>();\\n        for(int i:nums)\\n        {\\n            nm.add(i);\\n        }\\n        Collections.sort(nm);\\n        int sum=0;\\n        int len=nm.size();\\n        while(k>0)\\n        {\\n            int ele=nm.get(len-1);\\n            sum+=ele;\\n            nm.remove(len-1);\\n            nm.add(ele+1);\\n            k--;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3538686,
                "title": "my-maximizesum",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity\\n- Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n public:\\n  int maximizeSum(vector<int>& nums, int k) {\\n    int const maxElemenent = *max_element(nums.begin(), nums.end());\\n    int result = 0;\\n    for (int i = 0; i < k; i++) {\\n      result += maxElemenent + i;\\n    }\\n    return result;\\n  }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n public:\\n  int maximizeSum(vector<int>& nums, int k) {\\n    int const maxElemenent = *max_element(nums.begin(), nums.end());\\n    int result = 0;\\n    for (int i = 0; i < k; i++) {\\n      result += maxElemenent + i;\\n    }\\n    return result;\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3469200,
                "title": "brute-force-easy-to-understand-step-by-step-solution",
                "content": "# Intuition\\nObserved we are just taking larges value and then adding it in our ans and increasing it by one each time.\\n\\n# Approach\\nBrute force approach.\\n1. Find the max element in the given vector.\\n2. Run a while loop while k is not equal to zero\\n3. Adding it to our sum variable and then increase value of maxi by one and deacrese value of k each time.\\n\\n# Complexity\\n- Time complexity:\\n  O(n) \\n\\n- Space complexity:\\n  O(1) \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int sum=0;\\n        int maxi=INT_MIN;\\n        for(auto a:nums){\\n            maxi=max(a,maxi);\\n        }\\n        while(k--){\\n            sum+=maxi;\\n            maxi+=1;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int sum=0;\\n        int maxi=INT_MIN;\\n        for(auto a:nums){\\n            maxi=max(a,maxi);\\n        }\\n        while(k--){\\n            sum+=maxi;\\n            maxi+=1;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466912,
                "title": "c-best-solution-100-faster-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n[1,2,3,4,5], k = 3\\n    \\n5 + 6 + 7\\n(5 * 3) + (0 + 1 + 2)\\n\\nadd the maximum element k times => maxi * k\\nand add 0 + 1 + 2 + 3 + ..... + (k - 1)\\nsum of first (k - 1)    elements\\ntherefore ans = ((maxi * k) + ((k * 1ll * (k-1))/2));\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n***O(N)***\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n***O(1)***\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& arr, int k) {\\n        int temp = *max_element(arr.begin(), arr.end());\\n        return ((temp*k) + ((k*1ll*(k-1))/2));\\n        // temp is multiplied by k \\n        // and add 0 + 1 + 2 + 3 + .... + (k-1) => (((k-1) * k) / 2);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& arr, int k) {\\n        int temp = *max_element(arr.begin(), arr.end());\\n        return ((temp*k) + ((k*1ll*(k-1))/2));\\n        // temp is multiplied by k \\n        // and add 0 + 1 + 2 + 3 + .... + (k-1) => (((k-1) * k) / 2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466682,
                "title": "short-clean-simple-java-solution",
                "content": "\\n```java []\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int val = Arrays.stream(nums).max().getAsInt(), res = 0;\\n        while(k-->0)   res += val++;\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java []\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int val = Arrays.stream(nums).max().getAsInt(), res = 0;\\n        while(k-->0)   res += val++;\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3492164,
                "title": "c-find-max-element-easy-to-understand",
                "content": "# Intuition\\nTHAT EASYLY UNDERSTABLE THAT FIND MAX ELEMENT mx. INCREMENT ANS BY mx. ADD NEW ELEMENT IN ARRAY mx+1. TILL K-1\\n\\n# Approach\\nRETURN mx+(k*(k+1))/2\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int ans = 0;\\n        for(auto &i: nums)ans = max(ans,i);//FIND MAX LEMENT\\n        return ans*k+(k*(k-1))/2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int ans = 0;\\n        for(auto &i: nums)ans = max(ans,i);//FIND MAX LEMENT\\n        return ans*k+(k*(k-1))/2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3903890,
                "title": "python-code-using-range-function-itself-clever-way-to-solve-beats-95-2-lines",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nfind max of array m then,\\nwe can use the inbuilt range() to solve the question as it gives the required answer\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n**_______O(K)**\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n**_______O(1)**\\n# Code\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        m=max(nums)\\n        return sum(range(m,m+k))\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        m=max(nums)\\n        return sum(range(m,m+k))\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3826699,
                "title": "javascript-simple-code-76-ms-beats-100-o-n-time-o-1-space",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n![Screenshot 2023-07-28 at 12.11.02.png](https://assets.leetcode.com/users/images/f54548fc-c439-428e-a5f9-dedb14591a37_1690517472.5807898.png)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {number} k\\n * @return {number}\\n */\\nvar maximizeSum = function (nums, k) {\\n  // Using Math.max for find max number\\n  let max = Math.max(...nums);\\n  // init sum\\n  let sum = 0;\\n  // we only need max number plus one until k\\n  for (let i = 0; i < k; i++) {\\n    sum += max;\\n    max += 1;\\n  }\\n  // yeah that\\'s it finally return the sum\\n  return sum;\\n};\\n\\n```\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {number} k\\n * @return {number}\\n */\\nvar maximizeSum = function (nums, k) {\\n  // Using Math.max for find max number\\n  let max = Math.max(...nums);\\n  // init sum\\n  let sum = 0;\\n  // we only need max number plus one until k\\n  for (let i = 0; i < k; i++) {\\n    sum += max;\\n    max += 1;\\n  }\\n  // yeah that\\'s it finally return the sum\\n  return sum;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3707519,
                "title": "best-approach-using-java-c-python-swift-with-0ms-runtime",
                "content": "\\n# Approach\\nThe given code defines a class named \"Solution\" with a member function named \"maximizeSum\". This function takes a vector of integers \"nums\" and an integer \"k\" as input and returns an integer.\\n\\nThe purpose of the function is to maximize the sum of the elements in the vector by performing a series of operations. The operations involve incrementing the largest element in the vector and reducing the value of \"k\" by 1. The process is repeated \"k\" times.\\n\\nHere\\'s how the function works:\\n\\n1. It declares two integer variables, \"j\" and \"i\". \"j\" is initialized as the maximum element in the \"nums\" vector using the `max_element` function from the `<algorithm>` library. \"i\" is initialized as 0.\\n\\n2. The function enters a while loop that continues until \"k\" becomes 0.\\n\\n3. Inside the loop, the value of \"i\" is updated by adding the current value of \"j\". Then, \"j\" is incremented by 1.\\n\\n4. The value of \"k\" is decremented by 1 in each iteration of the loop.\\n\\n5. After the loop ends, the function returns the value of \"i\", which represents the maximized sum of the elements in the vector after performing the specified number of operations.\\n\\nIn summary, the \"maximizeSum\" function finds the maximum sum of the elements in the vector by repeatedly incrementing the largest element and reducing the value of \"k\".\\n\\n\\n\\n# Code\\n\\n```C++ []\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int j=*max_element(nums.begin(),nums.end()),i=0;\\n        while(k){\\n            i=i+j;\\n            j++;\\n            k--;\\n        }\\n    return i;\\n     }\\n};\\n```\\n```java []\\nimport java.util.Collections;\\nimport java.util.List;\\n\\nclass Solution {\\n    public int maximizeSum(List<Integer> nums, int k) {\\n        int j = Collections.max(nums);\\n        int i = 0;\\n        while (k > 0) {\\n            i += j;\\n            j++;\\n            k--;\\n        }\\n        return i;\\n    }\\n}\\n\\n```\\n```Swift []\\nclass Solution {\\n    func maximizeSum(_ nums: [Int], _ k: Int) -> Int {\\n        var j = nums.max() ?? 0\\n        var i = 0\\n        var k = k\\n        \\n        while k > 0 {\\n            i += j\\n            j += 1\\n            k -= 1\\n        }\\n        \\n        return i\\n    }\\n}\\n\\n```\\n```python []\\nclass Solution:\\n    def maximizeSum(self, nums, k):\\n        j = max(nums)\\n        i = 0\\n        while k > 0:\\n            i += j\\n            j += 1\\n            k -= 1\\n        return i\\n\\n```\\n\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Swift",
                    "Greedy"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int j=*max_element(nums.begin(),nums.end()),i=0;\\n        while(k){\\n            i=i+j;\\n            j++;\\n            k--;\\n        }\\n    return i;\\n     }\\n};\\n```\n```java []\\nimport java.util.Collections;\\nimport java.util.List;\\n\\nclass Solution {\\n    public int maximizeSum(List<Integer> nums, int k) {\\n        int j = Collections.max(nums);\\n        int i = 0;\\n        while (k > 0) {\\n            i += j;\\n            j++;\\n            k--;\\n        }\\n        return i;\\n    }\\n}\\n\\n```\n```Swift []\\nclass Solution {\\n    func maximizeSum(_ nums: [Int], _ k: Int) -> Int {\\n        var j = nums.max() ?? 0\\n        var i = 0\\n        var k = k\\n        \\n        while k > 0 {\\n            i += j\\n            j += 1\\n            k -= 1\\n        }\\n        \\n        return i\\n    }\\n}\\n\\n```\n```python []\\nclass Solution:\\n    def maximizeSum(self, nums, k):\\n        j = max(nums)\\n        i = 0\\n        while k > 0:\\n            i += j\\n            j += 1\\n            k -= 1\\n        return i\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3673783,
                "title": "beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFind the maximum element of the array, return the sum of numbers from m to m+k-1. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFind the maximum element by traversing, Find the sum of elements by (n*n-1/2). \\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\nPlease upvote if you find it helpful \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int m = nums[0]; int sum = 0; \\n        for(int i=1; i<nums.size(); i++) if(m < nums[i]) m = nums[i]; \\n        \\n        sum = k*m + (k-1)*k/2; \\n        return sum; \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int m = nums[0]; int sum = 0; \\n        for(int i=1; i<nums.size(); i++) if(m < nums[i]) m = nums[i]; \\n        \\n        sum = k*m + (k-1)*k/2; \\n        return sum; \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3601020,
                "title": "java-python-c-one-line-solution-beats-100",
                "content": "# Intuition\\n\\nWe need to find the largest number and keep adding it to answer by incrementing it k times.\\n\\n# Approach\\nWe find the maximum element by *max_element function. We require a time complexity of O(N) for this.\\nWe then mulitply the maximum element with k and add to the answer as we are adding it k times.\\nNow we need to add 1 to answer k-1 times.\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n\\n```\\n// C++ solution\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        return (*max_element(nums.begin(), nums.end()))*k + (k-1)*k/2;\\n    }\\n};\\n```\\n```Java []\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = nums[0];\\n        for(int i=1; i<nums.length; i++){\\n            if(max<nums[i]) max = nums[i];\\n        }\\n        return max*k + (k-1)*k/2;\\n    }\\n}\\n```\\n```python []\\nclass Solution(object):\\n    def maximizeSum(self, nums, k):\\n        return (max(nums))*k + (k-1)*k/2;\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3"
                ],
                "code": "```\\n// C++ solution\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        return (*max_element(nums.begin(), nums.end()))*k + (k-1)*k/2;\\n    }\\n};\\n```\n```Java []\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = nums[0];\\n        for(int i=1; i<nums.length; i++){\\n            if(max<nums[i]) max = nums[i];\\n        }\\n        return max*k + (k-1)*k/2;\\n    }\\n}\\n```\n```python []\\nclass Solution(object):\\n    def maximizeSum(self, nums, k):\\n        return (max(nums))*k + (k-1)*k/2;\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3577800,
                "title": "javascript-easiest-solution",
                "content": "# Intuition\\nThe code appears to aim at finding the maximum sum by selecting the maximum element from the given array nums and adding k consecutive integers starting from 0.\\n# Approach\\n1. Find the maximum element in the array using Math.max(...nums).\\n2. Initialize the variable sum with the maximum element.\\n3. Iterate k-1 times starting from 1 (since we have already accounted for 0 in the maximum element).\\n4. In each iteration, add the current maximum element plus the current iteration index to the sum.\\n5. Return the final sum.\\n\\n# Complexity\\n- Time complexity: O(k)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {number} k\\n * @return {number}\\n */\\nvar maximizeSum = function(nums, k) {\\n    let max = Math.max(...nums);\\n    sum = max;\\n    for(let i=1; i<k; i++){\\n        sum+= max+i;\\n    }\\n    return sum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {number} k\\n * @return {number}\\n */\\nvar maximizeSum = function(nums, k) {\\n    let max = Math.max(...nums);\\n    sum = max;\\n    for(let i=1; i<k; i++){\\n        sum+= max+i;\\n    }\\n    return sum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3548260,
                "title": "2656-java-easy-to-understand",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = 0 , ans = 0;\\n        // In this loop to find maximum value in the nums array;\\n        for(int i : nums) if(max < i) max = i;\\n        \\n        // this loop to perform k times\\n        // ex:  add max value to ans and increse the max by 1;\\n        for(int j = 1; j <= k; j++) ans += max++;\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = 0 , ans = 0;\\n        // In this loop to find maximum value in the nums array;\\n        for(int i : nums) if(max < i) max = i;\\n        \\n        // this loop to perform k times\\n        // ex:  add max value to ans and increse the max by 1;\\n        for(int j = 1; j <= k; j++) ans += max++;\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3522370,
                "title": "java-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        int last=nums[nums.length-1];\\n        int sum=0;\\n        for(int i=0;i<k;i++)\\n        {\\n            sum+=(last+i);\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        int last=nums[nums.length-1];\\n        int sum=0;\\n        for(int i=0;i<k;i++)\\n        {\\n            sum+=(last+i);\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3513691,
                "title": "easy-to-understand-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        m = max(nums)\\n\\n        res = 0\\n        for i in range(k):\\n            res+=m\\n            m+=1\\n        return res\\n\\n        \\n\\n     \\n\\n\\n            \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        m = max(nums)\\n\\n        res = 0\\n        for i in range(k):\\n            res+=m\\n            m+=1\\n        return res\\n\\n        \\n\\n     \\n\\n\\n            \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3509818,
                "title": "java-1ms-100-3-lines-summation-formula-explanation",
                "content": "The algorithm is:\\n\\n1. Find maximum value `m` in array `nums[]`.\\n2. Return summation formula calculation to find sum of: `m`, `m+1`, ... `m+k-2`, `m+k-1`\\n\\nThe general mathematical summation formula for summing the values 1...n, is: n(n+1)/2.\\n\\nTo find the sum of `m`...`m+k-1`, use: sum(`1`...`m+k-1`) - sum(`1`...`m-1`).\\n\\nWhich in words is: sum of the first `m-k-1` positive integers, then subtract the unused integers below `m` by subtracting the sum of the first `m-1` positive integers.  Using the general mathematical summation formula, this would result in the algebraic expression below, then simplified as shown in algebraic steps:\\n```\\n\\t(m+k-1)(m+k)/2 - (m-1)m/2\\n\\t((m+k-1)(m+k) - (m-1)m) / 2\\n\\t((m^2 + mk + mk + k^2 - m - k) - (m^2 - m)) / 2\\n\\t(m^2 + mk + mk + k^2 - m - k - m^2 + m) / 2\\n\\t(m^2 - m^2 + 2mk + k^2 - m + m - k) / 2\\n\\t(2mk + k^2 -k) / 2\\n\\tk(2m + k - 1) / 2\\n```\\nThe final algebraic expression is used in the code below to quickly return the sum of `m`...`m+k-1`.\\n\\n**--- Fastest code (1ms in August 2023) ---**\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int maxNum = 0;\\n        for (int n : nums)  if (n > maxNum)  maxNum = n;\\n        return k * (2 * maxNum + k - 1) / 2;\\n    }\\n}\\n```\\n**--- Shortest code (5ms in August 2023) ---**\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        return k * (2 * Arrays.stream(nums).max().getAsInt() + k - 1) / 2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\t(m+k-1)(m+k)/2 - (m-1)m/2\\n\\t((m+k-1)(m+k) - (m-1)m) / 2\\n\\t((m^2 + mk + mk + k^2 - m - k) - (m^2 - m)) / 2\\n\\t(m^2 + mk + mk + k^2 - m - k - m^2 + m) / 2\\n\\t(m^2 - m^2 + 2mk + k^2 - m + m - k) / 2\\n\\t(2mk + k^2 -k) / 2\\n\\tk(2m + k - 1) / 2\\n```\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int maxNum = 0;\\n        for (int n : nums)  if (n > maxNum)  maxNum = n;\\n        return k * (2 * maxNum + k - 1) / 2;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        return k * (2 * Arrays.stream(nums).max().getAsInt() + k - 1) / 2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3501634,
                "title": "easy-java-solution-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int sum = 0;\\n        Arrays.sort(nums); \\n        int curr = nums[nums.length-1];\\n        for(int i=curr; i<curr+k; i++) {\\n            sum+=i;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int sum = 0;\\n        Arrays.sort(nums); \\n        int curr = nums[nums.length-1];\\n        for(int i=curr; i<curr+k; i++) {\\n            sum+=i;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3492139,
                "title": "simple-java-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int sum = 0;\\n        int count = 0;\\n        Arrays.sort(nums);\\n        while(count < k) {\\n            sum += nums[nums.length - 1];\\n            nums[nums.length - 1] = 1 + nums[nums.length - 1];\\n            count++;\\n            \\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int sum = 0;\\n        int count = 0;\\n        Arrays.sort(nums);\\n        while(count < k) {\\n            sum += nums[nums.length - 1];\\n            nums[nums.length - 1] = 1 + nums[nums.length - 1];\\n            count++;\\n            \\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3467762,
                "title": "i-kotlin-java-plain-math-formula-explanation-one-liners",
                "content": "# Math Approach\\nThe approach consists of several steps.\\n## 1. Find the Best m at the First Step.\\nLet\\'s show that the best \\'m\\' to choose is a max value from `nums`.\\n\\nLet\\'s assume the final result is:\\n\\n$$r = m_1 + m_2 + ... + m_k $$\\n\\nwhere $m_i$ is the $m$ selected at the $i$-th step. If we choose a value $$ l $$ such that $l < m_0$, then the total sum will be lesser:\\n\\n$$l + m_1 + ... + m_k  < m_0 + m_1 + ... + m_k $$\\n\\n## 2. Find the Best m at Following Steps.\\n\\nNow let\\'s show that $m_i = m_{i-1}+1$ is the best value to choose during the next steps.\\n\\nAs it was said, the best value to choose is the maximum from the `nums`. Let\\'s assume that there is a value $l_i$, and $l_i > m_i$, which is same as:\\n\\n$ l_i > m_{i-1} + 1$\\n\\nOn the other hand, we know that $ m_{i-1} \\\\ge l_j $ for $1 \\\\le j < k$, and that brings us to:\\n\\n$ l_i > m_{i-1} + 1 >  m_{i-1} \\\\ge l_j $\\n\\nIn a short form that led us to a contradiction:\\n\\n$ l_i > l_j $, for $1 \\\\le j \\\\lt k$.\\n\\nThat means there is no such number $l_i$ that is bigger than $m_{i-1}+1$.\\n\\n## 3. Calculate the Score\\n\\nAs it has been given in the description, the score is the sum of all $m_i$, and $1 \\\\le i \\\\le k$.\\n\\n$r = m_1 + m_2 + m_3 + ... + m_k $\\n\\nDo the replacement $m_i = m_{i-1}+1$:\\n\\n$r = m_1 + (m_1 + 1) + (m_2 + 1)+...+ (m_{k-1} + 1) $\\n\\nContinue, until we get $m_1$ only:\\n\\n$r = m_1 + (m_1 + 1) + (m_1 + 2)+...+ (m_1 + k - 1) $\\n\\nSo we can group all $m_1$ to a multiplication:\\n\\n$r = k m_1 + 1 + 2 + 3 + ... + k - 1 $\\n\\nAnd now we have a sum of an arithmetic progression from $1$ to $k - 1$:\\n\\n$r = k m_1 + \\\\frac{k(k - 1)}{2} $\\n\\nThat\\'s it.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n  Looking for a max value of the `nums` has a linear complexity.\\n\\n- Space complexity: $$O(1)$$\\n  The space amount doesn\\'t depend on input data size, so we get a constant complexity.\\n\\n# Kotlin Code\\n```\\nclass Solution {\\n    fun maximizeSum(nums: IntArray, k: Int) = \\n        k * (nums.max() ?: 0) + k * (k - 1) / 2\\n}\\n```\\n\\n# Java Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        return Arrays.stream(nums).max().getAsInt() * k + k * (k - 1) / 2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Kotlin",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    fun maximizeSum(nums: IntArray, k: Int) = \\n        k * (nums.max() ?: 0) + k * (k - 1) / 2\\n}\\n```\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        return Arrays.stream(nums).max().getAsInt() * k + k * (k - 1) / 2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3467383,
                "title": "python3-one-line",
                "content": "Since we are being asked to find the maximum score, we have to work with the **max(nums**), increasing this number by one every iteration. Thus, the maximum result will be obtained by multiplying k by the max(nums) and the sum of increments k times.\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        return max(nums) * k + sum(range(1, k))\\n```\\nsum(range(1, k)) can be calculated by the formula:\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        return max(nums) * k + k * (k - 1) // 2\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        return max(nums) * k + sum(range(1, k))\\n```\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        return max(nums) * k + k * (k - 1) // 2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3467229,
                "title": "very-easy-solution",
                "content": "class Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n       PriorityQueue<Integer> pq= new PriorityQueue<>(Collections.reverseOrder()) ;\\n       for (int i:nums){\\n           pq. add(i);\\n       }\\n        int sum=0;\\n        for(int I=0;I<k;I++) {\\n             int res=pq.poll() ;\\n            sum+= res ;\\n        pq. add(res+1) ;  \\n        }\\n        return sum;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "class Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n       PriorityQueue<Integer> pq= new PriorityQueue<>(Collections.reverseOrder()) ;\\n       for (int i:nums){\\n           pq. add(i);\\n       }",
                "codeTag": "Java"
            },
            {
                "id": 3467223,
                "title": "very-easy-solution",
                "content": "class Solution {\\n    public int[] findThePrefixCommonArray(int[] A, int[] B) {\\n        int []C=new int[A.length];\\n        int count=0;\\n        HashSet<Integer> hs=new HashSet<>();\\n        for(int i=0;i<A.length;i++){\\n           hs.add(A[i]);\\n        for(int j=0;j<=i;j++){\\n            if(hs.contains(B[j])){\\n                count++;\\n            }\\n        }\\n            C[i]=count;\\n            count=0;\\n        }\\n        return C;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "class Solution {\\n    public int[] findThePrefixCommonArray(int[] A, int[] B) {\\n        int []C=new int[A.length];\\n        int count=0;\\n        HashSet<Integer> hs=new HashSet<>();\\n        for(int i=0;i<A.length;i++){\\n           hs.add(A[i]);\\n        for(int j=0;j<=i;j++){\\n            if(hs.contains(B[j])){\\n                count++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3467136,
                "title": "c-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int mx = 0;\\n        for(auto x: nums) mx = max(mx, x);\\n        int ans = 0;\\n        while(k--) {\\n            ans += mx;\\n            mx++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int mx = 0;\\n        for(auto x: nums) mx = max(mx, x);\\n        int ans = 0;\\n        while(k--) {\\n            ans += mx;\\n            mx++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466903,
                "title": "simple-max-heap-solution",
                "content": "# Approach\\nUsing maxheap to get the maximum element till k becomes 0.\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        priority_queue<int> pq(nums.begin(),nums.end());\\n        int ans = 0;\\n        while(k--)\\n        {\\n            int t = pq.top();\\n            ans += t;\\n            pq.pop();\\n            pq.push(t+1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        priority_queue<int> pq(nums.begin(),nums.end());\\n        int ans = 0;\\n        while(k--)\\n        {\\n            int t = pq.top();\\n            ans += t;\\n            pq.pop();\\n            pq.push(t+1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466835,
                "title": "find-max-formula-c-time-o-n-space-o-1",
                "content": "````\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int x = 0;\\n        for(auto &i: nums){\\n            x = max(x,i);\\n        }\\n        return x*k+(k*(k-1))/2;\\n    }\\n};\\n````",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "Math"
                ],
                "code": "````\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int x = 0;\\n        for(auto &i: nums){\\n            x = max(x,i);\\n        }\\n        return x*k+(k*(k-1))/2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466728,
                "title": "max-heap-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        priority_queue<int> pq(nums.begin(), nums.end());\\n        int ans = 0;\\n        while(k--) {\\n            int a = pq.top(); pq.pop();\\n            ans += a;\\n            pq.push(a + 1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        priority_queue<int> pq(nums.begin(), nums.end());\\n        int ans = 0;\\n        while(k--) {\\n            int a = pq.top(); pq.pop();\\n            ans += a;\\n            pq.push(a + 1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466690,
                "title": "c-2-lines",
                "content": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int mx=*max_element(nums.begin(),nums.end());   \\n        return ((mx+k-1)*(mx+k))/2 - ((mx-1)*(mx))/2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int mx=*max_element(nums.begin(),nums.end());   \\n        return ((mx+k-1)*(mx+k))/2 - ((mx-1)*(mx))/2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466644,
                "title": "c-solution-easy-to-understand",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        sort(nums.begin(),nums.end());\\n        \\n        int n = nums[nums.size()-1];\\n        int ans = nums[nums.size()-1];\\n        for(int i = 1; i<k; i++){\\n            n+=1;\\n            ans+=n;\\n        }\\n        return ans;\\n    }\\n};\\n\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        sort(nums.begin(),nums.end());\\n        \\n        int n = nums[nums.size()-1];\\n        int ans = nums[nums.size()-1];\\n        for(int i = 1; i<k; i++){\\n            n+=1;\\n            ans+=n;\\n        }\\n        return ans;\\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4090512,
                "title": "beginner-friendly-simple-solution-in-python-typescript",
                "content": "# Intuition\\nThe task description is the following:\\n- there\\'s a list of `nums` and integer `k`\\n- our goal is find **the maximum sum** after `k`- increment operations\\n\\n```\\n# Example\\nnums = [4,5,6]\\nk = 3\\n\\n# To maximize the sum we need to increment\\n# at each step the maximum num in nums\\nsum = 0 + 6++\\nk = 2\\n\\nsum = 6 + 7++\\nk = 1\\n\\nsum = 13 + 8++ \\nk = 0\\n```\\n\\nThis\\'s where the **Greedy approach** comes from!\\n\\n# Approach\\n1. define the `max` integer from `nums`\\n2. declare an `ans` with `0`\\n3. iterate until `k > 0`\\n4. decrement `k` and increment `ans` with `max++`\\n5. return `ans`\\n\\n# Complexity\\n- Time complexity: **O(n+k)**, to find `max` and iterate over `k`\\n\\n- Space complexity: **O(1)**, we don\\'t allocate extra space.\\n\\n# Code in TypeScript\\n```\\nfunction maximizeSum(nums: number[], k: number): number {\\n    let max = Math.max(...nums);\\n    let ans = 0;\\n\\n    while (k) {\\n        k--;\\n        ans += max++;\\n    }\\n\\n    return ans;\\n};\\n```\\n# Code in Python3\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        maximum = max(nums)\\n        ans = 0\\n\\n        while k:\\n            ans += maximum\\n            maximum += 1\\n            k -= 1\\n\\n        return ans\\n\\n};\\n```",
                "solutionTags": [
                    "Python",
                    "TypeScript",
                    "Array",
                    "Greedy"
                ],
                "code": "```\\n# Example\\nnums = [4,5,6]\\nk = 3\\n\\n# To maximize the sum we need to increment\\n# at each step the maximum num in nums\\nsum = 0 + 6++\\nk = 2\\n\\nsum = 6 + 7++\\nk = 1\\n\\nsum = 13 + 8++ \\nk = 0\\n```\n```\\nfunction maximizeSum(nums: number[], k: number): number {\\n    let max = Math.max(...nums);\\n    let ans = 0;\\n\\n    while (k) {\\n        k--;\\n        ans += max++;\\n    }\\n\\n    return ans;\\n};\\n```\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        maximum = max(nums)\\n        ans = 0\\n\\n        while k:\\n            ans += maximum\\n            maximum += 1\\n            k -= 1\\n\\n        return ans\\n\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4083089,
                "title": "java-2-solutions-heap-without-heap",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = 0;\\n        for(int p : nums){\\n            max = Math.max(p, max);\\n        }\\n        int res = max;\\n        while(k-->1){\\n            res += ++max;\\n        }\\n        return res;\\n    }\\n}\\n```\\n\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        // PriorityQueue<Integer> pq = new PriorityQueue<>((a,b) -> {\\n        //     return b - a;\\n        // });\\n        // for(int p : nums){\\n        //     pq.offer(p);\\n        // }\\n        // int count = 0;\\n        // while(k --> 0){\\n        //     int ele = pq.poll();\\n        //     count += ele;\\n        //     pq.offer(ele + 1);\\n        // }\\n        // return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = 0;\\n        for(int p : nums){\\n            max = Math.max(p, max);\\n        }\\n        int res = max;\\n        while(k-->1){\\n            res += ++max;\\n        }\\n        return res;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        // PriorityQueue<Integer> pq = new PriorityQueue<>((a,b) -> {\\n        //     return b - a;\\n        // });\\n        // for(int p : nums){\\n        //     pq.offer(p);\\n        // }\\n        // int count = 0;\\n        // while(k --> 0){\\n        //     int ele = pq.poll();\\n        //     count += ele;\\n        //     pq.offer(ele + 1);\\n        // }\\n        // return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3828019,
                "title": "beats-100-solution-beginner-friendly-solution-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. Initialize a variable \\'max\\' to store the maximum element in the array \\'nums\\'. This can be done with a single pass through the array, resulting in O(n) time complexity.\\n2. Set \\'num\\' to the value of \\'max\\' and \\'sum\\' to \\'num\\'. The \\'num\\' variable will keep track of the current element we are considering, and \\'sum\\' will store the cumulative sum of the \\'num\\' values.\\n3. Use a loop that runs \\'k\\' times (from 1 to k-1) to simulate the process of increasing \\'num\\' by 1 in each iteration and adding it to \\'sum\\'.\\n4. Inside the loop, increment \\'num\\' by 1 and update \\'sum\\' by adding the new value of \\'num\\' to it.\\n5. Finally, return the \\'sum\\', which represents the maximum possible sum obtained by increasing the \\'num\\' value \\'k\\' times.\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = nums[0];\\n        for(int i=1; i<nums.length; i++){\\n            if(nums[i]>max){\\n                max = nums[i];\\n            }\\n        }\\n        int num = max;\\n        int sum=num;\\n        for(int i=1; i<k; i++){\\n            num = num +1;\\n            sum = sum + num;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = nums[0];\\n        for(int i=1; i<nums.length; i++){\\n            if(nums[i]>max){\\n                max = nums[i];\\n            }\\n        }\\n        int num = max;\\n        int sum=num;\\n        for(int i=1; i<k; i++){\\n            num = num +1;\\n            sum = sum + num;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3795478,
                "title": "java-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nwe need to find the max element and perform the given operations on it only\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nfirst we found out the max element with the help of for loop then we applied the logic to return the desired value.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public int maximizeSum(int[] nums, int k) \\n    {  int max=nums[0];\\n        for(int i=1;i<nums.length;i++)\\n        {\\n            if(nums[i]>max)\\n            {\\n                max=nums[i];\\n            }\\n        }\\n            return max*k+(k*(k-1))/2;\\n        }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int maximizeSum(int[] nums, int k) \\n    {  int max=nums[0];\\n        for(int i=1;i<nums.length;i++)\\n        {\\n            if(nums[i]>max)\\n            {\\n                max=nums[i];\\n            }\\n        }\\n            return max*k+(k*(k-1))/2;\\n        }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3795466,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nwe need to find the max element and perform the given operations on it only\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nfirst the array is sorted so now we know that the last element of the array is the max one so we\\'ll perform all the operations on the last element of the array.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public int maximizeSum(int[] nums, int k) \\n    {\\n     int score=0;\\n       int max=0;\\n        Arrays.sort(nums);\\n           for(int i=0;i<k;i++)\\n           {  \\n             score+=nums[nums.length-1];\\n              nums[nums.length-1]+=1;\\n              \\n           }\\n        return score;\\n    }\\n}\\n  \\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int maximizeSum(int[] nums, int k) \\n    {\\n     int score=0;\\n       int max=0;\\n        Arrays.sort(nums);\\n           for(int i=0;i<k;i++)\\n           {  \\n             score+=nums[nums.length-1];\\n              nums[nums.length-1]+=1;\\n              \\n           }\\n        return score;\\n    }\\n}\\n  \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3795465,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nwe need to find the max element and perform the given operations on it only\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nfirst the array is sorted so now we know that the last element of the array is the max one so we\\'ll perform all the operations on the last element of the array.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public int maximizeSum(int[] nums, int k) \\n    {\\n     int score=0;\\n       int max=0;\\n        Arrays.sort(nums);\\n           for(int i=0;i<k;i++)\\n           {  \\n             score+=nums[nums.length-1];\\n              nums[nums.length-1]+=1;\\n              \\n           }\\n        return score;\\n    }\\n}\\n  \\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int maximizeSum(int[] nums, int k) \\n    {\\n     int score=0;\\n       int max=0;\\n        Arrays.sort(nums);\\n           for(int i=0;i<k;i++)\\n           {  \\n             score+=nums[nums.length-1];\\n              nums[nums.length-1]+=1;\\n              \\n           }\\n        return score;\\n    }\\n}\\n  \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3751890,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nJust find maximum num and sum it with incrsase the value.\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max=Integer.MIN_VALUE;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n        max=Math.max(max,nums[i]);\\n        }\\n        int sum=0;\\n        for(int i=0;i<k;i++)\\n        {\\n            sum=sum+max;\\n            max=max+1;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max=Integer.MIN_VALUE;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n        max=Math.max(max,nums[i]);\\n        }\\n        int sum=0;\\n        for(int i=0;i<k;i++)\\n        {\\n            sum=sum+max;\\n            max=max+1;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3715297,
                "title": "a-solution-you-like",
                "content": "# Intuition\\nwe have to calculate the 1st k integer. Can we easily get access the max value? then with max value just add int k. You will get your range. now just add all the number between max of the array and max+k.You will get your desire answer.\\n\\n# Approach\\n1. Declair max and update it.\\n2. add k and max.\\n3. now run a loop from max to max+k and add all the number. \\n4. return your answer and chill.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n      int n = nums.length;\\n        //Update the max\\n      int max = Integer.MIN_VALUE;\\n        for(int i=0; i<n; i++){\\n            if(max < nums[i])     max = nums[i];\\n        }\\n        //add max and k to get the next disting no.\\n      int num2 = (max+k);   \\n        //sum up all the numbers.\\n      int sum = 0; \\n        for(int i=max; i<num2; i++){\\n            sum += i;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n      int n = nums.length;\\n        //Update the max\\n      int max = Integer.MIN_VALUE;\\n        for(int i=0; i<n; i++){\\n            if(max < nums[i])     max = nums[i];\\n        }\\n        //add max and k to get the next disting no.\\n      int num2 = (max+k);   \\n        //sum up all the numbers.\\n      int sum = 0; \\n        for(int i=max; i<num2; i++){\\n            sum += i;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3712162,
                "title": "simple-easy-to-understand-solution-java",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        \\n        Arrays.sort(nums);\\n        \\n        return (k*nums[nums.length-1]+((k*(k-1))/2));\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        \\n        Arrays.sort(nums);\\n        \\n        return (k*nums[nums.length-1]+((k*(k-1))/2));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3707516,
                "title": "easy-one-liner-c-java-python-code-o-n-time-o-1-space-with-approach",
                "content": "# Approach\\n\\n- As we need to find max_element+(max_element+1)+(max_element+2)+....+(max_element+k-1) = max_element*k + k(k-1)/2 \\n\\n- The given code defines a class Solution with a member function maximizeSum. This function takes a vector nums of integers and an integer k as parameters and returns an integer.\\n\\n- The maximizeSum function computes the maximum possible sum of nums by performing the following steps:\\n\\n- *max_element(nums.begin(), nums.end()): This part finds the maximum element in the nums vector using the max_element function from the C++ Standard Library. The max_element function returns an iterator pointing to the maximum element in the range specified by nums.begin() and nums.end(). The * operator dereferences the iterator to obtain the actual value of the maximum element.\\n\\n- *max_element(nums.begin(), nums.end()) * k: This multiplies the maximum element by k.\\n\\n- k * (k - 1) / 2: This calculates the sum of integers from 1 to k-1 using the formula (k * (k - 1)) / 2.\\n\\n- Finally, the two results obtained in steps 2 and 3 are added together to get the maximum possible sum.\\n\\n---\\n\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n---\\n\\n# Code\\n```java []\\nimport java.util.Arrays;\\n\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        return Arrays.stream(nums).max().getAsInt() * k + k * (k - 1) / 2;\\n    }\\n}\\n```\\n```python []\\nclass Solution:\\n    def maximizeSum(self, nums, k):\\n        return max(nums) * k + k * (k - 1) // 2\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        return *max_element(nums.begin(), nums.end())*k+k*(k-1)/2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "Array",
                    "Greedy"
                ],
                "code": "```java []\\nimport java.util.Arrays;\\n\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        return Arrays.stream(nums).max().getAsInt() * k + k * (k - 1) / 2;\\n    }\\n}\\n```\n```python []\\nclass Solution:\\n    def maximizeSum(self, nums, k):\\n        return max(nums) * k + k * (k - 1) // 2\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        return *max_element(nums.begin(), nums.end())*k+k*(k-1)/2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3690011,
                "title": "simple-cpp-two-lines-code-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nwe are given an array and integer value k which denotes the number of operations to perform. In each operation we have to pick an element say m and remove it from array and insert m+1 into array.Increase your score by m.our goal is to return the maximum score you can achieve after performing the operation exactly k times.\\n\\n---\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nInorder to achieve maximum score we have to choose the ```maximum```value in every operation and replace the maximum value with ```maximum+1``` in the array.In every iteration the following operations undergoes\\n```\\nscore= maximum+(maximum+1)+.....+(maximum+k-1)\\nscore= maximum*k+(1+2+..(k-1))\\nscore= maximum*k+(k*(k-1)/2)\\n```\\n---\\n\\n\\n# Complexity\\n- Time complexity: **$$O(n)$$**\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:**$$O(1)$$**\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n---\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int maxi = *max_element(nums.begin(), nums.end() ) ;\\n        return maxi*k + ((k - 1) * k/2);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Greedy"
                ],
                "code": "```maximum```\n```maximum+1```\n```\\nscore= maximum+(maximum+1)+.....+(maximum+k-1)\\nscore= maximum*k+(1+2+..(k-1))\\nscore= maximum*k+(k*(k-1)/2)\\n```\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int maxi = *max_element(nums.begin(), nums.end() ) ;\\n        return maxi*k + ((k - 1) * k/2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3622102,
                "title": "c-very-simple",
                "content": "# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\n// m is max element\\n// sum of: m, m + 1, m + 2, .... m + k-1\\n// => sum = (m * k) + 1 + 2 + .... k-1\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int m = *max_element(nums.begin(), nums.end());    \\n        return m*k + k*(k - 1)/2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n// m is max element\\n// sum of: m, m + 1, m + 2, .... m + k-1\\n// => sum = (m * k) + 1 + 2 + .... k-1\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int m = *max_element(nums.begin(), nums.end());    \\n        return m*k + k*(k - 1)/2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3598941,
                "title": "beats-98-65-with-just-2-lines-of-code-step-by-step-explanation",
                "content": "![Screenshot (19).png](https://assets.leetcode.com/users/images/a9af8941-e4e0-48a3-a1f0-39d303cb6539_1685936382.6902094.png)\\n\\n# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem requires finding the maximum possible sum by performing a specific operation on the given array of numbers.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. let max = Math.max(...nums); - This line finds the maximum number in the nums array using the Math.max function and the spread operator (...). It spreads the array elements as individual arguments to the Math.max function, which returns the maximum value.\\n\\n2. return ((max + k) * (max + k - 1)/2) - (max * (max - 1) / 2 ); - This line performs the calculation to maximize the sum. It calculates the sum of consecutive numbers from 1 to the new maximum number (max + k) and subtracts the sum of consecutive numbers from 1 to the original maximum number (max).\\n\\n   * (max + k) * (max + k - 1)/2 calculates the sum of consecutive numbers from 1 to max + k. This is done using the formula for the sum of an arithmetic series.\\n\\n   * (max * (max - 1) / 2) calculates the sum of consecutive numbers from 1 to max.\\n\\n   * By subtracting the sum of the original range from the sum of the new range, the code obtains the difference between the two ranges, which represents the maximum possible increase in the sum.\\n\\n# Complexity\\n- Time complexity: O(n) - The code has a linear time complexity as it iterates through the array to find the maximum number.\\n- Space complexity: O(1) - The code has a constant space complexity as it does not use additional space that grows with the input size; it only utilizes a few scalar variables.\\n\\n# Code\\n```\\nfunction maximizeSum(nums: number[], k: number): number {\\n    let max = Math.max(...nums);\\n    return ((max + k) * (max + k - 1)/2) - (max * (max - 1) / 2 )\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Array",
                    "Greedy"
                ],
                "code": "```\\nfunction maximizeSum(nums: number[], k: number): number {\\n    let max = Math.max(...nums);\\n    return ((max + k) * (max + k - 1)/2) - (max * (max - 1) / 2 )\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3581729,
                "title": "c-o-n",
                "content": "# Intuition\\nWe can get answer simply by adding k consecutive integers greater than eqaul to greatest element in the array\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        \\n        int Max = 0;\\n        \\n        for(auto num: nums){                    //finding max element\\n            Max=max(Max,num);\\n        }\\n        \\n        int ans=0;                              //variable to store answer\\n        \\n        while(k){\\n            ans+=Max+--k;                       //adding max and the consecutive numbers to ans\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        \\n        int Max = 0;\\n        \\n        for(auto num: nums){                    //finding max element\\n            Max=max(Max,num);\\n        }\\n        \\n        int ans=0;                              //variable to store answer\\n        \\n        while(k){\\n            ans+=Max+--k;                       //adding max and the consecutive numbers to ans\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3547044,
                "title": "easy-solution",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n    sort the array \\n    then maxm number will be at last \\n    sum it and update its value to +1;\\n\\n# Complexity\\n- Time complexity:O(nlogn)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        int sum=0;\\n        for(int i=0;i<k;i++){\\n            sum+=nums[nums.length-1];\\n            nums[nums.length-1]++;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        int sum=0;\\n        for(int i=0;i<k;i++){\\n            sum+=nums[nums.length-1];\\n            nums[nums.length-1]++;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3496809,
                "title": "java-beat-95-with-linear-runtime-complexity-and-constant-memory-complexity",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = 1;\\n        for (int num : nums) {\\n            if (num > max) {\\n                max = num;\\n            }\\n        }\\n        return max * k  + k * (k - 1) / 2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = 1;\\n        for (int num : nums) {\\n            if (num > max) {\\n                max = num;\\n            }\\n        }\\n        return max * k  + k * (k - 1) / 2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3492160,
                "title": "simple-java-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = 0;\\n        for(int i = 0; i < nums.length; i++) {\\n            max = Math.max(max, nums[i]);\\n        }\\n        \\n        int sum = 0;\\n        for(int i = 0; i < k; i++) {\\n            sum += max;\\n            max++;\\n        }\\n        return sum;        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = 0;\\n        for(int i = 0; i < nums.length; i++) {\\n            max = Math.max(max, nums[i]);\\n        }\\n        \\n        int sum = 0;\\n        for(int i = 0; i < k; i++) {\\n            sum += max;\\n            max++;\\n        }\\n        return sum;        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3490642,
                "title": "beast-97-simple-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n     int max=nums[0];\\n    int sum=0;\\n    for(int i=0;i<nums.length;i++)\\n    {\\n        if(nums[i]>max)max=nums[i];\\n    }\\n    for(int i=1;i<=k;i++)\\n    {\\n        sum+=max;\\n        max=(max+1);\\n        \\n    }\\n    return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n     int max=nums[0];\\n    int sum=0;\\n    for(int i=0;i<nums.length;i++)\\n    {\\n        if(nums[i]>max)max=nums[i];\\n    }\\n    for(int i=1;i<=k;i++)\\n    {\\n        sum+=max;\\n        max=(max+1);\\n        \\n    }\\n    return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3483514,
                "title": "simple-easy",
                "content": "# Approach\\nDo not have to remove or insert the element back again. Since the subsequent max elements after finding the first max will always be prev max plus one.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nfunction maximizeSum(nums: number[], k: number): number {\\n  let max = Math.max(...nums);\\n  let maxSum = 0;\\n\\n  for (let i = 0; i < k; i += 1) {\\n    maxSum += max;\\n    max += 1;\\n  }\\n\\n  return maxSum\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction maximizeSum(nums: number[], k: number): number {\\n  let max = Math.max(...nums);\\n  let maxSum = 0;\\n\\n  for (let i = 0; i < k; i += 1) {\\n    maxSum += max;\\n    max += 1;\\n  }\\n\\n  return maxSum\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3479257,
                "title": "python-best-solution-100-faster-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\uD83D\\uDD25Python \\u2705\\u2705 Best Solution ( \\uD83D\\uDD25 100% faster \\uD83D\\uDD25) Easy to Understand\\uD83D\\uDCAF\\uD83D\\uDCAF \\u2B06\\u2B06\\u2B06\\n\\n\\n# Code\\n```\\nclass Solution(object):\\n    def maximizeSum(self, nums, k):\\n        \"\"\"\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        \"\"\"\\n        nums.sort()\\n        n=len(nums)-1\\n        maxx=nums[n]\\n        ans=0\\n        second=maxx\\n        while(k):\\n            ans+=second\\n            second=second+1\\n            k=k-1\\n\\n        return ans\\n            \\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def maximizeSum(self, nums, k):\\n        \"\"\"\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        \"\"\"\\n        nums.sort()\\n        n=len(nums)-1\\n        maxx=nums[n]\\n        ans=0\\n        second=maxx\\n        while(k):\\n            ans+=second\\n            second=second+1\\n            k=k-1\\n\\n        return ans\\n            \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3478698,
                "title": "c-linq-one-line",
                "content": "\\n# Code\\n```\\npublic class Solution {\\n    public int MaximizeSum(int[] nums, int k) \\n        => Enumerable.Range(nums.Max(), k).Sum();\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MaximizeSum(int[] nums, int k) \\n        => Enumerable.Range(nums.Max(), k).Sum();\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3476840,
                "title": "javascript-o-n-time-o-1-space-math",
                "content": "# Approach\\nTo get maximum sum, we are clearly interested in adding to the maximum element in `nums`.\\n\\nHaving that, result would be the sum of numbers in the range $$[max, max + k)$$.\\n\\n**Note, `)` denotes an exclusive range, `]` inclusive.*\\n\\nThis can be computed in $$O(1)$$ with a tiny bit of math.\\n\\nSum of numbers in range $$[max, max + k)$$ equals to the sum of numbers in the range $$[1, max + k)$$ minus sum of numbers in range $$[1, max)$$.\\n\\nBoth of these can be computed by the formula: Sum of $$[1, n]$$ quals $$n * (n + 1) / 2$$ \\n\\n```\\nfunction maximizeSum(nums, k) {\\n    const max = Math.max(...nums);\\n\\n    const sum1 = max * (max - 1) / 2;\\n    const sum2 = (max + k) * (max + k - 1) / 2;\\n\\n    return sum2 - sum1;\\n};\\n```\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n",
                "solutionTags": [
                    "JavaScript",
                    "Math"
                ],
                "code": "```\\nfunction maximizeSum(nums, k) {\\n    const max = Math.max(...nums);\\n\\n    const sum1 = max * (max - 1) / 2;\\n    const sum2 = (max + k) * (max + k - 1) / 2;\\n\\n    return sum2 - sum1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3474973,
                "title": "simple-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFind the maximum element in the array.And adding to a variable by adding 1 for each iteration;\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int m=0,max=0;\\n        for(int i=0;i<nums.length;i++)\\n            if (nums[i]>=max)\\n                max=nums[i];\\n        for(int i=0;i<k;i++){\\n            m+=max;\\n            max+=1;\\n        }\\n        return m;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int m=0,max=0;\\n        for(int i=0;i<nums.length;i++)\\n            if (nums[i]>=max)\\n                max=nums[i];\\n        for(int i=0;i<k;i++){\\n            m+=max;\\n            max+=1;\\n        }\\n        return m;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3471196,
                "title": "rust-python-2-lines-o-n-with-math",
                "content": "# Intuition\\nWe only need to find maximum of elements in a vector. One we got it, we just constantly increase it k time. So if the maximum is $m$, then the result is:\\n\\n$R = m + (m + 1) + ... (m + k - 1)$\\n\\nUsing math, we get $R = m \\\\cdot k + (0 + 1 + ... + k - 1) = mk + k(k - 1) / 2$\\n\\n# Complexity\\n- Time complexity: $O(n)$\\n- Space complexity: $O(1)$\\n\\n# Code\\n```Rust []\\nimpl Solution {\\n  pub fn maximize_sum(nums: Vec<i32>, k: i32) -> i32 {\\n    let m = *nums.iter().max().unwrap();\\n    return m * k + k * (k - 1) / 2;\\n  }\\n}\\n```\\n```python []\\nclass Solution:\\n  def maximizeSum(self, nums: List[int], k: int) -> int:\\n    return max(nums) * k + k * (k - 1) // 2\\n```\\n",
                "solutionTags": [
                    "Rust",
                    "Math"
                ],
                "code": "```Rust []\\nimpl Solution {\\n  pub fn maximize_sum(nums: Vec<i32>, k: i32) -> i32 {\\n    let m = *nums.iter().max().unwrap();\\n    return m * k + k * (k - 1) / 2;\\n  }\\n}\\n```\n```python []\\nclass Solution:\\n  def maximizeSum(self, nums: List[int], k: int) -> int:\\n    return max(nums) * k + k * (k - 1) // 2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3470617,
                "title": "easy-c-solution-100-fast",
                "content": "## Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n## Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int maxi= *max_element(nums.begin(),nums.end());\\n        int ans= k*maxi;\\n        k--;\\n        ans+= (k*(k+1))/2;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math",
                    "Design",
                    "Brainteaser"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int maxi= *max_element(nums.begin(),nums.end());\\n        int ans= k*maxi;\\n        k--;\\n        ans+= (k*(k+1))/2;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3469706,
                "title": "python-elegant-short-1-line-math-arithmetic-progression",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        return k * max(nums) + k * (k - 1) // 2\\n```\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        return k * max(nums) + k * (k - 1) // 2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3469410,
                "title": "maximum-sum-with-exactly-k-elements-c-c",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        priority_queue<int> pq;\\n        int n=nums.size();\\n        int ans=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            pq.push(nums[i]);\\n        }\\n        while(k--)\\n        {\\n            int x=pq.top();\\n            ans+=x;\\n            pq.pop();\\n            pq.push(x+1);\\n            \\n            \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        priority_queue<int> pq;\\n        int n=nums.size();\\n        int ans=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            pq.push(nums[i]);\\n        }\\n        while(k--)\\n        {\\n            int x=pq.top();\\n            ans+=x;\\n            pq.pop();\\n            pq.push(x+1);\\n            \\n            \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3468899,
                "title": "very-easy-solution-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        int ans=0;\\n        for(int i=0;i<k;i++){\\n            int num=nums[nums.length-1];\\n            ans+=num;\\n            nums[nums.length-1]=num+1;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        int ans=0;\\n        for(int i=0;i<k;i++){\\n            int num=nums[nums.length-1];\\n            ans+=num;\\n            nums[nums.length-1]=num+1;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3468469,
                "title": "c-easy-approach",
                "content": "Here is my c++ code for this problem.\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n\\n- Space complexity:$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        return ((*max_element(nums.begin(), nums.end()))*k)+((k*(k-1))/2);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        return ((*max_element(nums.begin(), nums.end()))*k)+((k*(k-1))/2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3467977,
                "title": "simple-arithmetic-sum-in-rust-full-explanation-one-line-no-additional-var-created",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem asks for a simple sum of an arithmetic series. No actual vector manipulation needed as only the largest object matters. \\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsing nums.iter().max().unwrap() the largest value in nums is found.\\nIter() iterates over the vector, max() finds the largest value and unwrap() is needed to get rid of optional type.\\nIn fact there is no need for the input to be a vector as no changes are made to it. \\n\\nThe rest is the formula for an arithmetic sum: $(2a+(n-1)*d)*\\\\frac{n}{2}$ where:\\n$a = nums.iter().max().unwrap()$\\n$n = k$\\n$d = 1$\\nAs $d = 1$ it can be removed from the expression giving $(2a+n-1)*\\\\frac{n}{2}$\\nAs such the final formula is $(2*nums.iter().max().unwrap()+k-1)*\\\\frac{k}{2}$\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimpl Solution {\\n    pub fn maximize_sum(nums: Vec<i32>, k: i32) -> i32 {\\n    (2*nums.iter().max().unwrap()+k-1)*k/2\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Math"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn maximize_sum(nums: Vec<i32>, k: i32) -> i32 {\\n    (2*nums.iter().max().unwrap()+k-1)*k/2\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3467679,
                "title": "c-solution-using-priority-queue",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n       O(N logN)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->      \\n       O(N)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int m=nums.size();\\n        priority_queue<int>pq;\\n        int sum=0;\\n        \\n        for(int i=0; i<m; i++)\\n        {\\n            pq.push(nums[i]);\\n            \\n        }\\n        int r=0;\\n        while(r<k)\\n        {\\n            sum+=pq.top();\\n            int u=pq.top();\\n            pq.push(u+1);\\n            r++;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int m=nums.size();\\n        priority_queue<int>pq;\\n        int sum=0;\\n        \\n        for(int i=0; i<m; i++)\\n        {\\n            pq.push(nums[i]);\\n            \\n        }\\n        int r=0;\\n        while(r<k)\\n        {\\n            sum+=pq.top();\\n            int u=pq.top();\\n            pq.push(u+1);\\n            r++;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3467585,
                "title": "very-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n       Arrays.sort(nums);\\n        int sum = 0;\\n        int count =0;\\n        int temp = 0;\\n        while(count < k){\\n            sum = sum + nums[nums.length-1];\\n            temp = nums[nums.length-1]+1;\\n            nums[nums.length-1] = temp;\\n            count++;\\n        }\\n        return sum;\\n    }\\n}\\n```\\n**Kindly upvote if you like the solution**",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n       Arrays.sort(nums);\\n        int sum = 0;\\n        int count =0;\\n        int temp = 0;\\n        while(count < k){\\n            sum = sum + nums[nums.length-1];\\n            temp = nums[nums.length-1]+1;\\n            nums[nums.length-1] = temp;\\n            count++;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3467516,
                "title": "easy-solution-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        int ans=0;\\n        for(int i=0;i<k;i++){\\n            int num=nums[nums.length-1];\\n            ans=ans+num;\\n            nums[nums.length-1]=num+1;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        int ans=0;\\n        for(int i=0;i<k;i++){\\n            int num=nums[nums.length-1];\\n            ans=ans+num;\\n            nums[nums.length-1]=num+1;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3467314,
                "title": "very-simple-and-easy-solution",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tint maximizeSum(vector<int>& nums, int k) \\n\\t\\t{\\n\\t\\t\\tint score = 0;\\n\\t\\t\\tsort(nums.begin(), nums.end());\\n\\t\\t\\tint n = nums.size()-1;\\n\\n\\t\\t\\twhile(k--)\\n\\t\\t\\t{\\n\\t\\t\\t\\tint temp = nums[n];\\n\\t\\t\\t\\tscore += temp;\\n\\t\\t\\t\\tnums[n] = temp+1;\\n\\t\\t\\t}\\n\\t\\t\\treturn score;\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint maximizeSum(vector<int>& nums, int k) \\n\\t\\t{\\n\\t\\t\\tint score = 0;\\n\\t\\t\\tsort(nums.begin(), nums.end());\\n\\t\\t\\tint n = nums.size()-1;\\n\\n\\t\\t\\twhile(k--)\\n\\t\\t\\t{\\n\\t\\t\\t\\tint temp = nums[n];\\n\\t\\t\\t\\tscore += temp;\\n\\t\\t\\t\\tnums[n] = temp+1;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 3467235,
                "title": "with-o-n-2-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nfind the max\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n-its all about finding the max element from the array\\n-finding the max and getting out the output with formula\\n-k* maxs + k*(k-1)/2;\\n# Complexity\\n- Time complexity:O(nlogn)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) \\n    {\\n        int maxs=*nums(first_index, last_index);\\n        int z=k*(k-1)/2;\\n        return k*maxs+z;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) \\n    {\\n        int maxs=*nums(first_index, last_index);\\n        int z=k*(k-1)/2;\\n        return k*maxs+z;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3467119,
                "title": "c-3-simple-approach",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int sum=0;\\n        \\n        //Time Complexity O(N)  [Priority Queue]\\n        priority_queue<int, vector<int>,greater<int>>PQ;\\n        for(int it:nums){\\n            PQ.push(it);\\n            if(PQ.size()>1)PQ.pop();\\n        }\\n        int temp = PQ.top();\\n        while(k--){\\n            sum+=temp;\\n            temp++;\\n        }\\n\\n        // Time Complexity: O(N)  [Noobra Approach]\\n        int maxi = 1;\\n        for(int it:nums)maxi=max(maxi,it);\\n        int temp = maxi;\\n        while(k--){\\n            sum+=temp;\\n            temp++;\\n        }\\n         \\n        \\n        // Time Complexity: O(Nlog N)    [My Friend Approach]\\n        sort(nums.begin(),nums.end());\\n        int temp = nums[nums.size()-1];\\n        while(k--){\\n            sum+=temp;\\n            temp++;\\n        }\\n\\n\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int sum=0;\\n        \\n        //Time Complexity O(N)  [Priority Queue]\\n        priority_queue<int, vector<int>,greater<int>>PQ;\\n        for(int it:nums){\\n            PQ.push(it);\\n            if(PQ.size()>1)PQ.pop();\\n        }\\n        int temp = PQ.top();\\n        while(k--){\\n            sum+=temp;\\n            temp++;\\n        }\\n\\n        // Time Complexity: O(N)  [Noobra Approach]\\n        int maxi = 1;\\n        for(int it:nums)maxi=max(maxi,it);\\n        int temp = maxi;\\n        while(k--){\\n            sum+=temp;\\n            temp++;\\n        }\\n         \\n        \\n        // Time Complexity: O(Nlog N)    [My Friend Approach]\\n        sort(nums.begin(),nums.end());\\n        int temp = nums[nums.size()-1];\\n        while(k--){\\n            sum+=temp;\\n            temp++;\\n        }\\n\\n\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3467096,
                "title": "simple-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int ans=0;\\n        while(k>0) {\\n            sort(nums.begin(), nums.end());\\n            ans+= nums[nums.size()-1];\\n            nums[nums.size()-1]= nums[nums.size()-1]+1;\\n            k--;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int ans=0;\\n        while(k>0) {\\n            sort(nums.begin(), nums.end());\\n            ans+= nums[nums.size()-1];\\n            nums[nums.size()-1]= nums[nums.size()-1]+1;\\n            k--;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3467028,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int MaximizeSum(int[] nums, int k) {\\n        int max = nums.Max();\\n        int c = max;\\n        for(int i=1; i<k; i++)\\n        {\\n            max += 1;\\n            c += max;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MaximizeSum(int[] nums, int k) {\\n        int max = nums.Max();\\n        int c = max;\\n        for(int i=1; i<k; i++)\\n        {\\n            max += 1;\\n            c += max;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466901,
                "title": "java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        \\n        int n = nums[nums.length - 1];\\n        int ans = nums[nums.length - 1];\\n        for(int i = 1; i < k; i++) {\\n            n += 1;\\n            ans += n;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        \\n        int n = nums[nums.length - 1];\\n        int ans = nums[nums.length - 1];\\n        for(int i = 1; i < k; i++) {\\n            n += 1;\\n            ans += n;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466876,
                "title": "java-contest-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        int max = nums[nums.length-1];\\n        int[] ans = new int[k];\\n        for(int i=0;i<k;i++){\\n            ans[i]=max+i;\\n        }\\n        int a =0;\\n        for(int j=0;j<k;j++){\\n            a+=ans[j];\\n        }\\n        return a;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        int max = nums[nums.length-1];\\n        int[] ans = new int[k];\\n        for(int i=0;i<k;i++){\\n            ans[i]=max+i;\\n        }\\n        int a =0;\\n        for(int j=0;j<k;j++){\\n            a+=ans[j];\\n        }\\n        return a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466855,
                "title": "4-line-solution-simple-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        sort(nums.begin(),nums.end());\\n        int p =0;\\n        while(k>0){\\n            int z = nums[nums.size()-1];\\n          p += nums[nums.size()-1];\\n            nums[nums.size()-1] = z+1;\\n            k--;\\n        }\\n        return p;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        sort(nums.begin(),nums.end());\\n        int p =0;\\n        while(k>0){\\n            int z = nums[nums.size()-1];\\n          p += nums[nums.size()-1];\\n            nums[nums.size()-1] = z+1;\\n            k--;\\n        }\\n        return p;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466821,
                "title": "c-simple-to-understand-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nJust have a look at testcases. We can deduce that all we need to do is finding max element. After that we can just loop for k and increase these element and add to answer.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nYou can directly get the max element using vector stl. You can also use `max()` function, but I choose using ternanry operator. \\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int max = -1;\\n        \\n        for (auto it : nums) {\\n            max = it > max ? it : max;\\n        }\\n        \\n        int ans = 0;\\n        \\n        for (int i=0;i<k;i++) {\\n            ans += max;\\n            max += 1;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int max = -1;\\n        \\n        for (auto it : nums) {\\n            max = it > max ? it : max;\\n        }\\n        \\n        int ans = 0;\\n        \\n        for (int i=0;i<k;i++) {\\n            ans += max;\\n            max += 1;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466813,
                "title": "simplest-java-solution-constant-time",
                "content": "# Intuition\\nSimplest solution applying formula with constant time complexity\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n\\n# Code\\n```\\nimport java.util.*;\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        int sum=0;\\n        int n= nums.length;\\n        sum =nums[n-1]*k+(k*(k+1))/2-k;\\n        return sum;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.util.*;\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        int sum=0;\\n        int n= nums.length;\\n        sum =nums[n-1]*k+(k*(k+1))/2-k;\\n        return sum;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466790,
                "title": "simple-dart-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\n  int maximizeSum(List<int> nums, int k) {\\n    nums.sort();\\n    int largestEl = nums.last;\\n    int sum = largestEl;\\n    for (int i = 1; i < k; i++) {\\n      largestEl++;\\n      sum += largestEl;\\n    }\\n    return sum;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  int maximizeSum(List<int> nums, int k) {\\n    nums.sort();\\n    int largestEl = nums.last;\\n    int sum = largestEl;\\n    for (int i = 1; i < k; i++) {\\n      largestEl++;\\n      sum += largestEl;\\n    }\\n    return sum;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466746,
                "title": "approach-explained-priority-queue-easy-c",
                "content": "# Intuition\\n\\n\\n# Approach\\ntake and add top element of priority queue and push top element+1 k times \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int sum=0;\\n        priority_queue<int>  q;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            q.push(nums[i]);\\n        }\\n        while(k--)\\n        {\\n            int a=q.top();\\n            q.pop();\\n            sum+=a;\\n            q.push(a+1);\\n        }\\n        return sum;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int sum=0;\\n        priority_queue<int>  q;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            q.push(nums[i]);\\n        }\\n        while(k--)\\n        {\\n            int a=q.top();\\n            q.pop();\\n            sum+=a;\\n            q.push(a+1);\\n        }\\n        return sum;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466671,
                "title": "very-easy-java-solution-o-n-beats-100",
                "content": "# Intuition\\njust do what is said in the question.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max=0;\\n        for(int i:nums)max=Math.max(i,max);\\n        // int ts=max+k;\\n        // ts=(ts*(ts+1))/2;\\n        // max=max-1;\\n        // max=(max*(max+1))/2;\\n        // return ts-max;\\n        int ans=0;\\n        for(int i=0;i<k;i++)ans+=max+i;\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max=0;\\n        for(int i:nums)max=Math.max(i,max);\\n        // int ts=max+k;\\n        // ts=(ts*(ts+1))/2;\\n        // max=max-1;\\n        // max=(max*(max+1))/2;\\n        // return ts-max;\\n        int ans=0;\\n        for(int i=0;i<k;i++)ans+=max+i;\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466661,
                "title": "easiest-solution-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n    \\n    sort(nums.begin(), nums.end(), greater<int>());\\n    int score = 0;\\n    for(int i=0; i<k; i++) {\\n        int m = nums[0];\\n        nums.erase(nums.begin());\\n        nums.push_back(m+1);\\n        score += m;\\n        sort(nums.begin(), nums.end(), greater<int>());\\n    }\\n    return score;  \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n    \\n    sort(nums.begin(), nums.end(), greater<int>());\\n    int score = 0;\\n    for(int i=0; i<k; i++) {\\n        int m = nums[0];\\n        nums.erase(nums.begin());\\n        nums.push_back(m+1);\\n        score += m;\\n        sort(nums.begin(), nums.end(), greater<int>());\\n    }\\n    return score;  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466657,
                "title": "python-1-line",
                "content": "```python\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        return ((max(nums) + max(nums)+k-1)*k) // 2\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        return ((max(nums) + max(nums)+k-1)*k) // 2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4102934,
                "title": "c-fast-and-easy-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        sort(nums.begin(), nums.end());\\n        int sum = 0;\\n        for(int i=0;i<k;i++){\\n            sum+= nums[nums.size()-1];\\n            nums[nums.size()-1]+=1;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        sort(nums.begin(), nums.end());\\n        int sum = 0;\\n        for(int i=0;i<k;i++){\\n            sum+= nums[nums.size()-1];\\n            nums[nums.size()-1]+=1;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4098041,
                "title": "golang-solution",
                "content": "\\n# Code\\n```\\nfunc maximizeSum(nums []int, k int) int {\\n    max, score := 0, 0\\n\\n\\tfor _, n := range nums {\\n\\t\\tif n > max {\\n\\t\\t\\tmax = n\\n\\t\\t}\\n\\t}\\n\\n\\tfor i := 0; i < k; i++ {\\n\\t\\tscore += max\\n\\t\\tmax += 1\\n\\t}\\n\\n\\treturn score\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc maximizeSum(nums []int, k int) int {\\n    max, score := 0, 0\\n\\n\\tfor _, n := range nums {\\n\\t\\tif n > max {\\n\\t\\t\\tmax = n\\n\\t\\t}\\n\\t}\\n\\n\\tfor i := 0; i < k; i++ {\\n\\t\\tscore += max\\n\\t\\tmax += 1\\n\\t}\\n\\n\\treturn score\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4097058,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nint maximizeSum(int* nums, int numsSize, int k){\\n\\tint a;\\n\\tint bul;\\n\\tint last;\\n\\n\\tbul = 0;\\n\\tfor (a = 0; a < numsSize; a++)\\n\\t{\\n\\t\\tif (bul < nums[a])\\n\\t\\t{\\n\\t\\t\\tbul = nums[a];\\n\\t\\t}\\n\\t}\\n\\ta = 0;\\n\\tlast = 0;\\n\\twhile (a < k)\\n\\t{\\n\\t\\t\\n\\t\\tlast += bul + a;\\n\\t\\ta++;\\n\\t}\\n\\treturn (last);\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint maximizeSum(int* nums, int numsSize, int k){\\n\\tint a;\\n\\tint bul;\\n\\tint last;\\n\\n\\tbul = 0;\\n\\tfor (a = 0; a < numsSize; a++)\\n\\t{\\n\\t\\tif (bul < nums[a])\\n\\t\\t{\\n\\t\\t\\tbul = nums[a];\\n\\t\\t}\\n\\t}\\n\\ta = 0;\\n\\tlast = 0;\\n\\twhile (a < k)\\n\\t{\\n\\t\\t\\n\\t\\tlast += bul + a;\\n\\t\\ta++;\\n\\t}\\n\\treturn (last);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4095110,
                "title": "python3-easy-solution",
                "content": "# Complexity\\n- Time complexity:\\nO(k * log(N))\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        nums.sort()\\n        ans = 0\\n        while k > 0:\\n            a = nums.pop()\\n            b = a + 1\\n            nums.append(b)\\n            ans += a\\n            k -= 1\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        nums.sort()\\n        ans = 0\\n        while k > 0:\\n            a = nums.pop()\\n            b = a + 1\\n            nums.append(b)\\n            ans += a\\n            k -= 1\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4092076,
                "title": "easy-java-code",
                "content": "class Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int result=0;\\n        int max=0;\\n        int sum=0;\\n        for(int i = 0; i<nums.length;i++){\\n               max = Math.max(max,nums[i]);\\n        }\\n        for(int j=1;j<k;j++){\\n            sum+= ++max;\\n          }   \\n            result = sum+max-(k-1);\\n       \\n        return result;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int result=0;\\n        int max=0;\\n        int sum=0;\\n        for(int i = 0; i<nums.length;i++){\\n               max = Math.max(max,nums[i]);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 4091751,
                "title": "one-liner-o-1-code-in-python3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        return (max(nums)*k) + ((k-1)*k)//2\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        return (max(nums)*k) + ((k-1)*k)//2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4090653,
                "title": "python-beats-90",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        largest = 0\\n        total = 0 \\n\\n        for i in nums:\\n            if i > largest:\\n                largest = i\\n\\n        while k > 0:\\n            total += largest \\n            largest += 1\\n            k -= 1\\n\\n        return total\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        largest = 0\\n        total = 0 \\n\\n        for i in nums:\\n            if i > largest:\\n                largest = i\\n\\n        while k > 0:\\n            total += largest \\n            largest += 1\\n            k -= 1\\n\\n        return total\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4086259,
                "title": "java-easy-4-line-code-beats-100",
                "content": "# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max=0;\\n        for(int i=0;i<nums.length;i++)\\n            max = Math.max(nums[i],max);\\n        return k*max + (k-1)*(k)/2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max=0;\\n        for(int i=0;i<nums.length;i++)\\n            max = Math.max(nums[i],max);\\n        return k*max + (k-1)*(k)/2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4085364,
                "title": "simple-code-in-gooooo",
                "content": "\\n\\n# Code\\n```\\nfunc maximizeSum(nums []int, k int) int {\\n\\n    m := nums[0]\\n\\tfor i := 1; i < len(nums); i++ {\\n\\t\\tif m < nums[i] {\\n\\t\\t\\tm = nums[i]\\n\\t\\t}\\n\\t}\\n\\n\\tsum := k*m + (k-1)*k/2\\n\\n\\treturn sum\\n\\n    \\n    \\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc maximizeSum(nums []int, k int) int {\\n\\n    m := nums[0]\\n\\tfor i := 1; i < len(nums); i++ {\\n\\t\\tif m < nums[i] {\\n\\t\\t\\tm = nums[i]\\n\\t\\t}\\n\\t}\\n\\n\\tsum := k*m + (k-1)*k/2\\n\\n\\treturn sum\\n\\n    \\n    \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4083668,
                "title": "simple-solution-using-python",
                "content": "I approacched this prlbem using example cases\\n\\n# Code\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        result = []\\n        nums = sorted(nums)\\n        result.append(max(nums))\\n        for i in range(k-1):\\n            result.append(result[i]+1)\\n        return sum(result)\\n\\n     \\n\\n            \\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        result = []\\n        nums = sorted(nums)\\n        result.append(max(nums))\\n        for i in range(k-1):\\n            result.append(result[i]+1)\\n        return sum(result)\\n\\n     \\n\\n            \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4073499,
                "title": "easy-peasy-lemon-squeezy-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        add = 0\\n        for i in range(k):\\n            add += max(nums)\\n            nums[nums.index(max(nums))] = max(nums)+1\\n        return add\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        add = 0\\n        for i in range(k):\\n            add += max(nums)\\n            nums[nums.index(max(nums))] = max(nums)+1\\n        return add\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4071967,
                "title": "java-simple-solution-using-arraylist",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        ArrayList<Integer> l1=new ArrayList<Integer>();\\n        for(int i=0;i<nums.length;i++){\\n            l1.add(nums[i]);\\n        }\\n        int val2=Collections.max(l1);\\n        int ans=0;\\n        for(int i=0;i<k;i++){\\n            ans=ans+val2;\\n            val2++;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        ArrayList<Integer> l1=new ArrayList<Integer>();\\n        for(int i=0;i<nums.length;i++){\\n            l1.add(nums[i]);\\n        }\\n        int val2=Collections.max(l1);\\n        int ans=0;\\n        for(int i=0;i<k;i++){\\n            ans=ans+val2;\\n            val2++;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069565,
                "title": "python-logic-simple-with-explanation",
                "content": "# Code\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        #we will always apply the operation on the largest element\\n        p=max(nums)\\n        #we apply that operation k times\\n        ans=0\\n        for i in range(k):\\n            ans+=(p+(1*i))\\n        return ans\\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        #we will always apply the operation on the largest element\\n        p=max(nums)\\n        #we apply that operation k times\\n        ans=0\\n        for i in range(k):\\n            ans+=(p+(1*i))\\n        return ans\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069127,
                "title": "php",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @param Integer $k\\n     * @return Integer\\n     */\\n    function maximizeSum($nums, $k) {\\n        $max=max($nums);\\n        $sum=$max;\\n        for($i=1;$i<$k;$i++){\\n            $max++;\\n            $sum+=$max;\\n        }\\n        return $sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "PHP",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @param Integer $k\\n     * @return Integer\\n     */\\n    function maximizeSum($nums, $k) {\\n        $max=max($nums);\\n        $sum=$max;\\n        for($i=1;$i<$k;$i++){\\n            $max++;\\n            $sum+=$max;\\n        }\\n        return $sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4066415,
                "title": "easy-java-and-python",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Java\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int result = 0; \\n        int max = nums[0];\\n\\n        for (int num : nums) {\\n            max = Math.max(max, num);\\n        }\\n\\n        for (int i = 0; i < k; i++) {\\n            result += max + i;\\n        }\\n\\n        return result;\\n    }\\n}\\n```\\n\\n# Python\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        result = 0\\n        max_value = max(nums)\\n\\n        for i in range(k):\\n            result += max_value + i\\n\\n        return result\\n        \\n```",
                "solutionTags": [
                    "Java",
                    "Python3"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int result = 0; \\n        int max = nums[0];\\n\\n        for (int num : nums) {\\n            max = Math.max(max, num);\\n        }\\n\\n        for (int i = 0; i < k; i++) {\\n            result += max + i;\\n        }\\n\\n        return result;\\n    }\\n}\\n```\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        result = 0\\n        max_value = max(nums)\\n\\n        for i in range(k):\\n            result += max_value + i\\n\\n        return result\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4065414,
                "title": "easy-solution-o-n-o-1",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int sum = 0;\\n        int max = 0;\\n        for (int i = 0; i <= nums.size() - 1; i++) {\\n            if (nums[i] > max) max = nums[i];\\n        }\\n        sum = max;\\n        for (int i = 0 ; i <= k - 2; i++) {\\n            max += 1;\\n            sum += max;\\n        }\\n\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int sum = 0;\\n        int max = 0;\\n        for (int i = 0; i <= nums.size() - 1; i++) {\\n            if (nums[i] > max) max = nums[i];\\n        }\\n        sum = max;\\n        for (int i = 0 ; i <= k - 2; i++) {\\n            max += 1;\\n            sum += max;\\n        }\\n\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4065010,
                "title": "c-fast-solution-93-23-runtime-96-24-memory-o-n",
                "content": "# Intuition\\nJust sort the array and add.\\n\\n# Code\\n```\\npublic class Solution {\\n    public int MaximizeSum(int[] nums, int k) {\\n        Array.Sort(nums);\\n            int sum = 0;\\n\\n            for(int i = 0; i<k; i++)\\n            {\\n                sum += nums[nums.Length - 1];\\n                nums[nums.Length - 1] += 1;\\n            }\\n\\n            return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MaximizeSum(int[] nums, int k) {\\n        Array.Sort(nums);\\n            int sum = 0;\\n\\n            for(int i = 0; i<k; i++)\\n            {\\n                sum += nums[nums.Length - 1];\\n                nums[nums.Length - 1] += 1;\\n            }\\n\\n            return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4063703,
                "title": "2656-maximum-sum-with-exactly-k-elements",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int sum = 0;\\n        Arrays.sort(nums);\\n        for(int i=0;i<k;i++){\\n            sum += nums[nums.length-1];\\n            nums[nums.length-1]++;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int sum = 0;\\n        Arrays.sort(nums);\\n        for(int i=0;i<k;i++){\\n            sum += nums[nums.length-1];\\n            nums[nums.length-1]++;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4062961,
                "title": "easy-understandable-java-soln-beats-100-tc-and-92-sc",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nfind max and add it for k times and also keep adding +1 to the max value\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N*log(k)), O(n*log(N)), O(N)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(N), O(K), O(1)\\nThese are some solutions that striked my mind, and then just keep optimizing\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int n = nums.length;\\n\\n        /*  M1:\\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\\n        for(int i=0;i<n;i++) {\\n            maxHeap.add(nums[i]);\\n        }\\n        int sum = 0;\\n        for(int i=0;i<k;i++) {\\n            sum += maxHeap.peek();\\n            maxHeap.add(maxHeap.poll()+1);\\n        }\\n        */\\n\\n        /*  M2:\\n        PriorityQueue<Integer> minHeap = new PriorityQueue<>();\\n        for(int i=0;i<n;i++) {\\n            minHeap.add(nums[i]);\\n            if(minHeap.size() > 1) minHeap.poll();\\n        }\\n        int sum = 0;\\n        for(int i=0;i<k;i++) {\\n            sum += minHeap.peek();\\n            minHeap.add(minHeap.poll()+1);\\n        }\\n        */\\n\\n        // Arrays.sort(nums);\\n        int max = 0;\\n        for(int i=0;i<n;i++) {\\n            max = Math.max(max, nums[i]);\\n        }\\n        /*\\n        int val = max;\\n        int sum = 0;\\n        for(int i=0;i<k;i++) {\\n            sum += val;\\n            val += 1;\\n        }\\n        return sum;\\n        */\\n\\n        return max*k + k*(k-1)/2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int n = nums.length;\\n\\n        /*  M1:\\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\\n        for(int i=0;i<n;i++) {\\n            maxHeap.add(nums[i]);\\n        }\\n        int sum = 0;\\n        for(int i=0;i<k;i++) {\\n            sum += maxHeap.peek();\\n            maxHeap.add(maxHeap.poll()+1);\\n        }\\n        */\\n\\n        /*  M2:\\n        PriorityQueue<Integer> minHeap = new PriorityQueue<>();\\n        for(int i=0;i<n;i++) {\\n            minHeap.add(nums[i]);\\n            if(minHeap.size() > 1) minHeap.poll();\\n        }\\n        int sum = 0;\\n        for(int i=0;i<k;i++) {\\n            sum += minHeap.peek();\\n            minHeap.add(minHeap.poll()+1);\\n        }\\n        */\\n\\n        // Arrays.sort(nums);\\n        int max = 0;\\n        for(int i=0;i<n;i++) {\\n            max = Math.max(max, nums[i]);\\n        }\\n        /*\\n        int val = max;\\n        int sum = 0;\\n        for(int i=0;i<k;i++) {\\n            sum += val;\\n            val += 1;\\n        }\\n        return sum;\\n        */\\n\\n        return max*k + k*(k-1)/2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4059430,
                "title": "java-o-n-using-sum-of-first-n-natural-numbers-technique",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int n = k-1;\\n        int max = nums[0];\\n        for(int i=0; i<nums.length; i++) {\\n            if (nums[i] > max) max = nums[i];\\n        }\\n        return max*k + ((n*(n+1))/2);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int n = k-1;\\n        int max = nums[0];\\n        for(int i=0; i<nums.length; i++) {\\n            if (nums[i] > max) max = nums[i];\\n        }\\n        return max*k + ((n*(n+1))/2);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4059077,
                "title": "easiest-solution",
                "content": "\\n# Complexity\\n- Time complexity:\\nO(N+K)\\n- Space complexity:\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        \\n        int sum=0;\\n        sort(nums.begin(),nums.end());\\n        int val=nums[nums.size()- 1];\\n        while(k--)\\n        {\\n            sum=sum+val;\\n            val++;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        \\n        int sum=0;\\n        sort(nums.begin(),nums.end());\\n        int val=nums[nums.size()- 1];\\n        while(k--)\\n        {\\n            sum=sum+val;\\n            val++;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4055235,
                "title": "easy-and-100-optimized-java-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max= 0;\\n        for(int i = 0 ; i<nums.length ; i++){\\n            max = Math.max(max , nums[i]);\\n          }\\n         \\n        return (k*max) + (k*(k-1))/2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max= 0;\\n        for(int i = 0 ; i<nums.length ; i++){\\n            max = Math.max(max , nums[i]);\\n          }\\n         \\n        return (k*max) + (k*(k-1))/2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4055184,
                "title": "2-ms-solution-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int sum = 0;\\n        int max = 0;\\n        for(int i=0;i<nums.length; i++){\\n            if(max<nums[i]){\\n                max = nums[i];\\n            }\\n        }\\n\\n        for(int i=0;i<k;i++){\\n            sum += max;\\n            max++;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int sum = 0;\\n        int max = 0;\\n        for(int i=0;i<nums.length; i++){\\n            if(max<nums[i]){\\n                max = nums[i];\\n            }\\n        }\\n\\n        for(int i=0;i<k;i++){\\n            sum += max;\\n            max++;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4053812,
                "title": "easy-solution-using-priority-queue-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsing Priority Queue\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        priority_queue<int> pq;\\n        \\n        for(int i =0;i<nums.size();i++){\\n            pq.push(nums[i]);\\n        }\\n\\nint sum =0;\\n        for(int i =0;i<k;i++){\\n            int val = pq.top();\\n            pq.pop();\\n            pq.push(val+1);\\nsum+=val;\\n        }\\n\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        priority_queue<int> pq;\\n        \\n        for(int i =0;i<nums.size();i++){\\n            pq.push(nums[i]);\\n        }\\n\\nint sum =0;\\n        for(int i =0;i<k;i++){\\n            int val = pq.top();\\n            pq.pop();\\n            pq.push(val+1);\\nsum+=val;\\n        }\\n\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4053694,
                "title": "1-line-code-beats-100-of-users",
                "content": "# Intuition \\nthis is the question of mathematics(arithmatic progression) rather than computer science.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        Arrays.sort(nums);\\nreturn nums[nums.length-1]*k+ k*(k-1)/2;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        Arrays.sort(nums);\\nreturn nums[nums.length-1]*k+ k*(k-1)/2;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4051004,
                "title": "typescript-easy-to-understand-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction maximizeSum(nums: number[], k: number): number {\\n  let maxi = Math.max(...nums);\\n  let ans:number=0;\\n  while(k>0){\\n      maxi++;\\n      ans += maxi-1;\\n      k--;\\n  }\\n  return ans;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction maximizeSum(nums: number[], k: number): number {\\n  let maxi = Math.max(...nums);\\n  let ans:number=0;\\n  while(k>0){\\n      maxi++;\\n      ans += maxi-1;\\n      k--;\\n  }\\n  return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4050262,
                "title": "easypizzy-solution-javascript",
                "content": "\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {number} k\\n * @return {number}\\n */\\nvar maximizeSum = function(nums, k) {\\n    nums.sort((a,b)=>a-b);\\n\\n    let score = 0;\\n    for(let i=0; i<k; i++)\\n    {\\n        let m = nums[nums.length -1];\\n        score += m ;\\n        nums.pop(m);\\n        nums.push(m+1)\\n\\n    }\\n\\n    return score;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {number} k\\n * @return {number}\\n */\\nvar maximizeSum = function(nums, k) {\\n    nums.sort((a,b)=>a-b);\\n\\n    let score = 0;\\n    for(let i=0; i<k; i++)\\n    {\\n        let m = nums[nums.length -1];\\n        score += m ;\\n        nums.pop(m);\\n        nums.push(m+1)\\n\\n    }\\n\\n    return score;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4050041,
                "title": "python3-simple-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        ans = 0\\n        cur = max(nums)\\n        for i in range(k):\\n            ans += cur\\n            cur+=1\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        ans = 0\\n        cur = max(nums)\\n        for i in range(k):\\n            ans += cur\\n            cur+=1\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4049718,
                "title": "my-python-solution-2",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        k1=max(nums)\\n        k1*=k\\n        for i in range(1,k):\\n            k1+=i\\n        return k1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        k1=max(nums)\\n        k1*=k\\n        for i in range(1,k):\\n            k1+=i\\n        return k1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4049713,
                "title": "my-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        honey=0\\n        for i in range(k):\\n            k1=max(nums)\\n            nums.remove(k1)\\n            nums.append(k1+1)\\n            honey+=k1\\n        return honey\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        honey=0\\n        for i in range(k):\\n            k1=max(nums)\\n            nums.remove(k1)\\n            nums.append(k1+1)\\n            honey+=k1\\n        return honey\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4046297,
                "title": "easy-solution-in-python",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        nums.sort()\\n        ans=0\\n        for i in range(k):\\n            ans=ans+nums[-1]\\n            nums[-1]=nums[-1]+1\\n        return ans\\n        \\n```",
                "solutionTags": [
                    "Python3",
                    "Sort"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        nums.sort()\\n        ans=0\\n        for i in range(k):\\n            ans=ans+nums[-1]\\n            nums[-1]=nums[-1]+1\\n        return ans\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4043887,
                "title": "swift",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func maximizeSum(_ nums: [Int], _ k: Int) -> Int {\\n    var initialVal = nums.max()!\\n    var result = 0\\n    \\n    for i in 0..<k {\\n        \\n        result += initialVal + i\\n        \\n    }\\n    \\n    return result\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func maximizeSum(_ nums: [Int], _ k: Int) -> Int {\\n    var initialVal = nums.max()!\\n    var result = 0\\n    \\n    for i in 0..<k {\\n        \\n        result += initialVal + i\\n        \\n    }\\n    \\n    return result\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4041775,
                "title": "python-one-line-solution-beats-100-using-the-sum-forumla-of-an-arthmetic-sequence",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nMr Miftah\\nWe are using the sum forumla of an arthmetic sequence\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe use Mr Miftah lesson better learn your maths\\nU(n+1)=Un+1 where U0=max(nums) also, Un=Uo+n*r but r=1 so Un=Uo+n\\n\\nn=k-1 \\nTherefore:\\nSn=(k/2)*(2*max(nums)+(k-1))\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        return int((k/2)*(2*max(nums)+(k-1)))\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        return int((k/2)*(2*max(nums)+(k-1)))\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4041123,
                "title": "java-simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max=nums[0];\\n        for(int i=0;i<nums.length;i++){\\n            max = Math.max(nums[i],max);\\n        }\\n        System.out.print(max);\\n        int sum=0;\\n        for(int i=1;i<=k;i++){\\n            sum+=max++;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max=nums[0];\\n        for(int i=0;i<nums.length;i++){\\n            max = Math.max(nums[i],max);\\n        }\\n        System.out.print(max);\\n        int sum=0;\\n        for(int i=1;i<=k;i++){\\n            sum+=max++;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4039937,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) \\n    {\\n        int maxValue=nums[0];\\n        for(int i=1;i<nums.length;i++)\\n        {\\n            maxValue=Math.max(maxValue,nums[i]);\\n        }\\n        int sum=maxValue;\\n        while(k>1)\\n        {\\n            sum+=++maxValue;\\n            k--;\\n        }\\n        return sum;       \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) \\n    {\\n        int maxValue=nums[0];\\n        for(int i=1;i<nums.length;i++)\\n        {\\n            maxValue=Math.max(maxValue,nums[i]);\\n        }\\n        int sum=maxValue;\\n        while(k>1)\\n        {\\n            sum+=++maxValue;\\n            k--;\\n        }\\n        return sum;       \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4035181,
                "title": "easy-to-understand-with-100-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public static int maximizeSum(int[] nums, int k) {\\n\\t\\tint maxNumber = returnMax(nums);\\n\\t\\tint sum = 0;\\n\\t\\tfor (int i = 0; i < k; i++) {\\n\\t\\t\\tsum = sum + (maxNumber+i);\\n\\t\\t}\\n        return sum;\\n    }\\n\\t\\n\\t//find max from array\\n\\tpublic static int returnMax(int[] arr) {\\n\\t\\tint max = Integer.MIN_VALUE;\\n\\t\\tfor (int i = 0; i < arr.length; i++) {\\n\\t\\t\\tif(max<arr[i]) {\\n\\t\\t\\t\\tmax = arr[i];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn max;\\n\\t}\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public static int maximizeSum(int[] nums, int k) {\\n\\t\\tint maxNumber = returnMax(nums);\\n\\t\\tint sum = 0;\\n\\t\\tfor (int i = 0; i < k; i++) {\\n\\t\\t\\tsum = sum + (maxNumber+i);\\n\\t\\t}\\n        return sum;\\n    }\\n\\t\\n\\t//find max from array\\n\\tpublic static int returnMax(int[] arr) {\\n\\t\\tint max = Integer.MIN_VALUE;\\n\\t\\tfor (int i = 0; i < arr.length; i++) {\\n\\t\\t\\tif(max<arr[i]) {\\n\\t\\t\\t\\tmax = arr[i];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn max;\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4032454,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\nfunc maximizeSum(_ nums: [Int], _ k: Int) -> Int {\\n    var max = nums.max()!\\n    var sum = max\\n    \\n    for i in 1..<k {\\n        sum += max + i\\n    }\\n    \\n    return sum\\n}\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\nfunc maximizeSum(_ nums: [Int], _ k: Int) -> Int {\\n    var max = nums.max()!\\n    var sum = max\\n    \\n    for i in 1..<k {\\n        sum += max + i\\n    }\\n    \\n    return sum\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4031941,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int n=nums.size();\\n        sort(nums.begin(),nums.end()); \\n        int sum=nums[n-1];\\n        for(int i=1;i<k;i++)\\n        {\\n            sum=sum+nums[n-1]+i;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int n=nums.size();\\n        sort(nums.begin(),nums.end()); \\n        int sum=nums[n-1];\\n        for(int i=1;i<k;i++)\\n        {\\n            sum=sum+nums[n-1]+i;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4030852,
                "title": "easy-solution-using-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        int sum=0;\\n        for(int i=0;i<k;i++)\\n        {\\n            sum+=nums[nums.length-1];\\n            nums[nums.length-1]+=1;\\n        }\\n\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        int sum=0;\\n        for(int i=0;i<k;i++)\\n        {\\n            sum+=nums[nums.length-1];\\n            nums[nums.length-1]+=1;\\n        }\\n\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4028451,
                "title": "easy-c-solution-understandable",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        sort(nums.begin(),nums.end());\\n        int change=nums.back();\\n        int final=0;\\n        for(int i=1;i<=k;i++){\\n             final+=change;\\n             change+=1;\\n        }\\n        return final;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        sort(nums.begin(),nums.end());\\n        int change=nums.back();\\n        int final=0;\\n        for(int i=1;i<=k;i++){\\n             final+=change;\\n             change+=1;\\n        }\\n        return final;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4025628,
                "title": "simple-cpp-solution-that-beats-100-users",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int max = INT_MIN;\\n        for(int i:nums)\\n        {\\n            if(i>max)\\n                max = i;\\n        }\\n        int ans = 0;\\n        while(k--)\\n        {\\n            ans+=max;\\n            max++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int max = INT_MIN;\\n        for(int i:nums)\\n        {\\n            if(i>max)\\n                max = i;\\n        }\\n        int ans = 0;\\n        while(k--)\\n        {\\n            ans+=max;\\n            max++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4025142,
                "title": "faster-than-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity : O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity : O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max=nums[0];\\n        for(int i=1;i<nums.length;i++){\\n            max=Math.max(max,nums[i]);\\n        }\\n        int ans=max;\\n        int sum=ans;\\n        for(int i=1;i<k;i++){\\n            ans=ans+1;\\n            sum+=ans;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max=nums[0];\\n        for(int i=1;i<nums.length;i++){\\n            max=Math.max(max,nums[i]);\\n        }\\n        int ans=max;\\n        int sum=ans;\\n        for(int i=1;i<k;i++){\\n            ans=ans+1;\\n            sum+=ans;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4023657,
                "title": "easy-js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {number} k\\n * @return {number}\\n */\\nvar maximizeSum = function(nums, k) {\\n    let max = Math.max(...nums)\\n    let sum = 0;\\n    for(let i=0; i<k; i++) {\\n        sum+=max+i\\n    }\\n    return sum\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {number} k\\n * @return {number}\\n */\\nvar maximizeSum = function(nums, k) {\\n    let max = Math.max(...nums)\\n    let sum = 0;\\n    for(let i=0; i<k; i++) {\\n        sum+=max+i\\n    }\\n    return sum\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4022732,
                "title": "o-n-solution-c-proper-explaination",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFind the max number from the array and then multiply it k times for k times summing the number and we have to add the number in incremented manner then for that calculate sum od n number that is  k-1 number.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nfor Example : A = [1,2,3,4,5] and k = 3\\n  In this maxelement is 5  // So we have to add 5 , 6 , 7 to get 18.\\n  So, sum = 5*3 = 15 and sum of ( 1,2,3....k-1 ) i.e  Sum = Sum + (k-1)*(k-1+1)/2\\n\\nHere k=3 so Sum = 15 + (3-1)*(3-1+1)/2 = 15 + 3 = 18\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n) for calculating the max element from the vector\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\nint l = *max_element(nums.begin(),nums.end());\\n        int sum=0;\\n         sum = l*k + ((k-1)*(k)/2);\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\nint l = *max_element(nums.begin(),nums.end());\\n        int sum=0;\\n         sum = l*k + ((k-1)*(k)/2);\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4019037,
                "title": "easy-one-line-code-in-c-python3",
                "content": "# Approach\\nUsed the inbuilt function to find the maximum value in the array.\\nAnd used the sum of n natural number formual to get the required answers as the sequence is : \\n**max + max+1 + max+2 ... max+k-1** == **(k*(max+max-1+k))/2**\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- C++     : 18 ms\\n- Python3 : 150 ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- C++     : 70.8 MB\\n- Python3 : 16 MB\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int x = *max_element(nums.begin(),nums.end());\\n        return (k*(x+k-1 + x))/2;\\n    }\\n};\\n```\\n```python []\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        return ((max(nums) + max(nums)-1+k)*k)//2\\n```\\n\\n",
                "solutionTags": [
                    "C++",
                    "Python3"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int x = *max_element(nums.begin(),nums.end());\\n        return (k*(x+k-1 + x))/2;\\n    }\\n};\\n```\n```python []\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        return ((max(nums) + max(nums)-1+k)*k)//2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4017886,
                "title": "by-using-brute-force-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = nums[0];\\n        int n = nums.length;\\n        for(int i = 0; i < n; i++){\\n            if(max < nums[i]){\\n                max = nums[i];\\n            }\\n\\n        }\\n        int ans = max++;    \\n        for(int j = 0; j < k - 1; j++){\\n            ans += max++;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = nums[0];\\n        int n = nums.length;\\n        for(int i = 0; i < n; i++){\\n            if(max < nums[i]){\\n                max = nums[i];\\n            }\\n\\n        }\\n        int ans = max++;    \\n        for(int j = 0; j < k - 1; j++){\\n            ans += max++;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4011813,
                "title": "a-simple-python-test",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        tt=0\\n        for i in range(0,k):\\n            tt+=i\\n        res = max(nums)*k+tt\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        tt=0\\n        for i in range(0,k):\\n            tt+=i\\n        res = max(nums)*k+tt\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4010909,
                "title": "harshi-s-simple-sol",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& a, int k) {\\n        int max=*max_element(a.begin(), a.end());\\n        int i=0,an=0;\\n        while(k--){\\n            an=an+max+i;\\n            i++;\\n        }return an;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& a, int k) {\\n        int max=*max_element(a.begin(), a.end());\\n        int i=0,an=0;\\n        while(k--){\\n            an=an+max+i;\\n            i++;\\n        }return an;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4010898,
                "title": "100-time-complexity-java-solution-simple-approach",
                "content": "# Intuition\\nFind the maximum value was clear from the program. \\nReplacing it with a value 1 greater than max was derived on reading the problem\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Find the maximum element in the array. \\n- Consider that element for the maximum sum. \\n- Replace that element with (maximum + 1).\\n- The new maximum will be maximum + 1. Consider this value for sum. \\n- Repeat the process K times.\\n# Complexity\\n- Time complexity:\\n$$O(n)$$ where n is the number of elements\\n\\n- Space complexity:\\n Constant time complexity (2 variables used.)\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = 0; // Since constraints show the range is from 1\\n        int sum = 0;\\n        // Calculating the maximum number to be taken for sum.\\n        for(int i = 0; i< nums.length; i ++ ){\\n            max = Math.max(nums[i], max);\\n        }\\n        // Now when I replace the maximum number with m+1 the new maximum number will be m+1.\\n        // Consider m+1 for the next attempt.\\n        // do this K times.\\n        for(int i = 0; i<k; i++){\\n            sum += max; \\n            max++;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = 0; // Since constraints show the range is from 1\\n        int sum = 0;\\n        // Calculating the maximum number to be taken for sum.\\n        for(int i = 0; i< nums.length; i ++ ){\\n            max = Math.max(nums[i], max);\\n        }\\n        // Now when I replace the maximum number with m+1 the new maximum number will be m+1.\\n        // Consider m+1 for the next attempt.\\n        // do this K times.\\n        for(int i = 0; i<k; i++){\\n            sum += max; \\n            max++;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4009837,
                "title": "java-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = nums[0];\\n\\n        for(int i=1; i<nums.length; i++){\\n            max = Math.max(max, nums[i]);\\n        }\\n        int m = max;\\n        for(int i=1; i<k; i++){\\n            max +=(m+i);\\n        }\\n\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = nums[0];\\n\\n        for(int i=1; i<nums.length; i++){\\n            max = Math.max(max, nums[i]);\\n        }\\n        int m = max;\\n        for(int i=1; i<k; i++){\\n            max +=(m+i);\\n        }\\n\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4006047,
                "title": "2-line-c",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int n = *max_element(nums.begin(),nums.end());\\n        return (n+k-1)*(n+k)/2 - (n-1)*n/2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int n = *max_element(nums.begin(),nums.end());\\n        return (n+k-1)*(n+k)/2 - (n-1)*n/2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3996168,
                "title": "simple-and-easy-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        List = []\\n        nums.sort()\\n        counter = 0\\n        while(counter < k):\\n            max_element = nums[-1]\\n            nums[-1] = max_element + 1\\n            counter = counter + 1\\n            List.append(max_element)\\n        return sum(List)\\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        List = []\\n        nums.sort()\\n        counter = 0\\n        while(counter < k):\\n            max_element = nums[-1]\\n            nums[-1] = max_element + 1\\n            counter = counter + 1\\n            List.append(max_element)\\n        return sum(List)\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3994627,
                "title": "c-easy-solution-beginner-freindly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int n = nums.size();\\n        sort(nums.begin(),nums.end());\\n        int ans = 0;\\n        int large = nums[n-1];\\n        for(int i =0;i<k;i++)\\n        {\\n            ans += large;\\n            large++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        int n = nums.size();\\n        sort(nums.begin(),nums.end());\\n        int ans = 0;\\n        int large = nums[n-1];\\n        for(int i =0;i<k;i++)\\n        {\\n            ans += large;\\n            large++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3992369,
                "title": "o-n-time-complexity-2-lines",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe will be taking the max element in each iteration and adding a new element of value \"max+1\" which inturn will be selected in the next turn and so on.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        m = max(nums)\\n\\n        return m*k+k*(k-1)//2\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        m = max(nums)\\n\\n        return m*k+k*(k-1)//2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3991207,
                "title": "java-solution-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        // looks like AP with comman diffrence 1 :)\\n       int a = nums[nums.length-1];\\n       int last = a + (k-1);\\n       return (int) ((((double)a + last)/2) * k);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        Arrays.sort(nums);\\n        // looks like AP with comman diffrence 1 :)\\n       int a = nums[nums.length-1];\\n       int last = a + (k-1);\\n       return (int) ((((double)a + last)/2) * k);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3991157,
                "title": "python-very-easy-one-line-solution-beginner-friendly-with-explanation",
                "content": "# Approach\\nObviously, the first element from our sequence will be the maximum number in the list. It is also obvious that after we add the maximum number + 1 to the list, this number will become the maximum. Then, we can simply find the sum of numbers from the maximum to the maximum + k not inclusive, where each next element is 1 more than the previous one, that is, we can use a loop.\\n\\nUpvote my solution if you like it, thanks <3\\n# Code\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        return sum([i for i in range(max(nums), max(nums) + k, 1)])\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Greedy"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        return sum([i for i in range(max(nums), max(nums) + k, 1)])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3988654,
                "title": "simple-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFind the maximum of the array and just return the value you want using that max element\\n\\n# Complexity\\n- Time complexity:o(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:o(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max= Integer. MIN_VALUE;\\n        for(int i=0;i<nums.length;i++){\\n            if(max<nums[i]){\\n                max=nums[i];\\n            }\\n        }\\n        return max*k+ (k-1) * k/2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max= Integer. MIN_VALUE;\\n        for(int i=0;i<nums.length;i++){\\n            if(max<nums[i]){\\n                max=nums[i];\\n            }\\n        }\\n        return max*k+ (k-1) * k/2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3987704,
                "title": "very-simple-and-easy-approach-by-brute-force-apporach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n- ***Brute_Force Approach***\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) \\n    {\\n        Arrays.sort(nums);\\n       int sum = 0; \\n       int temp = 0 ; \\n       temp += nums[(nums.length-1)] ;\\n       for(int i = 0 ;i < k ; i++)\\n       {\\n        sum += (temp+i);\\n       }\\n       return sum ; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) \\n    {\\n        Arrays.sort(nums);\\n       int sum = 0; \\n       int temp = 0 ; \\n       temp += nums[(nums.length-1)] ;\\n       for(int i = 0 ;i < k ; i++)\\n       {\\n        sum += (temp+i);\\n       }\\n       return sum ; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3986657,
                "title": "going-into-the-math-explained-simply",
                "content": "# Breaking down the problem\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSince we are removing and replacing a value in the array each time to create a maximum score, notice that we will always take the maximum value in the array at each step. That is, after removing and replacing this value with itself plus one, it will remain the largest value in the array (leading to the largest score).\\n\\nTherefore, we can generalize the solution based on the maximum value $$(max)$$ in the array:\\n\\n$$ result = (max + 0) + (max + 1) + (max + 2) + ... (max + k), \\n                                                \\\\forall k > 2$$\\n\\n$$result = (k * max) + \\\\Sigma_{i=0}^{k-1}i,     \\\\forall k > 0$$\\n\\n$$result = (k * max) + (1/2)*((k-1)*k),         \\\\forall k > 0$$\\n\\n# Some divergent series properties for those interested\\nThe final step is based on a property of divergent series, which can be seen in more detail [in this wikipedia page on divergent sums here](https://en.wikipedia.org/wiki/1_%2B_2_%2B_3_%2B_4_%2B_%E2%8B%AF). Here is how I look at it:\\n\\n$$\\\\Sigma_{i=1}^{n} = 1 + 2 + 3 + ... (n - 3) + (n - 2) + (n - 1) + n$$\\n\\nRearranging the terms:\\n$$ = (1 + n - 1) + (2 + n - 2) + (3 + n - 3) + n + ...$$\\n$$ = n + n + n + n + ...$$\\n\\nNotice that every pair (except the final n term) cancels out. How many times? Well, $$n/2$$ times. So, our final equation is $$(n(n + 1))/2$$ and above, as $$n=k-1$$ we can substitute $$k-1$$ into the equation. Notice that the start at $$i=0$$ for our sum changes nothing since we are just adding 0.\\n\\n# Getting into code logistics\\n<!-- Describe your approach to solving the problem. -->\\nSo, we have calculated the equation to use for our result, so all we have to do is find the maximum element in the array and then plug in the numbers! To hit all of the specifications, we should also replace the value in the $$nums$$ array with $$max + k - 1$$ since we would be replacing it $$k-1$$ times.\\n\\nA good way of finding the maximum element in an array is using $$max_element$$ which returns an iterator to the largest element in the array, and is defined in the $$<algorithm>$$ header. Here is a link to the [documentation](https://en.cppreference.com/w/cpp/algorithm/max_element).\\n\\n\\n# Complexity\\n### Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$ since $$max\\\\_element$$ has a time complexity of $$O(n)$$ and all other operations are constant time.\\n\\n### Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$ Space does not increase with input size\\n\\n# Code\\n```\\n#include <algorithm>\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        std::vector<int>::iterator maxIter = std::max_element(nums.begin(), nums.end());\\n        int maximumValue = *maxIter;\\n        *maxIter = *maxIter + k - 1;\\n        return (maximumValue * k) + ((k-1)*k)/2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\n#include <algorithm>\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        std::vector<int>::iterator maxIter = std::max_element(nums.begin(), nums.end());\\n        int maximumValue = *maxIter;\\n        *maxIter = *maxIter + k - 1;\\n        return (maximumValue * k) + ((k-1)*k)/2;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3984882,
                "title": "sort-and-easy-solution-in-java",
                "content": "# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int sum=0;\\n        int len = nums.length;\\n        Arrays.sort(nums);\\n        for(int i=0;i<k;i++)\\n        {\\n            sum = sum + (nums[len-1]+i);\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int sum=0;\\n        int len = nums.length;\\n        Arrays.sort(nums);\\n        for(int i=0;i<k;i++)\\n        {\\n            sum = sum + (nums[len-1]+i);\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3983901,
                "title": "python-fastest-solution",
                "content": "# Approach\\nTo maximise the score, The value we are withdrawing should be maximum. If first removal, we are adding m+1 so this will be the maimum for next iteration\\n\\nfor k iterations:\\n\\nScore : m + (m+1) + (m+2)......(m+k-1)\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        maxi=max(nums)\\n        return k*(2*maxi+(k-1))//2\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximizeSum(self, nums: List[int], k: int) -> int:\\n        maxi=max(nums)\\n        return k*(2*maxi+(k-1))//2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3982073,
                "title": "easy-cpp-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nit can be optimized to O(N)\\n\\n# Complexity\\n- Time complexity:O(NlogN)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        sort(nums.begin(), nums.end());\\n        int ans = 0;\\n        int val = nums[nums.size() - 1];\\n        for(int i = 0; i < k; i++){\\n            ans += val;\\n            val++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        sort(nums.begin(), nums.end());\\n        int ans = 0;\\n        int val = nums[nums.size() - 1];\\n        for(int i = 0; i < k; i++){\\n            ans += val;\\n            val++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3978129,
                "title": "a-different-and-optimized-approach",
                "content": "# Intuition \\nFinding the maximum element and adding 1 to it repeatedly k times\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. Find the maximum element in the array.\\n2. since we have to return the maximum score and add it k times by adding 1 in every iteration we can use the formulae :\\n(k*max) + ((k*(k-1))/2)\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = 0;\\n        for(int i : nums){\\n             max = Math.max(max,i);\\n        }\\n        return (k*max) + ((k*(k-1))/2) ;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximizeSum(int[] nums, int k) {\\n        int max = 0;\\n        for(int i : nums){\\n             max = Math.max(max,i);\\n        }\\n        return (k*max) + ((k*(k-1))/2) ;\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1934674,
                "content": [
                    {
                        "username": "SoNiceCoder",
                        "content": "Don\\'t spend much time on this question(very beginner friendly) , try to optimise complexity. Simple problem\\nThis formula might be used :\\n`0+1+2+3.....n times = n(n-1)/2`\\nIntentionally zero is there ! \\uD83D\\uDE0E"
                    },
                    {
                        "username": "trpaslik",
                        "content": "Tip: $$ 1 + 2 + ... + n = \\\\frac{n (n-1)}{2} $$"
                    },
                    {
                        "username": "noblemanfreeman",
                        "content": "what a example"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know you could do better than $O(n+k)$ to solve this?\nIf you want a solution that explores several approaches from the easiest one to math solutions, have look [over there!](https://leetcode.com/problems/maximum-sum-with-exactly-k-elements/solutions/3467144/from-easiest-to-1-line-math-solution/?orderBy=most_votes)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        sort(nums.begin(),nums.end());\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 int sum = nums[nums.size()-1]; //Select an element last from nums.\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 int prev = sum;  \\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 while(k >1){\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 sum += (prev+1);  //Add a new element with a value of last + 1 to the array.\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 prev = prev+1; //Increase your score by last element.\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 k--;\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 }\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 return\\xA0sum;\\n    }\\n};\\n\\n//please upvote.. and thank you"
                    },
                    {
                        "username": "resilient_nik9",
                        "content": "[@Vamsidhar Reddy M](/VamsidharReddyy) Please don\\'t post solutions in discuss, Instead post them in solutions."
                    }
                ]
            },
            {
                "id": 1879467,
                "content": [
                    {
                        "username": "SoNiceCoder",
                        "content": "Don\\'t spend much time on this question(very beginner friendly) , try to optimise complexity. Simple problem\\nThis formula might be used :\\n`0+1+2+3.....n times = n(n-1)/2`\\nIntentionally zero is there ! \\uD83D\\uDE0E"
                    },
                    {
                        "username": "trpaslik",
                        "content": "Tip: $$ 1 + 2 + ... + n = \\\\frac{n (n-1)}{2} $$"
                    },
                    {
                        "username": "noblemanfreeman",
                        "content": "what a example"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know you could do better than $O(n+k)$ to solve this?\nIf you want a solution that explores several approaches from the easiest one to math solutions, have look [over there!](https://leetcode.com/problems/maximum-sum-with-exactly-k-elements/solutions/3467144/from-easiest-to-1-line-math-solution/?orderBy=most_votes)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        sort(nums.begin(),nums.end());\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 int sum = nums[nums.size()-1]; //Select an element last from nums.\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 int prev = sum;  \\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 while(k >1){\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 sum += (prev+1);  //Add a new element with a value of last + 1 to the array.\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 prev = prev+1; //Increase your score by last element.\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 k--;\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 }\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 return\\xA0sum;\\n    }\\n};\\n\\n//please upvote.. and thank you"
                    },
                    {
                        "username": "resilient_nik9",
                        "content": "[@Vamsidhar Reddy M](/VamsidharReddyy) Please don\\'t post solutions in discuss, Instead post them in solutions."
                    }
                ]
            },
            {
                "id": 2074318,
                "content": [
                    {
                        "username": "SoNiceCoder",
                        "content": "Don\\'t spend much time on this question(very beginner friendly) , try to optimise complexity. Simple problem\\nThis formula might be used :\\n`0+1+2+3.....n times = n(n-1)/2`\\nIntentionally zero is there ! \\uD83D\\uDE0E"
                    },
                    {
                        "username": "trpaslik",
                        "content": "Tip: $$ 1 + 2 + ... + n = \\\\frac{n (n-1)}{2} $$"
                    },
                    {
                        "username": "noblemanfreeman",
                        "content": "what a example"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know you could do better than $O(n+k)$ to solve this?\nIf you want a solution that explores several approaches from the easiest one to math solutions, have look [over there!](https://leetcode.com/problems/maximum-sum-with-exactly-k-elements/solutions/3467144/from-easiest-to-1-line-math-solution/?orderBy=most_votes)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        sort(nums.begin(),nums.end());\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 int sum = nums[nums.size()-1]; //Select an element last from nums.\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 int prev = sum;  \\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 while(k >1){\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 sum += (prev+1);  //Add a new element with a value of last + 1 to the array.\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 prev = prev+1; //Increase your score by last element.\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 k--;\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 }\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 return\\xA0sum;\\n    }\\n};\\n\\n//please upvote.. and thank you"
                    },
                    {
                        "username": "resilient_nik9",
                        "content": "[@Vamsidhar Reddy M](/VamsidharReddyy) Please don\\'t post solutions in discuss, Instead post them in solutions."
                    }
                ]
            },
            {
                "id": 1877233,
                "content": [
                    {
                        "username": "SoNiceCoder",
                        "content": "Don\\'t spend much time on this question(very beginner friendly) , try to optimise complexity. Simple problem\\nThis formula might be used :\\n`0+1+2+3.....n times = n(n-1)/2`\\nIntentionally zero is there ! \\uD83D\\uDE0E"
                    },
                    {
                        "username": "trpaslik",
                        "content": "Tip: $$ 1 + 2 + ... + n = \\\\frac{n (n-1)}{2} $$"
                    },
                    {
                        "username": "noblemanfreeman",
                        "content": "what a example"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know you could do better than $O(n+k)$ to solve this?\nIf you want a solution that explores several approaches from the easiest one to math solutions, have look [over there!](https://leetcode.com/problems/maximum-sum-with-exactly-k-elements/solutions/3467144/from-easiest-to-1-line-math-solution/?orderBy=most_votes)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        sort(nums.begin(),nums.end());\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 int sum = nums[nums.size()-1]; //Select an element last from nums.\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 int prev = sum;  \\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 while(k >1){\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 sum += (prev+1);  //Add a new element with a value of last + 1 to the array.\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 prev = prev+1; //Increase your score by last element.\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 k--;\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 }\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 return\\xA0sum;\\n    }\\n};\\n\\n//please upvote.. and thank you"
                    },
                    {
                        "username": "resilient_nik9",
                        "content": "[@Vamsidhar Reddy M](/VamsidharReddyy) Please don\\'t post solutions in discuss, Instead post them in solutions."
                    }
                ]
            },
            {
                "id": 1877359,
                "content": [
                    {
                        "username": "SoNiceCoder",
                        "content": "Don\\'t spend much time on this question(very beginner friendly) , try to optimise complexity. Simple problem\\nThis formula might be used :\\n`0+1+2+3.....n times = n(n-1)/2`\\nIntentionally zero is there ! \\uD83D\\uDE0E"
                    },
                    {
                        "username": "trpaslik",
                        "content": "Tip: $$ 1 + 2 + ... + n = \\\\frac{n (n-1)}{2} $$"
                    },
                    {
                        "username": "noblemanfreeman",
                        "content": "what a example"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know you could do better than $O(n+k)$ to solve this?\nIf you want a solution that explores several approaches from the easiest one to math solutions, have look [over there!](https://leetcode.com/problems/maximum-sum-with-exactly-k-elements/solutions/3467144/from-easiest-to-1-line-math-solution/?orderBy=most_votes)"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int maximizeSum(vector<int>& nums, int k) {\\n        sort(nums.begin(),nums.end());\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 int sum = nums[nums.size()-1]; //Select an element last from nums.\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 int prev = sum;  \\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 while(k >1){\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 sum += (prev+1);  //Add a new element with a value of last + 1 to the array.\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 prev = prev+1; //Increase your score by last element.\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 k--;\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 }\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 return\\xA0sum;\\n    }\\n};\\n\\n//please upvote.. and thank you"
                    },
                    {
                        "username": "resilient_nik9",
                        "content": "[@Vamsidhar Reddy M](/VamsidharReddyy) Please don\\'t post solutions in discuss, Instead post them in solutions."
                    }
                ]
            }
        ]
    }
]