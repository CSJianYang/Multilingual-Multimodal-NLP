[
    {
        "title": "Check if Numbers Are Ascending in a Sentence",
        "question_content": "A sentence is a list of tokens separated by a single space with no leading or trailing spaces. Every token is either a positive number consisting of digits 0-9 with no leading zeros, or a word consisting of lowercase English letters.\n\n\tFor example, \"a puppy has 2 eyes 4 legs\" is a sentence with seven tokens: \"2\" and \"4\" are numbers and the other tokens such as \"puppy\" are words.\n\nGiven a string s representing a sentence, you need to check if all the numbers in s are strictly increasing from left to right (i.e., other than the last number, each number is strictly smaller than the number on its right in s).\nReturn true if so, or false otherwise.\n&nbsp;\nExample 1:\n\nInput: s = \"1 box has 3 blue 4 red 6 green and 12 yellow marbles\"\nOutput: true\nExplanation: The numbers in s are: 1, 3, 4, 6, 12.\nThey are strictly increasing from left to right: 1 < 3 < 4 < 6 < 12.\n\nExample 2:\n\nInput: s = \"hello world 5 x 5\"\nOutput: false\nExplanation: The numbers in s are: 5, 5. They are not strictly increasing.\n\nExample 3:\n\nInput: s = \"sunset is at 7 51 pm overnight lows will be in the low 50 and 60 s\"\nOutput: false\nExplanation: The numbers in s are: 7, 51, 50, 60. They are not strictly increasing.\n\n&nbsp;\nConstraints:\n\n\t3 <= s.length <= 200\n\ts consists of lowercase English letters, spaces, and digits from 0 to 9, inclusive.\n\tThe number of tokens in s is between 2 and 100, inclusive.\n\tThe tokens in s are separated by a single space.\n\tThere are at least two numbers in s.\n\tEach number in s is a positive number less than 100, with no leading zeros.\n\ts contains no leading or trailing spaces.",
        "solutions": [
            {
                "id": 1525381,
                "title": "track-previous-and-current",
                "content": "**C++**\\n```cpp\\nbool areNumbersAscending(string s) {\\n    int prev = 0, cur = 0;\\n    for (auto ch : s) {\\n        if (isdigit(ch))\\n            cur = cur * 10 + (ch - \\'0\\');\\n        else if (cur != 0) {\\n            if (prev >= cur)\\n                return false;\\n            prev = cur;\\n            cur = 0;\\n        }\\n    }\\n    return cur == 0 || prev < cur;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nbool areNumbersAscending(string s) {\\n    int prev = 0, cur = 0;\\n    for (auto ch : s) {\\n        if (isdigit(ch))\\n            cur = cur * 10 + (ch - \\'0\\');\\n        else if (cur != 0) {\\n            if (prev >= cur)\\n                return false;\\n            prev = cur;\\n            cur = 0;\\n        }\\n    }\\n    return cur == 0 || prev < cur;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1525219,
                "title": "python3-2-line",
                "content": "\\n```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        nums = [int(w) for w in s.split() if w.isdigit()]\\n        return all(nums[i-1] < nums[i] for i in range(1, len(nums)))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        nums = [int(w) for w in s.split() if w.isdigit()]\\n        return all(nums[i-1] < nums[i] for i in range(1, len(nums)))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1644902,
                "title": "using-string-stream-easy-c-100",
                "content": "# Using String Stream  EASY C++ 100% \\n```\\nbool areNumbersAscending(string s) {\\n        istringstream ss(s);\\n        int l=0;\\n        string word;\\n        while(ss>>word){\\n            if(isdigit(word[0])){\\n                if(stoi(word)<=l)return false;\\n                l=stoi(word);\\n            }\\n        }\\n        return true;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool areNumbersAscending(string s) {\\n        istringstream ss(s);\\n        int l=0;\\n        string word;\\n        while(ss>>word){\\n            if(isdigit(word[0])){\\n                if(stoi(word)<=l)return false;\\n                l=stoi(word);\\n            }\\n        }\\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1525199,
                "title": "java-solution-using-parseint-o-1-space-o-n-time",
                "content": "```\\n// Space Complexity: O(1)\\n// Time Complexity: O(n)\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        int prev = 0;\\n        \\n        for(String token: s.split(\" \")) {\\n            try {\\n                int number = Integer.parseInt(token);\\n                if(number <= prev)\\n                    return false;\\n                prev = number;\\n            }\\n            catch(Exception e) {}\\n        }\\n        \\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n// Space Complexity: O(1)\\n// Time Complexity: O(n)\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        int prev = 0;\\n        \\n        for(String token: s.split(\" \")) {\\n            try {\\n                int number = Integer.parseInt(token);\\n                if(number <= prev)\\n                    return false;\\n                prev = number;\\n            }\\n            catch(Exception e) {}\\n        }\\n        \\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1538412,
                "title": "python-simple-solution",
                "content": "**Python :**\\n\\n```\\ndef areNumbersAscending(self, s: str) -> bool:\\n\\tprev = -1\\n\\n\\tfor w in s.split():\\n\\t\\tif w.isdigit():\\n\\t\\t\\tif int(w) <= prev:\\n\\t\\t\\t\\treturn False\\n\\t\\t\\tprev = int(w)\\n\\n\\treturn True\\n```\\n\\n**Like it ? please upvote !**",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef areNumbersAscending(self, s: str) -> bool:\\n\\tprev = -1\\n\\n\\tfor w in s.split():\\n\\t\\tif w.isdigit():\\n\\t\\t\\tif int(w) <= prev:\\n\\t\\t\\t\\treturn False\\n\\t\\t\\tprev = int(w)\\n\\n\\treturn True\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1525228,
                "title": "c-easiest-solution-o-n-time-o-1-space-simple",
                "content": "# ***Approach***\\n```\\nIdea : \\n        prev : hold previously encountered number , initially points to -1 , becasue all numbers in string will be >= 0[given in constraints]\\n        loop through s\\n        {\\n            if(ch is digit)\\n                include ch to num;\\n            else if(ch is \\' \\' and previous char is a digit) // means end of a number is found\\n                {\\n                    if(num <= prev) // number breaks strictly increasing pattern\\n                        return false;\\n                    update prev ==> prev = num;\\n                    reset num   ==> num = \"\";\\n                }\\n        }\\n        return true;\\n        \\n        O(N) time & O(1) space\\n        \\n```\\n# ***Code***\\n```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        s.push_back(\\' \\'); // for last number calculation\\n        int prev = -1;\\n        string num;\\n        \\n        for(int i = 0 ; i < s.size() ; ++i)\\n        {\\n            char ch = s[i];\\n            if(isdigit(ch))\\n                num += ch;\\n            else if(ch == \\' \\' and isdigit(s[i - 1]))\\n            {\\n                if(stoi(num) <= prev) // number is not strictly increasing\\n                    return false;\\n                prev = stoi(num);\\n                num = \"\";\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```\\n# ***If you liked the solution , Give it an Upvote :)***\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nIdea : \\n        prev : hold previously encountered number , initially points to -1 , becasue all numbers in string will be >= 0[given in constraints]\\n        loop through s\\n        {\\n            if(ch is digit)\\n                include ch to num;\\n            else if(ch is \\' \\' and previous char is a digit) // means end of a number is found\\n                {\\n                    if(num <= prev) // number breaks strictly increasing pattern\\n                        return false;\\n                    update prev ==> prev = num;\\n                    reset num   ==> num = \"\";\\n                }\\n        }\\n        return true;\\n        \\n        O(N) time & O(1) space\\n        \\n```\n```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        s.push_back(\\' \\'); // for last number calculation\\n        int prev = -1;\\n        string num;\\n        \\n        for(int i = 0 ; i < s.size() ; ++i)\\n        {\\n            char ch = s[i];\\n            if(isdigit(ch))\\n                num += ch;\\n            else if(ch == \\' \\' and isdigit(s[i - 1]))\\n            {\\n                if(stoi(num) <= prev) // number is not strictly increasing\\n                    return false;\\n                prev = stoi(num);\\n                num = \"\";\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525280,
                "title": "easy-c-with-comments",
                "content": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        int n = s.size();\\n        vector<int> nums; //to store all the numbers\\n        int i;\\n        for(i = 0;i<n;i++){\\n            if(isdigit(s[i])){\\n                string temp; //to store the numbers having more than 1 digit, like 12, 334....\\n\\t\\t\\t\\t\\n                while(i<n && isdigit(s[i]))temp+=s[i++];\\n\\t\\t\\t\\t\\n                nums.push_back(stoi(temp)); //convert string to integer and store in the vector\\n            }            \\n        }\\n        for(i=0;i<nums.size()-1;i++){\\n            if(nums[i]>=nums[i+1])return false; //check whether the array is sorted or not\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        int n = s.size();\\n        vector<int> nums; //to store all the numbers\\n        int i;\\n        for(i = 0;i<n;i++){\\n            if(isdigit(s[i])){\\n                string temp; //to store the numbers having more than 1 digit, like 12, 334....\\n\\t\\t\\t\\t\\n                while(i<n && isdigit(s[i]))temp+=s[i++];\\n\\t\\t\\t\\t\\n                nums.push_back(stoi(temp)); //convert string to integer and store in the vector\\n            }            \\n        }\\n        for(i=0;i<nums.size()-1;i++){\\n            if(nums[i]>=nums[i+1])return false; //check whether the array is sorted or not\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1526760,
                "title": "easy-java-solution",
                "content": "class Solution {\\n\\n    public boolean areNumbersAscending(String s) {\\n        int previous = 0;\\n        \\n        for(String str: s.split(\" \"))\\n        {\\n            if(Character.isDigit(str.charAt(0)))\\n            {\\n                int number = Integer.parseInt(str);\\n                \\n                if(number <=previous)\\n                    return false;\\n                \\n                previous = number;\\n            }\\n        }\\n        return true;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\n    public boolean areNumbersAscending(String s) {\\n        int previous = 0;\\n        \\n        for(String str: s.split(\" \"))\\n        {\\n            if(Character.isDigit(str.charAt(0)))\\n            {\\n                int number = Integer.parseInt(str);\\n                \\n                if(number <=previous)\\n                    return false;\\n                \\n                previous = number;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1567507,
                "title": "python-easy-code-beats-100-with-explanation",
                "content": "```\\ndef areNumbersAscending(self, s: str) -> bool:\\n        l=s.split() #break the string into list\\n        n = 0 #to store the previous number\\n        for i in l:\\n            if i.isdigit():\\n                if int(i) <= n: #if at any point the previous number is greater, return False\\n                    return False\\n                n = int(i) #update the previous number\\n        return True\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef areNumbersAscending(self, s: str) -> bool:\\n        l=s.split() #break the string into list\\n        n = 0 #to store the previous number\\n        for i in l:\\n            if i.isdigit():\\n                if int(i) <= n: #if at any point the previous number is greater, return False\\n                    return False\\n                n = int(i) #update the previous number\\n        return True\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1525232,
                "title": "easy-to-understand-solution-in-one-pass",
                "content": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        int prev=0;\\n        string t;\\n        for(int i=0;i<s.length();i++){\\n            while(isdigit(s[i])){\\n                t+=s[i];\\n                i++;\\n            }\\n                if(t.length()!=0){\\n                    if(stoi(t)>prev){\\n                        prev=stoi(t);\\n                    }\\n                    else{\\n                        return false;\\n                    }\\n                    t=\"\";\\n                }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        int prev=0;\\n        string t;\\n        for(int i=0;i<s.length();i++){\\n            while(isdigit(s[i])){\\n                t+=s[i];\\n                i++;\\n            }\\n                if(t.length()!=0){\\n                    if(stoi(t)>prev){\\n                        prev=stoi(t);\\n                    }\\n                    else{\\n                        return false;\\n                    }\\n                    t=\"\";\\n                }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525203,
                "title": "c-brute-force",
                "content": "See my latest update in repo [LeetCode](https://github.com/lzl124631x/LeetCode)\\n\\n## Solution 1. Brute Force\\n\\n```cpp\\n// OJ: https://leetcode.com/contest/weekly-contest-263/problems/check-if-numbers-are-ascending-in-a-sentence/\\n// Author: github.com/lzl124631x\\n// Time: O(N)\\n// Space: O(N)\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        string word;\\n        istringstream ss(s);\\n        int prev = -1;\\n        while (ss >> word) { \\n            if (isdigit(word[0])) {\\n                int n = stoi(word);\\n                if (n <= prev) return false;\\n                prev = n;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\n// OJ: https://leetcode.com/contest/weekly-contest-263/problems/check-if-numbers-are-ascending-in-a-sentence/\\n// Author: github.com/lzl124631x\\n// Time: O(N)\\n// Space: O(N)\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        string word;\\n        istringstream ss(s);\\n        int prev = -1;\\n        while (ss >> word) { \\n            if (isdigit(word[0])) {\\n                int n = stoi(word);\\n                if (n <= prev) return false;\\n                prev = n;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1909989,
                "title": "faster-than-100-00-of-c-online-submissions-using-stringstream",
                "content": "```\\n    bool areNumbersAscending(string s) {\\n        vector<int> v;\\n        stringstream ss(s);\\n        string word;\\n        while(ss>>word){\\n            if(isdigit(word[0]))\\n                v.push_back(stoi(word));\\n        }\\n        \\n        for(int i = 1 ; i<v.size() ; i++){\\n            \\n            if(v[i-1]>=v[i])\\n                return false;\\n        }\\n        return true;  \\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    bool areNumbersAscending(string s) {\\n        vector<int> v;\\n        stringstream ss(s);\\n        string word;\\n        while(ss>>word){\\n            if(isdigit(word[0]))\\n                v.push_back(stoi(word));\\n        }\\n        \\n        for(int i = 1 ; i<v.size() ; i++){\\n            \\n            if(v[i-1]>=v[i])\\n                return false;\\n        }\\n        return true;  \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1534181,
                "title": "easy-c-solution",
                "content": "```\\nclass Solution \\n{\\npublic:\\n    bool areNumbersAscending(string s) \\n    {\\n        int i=0,prev=-1;\\n        while(i<s.length())\\n        {\\n            int tmp=0;\\n            bool found=false;\\n            while(i<s.length() && s[i]>=\\'0\\' && s[i]<=\\'9\\')\\n            {\\n                found=true;\\n                tmp=tmp*10+(s[i++]-\\'0\\');\\n            }\\n            if(found)\\n            {\\n                if(prev>=tmp)\\n                {\\n                    return false;\\n                }\\n                prev=tmp;\\n            }\\n            i++;\\n        }\\n        return true;\\n    }\\n};\\n```\\n***Please upvote if you\\'ve got any help from my code. Thank you.***",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    bool areNumbersAscending(string s) \\n    {\\n        int i=0,prev=-1;\\n        while(i<s.length())\\n        {\\n            int tmp=0;\\n            bool found=false;\\n            while(i<s.length() && s[i]>=\\'0\\' && s[i]<=\\'9\\')\\n            {\\n                found=true;\\n                tmp=tmp*10+(s[i++]-\\'0\\');\\n            }\\n            if(found)\\n            {\\n                if(prev>=tmp)\\n                {\\n                    return false;\\n                }\\n                prev=tmp;\\n            }\\n            i++;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1529080,
                "title": "clean-java-solution",
                "content": "```\\npublic boolean areNumbersAscending(String s) {\\n        int prevNum = 0;\\n        String[] strs = s.split(\" \");\\n        for(String str : strs) {\\n            try {\\n                int num = Integer.parseInt(str);\\n                if(num > prevNum) {\\n                    prevNum = num;\\n                } else {\\n                    return false;\\n                }\\n            } catch(NumberFormatException ex) { }\\n        }\\n        return true;\\n    }\\n\\t",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic boolean areNumbersAscending(String s) {\\n        int prevNum = 0;\\n        String[] strs = s.split(\" \");\\n        for(String str : strs) {\\n            try {\\n                int num = Integer.parseInt(str);\\n                if(num > prevNum) {\\n                    prevNum = num;\\n                } else {\\n                    return false;\\n                }\\n            } catch(NumberFormatException ex) { }\\n        }\\n        return true;\\n    }\\n\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 1525901,
                "title": "python3-easy-solution-regex",
                "content": "Looking for numbers, comparing the result with the sorted one and checking for duplicates:\\n```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        nums = re.findall(\\'\\\\d+\\', s)\\n        nums = [int(num) for num in nums]\\n        \\n        return nums == sorted(set(nums))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        nums = re.findall(\\'\\\\d+\\', s)\\n        nums = [int(num) for num in nums]\\n        \\n        return nums == sorted(set(nums))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525691,
                "title": "python-3-simple-regex-solution-2-lines",
                "content": "```\\nclass Solution:\\n    def areNumbersAscending(self, s):\\n        nums = re.findall(r\\'\\\\d+\\', s)\\n        return nums == sorted(set(nums), key=int)\\n```\\n\\nOne-liner (Credit to @stefan4trivia):\\n```\\nreturn (nums := re.findall(r\\'\\\\d+\\', s)) == sorted(set(nums), key=int)\\n```\\n\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s):\\n        nums = re.findall(r\\'\\\\d+\\', s)\\n        return nums == sorted(set(nums), key=int)\\n```\n```\\nreturn (nums := re.findall(r\\'\\\\d+\\', s)) == sorted(set(nums), key=int)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525180,
                "title": "2042-check-if-numbers-are-ascending-in-a-sentence",
                "content": "---\\n\\nWeekly Contest 263\\n\\n- Q1 answer\\n  - ( below answer )\\n- Q2 answer\\n  - https://leetcode.com/problems/simple-bank-system/discuss/1525218/2043.-Simple-Bank-System\\n- Q3 answer\\n  - https://leetcode.com/problems/count-number-of-maximum-bitwise-or-subsets/discuss/1525237/2044.-Count-Number-of-Maximum-Bitwise-OR-Subsets\\n\\n---\\n\\nHope it is simple to understand.\\n\\n---\\n\\n```\\nvar areNumbersAscending = function (s) {\\n    let nums = s\\n        .split(\\' \\')\\n        .map((x) => +x)                         //     try to convert number, else it will be NaN\\n        .filter((x) => x);                      //     remove NaN, now only numbers remain\\n\\n    for (let i = 1; i < nums.length; i++)\\n        if (nums[i - 1] >= nums[i]) {\\n            return false;                       //     non ascending - fail\\n        }\\n\\n    return true; // good\\n};\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar areNumbersAscending = function (s) {\\n    let nums = s\\n        .split(\\' \\')\\n        .map((x) => +x)                         //     try to convert number, else it will be NaN\\n        .filter((x) => x);                      //     remove NaN, now only numbers remain\\n\\n    for (let i = 1; i < nums.length; i++)\\n        if (nums[i - 1] >= nums[i]) {\\n            return false;                       //     non ascending - fail\\n        }\\n\\n    return true; // good\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1767044,
                "title": "c-solution-using-string-stream",
                "content": "```\\nbool areNumbersAscending(string s) {\\n        \\n        stringstream str(s); vector<int>v;\\n        string word;\\n        while(str >> word)\\n        {\\n            if(word[0]>=\\'0\\' and word[0]<=\\'9\\')\\n            {\\n                int t=stoi(word);\\n                v.push_back(t);\\n            }\\n        }\\n        for(int i=0; i<v.size()-1; i++)\\n        {\\n            if(v[i]>=v[i+1])\\n                return false;\\n        }\\n        \\n        return true;\\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool areNumbersAscending(string s) {\\n        \\n        stringstream str(s); vector<int>v;\\n        string word;\\n        while(str >> word)\\n        {\\n            if(word[0]>=\\'0\\' and word[0]<=\\'9\\')\\n            {\\n                int t=stoi(word);\\n                v.push_back(t);\\n            }\\n        }\\n        for(int i=0; i<v.size()-1; i++)\\n        {\\n            if(v[i]>=v[i+1])\\n                return false;\\n        }\\n        \\n        return true;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1700597,
                "title": "c-100-faster-o-n-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) \\n    {\\n        int prev=-1,digit,ind=0,result=0;\\n        while(ind < s.length())\\n        {\\n            if(isdigit(s[ind]) && (ind+1) < s.length() && s[ind+1] == \\' \\')\\n            {\\n                digit = s[ind] - \\'0\\';\\n                result = result*10 + digit;\\n                if(result <= prev) return false;\\n                else \\n                {\\n                    prev = result;\\n                    result =0;\\n                }\\n            }\\n            else if(isdigit(s[ind]) && (ind+1) < s.length() && s[ind+1] != \\' \\')\\n            {\\n                digit = s[ind]-\\'0\\';\\n                result = result*10 + digit;\\n            }\\n            else if(isdigit(s[ind]) && (ind+1) == s.length())\\n            {\\n                digit = s[ind]-\\'0\\';\\n                result = result*10 + digit;\\n                if(result <= prev) return false;\\n            }\\n            ind++;\\n        }\\n        return true;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    bool areNumbersAscending(string s) \\n    {\\n        int prev=-1,digit,ind=0,result=0;\\n        while(ind < s.length())\\n        {\\n            if(isdigit(s[ind]) && (ind+1) < s.length() && s[ind+1] == \\' \\')\\n            {\\n                digit = s[ind] - \\'0\\';\\n                result = result*10 + digit;\\n                if(result <= prev) return false;\\n                else \\n                {\\n                    prev = result;\\n                    result =0;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1536520,
                "title": "0ms-c-sol-o-n-time-o-1-space-complexity",
                "content": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        int prev = -1;\\n        int curr = -1;\\n        string temp = \"\";\\n        s += \" \";\\n        \\n        for(int i=0; i<s.size(); i++){\\n            if(isdigit(s[i])) {\\n                temp = temp + s[i];\\n            } else if(temp.size()) {\\n                curr = stoi(temp);\\n                if(prev >= curr) return false;\\n                prev = curr;\\n                temp = \"\";\\n            }\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        int prev = -1;\\n        int curr = -1;\\n        string temp = \"\";\\n        s += \" \";\\n        \\n        for(int i=0; i<s.size(); i++){\\n            if(isdigit(s[i])) {\\n                temp = temp + s[i];\\n            } else if(temp.size()) {\\n                curr = stoi(temp);\\n                if(prev >= curr) return false;\\n                prev = curr;\\n                temp = \"\";\\n            }\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1526169,
                "title": "c-solution-beginner-friendly",
                "content": "Loop through the `string s` and whenever we encounter a **digit**, we will see how many more consecutive digits are there. We will simultaneously keep updtaing the number as we keep encountering those **consecutive digits**. Once the final number is obtained, we compare it with the previous number, if it is not strictly greater than the previous, we return false.\\n\\n```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        vector<int> vec;\\n        for(int i=0; i<s.length(); i++){\\n            if(isdigit(s[i])){\\n                int n = s[i]-\\'0\\';\\n                i++;\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// Keep finding the next consecutive digits and keep updating n\\n                while(i<s.length() && isdigit(s[i])){\\n                    n = n*10 + (s[i]-\\'0\\');\\n                    i++;\\n                }\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// When we obtain the final n, compare it with the previous number.\\n                vec.push_back(n);\\n                if(vec.size()>1 && vec[vec.size()-2]>=vec[vec.size()-1])\\n                    return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        vector<int> vec;\\n        for(int i=0; i<s.length(); i++){\\n            if(isdigit(s[i])){\\n                int n = s[i]-\\'0\\';\\n                i++;\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// Keep finding the next consecutive digits and keep updating n\\n                while(i<s.length() && isdigit(s[i])){\\n                    n = n*10 + (s[i]-\\'0\\');\\n                    i++;\\n                }\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// When we obtain the final n, compare it with the previous number.\\n                vec.push_back(n);\\n                if(vec.size()>1 && vec[vec.size()-2]>=vec[vec.size()-1])\\n                    return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1526123,
                "title": "c-simple-and-clean-solution-0-ms-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        stringstream ss(s);\\n        string token;\\n        int prev = -1, curr;\\n        \\n        while (ss >> token) {\\n            if (!isdigit(token[0])) continue;\\n            \\n            curr = stoi(token);\\n            if (curr <= prev) return false;\\n            prev = curr;\\n        }\\n        \\n        return true;\\n    }\\n};\\n```\\n**Like it? please upvote!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        stringstream ss(s);\\n        string token;\\n        int prev = -1, curr;\\n        \\n        while (ss >> token) {\\n            if (!isdigit(token[0])) continue;\\n            \\n            curr = stoi(token);\\n            if (curr <= prev) return false;\\n            prev = curr;\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525378,
                "title": "c-solution-easy-to-understand-stringstream",
                "content": "```\\n    bool areNumbersAscending(string s) {\\n    std::vector<int> numbers;\\n   stringstream ss;    \\n    ss << s;\\n    string temp;\\n    int found;\\n    while (!ss.eof()) {\\n        ss >> temp;\\n        if (stringstream(temp) >> found)\\n           numbers.push_back(found);\\n        temp = \"\";\\n    }\\n        for(int i=0;i<numbers.size()-1;i++)\\n        {\\n            if(numbers[i]<numbers[i+1])\\n                continue;\\n            else\\n                return false;\\n        }\\n        return true;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    bool areNumbersAscending(string s) {\\n    std::vector<int> numbers;\\n   stringstream ss;    \\n    ss << s;\\n    string temp;\\n    int found;\\n    while (!ss.eof()) {\\n        ss >> temp;\\n        if (stringstream(temp) >> found)\\n           numbers.push_back(found);\\n        temp = \"\";\\n    }\\n        for(int i=0;i<numbers.size()-1;i++)\\n        {\\n            if(numbers[i]<numbers[i+1])\\n                continue;\\n            else\\n                return false;\\n        }\\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3908919,
                "title": "well-commented-c-code-with-istringstream",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        istringstream iss(s); // Creating an input string stream object and initializing it with the input string\\n        int prev = -1e9;\\n\\n        string word; // String to store individual words from the input string\\n        int number; // Integer to store the converted numbers\\n\\n        while (iss >> word) { // Looping through the input string, extracting one word at a time\\n            if (stringstream(word) >> number) { // Trying to convert the extracted word into an integer\\n                if(number > prev){ // If conversion is successful, compare\\n                    prev = number;\\n                }else return false;\\n            }\\n        }\\n        return 1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        istringstream iss(s); // Creating an input string stream object and initializing it with the input string\\n        int prev = -1e9;\\n\\n        string word; // String to store individual words from the input string\\n        int number; // Integer to store the converted numbers\\n\\n        while (iss >> word) { // Looping through the input string, extracting one word at a time\\n            if (stringstream(word) >> number) { // Trying to convert the extracted word into an integer\\n                if(number > prev){ // If conversion is successful, compare\\n                    prev = number;\\n                }else return false;\\n            }\\n        }\\n        return 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3593908,
                "title": "c-solution-o-n",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(N)\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) \\n    {\\n        int i=-1;\\n        for(int j=0;j<s.length();j++)\\n        {\\n            if((s[j]<65 && s[j]>47) && (s[j+1]<65 && s[j+1]>47) && j!=s.length()-1)\\n            {\\n                int x = int(s[j]-\\'0\\')*10 + int(s[j+1]-\\'0\\');\\n                cout<<x<<endl;\\n                if(x>i)\\n                {\\n                    i=x;\\n                }\\n                else\\n                {\\n                    return 0;\\n                }\\n                j++;\\n            }\\n            else if(s[j]<65 && s[j]>47)\\n            {\\n                int x = int(s[j]-\\'0\\');\\n                cout<<x<<endl;\\n                if(x>i)\\n                {\\n                    i=x;\\n                }\\n                else\\n                {\\n                    return 0;\\n                }\\n            }\\n            else \\n            {\\n                continue;\\n            }\\n        }    \\n        return 1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) \\n    {\\n        int i=-1;\\n        for(int j=0;j<s.length();j++)\\n        {\\n            if((s[j]<65 && s[j]>47) && (s[j+1]<65 && s[j+1]>47) && j!=s.length()-1)\\n            {\\n                int x = int(s[j]-\\'0\\')*10 + int(s[j+1]-\\'0\\');\\n                cout<<x<<endl;\\n                if(x>i)\\n                {\\n                    i=x;\\n                }\\n                else\\n                {\\n                    return 0;\\n                }\\n                j++;\\n            }\\n            else if(s[j]<65 && s[j]>47)\\n            {\\n                int x = int(s[j]-\\'0\\');\\n                cout<<x<<endl;\\n                if(x>i)\\n                {\\n                    i=x;\\n                }\\n                else\\n                {\\n                    return 0;\\n                }\\n            }\\n            else \\n            {\\n                continue;\\n            }\\n        }    \\n        return 1;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3567771,
                "title": "simple-solution-c-93-efficient",
                "content": "# Intuition & Approach\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSimple and straight forward solution where we ***loop over the list of tokens, check if it can be parsed into string and check if the current number is less that the previous encountered number.***\\n<br>\\n\\n![Screenshot 2023-05-27 162600.png](https://assets.leetcode.com/users/images/e5e0cd24-705f-4c8d-abea-afb4000234ff_1685184986.1286335.png)\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N) - as we loop over the string once\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1) - as we use constant memory space\\n\\n## Please upvote if you like the approach\\n\\n# Code\\n```\\npublic class Solution {\\n    public bool AreNumbersAscending(string s) {\\n        string[] list = s.Split(\\' \\');\\n        int prevNum = -1;\\n        for (int i = 0; i < list.Length; i++)\\n        {\\n            int num = 0;\\n            if (int.TryParse(list[i], out num))\\n            {\\n                if (num <= prevNum)\\n                    return false;\\n\\n                prevNum = num;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```\\n\\n## Please upvote if you like the approach\\n![Upvote please - Do this.jpg](https://assets.leetcode.com/users/images/32929297-5506-41ad-aded-2303645dd5e6_1685185092.105774.jpeg)\\n",
                "solutionTags": [
                    "C#",
                    "String"
                ],
                "code": "```\\npublic class Solution {\\n    public bool AreNumbersAscending(string s) {\\n        string[] list = s.Split(\\' \\');\\n        int prevNum = -1;\\n        for (int i = 0; i < list.Length; i++)\\n        {\\n            int num = 0;\\n            if (int.TryParse(list[i], out num))\\n            {\\n                if (num <= prevNum)\\n                    return false;\\n\\n                prevNum = num;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3356047,
                "title": "c-short-and-easy-0ms-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        stringstream words(s);\\n        string word;\\n        int k = INT_MIN;\\n        while(words >> word)\\n            if(isdigit(word[0]))   \\n                if(stoi(word) - \\'0\\' > k) k = stoi(word) - \\'0\\';\\n                else return false;\\n        return true;\\n    }\\n};\\n```\\n\\nUpvote if you find this helpful :)",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        stringstream words(s);\\n        string word;\\n        int k = INT_MIN;\\n        while(words >> word)\\n            if(isdigit(word[0]))   \\n                if(stoi(word) - \\'0\\' > k) k = stoi(word) - \\'0\\';\\n                else return false;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3313644,
                "title": "one-line-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        return [int(i) for i in s.split() if i.isnumeric()] == sorted(set(int(i) for i in s.split() if i.isnumeric()))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        return [int(i) for i in s.split() if i.isnumeric()] == sorted(set(int(i) for i in s.split() if i.isnumeric()))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3277305,
                "title": "beat-94-70-23-ms-python-3",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        b = 0\\n        for i in s.split():\\n            if i.isdigit():\\n                if int(i) <= b: return False\\n                else: b = int(i)\\n        return True\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        b = 0\\n        for i in s.split():\\n            if i.isdigit():\\n                if int(i) <= b: return False\\n                else: b = int(i)\\n        return True\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3172282,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n         int n = s.size();\\n        vector<int> nums; \\n        int i;\\n        for(i = 0;i<n;i++){\\n            if(isdigit(s[i])){\\n                string temp; \\n\\t\\t\\t\\t\\n                while(i<n && isdigit(s[i]))temp+=s[i++];\\n\\t\\t\\t\\t\\n                nums.push_back(stoi(temp)); \\n            }            \\n        }\\n        for(i=0;i<nums.size()-1;i++){\\n            if(nums[i]>=nums[i+1])return false; \\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n         int n = s.size();\\n        vector<int> nums; \\n        int i;\\n        for(i = 0;i<n;i++){\\n            if(isdigit(s[i])){\\n                string temp; \\n\\t\\t\\t\\t\\n                while(i<n && isdigit(s[i]))temp+=s[i++];\\n\\t\\t\\t\\t\\n                nums.push_back(stoi(temp)); \\n            }            \\n        }\\n        for(i=0;i<nums.size()-1;i++){\\n            if(nums[i]>=nums[i+1])return false; \\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3062161,
                "title": "python3-beats-93-33-simple-solution-o-n-logn",
                "content": "# **Please do upvote if you like the solution.**\\n# Code\\n```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        l=[]\\n        for i in s.split():\\n            if i.isnumeric():\\n                l.append(int(i))\\n        return l == sorted(set(l))\\n```",
                "solutionTags": [
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        l=[]\\n        for i in s.split():\\n            if i.isnumeric():\\n                l.append(int(i))\\n        return l == sorted(set(l))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2969192,
                "title": "very-simple-python-solution-o-n",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        l = s.split(\\' \\') # split string into list of words\\n        max = 0 # keep track of current maximum\\n        for i in l:\\n            if i.isdigit(): # check if i is a number\\n                if int(i) <= max: # check if the number < max\\n                    return False # Return False if true\\n                max = int(i)\\n        return True # Return True\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        l = s.split(\\' \\') # split string into list of words\\n        max = 0 # keep track of current maximum\\n        for i in l:\\n            if i.isdigit(): # check if i is a number\\n                if int(i) <= max: # check if the number < max\\n                    return False # Return False if true\\n                max = int(i)\\n        return True # Return True\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2523263,
                "title": "simple-java-solution",
                "content": "```\\n\\nclass Solution {\\n    public boolean areNumbersAscending(String s) \\n    {\\n        int prev =0;\\n        String[] sent = s.split(\" \");\\n        \\n        for(String i: sent)\\n        {\\n            if(Character.isDigit(i.charAt(0)) )\\n            {\\n                int num = Integer.parseInt(i);\\n                if(num <= prev)\\n                    return false;\\n                else\\n                    prev = num;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\n\\nclass Solution {\\n    public boolean areNumbersAscending(String s) \\n    {\\n        int prev =0;\\n        String[] sent = s.split(\" \");\\n        \\n        for(String i: sent)\\n        {\\n            if(Character.isDigit(i.charAt(0)) )\\n            {\\n                int num = Integer.parseInt(i);\\n                if(num <= prev)\\n                    return false;\\n                else\\n                    prev = num;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2514051,
                "title": "fast-java-easy-solution",
                "content": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        String arr[] = s.split(\" \");\\n        int last=0;\\n        for(String str: arr){\\n            try{\\n                int x = Integer.parseInt(str);\\n                if(x<=last){\\n                    return false;\\n                } else {\\n                    last = x;\\n                }\\n            } catch(Exception e){}\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        String arr[] = s.split(\" \");\\n        int last=0;\\n        for(String str: arr){\\n            try{\\n                int x = Integer.parseInt(str);\\n                if(x<=last){\\n                    return false;\\n                } else {\\n                    last = x;\\n                }\\n            } catch(Exception e){}\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2311068,
                "title": "beats-100-other-solutions",
                "content": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        tokens = list(s.split(\" \"))\\n        min = 0\\n        for token in tokens:\\n            if(token.isnumeric()):\\n                num = int(token)\\n                if(num > min):\\n                    min = num\\n                else:\\n                    return False\\n        \\n        return True\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        tokens = list(s.split(\" \"))\\n        min = 0\\n        for token in tokens:\\n            if(token.isnumeric()):\\n                num = int(token)\\n                if(num > min):\\n                    min = num\\n                else:\\n                    return False\\n        \\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2253130,
                "title": "c-simple-code-beats-100-lesser-than-5ms-using-string-stream",
                "content": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        vector<int>res;\\n        int num=0;\\n        string word;\\n        stringstream ss(s);\\n        while(ss>>word){\\n            num=word[0]-\\'0\\';\\n            if(num>=0 && num<=9){\\n                res.push_back(stoi(word));\\n            }\\n        }\\n        for (int i = 0; i < res.size()-1; i++) {\\n\\t\\tif (res[i] >= res[i + 1])\\treturn false;\\n\\t\\t}\\n        return true;\\n    }\\n};\\n```\\n\\nIf you find this solution useful, kindly **upvote** it. Happy Coding!!!",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        vector<int>res;\\n        int num=0;\\n        string word;\\n        stringstream ss(s);\\n        while(ss>>word){\\n            num=word[0]-\\'0\\';\\n            if(num>=0 && num<=9){\\n                res.push_back(stoi(word));\\n            }\\n        }\\n        for (int i = 0; i < res.size()-1; i++) {\\n\\t\\tif (res[i] >= res[i + 1])\\treturn false;\\n\\t\\t}\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2137718,
                "title": "different-and-easy-c-solution",
                "content": "```\\nbool areNumbersAscending(string s) {\\n        int i=0;\\n        int sum = 0;\\n        while(i<s.size())\\n        {\\n            string s1=\"\";\\n            while(s[i]!=\\' \\' && isdigit(s[i]))\\n            {\\n                s1 = s1 + s[i];\\n                i++;\\n            }\\n            i++;\\n            if(s1!=\"\")\\n            {\\n                int k = stoi(s1);\\n                if(k<=sum)\\n                    return false;\\n                else\\n                    sum = k;\\n            }\\n        }\\n        return true;\\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool areNumbersAscending(string s) {\\n        int i=0;\\n        int sum = 0;\\n        while(i<s.size())\\n        {\\n            string s1=\"\";\\n            while(s[i]!=\\' \\' && isdigit(s[i]))\\n            {\\n                s1 = s1 + s[i];\\n                i++;\\n            }\\n            i++;\\n            if(s1!=\"\")\\n            {\\n                int k = stoi(s1);\\n                if(k<=sum)\\n                    return false;\\n                else\\n                    sum = k;\\n            }\\n        }\\n        return true;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1718978,
                "title": "c-easy-solution",
                "content": "```\\n\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n\\t\\t\\t\\tvector<int> ch;\\n\\t\\t\\t\\tbool val = true;\\n\\t\\t\\t    for(int i=0;i<s.length();i++){\\n                     if(s[i]>=48 && s[i]<=57)\\n                        {\\n                            if(s[i+1]>=48 && s[i+1]<=57)\\n                                 {\\n                                     string x =\"\";\\n                                     x+= s[i];\\n                                    x+=s[i+1];\\n                                    int y= stoi(x);\\n                                    ch.push_back(y);\\n                                    i+=2;\\n                                }\\n                    else{\\n                        string x=\"\";\\n                        x = s[i];\\n                        int y = stoi(x);\\n                        ch.push_back(y);\\n                            }\\n                        }\\n        }\\n        \\n        for(int i=0;i<ch.size()-1;i++)\\n        {\\n            if(ch[i]>=ch[i+1])\\n            {\\n                val = false;\\n            }\\n        }\\n       return val;\\n\\n    \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n\\t\\t\\t\\tvector<int> ch;\\n\\t\\t\\t\\tbool val = true;\\n\\t\\t\\t    for(int i=0;i<s.length();i++){\\n                     if(s[i]>=48 && s[i]<=57)\\n                        {\\n                            if(s[i+1]>=48 && s[i+1]<=57)\\n                                 {\\n                                     string x =\"\";\\n                                     x+= s[i];\\n                                    x+=s[i+1];\\n                                    int y= stoi(x);\\n                                    ch.push_back(y);\\n                                    i+=2;\\n                                }\\n                    else{\\n                        string x=\"\";\\n                        x = s[i];\\n                        int y = stoi(x);\\n                        ch.push_back(y);\\n                            }\\n                        }\\n        }\\n        \\n        for(int i=0;i<ch.size()-1;i++)\\n        {\\n            if(ch[i]>=ch[i+1])\\n            {\\n                val = false;\\n            }\\n        }\\n       return val;\\n\\n    \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1665088,
                "title": "simple-python3-solution-faster-than-83",
                "content": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        last = -1\\n        \\n        for i in s.split(\" \"):\\n            if i.isdigit():\\n                num = int(i)\\n                if num <= last:\\n                    return False\\n                last = num\\n        \\n        return True\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        last = -1\\n        \\n        for i in s.split(\" \"):\\n            if i.isdigit():\\n                num = int(i)\\n                if num <= last:\\n                    return False\\n                last = num\\n        \\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1643641,
                "title": "python-bruteforce-solution",
                "content": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        temp = s.split()\\n        result = []\\n        \\n        for item in temp:\\n            if item.isnumeric():\\n                result.append(item)\\n                \\n        i, j = 0, 1\\n        n = len(result)\\n        print(result)\\n        \\n        while i < n and j < n:\\n            if int(result[i]) >= int(result[j]):\\n                return False\\n            i += 1\\n            j += 1\\n        \\n        return True\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        temp = s.split()\\n        result = []\\n        \\n        for item in temp:\\n            if item.isnumeric():\\n                result.append(item)\\n                \\n        i, j = 0, 1\\n        n = len(result)\\n        print(result)\\n        \\n        while i < n and j < n:\\n            if int(result[i]) >= int(result[j]):\\n                return False\\n            i += 1\\n            j += 1\\n        \\n        return True\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1557151,
                "title": "c",
                "content": "```\\npublic bool AreNumbersAscending(string s)\\n{\\n\\tvar numbers = s\\n\\t\\t.Split(\" \")\\n\\t\\t.Where(x => \"0123456789\".Contains(x[0]))\\n\\t\\t.Select(int.Parse)\\n\\t\\t.ToArray();\\n\\n\\tfor (var i = 1; i < numbers.Length; i++)\\n\\t\\tif (numbers[i - 1] >= numbers[i])\\n\\t\\t\\treturn false;\\n\\n\\treturn true;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic bool AreNumbersAscending(string s)\\n{\\n\\tvar numbers = s\\n\\t\\t.Split(\" \")\\n\\t\\t.Where(x => \"0123456789\".Contains(x[0]))\\n\\t\\t.Select(int.Parse)\\n\\t\\t.ToArray();\\n\\n\\tfor (var i = 1; i < numbers.Length; i++)\\n\\t\\tif (numbers[i - 1] >= numbers[i])\\n\\t\\t\\treturn false;\\n\\n\\treturn true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1526154,
                "title": "python-optimal-one-pass-solution",
                "content": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        prev = 0\\n        for token in s.split():\\n            if token.isnumeric():                \\n                if (curr := int(token)) <= prev:\\n                    return False\\n                prev = curr\\n        return True\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        prev = 0\\n        for token in s.split():\\n            if token.isnumeric():                \\n                if (curr := int(token)) <= prev:\\n                    return False\\n                prev = curr\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1526111,
                "title": "go-clean-and-optimized-alternatives",
                "content": "## Clean, idiomatic\\n\\n```go\\nfunc areNumbersAscending(s string) bool {\\n\\tparts := strings.Split(s, \" \")\\n\\tprev := -1\\n\\tfor _, part := range parts {\\n\\t\\tif n, err := strconv.Atoi(part); err == nil {\\n\\t\\t\\tif n <= prev {\\n\\t\\t\\t\\treturn false\\n\\t\\t\\t}\\n\\t\\t\\tprev = n\\n\\t\\t}\\n\\t}\\n\\treturn true\\n}\\n```\\n\\n## Optimized\\n\\n```go\\nfunc areNumbersAscending(s string) bool {\\n\\tprev := -1\\n\\tvar cur int\\n\\tfor _, ch := range s {\\n\\t\\tif ch >= \\'0\\' && ch <= \\'9\\' {\\n\\t\\t\\tcur *= 10\\n\\t\\t\\tcur += int(ch - \\'0\\')\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tif cur != 0 {\\n\\t\\t\\tif cur <= prev {\\n\\t\\t\\t\\treturn false\\n\\t\\t\\t}\\n\\t\\t\\tprev = cur\\n\\t\\t\\tcur = 0\\n\\t\\t}\\n\\t}\\n\\treturn cur == 0 || prev < cur\\n}\\n```\\n",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc areNumbersAscending(s string) bool {\\n\\tparts := strings.Split(s, \" \")\\n\\tprev := -1\\n\\tfor _, part := range parts {\\n\\t\\tif n, err := strconv.Atoi(part); err == nil {\\n\\t\\t\\tif n <= prev {\\n\\t\\t\\t\\treturn false\\n\\t\\t\\t}\\n\\t\\t\\tprev = n\\n\\t\\t}\\n\\t}\\n\\treturn true\\n}\\n```\n```go\\nfunc areNumbersAscending(s string) bool {\\n\\tprev := -1\\n\\tvar cur int\\n\\tfor _, ch := range s {\\n\\t\\tif ch >= \\'0\\' && ch <= \\'9\\' {\\n\\t\\t\\tcur *= 10\\n\\t\\t\\tcur += int(ch - \\'0\\')\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tif cur != 0 {\\n\\t\\t\\tif cur <= prev {\\n\\t\\t\\t\\treturn false\\n\\t\\t\\t}\\n\\t\\t\\tprev = cur\\n\\t\\t\\tcur = 0\\n\\t\\t}\\n\\t}\\n\\treturn cur == 0 || prev < cur\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1525715,
                "title": "c-solution-very-easy-to-understand",
                "content": "**Please upvote if this helps**\\n```class Solution {\\npublic:\\n    bool areNumbersAscending(string s){\\n        int prev = -1;\\n        int i = 0;\\n        \\n        while(i < s.length()){\\n            if(isdigit(s[i]) && isdigit(s[i+1])){\\n                    int curr = 10 * s[i] + s[i+1];\\n                    if(curr <= prev){\\n                        return false;\\n                    }\\n                    else if(curr > prev){\\n                        prev = curr;\\n                        i = i + 2;\\n                    }\\n                }\\n            else if(isdigit(s[i])){\\n                if(s[i] <= prev){\\n                    return false;\\n                }\\n                if(s[i] > prev){\\n                    prev = s[i++];\\n                }\\n            }\\n            \\n            else{\\n                i++;\\n            }\\n        }\\n        \\n        return true;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    bool areNumbersAscending(string s){\\n        int prev = -1;\\n        int i = 0;\\n        \\n        while(i < s.length()){\\n            if(isdigit(s[i]) && isdigit(s[i+1])){\\n                    int curr = 10 * s[i] + s[i+1];\\n                    if(curr <= prev){\\n                        return false;\\n                    }",
                "codeTag": "Java"
            },
            {
                "id": 1525675,
                "title": "1-pass-rust-solution-with-fold",
                "content": "```rust\\nimpl Solution {\\n    pub fn are_numbers_ascending(s: String) -> bool {\\n        s.split_whitespace()\\n            .fold((true, -1), |(b, pre), c| match c.parse::<i32>() {\\n                Ok(n) => ((b & (n > pre)), n),\\n                _ => (b, pre),\\n            })\\n            .0\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```rust\\nimpl Solution {\\n    pub fn are_numbers_ascending(s: String) -> bool {\\n        s.split_whitespace()\\n            .fold((true, -1), |(b, pre), c| match c.parse::<i32>() {\\n                Ok(n) => ((b & (n > pre)), n),\\n                _ => (b, pre),\\n            })\\n            .0\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1525398,
                "title": "swift",
                "content": "```\\nclass Solution {\\n    func areNumbersAscending(_ s: String) -> Bool {\\n        var words = s.split(separator: \" \").filter({Int($0) != nil })\\n        \\n        \\n        var prev = Int(words.first!)!\\n        for i in 1...words.count - 1 {\\n              \\n            if Int(words[i])! <= prev {\\n                return false\\n            }\\n            prev = Int(words[i])!\\n        }\\n        return true\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func areNumbersAscending(_ s: String) -> Bool {\\n        var words = s.split(separator: \" \").filter({Int($0) != nil })\\n        \\n        \\n        var prev = Int(words.first!)!\\n        for i in 1...words.count - 1 {\\n              \\n            if Int(words[i])! <= prev {\\n                return false\\n            }\\n            prev = Int(words[i])!\\n        }\\n        return true\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525328,
                "title": "java-regex",
                "content": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        int prev = Integer.MIN_VALUE;\\n        String[] strs = s.split(\" \");\\n        for(String str: strs) {\\n            if(str.matches(\"\\\\\\\\d+\")) {\\n                int cur = Integer.parseInt(str);\\n                if(cur > prev) prev = cur;\\n                else return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        int prev = Integer.MIN_VALUE;\\n        String[] strs = s.split(\" \");\\n        for(String str: strs) {\\n            if(str.matches(\"\\\\\\\\d+\")) {\\n                int cur = Integer.parseInt(str);\\n                if(cur > prev) prev = cur;\\n                else return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525182,
                "title": "c-easy",
                "content": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        int x=-1,size=s.size();\\n        for(int i=0;i<size;){\\n            string temp=\"\";\\n            while(i<size && isdigit(s[i]))\\n                temp.push_back(s[i++]);\\n            while(i<size && isalpha(s[i]))\\n                i++;\\n                i++;\\n            if(temp.size()!=0){\\n                if(stoi(temp)>x)\\n                    x=stoi(temp);\\n                else\\n                    return false;\\n            }\\n        }\\n        return true; \\n    }\\n};\\n```\\nDo **UPVOTE** if it helps:)",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        int x=-1,size=s.size();\\n        for(int i=0;i<size;){\\n            string temp=\"\";\\n            while(i<size && isdigit(s[i]))\\n                temp.push_back(s[i++]);\\n            while(i<size && isalpha(s[i]))\\n                i++;\\n                i++;\\n            if(temp.size()!=0){\\n                if(stoi(temp)>x)\\n                    x=stoi(temp);\\n                else\\n                    return false;\\n            }\\n        }\\n        return true; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4049067,
                "title": "check-if-numbers-are-ascending-in-a-sentence-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSimple Traversal of Array\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        int prev_num=-1, num=0, flag=0;\\n        for(int i=0 ; i<s.length() ; i++)\\n        {\\n            if(s[i]>=48 && s[i]<=57)\\n            {\\n                num = num*10 + (s[i]-48);\\n                flag=1;\\n            }\\n            else if(flag==1 && prev_num < num)\\n            {\\n                prev_num = num;\\n                num = 0;\\n                flag=0;\\n            }\\n            else if(flag==1 && prev_num>=num)\\n                return false;\\n        }\\n        if(flag==1 && prev_num>=num)\\n            return false;\\n        return true;\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/f827f555-9169-4b50-b4e4-8217017ad1d1_1694805102.1130133.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        int prev_num=-1, num=0, flag=0;\\n        for(int i=0 ; i<s.length() ; i++)\\n        {\\n            if(s[i]>=48 && s[i]<=57)\\n            {\\n                num = num*10 + (s[i]-48);\\n                flag=1;\\n            }\\n            else if(flag==1 && prev_num < num)\\n            {\\n                prev_num = num;\\n                num = 0;\\n                flag=0;\\n            }\\n            else if(flag==1 && prev_num>=num)\\n                return false;\\n        }\\n        if(flag==1 && prev_num>=num)\\n            return false;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3878179,
                "title": "easy-java-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        String[] a = s.split(\" \");\\n        int m= Integer.MIN_VALUE;\\n        for(int i=0;i<a.length;i++){\\n            try{\\n                int k=Integer.parseInt(a[i]);\\n                if(m<k){\\n                    m=k;\\n                }  \\n                else{\\n                    return false;\\n                }\\n            }\\n            catch(Exception c){\\n                continue;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        String[] a = s.split(\" \");\\n        int m= Integer.MIN_VALUE;\\n        for(int i=0;i<a.length;i++){\\n            try{\\n                int k=Integer.parseInt(a[i]);\\n                if(m<k){\\n                    m=k;\\n                }  \\n                else{\\n                    return false;\\n                }\\n            }\\n            catch(Exception c){\\n                continue;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3625629,
                "title": "simple-python",
                "content": "\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        s=s.split(\" \")\\n        l=[]\\n        for i in s:\\n            if i.isdigit():\\n                l.append(int(i))\\n        print(l)\\n        l1=sorted(l)\\n        if(l==l1):\\n            s1=set(l1)\\n            if(len(s1)==len(l1)):\\n                return True\\n            else:\\n                return False\\n        else:\\n            return False\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        s=s.split(\" \")\\n        l=[]\\n        for i in s:\\n            if i.isdigit():\\n                l.append(int(i))\\n        print(l)\\n        l1=sorted(l)\\n        if(l==l1):\\n            s1=set(l1)\\n            if(len(s1)==len(l1)):\\n                return True\\n            else:\\n                return False\\n        else:\\n            return False\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3600310,
                "title": "c-100-killer-solution-c-0ms-easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\n\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) \\n    {\\n        int n = s.size();\\n        vector<int> nums; \\n        int i;\\n        for(i = 0;i<n;i++)\\n        {\\n            if(isdigit(s[i]))\\n            {\\n                string temp; \\n                while(i<n && isdigit(s[i]))\\n                {\\n                    temp+=s[i];\\n                    i++;\\n                }\\n\\n                nums.push_back(stoi(temp)); \\n            }            \\n        }\\n        for(i=0;i<nums.size()-1;i++)\\n        {\\n            if(nums[i]>=nums[i+1])\\n            return false; \\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n\\n\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) \\n    {\\n        int n = s.size();\\n        vector<int> nums; \\n        int i;\\n        for(i = 0;i<n;i++)\\n        {\\n            if(isdigit(s[i]))\\n            {\\n                string temp; \\n                while(i<n && isdigit(s[i]))\\n                {\\n                    temp+=s[i];\\n                    i++;\\n                }\\n\\n                nums.push_back(stoi(temp)); \\n            }            \\n        }\\n        for(i=0;i<nums.size()-1;i++)\\n        {\\n            if(nums[i]>=nums[i+1])\\n            return false; \\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3589135,
                "title": "easy-simple-approach-with-comments",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        vector<string>v;          // store  number as a string\\n        for(int i=0; i<s.size(); i++) {\\n            if(s[i]>=\\'1\\' && s[i]<=\\'9\\') {\\n                int j=i;\\n                while(s[j]!=\\' \\' && j+1<s.size()) j++;   //move jth pointer upto ones place of ith number\\n               string temp=s.substr(i,j-i+1);\\n                v.push_back(temp);\\n                i=j;\\n            }\\n        }\\n      for(int i=0; i<v.size()-1; i++) {\\n          if(stoi(v[i])>=stoi(v[i+1])) return false;\\n      }\\n        return true;\\n        }\\n      \\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        vector<string>v;          // store  number as a string\\n        for(int i=0; i<s.size(); i++) {\\n            if(s[i]>=\\'1\\' && s[i]<=\\'9\\') {\\n                int j=i;\\n                while(s[j]!=\\' \\' && j+1<s.size()) j++;   //move jth pointer upto ones place of ith number\\n               string temp=s.substr(i,j-i+1);\\n                v.push_back(temp);\\n                i=j;\\n            }\\n        }\\n      for(int i=0; i<v.size()-1; i++) {\\n          if(stoi(v[i])>=stoi(v[i+1])) return false;\\n      }\\n        return true;\\n        }\\n      \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3563700,
                "title": "beginners-friendly-solution",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n        go through the code \\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(M) M= no. of Integers\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        List<Integer> ls= new ArrayList<>();\\n\\n        // get the every Integer to the list ls\\n        String[] t=s.split(\" \");\\n        for(String word: t){\\n\\n            try{\\n                int num= Integer.parseInt(word);\\n                ls.add(num);\\n            }\\n            catch(NumberFormatException e){\\n\\n            }\\n\\n        }\\n\\n        for(int i=0;i<ls.size()-1;i++){\\n            if(ls.get(i)>=ls.get(i+1)) return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        List<Integer> ls= new ArrayList<>();\\n\\n        // get the every Integer to the list ls\\n        String[] t=s.split(\" \");\\n        for(String word: t){\\n\\n            try{\\n                int num= Integer.parseInt(word);\\n                ls.add(num);\\n            }\\n            catch(NumberFormatException e){\\n\\n            }\\n\\n        }\\n\\n        for(int i=0;i<ls.size()-1;i++){\\n            if(ls.get(i)>=ls.get(i+1)) return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3485290,
                "title": "java-easy-solution-in-one-loop-0-ms",
                "content": "# Approach\\nIn this code we want to check that the integers present are in ascending order. As soon as we have ONE integer less than its previous value, the answer is false.\\n\\nTo verify this, we will have to go through each character of the string, and get only the numbers.\\n\\nSince the string contains only letters, spaces and numbers, we will not have any decimal or negative numbers.\\n\\nTo get a number > 10, we will have to check that the character before it was also a number. Then by multiplying by 10 and adding, we will find our number.\\n\\nAs soon as we are on a character that is not a number and if the previous character was one. Then it means that we have a number to compare. If it is not STRICTLY GREATER then we return false, otherwise it will become our new reference value for the rest.\\n\\nWe have to check at the very end if our last character of the string is a number or not. If it is, we will compare it to our pivot value.\\n\\n# Complexity \\n\\nTime complexity : O(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        int min = 0;\\n        boolean lastNb = false;\\n        int tmp=0;\\n        for(char c : s.toCharArray()){\\n            if(c >= \\'0\\' && c<=\\'9\\'){\\n                lastNb=true;\\n                tmp = tmp*10+(c-\\'0\\');\\n            }else if(lastNb){\\n                if(min>=tmp){\\n                    return false;\\n                }\\n                lastNb=false;\\n                min=tmp;\\n                tmp=0;\\n            }\\n        }\\n        if(lastNb)\\n            return tmp>min;\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        int min = 0;\\n        boolean lastNb = false;\\n        int tmp=0;\\n        for(char c : s.toCharArray()){\\n            if(c >= \\'0\\' && c<=\\'9\\'){\\n                lastNb=true;\\n                tmp = tmp*10+(c-\\'0\\');\\n            }else if(lastNb){\\n                if(min>=tmp){\\n                    return false;\\n                }\\n                lastNb=false;\\n                min=tmp;\\n                tmp=0;\\n            }\\n        }\\n        if(lastNb)\\n            return tmp>min;\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366097,
                "title": "cpp-soln-easy-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        \\n    vector<int> nums;\\n    for (int i = 0; i < s.size(); i++)\\n    {\\n        int curr_index=i;\\n        if (s[curr_index] >= \\'0\\' && s[curr_index] <= \\'9\\')\\n        {\\n            int temp = s[curr_index] - \\'0\\';\\n            if (s[curr_index + 1] >= \\'0\\' && s[curr_index + 1] <= \\'9\\')\\n            {\\n                temp = temp * 10 + (s[curr_index + 1] - \\'0\\');\\n                i++;\\n                if (s[curr_index + 2] >= \\'0\\' && s[curr_index + 2] <= \\'9\\')\\n                {\\n                    temp = temp * 10 + (s[curr_index + 2] - \\'0\\');\\n                    i++;\\n                }\\n            }\\n            nums.push_back(temp);\\n        }\\n    }\\n    for (int i = 1; i < nums.size() ; i++)\\n        if(nums[i]<=nums[i-1])\\n            return false;\\n    return true;\\n\\n\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        \\n    vector<int> nums;\\n    for (int i = 0; i < s.size(); i++)\\n    {\\n        int curr_index=i;\\n        if (s[curr_index] >= \\'0\\' && s[curr_index] <= \\'9\\')\\n        {\\n            int temp = s[curr_index] - \\'0\\';\\n            if (s[curr_index + 1] >= \\'0\\' && s[curr_index + 1] <= \\'9\\')\\n            {\\n                temp = temp * 10 + (s[curr_index + 1] - \\'0\\');\\n                i++;\\n                if (s[curr_index + 2] >= \\'0\\' && s[curr_index + 2] <= \\'9\\')\\n                {\\n                    temp = temp * 10 + (s[curr_index + 2] - \\'0\\');\\n                    i++;\\n                }\\n            }\\n            nums.push_back(temp);\\n        }\\n    }\\n    for (int i = 1; i < nums.size() ; i++)\\n        if(nums[i]<=nums[i-1])\\n            return false;\\n    return true;\\n\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3354850,
                "title": "unique-one",
                "content": "# Code\\n```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        String num = s.replaceAll(\"([a-z])\",\" \").replaceAll(\"( )+\",\" \").trim(); \\n        String[]str = num.split(\" \");\\n        ArrayList<Integer>list = new ArrayList<>();\\n        for(int i=0;i<str.length;i++)\\n        {\\n            list.add(Integer.parseInt(str[i]));\\n        }\\n        for(int i=0;i<list.size()-1;i++)\\n        {\\n            if(list.get(i)>=list.get(i+1))\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n```\\n# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe given code takes an input string containing a sequence of numbers separated by spaces and checks if the numbers are in ascending order. \\n\\n\\nThe intuition behind this code is that it is checking for a simple property of a sequence of numbers. The code parses the input string into a list of integers and then iterates through the list to check if each number is less than the next number. If any number is greater than or equal to the next number, the code returns false, indicating that the sequence is not in ascending order. Otherwise, the code returns true.\\n\\n\\nThe code does not perform any complex calculations or operations and simply checks the order of the numbers in the sequence. The intuition behind the code is that it is a straightforward way to check if a sequence of numbers is sorted in ascending order.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe method first uses the replaceAll method on s to replace all alphabetic characters with a space, then it replaces all consecutive spaces with a single space using a regular expression, and finally, it removes any leading or trailing spaces using the trim method. This code effectively removes all non-numeric characters from the input string and leaves only the numbers separated by spaces in the num string.\\n\\n\\nNext, the method splits the num string into an array of strings using the split method and a space as a delimiter. This creates an array of strings str that contains each number from the original string as a separate element.\\n\\n\\nThe method then creates an ArrayList called list to hold the integer values of the numbers. It loops through each element of the str array and parses each string to an integer using the parseInt method. The resulting integer is then added to the list.\\n\\n\\nFinally, the method loops through the list and checks if each number is strictly less than the next number in the list. If at any point a number is greater than or equal to the next number, the method returns false. If the loop completes without finding any out-of-order numbers, the method returns true.\\n\\n\\nOverall, this method checks if the numbers in the input string are in ascending order and returns true if they are and false otherwise.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n**The time complexity of the given code is** **O(n)** where n is the length of the input string. This is because the code processes each character of the input string exactly once, and the time required for each operation such as replaceAll, split, and parseInt is constant.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n**The space complexity of the code is** **O(n)** as well. This is because the num string and str array both require O(n) space to store the input string and the parsed numbers, respectively. The ArrayList list also requires O(n) space to store the n integers. The space required by the list can be reduced by using a regular array instead of an ArrayList, but this would not change the overall space complexity of the code.\\n",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String Matching"
                ],
                "code": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        String num = s.replaceAll(\"([a-z])\",\" \").replaceAll(\"( )+\",\" \").trim(); \\n        String[]str = num.split(\" \");\\n        ArrayList<Integer>list = new ArrayList<>();\\n        for(int i=0;i<str.length;i++)\\n        {\\n            list.add(Integer.parseInt(str[i]));\\n        }\\n        for(int i=0;i<list.size()-1;i++)\\n        {\\n            if(list.get(i)>=list.get(i+1))\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3241371,
                "title": "c-solution-beats-100-runtime-0ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        \\n    vector<int> nums;\\n    for (int i = 0; i < s.size(); i++)\\n    {\\n        int curr_index=i;\\n        if (s[curr_index] >= \\'0\\' && s[curr_index] <= \\'9\\')\\n        {\\n            int temp = s[curr_index] - \\'0\\';\\n            if (s[curr_index + 1] >= \\'0\\' && s[curr_index + 1] <= \\'9\\')\\n            {\\n                temp = temp * 10 + (s[curr_index + 1] - \\'0\\');\\n                i++;\\n                if (s[curr_index + 2] >= \\'0\\' && s[curr_index + 2] <= \\'9\\')\\n                {\\n                    temp = temp * 10 + (s[curr_index + 2] - \\'0\\');\\n                    i++;\\n                }\\n            }\\n            nums.push_back(temp);\\n        }\\n    }\\n    for (int i = 1; i < nums.size() ; i++)\\n        if(nums[i]<=nums[i-1])\\n            return false;\\n    return true;\\n\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        \\n    vector<int> nums;\\n    for (int i = 0; i < s.size(); i++)\\n    {\\n        int curr_index=i;\\n        if (s[curr_index] >= \\'0\\' && s[curr_index] <= \\'9\\')\\n        {\\n            int temp = s[curr_index] - \\'0\\';\\n            if (s[curr_index + 1] >= \\'0\\' && s[curr_index + 1] <= \\'9\\')\\n            {\\n                temp = temp * 10 + (s[curr_index + 1] - \\'0\\');\\n                i++;\\n                if (s[curr_index + 2] >= \\'0\\' && s[curr_index + 2] <= \\'9\\')\\n                {\\n                    temp = temp * 10 + (s[curr_index + 2] - \\'0\\');\\n                    i++;\\n                }\\n            }\\n            nums.push_back(temp);\\n        }\\n    }\\n    for (int i = 1; i < nums.size() ; i++)\\n        if(nums[i]<=nums[i-1])\\n            return false;\\n    return true;\\n\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3135197,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\no(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\no(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) \\n    {\\n        vector<int>v;\\n        string x=\"\";\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]>=\\'0\\' &&s[i]<=\\'9\\')\\n            {\\n                x+=s[i];\\n            }\\n            else if(x.size()>0)\\n            {\\n                v.push_back(stoi(x));\\n                x=\"\";\\n            }\\n        }\\n        if(x.size()>0)\\n            {\\n                v.push_back(stoi(x));\\n              \\n            }\\n        for(int i=0;i<v.size();i++)\\n        {\\n            cout<<v[i]<<\" \";\\n        }\\n        for(int i=1;i<v.size();i++)\\n        {\\n            if(v[i]<=v[i-1])return false;\\n        }\\n        return true;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) \\n    {\\n        vector<int>v;\\n        string x=\"\";\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]>=\\'0\\' &&s[i]<=\\'9\\')\\n            {\\n                x+=s[i];\\n            }\\n            else if(x.size()>0)\\n            {\\n                v.push_back(stoi(x));\\n                x=\"\";\\n            }\\n        }\\n        if(x.size()>0)\\n            {\\n                v.push_back(stoi(x));\\n              \\n            }\\n        for(int i=0;i<v.size();i++)\\n        {\\n            cout<<v[i]<<\" \";\\n        }\\n        for(int i=1;i<v.size();i++)\\n        {\\n            if(v[i]<=v[i-1])return false;\\n        }\\n        return true;\\n        \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2670447,
                "title": "python-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        st = \\'\\'\\n        res= []\\n        for i in range(len(s)):\\n            if s[i].isnumeric():\\n                st += s[i]\\n            else:\\n                if len(st)>0:\\n                    res.append(int(st))\\n                st =\\'\\'\\n        if len(st)>0:\\n            res.append(int(st))\\n        for i in range(0,len(res)-1):\\n            if res[i]>=res[i+1]:\\n                return False\\n        return True\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        st = \\'\\'\\n        res= []\\n        for i in range(len(s)):\\n            if s[i].isnumeric():\\n                st += s[i]\\n            else:\\n                if len(st)>0:\\n                    res.append(int(st))\\n                st =\\'\\'\\n        if len(st)>0:\\n            res.append(int(st))\\n        for i in range(0,len(res)-1):\\n            if res[i]>=res[i+1]:\\n                return False\\n        return True\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2632251,
                "title": "c-simple-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        int prev=-1;\\n        string str=\"\";\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]>=\\'0\\'&&s[i]<=\\'9\\')\\n            {\\n               str+=s[i];\\n                continue;\\n            }\\n            if(prev==-1&&str!=\"\")\\n            {\\n                int temp=stoi(str);\\n                prev=temp;\\n                str=\"\";\\n                continue;\\n            }\\n            if((prev!=-1&&str!=\"\"))\\n            {\\n                    int temp=stoi(str); \\n                    if(temp<=prev)\\n                        return false;\\n                    else\\n                        prev=temp;\\n                    str=\"\";\\n            }\\n            \\n        }   \\n        if(str!=\"\")\\n        {\\n            int temp=stoi(str);\\n            if(temp<=prev)\\n              return false;\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        int prev=-1;\\n        string str=\"\";\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]>=\\'0\\'&&s[i]<=\\'9\\')\\n            {\\n               str+=s[i];\\n                continue;\\n            }\\n            if(prev==-1&&str!=\"\")\\n            {\\n                int temp=stoi(str);\\n                prev=temp;\\n                str=\"\";\\n                continue;\\n            }\\n            if((prev!=-1&&str!=\"\"))\\n            {\\n                    int temp=stoi(str); \\n                    if(temp<=prev)\\n                        return false;\\n                    else\\n                        prev=temp;\\n                    str=\"\";\\n            }\\n            \\n        }   \\n        if(str!=\"\")\\n        {\\n            int temp=stoi(str);\\n            if(temp<=prev)\\n              return false;\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2615339,
                "title": "javascript-one-liner",
                "content": "```\\nconst areNumbersAscending = (s) =>\\n    s.match(/\\\\d+/g).every((_, index, arr) => (index < arr.length - 1 ? arr[index + 1] - arr[index] > 0 : true));",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst areNumbersAscending = (s) =>\\n    s.match(/\\\\d+/g).every((_, index, arr) => (index < arr.length - 1 ? arr[index + 1] - arr[index] > 0 : true));",
                "codeTag": "Unknown"
            },
            {
                "id": 2592932,
                "title": "c-easy-100-fast-simple-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        ios_base::sync_with_stdio(false);\\n        cin.tie(NULL);\\n        cout.tie(NULL);\\n        \\n        int num,prev=0;\\n        for(int i=0;i<s.length();i++){\\n            if(isdigit(s[i])){\\n                num=s[i]-48;\\n                if(isdigit(s[i+1])){\\n                    num+=num*10+(s[i+1]-48);\\n                    i++;\\n                }\\n                if(num<=prev) return false;\\n                prev=num;\\n            } }\\n            return true;\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        ios_base::sync_with_stdio(false);\\n        cin.tie(NULL);\\n        cout.tie(NULL);\\n        \\n        int num,prev=0;\\n        for(int i=0;i<s.length();i++){\\n            if(isdigit(s[i])){\\n                num=s[i]-48;\\n                if(isdigit(s[i+1])){\\n                    num+=num*10+(s[i+1]-48);\\n                    i++;\\n                }\\n                if(num<=prev) return false;\\n                prev=num;\\n            } }\\n            return true;\\n        \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2465901,
                "title": "python-solution",
                "content": "```\\n        num=float(\\'-inf\\')\\n        l=s.split(\\' \\')\\n        for i in l:\\n            if i.isnumeric():\\n                if int(i)>num:\\n                    num=int(i)\\n                else:\\n                    return 0\\n        return 1",
                "solutionTags": [],
                "code": "```\\n        num=float(\\'-inf\\')\\n        l=s.split(\\' \\')\\n        for i in l:\\n            if i.isnumeric():\\n                if int(i)>num:\\n                    num=int(i)\\n                else:\\n                    return 0\\n        return 1",
                "codeTag": "Unknown"
            },
            {
                "id": 2460778,
                "title": "check-if-numbers-are-ascending-in-a-sentence-easy-100-fast",
                "content": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        vector<int> v;\\n        for(int i=0;i<s.size();)\\n        {\\n            if(s[i]>=\\'0\\' && s[i]<=\\'9\\')              //if the element is a number\\n            {\\n                int n=0;\\n                while(s[i]>=\\'0\\' && s[i]<=\\'9\\')       //check if number is of multiple digits like-100,12 etc.\\n                {\\n                    n=n*10+(s[i]-\\'0\\');              //convert it into numerical value\\n                    i++;\\n                }\\n                v.push_back(n);                     //store it in a vector for comparision at last\\n            }\\n            else                                   //if it is a alphabet of character than ignore it\\n                i++;\\n        }\\n        bool flag=true;\\n        for(int i=0;i<v.size()-1;i++)              //iterate through vector\\n        {\\n            if(v[i]>=v[i+1])                       //compare if previous number is smaller than its preceeding number\\n            {\\n                flag=false;                       //if not then return false\\n                break;\\n            }\\n        }\\n   return flag; }\\n};\\n```\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        vector<int> v;\\n        for(int i=0;i<s.size();)\\n        {\\n            if(s[i]>=\\'0\\' && s[i]<=\\'9\\')              //if the element is a number\\n            {\\n                int n=0;\\n                while(s[i]>=\\'0\\' && s[i]<=\\'9\\')       //check if number is of multiple digits like-100,12 etc.\\n                {\\n                    n=n*10+(s[i]-\\'0\\');              //convert it into numerical value\\n                    i++;\\n                }\\n                v.push_back(n);                     //store it in a vector for comparision at last\\n            }\\n            else                                   //if it is a alphabet of character than ignore it\\n                i++;\\n        }\\n        bool flag=true;\\n        for(int i=0;i<v.size()-1;i++)              //iterate through vector\\n        {\\n            if(v[i]>=v[i+1])                       //compare if previous number is smaller than its preceeding number\\n            {\\n                flag=false;                       //if not then return false\\n                break;\\n            }\\n        }\\n   return flag; }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2456029,
                "title": "c",
                "content": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string str) {\\n     str+=\" \";\\n    vector<int>sk;\\n    for (int i=0; i<str.length(); i++)\\n    {\\n    if (isdigit(str[i]) && str[i+1]==\\' \\') {\\n        int  num=str[i]-48;\\n        sk.push_back(num);\\n    }\\n     if (isdigit(str[i]) && isdigit(str[i+1])){    \\n    string s1 = to_string(str[i]-48);\\n    string s2 = to_string(str[i+1]-48);\\n    string s = s1 + s2;\\n    int c = stoi(s);\\n        sk.push_back(c);\\n         i++;\\n        \\n    }\\n    }   \\n        for(int j=0;j<sk.size()-1;j++){\\n            if(sk[j]>=sk[j+1]){\\n                return false;\\n            }\\n        }\\n        return true;\\n}\\n    \\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string str) {\\n     str+=\" \";\\n    vector<int>sk;\\n    for (int i=0; i<str.length(); i++)\\n    {\\n    if (isdigit(str[i]) && str[i+1]==\\' \\') {\\n        int  num=str[i]-48;\\n        sk.push_back(num);\\n    }\\n     if (isdigit(str[i]) && isdigit(str[i+1])){    \\n    string s1 = to_string(str[i]-48);\\n    string s2 = to_string(str[i+1]-48);\\n    string s = s1 + s2;\\n    int c = stoi(s);\\n        sk.push_back(c);\\n         i++;\\n        \\n    }\\n    }   \\n        for(int j=0;j<sk.size()-1;j++){\\n            if(sk[j]>=sk[j+1]){\\n                return false;\\n            }\\n        }\\n        return true;\\n}\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2425601,
                "title": "python-faster-than-95-easy-to-understand-with-comments",
                "content": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        sortS1 = re.findall(r\\'\\\\d+\\', s)  #Use regex to remove everything that is not a number and turn into list\\n        sortS = [int(x) for x in sortS1] # Turn all elements into integers\\n        sortS2 = [int(x) for x in sortS1]\\n        sortS.sort() # Sort one of the lists\\n\\n        if sortS == sortS2: # Check if the lists are the same, since if the sorted list is the same as the original integers in the list its in ascending order\\n            return len(sortS) == len(set(sortS)) # Check if there are duplicates by turning the list into a set\\n        else:\\n            return False\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        sortS1 = re.findall(r\\'\\\\d+\\', s)  #Use regex to remove everything that is not a number and turn into list\\n        sortS = [int(x) for x in sortS1] # Turn all elements into integers\\n        sortS2 = [int(x) for x in sortS1]\\n        sortS.sort() # Sort one of the lists\\n\\n        if sortS == sortS2: # Check if the lists are the same, since if the sorted list is the same as the original integers in the list its in ascending order\\n            return len(sortS) == len(set(sortS)) # Check if there are duplicates by turning the list into a set\\n        else:\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2405627,
                "title": "87-99-faster-python-easy-approach",
                "content": "# Hello!\\uD83D\\uDD75\\uFE0F\\u200D\\u2642\\uFE0F\\uD83D\\uDC31\\u200D\\uD83D\\uDC64\\n```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        check = 0\\n        words = s.split()\\n        \\n        for w in words:\\n            if w.isnumeric():\\n                if check >= int(w):\\n                    return False\\n                else:\\n                    check = int(w)\\n        return True\\n```\\n## Give it a **Upvote** If You Like My Explanation.\\n### Have a Great Day/Night.",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        check = 0\\n        words = s.split()\\n        \\n        for w in words:\\n            if w.isnumeric():\\n                if check >= int(w):\\n                    return False\\n                else:\\n                    check = int(w)\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2323686,
                "title": "c-solution-with-4ms-runtime",
                "content": "Stats for this solution:\\nRuntime: 4 ms, faster than 37.51% of C++ online submissions for Check if Numbers Are Ascending in a Sentence.\\nMemory Usage: 6.6 MB, less than 9.48% of C++ online submissions for Check if Numbers Are Ascending in a Sentence.\\n\\n```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        s += \" \";\\n        int n = s.size();\\n        vector<string> arr;\\n        string temp;\\n        for(int i = 0; i < n; i++) {\\n            if(s[i] >= \\'0\\' && s[i] <= \\'9\\') {\\n                temp += s[i];\\n            } else if(temp != \"\") {\\n                arr.push_back(temp); temp = \"\";\\n            }\\n        }\\n        for(int i = 1; i < arr.size(); i++) {\\n            if(stoi(arr[i]) <= stoi(arr[i - 1])) return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        s += \" \";\\n        int n = s.size();\\n        vector<string> arr;\\n        string temp;\\n        for(int i = 0; i < n; i++) {\\n            if(s[i] >= \\'0\\' && s[i] <= \\'9\\') {\\n                temp += s[i];\\n            } else if(temp != \"\") {\\n                arr.push_back(temp); temp = \"\";\\n            }\\n        }\\n        for(int i = 1; i < arr.size(); i++) {\\n            if(stoi(arr[i]) <= stoi(arr[i - 1])) return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2321928,
                "title": "javascript-simple-solution-with-98-faster",
                "content": "Runtime: 52 ms, faster than 98.81% of JavaScript online submissions for Check if Numbers Are Ascending in a Sentence.\\n\\nconst areNumbersAscending = (s) => {\\n  const sArr = s.split(\" \");\\n  let temp = 0;\\n  for (let i = 0; i < sArr.length; i++) {\\n    const element = +sArr[i];\\n    if (isNaN(element)) continue;\\n    if (element > temp) temp = element;\\n    else return false;\\n  }\\n  return true;\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "Runtime: 52 ms, faster than 98.81% of JavaScript online submissions for Check if Numbers Are Ascending in a Sentence.\\n\\nconst areNumbersAscending = (s) => {\\n  const sArr = s.split(\" \");\\n  let temp = 0;\\n  for (let i = 0; i < sArr.length; i++) {\\n    const element = +sArr[i];\\n    if (isNaN(element)) continue;\\n    if (element > temp) temp = element;\\n    else return false;\\n  }\\n  return true;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 2321079,
                "title": "c-solution-simple-approach",
                "content": "```\\nint isNumber(char k){\\n    return (k >= \\'0\\' && k <= \\'9\\');\\n}\\n\\nbool areNumbersAscending(char * s){ \\n    int value = 0,tmp;\\n    \\n    for(int i = 0; s[i]; i++)\\n    {\\n        if(isNumber(s[i]))\\n        {\\n            if(s[i+1] && isNumber(s[i+1]))  //numberOfDigits == 2\\n            {     \\n                tmp = value;\\n                value = 0;\\n                value = value*10 + (s[i] - \\'0\\');\\n                i++;\\n                value = value*10 + (s[i] - \\'0\\');\\n                if(value <= tmp)\\n                    return false;\\n            }\\n            else if(s[i] - \\'0\\' > value)        //numberOfDigits == 1\\n                value = s[i] - \\'0\\';\\n            else\\n                return false;\\n        }\\n    }\\n    return true;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint isNumber(char k){\\n    return (k >= \\'0\\' && k <= \\'9\\');\\n}\\n\\nbool areNumbersAscending(char * s){ \\n    int value = 0,tmp;\\n    \\n    for(int i = 0; s[i]; i++)\\n    {\\n        if(isNumber(s[i]))\\n        {\\n            if(s[i+1] && isNumber(s[i+1]))  //numberOfDigits == 2\\n            {     \\n                tmp = value;\\n                value = 0;\\n                value = value*10 + (s[i] - \\'0\\');\\n                i++;\\n                value = value*10 + (s[i] - \\'0\\');\\n                if(value <= tmp)\\n                    return false;\\n            }\\n            else if(s[i] - \\'0\\' > value)        //numberOfDigits == 1\\n                value = s[i] - \\'0\\';\\n            else\\n                return false;\\n        }\\n    }\\n    return true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2297428,
                "title": "java-solution-easy-to-understand-code-with-comments-1-ms",
                "content": "Hope this is useful for you:\\n\\n```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        //  Main constraints related to the length.\\n        if (s == null || s.length() < 3 || s.length() > 200) return false;\\n        \\n        // Split the sentence into a single token (which is strictly a positive number or a word in lower case.)\\n        String[] splittedString = s.split(\" \");\\n        \\n        // Variable to drive the ascending order.\\n        int previousNumber = 0;\\n        \\n        // Iterate over each token.\\n        for (String currentString : splittedString) {\\n            // Validation in case we found a token representing a positive number. (It is fine to check only the first digit.)\\n            if (isCharacterADigit(currentString.charAt(0))) { \\n                int currentValue = 0;\\n                \\n                /*  In case a positive number token is found we convert it into an integer.\\n                    We extract digit by digit and concatenate to the end each digit into the currentValue variable. */\\n                for (int currentIndex = 0; currentIndex < currentString.length(); currentIndex++) {\\n                    int currentDigit = currentString.charAt(currentIndex) - \\'0\\';\\n                    currentValue = (currentValue * 10) + currentDigit;\\n                }\\n                \\n                /*  Once it is converted the positive number token into an integer, it is performed the ascending validation.\\n                    In case the ascending order is not longer valid, it is returned false.*/\\n                if (currentValue <= previousNumber) \\n                    return false;\\n                \\n                // It is replaced the prev value with the current value we extracted.\\n                previousNumber = currentValue;   \\n            }\\n        }\\n        \\n        // If we detect all the positive number tokens are in ascending order we return true.\\n        return true;\\n    }\\n    \\n    // Custom method to check if a character is a digit. This is used instead of Character.isDigit().\\n    private boolean isCharacterADigit(char character) {\\n        int possibleDigit = character - \\'0\\';\\n\\n        return possibleDigit >= 0 && possibleDigit <= 9 ? true : false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        //  Main constraints related to the length.\\n        if (s == null || s.length() < 3 || s.length() > 200) return false;\\n        \\n        // Split the sentence into a single token (which is strictly a positive number or a word in lower case.)\\n        String[] splittedString = s.split(\" \");\\n        \\n        // Variable to drive the ascending order.\\n        int previousNumber = 0;\\n        \\n        // Iterate over each token.\\n        for (String currentString : splittedString) {\\n            // Validation in case we found a token representing a positive number. (It is fine to check only the first digit.)\\n            if (isCharacterADigit(currentString.charAt(0))) { \\n                int currentValue = 0;\\n                \\n                /*  In case a positive number token is found we convert it into an integer.\\n                    We extract digit by digit and concatenate to the end each digit into the currentValue variable. */\\n                for (int currentIndex = 0; currentIndex < currentString.length(); currentIndex++) {\\n                    int currentDigit = currentString.charAt(currentIndex) - \\'0\\';\\n                    currentValue = (currentValue * 10) + currentDigit;\\n                }\\n                \\n                /*  Once it is converted the positive number token into an integer, it is performed the ascending validation.\\n                    In case the ascending order is not longer valid, it is returned false.*/\\n                if (currentValue <= previousNumber) \\n                    return false;\\n                \\n                // It is replaced the prev value with the current value we extracted.\\n                previousNumber = currentValue;   \\n            }\\n        }\\n        \\n        // If we detect all the positive number tokens are in ascending order we return true.\\n        return true;\\n    }\\n    \\n    // Custom method to check if a character is a digit. This is used instead of Character.isDigit().\\n    private boolean isCharacterADigit(char character) {\\n        int possibleDigit = character - \\'0\\';\\n\\n        return possibleDigit >= 0 && possibleDigit <= 9 ? true : false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2207601,
                "title": "one-pass-easy-game",
                "content": "```\\nfunc areNumbersAscending(s string) bool {\\n    arr := strings.Split(s, \" \")\\n    \\n    lastNum := -1\\n    \\n    for i := 0; i < len(arr); i++ {\\n        if value, err := strconv.Atoi(arr[i]); err == nil {\\n            if lastNum != -1 && value <= lastNum {\\n                return false\\n            }\\n            \\n            lastNum = value\\n        }      \\n    }\\n    \\n    return true\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C",
                    "JavaScript",
                    "Ruby",
                    "Go"
                ],
                "code": "```\\nfunc areNumbersAscending(s string) bool {\\n    arr := strings.Split(s, \" \")\\n    \\n    lastNum := -1\\n    \\n    for i := 0; i < len(arr); i++ {\\n        if value, err := strconv.Atoi(arr[i]); err == nil {\\n            if lastNum != -1 && value <= lastNum {\\n                return false\\n            }\\n            \\n            lastNum = value\\n        }      \\n    }\\n    \\n    return true\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2166730,
                "title": "simple-javascript-solution",
                "content": "```\\nvar areNumbersAscending = function(s) {\\n    let arr =[];\\n    let sArr= s.split(\\' \\')\\n\\n    for(let i=0;i<sArr.length;i++){\\n        if(!isNaN(sArr[i])){\\n            arr.push(sArr[i]);\\n        }\\n    }\\n    \\n    let j=1;\\n    let a=arr.map(Number);\\n   while(j<a.length){\\n       if(a[j-1] < a[j]) j++;\\n       else{\\n         return false  \\n       } \\n   }\\n\\n    return true;\\n};\\n```\\n\\nRuntime: 65 ms, faster than 87.95% of JavaScript online submissions for Check if Numbers Are Ascending in a Sentence.\\nMemory Usage: 42 MB, less than 73.90% of JavaScript online submissions for Check if Numbers Are Ascending in a Sentence.",
                "solutionTags": [],
                "code": "```\\nvar areNumbersAscending = function(s) {\\n    let arr =[];\\n    let sArr= s.split(\\' \\')\\n\\n    for(let i=0;i<sArr.length;i++){\\n        if(!isNaN(sArr[i])){\\n            arr.push(sArr[i]);\\n        }\\n    }\\n    \\n    let j=1;\\n    let a=arr.map(Number);\\n   while(j<a.length){\\n       if(a[j-1] < a[j]) j++;\\n       else{\\n         return false  \\n       } \\n   }\\n\\n    return true;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2113315,
                "title": "easy-python-code",
                "content": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        k = 0\\n        for i in s.split():\\n            if i.isdigit():\\n                if int(i) > k:\\n                    k = int(i)\\n                else:\\n                    return False\\n        return True\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        k = 0\\n        for i in s.split():\\n            if i.isdigit():\\n                if int(i) > k:\\n                    k = int(i)\\n                else:\\n                    return False\\n        return True\\n",
                "codeTag": "Java"
            },
            {
                "id": 2066869,
                "title": "c-solution",
                "content": "class Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        \\n        int prev = INT_MIN;\\n        int curr;\\n        \\n        for(size_t i = 0 ; i < s.length() ; i++){\\n            \\n            if(isdigit(s[i])){\\n                curr = (int)(s[i] - \\'0\\');\\n                while(isdigit(s[i+1])){\\n                    \\n                    curr = (curr*10) + (int)(s[i+1]-\\'0\\');\\n                    i++;\\n                    \\n                }\\n                \\n                if(prev >= curr){\\n                    return false;\\n                }\\n                \\n                prev = curr;\\n            }\\n            \\n        }\\n        \\n        return true;\\n        \\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        \\n        int prev = INT_MIN;\\n        int curr;\\n        \\n        for(size_t i = 0 ; i < s.length() ; i++){\\n            \\n            if(isdigit(s[i])){\\n                curr = (int)(s[i] - \\'0\\');\\n                while(isdigit(s[i+1])){\\n                    \\n                    curr = (curr*10) + (int)(s[i+1]-\\'0\\');\\n                    i++;\\n                    \\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2034940,
                "title": "python-solution-2042",
                "content": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        nums=[]\\n        for i in s.split():\\n            if i.isdigit():\\n                nums.append(int(i))\\n        ans=True\\n        \\n        for k in range(1,len(nums)):\\n            if nums[k]<=nums[k-1]:\\n                ans=False\\n                break\\n        return ans\\n```",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        nums=[]\\n        for i in s.split():\\n            if i.isdigit():\\n                nums.append(int(i))\\n        ans=True\\n        \\n        for k in range(1,len(nums)):\\n            if nums[k]<=nums[k-1]:\\n                ans=False\\n                break\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1933198,
                "title": "search-for-spaces",
                "content": "class Solution {\\npublic:\\n```\\n    bool areNumbersAscending(string s) {\\n        vector<string>result;\\n        vector<int>temp;\\n        int n=s.size();\\n        string s1=\"\";\\n        for(int i=0;i<n;i++)\\n        {\\n            if(s[i]==\\' \\' && s1!=\"\")\\n            {\\n                result.push_back(s1);\\n                s1=\"\";\\n                continue;\\n            }\\n            if(isdigit(s[i]) && s[i]!=\\' \\')\\n            s1+=s[i];\\n        }\\n        if(s1!=\"\")\\n            result.push_back(s1);\\n\\n        for(int i=0;i<result.size();i++)\\n            temp.push_back(stoi(result[i])); \\n        int count=0;\\n\\n        for(int i=1;i<temp.size();i++)\\n        {\\n            if(temp[i]>temp[i-1])\\n                count++;\\n        }\\n        if(count==temp.size()-1)\\n            return true;\\n        return false;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n    bool areNumbersAscending(string s) {\\n        vector<string>result;\\n        vector<int>temp;\\n        int n=s.size();\\n        string s1=\"\";\\n        for(int i=0;i<n;i++)\\n        {\\n            if(s[i]==\\' \\' && s1!=\"\")\\n            {\\n                result.push_back(s1);\\n                s1=\"\";\\n                continue;\\n            }\\n            if(isdigit(s[i]) && s[i]!=\\' \\')\\n            s1+=s[i];\\n        }\\n        if(s1!=\"\")\\n            result.push_back(s1);\\n\\n        for(int i=0;i<result.size();i++)\\n            temp.push_back(stoi(result[i])); \\n        int count=0;\\n\\n        for(int i=1;i<temp.size();i++)\\n        {\\n            if(temp[i]>temp[i-1])\\n                count++;\\n        }\\n        if(count==temp.size()-1)\\n            return true;\\n        return false;\\n        \\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1911226,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        int cur=INT_MIN;\\n        string num=\"\";\\n        for(int i=0; i<s.size(); i++) {\\n              if((s[i]-\\'0\\')<10 && s[i]!=\\' \\') {\\n                   num+=s[i];\\n              }else {\\n                  if(!num.empty()) {\\n                      int n=stoi(num);\\n                      if(cur<n) cur=n;\\n                      else return false;\\n                  }\\n                  num=\"\";\\n              }\\n        }\\n        if(!num.empty()) {\\n            int n=stoi(num);\\n            if(cur<n) return true;\\n            else return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        int cur=INT_MIN;\\n        string num=\"\";\\n        for(int i=0; i<s.size(); i++) {\\n              if((s[i]-\\'0\\')<10 && s[i]!=\\' \\') {\\n                   num+=s[i];\\n              }else {\\n                  if(!num.empty()) {\\n                      int n=stoi(num);\\n                      if(cur<n) cur=n;\\n                      else return false;\\n                  }\\n                  num=\"\";\\n              }\\n        }\\n        if(!num.empty()) {\\n            int n=stoi(num);\\n            if(cur<n) return true;\\n            else return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1892597,
                "title": "simple-c-solution-with-100",
                "content": "```\\nint ans = 0,prev = -1;\\n    for(auto ch : s)\\n    {\\n        if(ch >= \\'0\\' && ch <= \\'9\\')\\n            ans = ans*10 + ch-\\'0\\';\\n        else if(ans > 0)\\n        {\\n        \\n            if(prev >= ans)\\n                return false;\\n            prev = ans;\\n            ans = 0;\\n        }\\n    }\\n if(prev >= ans && ans != 0)\\n  return false;   \\n     return true;   \\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nint ans = 0,prev = -1;\\n    for(auto ch : s)\\n    {\\n        if(ch >= \\'0\\' && ch <= \\'9\\')\\n            ans = ans*10 + ch-\\'0\\';\\n        else if(ans > 0)\\n        {\\n        \\n            if(prev >= ans)\\n                return false;\\n            prev = ans;\\n            ans = 0;\\n        }\\n    }\\n if(prev >= ans && ans != 0)\\n  return false;   \\n     return true;   \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1792304,
                "title": "swift-solution",
                "content": "```\\nclass Solution {\\n    func areNumbersAscending(_ s: String) -> Bool {\\n        var result = true\\n        // var nums = s.components(separatedBy: CharacterSet.decimalDigits.inverted)\\n        // or \\n        var nums = s.components(separatedBy: \" \").compactMap {Int($0)}\\n        \\n        var prev: Int? \\n        for item in nums {\\n            if let p = prev {\\n                if !(p < item) {\\n                    return false\\n                } else {\\n                    prev = item\\n                }                    \\n            } else {\\n                prev = item\\n            }        \\n        }\\n        return result\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    func areNumbersAscending(_ s: String) -> Bool {\\n        var result = true\\n        // var nums = s.components(separatedBy: CharacterSet.decimalDigits.inverted)\\n        // or \\n        var nums = s.components(separatedBy: \" \").compactMap {Int($0)}\\n        \\n        var prev: Int? \\n        for item in nums {\\n            if let p = prev {\\n                if !(p < item) {\\n                    return false\\n                } else {\\n                    prev = item\\n                }                    \\n            } else {\\n                prev = item\\n            }        \\n        }\\n        return result\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1777181,
                "title": "javascript-faster-than-98-60ms-easiest-solution",
                "content": "```\\n    let items = s.split(\\' \\');\\n    let prev = Number.MIN_VALUE;\\n    for(let str of items) {\\n        let val = parseInt(str); // returns NaN if not valid number\\n        if(!val) continue; // if NaN, go to next element\\n        if(prev >= val) return false; // not ascending, return false\\n        prev = val; // update placeholder\\n    }\\n    return true;\\n```\\n\\n![image](https://assets.leetcode.com/users/images/a6c9c464-4a0c-4730-a19a-c27de605f2a9_1645066839.672017.png)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n    let items = s.split(\\' \\');\\n    let prev = Number.MIN_VALUE;\\n    for(let str of items) {\\n        let val = parseInt(str); // returns NaN if not valid number\\n        if(!val) continue; // if NaN, go to next element\\n        if(prev >= val) return false; // not ascending, return false\\n        prev = val; // update placeholder\\n    }\\n    return true;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1756755,
                "title": "java-easy-and-fast-solution-using-split-string-method-runtime-1ms",
                "content": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        int a=-1;\\n        String[] arr=s.split(\" \");\\n        for(String str: arr)\\n        {\\n            if(str.charAt(0)>=\\'0\\' && str.charAt(0)<=\\'9\\')\\n            {\\n                int num=0;\\n                for(int i=0;i<str.length();i++)\\n                {\\n                    num=num*10+(str.charAt(i)-\\'0\\');\\n                }\\n                if(a>=num)\\n                    return false;\\n                else\\n                    a=num;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        int a=-1;\\n        String[] arr=s.split(\" \");\\n        for(String str: arr)\\n        {\\n            if(str.charAt(0)>=\\'0\\' && str.charAt(0)<=\\'9\\')\\n            {\\n                int num=0;\\n                for(int i=0;i<str.length();i++)\\n                {\\n                    num=num*10+(str.charAt(i)-\\'0\\');\\n                }\\n                if(a>=num)\\n                    return false;\\n                else\\n                    a=num;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1697770,
                "title": "python3-accepted-solution",
                "content": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        num = [int(i) for i in s.split() if(i.isnumeric())]\\n        return True if(num == sorted(num) and len(num)==len(set(num))) else False\\n```",
                "solutionTags": [
                    "Python3",
                    "Sorting",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        num = [int(i) for i in s.split() if(i.isnumeric())]\\n        return True if(num == sorted(num) and len(num)==len(set(num))) else False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1689198,
                "title": "python-solution-simple-and-clear",
                "content": "```\\ndef areNumbersAscending(self, s: str) -> bool:\\n        nums = [int(item) for item in s.split() if item.isdigit()]\\n        for i in range(1,len(nums)):\\n            if nums[i-1] >= nums[i]:\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef areNumbersAscending(self, s: str) -> bool:\\n        nums = [int(item) for item in s.split() if item.isdigit()]\\n        for i in range(1,len(nums)):\\n            if nums[i-1] >= nums[i]:\\n                return False\\n        return True\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1685242,
                "title": "check-if-numbers-are-ascending-in-a-sentence-python3-brute-force",
                "content": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        nums = [int(i) for i in s.split() if i.isnumeric()]\\n        for i in range(1, len(nums)):\\n            if nums[i] <= nums[i - 1]:\\n                return False\\n        return True\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        nums = [int(i) for i in s.split() if i.isnumeric()]\\n        for i in range(1, len(nums)):\\n            if nums[i] <= nums[i - 1]:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1662579,
                "title": "c-easy",
                "content": "**Do upvote if it helps! :)**\\n```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        stringstream st(s);\\n        string word;\\n        int last=-1;\\n        while(st>>word){\\n            if(isdigit(word[0])){\\n                int num=stoi(word);\\n                if(last>=num) return false;\\n                else last=num;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        stringstream st(s);\\n        string word;\\n        int last=-1;\\n        while(st>>word){\\n            if(isdigit(word[0])){\\n                int num=stoi(word);\\n                if(last>=num) return false;\\n                else last=num;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1662416,
                "title": "python3-3-line",
                "content": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        lst = [int(x) for x in s.split() if x.isdigit()]\\n        a = sorted(set(lst))\\n        return lst == a\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        lst = [int(x) for x in s.split() if x.isdigit()]\\n        a = sorted(set(lst))\\n        return lst == a\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1652158,
                "title": "python-simple-and-fast-solution",
                "content": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        res=[]\\n        for i in s.split(\" \"):\\n            if i.isdigit():\\n                res.append(i)\\n        for i in range(len(res)-1):\\n            if int(res[i]) >= int(res[i+1]):\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        res=[]\\n        for i in s.split(\" \"):\\n            if i.isdigit():\\n                res.append(i)\\n        for i in range(len(res)-1):\\n            if int(res[i]) >= int(res[i+1]):\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1641353,
                "title": "python-solution",
                "content": "**Solution**\\nFaster than 94% submissions.\\n```\\nnl=[ int(x) for x in s.split() if x.isnumeric()]\\n \\nreturn len(set(nl)) == len(nl) and sorted(nl)== nl\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nnl=[ int(x) for x in s.split() if x.isnumeric()]\\n \\nreturn len(set(nl)) == len(nl) and sorted(nl)== nl\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1640740,
                "title": "c",
                "content": "```\\npublic class Solution {\\n    public bool AreNumbersAscending(string s) {\\n        if (string.IsNullOrEmpty(s))\\n            return false;\\n        \\n        string[] tokens = s.Split(\\' \\');\\n        int ind1 = 0;\\n        \\n        while (ind1 < tokens.Length)\\n        {\\n            if (tokens[ind1][0] >= \\'0\\' && tokens[ind1][0] <= \\'9\\')\\n            {\\n                break;\\n            }\\n            \\n            ind1++;\\n        }\\n        \\n        if (ind1 == tokens.Length)\\n        {\\n            return true;\\n        }\\n        \\n        int ind2 = ind1 + 1;\\n        \\n        while (ind2 < tokens.Length)\\n        {\\n            if (tokens[ind2][0] >= \\'0\\' && tokens[ind2][0] <= \\'9\\')\\n            {\\n                if (Convert.ToInt32(tokens[ind1]) >= Convert.ToInt32(tokens[ind2]))\\n                {\\n                    return false;\\n                }\\n                \\n                ind1 = ind2;\\n            }\\n            \\n            ind2++;\\n        }\\n        \\n        return true;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public bool AreNumbersAscending(string s) {\\n        if (string.IsNullOrEmpty(s))\\n            return false;\\n        \\n        string[] tokens = s.Split(\\' \\');\\n        int ind1 = 0;\\n        \\n        while (ind1 < tokens.Length)\\n        {\\n            if (tokens[ind1][0] >= \\'0\\' && tokens[ind1][0] <= \\'9\\')\\n            {\\n                break;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1598348,
                "title": "c",
                "content": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        int i=0, n=s.size(), num=-1, new_num=0;\\n        string str;\\n        while(i<n)\\n        {\\n            if(isdigit(s[i]))\\n            {\\n                while(isdigit(s[i]))\\n                {\\n                    str+=s[i];\\n                    i++;\\n                }\\n                new_num=stoi(str);\\n                if(num!=-1 && new_num<=num) { return false; }\\n                num=stoi(str);\\n                str.clear();\\n            }\\n            else\\n            {\\n                i++;\\n            }\\n        }\\n        return true;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        int i=0, n=s.size(), num=-1, new_num=0;\\n        string str;\\n        while(i<n)\\n        {\\n            if(isdigit(s[i]))\\n            {\\n                while(isdigit(s[i]))\\n                {\\n                    str+=s[i];\\n                    i++;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1593041,
                "title": "java-solution-2ms",
                "content": "```\\npublic boolean areNumbersAscending(String s) {\\n        int previous = 0;\\n        String[] elements = s.split(\" \");\\n        for (int i = 0; i < elements.length; i++) {\\n            if (elements[i].charAt(0) >= 48 && elements[i].charAt(0) <= 57) {\\n                int number = Integer.parseInt(elements[i]);\\n                if (number > previous) {\\n                    previous = number;\\n                } else {\\n                    return false;\\n                }\\n            }\\n        }\\n         return true;\\n    }\\n\\t\\n\\t```",
                "solutionTags": [],
                "code": "```\\npublic boolean areNumbersAscending(String s) {\\n        int previous = 0;\\n        String[] elements = s.split(\" \");\\n        for (int i = 0; i < elements.length; i++) {\\n            if (elements[i].charAt(0) >= 48 && elements[i].charAt(0) <= 57) {\\n                int number = Integer.parseInt(elements[i]);\\n                if (number > previous) {\\n                    previous = number;\\n                } else {\\n                    return false;\\n                }\\n            }\\n        }\\n         return true;\\n    }\\n\\t\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 1589768,
                "title": "using-regex-97-speed",
                "content": "![image](https://assets.leetcode.com/users/images/58309a22-357a-4c11-ac03-e8f66d8a51e2_1637491577.5327728.png)\\n```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        nums = list(map(int, re.findall(r\"\\\\b\\\\d+\\\\b\", s)))\\n        return len(nums) < 2 or all(n2 > n1 for n1, n2 in zip(nums, nums[1:]))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        nums = list(map(int, re.findall(r\"\\\\b\\\\d+\\\\b\", s)))\\n        return len(nums) < 2 or all(n2 > n1 for n1, n2 in zip(nums, nums[1:]))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1567578,
                "title": "100-faster-easy-to-understand-solution-in-java",
                "content": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        int n = s.length();\\n        int last = -1;\\n        \\n        int i = 0;\\n        while(i < n){\\n            if(Character.isDigit(s.charAt(i))){\\n                int j = i+1;\\n                int val =  (int)(s.charAt(i) - \\'0\\');\\n                \\n                while(j < n && Character.isDigit(s.charAt(j)) ){\\n                     val = val*10 + (int)(s.charAt(j) - \\'0\\');\\n                    j++;\\n                }\\n                \\n                if(last >= val) return false;\\n                last = val;\\n                i = j;\\n            }else i++;\\n        }\\n        \\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        int n = s.length();\\n        int last = -1;\\n        \\n        int i = 0;\\n        while(i < n){\\n            if(Character.isDigit(s.charAt(i))){\\n                int j = i+1;\\n                int val =  (int)(s.charAt(i) - \\'0\\');\\n                \\n                while(j < n && Character.isDigit(s.charAt(j)) ){\\n                     val = val*10 + (int)(s.charAt(j) - \\'0\\');\\n                    j++;\\n                }\\n                \\n                if(last >= val) return false;\\n                last = val;\\n                i = j;\\n            }else i++;\\n        }\\n        \\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1560850,
                "title": "0-ms-faster-than-100-00-of-c-online-submissions",
                "content": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        string temp=\"\";\\n        int prev=0,curr;\\n        s.push_back(\\' \\');\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]==\\' \\'){\\n                if(isdigit(temp[0])){\\n                curr=stoi(temp);\\n                     if(prev<curr){\\n                     prev=curr;\\n                     }\\n                    else return false;\\n                }\\n                temp=\"\";\\n            }\\n            else{\\n                temp+=s[i];\\n            }\\n        }\\n        return true;\\n    }\\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        string temp=\"\";\\n        int prev=0,curr;\\n        s.push_back(\\' \\');\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]==\\' \\'){\\n                if(isdigit(temp[0])){\\n                curr=stoi(temp);\\n                     if(prev<curr){\\n                     prev=curr;\\n                     }\\n                    else return false;\\n                }\\n                temp=\"\";\\n            }\\n            else{\\n                temp+=s[i];\\n            }\\n        }\\n        return true;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1554875,
                "title": "python-2-liner",
                "content": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        \\n        nums = [int(i) for i in s.split() if i.isnumeric()]\\n        return True if nums == sorted(nums) and len(nums) == len(set(nums)) else False\\n    \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        \\n        nums = [int(i) for i in s.split() if i.isnumeric()]\\n        return True if nums == sorted(nums) and len(nums) == len(set(nums)) else False\\n    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1554342,
                "title": "python3-faster-than-90-94",
                "content": "```\\ndef numberAscending(string):\\n\\tres = 0\\n\\tfor ele in string.split():\\n\\t\\tif ele.isnumeric():\\n\\t\\t\\tif int(ele)>res:\\n\\t\\t\\t\\tres=int(ele)\\n\\t\\t\\telse:\\n\\t\\t\\t\\treturn False\\n\\treturn True\\n\\t\\n```",
                "solutionTags": [],
                "code": "```\\ndef numberAscending(string):\\n\\tres = 0\\n\\tfor ele in string.split():\\n\\t\\tif ele.isnumeric():\\n\\t\\t\\tif int(ele)>res:\\n\\t\\t\\t\\tres=int(ele)\\n\\t\\t\\telse:\\n\\t\\t\\t\\treturn False\\n\\treturn True\\n\\t\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1544696,
                "title": "rust-one-liner",
                "content": "```rust\\nimpl Solution {\\n    pub fn are_numbers_ascending(s: String) -> bool {\\n        s.split(\" \")\\n            .map(|word| word.parse::<i32>())\\n            .filter(Result::is_ok)\\n            .map(Result::unwrap)\\n            .collect::<Vec<i32>>()\\n            .windows(2).all(|w| w[0] < w[1])\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```rust\\nimpl Solution {\\n    pub fn are_numbers_ascending(s: String) -> bool {\\n        s.split(\" \")\\n            .map(|word| word.parse::<i32>())\\n            .filter(Result::is_ok)\\n            .map(Result::unwrap)\\n            .collect::<Vec<i32>>()\\n            .windows(2).all(|w| w[0] < w[1])\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1542740,
                "title": "java-sloution-runtime-1-ms-faster-than-94-83-of-java-online-submissions",
                "content": "class Solution {\\n\\n     public boolean areNumbersAscending(String s) {\\n\\t\\t\\t  boolean t = true;\\n\\t\\t\\t  int r = -1;\\n         // Convert String to String Array\\n\\t\\t\\t  String[] p = s.split(\" \");\\n         // travesing in String Array\\n\\t\\t       for(int i=0; i<p.length; i++) {\\n                   //checking first character of each String is Integer or not if it is Integer then convert into Integer else continue\\n\\t\\t    \\t  if(Character.isDigit(p[i].charAt(0))){\\n\\t\\t    \\t\\t int g = Integer.parseInt(p[i]);\\n\\t\\t    \\t\\t  if(g <= r) {\\n\\t\\t    \\t\\t\\t  t = false;\\n\\t\\t    \\t\\t\\t  break;\\n\\t\\t    \\t\\t  }\\n                      r = g;\\n\\t\\t    \\t  }\\n\\t\\t    \\t  else {\\n\\t\\t    \\t\\t  continue;\\n\\t\\t    \\t  }\\n\\t\\t       }\\n\\t\\t       return t;\\n\\t\\t    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\n     public boolean areNumbersAscending(String s) {\\n\\t\\t\\t  boolean t = true;\\n\\t\\t\\t  int r = -1;\\n         // Convert String to String Array\\n\\t\\t\\t  String[] p = s.split(\" \");\\n         // travesing in String Array\\n\\t\\t       for(int i=0; i<p.length; i++) {\\n                   //checking first character of each String is Integer or not if it is Integer then convert into Integer else continue\\n\\t\\t    \\t  if(Character.isDigit(p[i].charAt(0))){\\n\\t\\t    \\t\\t int g = Integer.parseInt(p[i]);\\n\\t\\t    \\t\\t  if(g <= r) {\\n\\t\\t    \\t\\t\\t  t = false;\\n\\t\\t    \\t\\t\\t  break;\\n\\t\\t    \\t\\t  }",
                "codeTag": "Java"
            },
            {
                "id": 1539832,
                "title": "js-simple-solution",
                "content": "```\\nvar areNumbersAscending = function(s) {\\n    const numbers = [];\\n    const arr = s.split(\" \");\\n    for(let i of arr) {\\n        if(isFinite(i)) {\\n            if(numbers.length > 0 && numbers[numbers.length - 1] >= i) {\\n                return false;\\n            }\\n            numbers.push(+i);\\n        }\\n    }\\n    return true\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar areNumbersAscending = function(s) {\\n    const numbers = [];\\n    const arr = s.split(\" \");\\n    for(let i of arr) {\\n        if(isFinite(i)) {\\n            if(numbers.length > 0 && numbers[numbers.length - 1] >= i) {\\n                return false;\\n            }\\n            numbers.push(+i);\\n        }\\n    }\\n    return true\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1534990,
                "title": "c-easy-to-understand-fast",
                "content": "**Please upvote to motivate me in my quest of documenting all leetcode solutions(to help the community). HAPPY CODING:)\\nAny suggestions and improvements are always welcome**\\n```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        vector<int> v,temp;\\n        s+=\\' \\';\\n        for(int i=0;i<s.length()-1;i++)\\n        {\\n            if(isdigit(s[i])&&!isdigit(s[i+1]))\\n            v.push_back(s[i]-\\'0\\');\\n            else if(isdigit(s[i])&&isdigit(s[i+1]))\\n            {\\n                v.push_back(stoi(s.substr(i,2)));\\n                i++;\\n            }\\n        }\\n        for(int i=0;i<v.size()-1;i++)\\n        {\\n            if(v[i]>=v[i+1])\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        vector<int> v,temp;\\n        s+=\\' \\';\\n        for(int i=0;i<s.length()-1;i++)\\n        {\\n            if(isdigit(s[i])&&!isdigit(s[i+1]))\\n            v.push_back(s[i]-\\'0\\');\\n            else if(isdigit(s[i])&&isdigit(s[i+1]))\\n            {\\n                v.push_back(stoi(s.substr(i,2)));\\n                i++;\\n            }\\n        }\\n        for(int i=0;i<v.size()-1;i++)\\n        {\\n            if(v[i]>=v[i+1])\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1531751,
                "title": "swift-2042-check-if-numbers-are-ascending-in-a-sequence-two-liner",
                "content": "```swift\\n    func areNumbersAscending(_ s: String) -> Bool {\\n        let numbers = s.split(separator: \" \").compactMap { Int($0) }\\n        return zip(numbers, numbers.dropFirst()).allSatisfy { $0 < $1 }\\n    }\\n```\\n\\t",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```swift\\n    func areNumbersAscending(_ s: String) -> Bool {\\n        let numbers = s.split(separator: \" \").compactMap { Int($0) }\\n        return zip(numbers, numbers.dropFirst()).allSatisfy { $0 < $1 }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1531317,
                "title": "c-solution-faster-than-100-pointers-linear-time",
                "content": "\"\"\"\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        int i=0,l=s.length(),prv=-1,num=0;\\n        char* c=&s[i];\\n        while(i<l)\\n        {\\n            if(*(c+i)>=\\'0\\' && *(c+i)<=\\'9\\')\\n            {\\n                num=0;\\n                while(*(c+i)>=\\'0\\' && *(c+i)<=\\'9\\')\\n                {\\n                    num=num*10+(*(c+i)-\\'0\\');\\n                    i++;\\n                }\\n                if(num>prv)\\n                    prv=num;\\n                else\\n                    return(false);               \\n            }\\n            i++;\\n        }\\n        return(true);\\n    }\\n};\\n\"\"\"",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        int i=0,l=s.length(),prv=-1,num=0;\\n        char* c=&s[i];\\n        while(i<l)\\n        {\\n            if(*(c+i)>=\\'0\\' && *(c+i)<=\\'9\\')\\n            {\\n                num=0;\\n                while(*(c+i)>=\\'0\\' && *(c+i)<=\\'9\\')\\n                {\\n                    num=num*10+(*(c+i)-\\'0\\');\\n                    i++;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1527770,
                "title": "rust-solution",
                "content": "```\\nimpl Solution {\\n    pub fn are_numbers_ascending(s: String) -> bool {\\n        let mut num = 0;\\n        for n in s.split(\\' \\').filter_map(|ss| ss.parse::<i32>().ok()) {\\n            match n > num {\\n                true => num = n,\\n                false => return false,\\n            }\\n        }\\n        true\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "String"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn are_numbers_ascending(s: String) -> bool {\\n        let mut num = 0;\\n        for n in s.split(\\' \\').filter_map(|ss| ss.parse::<i32>().ok()) {\\n            match n > num {\\n                true => num = n,\\n                false => return false,\\n            }\\n        }\\n        true\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1526767,
                "title": "easy-java-solution-tc-0-n-using-string-split",
                "content": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        List<Integer> answerList=new ArrayList<>();\\n       /*\\n        after Split given input : \"1 box has 3 blue 4 red 6 green and 12 yellow marbles\"\\n        splitArray = [ \"1\" ,\"box\" ,\"has\" ,\"3\",\"blue\", \"4\", \"red\", \"6\", \"green\", \"and\", \"12\", \"yellow\", \"marbles\" ]\\n        */\\n        \\n     String []splitArray=s.split(\" \");\\n       \\n        for(int i=0;i<splitArray.length;i++){\\n            int value=splitArray[i].charAt(0)-48;\\n            if(value<=9 && value>=0){\\n                \\n                answerList.add(Integer.parseInt(splitArray[i]));\\n            }\\n            \\n            \\n        }\\n        \\n        for(int i=1;i<answerList.size();i++){\\n            \\n            if(!(answerList.get(i-1)<answerList.get(i))){\\n                return false;\\n            }\\n        }\\n        \\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        List<Integer> answerList=new ArrayList<>();\\n       /*\\n        after Split given input : \"1 box has 3 blue 4 red 6 green and 12 yellow marbles\"\\n        splitArray = [ \"1\" ,\"box\" ,\"has\" ,\"3\",\"blue\", \"4\", \"red\", \"6\", \"green\", \"and\", \"12\", \"yellow\", \"marbles\" ]\\n        */\\n        \\n     String []splitArray=s.split(\" \");\\n       \\n        for(int i=0;i<splitArray.length;i++){\\n            int value=splitArray[i].charAt(0)-48;\\n            if(value<=9 && value>=0){\\n                \\n                answerList.add(Integer.parseInt(splitArray[i]));\\n            }\\n            \\n            \\n        }\\n        \\n        for(int i=1;i<answerList.size();i++){\\n            \\n            if(!(answerList.get(i-1)<answerList.get(i))){\\n                return false;\\n            }\\n        }\\n        \\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1526501,
                "title": "simple-java-solution-using-string-split-function",
                "content": "**About String.split(\" \") :** Split is used to break a delimited string into substrings\\nExample : \\n```\\nString s = \"Hello#world#do#you#know#about#split#function\";\\nString[] word_arr = s.split(\"#\"); // We are using \\'#\\' as delimeter\\n\\tword_arr[0] -> \"Hello\"\\n\\tword_arr[1] -> \"world\"\\n\\tword_arr[3] -> \"do\"\\n\\tword_arr[4] -> \"you\"\\n\\tword_arr[5] -> \"know\"\\n\\tword_arr[6] -> \"about\"\\n\\tword_arr[7] -> \"split\"\\n\\tword_arr[8] -> \"function\"\\t\\n```\\n\\n**My Solution :**\\n```\\n    public boolean areNumbersAscending(String s) {\\n        int prev = -1;\\n\\t\\tfor (String num :  s.split(\" \")) {     //Separate words from String\\n\\t\\t\\tif (\\'0\\' <= num.charAt(0) && num.charAt(0) <= \\'9\\') {     // True means word is any number\\n\\t\\t\\t\\tint cur = Integer.parseInt(num);     // parse int from String\\n\\t\\t\\t\\tif (prev < cur) prev = cur;     // update prev with cur for next comparision\\n\\t\\t\\t\\telse return false;\\n\\t\\t\\t} else continue;\\n\\t\\t}\\n        return true;\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nString s = \"Hello#world#do#you#know#about#split#function\";\\nString[] word_arr = s.split(\"#\"); // We are using \\'#\\' as delimeter\\n\\tword_arr[0] -> \"Hello\"\\n\\tword_arr[1] -> \"world\"\\n\\tword_arr[3] -> \"do\"\\n\\tword_arr[4] -> \"you\"\\n\\tword_arr[5] -> \"know\"\\n\\tword_arr[6] -> \"about\"\\n\\tword_arr[7] -> \"split\"\\n\\tword_arr[8] -> \"function\"\\t\\n```\n```\\n    public boolean areNumbersAscending(String s) {\\n        int prev = -1;\\n\\t\\tfor (String num :  s.split(\" \")) {     //Separate words from String\\n\\t\\t\\tif (\\'0\\' <= num.charAt(0) && num.charAt(0) <= \\'9\\') {     // True means word is any number\\n\\t\\t\\t\\tint cur = Integer.parseInt(num);     // parse int from String\\n\\t\\t\\t\\tif (prev < cur) prev = cur;     // update prev with cur for next comparision\\n\\t\\t\\t\\telse return false;\\n\\t\\t\\t} else continue;\\n\\t\\t}\\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1525620,
                "title": "fastest-python-solutions-faster-than-100-2-approaches-28-ms-28-ms",
                "content": "# Fastest Python Solutions | Faster than 100% | 2 Approaches (28 ms, 28 ms)\\n\\n## Approach 1\\n**Runtime: 28 ms, faster than 100.00% of Python3 online submissions for Check if Numbers Are Ascending in a Sentence.\\nMemory Usage: 14.4 MB**\\n```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        tmp = []\\n        \\n        s = s.split()\\n        \\n        for ch in s:\\n            if ch.isdigit():\\n                if tmp:\\n                    a = tmp[-1]\\n                    if int(ch) > a:\\n                        tmp.append(int(ch))\\n                    else:\\n                        return False\\n                else:\\n                    tmp.append(int(ch))\\n        return True\\n```\\n![image](https://assets.leetcode.com/users/images/32525b10-4ac6-4f21-8a81-653ed7e74c3d_1634575770.4934597.png)\\n\\n\\n## Approach 2\\n**Runtime: 28 ms, faster than 100.00% of Python3 online submissions for Check if Numbers Are Ascending in a Sentence.\\nMemory Usage: 14.2 MB**\\n```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        tmp = -1\\n\\n        s = s.split()\\n\\n        for ch in s:\\n            if ch.isdigit():\\n                if int(ch) > tmp:\\n                        tmp = int(ch)\\n                else:\\n                    return False\\n        return True\\n\\n```\\n![image](https://assets.leetcode.com/users/images/54f33f9e-5aeb-4e98-b504-65b006536872_1634575782.0831916.png)\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        tmp = []\\n        \\n        s = s.split()\\n        \\n        for ch in s:\\n            if ch.isdigit():\\n                if tmp:\\n                    a = tmp[-1]\\n                    if int(ch) > a:\\n                        tmp.append(int(ch))\\n                    else:\\n                        return False\\n                else:\\n                    tmp.append(int(ch))\\n        return True\\n```\n```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        tmp = -1\\n\\n        s = s.split()\\n\\n        for ch in s:\\n            if ch.isdigit():\\n                if int(ch) > tmp:\\n                        tmp = int(ch)\\n                else:\\n                    return False\\n        return True\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525552,
                "title": "scala-functional-2-line-solution",
                "content": "```\\ndef areNumbersAscending(s: String): Boolean = {\\n  val nums = s.split(\" \").flatMap(_.toIntOption)\\n  (1 until nums.length).forall(i => nums(i) > nums(i - 1))\\n}\\n```",
                "solutionTags": [],
                "code": "```\\ndef areNumbersAscending(s: String): Boolean = {\\n  val nums = s.split(\" \").flatMap(_.toIntOption)\\n  (1 until nums.length).forall(i => nums(i) > nums(i - 1))\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1525458,
                "title": "c-solution-o-1-space-one-pass",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tbool areNumbersAscending(string s) {\\n\\t\\t\\tint prev = -1;\\n\\t\\t   for(int i=0,num = 0;i<s.size();){\\n\\t\\t\\t   if(isalpha(s[i]) or isspace(s[i])) i++;\\n\\t\\t\\t   else {\\n\\t\\t\\t\\t   while(isdigit(s[i])) num = num*10 + s[i++]-\\'0\\';\\n\\t\\t\\t\\t   if(prev>=num) return false;\\n\\t\\t\\t\\t   prev = num;\\n\\t\\t\\t\\t   num = 0;\\n\\t\\t\\t\\t}\\n\\t\\t   }\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t};",
                "solutionTags": [],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tbool areNumbersAscending(string s) {\\n\\t\\t\\tint prev = -1;\\n\\t\\t   for(int i=0,num = 0;i<s.size();){\\n\\t\\t\\t   if(isalpha(s[i]) or isspace(s[i])) i++;\\n\\t\\t\\t   else {\\n\\t\\t\\t\\t   while(isdigit(s[i])) num = num*10 + s[i++]-\\'0\\';\\n\\t\\t\\t\\t   if(prev>=num) return false;\\n\\t\\t\\t\\t   prev = num;\\n\\t\\t\\t\\t   num = 0;\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1525433,
                "title": "javascript-direct-way-78ms",
                "content": "```\\nconst isNumber = (v) => typeof v === \\'number\\' && isFinite(v);\\n\\nconst areNumbersAscending = (s) => {\\n   let a = s.split(\" \").filter(x => isNumber(x - \\'0\\')).map(Number);\\n   return isAscending(a);\\n};\\n\\nconst isAscending = (arr) => {\\n    return arr.every((x, i) => {\\n        return i === 0 || x > arr[i - 1];\\n    });\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst isNumber = (v) => typeof v === \\'number\\' && isFinite(v);\\n\\nconst areNumbersAscending = (s) => {\\n   let a = s.split(\" \").filter(x => isNumber(x - \\'0\\')).map(Number);\\n   return isAscending(a);\\n};\\n\\nconst isAscending = (arr) => {\\n    return arr.every((x, i) => {\\n        return i === 0 || x > arr[i - 1];\\n    });\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1525296,
                "title": "javascript-solution-easy-to-understand",
                "content": "```\\n/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar areNumbersAscending = function(s) {\\n    let arr = s.split(\" \");\\n    \\n    let list = [];\\n    arr.forEach(val => {\\n        if (parseInt(val) && parseInt(val) >= 0) {\\n            list.push(parseInt(val));\\n        }\\n    })\\n    \\n    for (let i = 0; i + 1 < list.length; i++) {\\n        if (list[i] < list[i+1]) {\\n            continue;\\n        }\\n        return false;\\n    }\\n    \\n    return true;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar areNumbersAscending = function(s) {\\n    let arr = s.split(\" \");\\n    \\n    let list = [];\\n    arr.forEach(val => {\\n        if (parseInt(val) && parseInt(val) >= 0) {\\n            list.push(parseInt(val));\\n        }\\n    })\\n    \\n    for (let i = 0; i + 1 < list.length; i++) {\\n        if (list[i] < list[i+1]) {\\n            continue;\\n        }\\n        return false;\\n    }\\n    \\n    return true;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1525260,
                "title": "c-simple",
                "content": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string str) {\\n        stringstream ss;   \\n        vector<int> v;    \\n        ss << str;\\n        string temp;\\n        int found;\\n        while (!ss.eof()) {\\n            ss >> temp;\\n            if (stringstream(temp) >> found)\\n                v.push_back(found);\\n            temp = \"\";\\n        }\\n        for(int i=0; i<v.size()-1; i++)\\n            if(v[i] >= v[i+1])\\n                return false;\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string str) {\\n        stringstream ss;   \\n        vector<int> v;    \\n        ss << str;\\n        string temp;\\n        int found;\\n        while (!ss.eof()) {\\n            ss >> temp;\\n            if (stringstream(temp) >> found)\\n                v.push_back(found);\\n            temp = \"\";\\n        }\\n        for(int i=0; i<v.size()-1; i++)\\n            if(v[i] >= v[i+1])\\n                return false;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525238,
                "title": "c-2042-check-if-numbers-are-ascending-in-a-sentence",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        istringstream iss(s); \\n        string buf; \\n        int prev = INT_MIN; \\n        while (iss >> buf) \\n            if(all_of(buf.begin(), buf.end(), [](auto& ch) {return isdigit(ch);})) {\\n                int curr = stoi(buf); \\n                if (prev >= curr) return false; \\n                prev = curr; \\n            }\\n        return true; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        istringstream iss(s); \\n        string buf; \\n        int prev = INT_MIN; \\n        while (iss >> buf) \\n            if(all_of(buf.begin(), buf.end(), [](auto& ch) {return isdigit(ch);})) {\\n                int curr = stoi(buf); \\n                if (prev >= curr) return false; \\n                prev = curr; \\n            }\\n        return true; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525198,
                "title": "python-simple-solution",
                "content": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        s = s.split(\\' \\')\\n        last = float(\\'-inf\\')\\n        \\n        for char in s:\\n            if char.isnumeric():\\n                if int(char) <= last:\\n                    return False\\n                else:\\n                    last = int(char)\\n                    \\n        return True\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        s = s.split(\\' \\')\\n        last = float(\\'-inf\\')\\n        \\n        for char in s:\\n            if char.isnumeric():\\n                if int(char) <= last:\\n                    return False\\n                else:\\n                    last = int(char)\\n                    \\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525197,
                "title": "java-split-simple-numberformatexception",
                "content": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String string) {\\n        String[] s = string.split(\" \");\\n        List < Integer > list = new ArrayList < > ();\\n\\t\\t\\n        for (int i = 0; i < s.length; i++)\\n            if (check(s[i]))\\n                list.add(Integer.parseInt(s[i]));\\n\\n\\n        for (int k = 1; k < list.size(); k++) {\\n\\n            if (list.get(k - 1) < list.get(k))\\n                continue;\\n            else\\n                return false;\\n\\n        }\\n\\n        return true;\\n    }\\n    public boolean check(String strNum) {\\n        if (strNum == null) {\\n            return false;\\n        }\\n        try {\\n            int d = Integer.parseInt(strNum);\\n        } catch (NumberFormatException nfe) {\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n\\n```\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String string) {\\n        String[] s = string.split(\" \");\\n        List < Integer > list = new ArrayList < > ();\\n\\t\\t\\n        for (int i = 0; i < s.length; i++)\\n            if (check(s[i]))\\n                list.add(Integer.parseInt(s[i]));\\n\\n\\n        for (int k = 1; k < list.size(); k++) {\\n\\n            if (list.get(k - 1) < list.get(k))\\n                continue;\\n            else\\n                return false;\\n\\n        }\\n\\n        return true;\\n    }\\n    public boolean check(String strNum) {\\n        if (strNum == null) {\\n            return false;\\n        }\\n        try {\\n            int d = Integer.parseInt(strNum);\\n        } catch (NumberFormatException nfe) {\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525164,
                "title": "python-easy-to-understand",
                "content": "\\tclass Solution:\\n\\t\\tdef areNumbersAscending(self, s: str) -> bool:\\n\\t\\t\\ts = s.split()\\n\\t\\t\\tpre = -float(\"inf\")\\n\\t\\t\\tfor i in s:\\n\\t\\t\\t\\tif i.isdigit():\\n\\t\\t\\t\\t\\tif int(i) > pre:\\n\\t\\t\\t\\t\\t\\tpre = int(i)\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\treturn False\\n\\t\\t\\treturn True",
                "solutionTags": [],
                "code": "\\tclass Solution:\\n\\t\\tdef areNumbersAscending(self, s: str) -> bool:\\n\\t\\t\\ts = s.split()\\n\\t\\t\\tpre = -float(\"inf\")\\n\\t\\t\\tfor i in s:\\n\\t\\t\\t\\tif i.isdigit():\\n\\t\\t\\t\\t\\tif int(i) > pre:\\n\\t\\t\\t\\t\\t\\tpre = int(i)\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\treturn False\\n\\t\\t\\treturn True",
                "codeTag": "Java"
            },
            {
                "id": 4073662,
                "title": "easy-cpp-solution-beginner-friendly-brute-force-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        int lastnum = INT_MIN;\\n        for(int i=0; i<s.length(); i++){\\n            string tmp = \"\";\\n            while(i < s.length() && s[i] >= \\'0\\' && s[i] <= \\'9\\'){\\n                tmp += s[i++];\\n            }\\n            if(tmp != \"\"){\\n                if(stoi(tmp) > lastnum) lastnum = stoi(tmp);\\n                else return false;\\n            } \\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        int lastnum = INT_MIN;\\n        for(int i=0; i<s.length(); i++){\\n            string tmp = \"\";\\n            while(i < s.length() && s[i] >= \\'0\\' && s[i] <= \\'9\\'){\\n                tmp += s[i++];\\n            }\\n            if(tmp != \"\"){\\n                if(stoi(tmp) > lastnum) lastnum = stoi(tmp);\\n                else return false;\\n            } \\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4072095,
                "title": "easy-answer-c-using-string-tokenizer",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        vector<int> numbers;\\n        stringstream ss(s);\\n        string word;\\n        while (ss >> word) {\\n            if (isdigit(word[0])) {\\n                numbers.push_back(stoi(word));\\n            }\\n        }\\n        for (int i = 1; i < numbers.size(); i++) {\\n            if (numbers[i - 1] >= numbers[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        vector<int> numbers;\\n        stringstream ss(s);\\n        string word;\\n        while (ss >> word) {\\n            if (isdigit(word[0])) {\\n                numbers.push_back(stoi(word));\\n            }\\n        }\\n        for (int i = 1; i < numbers.size(); i++) {\\n            if (numbers[i - 1] >= numbers[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4070293,
                "title": "1-pass-o-n-o-1",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    \\n    // TC: O(n)\\n    // SC: O(1)\\n    public boolean areNumbersAscending(String s) {\\n        int prevNum = -1;\\n        int sLen = s.length();\\n        \\n        for(int i=0;i<sLen;i++){\\n           char c=s.charAt(i);\\n       \\n           if(c-\\'0\\'>=0 && c-\\'0\\'<=9){\\n             int currNum=0;\\n             while(i<sLen && s.charAt(i)!=\\' \\'){\\n                 currNum = currNum*10 + Integer.parseInt(s.charAt(i++)+\"\");\\n               }\\n               if(currNum<=prevNum){\\n                   return false;\\n                }\\n               prevNum=currNum;\\n           }\\n            \\n        }\\n        return true;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    \\n    // TC: O(n)\\n    // SC: O(1)\\n    public boolean areNumbersAscending(String s) {\\n        int prevNum = -1;\\n        int sLen = s.length();\\n        \\n        for(int i=0;i<sLen;i++){\\n           char c=s.charAt(i);\\n       \\n           if(c-\\'0\\'>=0 && c-\\'0\\'<=9){\\n             int currNum=0;\\n             while(i<sLen && s.charAt(i)!=\\' \\'){\\n                 currNum = currNum*10 + Integer.parseInt(s.charAt(i++)+\"\");\\n               }\\n               if(currNum<=prevNum){\\n                   return false;\\n                }\\n               prevNum=currNum;\\n           }\\n            \\n        }\\n        return true;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069505,
                "title": "simple-java-solution-98",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        String[] split = s.split(\" \");\\n        int num=0;\\n        for(String st:split){\\n            if(Character.isDigit(st.charAt(0))){\\n                int num1=Integer.valueOf(st);\\n                if(num<num1) num=num1;\\n                else return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        String[] split = s.split(\" \");\\n        int num=0;\\n        for(String st:split){\\n            if(Character.isDigit(st.charAt(0))){\\n                int num1=Integer.valueOf(st);\\n                if(num<num1) num=num1;\\n                else return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4064643,
                "title": "2-lines-of-python-code-smallest-memory-footprint",
                "content": "# Intuition\\nUse comprehension to extract the numbers.  Then use sorted() and set() to see if the list is accending without duplicates. \\n\\n# Approach\\n (nums == sorted(set(nums)))\\n\\n# Complexity\\n- Time complexity:\\n $$O(2n)$$ 33ms once to get the nums once to compare them \\n\\n- Space complexity:\\n $$O(n)$$ Beat 100% of solutions. \\n\\n# Code\\n```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        nums = [int(i) for i in s.split() if i.isdigit()]\\n        return (nums == sorted(set(nums)))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        nums = [int(i) for i in s.split() if i.isdigit()]\\n        return (nums == sorted(set(nums)))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4064500,
                "title": "try-except-once-through",
                "content": "# Intuition\\n Just needed to loop through all of the words in the sentence.  If the word is an integer, make sure it accends against a value.  \\n\\n# Approach\\nI set a High value to -1.  Then looked for integers with a \\'try/except\\' block. Check each new int agains High value.  If it\\'s less than or equal to the high value then fail. At the end of the string return success. \\n\\n# Complexity\\n- Time complexity:\\n- $$O(n)$$\\n\\n- Space complexity:\\n$$O(n)+k+m$$ where k is the number of words and m is the number of ints. \\n\\n# Code\\n```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        words = s.split() \\n        high = 0\\n        for word in words: # all the words in sentance\\n            try:\\n                a = int(word) # skip words\\n                if a <= high: # got a number check it\\n                    return False\\n                high = a # new high number\\n            except ValueError:\\n                pass # skip the words\\n        return True  # all were ascending\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        words = s.split() \\n        high = 0\\n        for word in words: # all the words in sentance\\n            try:\\n                a = int(word) # skip words\\n                if a <= high: # got a number check it\\n                    return False\\n                high = a # new high number\\n            except ValueError:\\n                pass # skip the words\\n        return True  # all were ascending\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4061568,
                "title": "one-line-solution",
                "content": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        return reduce(lambda x, y: int(y) if x < int(y) else inf, re.findall(\\'\\\\d+\\', s), -1) != inf\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        return reduce(lambda x, y: int(y) if x < int(y) else inf, re.findall(\\'\\\\d+\\', s), -1) != inf\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4060590,
                "title": "simple-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        int pre =0;\\n        for(String str:s.split(\" \")){\\n            if(Character.isDigit(str.charAt(0))){\\n                int num = str.charAt(0) -\\'0\\';\\n                if(1 < str.length() && Character.isDigit(str.charAt(1))){\\n                    num *=10;\\n                    num += str.charAt(1) -\\'0\\';\\n                }\\n                if(pre >= num){\\n                    return false;\\n                }\\n                else\\n                    pre = num;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        int pre =0;\\n        for(String str:s.split(\" \")){\\n            if(Character.isDigit(str.charAt(0))){\\n                int num = str.charAt(0) -\\'0\\';\\n                if(1 < str.length() && Character.isDigit(str.charAt(1))){\\n                    num *=10;\\n                    num += str.charAt(1) -\\'0\\';\\n                }\\n                if(pre >= num){\\n                    return false;\\n                }\\n                else\\n                    pre = num;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4051506,
                "title": "c-simple-readable-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public bool AreNumbersAscending(string s) {\\n        var stringArray = s.Split(\" \");\\n        int currentSmallestNumber=-999999;\\n        int number;\\n        foreach(var token in stringArray){\\n            if(int.TryParse(token, out number)){\\n                if(number<=currentSmallestNumber){\\n                    return false;\\n                }\\n                currentSmallestNumber=number;    \\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public bool AreNumbersAscending(string s) {\\n        var stringArray = s.Split(\" \");\\n        int currentSmallestNumber=-999999;\\n        int number;\\n        foreach(var token in stringArray){\\n            if(int.TryParse(token, out number)){\\n                if(number<=currentSmallestNumber){\\n                    return false;\\n                }\\n                currentSmallestNumber=number;    \\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4051173,
                "title": "easy-beginner-friendly-python-solution-beats-84-users-in-time-and-94-in-space-complexity",
                "content": "# Intuition\\nsplitting all values of the string and then iterate over the new list and declare num= -1\\nInitialize nums with -1 so you can compare it with the value you\\'re currently at and then replace it with the new value.\\n\\n# Approach\\n1) declare a num variable with -1 \\n\\n2)iterate over new list and check if the value at text[i] is digit and greater than current value of num\\nif yes then update num\\nelse return false\\n\\nonce you exit the loop return true\\n\\n# Complexity\\n- Time complexity:\\nO(N) because we use only one for loop\\n\\n- Space complexity:\\nO(N) because we made a new List  \\n\\n# Code\\n```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        num= -1\\n        text=s.split()\\n\\n        for i in range(0 , len(text)):\\n            if text[i].isdigit():\\n                if int(text[i])>nums:\\n\\n                    nums=int(text[i])\\n                else:\\n                    return False\\n        return True\\n            \\n\\n\\n\\n         \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        num= -1\\n        text=s.split()\\n\\n        for i in range(0 , len(text)):\\n            if text[i].isdigit():\\n                if int(text[i])>nums:\\n\\n                    nums=int(text[i])\\n                else:\\n                    return False\\n        return True\\n            \\n\\n\\n\\n         \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4047675,
                "title": "beginner-friendly-solution-without-using-extra-space",
                "content": "**Time Complexity : O(N)**\\n```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        String [] data = s.split(\" \");\\n        int pre = Integer. MIN_VALUE;\\n        \\n        for(int i = 0;i<data.length;i++){\\n            try{\\n                int num = Integer.parseInt(data[i]);\\n                if(num <= pre) return false;\\n                pre = num;\\n            }catch(NumberFormatException e){\\n                \\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        String [] data = s.split(\" \");\\n        int pre = Integer. MIN_VALUE;\\n        \\n        for(int i = 0;i<data.length;i++){\\n            try{\\n                int num = Integer.parseInt(data[i]);\\n                if(num <= pre) return false;\\n                pre = num;\\n            }catch(NumberFormatException e){\\n                \\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4045904,
                "title": "direct-approach-using-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public bool AreNumbersAscending(string s) {\\n      string[] str = s.Split(\" \");\\n        int temp = 0;   \\n        foreach (string x in str){\\n        if(int.TryParse(x, out int val) == true){\\n            if (temp < val)\\n                temp = val;\\n            else\\n                return false;   \\n            }\\n        }\\n        return true; \\n    }\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "String"
                ],
                "code": "```\\npublic class Solution {\\n    public bool AreNumbersAscending(string s) {\\n      string[] str = s.Split(\" \");\\n        int temp = 0;   \\n        foreach (string x in str){\\n        if(int.TryParse(x, out int val) == true){\\n            if (temp < val)\\n                temp = val;\\n            else\\n                return false;   \\n            }\\n        }\\n        return true; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4044268,
                "title": "beats-easy-beginner-friendly-solution-simple-and-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        String[] sa=s.split(\" \");\\n        List<Integer>l=new ArrayList();\\n        int p=-1;\\n        for(int i=0;i<sa.length;i++){\\n            try{\\n                int k=Integer.parseInt(sa[i]);;\\n                l.add(k);\\n            }\\n            catch(Exception e){\\n\\n            }\\n        }\\n        for(int i=0;i<l.size()-1;i++){\\n            if(l.get(i)>=l.get(i+1)){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        String[] sa=s.split(\" \");\\n        List<Integer>l=new ArrayList();\\n        int p=-1;\\n        for(int i=0;i<sa.length;i++){\\n            try{\\n                int k=Integer.parseInt(sa[i]);;\\n                l.add(k);\\n            }\\n            catch(Exception e){\\n\\n            }\\n        }\\n        for(int i=0;i<l.size()-1;i++){\\n            if(l.get(i)>=l.get(i+1)){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4041329,
                "title": "python3-solution-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        res = [int(i) for i in s.split() if i.isdigit()]\\n        num=0\\n        for i in res:\\n            if i>num:\\n                num=i\\n            else:return False\\n        return True\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        res = [int(i) for i in s.split() if i.isdigit()]\\n        num=0\\n        for i in res:\\n            if i>num:\\n                num=i\\n            else:return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4038596,
                "title": "c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) { \\n        vector<int>v;\\n        string h=\"\";\\n      \\n        for(int i=0;i<s.length();i++)\\n        {  \\n          \\n            if(s[i]==\\' \\' && h.length()!=0)\\n            { \\n              \\n              int num=stoi(h,nullptr,10);\\n              \\n        v.push_back(num);\\n              h=\"\";\\n            }\\n            else if(s[i]>=48 && s[i]<=57)\\n            {\\n           \\n           \\n            h=h+s[i];\\n         \\n            }\\n            \\n        }\\n        if(h.length()!=0)\\n        {\\n            int num=stoi(h,nullptr,10);\\n        v.push_back(num);\\n        }\\n        for(int i=0;i<v.size()-1;i++)\\n        { \\n            if(v[i]>=v[i+1])\\n            return false;\\n        }\\n        return true;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) { \\n        vector<int>v;\\n        string h=\"\";\\n      \\n        for(int i=0;i<s.length();i++)\\n        {  \\n          \\n            if(s[i]==\\' \\' && h.length()!=0)\\n            { \\n              \\n              int num=stoi(h,nullptr,10);\\n              \\n        v.push_back(num);\\n              h=\"\";\\n            }\\n            else if(s[i]>=48 && s[i]<=57)\\n            {\\n           \\n           \\n            h=h+s[i];\\n         \\n            }\\n            \\n        }\\n        if(h.length()!=0)\\n        {\\n            int num=stoi(h,nullptr,10);\\n        v.push_back(num);\\n        }\\n        for(int i=0;i<v.size()-1;i++)\\n        { \\n            if(v[i]>=v[i+1])\\n            return false;\\n        }\\n        return true;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4036023,
                "title": "simple-java-solution-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        String [] strs=s.split(\" \",0);\\n        int largest=0;\\n        for(String a : strs){\\n            if(Character.isDigit(a.charAt(0))){\\n                int ans=Integer.parseInt(a);\\n                if(ans<=largest){\\n                    return false;\\n                }\\n                largest=ans;\\n            }\\n        }\\n        return true;\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        String [] strs=s.split(\" \",0);\\n        int largest=0;\\n        for(String a : strs){\\n            if(Character.isDigit(a.charAt(0))){\\n                int ans=Integer.parseInt(a);\\n                if(ans<=largest){\\n                    return false;\\n                }\\n                largest=ans;\\n            }\\n        }\\n        return true;\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4035531,
                "title": "simple-python-solution-with-space-complexity-o-1",
                "content": "# Approach\\n*Split the sentence and add it in the list.And Traverse the list and check the element in the list is number or not.If it is a number and if it is greater than the max just make the **flag = 1** and break.And finally return **FALSE** if **flag= 1** otherwise it is **TRUE**.*\\n\\n# Complexity\\n*Time complexity:\\nO(n)\\n\\n\\nSpace complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        st = list(s.split())\\n        max = 0\\n        flag = 0\\n        for i in range(len(st)):\\n            if st[i].isdigit():\\n                if max < int(st[i]):\\n                    max = int(st[i])\\n                else:\\n                    flag = 1\\n                    break\\n        return False if flag else True\\n\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        st = list(s.split())\\n        max = 0\\n        flag = 0\\n        for i in range(len(st)):\\n            if st[i].isdigit():\\n                if max < int(st[i]):\\n                    max = int(st[i])\\n                else:\\n                    flag = 1\\n                    break\\n        return False if flag else True\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4033156,
                "title": "c-simple-solution-0ms-beats-100-00-c-5-42mb-beats-95-65-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nI was thinking about iterating through the string, finding number and converting it. memorize it, and check with the current everytime\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. We will need to iterate through the string\\n2. Everytime we see a number we need to use Atoi to convert the string number into integer number\\n3. if the current number is bigger. return false\\n4. else memorize the current number\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nDepends on the amount of number but i\\'d say\\n$$O(log n)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nDepends once again on the amount of number but i\\'d say\\n$$O(n)$$\\n# Code\\n```c\\nint myAtoi(char * s)\\n{\\n    int i;\\n    int negatif;\\n    double result;\\n\\n    i = 0;\\n    negatif = 1;\\n    result = 0;\\n    while (s[i] && (s[i] == \\' \\' || s[i] == \\'\\\\t\\'\\n        || s[i] == \\'\\\\n\\' || s[i] == \\'\\\\r\\'))\\n            i++;\\n    if ((s[i] >= \\'a\\' && s[i] <= \\'z\\') || (s[i] >= \\'A\\' && s[i] <= \\'Z\\'))\\n        return (0);\\n    if (s[i] == \\'-\\' || s[i] == \\'+\\')\\n    {\\n        if (s[i] == \\'-\\')\\n            negatif *= -1;\\n        if (s[i + 1] == \\'-\\' || s[i + 1] == \\'+\\')\\n            return (0);\\n        i++;\\n    }\\n    while (s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n    {\\n        result = result * 10 + (s[i] - 48);\\n        i++;\\n    }\\n    result *= negatif;\\n    if (result >= 2147483647)\\n        return (2147483647);\\n    else if (result <= -2147483648)\\n        return (-2147483648);\\n    return (result);\\n}\\n\\nint sizeInt(int num)\\n{\\n    int i;\\n\\n    i = 0;\\n    while (num > 9)\\n    {\\n        num = num % 10;\\n        i++;\\n    }\\n    return(i + 1);\\n}\\n\\nbool areNumbersAscending(char * s)\\n{\\n    int memory;\\n    int current;\\n    int i;\\n\\n    i = 0;\\n    memory = -1;\\n    current = 0;\\n    while (s[i])\\n    {\\n        if (s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n        {\\n            current = myAtoi(&s[i]);\\n            printf(\"Current: %d\\\\tMemory: %d\\\\n\", current, memory);\\n            if (current <= memory)\\n                return (false);\\n            memory = current;\\n            i += sizeInt(current);\\n        }\\n        else\\n            i++;\\n    }\\n    return (true);\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```c\\nint myAtoi(char * s)\\n{\\n    int i;\\n    int negatif;\\n    double result;\\n\\n    i = 0;\\n    negatif = 1;\\n    result = 0;\\n    while (s[i] && (s[i] == \\' \\' || s[i] == \\'\\\\t\\'\\n        || s[i] == \\'\\\\n\\' || s[i] == \\'\\\\r\\'))\\n            i++;\\n    if ((s[i] >= \\'a\\' && s[i] <= \\'z\\') || (s[i] >= \\'A\\' && s[i] <= \\'Z\\'))\\n        return (0);\\n    if (s[i] == \\'-\\' || s[i] == \\'+\\')\\n    {\\n        if (s[i] == \\'-\\')\\n            negatif *= -1;\\n        if (s[i + 1] == \\'-\\' || s[i + 1] == \\'+\\')\\n            return (0);\\n        i++;\\n    }\\n    while (s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n    {\\n        result = result * 10 + (s[i] - 48);\\n        i++;\\n    }\\n    result *= negatif;\\n    if (result >= 2147483647)\\n        return (2147483647);\\n    else if (result <= -2147483648)\\n        return (-2147483648);\\n    return (result);\\n}\\n\\nint sizeInt(int num)\\n{\\n    int i;\\n\\n    i = 0;\\n    while (num > 9)\\n    {\\n        num = num % 10;\\n        i++;\\n    }\\n    return(i + 1);\\n}\\n\\nbool areNumbersAscending(char * s)\\n{\\n    int memory;\\n    int current;\\n    int i;\\n\\n    i = 0;\\n    memory = -1;\\n    current = 0;\\n    while (s[i])\\n    {\\n        if (s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n        {\\n            current = myAtoi(&s[i]);\\n            printf(\"Current: %d\\\\tMemory: %d\\\\n\", current, memory);\\n            if (current <= memory)\\n                return (false);\\n            memory = current;\\n            i += sizeInt(current);\\n        }\\n        else\\n            i++;\\n    }\\n    return (true);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4031911,
                "title": "simple-c-solution-beginner-friendly",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        vector<int> v;\\n        int n = s.size();\\n\\n        string str = \"\";\\n        for(int i=0;i<n;i++){\\n            if(s[i]>=\\'0\\' && s[i]<=\\'9\\') str += s[i];\\n            if(s[i]==\\' \\'){\\n                if(str.length()){ \\n                    v.push_back(stoi(str));\\n                    str = \"\";\\n                }\\n            }\\n        }\\n        if(str.length()){ \\n            v.push_back(stoi(str));\\n            str = \"\";\\n        }\\n        for(int i=0;i<v.size()-1;i++){\\n            if(v[i] >= v[i+1]) return 0;\\n        }\\n        return 1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool areNumbersAscending(string s) {\\n        vector<int> v;\\n        int n = s.size();\\n\\n        string str = \"\";\\n        for(int i=0;i<n;i++){\\n            if(s[i]>=\\'0\\' && s[i]<=\\'9\\') str += s[i];\\n            if(s[i]==\\' \\'){\\n                if(str.length()){ \\n                    v.push_back(stoi(str));\\n                    str = \"\";\\n                }\\n            }\\n        }\\n        if(str.length()){ \\n            v.push_back(stoi(str));\\n            str = \"\";\\n        }\\n        for(int i=0;i<v.size()-1;i++){\\n            if(v[i] >= v[i+1]) return 0;\\n        }\\n        return 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4027022,
                "title": "easy-to-understand-python3-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        prev = float(\\'-inf\\')\\n\\n        s = s.split(\" \")\\n\\n        for i in s:\\n            if i.isnumeric():\\n                if int(i) <= prev:\\n                    return False\\n                prev = int(i)\\n        return True\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        prev = float(\\'-inf\\')\\n\\n        s = s.split(\" \")\\n\\n        for i in s:\\n            if i.isnumeric():\\n                if int(i) <= prev:\\n                    return False\\n                prev = int(i)\\n        return True\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4007443,
                "title": "easy-and-simple-linear-solution-with-o-n-time-and-space-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTo check that if the numbers are Ascending or not, we need to check with the previous/preceding integer.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Split the string into String array\\n- Iterate over the array\\n- If string is containing digits then only process that string by converting into integer and compare with previous integer stored in **res** variable (res is -Infinity initially)\\n- If curr integer is less-than/equals to res then return false\\n  Otherwise update the res by using current integer\\n- Lastly just return true!\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$ O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        if(s == null || s.length() == 0)  return true;\\n       \\n        String[] arr = s.split(\"\\\\\\\\s+\");\\n        //Split the string into String array\\n        int res = Integer.MIN_VALUE;\\n        for(int i = 0; i < arr.length; i++){\\n            String p = arr[i];\\n            if(Character.isDigit(p.charAt(0))){\\n                //If string is containing integer then only process\\n                int x = Integer.parseInt(p);\\n                if(x <= res)    return false;\\n                res = x;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        if(s == null || s.length() == 0)  return true;\\n       \\n        String[] arr = s.split(\"\\\\\\\\s+\");\\n        //Split the string into String array\\n        int res = Integer.MIN_VALUE;\\n        for(int i = 0; i < arr.length; i++){\\n            String p = arr[i];\\n            if(Character.isDigit(p.charAt(0))){\\n                //If string is containing integer then only process\\n                int x = Integer.parseInt(p);\\n                if(x <= res)    return false;\\n                res = x;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4006161,
                "title": "golang-with-strings-fields-1ms-2-1mb",
                "content": "Using strings.Fields to split space instead of strings.Split.\\n\\n```\\nfunc areNumbersAscending(s string) bool {\\n    min := -1\\n    words := strings.Fields(s)\\n    for _, n := range words {\\n        if isNumber(n) {\\n            i, _ := strconv.Atoi(n)\\n            if i <= min {\\n                return false\\n            } else {\\n                min = i\\n            }\\n        }\\n    }\\n    return min != -1\\n}\\n\\nfunc isNumber(n string) bool {\\n    for _, r := range n {\\n        if r < \\'0\\' || r > \\'9\\' {\\n            return false\\n        }\\n    }\\n    return true\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc areNumbersAscending(s string) bool {\\n    min := -1\\n    words := strings.Fields(s)\\n    for _, n := range words {\\n        if isNumber(n) {\\n            i, _ := strconv.Atoi(n)\\n            if i <= min {\\n                return false\\n            } else {\\n                min = i\\n            }\\n        }\\n    }\\n    return min != -1\\n}\\n\\nfunc isNumber(n string) bool {\\n    for _, r := range n {\\n        if r < \\'0\\' || r > \\'9\\' {\\n            return false\\n        }\\n    }\\n    return true\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4000721,
                "title": "beats-96-55-of-users-with-typescript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction areNumbersAscending(s: string): boolean {\\n        const l = s.split(\\' \\');\\n        let lowest = 0;\\n        for (const e of l) {\\n            const last = parseInt(e);\\n            if (!isNaN(last)) {\\n                if (last <= lowest) {\\n                    return false;\\n                }\\n                lowest = last;\\n            }\\n        }\\n        return true;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction areNumbersAscending(s: string): boolean {\\n        const l = s.split(\\' \\');\\n        let lowest = 0;\\n        for (const e of l) {\\n            const last = parseInt(e);\\n            if (!isNaN(last)) {\\n                if (last <= lowest) {\\n                    return false;\\n                }\\n                lowest = last;\\n            }\\n        }\\n        return true;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4000705,
                "title": "simple-and-fast",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public bool AreNumbersAscending(string s) {\\n        string[] l = s.Split(\\' \\');\\n        int lowest = 0 ;\\n        foreach (string e in l){\\n            if(int.TryParse(e, out int last)){\\n                if(last <= lowest)\\n                    return false;\\n                lowest = last; \\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public bool AreNumbersAscending(string s) {\\n        string[] l = s.Split(\\' \\');\\n        int lowest = 0 ;\\n        foreach (string e in l){\\n            if(int.TryParse(e, out int last)){\\n                if(last <= lowest)\\n                    return false;\\n                lowest = last; \\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3999606,
                "title": "beats-99-42-with-simple-is-best",
                "content": "# Intuition\\n<!-- We know that we have to ignore the words and that\\'s where you start -->\\n\\n# Approach\\n<!-- Focus on the numbers by creating an array of number. Think about a simple expression to check if the array is in the right order with no duplicates -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        l = s.split(\\' \\')\\n        ln = [int(x) for x in l if x.isdigit()]\\n        return sorted(set(ln)) == ln\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        l = s.split(\\' \\')\\n        ln = [int(x) for x in l if x.isdigit()]\\n        return sorted(set(ln)) == ln\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3991558,
                "title": "ruby-62ms",
                "content": "# Intuition\\nUse the `split` method and the `/[[:digit]]/` RegEx to separate out the numbers\\n\\n# Approach\\nThis approach uses a temporary integer variable during one pass of the string\\n\\n**NB** Converting the string characters to integers for comparison is important\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n# @param {String} s\\n# @return {Boolean}\\ndef are_numbers_ascending(s)\\n  temp = 0\\n  s.split.each{|e|\\n    if /[[:digit:]]/ === e\\n      return false if e.to_i <= temp\\n      temp = e.to_i\\n    end\\n  }\\n  return true\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\n# @param {String} s\\n# @return {Boolean}\\ndef are_numbers_ascending(s)\\n  temp = 0\\n  s.split.each{|e|\\n    if /[[:digit:]]/ === e\\n      return false if e.to_i <= temp\\n      temp = e.to_i\\n    end\\n  }\\n  return true\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3989264,
                "title": "python-6-ms-beats-99-43-easy",
                "content": "![image.png](https://assets.leetcode.com/users/images/efff87fd-3413-4986-9320-57fb09c188f8_1693586155.2979202.png)\\n\\n\\n# Code\\n```\\nclass Solution(object):\\n    def __init__(self):\\n        self.res = []\\n\\n    def isInt(self, num):\\n        try:\\n            int(num)\\n            return True\\n        except:\\n            return False\\n\\n    def areNumbersAscending(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n        for item in s.split(\" \"):\\n            if self.isInt(item):\\n                self.res.append(int(item))\\n        \\n        \\n        for x in range(1, len(self.res)):\\n            if self.res[x] <= self.res[x-1]:\\n                return False\\n\\n        return True\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def __init__(self):\\n        self.res = []\\n\\n    def isInt(self, num):\\n        try:\\n            int(num)\\n            return True\\n        except:\\n            return False\\n\\n    def areNumbersAscending(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: bool\\n        \"\"\"\\n        for item in s.split(\" \"):\\n            if self.isInt(item):\\n                self.res.append(int(item))\\n        \\n        \\n        for x in range(1, len(self.res)):\\n            if self.res[x] <= self.res[x-1]:\\n                return False\\n\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3988853,
                "title": "solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        a=[]\\n        for i in range(0,len(s)) :\\n            # b=\\'\\'\\n            if i==0 :\\n                if s[0].isnumeric():\\n                    a.append(s[0])\\n            if i>0:\\n                if s[i].isnumeric() :\\n                    if s[i-1].isnumeric():\\n                        a[len(a)-1]+=s[i]\\n                    else :\\n                        a.append(s[i])\\n        b=[]\\n        for i in a :\\n            b.append(int(i))\\n        c=0\\n        for i in range(0,len(b)-1) :\\n            if b[i]<b[i+1] :\\n                c+=1\\n            else :\\n                break\\n        return True if c==len(b)-1 else False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        a=[]\\n        for i in range(0,len(s)) :\\n            # b=\\'\\'\\n            if i==0 :\\n                if s[0].isnumeric():\\n                    a.append(s[0])\\n            if i>0:\\n                if s[i].isnumeric() :\\n                    if s[i-1].isnumeric():\\n                        a[len(a)-1]+=s[i]\\n                    else :\\n                        a.append(s[i])\\n        b=[]\\n        for i in a :\\n            b.append(int(i))\\n        c=0\\n        for i in range(0,len(b)-1) :\\n            if b[i]<b[i+1] :\\n                c+=1\\n            else :\\n                break\\n        return True if c==len(b)-1 else False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3977179,
                "title": "beats-100-with-beginner-friendly-java",
                "content": "# Intuition\\nonly need to compare the numbers with the next one.\\n\\n# Approach\\nString methods will help to ignore the useless symbols or characters\\n\\n# Complexity\\n- Time complexity:\\n~O(n)\\n\\n- Space complexity:\\n~O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        int i=0;\\n        int n=s.length();\\n\\n        int a=0;\\n        int max=0;\\n\\n        while(i<n)\\n        {\\n            if(s.charAt(i)>=\\'0\\' && s.charAt(i)<=\\'9\\')\\n            {\\n                a=0;\\n                while( i<n && s.charAt(i)>=\\'0\\' && s.charAt(i)<=\\'9\\')\\n                {\\n                    a=a*10+(s.charAt(i)-\\'0\\');\\n                    i++;\\n                }\\n                if(a>max)\\n                {\\n                    max=a;\\n                }\\n                else\\n                {\\n                    return false;\\n                }\\n            }\\n            i++;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        int i=0;\\n        int n=s.length();\\n\\n        int a=0;\\n        int max=0;\\n\\n        while(i<n)\\n        {\\n            if(s.charAt(i)>=\\'0\\' && s.charAt(i)<=\\'9\\')\\n            {\\n                a=0;\\n                while( i<n && s.charAt(i)>=\\'0\\' && s.charAt(i)<=\\'9\\')\\n                {\\n                    a=a*10+(s.charAt(i)-\\'0\\');\\n                    i++;\\n                }\\n                if(a>max)\\n                {\\n                    max=a;\\n                }\\n                else\\n                {\\n                    return false;\\n                }\\n            }\\n            i++;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3961521,
                "title": "java-solution-time-complexity-o-n-space-complexity-o-n",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        int prevNumber = 0;\\n        String[] tmp = s.split(\" \");\\n\\n        for (String str: tmp) {\\n            try {\\n                int currentNumber = Integer.parseInt(str);\\n\\n                if (currentNumber <= prevNumber) {\\n                    return false;\\n                } else {\\n                    prevNumber = currentNumber;\\n                }\\n            } catch (NumberFormatException e) {\\n                //ignored\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n        int prevNumber = 0;\\n        String[] tmp = s.split(\" \");\\n\\n        for (String str: tmp) {\\n            try {\\n                int currentNumber = Integer.parseInt(str);\\n\\n                if (currentNumber <= prevNumber) {\\n                    return false;\\n                } else {\\n                    prevNumber = currentNumber;\\n                }\\n            } catch (NumberFormatException e) {\\n                //ignored\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3961355,
                "title": "java-very-essay-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n       String[] str =  s.split(\" \");\\n       int prev = 0;\\n       for(int i=0; i<str.length; i++){\\n           if(Character.isDigit(str[i].charAt(0))){\\n               int num  = Integer.parseInt(str[i]);\\n               if(num <= prev){\\n                   return false;\\n               }\\n               prev  =  num;\\n           }\\n       }\\n       return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean areNumbersAscending(String s) {\\n       String[] str =  s.split(\" \");\\n       int prev = 0;\\n       for(int i=0; i<str.length; i++){\\n           if(Character.isDigit(str[i].charAt(0))){\\n               int num  = Integer.parseInt(str[i]);\\n               if(num <= prev){\\n                   return false;\\n               }\\n               prev  =  num;\\n           }\\n       }\\n       return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3957623,
                "title": "very-easy-to-understand-for-beginner-friendly-98",
                "content": "# Intuition\\nFirst we need to focus on output(final result).\\nFirst We should separate integers from a given string to check whether they are in an accending order.\\n\\n# Approach\\nSeparate all the integers values from a alphanumeric string [s] by using inbuilt module re [import re].\\nThen make created string list into integer list by map function using lambda (decreaces the code length). \\nThen sort the list of integers, check whether previous integer list is equal to sorted list, if true return True , or else return False .\\nIn case of any repetative values make a set from list of integers then compare the length of set and sorted list if it is not equal length return False .\\n\\n# Complexity\\nI used a inbuilt functions and module makes code much more optimized and reduced the runtime.\\n\\nBy using simple methods and functions code length reduced at maximum extent .\\nI think this is the best one for begineers to understand in a very clear way 100%.\\n\\n# Code\\n```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        import re\\n        numbers = re.findall(r\\'\\\\d+\\',s)\\n        numbers_in_integers=list(map(lambda x:int(x),numbers))\\n        tup=tuple(numbers_in_integers)\\n        sorte=tuple(sorted(tup))\\n        sets=set(sorte)\\n        count=0\\n        if len(sorte)!=len(sets):\\n            return False\\n        for i in range(len(tup)):\\n            if tup[i]==sorte[i]:\\n                count+=1\\n        if count==len(tup):\\n            return True\\n        else:\\n            return False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def areNumbersAscending(self, s: str) -> bool:\\n        import re\\n        numbers = re.findall(r\\'\\\\d+\\',s)\\n        numbers_in_integers=list(map(lambda x:int(x),numbers))\\n        tup=tuple(numbers_in_integers)\\n        sorte=tuple(sorted(tup))\\n        sets=set(sorte)\\n        count=0\\n        if len(sorte)!=len(sets):\\n            return False\\n        for i in range(len(tup)):\\n            if tup[i]==sorte[i]:\\n                count+=1\\n        if count==len(tup):\\n            return True\\n        else:\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3953695,
                "title": "c-code-0ms-runtime-faster-than-100-using-sstream-and-vector",
                "content": "# Intuition\\nThe question is stating that we need to check that in a particular string if we approach numbers then they should be in ascending order.\\nEach word in a string is called a token and the numbers we get in between can be any positive number.\\n\\n# Approach\\nso first of all with the help of sstream library i tokenized the string to a vector which means each word of the string mean each element of a vector nextly, i needed to check whether the token is a number for which another function has been created..thirdly i needed to compare the numbers for which i took previousNum and currentNUm\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nbool isNum(char c)\\n{\\n    if(c>=\\'0\\'&&c<=\\'9\\')\\n    {\\n        return true;\\n    }\\n    return false;\\n}\\n    bool areNumbersAscending(string s) {\\n        vector<string>tokens;\\n    stringstream check1(s);\\n    string intermediate;\\n    while(getline(check1,intermediate,\\' \\'))\\n    {\\n        tokens.push_back(intermediate);\\n    }\\n    // now tokens contain each individual element\\n    // now we need to check which among them are integers\\n    int previousNum=-1;\\n    for(const string&token:tokens)\\n    {\\n        if(isNum(token[0]))\\n        {\\n            int currentNum=stoi(token);\\n            if(currentNum<=previousNum)\\n            {\\n                return false;\\n            }\\n            previousNum=currentNum;\\n\\n        }\\n    }\\n    return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nbool isNum(char c)\\n{\\n    if(c>=\\'0\\'&&c<=\\'9\\')\\n    {\\n        return true;\\n    }\\n    return false;\\n}\\n    bool areNumbersAscending(string s) {\\n        vector<string>tokens;\\n    stringstream check1(s);\\n    string intermediate;\\n    while(getline(check1,intermediate,\\' \\'))\\n    {\\n        tokens.push_back(intermediate);\\n    }\\n    // now tokens contain each individual element\\n    // now we need to check which among them are integers\\n    int previousNum=-1;\\n    for(const string&token:tokens)\\n    {\\n        if(isNum(token[0]))\\n        {\\n            int currentNum=stoi(token);\\n            if(currentNum<=previousNum)\\n            {\\n                return false;\\n            }\\n            previousNum=currentNum;\\n\\n        }\\n    }\\n    return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1965866,
                "content": [
                    {
                        "username": "_jaguar",
                        "content": "Use try Catch block.\\nOops oriented problem."
                    },
                    {
                        "username": "Great_H",
                        "content": "\"36 claim 37 38 39 39 41 hire final 42 43 twist shift young 44 miss 45 46 sad 47 48 dig 49 50 green 51 train 52 broad 53\"\\n\\nwhy is it false?!"
                    },
                    {
                        "username": "Mariia_89",
                        "content": "Because of there are 39 39 in the string and it isn\\'t strictly increasing subsequence."
                    },
                    {
                        "username": "nitin629",
                        "content": "What is the error in this code ?\n\n```\nclass Solution {\npublic:\n    bool isANum(string &a){\n        for(int i =0 ; i < a.size() ; i++){\n            if(a[i] < '0' || a[i] > '9') return false;\n        }\n        return true ;\n    } \n    bool areNumbersAscending(string s) {\n        string curr = \"\" ;\n        int prev = -1 ;\n        for(int i = 0 ; i < s.size() ; i++){\n            if(s[i] == ' ' || i==s.size()){\n                if(isANum(curr)){\n                    if(stoi(curr) > prev){\n                        prev = stoi(curr) ;\n                    }else{\n                        return false ;}\n                }\n                curr =\"\";\n            }else{\n                curr += s[i] ;\n            }\n        }\n        return true ;\n    }\n};\n```\n"
                    },
                    {
                        "username": "vieshyal",
                        "content": "checkout this:\\n\\nfor(int i=0;i<s.length();i++){\\n            if(s[i]>=\\'0\\' && s[i]<=\\'9\\'){\\n                if(index+1==i && v.size()!=0){\\n                    int n=v[v.size()-1];\\n                    v.pop_back();\\n                    int newElement=(n*10)+s[i]-\\'0\\';\\n                    v.push_back(newElement);\\n                }else{\\n                    v.push_back(s[i]-\\'0\\');\\n                }\\n                index=i;\\n            }\\n        }"
                    },
                    {
                        "username": "vieshyal",
                        "content": "Hi,\\n\\nyou are checking. \\nif(a[i] < \\'0\\' || a[i] > \\'9\\') return false.\\n\\nthat\\'s why it is failing for two-digit numbers like 12, and 50."
                    }
                ]
            },
            {
                "id": 1894032,
                "content": [
                    {
                        "username": "_jaguar",
                        "content": "Use try Catch block.\\nOops oriented problem."
                    },
                    {
                        "username": "Great_H",
                        "content": "\"36 claim 37 38 39 39 41 hire final 42 43 twist shift young 44 miss 45 46 sad 47 48 dig 49 50 green 51 train 52 broad 53\"\\n\\nwhy is it false?!"
                    },
                    {
                        "username": "Mariia_89",
                        "content": "Because of there are 39 39 in the string and it isn\\'t strictly increasing subsequence."
                    },
                    {
                        "username": "nitin629",
                        "content": "What is the error in this code ?\n\n```\nclass Solution {\npublic:\n    bool isANum(string &a){\n        for(int i =0 ; i < a.size() ; i++){\n            if(a[i] < '0' || a[i] > '9') return false;\n        }\n        return true ;\n    } \n    bool areNumbersAscending(string s) {\n        string curr = \"\" ;\n        int prev = -1 ;\n        for(int i = 0 ; i < s.size() ; i++){\n            if(s[i] == ' ' || i==s.size()){\n                if(isANum(curr)){\n                    if(stoi(curr) > prev){\n                        prev = stoi(curr) ;\n                    }else{\n                        return false ;}\n                }\n                curr =\"\";\n            }else{\n                curr += s[i] ;\n            }\n        }\n        return true ;\n    }\n};\n```\n"
                    },
                    {
                        "username": "vieshyal",
                        "content": "checkout this:\\n\\nfor(int i=0;i<s.length();i++){\\n            if(s[i]>=\\'0\\' && s[i]<=\\'9\\'){\\n                if(index+1==i && v.size()!=0){\\n                    int n=v[v.size()-1];\\n                    v.pop_back();\\n                    int newElement=(n*10)+s[i]-\\'0\\';\\n                    v.push_back(newElement);\\n                }else{\\n                    v.push_back(s[i]-\\'0\\');\\n                }\\n                index=i;\\n            }\\n        }"
                    },
                    {
                        "username": "vieshyal",
                        "content": "Hi,\\n\\nyou are checking. \\nif(a[i] < \\'0\\' || a[i] > \\'9\\') return false.\\n\\nthat\\'s why it is failing for two-digit numbers like 12, and 50."
                    }
                ]
            },
            {
                "id": 1772237,
                "content": [
                    {
                        "username": "_jaguar",
                        "content": "Use try Catch block.\\nOops oriented problem."
                    },
                    {
                        "username": "Great_H",
                        "content": "\"36 claim 37 38 39 39 41 hire final 42 43 twist shift young 44 miss 45 46 sad 47 48 dig 49 50 green 51 train 52 broad 53\"\\n\\nwhy is it false?!"
                    },
                    {
                        "username": "Mariia_89",
                        "content": "Because of there are 39 39 in the string and it isn\\'t strictly increasing subsequence."
                    },
                    {
                        "username": "nitin629",
                        "content": "What is the error in this code ?\n\n```\nclass Solution {\npublic:\n    bool isANum(string &a){\n        for(int i =0 ; i < a.size() ; i++){\n            if(a[i] < '0' || a[i] > '9') return false;\n        }\n        return true ;\n    } \n    bool areNumbersAscending(string s) {\n        string curr = \"\" ;\n        int prev = -1 ;\n        for(int i = 0 ; i < s.size() ; i++){\n            if(s[i] == ' ' || i==s.size()){\n                if(isANum(curr)){\n                    if(stoi(curr) > prev){\n                        prev = stoi(curr) ;\n                    }else{\n                        return false ;}\n                }\n                curr =\"\";\n            }else{\n                curr += s[i] ;\n            }\n        }\n        return true ;\n    }\n};\n```\n"
                    },
                    {
                        "username": "vieshyal",
                        "content": "checkout this:\\n\\nfor(int i=0;i<s.length();i++){\\n            if(s[i]>=\\'0\\' && s[i]<=\\'9\\'){\\n                if(index+1==i && v.size()!=0){\\n                    int n=v[v.size()-1];\\n                    v.pop_back();\\n                    int newElement=(n*10)+s[i]-\\'0\\';\\n                    v.push_back(newElement);\\n                }else{\\n                    v.push_back(s[i]-\\'0\\');\\n                }\\n                index=i;\\n            }\\n        }"
                    },
                    {
                        "username": "vieshyal",
                        "content": "Hi,\\n\\nyou are checking. \\nif(a[i] < \\'0\\' || a[i] > \\'9\\') return false.\\n\\nthat\\'s why it is failing for two-digit numbers like 12, and 50."
                    }
                ]
            }
        ]
    }
]