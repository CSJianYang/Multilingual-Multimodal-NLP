[
    {
        "title": "Alternating Digit Sum",
        "question_content": "You are given a positive integer n. Each digit of n has a sign according to the following rules:\n\n\tThe most significant digit is assigned a positive sign.\n\tEach other digit has an opposite sign to its adjacent digits.\n\nReturn the sum of all digits with their corresponding sign.\n&nbsp;\nExample 1:\n\nInput: n = 521\nOutput: 4\nExplanation: (+5) + (-2) + (+1) = 4.\n\nExample 2:\n\nInput: n = 111\nOutput: 1\nExplanation: (+1) + (-1) + (+1) = 1.\n\nExample 3:\n\nInput: n = 886996\nOutput: 0\nExplanation: (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0.\n\n&nbsp;\nConstraints:\n\n\t1 <= n <= 109\n\n&nbsp;\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0; \n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}",
        "solutions": [
            {
                "id": 3083888,
                "title": "right-to-left",
                "content": "\\nIt\\'s more efficient to go right-to-left; we just need to fix the sign in the end.\\n## Right-to-Left\\n**C++**\\n```cpp\\nint alternateDigitSum(int n) {\\n    int res = 0, sign = 1;\\n    for (; n; n /= 10) {\\n        sign *= -1;\\n        res += sign * n % 10;\\n    }\\n    return sign * res;\\n}\\n```\\n## Left-to-Right\\nThis requires a string conversion, adding O(log n) memory complexity.\\n**C++**\\n```cpp\\nint alternateDigitSum(int n) {\\n    auto s = to_string(n);\\n    int res = 0;\\n    for (int i = 0; i < s.size(); ++i)\\n        res += (i % 2 ? -1 : 1) * (s[i] - \\'0\\');\\n    return res;\\n}\\n```",
                "solutionTags": [],
                "code": "```cpp\\nint alternateDigitSum(int n) {\\n    int res = 0, sign = 1;\\n    for (; n; n /= 10) {\\n        sign *= -1;\\n        res += sign * n % 10;\\n    }\\n    return sign * res;\\n}\\n```\n```cpp\\nint alternateDigitSum(int n) {\\n    auto s = to_string(n);\\n    int res = 0;\\n    for (int i = 0; i < s.size(); ++i)\\n        res += (i % 2 ? -1 : 1) * (s[i] - \\'0\\');\\n    return res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3083841,
                "title": "python3-easy-solution",
                "content": "\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n\\nIf You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Python3\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        s=str(n)\\n        ans=0\\n        for i in range(0,len(s),2):\\n            ans+=int(s[i])\\n        for i in range(1,len(s),2):\\n            ans-=int(s[i])\\n        return ans\\n```\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        s=str(n)\\n        ans=0\\n        for i in range(0,len(s),2):\\n            ans+=int(s[i])\\n        for i in range(1,len(s),2):\\n            ans-=int(s[i])\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083849,
                "title": "c-using-vector-comments-added-simple-easy-alternative-sum",
                "content": "**Please Upvote If It Helps**\\n\\n**Time Complexity : O(N)**\\n**Soace  Complexity : O(N)**\\n\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) \\n    {\\n        if(n==0) return 0;\\n        \\n        // storing the number in reverse order\\n        vector<int> tmp;\\n        while(n)\\n        {\\n            tmp.push_back(n%10);\\n            n/=10;\\n        }\\n        \\n        // reverse the number for getting the actual number\\n        reverse(tmp.begin(),tmp.end());\\n        \\n        int ans=0;\\n        bool plus=true;\\n        \\n        // do plus , minus alternatively and then return ans\\n        for(auto &it : tmp)\\n        {\\n            if(plus)\\n            {\\n                ans+=it;\\n                plus=false;\\n            }\\n            else\\n            {\\n                ans-=it;\\n                plus=true;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) \\n    {\\n        if(n==0) return 0;\\n        \\n        // storing the number in reverse order\\n        vector<int> tmp;\\n        while(n)\\n        {\\n            tmp.push_back(n%10);\\n            n/=10;\\n        }\\n        \\n        // reverse the number for getting the actual number\\n        reverse(tmp.begin(),tmp.end());\\n        \\n        int ans=0;\\n        bool plus=true;\\n        \\n        // do plus , minus alternatively and then return ans\\n        for(auto &it : tmp)\\n        {\\n            if(plus)\\n            {\\n                ans+=it;\\n                plus=false;\\n            }\\n            else\\n            {\\n                ans-=it;\\n                plus=true;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084031,
                "title": "simple-and-easy-to-understand-solution",
                "content": "\\n```\\n/*\\nAdd alternate digit and finally return the difference.\\n*/\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int o = 0, e = 0, c = 0;\\n        while(n > 0){\\n            if(c%2) o += n%10;\\n            else e += n%10;\\n            c++;\\n            n = n/10;\\n        }\\n        return (c%2)?e - o:o-e;\\n    }\\n};\\n```\\nHere is an article of my recent interview experience at Amazon, you may like : \\nhttps://leetcode.com/discuss/interview-experience/3171859/Journey-to-a-FAANG-Company-Amazon-or-SDE2-(L5)-or-Bangalore-or-Oct-2022-Accepted",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/*\\nAdd alternate digit and finally return the difference.\\n*/\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int o = 0, e = 0, c = 0;\\n        while(n > 0){\\n            if(c%2) o += n%10;\\n            else e += n%10;\\n            c++;\\n            n = n/10;\\n        }\\n        return (c%2)?e - o:o-e;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084828,
                "title": "java-2-approaches",
                "content": "One approach is top cast the number to string so we can iterate over it easily.\\n\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        String s = String.valueOf(n);\\n        int factor = 1;\\n        int res = 0;\\n\\n        for (char chr : s.toCharArray()) {\\n            res += (Character.getNumericValue(chr) * factor);\\n            factor *= -1;\\n        }\\n        return res;\\n    }\\n}\\n```\\n\\n# Approach 2\\n\\nAnother approach is to itearte over the number without casting.\\n\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int exp = (int)Math.log10(n);\\n        int factor = 1;\\n        int res = 0;\\n\\n        while (n > 0) {\\n            int mostSignificant = n / (int)Math.pow(10, exp);\\n            res += mostSignificant * factor;\\n            n -= mostSignificant * Math.pow(10, exp);\\n\\n            exp--;\\n            factor *= -1;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        String s = String.valueOf(n);\\n        int factor = 1;\\n        int res = 0;\\n\\n        for (char chr : s.toCharArray()) {\\n            res += (Character.getNumericValue(chr) * factor);\\n            factor *= -1;\\n        }\\n        return res;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int exp = (int)Math.log10(n);\\n        int factor = 1;\\n        int res = 0;\\n\\n        while (n > 0) {\\n            int mostSignificant = n / (int)Math.pow(10, exp);\\n            res += mostSignificant * factor;\\n            n -= mostSignificant * Math.pow(10, exp);\\n\\n            exp--;\\n            factor *= -1;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3165368,
                "title": "very-simple-and-short-c-solution-beats-100-huehue-lol",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int> v;\\n        int k=n;\\n        while(k){\\n            v.push_back(k%10);\\n            k=k/10;\\n        }\\n    int sze=v.size();  \\n    int l=1;\\n    int sum=0;  \\n for(int i=sze-1; i>=0; i--){\\nsum+=v[i]*l;\\nl=l*(-1);\\n }\\n return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int> v;\\n        int k=n;\\n        while(k){\\n            v.push_back(k%10);\\n            k=k/10;\\n        }\\n    int sze=v.size();  \\n    int l=1;\\n    int sum=0;  \\n for(int i=sze-1; i>=0; i--){\\nsum+=v[i]*l;\\nl=l*(-1);\\n }\\n return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3116000,
                "title": "python-easy-solution",
                "content": "# Code\\u2705\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        result = 0\\n        st = str(n)\\n        for i in range(len(st)):\\n            result = (result + int(st[i])) if i % 2 == 0 else (result - int(st[i]))\\n        return result\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        result = 0\\n        st = str(n)\\n        for i in range(len(st)):\\n            result = (result + int(st[i])) if i % 2 == 0 else (result - int(st[i]))\\n        return result\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084962,
                "title": "using-string-approach-very-easy-to-understand-c-for-beginners",
                "content": "# Approach\\nWe convert the number to a string so that we can traverse through the string effortlessly (as opposed to using a while loop and % to obtain the digits of an integer).\\nDoing this, we can subtract the character \\'0\\' which has an ASCII value of 48, from the individual charaters while traversing through the string -```(num[i] - \\'0\\')```. This way, we can obtain integer values.\\n\\n- #### Example:\\n1. integer n = 521.\\n2. string num = \"521\".\\n3. traversing through the string, we get \\'5\\', we subtract \\'0\\' from \\'5\\' -```(\\'5\\' - \\'0\\')```, that is, **53 - 48 = 5**, this 5 is in the form of integer. We add this 5 to the sum and the ```for``` loop proceeds.\\n4. the flag (```true``` or ```false```) takes care of the alternating process.\\n\\n\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sum = 0;\\n        bool flag = true;\\n        // convert the number to a string so that we can\\n        // iterate through the string from both the sides\\n        string num = to_string(n);\\n        for(int i=0; i<num.size(); i++) {\\n            // subtract the characters (ASCII values)\\n            // and obtain the integer number \\n            if(flag) {\\n                sum = sum + (num[i] - \\'0\\');\\n                flag = false;\\n            } else {\\n                sum = sum - (num[i] - \\'0\\');\\n                flag = true;\\n            }\\n            // int flag = 1;\\n            // flag = 1 - flag;\\n        }\\n        return sum;\\n    }\\n};\\n```\\n\\n**Please upvote if this approach has helped you, thanks!**",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```(num[i] - \\'0\\')```\n```(\\'5\\' - \\'0\\')```\n```for```\n```true```\n```false```\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sum = 0;\\n        bool flag = true;\\n        // convert the number to a string so that we can\\n        // iterate through the string from both the sides\\n        string num = to_string(n);\\n        for(int i=0; i<num.size(); i++) {\\n            // subtract the characters (ASCII values)\\n            // and obtain the integer number \\n            if(flag) {\\n                sum = sum + (num[i] - \\'0\\');\\n                flag = false;\\n            } else {\\n                sum = sum - (num[i] - \\'0\\');\\n                flag = true;\\n            }\\n            // int flag = 1;\\n            // flag = 1 - flag;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084887,
                "title": "c-this-code-simple-straightforward-beginner-friendly",
                "content": "![image](https://assets.leetcode.com/users/images/be509aa5-4867-4dcb-b668-cc9205ce13cf_1674371574.26445.png)\\n\\n**n==number of digits\\nT->O(n) &&& S->O(n)**\\n\\n\\tclass Solution {\\n\\t\\tpublic:\\n\\t\\t\\tint alternateDigitSum(int n) {\\n\\t\\t\\t\\tstring num=to_string(n);\\n\\t\\t\\t\\tint sum=0;\\n\\t\\t\\t\\tfor(int i=0;i<num.size();i++){\\n\\t\\t\\t\\t\\tif(i%2==0)sum+=num[i]-\\'0\\';\\n\\t\\t\\t\\t\\telse sum-=num[i]-\\'0\\';\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn sum;\\n\\t\\t\\t}\\n\\t\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\t\\tpublic:\\n\\t\\t\\tint alternateDigitSum(int n) {\\n\\t\\t\\t\\tstring num=to_string(n);\\n\\t\\t\\t\\tint sum=0;\\n\\t\\t\\t\\tfor(int i=0;i<num.size();i++){\\n\\t\\t\\t\\t\\tif(i%2==0)sum+=num[i]-\\'0\\';\\n\\t\\t\\t\\t\\telse sum-=num[i]-\\'0\\';\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 3083996,
                "title": "c-use-string-simple-approach",
                "content": "# Code\\n```\\nclass Solution \\n{\\npublic:\\n    int alternateDigitSum(int n) \\n    {\\n        string s = to_string(n); //creatig string of n\\n        int sum=0, fl=1;\\n        for(int i=0; i<s.size(); i++) //Add and substract values alternately\\n        {\\n            if(fl)  sum += s[i]-\\'0\\'; \\n            else sum -= s[i]-\\'0\\';\\n            fl = 1 -fl;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    int alternateDigitSum(int n) \\n    {\\n        string s = to_string(n); //creatig string of n\\n        int sum=0, fl=1;\\n        for(int i=0; i<s.size(); i++) //Add and substract values alternately\\n        {\\n            if(fl)  sum += s[i]-\\'0\\'; \\n            else sum -= s[i]-\\'0\\';\\n            fl = 1 -fl;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3809814,
                "title": "java-c-python-easy-and-concise",
                "content": "# **Explanation**\\n`res` means the the current result for `n` suffix.\\n\\nthen we check `n` from right to left digit by digit.\\nEach time we update `res` with one more digit\\nwith last digit value `n % 10` minus previous value `res`.\\n\\nFinally we return result `res`.\\n<br>\\n\\n# **Complexity**\\nTime `O(logn)`\\nSpace `O(1)`\\n<br>\\n\\n**Java**\\n```java\\n    public int alternateDigitSum(int n) {\\n        int res = 0;\\n        for (int x = n; x > 0; x /= 10)\\n            res = x % 10 - res;\\n        return res;\\n    }\\n```\\n\\n**C++**\\n```cpp\\n    int alternateDigitSum(int n) {\\n        int res = 0;\\n        for (; n; n /= 10)\\n            res = n % 10 - res;\\n        return res;\\n    }\\n```\\n\\n**Python**\\n```py\\n    def alternateDigitSum(self, n):\\n        res = 0\\n        while n:\\n            res = n % 10 - res\\n            n //= 10\\n        return res\\n```\\n**JavaScript**\\n```js\\nfunction alternateDigitSum(n) {\\n    let res = 0;\\n    for (; n > 0; n = parseInt(n / 10))\\n        res = n % 10 - res;\\n    return res\\n};\\n```\\n",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```java\\n    public int alternateDigitSum(int n) {\\n        int res = 0;\\n        for (int x = n; x > 0; x /= 10)\\n            res = x % 10 - res;\\n        return res;\\n    }\\n```\n```cpp\\n    int alternateDigitSum(int n) {\\n        int res = 0;\\n        for (; n; n /= 10)\\n            res = n % 10 - res;\\n        return res;\\n    }\\n```\n```py\\n    def alternateDigitSum(self, n):\\n        res = 0\\n        while n:\\n            res = n % 10 - res\\n            n //= 10\\n        return res\\n```\n```js\\nfunction alternateDigitSum(n) {\\n    let res = 0;\\n    for (; n > 0; n = parseInt(n / 10))\\n        res = n % 10 - res;\\n    return res\\n};\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3234816,
                "title": "very-simple-and-beats-100-00-of-javascript-solution",
                "content": "![image](https://assets.leetcode.com/users/images/fa8ce680-bef7-46cf-b383-32f325e57e51_1677469063.4569569.png)\\n\\nvar alternateDigitSum = function(n) {\\n    let sum =0;\\nlet a = n.toString().split(\"\").map(Number);\\nfor(let i=0; i<a.length ; i++)\\n  {\\n    if(i%2==0)\\n    {\\n      sum += a[i];\\n    }else{\\n      let neg = a[i] *-1;\\n      sum += neg;\\n    }\\n  }\\nreturn sum;\\n    \\n};",
                "solutionTags": [
                    "JavaScript",
                    "Math",
                    "String"
                ],
                "code": "![image](https://assets.leetcode.com/users/images/fa8ce680-bef7-46cf-b383-32f325e57e51_1677469063.4569569.png)\\n\\nvar alternateDigitSum = function(n) {\\n    let sum =0;\\nlet a = n.toString().split(\"\").map(Number);\\nfor(let i=0; i<a.length ; i++)\\n  {\\n    if(i%2==0)\\n    {\\n      sum += a[i];\\n    }else{\\n      let neg = a[i] *-1;\\n      sum += neg;\\n    }\\n  }\\nreturn sum;\\n    \\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 3087257,
                "title": "python-3-6-lines-w-brief-explanation-t-m-88-88",
                "content": "We iterate right to left, and if necessary, flip the sign of the answer to correct the sum at the end.\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n\\n        ans, sign = 0, 1\\n\\n        while n:\\n            sign^= -2               # <-- flips 1 to-1 and -1 to 1\\n            n, rem = divmod(n,10)\\n            ans+= sign*rem\\n            \\n        return  sign*ans\\n```\\n[https://leetcode.com/problems/alternating-digit-sum/submissions/883217603/]()",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n\\n        ans, sign = 0, 1\\n\\n        while n:\\n            sign^= -2               # <-- flips 1 to-1 and -1 to 1\\n            n, rem = divmod(n,10)\\n            ans+= sign*rem\\n            \\n        return  sign*ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084534,
                "title": "c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverseNo(int n)\\n    {\\n        int ans = 0;\\n        \\n        while(n)\\n        {\\n            ans = (ans * 10) + (n%10);\\n            n/=10;\\n        }\\n        \\n        return ans;\\n    }\\n    \\n    int alternateDigitSum(int n) \\n    {\\n        int sum = 0;\\n        \\n        int check = 1;             // flag variable for denoting odd position \\n        int val = reverseNo(n);  // stores the original no. in reverse order \\n        \\n\\t\\t // add and substracts the alternate digits of a number \\n\\t\\t\\n        while(val)\\n        {\\n            if(check)       // if it is odd indexed digit then add its value to the sum \\n            {\\n                sum += val%10;  \\n            }\\n            \\n            else             // if it is even indexed digit then substract its value from the sum\\n            {\\n\\t\\t\\t\\tsum -= val%10;\\n\\t\\t\\t}\\n            \\n            check = 1-check;\\n            \\n            val/=10;\\n        }\\n        \\n        return sum;        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverseNo(int n)\\n    {\\n        int ans = 0;\\n        \\n        while(n)\\n        {\\n            ans = (ans * 10) + (n%10);\\n            n/=10;\\n        }\\n        \\n        return ans;\\n    }\\n    \\n    int alternateDigitSum(int n) \\n    {\\n        int sum = 0;\\n        \\n        int check = 1;             // flag variable for denoting odd position \\n        int val = reverseNo(n);  // stores the original no. in reverse order \\n        \\n\\t\\t // add and substracts the alternate digits of a number \\n\\t\\t\\n        while(val)\\n        {\\n            if(check)       // if it is odd indexed digit then add its value to the sum \\n            {\\n                sum += val%10;  \\n            }\\n            \\n            else             // if it is even indexed digit then substract its value from the sum\\n            {\\n\\t\\t\\t\\tsum -= val%10;\\n\\t\\t\\t}\\n            \\n            check = 1-check;\\n            \\n            val/=10;\\n        }\\n        \\n        return sum;        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3138055,
                "title": "python-simple-solution-22ms-beats-99-one-liner",
                "content": "time efficient code\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        s = [int(i) for i in str(n)]\\n\\n        for i in range(1, len(s), 2):\\n            s[i] = -s[i]\\n\\n        return sum(s)\\n```\\n\\nand here is one-liner\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        return sum([int(val)*(-1)**(i) for i, val in enumerate(str(n))])\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        s = [int(i) for i in str(n)]\\n\\n        for i in range(1, len(s), 2):\\n            s[i] = -s[i]\\n\\n        return sum(s)\\n```\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        return sum([int(val)*(-1)**(i) for i, val in enumerate(str(n))])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3102442,
                "title": "2544-alternating-digit-sum-simple-java-approach-100-beats-with-runtime-0ms",
                "content": "# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        String val = String.valueOf(n);\\n        int sum = 0;\\n        for(int i = 0 ; i < val.length() ; i++){\\n            if(i%2==0){\\n                sum += Character.getNumericValue(val.charAt(i));\\n            }\\n            else{\\n                sum -= Character.getNumericValue(val.charAt(i));\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        String val = String.valueOf(n);\\n        int sum = 0;\\n        for(int i = 0 ; i < val.length() ; i++){\\n            if(i%2==0){\\n                sum += Character.getNumericValue(val.charAt(i));\\n            }\\n            else{\\n                sum -= Character.getNumericValue(val.charAt(i));\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3089498,
                "title": "c-recursion-o-n-solution",
                "content": "\\n**Step 1 - extract digit till we reach the end i.e the base case.\\nStep 2 - Now backtrack by adding  the digit into the sum.\\nStep 3 - Change the sign ( + or - ) through flag.**\\n\\n\\n```\\n  class Solution {\\npublic: \\n    void getSum(int n , int &sum , bool&flag){\\n        //base case\\n        if(!n) return;\\n        int digit = n%10;\\n        n= n/10;\\n        //rr\\n        getSum(n , sum,flag);\\n        //backtrack\\n        if(flag) sum +=digit ; else sum -=digit;\\n        flag = !flag;\\n    }\\n    \\n    int alternateDigitSum(int n) {\\n        int sum =0;\\n        bool flag = true;\\n        getSum(n , sum,flag);\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Array",
                    "Recursion"
                ],
                "code": "```\\n  class Solution {\\npublic: \\n    void getSum(int n , int &sum , bool&flag){\\n        //base case\\n        if(!n) return;\\n        int digit = n%10;\\n        n= n/10;\\n        //rr\\n        getSum(n , sum,flag);\\n        //backtrack\\n        if(flag) sum +=digit ; else sum -=digit;\\n        flag = !flag;\\n    }\\n    \\n    int alternateDigitSum(int n) {\\n        int sum =0;\\n        bool flag = true;\\n        getSum(n , sum,flag);\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3086906,
                "title": "simple-java-solution",
                "content": "# Complexity\\n- Time complexity: O(k), k -> length of the digits\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        String s=String.valueOf(n);\\n        int p=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char c=s.charAt(i);\\n            if(i%2==0)\\n            {\\n                p=p+(c-\\'0\\');\\n            }\\n            else\\n            {\\n                p=p-(c-\\'0\\');\\n            }\\n        }\\n        return p;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        String s=String.valueOf(n);\\n        int p=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char c=s.charAt(i);\\n            if(i%2==0)\\n            {\\n                p=p+(c-\\'0\\');\\n            }\\n            else\\n            {\\n                p=p-(c-\\'0\\');\\n            }\\n        }\\n        return p;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084231,
                "title": "easy-c-solution-vectors",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<long long> nums;\\n        \\n        while(n){\\n            nums.push_back(n%10);\\n            n/=10;\\n        }\\n        \\n        int N=nums.size();\\n        \\n        long long sum=0;\\n        if(N%2 == 0){\\n            for(int i=0; i<N; i++){\\n                if(i%2 == 0) sum += (-1*(nums[i]));\\n                else sum += (nums[i]);\\n            }\\n        }\\n        \\n        else{\\n            for(int i=0; i<N; i++){\\n                if(i%2 == 1) sum += (-1*(nums[i]));\\n                else sum += (nums[i]);\\n            }\\n            \\n        }\\n        \\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<long long> nums;\\n        \\n        while(n){\\n            nums.push_back(n%10);\\n            n/=10;\\n        }\\n        \\n        int N=nums.size();\\n        \\n        long long sum=0;\\n        if(N%2 == 0){\\n            for(int i=0; i<N; i++){\\n                if(i%2 == 0) sum += (-1*(nums[i]));\\n                else sum += (nums[i]);\\n            }\\n        }\\n        \\n        else{\\n            for(int i=0; i<N; i++){\\n                if(i%2 == 1) sum += (-1*(nums[i]));\\n                else sum += (nums[i]);\\n            }\\n            \\n        }\\n        \\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083977,
                "title": "simple-python-solution",
                "content": "# Complexity\\n- Time ```O(N) #where N is number of digits```\\n- Space ```O(1)```\\n\\n# Code\\n```\\nclass Solution(object):\\n    def alternateDigitSum(self, n):\\n        n = str(n)\\n        sum_, flag = 0, True\\n        for ch in n:\\n            sum_ += int(ch) if flag else -int(ch)\\n            flag = not flag\\n        return sum_\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```O(N) #where N is number of digits```\n```O(1)```\n```\\nclass Solution(object):\\n    def alternateDigitSum(self, n):\\n        n = str(n)\\n        sum_, flag = 0, True\\n        for ch in n:\\n            sum_ += int(ch) if flag else -int(ch)\\n            flag = not flag\\n        return sum_\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3267529,
                "title": "simple-java-solution-using-flag",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1) Reverse the Number.\\n2) Assign a flag as false , sum as the MSB .\\n3) Iterate the rev until the number is zero:\\n    i) If flag is true ,add the digit value to the sum.\\n    ii) If flag is false , subract the digit value to the sum.\\n    iii) Reverse the flag.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirstly revese the number , set a flag as false,sum as the MSB. Travers the each digit of the number ,for each iteration reverse the flag ; if the flag is true add the digit value to the sum ;else subract the didit value to the sum.\\nReturn the sum value!\\n\\n# Complexity\\n- Time complexity: O(m),\\nwhere m is the length of the number.\\n\\n- Space complexity: O(1).\\n\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n# Code\\n```\\nclass Solution\\n{\\n    public int alternateDigitSum(int n)\\n    {\\n        boolean flag = false;\\n        int rev = 0;\\n        while (n > 0)\\n        {\\n            rev = rev * 10 + (n%10);\\n            n /= 10;\\n        }\\n        int sum = rev % 10;\\n        rev /= 10;\\n        while (rev > 0)\\n        {\\n            if (flag)\\n                sum += rev%10;\\n            else\\n                sum -= rev%10;\\n            rev /= 10;\\n            flag = !flag;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution\\n{\\n    public int alternateDigitSum(int n)\\n    {\\n        boolean flag = false;\\n        int rev = 0;\\n        while (n > 0)\\n        {\\n            rev = rev * 10 + (n%10);\\n            n /= 10;\\n        }\\n        int sum = rev % 10;\\n        rev /= 10;\\n        while (rev > 0)\\n        {\\n            if (flag)\\n                sum += rev%10;\\n            else\\n                sum -= rev%10;\\n            rev /= 10;\\n            flag = !flag;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3240417,
                "title": "friendly-code-for-beginners-in-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        x=str(n)\\n        list1=[]\\n        list2=[]\\n        for i in range(len(x)):\\n            if i%2==0:\\n                list1.append(int(x[i]))\\n            else:\\n                list2.append(int(x[i]))\\n        return sum(list1)-sum(list2)\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        x=str(n)\\n        list1=[]\\n        list2=[]\\n        for i in range(len(x)):\\n            if i%2==0:\\n                list1.append(int(x[i]))\\n            else:\\n                list2.append(int(x[i]))\\n        return sum(list1)-sum(list2)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3114880,
                "title": "beginner-friendly-approach-easy-code-quality-string",
                "content": "**PLEASE UPVOTE IF YOU UNDERSTOOD**\\n# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe will use string and traverse it and add to our answer when the indices are even and subtract the value from our answer when the indices are odd.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1) convert the given number into string\\n2) traverse the complete string\\n3) initialise a variable ans with value = 0\\n4) while traversing if the digit is at even indices add the particular value to our answer but, if the index is odd just subtract the value from our answer.\\n5) return final answer.\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        string s = to_string(n);\\n        int ans=0;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(i%2==0)\\n            {\\n                int val = s[i]-\\'0\\';\\n                ans+=val;\\n            }\\n            else\\n            {\\n                int val= s[i]-\\'0\\';\\n                    ans-=val;\\n            }\\n                \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        string s = to_string(n);\\n        int ans=0;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(i%2==0)\\n            {\\n                int val = s[i]-\\'0\\';\\n                ans+=val;\\n            }\\n            else\\n            {\\n                int val= s[i]-\\'0\\';\\n                    ans-=val;\\n            }\\n                \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3086829,
                "title": "c-solution-with-stack-easy-to-understand",
                "content": "**\\u2B50Upvote if found useful\\u2B50**\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        \\n        stack<int> st;\\n        \\n        while(n > 0){\\n            st.push(n % 10);\\n            n = n/10;\\n        }\\n        \\n        bool flag = 1;\\n        int sum = 0;\\n        while(!st.empty()){\\n            if(flag){\\n                sum += st.top();\\n                st.pop();\\n            }\\n            else{\\n                sum -= st.top();\\n                st.pop();\\n            }\\n            \\n            flag = !flag;\\n        }\\n        \\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        \\n        stack<int> st;\\n        \\n        while(n > 0){\\n            st.push(n % 10);\\n            n = n/10;\\n        }\\n        \\n        bool flag = 1;\\n        int sum = 0;\\n        while(!st.empty()){\\n            if(flag){\\n                sum += st.top();\\n                st.pop();\\n            }\\n            else{\\n                sum -= st.top();\\n                st.pop();\\n            }\\n            \\n            flag = !flag;\\n        }\\n        \\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084164,
                "title": "clear-concise-solution-javascript",
                "content": "# Code\\n```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar alternateDigitSum = function(n) {\\n    const str = n.toString()\\n    let sum = 0\\n    for(let i =0; i<str.length; i++){\\n        if(i%2 ==0){\\n            sum += +str[i]\\n        }else{\\n            sum -= +str[i]\\n        }\\n    }\\n    return sum\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Math",
                    "String"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar alternateDigitSum = function(n) {\\n    const str = n.toString()\\n    let sum = 0\\n    for(let i =0; i<str.length; i++){\\n        if(i%2 ==0){\\n            sum += +str[i]\\n        }else{\\n            sum -= +str[i]\\n        }\\n    }\\n    return sum\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3084059,
                "title": "c-very-easy-solution",
                "content": "\\n# Approach\\nsimply convert the number in string then if we are reach to **even index** so we do addition and if we are at **odd index** so we do substraction .\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int alsum = 0 ;\\n            string s = to_string(n);\\n       int a = s.size();\\n        for(int i = 0; i < a; i++){\\n        if(i % 2 == 0)\\n        {\\n           alsum += s[i]-\\'0\\';\\n            \\n        }else{\\n            alsum -= s[i]-\\'0\\';\\n        }\\n        }\\n     \\n        return alsum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int alsum = 0 ;\\n            string s = to_string(n);\\n       int a = s.size();\\n        for(int i = 0; i < a; i++){\\n        if(i % 2 == 0)\\n        {\\n           alsum += s[i]-\\'0\\';\\n            \\n        }else{\\n            alsum -= s[i]-\\'0\\';\\n        }\\n        }\\n     \\n        return alsum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083867,
                "title": "short-clean-string-java",
                "content": "```java []\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        String s = n+\"\";\\n        int sum = 0;\\n        for(int i=0; i<s.length(); i++)\\n            sum += i%2 == 0 ? s.charAt(i)-\\'0\\' : -1*(s.charAt(i)-\\'0\\');\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java []\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        String s = n+\"\";\\n        int sum = 0;\\n        for(int i=0; i<s.length(); i++)\\n            sum += i%2 == 0 ? s.charAt(i)-\\'0\\' : -1*(s.charAt(i)-\\'0\\');\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083798,
                "title": "c-simple-o-1-space",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity \\n- Time complexity:  O(length of n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int ans=0;\\n        bool flag=true;\\n        int len = log10(n)+1;   //length of n\\n        \\n        if(len%2==0)\\n            flag=false;\\n        \\n        while(n){\\n            int rem = n%10;\\n            \\n            n/=10;\\n                \\n            if(flag){\\n                ans += rem;\\n            }\\n            else{\\n                ans -=rem;\\n            }\\n            \\n            flag=!flag;\\n            \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int ans=0;\\n        bool flag=true;\\n        int len = log10(n)+1;   //length of n\\n        \\n        if(len%2==0)\\n            flag=false;\\n        \\n        while(n){\\n            int rem = n%10;\\n            \\n            n/=10;\\n                \\n            if(flag){\\n                ans += rem;\\n            }\\n            else{\\n                ans -=rem;\\n            }\\n            \\n            flag=!flag;\\n            \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3677694,
                "title": "2544-alternating-digit-sum-java-solution-code",
                "content": "# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int count = 0;\\n        String str = n +\"\";\\n        for(int i=0; i<str.length();i++){\\n            if(i%2 == 0){\\n                String s = \"\" + str.charAt(i);\\n                int num = Integer.parseInt(s);\\n                count +=num;\\n            }else{\\n                 String s = \"\" + str.charAt(i);\\n                int num = Integer.parseInt(s);\\n                count-=num;\\n            }\\n           \\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int count = 0;\\n        String str = n +\"\";\\n        for(int i=0; i<str.length();i++){\\n            if(i%2 == 0){\\n                String s = \"\" + str.charAt(i);\\n                int num = Integer.parseInt(s);\\n                count +=num;\\n            }else{\\n                 String s = \"\" + str.charAt(i);\\n                int num = Integer.parseInt(s);\\n                count-=num;\\n            }\\n           \\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3492687,
                "title": "best-java-solution-for-beginners",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int sum1=0,sum2=0,rem,count=0,c=0;\\n        int a=n;\\n        int b=n;\\n        while(a>0){\\n            a/=10;\\n            count++;\\n        }\\n        int arr[]=new int[count];\\n        while(b>0){\\n            rem=b%10;\\n            arr[c]=rem;\\n            b/=10;\\n            c++;\\n        }\\n       for(int i=0;i<count;i=i+2){\\n           sum1+=arr[i];\\n       }\\n       for(int j=1;j<=count-1;j=j+2){\\n           sum2+=arr[j];\\n       }\\n       if(count%2==0)return sum2-sum1;\\n       else return sum1-sum2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int sum1=0,sum2=0,rem,count=0,c=0;\\n        int a=n;\\n        int b=n;\\n        while(a>0){\\n            a/=10;\\n            count++;\\n        }\\n        int arr[]=new int[count];\\n        while(b>0){\\n            rem=b%10;\\n            arr[c]=rem;\\n            b/=10;\\n            c++;\\n        }\\n       for(int i=0;i<count;i=i+2){\\n           sum1+=arr[i];\\n       }\\n       for(int j=1;j<=count-1;j=j+2){\\n           sum2+=arr[j];\\n       }\\n       if(count%2==0)return sum2-sum1;\\n       else return sum1-sum2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3432119,
                "title": "solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        \\n    string s = to_string(n);\\n    int sum = 0;\\n    for (int i = 0; i < s.size(); i++)\\n    {\\n        if (i % 2 == 0)\\n            sum = sum + (s[i] - \\'0\\');\\n        else\\n            sum = sum - (s[i] - \\'0\\');\\n    }\\n    return sum;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        \\n    string s = to_string(n);\\n    int sum = 0;\\n    for (int i = 0; i < s.size(); i++)\\n    {\\n        if (i % 2 == 0)\\n            sum = sum + (s[i] - \\'0\\');\\n        else\\n            sum = sum - (s[i] - \\'0\\');\\n    }\\n    return sum;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3345529,
                "title": "easy-python-solution-alternatedigitsum-o-n-time",
                "content": "\\n# Complexity\\n- Time complexity:\\nO(n) - Beats 88%\\n- Space complexity:\\nBeats 94%\\n# Code\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        sum,c = 0,1\\n        s = str(n)\\n        for i in s:\\n            if c % 2 == 0:\\n                sum = sum + ((-1)*int(i))\\n            else:\\n                sum = sum + int(i)\\n            c+=1\\n        return sum\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        sum,c = 0,1\\n        s = str(n)\\n        for i in s:\\n            if c % 2 == 0:\\n                sum = sum + ((-1)*int(i))\\n            else:\\n                sum = sum + int(i)\\n            c+=1\\n        return sum\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3241263,
                "title": "countering-logic",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        count=0\\n        n=str(n)\\n        for i in range(len(n)):\\n            if i%2==0:\\n                count+=int(n[i])\\n            else:\\n                count-=int(n[i])\\n        return count\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        count=0\\n        n=str(n)\\n        for i in range(len(n)):\\n            if i%2==0:\\n                count+=int(n[i])\\n            else:\\n                count-=int(n[i])\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3172142,
                "title": "beats-100-boom-array-without-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nwe are asked to calculate sum of digits with alternate + and - sign. if we carefully observe, we see at even index we have + and at odd index we have -. **so we will use the number as an array without  declaring array.**\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. first of all, we have to extracts digits from n one by one. we starts extracting from beginning.\\n2. for that, set count = 1 and multiply it by 10 untill n becomes 0. count will have zero\\'s equal to number of digits in num.\\n---\\n**for example** -  \\n1. **num = 521. count will be 1000.**\\n2. **num = 40 , count = 100.\\n but still we can extract n\\'s first digit. for that simply divide count by 10.**\\n---\\n3. run a loop from i =0 till n > 0.\\n4. if i is even add the digit to sum else subtract it.\\n\\n **extraction of digits**\\n r = num / count;\\n**updatation**\\nnum =  num % count;\\n**moving to next digit**\\ncount = count/10;\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int num) {\\n        long long int count  = 1, n = num;\\n        if(n==0)\\n        return 0;\\n// see point 1,2 in approach.\\n        while(n>0)\\n        {\\n            count= count*10;\\n            n=n/10;\\n        }\\n// see point 3,4 in approach\\n        count= count/10;\\n        int sum = 0;\\n        for(int i = 0; num > 0; i++)\\n        {\\n            int r = num / count;\\n            if(i % 2 == 0)\\n            sum = sum + r;\\n            else\\n            sum = sum - r;\\n\\n            num = num % count;\\n            count = count / 10;\\n        }\\n        \\n        return sum;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int num) {\\n        long long int count  = 1, n = num;\\n        if(n==0)\\n        return 0;\\n// see point 1,2 in approach.\\n        while(n>0)\\n        {\\n            count= count*10;\\n            n=n/10;\\n        }\\n// see point 3,4 in approach\\n        count= count/10;\\n        int sum = 0;\\n        for(int i = 0; num > 0; i++)\\n        {\\n            int r = num / count;\\n            if(i % 2 == 0)\\n            sum = sum + r;\\n            else\\n            sum = sum - r;\\n\\n            num = num % count;\\n            count = count / 10;\\n        }\\n        \\n        return sum;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3095302,
                "title": "javascript-js",
                "content": "```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar alternateDigitSum = function (n) {\\n  return n\\n    .toString()\\n    .split(\"\")\\n    .map((x, i) => (i % 2 === 0 ? +x : -x))\\n    .reduce((a, b) => a + b);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar alternateDigitSum = function (n) {\\n  return n\\n    .toString()\\n    .split(\"\")\\n    .map((x, i) => (i % 2 === 0 ? +x : -x))\\n    .reduce((a, b) => a + b);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3093915,
                "title": "simple-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        s=0\\n        for i in range(len(str(n))):\\n            if(i%2==0):\\n                s+=int(str(n)[i])\\n            else:\\n                s-=int(str(n)[i])\\n        return s\\n                       \\n            \\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        s=0\\n        for i in range(len(str(n))):\\n            if(i%2==0):\\n                s+=int(str(n)[i])\\n            else:\\n                s-=int(str(n)[i])\\n        return s\\n                       \\n            \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3087001,
                "title": "c-easy-to-understand-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nStore the values of n in form of array. Than take sum of values at even indices and subtract odd indices.\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int> v;\\n        int ans=0;\\n        //storing n in vector v\\n        while(n>0)\\n        {\\n            v.push_back(n%10);\\n            n=n/10;\\n        }\\n        reverse(v.begin(),v.end());\\n        //adding values at even indices and subtracting at odd indices.\\n        for(int i=0; i<v.size();i++)\\n        {\\n            if(i%2==0)\\n                ans+=v[i];\\n            else\\n                ans-=v[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int> v;\\n        int ans=0;\\n        //storing n in vector v\\n        while(n>0)\\n        {\\n            v.push_back(n%10);\\n            n=n/10;\\n        }\\n        reverse(v.begin(),v.end());\\n        //adding values at even indices and subtracting at odd indices.\\n        for(int i=0; i<v.size();i++)\\n        {\\n            if(i%2==0)\\n                ans+=v[i];\\n            else\\n                ans-=v[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3086849,
                "title": "golang-0-ms-1-9-mb",
                "content": "```\\nfunc alternateDigitSum(n int) int {\\n\\tvar result int\\n\\tfor ; n != 0; n /= 10 {\\n\\t\\tresult = n%10 - result\\n\\t}\\n\\treturn result\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc alternateDigitSum(n int) int {\\n\\tvar result int\\n\\tfor ; n != 0; n /= 10 {\\n\\t\\tresult = n%10 - result\\n\\t}\\n\\treturn result\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3084065,
                "title": "c-easy-to-understand-explanation-with-comments",
                "content": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int> v;\\n        while (n > 0) {\\n            v.push_back(n % 10); n /= 10; // store all the digit in an array. \\n        }\\n        // digits will be stored in reverse order in the array, because each time we have inserted the last digit\\n        // so we have to reverse the array first\\n        reverse(v.begin(), v.end());\\n        int res = 0;\\n        for (int i = 0; i < v.size(); i ++) \\n        {\\n            if(i%2 == 0) res += v[i]; // first index we have to consider positive, so at every alternating position, we are adding the digit and subtracting the digit.\\n            else res -= v[i];\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int> v;\\n        while (n > 0) {\\n            v.push_back(n % 10); n /= 10; // store all the digit in an array. \\n        }\\n        // digits will be stored in reverse order in the array, because each time we have inserted the last digit\\n        // so we have to reverse the array first\\n        reverse(v.begin(), v.end());\\n        int res = 0;\\n        for (int i = 0; i < v.size(); i ++) \\n        {\\n            if(i%2 == 0) res += v[i]; // first index we have to consider positive, so at every alternating position, we are adding the digit and subtracting the digit.\\n            else res -= v[i];\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083938,
                "title": "short-concise-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        string s = to_string(n);\\n        int p = s.size() % 2 ? 1 : 0, ans = 0;\\n        \\n        while(n) {\\n            ans += p? +n % 10 : -n % 10;\\n            n /= 10;\\n            p = !p;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        string s = to_string(n);\\n        int p = s.size() % 2 ? 1 : 0, ans = 0;\\n        \\n        while(n) {\\n            ans += p? +n % 10 : -n % 10;\\n            n /= 10;\\n            p = !p;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083816,
                "title": "java-solution-t-c-o-n-sc-o-n-sc-o-1",
                "content": "Method-1:Without Using Extra Space:\\nTime Complexity:O(N).\\nSpace Complexity:O(1).\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        String s=Integer.toString(n);\\n        // char ch[]=s.toCharArray();\\n        int res=0,r1=0,r2=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char c=s.charAt(i);\\n            if(i%2==0)\\n            {\\n                r1=r1+(c-\\'0\\');\\n            }\\n            else if(i%2!=0)\\n            {\\n                r2=r2-(c-\\'0\\');\\n            }\\n        }\\n        res=r1+r2;\\n        return res;\\n    }\\n}\\n```\\nMethod-2:Using Extra Space.\\nTime Complexity:O(N).\\nSpace Complexity:O(N).\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        String s=Integer.toString(n);\\n        char ch[]=s.toCharArray();\\n        int res=0,r1=0,r2=0;\\n        for(int i=0;i<ch.length;i++)\\n        {\\n            char c=ch[i];\\n            if(i%2==0)\\n            {\\n                r1=r1+(c-\\'0\\');\\n            }\\n            else if(i%2!=0)\\n            {\\n                r2=r2-(c-\\'0\\');\\n            }\\n        }\\n        res=r1+r2;\\n        return res;\\n    }\\n}**\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        String s=Integer.toString(n);\\n        // char ch[]=s.toCharArray();\\n        int res=0,r1=0,r2=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char c=s.charAt(i);\\n            if(i%2==0)\\n            {\\n                r1=r1+(c-\\'0\\');\\n            }\\n            else if(i%2!=0)\\n            {\\n                r2=r2-(c-\\'0\\');\\n            }\\n        }\\n        res=r1+r2;\\n        return res;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        String s=Integer.toString(n);\\n        char ch[]=s.toCharArray();\\n        int res=0,r1=0,r2=0;\\n        for(int i=0;i<ch.length;i++)\\n        {\\n            char c=ch[i];\\n            if(i%2==0)\\n            {\\n                r1=r1+(c-\\'0\\');\\n            }\\n            else if(i%2!=0)\\n            {\\n                r2=r2-(c-\\'0\\');\\n            }\\n        }\\n        res=r1+r2;\\n        return res;\\n    }\\n}**\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3894765,
                "title": "simple-approach-wit-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        result=str(n)\\n        sum=0\\n        for i in range(len(result)):\\n            if i%2 ==0:\\n                sum=sum+int(result[i])\\n            else:  \\n                sum=sum-int(result[i])  \\n        return sum        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        result=str(n)\\n        sum=0\\n        for i in range(len(result)):\\n            if i%2 ==0:\\n                sum=sum+int(result[i])\\n            else:  \\n                sum=sum-int(result[i])  \\n        return sum        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3894762,
                "title": "easy-and-in-less-time-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        result=str(n)\\n        ans=0\\n        for i in range(len(result)):\\n            if i%2==0:\\n                ans=ans+int(result[i])\\n            else:\\n                ans=ans-int(result[i])\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        result=str(n)\\n        ans=0\\n        for i in range(len(result)):\\n            if i%2==0:\\n                ans=ans+int(result[i])\\n            else:\\n                ans=ans-int(result[i])\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3894761,
                "title": "easy-solution-with-best-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n      res=str(n)\\n      ans=0\\n      for i in range(len(res)):\\n          if i%2==0:\\n              ans=ans+int(res[i])\\n          else:\\n             ans=ans-int(res[i])\\n      return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n      res=str(n)\\n      ans=0\\n      for i in range(len(res)):\\n          if i%2==0:\\n              ans=ans+int(res[i])\\n          else:\\n             ans=ans-int(res[i])\\n      return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3887598,
                "title": "simple-approach-cpp",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int> res;\\n        int k=n;\\n        while(k){\\n            res.push_back(k%10);\\n            k=k/10;\\n        }\\n    int sze=res.size();  \\n    int l=1;\\n    int sum=0;  \\n for(int i=sze-1; i>=0; i--){\\nsum+=res[i]*l;\\nl=l*(-1);\\n }\\n return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int> res;\\n        int k=n;\\n        while(k){\\n            res.push_back(k%10);\\n            k=k/10;\\n        }\\n    int sze=res.size();  \\n    int l=1;\\n    int sum=0;  \\n for(int i=sze-1; i>=0; i--){\\nsum+=res[i]*l;\\nl=l*(-1);\\n }\\n return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3879725,
                "title": "python-easy-solution-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        sm_e=0\\n        sm_o=0\\n        sn=str(n)\\n        for i in range(len(sn)):\\n            if i&1==0:\\n                sm_e+=int(sn[i])\\n            else:\\n                sm_o+=int(sn[i])\\n        return sm_e-sm_o\\n            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        sm_e=0\\n        sm_o=0\\n        sn=str(n)\\n        for i in range(len(sn)):\\n            if i&1==0:\\n                sm_e+=int(sn[i])\\n            else:\\n                sm_o+=int(sn[i])\\n        return sm_e-sm_o\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3745653,
                "title": "easy-solution-using-basic-maths-of-separation-of-digits-from-number",
                "content": "# Approach\\nApproach is using Basic maths in which we separate the digits. Then used vector to store all the digits. The elements or digits stored in vector are in the opposite form like 10 so in vector it will not be saved as 1,0 but 0,1. Now if the vector size is even then even indices elements must be negative. And if vector size is odd then odd indices digits or elements will be negative.\\n\\n**Note: That digits will be store in opposite order.**\\n\\n*For eg-1:* 10 => 0,1 => indices 0,2,4.... so on will be negative => So it becomes -0,1 => (-0)+(+1) = 1\\n\\n*For eg-2:* 521 => 1,2,5 (opposite form of digits in vector) => The vector size is odd => indices 1,3,5.... so on will be negative => So it becomes (+1)+(-2)+(+5) = 1-2+5 = -1+5 = 4\\n\\nAt the end of for loop in each iteration we are updating sum of elements and then returning it.\\n\\n# Complexity\\n- Time complexity:\\nAs loops are used (NOT NESTED) \\n1. One loop for separting and putting digits in vector using .push_back() => O(n)\\n2. Second loop for iteration through vector simultaneously checking the size of vector for even or odd and respectively converting even or odd indices to negative. => O(n)\\n\\nFinally updating the sum of elements in vector for each iteration.\\n\\nSo time complexity is O(n+n) = O(2n) => O(n)\\n\\n- Space complexity:\\nAs we are using a vector to store the digits or elements and finding sum so same complexity is O(n).\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int> vec;\\n        while(n!=0){\\n            int x=n%10;\\n            vec.push_back(x);\\n            n=n/10;\\n        }\\n        int sum=0;\\n        for(int i=0;i<vec.size();i++){\\n            if((vec.size())%2==0){\\n                if(i%2==0){\\n                    vec[i]=-vec[i];\\n                }\\n            }\\n            else if((vec.size())%2!=0){\\n                if(i%2!=0){\\n                    vec[i]=-vec[i];\\n                }\\n            }\\n            sum+=vec[i];\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int> vec;\\n        while(n!=0){\\n            int x=n%10;\\n            vec.push_back(x);\\n            n=n/10;\\n        }\\n        int sum=0;\\n        for(int i=0;i<vec.size();i++){\\n            if((vec.size())%2==0){\\n                if(i%2==0){\\n                    vec[i]=-vec[i];\\n                }\\n            }\\n            else if((vec.size())%2!=0){\\n                if(i%2!=0){\\n                    vec[i]=-vec[i];\\n                }\\n            }\\n            sum+=vec[i];\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3647187,
                "title": "python-simple-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        tot=0\\n        n=str(n)\\n        for i in range(len(n)):\\n            if i%2==0:\\n                tot+=int(n[i])\\n            else:\\n                tot-=int(n[i])\\n        return tot\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        tot=0\\n        n=str(n)\\n        for i in range(len(n)):\\n            if i%2==0:\\n                tot+=int(n[i])\\n            else:\\n                tot-=int(n[i])\\n        return tot\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3550836,
                "title": "simplest-efficient-c-code-time-o-logn-space-o-1",
                "content": "# Intuition\\nThe given code aims to calculate the alternate digit sum of an integer. The alternate digit sum is the sum of digits at odd positions minus the sum of digits at even positions in the number.\\n\\n# Approach\\nThe approach taken in the code involves the following steps:\\n\\n1. Initialize variables count, n1, and sum to 0. n1 is a copy of the input number n, count keeps track of the number of digits in n, and sum stores the alternate digit sum.\\n2. In the first while loop, the code counts the number of digits in n by dividing n1 by 10 until it becomes 0. This is done to determine if the number of digits is odd or even.\\n3. If the count of digits is odd (i.e., count % 2 != 0), the code multiplies n by -1. This step ensures that negative numbers are handled correctly in the subsequent calculations.\\n4. In the second while loop, the code calculates the alternate digit sum. It repeatedly divides n by 10, takes the remainder, and adds it to sum. The sign of n is flipped with each iteration using n *= -1. This process continues until n becomes 0.\\n5. Finally, the computed sum is returned as the result.\\n\\n# Complexity\\n- Time complexity: The code uses two while loops that iterate over the digits of n. The first while loop counts the number of digits, which takes O(log n) iterations. The second while loop calculates the alternate digit sum, which also takes O(log n) iterations. Therefore, the overall time complexity is $O(log n)$.\\n\\n- Space complexity: The code uses a constant amount of additional space for the variables count, n1, and sum. Hence, the space complexity is $O(1)$.\\n\\n# Code\\n```\\nint alternateDigitSum(int n)\\n{\\n    int count = 0,n1=n,sum=0;\\n    while(n1>0)\\n    {\\n        n1/=10;\\n        count++;\\n    }\\n    if(count%2!=0)\\n    n *= (-1);\\n    while(n!=0)\\n    {\\n        n*=(-1);\\n        sum+=(n%10);\\n        n/=10;\\n    }\\n    return sum;\\n}\\n\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint alternateDigitSum(int n)\\n{\\n    int count = 0,n1=n,sum=0;\\n    while(n1>0)\\n    {\\n        n1/=10;\\n        count++;\\n    }\\n    if(count%2!=0)\\n    n *= (-1);\\n    while(n!=0)\\n    {\\n        n*=(-1);\\n        sum+=(n%10);\\n        n/=10;\\n    }\\n    return sum;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3522386,
                "title": "beginners-solution",
                "content": "\\n\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        String s= \"\"+n;\\n        \\n        int total=0;\\n        for(int i=0;i<s.length();i++){\\n            if(i%2==0) total+= s.charAt(i)-\\'0\\';\\n            else total-=s.charAt(i)-\\'0\\';\\n        }\\n\\n        return total;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        String s= \"\"+n;\\n        \\n        int total=0;\\n        for(int i=0;i<s.length();i++){\\n            if(i%2==0) total+= s.charAt(i)-\\'0\\';\\n            else total-=s.charAt(i)-\\'0\\';\\n        }\\n\\n        return total;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3444619,
                "title": "java-fastest-runtime-easy-and-elegant-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        String ans  = String.valueOf(n);\\n\\t\\tint sum = 0;\\n\\t\\tfor (int i = 0; i < ans.length(); i++) {\\n\\t\\t\\tif(i%2 == 0) {\\n\\t\\t\\t\\tsum = sum + Integer.parseInt(ans.charAt(i)+\"\");\\n\\t\\t\\t}else {\\n\\t\\t\\t\\tsum = sum - Integer.parseInt(ans.charAt(i)+\"\");\\n\\t\\t\\t}\\n\\t\\t  \\n\\t\\t}\\n\\t\\t// System.out.println(\"MY ans :\"+sum);\\n\\t\\treturn sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        String ans  = String.valueOf(n);\\n\\t\\tint sum = 0;\\n\\t\\tfor (int i = 0; i < ans.length(); i++) {\\n\\t\\t\\tif(i%2 == 0) {\\n\\t\\t\\t\\tsum = sum + Integer.parseInt(ans.charAt(i)+\"\");\\n\\t\\t\\t}else {\\n\\t\\t\\t\\tsum = sum - Integer.parseInt(ans.charAt(i)+\"\");\\n\\t\\t\\t}\\n\\t\\t  \\n\\t\\t}\\n\\t\\t// System.out.println(\"MY ans :\"+sum);\\n\\t\\treturn sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3391826,
                "title": "simple-c-code-that-beats-100",
                "content": "\\n# Code\\n```\\nint alternateDigitSum(int n)\\n{\\n   int s = 0, l=log10(n)+1;\\n   int a[l];\\n   for(int i = l-1;i >= 0;i--)\\n   {\\n    a[i]= n%10;\\n    n/=10; \\n   }\\n   for(int i =0; i < l;i++)\\n   {\\n       if(i%2==0){s+=a[i];}\\n       else{s-=a[i];}\\n   }\\n   return s;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math",
                    "Counting",
                    "Iterator"
                ],
                "code": "```\\nint alternateDigitSum(int n)\\n{\\n   int s = 0, l=log10(n)+1;\\n   int a[l];\\n   for(int i = l-1;i >= 0;i--)\\n   {\\n    a[i]= n%10;\\n    n/=10; \\n   }\\n   for(int i =0; i < l;i++)\\n   {\\n       if(i%2==0){s+=a[i];}\\n       else{s-=a[i];}\\n   }\\n   return s;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3352079,
                "title": "python-pure-math-o-1-space-o-log-n-time-without-any-string-or-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nDon\\'t use strings, use math!\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n * It doesn\\'t matter from right to left or vice versa to add and subtract digits.\\n* Adjacent digits have opposite signs.\\n* There\\'re two sums of digits with odd and even places.\\n* The result is the difference between the sums.\\n* The sign of the result depends on parity of the number length. \\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(log(N))$$: For place-value notation with radix 10, the length of a number $$N$$ is $$log(N) + 1$$.\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$: Only two variables are needed.\\n\\n---\\n* You could find some other extraordinary solutions in my [profile](https://leetcode.com/almostmonday/) on the Solutions tab (I don\\'t post obvious or not interesting solutions at all.)\\n* If this was helpful, please upvote so that others can see this solution too.\\n---\\n\\n# Code\\n```\\nclass Solution(object):\\n    def alternateDigitSum(self, n):\\n        res = 0\\n        sign = 1\\n        while n:\\n            res += n % 10 * sign\\n            sign = -sign\\n            n //= 10\\n\\n        return res * -sign\\n```",
                "solutionTags": [
                    "Python",
                    "Math"
                ],
                "code": "```\\nclass Solution(object):\\n    def alternateDigitSum(self, n):\\n        res = 0\\n        sign = 1\\n        while n:\\n            res += n % 10 * sign\\n            sign = -sign\\n            n //= 10\\n\\n        return res * -sign\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3304311,
                "title": "simple-solution-o-n",
                "content": "# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n\\n           int sum = 0;\\n           int countDigit = 0;\\n\\n           // Count the number of Digits in the number\\n           int num = n;\\n           while (num > 0) {\\n               \\n               num = num / 10;\\n               countDigit += 1;\\n           }\\n\\n           char sign = \\'+\\';\\n           \\n           // If number of digits are even then sign of first digit will be -ve.\\n           if (countDigit % 2 == 0) {\\n\\n               sign = \\'-\\';\\n\\n           } \\n          \\n           // Calculating the sum\\n           while (n > 0) {\\n\\n               int rem = n % 10;\\n               \\n               if (sign == \\'-\\') {\\n\\n                   sum = sum + rem*(-1);\\n\\n                   sign = \\'+\\';\\n\\n               } else {\\n\\n                   sum = sum + rem;\\n\\n                   sign = \\'-\\';\\n               }\\n               \\n\\n               n = n/10;\\n           }\\n\\n           return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n\\n           int sum = 0;\\n           int countDigit = 0;\\n\\n           // Count the number of Digits in the number\\n           int num = n;\\n           while (num > 0) {\\n               \\n               num = num / 10;\\n               countDigit += 1;\\n           }\\n\\n           char sign = \\'+\\';\\n           \\n           // If number of digits are even then sign of first digit will be -ve.\\n           if (countDigit % 2 == 0) {\\n\\n               sign = \\'-\\';\\n\\n           } \\n          \\n           // Calculating the sum\\n           while (n > 0) {\\n\\n               int rem = n % 10;\\n               \\n               if (sign == \\'-\\') {\\n\\n                   sum = sum + rem*(-1);\\n\\n                   sign = \\'+\\';\\n\\n               } else {\\n\\n                   sum = sum + rem;\\n\\n                   sign = \\'-\\';\\n               }\\n               \\n\\n               n = n/10;\\n           }\\n\\n           return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3304299,
                "title": "simple-java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int sum = 0;\\n        int count = 0;\\n        int m = n;\\n        while(n > 0)\\n        {\\n            count++;\\n            n /= 10;\\n        }\\n        n = m;\\n        char sign = \\'+\\';\\n        if(count % 2 == 0)\\n        {\\n            sign = \\'-\\';\\n        }\\n        \\n        while(n > 0)\\n        {\\n            if(sign == \\'-\\')\\n            {\\n                sum += -1*(n % 10);\\n                sign = \\'+\\';\\n            }\\n            else\\n            {\\n                sum += (n % 10);\\n                sign = \\'-\\';\\n            }\\n            n /= 10;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int sum = 0;\\n        int count = 0;\\n        int m = n;\\n        while(n > 0)\\n        {\\n            count++;\\n            n /= 10;\\n        }\\n        n = m;\\n        char sign = \\'+\\';\\n        if(count % 2 == 0)\\n        {\\n            sign = \\'-\\';\\n        }\\n        \\n        while(n > 0)\\n        {\\n            if(sign == \\'-\\')\\n            {\\n                sum += -1*(n % 10);\\n                sign = \\'+\\';\\n            }\\n            else\\n            {\\n                sum += (n % 10);\\n                sign = \\'-\\';\\n            }\\n            n /= 10;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3282654,
                "title": "easy-c-100-0ms",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int>v;\\n        int ans=0;\\n        while(n>0){\\n            v.push_back(n%10);\\n            n=n/10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0){\\n                ans+=v[i];\\n            }\\n            else{\\n                ans-=v[i];\\n            }\\n        }\\n       return ans; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int>v;\\n        int ans=0;\\n        while(n>0){\\n            v.push_back(n%10);\\n            n=n/10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0){\\n                ans+=v[i];\\n            }\\n            else{\\n                ans-=v[i];\\n            }\\n        }\\n       return ans; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3243248,
                "title": "simple-java-solution-beats-100-in-solution",
                "content": "**Method:**\\n**1**.Calculate the length(count) of the integer using while loop\\n**2**.If count is divisible by 2 , increment dummy variable i;\\nif i is divisible by 2 then rem=n%10 else the remainder is multipiled by -1.\\n**3**.The same approach is followed when the count is not divisible by 2.but if i is divisible by 2 the we multiply the remainder by -1.\\n\\n\\n**Note:***This method is quite simple since I\\'m a beginner I used more variables than required for my understanding!! Hope it helps :)*\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int i=0,sum=0,count=0,rem=0,r=0;\\n        int temp=n;\\n        while(temp>0){\\n           r= temp%10;\\n           temp=temp/10;\\n           count++;        \\n        }\\n        if(count%2==0){\\n        while(n>0){\\n            i++;\\n            if(i%2==0){\\n                rem=n%10;\\n            }\\n            else{\\n                rem=(n%10)*(-1);\\n            }\\n            sum+=rem;\\n            n=n/10;\\n        }\\n        }\\n        else{\\n            while(n>0){\\n                i++;\\n                if(i%2==0){\\n                    rem=(n%10)*(-1);\\n                }\\n                else{\\n                    rem=n%10;\\n                }\\n                sum+=rem;\\n                n=n/10;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int i=0,sum=0,count=0,rem=0,r=0;\\n        int temp=n;\\n        while(temp>0){\\n           r= temp%10;\\n           temp=temp/10;\\n           count++;        \\n        }\\n        if(count%2==0){\\n        while(n>0){\\n            i++;\\n            if(i%2==0){\\n                rem=n%10;\\n            }\\n            else{\\n                rem=(n%10)*(-1);\\n            }\\n            sum+=rem;\\n            n=n/10;\\n        }\\n        }\\n        else{\\n            while(n>0){\\n                i++;\\n                if(i%2==0){\\n                    rem=(n%10)*(-1);\\n                }\\n                else{\\n                    rem=n%10;\\n                }\\n                sum+=rem;\\n                n=n/10;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3224547,
                "title": "java-using-arraylist",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        List<Integer> x=new ArrayList<>();\\n        while(n>0){\\n            x.add(n%10);\\n            n=n/10;\\n        }\\n        Collections.reverse(x);\\n        int ans=0;\\n        int count=0;\\n        for(int i=0;i<x.size();i++){\\n            if(count%2==0){\\n                ans+=x.get(i);\\n            }\\n            else{\\n                ans-=x.get(i);\\n            }\\n            count++;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        List<Integer> x=new ArrayList<>();\\n        while(n>0){\\n            x.add(n%10);\\n            n=n/10;\\n        }\\n        Collections.reverse(x);\\n        int ans=0;\\n        int count=0;\\n        for(int i=0;i<x.size();i++){\\n            if(count%2==0){\\n                ans+=x.get(i);\\n            }\\n            else{\\n                ans-=x.get(i);\\n            }\\n            count++;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3223245,
                "title": "c-solution-beats-100-math-approach",
                "content": "```c\\nint alternateDigitSum(int n){\\n    int sum = 0, countDigits = (int)log10(n) + 1;\\n    bool isNegative = (countDigits % 2 == 0) ? true : false;\\n    while (n != 0){\\n        int digit = n % 10;\\n        n = n / 10;\\n        sum += (isNegative) ? -digit : digit;\\n        isNegative = !isNegative; \\n    }\\n    return sum;\\n}\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```c\\nint alternateDigitSum(int n){\\n    int sum = 0, countDigits = (int)log10(n) + 1;\\n    bool isNegative = (countDigits % 2 == 0) ? true : false;\\n    while (n != 0){\\n        int digit = n % 10;\\n        n = n / 10;\\n        sum += (isNegative) ? -digit : digit;\\n        isNegative = !isNegative; \\n    }\\n    return sum;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3194663,
                "title": "alternating-digit-sum-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int i, j=0, num=0;\\n        string s = to_string(n);\\n        if(s.length()%2==0)\\n            j = 1;\\n        while(n>0)\\n        {\\n            i = n%10;\\n            n = n/10;\\n            if(j%2==0)\\n                num += i;\\n            else\\n                num -= i;\\n            j++;\\n        }\\n        return num;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int i, j=0, num=0;\\n        string s = to_string(n);\\n        if(s.length()%2==0)\\n            j = 1;\\n        while(n>0)\\n        {\\n            i = n%10;\\n            n = n/10;\\n            if(j%2==0)\\n                num += i;\\n            else\\n                num -= i;\\n            j++;\\n        }\\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3190183,
                "title": "100-easy-solution-easy-for-beginners",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n    vector<int>ans,n1,n2;\\n      \\n       while(n)\\n       {\\n           ans.push_back(n%10);\\n           n/=10;  \\n       }\\n       reverse(ans.begin(),ans.end());\\n       for(int i=0;i<ans.size();i++)\\n       {\\n           if(i%2==0)\\n           {\\n\\n               n1.push_back(ans[i]);\\n           }\\n           else\\n           {\\n               n2.push_back(ans[i]);\\n           }\\n       }\\n       int sum1=0,sum2=0;\\n       for(int i=0;i<n1.size();i++)\\n       {\\n           sum1+=n1[i];\\n       }\\n        for(int i=0;i<n2.size();i++)\\n       {\\n           sum2+=n2[i];\\n       }\\n      \\n           return sum1-sum2;\\n       \\n       \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n    vector<int>ans,n1,n2;\\n      \\n       while(n)\\n       {\\n           ans.push_back(n%10);\\n           n/=10;  \\n       }\\n       reverse(ans.begin(),ans.end());\\n       for(int i=0;i<ans.size();i++)\\n       {\\n           if(i%2==0)\\n           {\\n\\n               n1.push_back(ans[i]);\\n           }\\n           else\\n           {\\n               n2.push_back(ans[i]);\\n           }\\n       }\\n       int sum1=0,sum2=0;\\n       for(int i=0;i<n1.size();i++)\\n       {\\n           sum1+=n1[i];\\n       }\\n        for(int i=0;i<n2.size();i++)\\n       {\\n           sum2+=n2[i];\\n       }\\n      \\n           return sum1-sum2;\\n       \\n       \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3168802,
                "title": "simple-c-runtime-0-ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int count=0;\\n        int temp=n;\\n        while(temp>0){\\n            int digit=temp%10;\\n            count=count+1;\\n            temp=temp/10;\\n        }\\n         int sum=0;\\n        if((count%2)!=0){\\n           \\n            int temp2=n;\\n            while(temp2>0){\\n                 int digit2=temp2%10;\\n                 if(count%2!=0){\\n                   sum=sum+digit2;\\n                   count=count-1;\\n                 }else{\\n                   sum=sum-digit2;\\n                   count=count-1;\\n                 }\\n                 temp2=temp2/10;\\n                  \\n            }\\n        }else{\\n              int temp3=n;\\n            while(temp3>0){\\n                 int digit3=temp3%10;\\n                 if(count%2==0){\\n                   sum=sum-digit3;\\n                   count=count-1;\\n                 }else{\\n                   sum=sum+digit3;\\n                   count=count-1;\\n                 }\\n                 temp3=temp3/10;\\n                  \\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int count=0;\\n        int temp=n;\\n        while(temp>0){\\n            int digit=temp%10;\\n            count=count+1;\\n            temp=temp/10;\\n        }\\n         int sum=0;\\n        if((count%2)!=0){\\n           \\n            int temp2=n;\\n            while(temp2>0){\\n                 int digit2=temp2%10;\\n                 if(count%2!=0){\\n                   sum=sum+digit2;\\n                   count=count-1;\\n                 }else{\\n                   sum=sum-digit2;\\n                   count=count-1;\\n                 }\\n                 temp2=temp2/10;\\n                  \\n            }\\n        }else{\\n              int temp3=n;\\n            while(temp3>0){\\n                 int digit3=temp3%10;\\n                 if(count%2==0){\\n                   sum=sum-digit3;\\n                   count=count-1;\\n                 }else{\\n                   sum=sum+digit3;\\n                   count=count-1;\\n                 }\\n                 temp3=temp3/10;\\n                  \\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3162963,
                "title": "java-simple-100-faster-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int sum = 0, count = 0;\\n        List<Integer> list = new ArrayList<>();\\n        while (n > 0) {\\n            list.add(n % 10);\\n            n /= 10;\\n        }\\n        for (int i = list.size() - 1; i >= 0; i--) sum += count++ % 2 == 0 ? list.get(i) : -list.get(i);\\n        \\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int sum = 0, count = 0;\\n        List<Integer> list = new ArrayList<>();\\n        while (n > 0) {\\n            list.add(n % 10);\\n            n /= 10;\\n        }\\n        for (int i = list.size() - 1; i >= 0; i--) sum += count++ % 2 == 0 ? list.get(i) : -list.get(i);\\n        \\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3141124,
                "title": "java-beats-100-explained",
                "content": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        \\n        // reverse the number\\n        int temp =n;\\n        int newNumber=0;\\n        while(temp>0)\\n        {\\n            int mod = temp%10;\\n            newNumber = 10 *newNumber + mod;\\n            temp = temp/10;\\n        }\\n        // now we can get the significant bits earlier and \\n        // flag to keep track of sign to be used \\n        boolean flag = true;\\n        int sum =0;\\n        while(newNumber>0)\\n        {\\n            int mod = newNumber%10;\\n            if(flag)\\n                sum += mod;\\n            else\\n                sum -= mod;\\n            if(flag)\\n            flag = false;\\n            else\\n            flag = true;\\n            newNumber = newNumber/10;\\n        }\\n        \\n        return sum;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int alternateDigitSum(int n) {\\n        \\n        // reverse the number\\n        int temp =n;\\n        int newNumber=0;\\n        while(temp>0)\\n        {\\n            int mod = temp%10;\\n            newNumber = 10 *newNumber + mod;\\n            temp = temp/10;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3136491,
                "title": "beats-96-19-alternating-digit-sum",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        sum=0\\n        num1=0\\n        i=0\\n        while n!=0:\\n            num1=(n%10)+num1*10\\n            n//=10\\n        while num1!=0:\\n            rem=num1%10\\n            if i%2==0:\\n                sum+=rem\\n                i+=1\\n                print(sum)\\n            else:\\n                sum-=rem\\n                i+=1\\n                print(sum)\\n            num1//=10\\n        return sum\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        sum=0\\n        num1=0\\n        i=0\\n        while n!=0:\\n            num1=(n%10)+num1*10\\n            n//=10\\n        while num1!=0:\\n            rem=num1%10\\n            if i%2==0:\\n                sum+=rem\\n                i+=1\\n                print(sum)\\n            else:\\n                sum-=rem\\n                i+=1\\n                print(sum)\\n            num1//=10\\n        return sum\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3107106,
                "title": "explained-and-commented-kotlin-solution",
                "content": "This code defines a Solution class with a single function called alternateDigitSum. The function takes in a single integer argument n and returns an integer.\\n\\nThe function first converts the input integer n to a string so that we can iterate through each digit of the number. It then initializes a variable sum to store the sum of the alternate digits.\\n\\nThe function then iterates through each digit in the string using a for loop. For each digit, it checks if the current digit is at an even index or an odd index using an if-else statement. If the index is even, the digit is added to the sum. If the index is odd, the digit is subtracted from the sum. Finally, the function returns the final sum after the loop has completed.\\n\\n```\\nclass Solution {\\n    // Function to calculate the alternate digit sum of a given number \\'n\\'\\n    fun alternateDigitSum(n: Int): Int {\\n        \\n        // Convert the number to a string to access individual digits\\n        val s = n.toString()\\n        \\n        // Initialize a variable to store the sum\\n        var sum = 0\\n        \\n        // Iterate through each digit in the string\\n        for (i in 0 until s.length) {\\n            \\n            // If the current digit is at an even index, add it to the sum\\n            // If the current digit is at an odd index, subtract it from the sum\\n            sum += if (i % 2 == 0) s[i] - \\'0\\' else (-1 * (s[i] - \\'0\\'))\\n        }\\n        \\n        // Return the final sum\\n        return sum\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    // Function to calculate the alternate digit sum of a given number \\'n\\'\\n    fun alternateDigitSum(n: Int): Int {\\n        \\n        // Convert the number to a string to access individual digits\\n        val s = n.toString()\\n        \\n        // Initialize a variable to store the sum\\n        var sum = 0\\n        \\n        // Iterate through each digit in the string\\n        for (i in 0 until s.length) {\\n            \\n            // If the current digit is at an even index, add it to the sum\\n            // If the current digit is at an odd index, subtract it from the sum\\n            sum += if (i % 2 == 0) s[i] - \\'0\\' else (-1 * (s[i] - \\'0\\'))\\n        }\\n        \\n        // Return the final sum\\n        return sum\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3101055,
                "title": "easy-understandable-solution-beats-100",
                "content": "\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int res=0,v=0;\\n        string s=to_string(n);\\n        for(int i=0;i<s.size();i++){\\n            if(i%2==0){\\n                v=s[i]-\\'0\\';\\n                res+=v;\\n            }\\n            else{\\n                v=s[i]-\\'0\\';\\n                res-=v;\\n            }\\n        }\\n        return res;\\n    }\\n};\\n\\n\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int res=0,v=0;\\n        string s=to_string(n);\\n        for(int i=0;i<s.size();i++){\\n            if(i%2==0){\\n                v=s[i]-\\'0\\';\\n                res+=v;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3096275,
                "title": "python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->First approach was how to take out the first digit(from the left) of the number. For doing this, first I need to know the length of the digit. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. --> Firstly I have converted the number to string form, to get the length of the number. Now, I have got the length of that number. Now, a loop to the length of that number is generated and inside the loop, I have firstly found the first digit (from the left), of the number and now removed that digit from the number. If the digit is on odd place, adding that to the sum else, subtracting it from the sum. Now, I have found the sum and returned the same.  \\n \\n\\n# Code\\n```\\nclass Solution(object):\\n    def alternateDigitSum(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        a=str(n)\\n        le=len(a)\\n        s=0\\n        for i in range(1,le+1):\\n            a=n//10**(le-i)\\n            n=n%10**(le-i)\\n            if i%2==0:\\n                s-=a\\n            else:\\n                s+=a\\n        return s\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def alternateDigitSum(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        a=str(n)\\n        le=len(a)\\n        s=0\\n        for i in range(1,le+1):\\n            a=n//10**(le-i)\\n            n=n%10**(le-i)\\n            if i%2==0:\\n                s-=a\\n            else:\\n                s+=a\\n        return s\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3092592,
                "title": "c-maths-faster-easy-to-understand",
                "content": "* ***Using Math***\\n\\n* ***Time Complexity :- O(log(no. of digits))***\\n\\n* ***Space Complexity :- O(constant)***\\n\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        \\n        // first off all reverse the number\\n        \\n        int rev = 0;\\n        \\n        while(n)\\n        {\\n            rev = rev * 10 + n % 10;\\n            \\n            n = n / 10;\\n        }\\n        \\n        // now find the sum of reversed number according to the given conditions\\n        \\n        int sum = 0;\\n        \\n        int pos = 1;\\n        \\n        while(rev)\\n        {\\n            if(pos % 2 == 1)\\n            {\\n                sum += rev % 10;\\n            }\\n            else\\n            {\\n                sum -= rev % 10;\\n            }\\n            \\n            pos++;\\n            \\n            rev = rev / 10;\\n        }\\n        \\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        \\n        // first off all reverse the number\\n        \\n        int rev = 0;\\n        \\n        while(n)\\n        {\\n            rev = rev * 10 + n % 10;\\n            \\n            n = n / 10;\\n        }\\n        \\n        // now find the sum of reversed number according to the given conditions\\n        \\n        int sum = 0;\\n        \\n        int pos = 1;\\n        \\n        while(rev)\\n        {\\n            if(pos % 2 == 1)\\n            {\\n                sum += rev % 10;\\n            }\\n            else\\n            {\\n                sum -= rev % 10;\\n            }\\n            \\n            pos++;\\n            \\n            rev = rev / 10;\\n        }\\n        \\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3088883,
                "title": "easy-to-understand-c-solution-beats-100-tc-o-n-sc-o-1",
                "content": "# Intuition\\n\\n# Approach\\nI initialized sum to 0. then converted int to string. Then in first for loop I added numbers situated at odd positions to sum.Then in second for loop subtracted numbers situated at even positions from sum. Finally returned sum.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sum=0;\\n        string s=to_string(n);\\n        for(int i=0;i<s.length();i=i+2){\\n            char ch=s[i];\\n            sum+=int(ch)-48;\\n        }\\n        for(int i=1;i<s.length();i=i+2){\\n            char ch=s[i];\\n            sum+=(int(ch)-48)*(-1);\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sum=0;\\n        string s=to_string(n);\\n        for(int i=0;i<s.length();i=i+2){\\n            char ch=s[i];\\n            sum+=int(ch)-48;\\n        }\\n        for(int i=1;i<s.length();i=i+2){\\n            char ch=s[i];\\n            sum+=(int(ch)-48)*(-1);\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3088650,
                "title": "c-easy-approach",
                "content": "Here is my c++ code for this problem.\\n\\n# Complexity\\n- Time complexity:$$O(logn)$$\\n\\n- Space complexity:$$O(logn)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int ans=0;\\n        string s;\\n        while(n){\\n            s+=to_string(n%10);\\n            n/=10;\\n        }\\n        reverse(s.begin(), s.end());\\n        for(int i=0; i<s.size(); i++){\\n            if(i&1){\\n                ans+=(-1)*(s[i]-\\'0\\');\\n            }\\n            else{\\n                ans+=(s[i]-\\'0\\');\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int ans=0;\\n        string s;\\n        while(n){\\n            s+=to_string(n%10);\\n            n/=10;\\n        }\\n        reverse(s.begin(), s.end());\\n        for(int i=0; i<s.size(); i++){\\n            if(i&1){\\n                ans+=(-1)*(s[i]-\\'0\\');\\n            }\\n            else{\\n                ans+=(s[i]-\\'0\\');\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3087242,
                "title": "solution-explained-with-diagram",
                "content": "# Intuition\\n###### What is *Most Significant Digit*?\\nAccording to the site [Datacademia](https://datacadamia.com/data/type/number/significant#:~:text=Definition%20Most%20The%20most%20significant%20digit%20is%20the,least%20significant%20digit%20is%20the%20right-most%20known%20digit.) the formal definition of **Most Significant Digit** is:\\n> The ***most significant digit** is the **left-most nonzero digit** \\n> Where as The least significant digit is the right-most known digit.\\n\\nThus :\\n\\n- `n=25` :  (+2) + (-5)  = -3\\n- `n=521` : (+5) + (-2) + (+1) = 4\\n- `n=1234` : (+1) + (-2) + (+3) + (-4) = -2\\n- `n=886996` : (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0\\n\\n# Approach\\n- Fetch the count of the number of Digits in the given number `n`\\n- We will use the count as indexing for manipulating the power of $$-1$$ to control the sign of the digits\\n![image.png](https://assets.leetcode.com/users/images/ffcc178d-f992-44ca-aef3-47d4b0a0422c_1674409969.6540778.png)\\n\\n- Here digit multiplied by (-1) raised to the power of the index gives the required corresponding sign. *Refer to the above image*\\n- ***By the Problem:*** The Most significant digit will always be multiplied by (-1) raised to the power 0 thus will always be **Positive**.\\n\\n\\n# Complexity\\n- Time complexity: $$O(m)$$ \\n  *where **m** is the number of digits in `n`*\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int sum=0, n1=n, ctr=0;\\n        while(n1>0)\\n        {\\n            n1/=10;\\n            ctr++;\\n        }\\n        while(n>0)\\n        {\\n            int d = n%10;\\n            sum += d*Math.pow(-1, --ctr);\\n            // --ctr gives the index of each digit\\n            n=n/10;            \\n        }\\n        return sum;\\n    }\\n}\\n```\\n##### **Hope it helps \\u2764\\uFE0F\\u2764\\uFE0F**\\n*Please do **Upvote** if you find it useful.*\\n*Also if you have any suggestion or query do comment.*\\n***Thank you.***",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int sum=0, n1=n, ctr=0;\\n        while(n1>0)\\n        {\\n            n1/=10;\\n            ctr++;\\n        }\\n        while(n>0)\\n        {\\n            int d = n%10;\\n            sum += d*Math.pow(-1, --ctr);\\n            // --ctr gives the index of each digit\\n            n=n/10;            \\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3085565,
                "title": "beats-100-simple-c-code-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int> v;\\n        while(n){\\n            v.push_back(n%10);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        int ans=0;\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0)\\n            ans+=v[i];\\n            else ans-=v[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int> v;\\n        while(n){\\n            v.push_back(n%10);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        int ans=0;\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0)\\n            ans+=v[i];\\n            else ans-=v[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084915,
                "title": "find-sum-of-odd-even-indices-easy-to-understand-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sum1 = 0, sum2 = 0, x = 0,y;\\n        x = n, y = 0;\\n        while(x){\\n            y++;\\n            x /= 10;\\n        }\\n        while(y--){\\n            if(y&1){\\n                sum2 += (n%10);\\n            }else{\\n                sum1 += (n%10);\\n            }\\n            n /= 10;\\n            \\n        }\\n        return (sum1-sum2);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sum1 = 0, sum2 = 0, x = 0,y;\\n        x = n, y = 0;\\n        while(x){\\n            y++;\\n            x /= 10;\\n        }\\n        while(y--){\\n            if(y&1){\\n                sum2 += (n%10);\\n            }else{\\n                sum1 += (n%10);\\n            }\\n            n /= 10;\\n            \\n        }\\n        return (sum1-sum2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084768,
                "title": "easy-simple-string-c",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nConvert **int** `n` to **string** `s`.\\nKeep **adding** digit at *even* index and **substract** digit at *odd* index .\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: *O(n)*\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        \\n        int ans=0;\\n        string s=to_string(n);\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(i%2==0)ans+=(s[i]-\\'0\\');\\n            else ans-=(s[i]-\\'0\\');\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        \\n        int ans=0;\\n        string s=to_string(n);\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(i%2==0)ans+=(s[i]-\\'0\\');\\n            else ans-=(s[i]-\\'0\\');\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084705,
                "title": "simple-cpp-datta-bayo",
                "content": "Tricky part is to keep bool value in check else is simple logic.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        long long int sum =0;\\n        bool check=true;\\n        string nums = to_string(n);\\n        for(int i = 0; i <nums.size(); i++) {\\n            if(check) {\\n                sum = sum + (nums[i] - \\'0\\');   check=false;  \\n            } else {\\n                sum=sum - (nums[i] - \\'0\\'); check = true;\\n            }\\n        }     \\n        return sum; \\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        long long int sum =0;\\n        bool check=true;\\n        string nums = to_string(n);\\n        for(int i = 0; i <nums.size(); i++) {\\n            if(check) {\\n                sum = sum + (nums[i] - \\'0\\');   check=false;  \\n            } else {\\n                sum=sum - (nums[i] - \\'0\\'); check = true;\\n            }\\n        }     \\n        return sum; \\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084546,
                "title": "easy-100-fast-c-solution",
                "content": "## Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n## Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int s=1;\\n        int ans=0;\\n        vector<int> v;\\n        while (n>0){\\n            int dig= n%10;\\n            n= n/10;\\n            v.push_back(dig);\\n        }\\n        for (int i= v.size()-1; i>=0; i--){\\n            //cout<<s*v[i]<<endl;\\n            ans+= (s*v[i]);\\n            //s= -1*s;\\n            if (s==1)s=-1;\\n            else s=1;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int s=1;\\n        int ans=0;\\n        vector<int> v;\\n        while (n>0){\\n            int dig= n%10;\\n            n= n/10;\\n            v.push_back(dig);\\n        }\\n        for (int i= v.size()-1; i>=0; i--){\\n            //cout<<s*v[i]<<endl;\\n            ans+= (s*v[i]);\\n            //s= -1*s;\\n            if (s==1)s=-1;\\n            else s=1;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3084494,
                "title": "very-easy-recursion-based-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        bool flag =true;\\n       \\n     return solve(n,0,flag);\\n        \\n        \\n    }\\n    \\n    int solve(int n,int dig,bool &flag)\\n    {\\n        if(n==0)\\n        {\\n            flag =!flag;\\n            return dig;\\n        }\\n        \\n        int ans = solve(n/10,n%10,flag);\\n        \\n        if(flag==true)\\n           {\\n               ans+=dig;\\n           }\\n        else\\n        {\\n            ans-=dig;\\n        }\\n        flag =!flag;\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        bool flag =true;\\n       \\n     return solve(n,0,flag);\\n        \\n        \\n    }\\n    \\n    int solve(int n,int dig,bool &flag)\\n    {\\n        if(n==0)\\n        {\\n            flag =!flag;\\n            return dig;\\n        }\\n        \\n        int ans = solve(n/10,n%10,flag);\\n        \\n        if(flag==true)\\n           {\\n               ans+=dig;\\n           }\\n        else\\n        {\\n            ans-=dig;\\n        }\\n        flag =!flag;\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084443,
                "title": "c-contestsolution-easytounderstand",
                "content": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for Alternating Digit Sum.\\nMemory Usage: 5.9 MB, less than 69.23% of C++ online submissions for Alternating Digit Sum.\\n\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        \\n        int count=0;\\n        int temp=n;\\n        while(temp > 0){\\n            count++;\\n            temp /= 10;\\n        }\\n        \\n        temp = n;\\n        int sum = 0;\\n        int i=0;\\n        \\n            if(count%2 == 0){\\n                while(temp > 0){\\n                int rem=temp%10;\\n                if(i%2 == 0){\\n                    sum += (-(rem));\\n                }\\n                else\\n                    sum += rem;\\n                i++;\\n                temp /=10;\\n            }\\n            }\\n            else{\\n                while(temp > 0){\\n                int rem=temp%10;\\n                if(i%2 == 0){\\n                    sum += rem;\\n                }\\n                else\\n                    sum += (-(rem));\\n                i++;\\n                temp /=10;\\n            }\\n        }\\n        return sum;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        \\n        int count=0;\\n        int temp=n;\\n        while(temp > 0){\\n            count++;\\n            temp /= 10;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3084370,
                "title": "c-use-vector-simple-approach-detailed-explanation",
                "content": "# Approach\\nFirst we extract the digits from the number and push into a vector. \\nAfter that if the size of the vector is odd it simply implies that the number has odd number of digits, then we simply iterate over it,if the index is odd index then we add to the sum by multiplying it -1 else we simply add to the sum.\\nFor the second case i.e we simply reverse the condition.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n- Space complexity: O(n) (as we use a vector as our container)\\n\\n\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sum=0;\\n        vector<int>v;\\n        while(n>0){\\n            int remainder=n%10;\\n            v.push_back(remainder);\\n            n/=10;\\n        }\\n        if(v.size()%2==0){\\n            for(int i=0;i<v.size();i++){\\n                if(i%2==0){\\n                    sum+=(-1)*v[i];\\n                }else{\\n                    sum+=v[i];\\n                }\\n            }\\n        }else{\\n            for(int i=0;i<v.size();i++){\\n                if(i%2!=0){\\n                    sum+=(-1)*v[i];\\n                }else{\\n                    sum+=v[i];\\n                }\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sum=0;\\n        vector<int>v;\\n        while(n>0){\\n            int remainder=n%10;\\n            v.push_back(remainder);\\n            n/=10;\\n        }\\n        if(v.size()%2==0){\\n            for(int i=0;i<v.size();i++){\\n                if(i%2==0){\\n                    sum+=(-1)*v[i];\\n                }else{\\n                    sum+=v[i];\\n                }\\n            }\\n        }else{\\n            for(int i=0;i<v.size();i++){\\n                if(i%2!=0){\\n                    sum+=(-1)*v[i];\\n                }else{\\n                    sum+=v[i];\\n                }\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084322,
                "title": "easy-cpp-solution",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int>vec;\\n        while(n!=0){\\n            int rem=n%10;\\n            vec.push_back(rem);\\n            n/=10;\\n        }\\n        reverse(vec.begin(),vec.end());\\n        for(int i=1;i<vec.size();i=i+2){\\n            vec[i]=-vec[i];\\n        }\\n        int sum=0;\\n        for(int i=0;i<vec.size();i++){\\n            sum+=vec[i];\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int>vec;\\n        while(n!=0){\\n            int rem=n%10;\\n            vec.push_back(rem);\\n            n/=10;\\n        }\\n        reverse(vec.begin(),vec.end());\\n        for(int i=1;i<vec.size();i=i+2){\\n            vec[i]=-vec[i];\\n        }\\n        int sum=0;\\n        for(int i=0;i<vec.size();i++){\\n            sum+=vec[i];\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084242,
                "title": "simple-and-easy-to-understand-solution",
                "content": "```\\ntypedef long long ll;\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int m=n;\\n        int cnt=0;\\n        ll s=0;\\n        while(m!=0)\\n        {\\n            m/=10;\\n            cnt++;\\n        }\\n        if(cnt%2==0)\\n        {\\n            int x=n;\\n            int p=0;\\n            while(x!=0)\\n            {\\n                int r=x%10;\\n                if(p%2==0)\\n                    s-=r;\\n                else\\n                    s+=r;\\n                p++;\\n                x/=10;\\n            }\\n            return s;\\n        }\\n        else\\n        {\\n            int q=0;\\n            while(n!=0)\\n            {\\n                int r=n%10;\\n                if(q%2==0)\\n                    s+=r;\\n                else\\n                    s-=r;\\n                q++;\\n                n/=10;\\n            }\\n            return s;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\ntypedef long long ll;\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int m=n;\\n        int cnt=0;\\n        ll s=0;\\n        while(m!=0)\\n        {\\n            m/=10;\\n            cnt++;\\n        }\\n        if(cnt%2==0)\\n        {\\n            int x=n;\\n            int p=0;\\n            while(x!=0)\\n            {\\n                int r=x%10;\\n                if(p%2==0)\\n                    s-=r;\\n                else\\n                    s+=r;\\n                p++;\\n                x/=10;\\n            }\\n            return s;\\n        }\\n        else\\n        {\\n            int q=0;\\n            while(n!=0)\\n            {\\n                int r=n%10;\\n                if(q%2==0)\\n                    s+=r;\\n                else\\n                    s-=r;\\n                q++;\\n                n/=10;\\n            }\\n            return s;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084175,
                "title": "easy-java-linear-time-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\nO(N)\\n- Space complexity:\\nO(2n)~O(n)\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) \\n    {\\n        Stack<Integer> stack=new Stack<Integer>();\\n        List<Integer> list=new ArrayList();\\n        int sum=0;\\n        while(n>0)\\n        {\\n            int d=n%10;\\n            stack.add(d);\\n            n=n/10;\\n        }\\n        \\n        while(!stack.isEmpty())\\n        {\\n            list.add(stack.pop());    \\n        }\\n        for(int i=1;i<list.size();i+=2) //In Alternate value set -1\\n        {\\n            list.set(i,-list.get(i));\\n        }\\n        for(int i=0;i<list.size();i++)\\n        {\\n            sum+=list.get(i);\\n        }\\n\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) \\n    {\\n        Stack<Integer> stack=new Stack<Integer>();\\n        List<Integer> list=new ArrayList();\\n        int sum=0;\\n        while(n>0)\\n        {\\n            int d=n%10;\\n            stack.add(d);\\n            n=n/10;\\n        }\\n        \\n        while(!stack.isEmpty())\\n        {\\n            list.add(stack.pop());    \\n        }\\n        for(int i=1;i<list.size();i+=2) //In Alternate value set -1\\n        {\\n            list.set(i,-list.get(i));\\n        }\\n        for(int i=0;i<list.size();i++)\\n        {\\n            sum+=list.get(i);\\n        }\\n\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084110,
                "title": "c-100-fast-easy-solution",
                "content": "<!-- # Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach --> -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int>temp;\\n        while(n>0){\\n            int r=n%10;\\n            temp.push_back(r);\\n            n=n/10;\\n        }\\n        int k=temp.size();\\n        int ans=0;\\n        if(k%2==0){\\n            for(int i=k-1; i>=0; i--){\\n                if(i%2==1){\\n                    ans=ans+temp[i];\\n                }\\n                else{\\n                    ans=ans-temp[i];\\n                }\\n            }\\n        }\\n        else{\\n            for(int i=k-1; i>=0; i--){\\n                if(i%2==1){\\n                    ans=ans-temp[i];\\n                }\\n                else{\\n                    ans=ans+temp[i];\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int>temp;\\n        while(n>0){\\n            int r=n%10;\\n            temp.push_back(r);\\n            n=n/10;\\n        }\\n        int k=temp.size();\\n        int ans=0;\\n        if(k%2==0){\\n            for(int i=k-1; i>=0; i--){\\n                if(i%2==1){\\n                    ans=ans+temp[i];\\n                }\\n                else{\\n                    ans=ans-temp[i];\\n                }\\n            }\\n        }\\n        else{\\n            for(int i=k-1; i>=0; i--){\\n                if(i%2==1){\\n                    ans=ans-temp[i];\\n                }\\n                else{\\n                    ans=ans+temp[i];\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3084068,
                "title": "c-solution-string-method-simple-and-easy",
                "content": "# Intuition\\nWe have to just take the sum of digits, by multiplying alternate terms with opposite signs. \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        string s=to_string(n);        //number->string\\n        reverse(s.begin(),s.end());   //reverse \\n        n=stoi(s);  \\n        int p=1;    //for product\\n        int su=0;   //for sum\\n        while(n>0){\\n            su=su+(n%10)*p;  //taking sum\\n            p=p*-1;   //changing sign\\n            n=n/10;   \\n        }\\n        return su;    //final ans\\n    }\\n};\\n```\\nPlease upvote \\uD83E\\uDD20\\uD83C\\uDF83",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        string s=to_string(n);        //number->string\\n        reverse(s.begin(),s.end());   //reverse \\n        n=stoi(s);  \\n        int p=1;    //for product\\n        int su=0;   //for sum\\n        while(n>0){\\n            su=su+(n%10)*p;  //taking sum\\n            p=p*-1;   //changing sign\\n            n=n/10;   \\n        }\\n        return su;    //final ans\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083906,
                "title": "python-simple",
                "content": "\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        a=str(n)\\n        ans=0\\n        k=0\\n        for i in a:\\n            if k&1==0:\\n                ans+=int(i)\\n            else:\\n                ans-=int(i)\\n            k+=1\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        a=str(n)\\n        ans=0\\n        k=0\\n        for i in a:\\n            if k&1==0:\\n                ans+=int(i)\\n            else:\\n                ans-=int(i)\\n            k+=1\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083871,
                "title": "java-2-solutions",
                "content": "# Please Upvote :D\\n---\\nReverse the number to get the significant digits first. Any trailing zeros would be autmomatically eliminated.\\n``` java []\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int i = 0, sum = 0;\\n        n = reverse(n);\\n        while (n > 0) {\\n            int rem = n % 10;\\n            sum += (i++ % 2 == 0)? rem : -rem;\\n            n /= 10;\\n        }\\n        \\n        return sum;\\n    }\\n    \\n    private int reverse(int n) {\\n        int rev = 0;\\n        while (n > 0) {\\n            rev = rev * 10 + n % 10;\\n            n /= 10;\\n        }\\n        \\n        return rev;\\n    }\\n}\\n\\n// TC: O(logn)\\n```\\n---\\n###### The same thing can be simulated if we convert the number to a string and add to sum by iterating over it.\\n``` java []\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int sum = 0, i = 0;\\n        for (char c : (n + \"\").toCharArray()) {\\n            int x = c - \\'0\\';\\n            sum += (i++ % 2 == 0)? x : -x;\\n        }\\n\\n        return sum;\\n    }\\n}\\n```\\n*However the first solution is much more efficient.*",
                "solutionTags": [
                    "Java",
                    "Math",
                    "String"
                ],
                "code": "``` java []\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int i = 0, sum = 0;\\n        n = reverse(n);\\n        while (n > 0) {\\n            int rem = n % 10;\\n            sum += (i++ % 2 == 0)? rem : -rem;\\n            n /= 10;\\n        }\\n        \\n        return sum;\\n    }\\n    \\n    private int reverse(int n) {\\n        int rev = 0;\\n        while (n > 0) {\\n            rev = rev * 10 + n % 10;\\n            n /= 10;\\n        }\\n        \\n        return rev;\\n    }\\n}\\n\\n// TC: O(logn)\\n```\n``` java []\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int sum = 0, i = 0;\\n        for (char c : (n + \"\").toCharArray()) {\\n            int x = c - \\'0\\';\\n            sum += (i++ % 2 == 0)? x : -x;\\n        }\\n\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083833,
                "title": "sweetest-code-this-side-of-the-mississippi",
                "content": "# Java\\n\\n## Using a basic loop:\\n\\n```java\\nclass Solution {\\n  public int alternateDigitSum(int n) {\\n    String[] digits = Integer.toString(n).split(\"\");\\n\\n    int res = 0;\\n    for (int i = 0; i < digits.length; ++i) {\\n      res += Integer.parseInt(digits[i]) * (i % 2 == 0 ? 1 : -1);\\n    }\\n    return res;\\n  }\\n}\\n```\\n\\n## Using streams:\\n\\n```java\\nclass Solution {\\n  public int alternateDigitSum(int n) {\\n    String[] digits = Integer.toString(n).split(\"\");\\n    return IntStream.range(0, digits.length)\\n      .map(i -> Integer.parseInt(digits[i]) * (i % 2 == 0 ? 1 : -1))\\n      .sum();\\n  }\\n}\\n```\\n\\n# JavaScript / TypeScript\\n\\n(To get the pure JavaScript version, strip out the TypeScript type annotations.)\\n\\n## As one expression:\\n\\n```typescript\\nfunction alternateDigitSum(n: number): string {\\n  return [...`${n}`]\\n    .map(Number)\\n    .map((d, i) => d * (i % 2 === 0 ? 1 : -1))\\n    .reduce((a, b) => a + b);\\n}\\n```\\n\\n## Using a basic loop:\\n\\n```typescript\\nfunction alternateDigitSum(n: number): string {\\n  const digits = `${n}`;\\n\\n  let res = 0;\\n  for (let i = 0; i < digits.length; ++i) {\\n    res += Number(digits[i]) * (i % 2 === 0 ? 1 : -1);\\n  }\\n  return res;\\n}\\n```\\n\\n# Ruby\\n\\n```ruby\\ndef alternate_digit_sum(n)\\n  digits = n.digits.reverse\\n  digits.each_with_index.map { |d, i| d * (i.even? ? 1 : -1) }.sum\\nend\\n```\\n\\n# Python 3 / Python 2\\n\\n(To get the Python 2 version, strip out the type annotations.)\\n\\n## As one expression, using list comprehensions:\\n\\n```python\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        return sum(\\n            int(d) * (1 if i % 2 == 0 else -1)\\n                for i, d in enumerate(str(n))\\n        )\\n```\\n\\n## Using a basic loop:\\n\\n```python\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        res = 0\\n        for i, d in enumerate(str(n)):\\n            res += int(d) * (1 if i % 2 == 0 else -1)\\n        return res\\n```\\n\\n# C++\\n\\n## Using a basic loop:\\n\\n```c++\\nclass Solution {\\npublic:\\n  int alternateDigitSum(int n) {\\n    auto s = to_string(n);\\n\\n    int res = 0;\\n    for (string::size_type i = 0; i < s.size(); ++i) {\\n      res += (s[i] - \\'0\\') * (i % 2 == 0 ? 1 : -1);\\n    }\\n    return res;\\n  }\\n};\\n```\\n\\n## Using iterators:\\n\\n```c++\\nclass Solution {\\npublic:\\n  int alternateDigitSum(int n) {\\n    auto s = to_string(n);\\n\\n    int res = 0;\\n    int index = 0;\\n    for_each(s.cbegin(), s.cend(), [&index, &res](const char &d) {\\n      res += (d - \\'0\\') * (index++ % 2 == 0 ? 1 : -1);\\n    });\\n    return res;\\n  }\\n};\\n```\\n\\n# C\\n\\n```c\\nint alternateDigitSum(int n) {\\n  // Reserve a buffer of size one more than what\\'s needed for the maximum input.\\n  char digits[11];\\n  sprintf(digits, \"%d\", n);\\n\\n  int res = 0;\\n  for (int i = 0; digits[i]; ++i) {\\n    res += (digits[i] - \\'0\\') * (i % 2 == 0 ? 1 : -1);\\n  }\\n  return res;\\n}\\n```\\n",
                "solutionTags": [
                    "Java",
                    "Python3",
                    "C",
                    "JavaScript",
                    "Ruby"
                ],
                "code": "```java\\nclass Solution {\\n  public int alternateDigitSum(int n) {\\n    String[] digits = Integer.toString(n).split(\"\");\\n\\n    int res = 0;\\n    for (int i = 0; i < digits.length; ++i) {\\n      res += Integer.parseInt(digits[i]) * (i % 2 == 0 ? 1 : -1);\\n    }\\n    return res;\\n  }\\n}\\n```\n```java\\nclass Solution {\\n  public int alternateDigitSum(int n) {\\n    String[] digits = Integer.toString(n).split(\"\");\\n    return IntStream.range(0, digits.length)\\n      .map(i -> Integer.parseInt(digits[i]) * (i % 2 == 0 ? 1 : -1))\\n      .sum();\\n  }\\n}\\n```\n```typescript\\nfunction alternateDigitSum(n: number): string {\\n  return [...`${n}`]\\n    .map(Number)\\n    .map((d, i) => d * (i % 2 === 0 ? 1 : -1))\\n    .reduce((a, b) => a + b);\\n}\\n```\n```typescript\\nfunction alternateDigitSum(n: number): string {\\n  const digits = `${n}`;\\n\\n  let res = 0;\\n  for (let i = 0; i < digits.length; ++i) {\\n    res += Number(digits[i]) * (i % 2 === 0 ? 1 : -1);\\n  }\\n  return res;\\n}\\n```\n```ruby\\ndef alternate_digit_sum(n)\\n  digits = n.digits.reverse\\n  digits.each_with_index.map { |d, i| d * (i.even? ? 1 : -1) }.sum\\nend\\n```\n```python\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        return sum(\\n            int(d) * (1 if i % 2 == 0 else -1)\\n                for i, d in enumerate(str(n))\\n        )\\n```\n```python\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        res = 0\\n        for i, d in enumerate(str(n)):\\n            res += int(d) * (1 if i % 2 == 0 else -1)\\n        return res\\n```\n```c++\\nclass Solution {\\npublic:\\n  int alternateDigitSum(int n) {\\n    auto s = to_string(n);\\n\\n    int res = 0;\\n    for (string::size_type i = 0; i < s.size(); ++i) {\\n      res += (s[i] - \\'0\\') * (i % 2 == 0 ? 1 : -1);\\n    }\\n    return res;\\n  }\\n};\\n```\n```c++\\nclass Solution {\\npublic:\\n  int alternateDigitSum(int n) {\\n    auto s = to_string(n);\\n\\n    int res = 0;\\n    int index = 0;\\n    for_each(s.cbegin(), s.cend(), [&index, &res](const char &d) {\\n      res += (d - \\'0\\') * (index++ % 2 == 0 ? 1 : -1);\\n    });\\n    return res;\\n  }\\n};\\n```\n```c\\nint alternateDigitSum(int n) {\\n  // Reserve a buffer of size one more than what\\'s needed for the maximum input.\\n  char digits[11];\\n  sprintf(digits, \"%d\", n);\\n\\n  int res = 0;\\n  for (int i = 0; digits[i]; ++i) {\\n    res += (digits[i] - \\'0\\') * (i % 2 == 0 ? 1 : -1);\\n  }\\n  return res;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083797,
                "title": "c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        string nu = to_string(n);\\n        int res = 0, count = 0;\\n        for(auto &ch: nu) {\\n            int val = ch - \\'0\\';\\n            if(count++ % 2 == 0) res += val;\\n            else res = res - val;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        string nu = to_string(n);\\n        int res = 0, count = 0;\\n        for(auto &ch: nu) {\\n            int val = ch - \\'0\\';\\n            if(count++ % 2 == 0) res += val;\\n            else res = res - val;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083789,
                "title": "very-simple-java-solution",
                "content": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int cnt=0, temp=n;\\n        while(temp>0){\\n            temp /= 10;\\n            cnt++;\\n        }\\n        int sum=0, tc=cnt;\\n        \\n        for(int i=0; i<tc; i++){\\n            sum += ((-Math.pow(-1, cnt)) * (n%10));\\n            n/=10;\\n            cnt--;\\n        }\\n        \\n        return sum;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int alternateDigitSum(int n) {\\n        int cnt=0, temp=n;\\n        while(temp>0){\\n            temp /= 10;\\n            cnt++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3083777,
                "title": "o-n-simple-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int ans = 0, sign = 1; \\n        while (n)sign *= -1,ans += n % 10 * sign, n /= 10; \\n        return ans * sign; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int ans = 0, sign = 1; \\n        while (n)sign *= -1,ans += n % 10 * sign, n /= 10; \\n        return ans * sign; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4099188,
                "title": "kotlin-brute-force-solution-tostring-toint-beats-100-runtime",
                "content": "# Code\\n```\\nclass Solution {\\n    fun alternateDigitSum(n: Int): Int {\\n        val str = n.toString()\\n        var result = 0\\n        var sign = true\\n\\n        for (d in str) {\\n            val dig = d.toString().toInt()\\n            \\n            if (sign == true) {\\n                result = result + dig\\n                sign = false\\n            } else {\\n                result = result - dig\\n                sign = true\\n            }\\n        }\\n\\n        return result\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun alternateDigitSum(n: Int): Int {\\n        val str = n.toString()\\n        var result = 0\\n        var sign = true\\n\\n        for (d in str) {\\n            val dig = d.toString().toInt()\\n            \\n            if (sign == true) {\\n                result = result + dig\\n                sign = false\\n            } else {\\n                result = result - dig\\n                sign = true\\n            }\\n        }\\n\\n        return result\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4098087,
                "title": "one-line-solution",
                "content": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        return sum(int(a)-int(b) for a, b in zip_longest(*[iter(str(n))]*2, fillvalue = 0))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        return sum(int(a)-int(b) for a, b in zip_longest(*[iter(str(n))]*2, fillvalue = 0))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4096680,
                "title": "beats-100-c",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n      vector<int> v;\\n      int res=0;\\n      while(n>0) {\\n         v.push_back(n%10);\\n         n=n/10;\\n      }\\n      reverse(v.begin(),v.end());\\n      for(int i=0; i<v.size();i++) {\\n        if(i%2==0)\\n            res+=v[i];\\n        else\\n            res-=v[i];\\n      }\\n      return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n      vector<int> v;\\n      int res=0;\\n      while(n>0) {\\n         v.push_back(n%10);\\n         n=n/10;\\n      }\\n      reverse(v.begin(),v.end());\\n      for(int i=0; i<v.size();i++) {\\n        if(i%2==0)\\n            res+=v[i];\\n        else\\n            res-=v[i];\\n      }\\n      return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4093024,
                "title": "sum-of-the-alternate-digits",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n    int ans = 0;\\n    int sign = 1;\\n    \\n\\n    for ( ; n >0;n/=10) {\\n      sign *= -1;\\n      ans += sign * n % 10;\\n    }\\n\\n    return sign * ans;\\n  }\\n};\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n    int ans = 0;\\n    int sign = 1;\\n    \\n\\n    for ( ; n >0;n/=10) {\\n      sign *= -1;\\n      ans += sign * n % 10;\\n    }\\n\\n    return sign * ans;\\n  }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4093019,
                "title": "sum-of-alternate-numbers",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n    int ans = 0;\\n    int sign = 1;\\n    \\n\\n    for ( ; n >0;n/=10) {\\n      sign *= -1;\\n      ans += sign * n % 10;\\n    }\\n\\n    return sign * ans;\\n  }\\n};\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n    int ans = 0;\\n    int sign = 1;\\n    \\n\\n    for ( ; n >0;n/=10) {\\n      sign *= -1;\\n      ans += sign * n % 10;\\n    }\\n\\n    return sign * ans;\\n  }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4082370,
                "title": "very-easy-approach-for-beginner-easy-understandable-code-ds",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int sum=0;\\n        while(n>0){\\n           String s=Integer.toString(n);\\n            int m=s.length();\\n            int temp=n%10;\\n            if(m%2==0){\\n                sum-=temp;\\n            }\\n            else {\\n                sum+=temp;\\n            }\\n            n/=10;  \\n        }\\n        return sum;  \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int sum=0;\\n        while(n>0){\\n           String s=Integer.toString(n);\\n            int m=s.length();\\n            int temp=n%10;\\n            if(m%2==0){\\n                sum-=temp;\\n            }\\n            else {\\n                sum+=temp;\\n            }\\n            n/=10;  \\n        }\\n        return sum;  \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4082171,
                "title": "beats-100-of-users",
                "content": "\\n# Approach\\nConvert integer to char array. Iterate over array but with integer values of the character. add if i is even or subtract if i is odd.\\n\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int ans = 0;\\n        char[] arr = String.valueOf(n).toCharArray();\\n\\n        for (int i = 0; i < arr.length; i++) {\\n            int digit = arr[i] - \\'0\\'; // Convert the character to its integer value\\n            if (i % 2 == 0) {\\n                ans += digit;\\n            } else {\\n                ans -= digit;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int ans = 0;\\n        char[] arr = String.valueOf(n).toCharArray();\\n\\n        for (int i = 0; i < arr.length; i++) {\\n            int digit = arr[i] - \\'0\\'; // Convert the character to its integer value\\n            if (i % 2 == 0) {\\n                ans += digit;\\n            } else {\\n                ans -= digit;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4077948,
                "title": "beats-100-very-easy-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int>ans;\\n        while(n != 0)\\n        {\\n            ans.push_back(n%10);\\n            n=n/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        int sum=0,sub=0;\\n        for(int i=0;i<ans.size();i++)\\n        {\\n            if(i%2 == 0)\\n                sum=sum+ans[i];\\n            else\\n                sub=sub+ans[i];\\n        }\\n        return (sum-sub);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int>ans;\\n        while(n != 0)\\n        {\\n            ans.push_back(n%10);\\n            n=n/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        int sum=0,sub=0;\\n        for(int i=0;i<ans.size();i++)\\n        {\\n            if(i%2 == 0)\\n                sum=sum+ans[i];\\n            else\\n                sub=sub+ans[i];\\n        }\\n        return (sum-sub);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069202,
                "title": "digit-sum-javascript-simple-and-effective",
                "content": "```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar alternateDigitSum = function(n) {\\n    str = n.toString()\\n    ans = 0\\n\\n    for (let i = 0; i < str.length; i++) {\\n        if (i % 2 == 0)\\n            ans += Number(str[i])\\n        else\\n            ans -= Number(str[i])\\n    }\\n    \\n    return ans\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar alternateDigitSum = function(n) {\\n    str = n.toString()\\n    ans = 0\\n\\n    for (let i = 0; i < str.length; i++) {\\n        if (i % 2 == 0)\\n            ans += Number(str[i])\\n        else\\n            ans -= Number(str[i])\\n    }\\n    \\n    return ans\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4067795,
                "title": "short-and-simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n\\n        int howManyNumbers = log10(n) + 1, ans{};\\n\\n        bool alternate = howManyNumbers % 2;\\n\\n        while(n){\\n\\n            if(alternate) ans += n % 10;\\n            else ans -= n % 10;\\n\\n            alternate = !alternate;\\n            n /= 10;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n\\n        int howManyNumbers = log10(n) + 1, ans{};\\n\\n        bool alternate = howManyNumbers % 2;\\n\\n        while(n){\\n\\n            if(alternate) ans += n % 10;\\n            else ans -= n % 10;\\n\\n            alternate = !alternate;\\n            n /= 10;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4066748,
                "title": "easy-best-c-solution",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity -->\\n<!-- - Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int> v;\\n        int ans=0;\\n        while(n > 0)\\n        {\\n            v.push_back(n % 10);\\n            n = n / 10;\\n        }\\n        reverse(v.begin(), v.end());\\n        for(int i = 0; i < v.size(); i++)\\n        {\\n            if(i % 2 == 0)\\n                ans += v[i];\\n            else\\n                ans -= v[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int> v;\\n        int ans=0;\\n        while(n > 0)\\n        {\\n            v.push_back(n % 10);\\n            n = n / 10;\\n        }\\n        reverse(v.begin(), v.end());\\n        for(int i = 0; i < v.size(); i++)\\n        {\\n            if(i % 2 == 0)\\n                ans += v[i];\\n            else\\n                ans -= v[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4059075,
                "title": "why-it-is-more-productive",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public static void main(String[] args) {\\n        System.out.println(alternateDigitSum(886996));\\n    }\\n    public static int alternateDigitSum(int n) {\\n        int sum = 0;\\n        String number = String.valueOf(n);\\n        for (int i = 0; i < number.length(); i++) {\\n            if (i % 2 == 0) {\\n                sum += Math.abs(Character.getNumericValue(number.charAt(i)));\\n            } else {\\n                sum += (Math.abs(Character.getNumericValue(number.charAt(i))) * -1);\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public static void main(String[] args) {\\n        System.out.println(alternateDigitSum(886996));\\n    }\\n    public static int alternateDigitSum(int n) {\\n        int sum = 0;\\n        String number = String.valueOf(n);\\n        for (int i = 0; i < number.length(); i++) {\\n            if (i % 2 == 0) {\\n                sum += Math.abs(Character.getNumericValue(number.charAt(i)));\\n            } else {\\n                sum += (Math.abs(Character.getNumericValue(number.charAt(i))) * -1);\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4056515,
                "title": "simple-stringify-way",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(1) (actually O(length(n)) that is constant)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimpl Solution {\\n    pub fn alternate_digit_sum(n: i32) -> i32 {\\n        n\\n        .to_string()\\n        .chars()\\n        .map(|x| x as i32 - 48)\\n        .enumerate()\\n        .fold(0, |acc, (i, x)| acc + if i & 0b1 == 0 {x} else {-x})\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "String"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn alternate_digit_sum(n: i32) -> i32 {\\n        n\\n        .to_string()\\n        .chars()\\n        .map(|x| x as i32 - 48)\\n        .enumerate()\\n        .fold(0, |acc, (i, x)| acc + if i & 0b1 == 0 {x} else {-x})\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4053246,
                "title": "c-for-fun-concise-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int ans = 0, i = 0;\\n        for (; n; n /= 10) \\n            ans += i++ % 2 ? n % 10 : -(n % 10);\\n        return ans * (i % 2 ? -1 : 1);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int ans = 0, i = 0;\\n        for (; n; n /= 10) \\n            ans += i++ % 2 ? n % 10 : -(n % 10);\\n        return ans * (i % 2 ? -1 : 1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4046668,
                "title": "easy-python-code-beginner-level",
                "content": "# Code\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        n = str(n)\\n        sum = 0\\n        for i in range(len(n)):\\n            digit = int(n[i])\\n            if i % 2 == 0:\\n                sum = sum + digit\\n            else:\\n                sum = sum - digit\\n        return sum\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        n = str(n)\\n        sum = 0\\n        for i in range(len(n)):\\n            digit = int(n[i])\\n            if i % 2 == 0:\\n                sum = sum + digit\\n            else:\\n                sum = sum - digit\\n        return sum\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4042834,
                "title": "weird-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int AlternateDigitSum(int n) {\\n        int odd_sum=0,even_sum=0,count=1,rem;\\n        while(n>0)\\n        {\\n            rem=n%10;\\n            if(count%2==0)\\n            {\\n                odd_sum+=rem;\\n                even_sum+=(-rem);\\n            }else{\\n                odd_sum+=(-rem);\\n                even_sum+=rem;\\n            }\\n            count+=1;\\n            n/=10;\\n        }\\n        if(count%2==0)\\n        {\\n            return even_sum;\\n        }else{\\n            return odd_sum;\\n        }\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int AlternateDigitSum(int n) {\\n        int odd_sum=0,even_sum=0,count=1,rem;\\n        while(n>0)\\n        {\\n            rem=n%10;\\n            if(count%2==0)\\n            {\\n                odd_sum+=rem;\\n                even_sum+=(-rem);\\n            }else{\\n                odd_sum+=(-rem);\\n                even_sum+=rem;\\n            }\\n            count+=1;\\n            n/=10;\\n        }\\n        if(count%2==0)\\n        {\\n            return even_sum;\\n        }else{\\n            return odd_sum;\\n        }\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4032349,
                "title": "easy-for-understanding",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n       std::string numStr = std::to_string(n);\\n    int sum = 0;\\n    int sign = 1;  // Initialize sign as positive\\n\\n    for (char digitChar : numStr) {\\n        int digit = digitChar - \\'0\\';  // Convert character to integer\\n        sum += sign * digit;  // Add the digit with its corresponding sign\\n        sign = -sign;  // Toggle the sign for the next digit\\n    }\\n\\n    return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n       std::string numStr = std::to_string(n);\\n    int sum = 0;\\n    int sign = 1;  // Initialize sign as positive\\n\\n    for (char digitChar : numStr) {\\n        int digit = digitChar - \\'0\\';  // Convert character to integer\\n        sum += sign * digit;  // Add the digit with its corresponding sign\\n        sign = -sign;  // Toggle the sign for the next digit\\n    }\\n\\n    return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4029808,
                "title": "python-simple-solution-math-string",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```python\\nclass Solution:\\n  def alternateDigitSum(self, n: int) -> int:\\n    sign = -1\\n    sum_ = 0\\n    for num_str in str(n):\\n      sign *= -1\\n      sum_ += sign * int(num_str)\\n    return sum_\\n```\\n",
                "solutionTags": [
                    "Python3",
                    "Math",
                    "String"
                ],
                "code": "```python\\nclass Solution:\\n  def alternateDigitSum(self, n: int) -> int:\\n    sign = -1\\n    sum_ = 0\\n    for num_str in str(n):\\n      sign *= -1\\n      sum_ += sign * int(num_str)\\n    return sum_\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4027237,
                "title": "simple-c-solution-o-n-beats-100",
                "content": "\\n# Complexity\\n- Time complexity: O(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int rev_num=0;\\n        while(n>0){\\n            rev_num=(rev_num*10)+(n%10);\\n            n=n/10;\\n        }\\n        n=0;\\n        int sum=0;\\n        while(rev_num>0){\\n            if(n==0){\\n                sum+=rev_num%10;\\n                rev_num=rev_num/10;\\n                n=1;\\n            }\\n            else{\\n                sum-=rev_num%10;\\n                rev_num=rev_num/10;\\n                n=0;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int rev_num=0;\\n        while(n>0){\\n            rev_num=(rev_num*10)+(n%10);\\n            n=n/10;\\n        }\\n        n=0;\\n        int sum=0;\\n        while(rev_num>0){\\n            if(n==0){\\n                sum+=rev_num%10;\\n                rev_num=rev_num/10;\\n                n=1;\\n            }\\n            else{\\n                sum-=rev_num%10;\\n                rev_num=rev_num/10;\\n                n=0;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4023390,
                "title": "c-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sum=0;\\n        vector<int> v;\\n        while(n!=0){\\n            v.push_back(n%10);\\n            n=n/10;\\n        }\\n        for(int i=v.size()-1;i>=0;i=i-2){\\n            sum=sum+v[i];\\n        }\\n         for(int i=v.size()-2;i>=0;i=i-2){\\n            sum=sum-v[i];\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sum=0;\\n        vector<int> v;\\n        while(n!=0){\\n            v.push_back(n%10);\\n            n=n/10;\\n        }\\n        for(int i=v.size()-1;i>=0;i=i-2){\\n            sum=sum+v[i];\\n        }\\n         for(int i=v.size()-2;i>=0;i=i-2){\\n            sum=sum-v[i];\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4023226,
                "title": "c-beats-100-00",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int ans=0;\\n        bool i;\\n        if(to_string(n).length()%2==0)\\n        {\\n           i = false; \\n        }   \\n        else {\\n            i= true;\\n        }    \\n        while(n>0)\\n        {\\n            if(i){\\n                ans +=n%10;\\n                i= false;\\n            }\\n            else\\n            {\\n                ans -=n%10;\\n                 i= true;\\n            }\\n            n/=10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int ans=0;\\n        bool i;\\n        if(to_string(n).length()%2==0)\\n        {\\n           i = false; \\n        }   \\n        else {\\n            i= true;\\n        }    \\n        while(n>0)\\n        {\\n            if(i){\\n                ans +=n%10;\\n                i= false;\\n            }\\n            else\\n            {\\n                ans -=n%10;\\n                 i= true;\\n            }\\n            n/=10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4022639,
                "title": "solution-using-python",
                "content": "# Complexity\\n- Time complexity: 15ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 13.25 MB\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def alternateDigitSum(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        tupe = tuple(str(n))\\n        list1 = [int(item) for item in tupe]\\n        sum1 = 0\\n        num1 = 0\\n        num = 1\\n        count = 0\\n        for i in list1:\\n            if count%2==1:\\n                num1 = -(i)\\n            else:\\n                num1 = i\\n            sum1 = sum1+num1\\n            count += 1\\n        return sum1\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def alternateDigitSum(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        tupe = tuple(str(n))\\n        list1 = [int(item) for item in tupe]\\n        sum1 = 0\\n        num1 = 0\\n        num = 1\\n        count = 0\\n        for i in list1:\\n            if count%2==1:\\n                num1 = -(i)\\n            else:\\n                num1 = i\\n            sum1 = sum1+num1\\n            count += 1\\n        return sum1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4022047,
                "title": "0ms-bets-100-user-of-c-easy-and-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int>ans;\\n        int s=0;\\n        int h=n;\\n        while(h!=0){\\n            int r=h%10;\\n            h/=10;\\n            ans.push_back(r);\\n        }\\n       int l=1;\\n       int v=ans.size();\\n        for(int i=v-1;i>=0;i--){\\n            s+=ans[i]*l;\\n            l=l*(-1);\\n        }\\n        return s;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        vector<int>ans;\\n        int s=0;\\n        int h=n;\\n        while(h!=0){\\n            int r=h%10;\\n            h/=10;\\n            ans.push_back(r);\\n        }\\n       int l=1;\\n       int v=ans.size();\\n        for(int i=v-1;i>=0;i--){\\n            s+=ans[i]*l;\\n            l=l*(-1);\\n        }\\n        return s;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4020404,
                "title": "beat-98-with-very-easy-code-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        n=str(n)\\n        n=n[::-1]\\n        n=int(n)\\n        k=0\\n        s=0\\n        while(n!=0):\\n            if k%2==0:\\n                s+=n%10\\n            else:\\n                s-=n%10\\n            n//=10\\n            k+=1\\n        return s\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        n=str(n)\\n        n=n[::-1]\\n        n=int(n)\\n        k=0\\n        s=0\\n        while(n!=0):\\n            if k%2==0:\\n                s+=n%10\\n            else:\\n                s-=n%10\\n            n//=10\\n            k+=1\\n        return s\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4019861,
                "title": "simple-java-solution-0-ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        String s=Integer.toString(n);\\n        int s1=0;\\n        for(int i=0;i<s.length();i++){\\n            if(i%2==0)\\n                s1+=s.charAt(i)-\\'0\\';\\n            else\\n                s1-=s.charAt(i)-\\'0\\';\\n        }\\n        return s1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        String s=Integer.toString(n);\\n        int s1=0;\\n        for(int i=0;i<s.length();i++){\\n            if(i%2==0)\\n                s1+=s.charAt(i)-\\'0\\';\\n            else\\n                s1-=s.charAt(i)-\\'0\\';\\n        }\\n        return s1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4014927,
                "title": "easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n       string hh=to_string(n);\\n       int sum=0;\\n       for(int i=0;i<hh.size();i++){\\n           if(i%2==0){\\n           sum+=(hh[i]-\\'0\\');\\n           }\\n           else{\\n               sum-=(hh[i]-\\'0\\');\\n           }\\n       }\\n    return sum;   \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n       string hh=to_string(n);\\n       int sum=0;\\n       for(int i=0;i<hh.size();i++){\\n           if(i%2==0){\\n           sum+=(hh[i]-\\'0\\');\\n           }\\n           else{\\n               sum-=(hh[i]-\\'0\\');\\n           }\\n       }\\n    return sum;   \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4014068,
                "title": "easy-python-solution",
                "content": "# Code\\n```\\nclass Solution(object):\\n    def alternateDigitSum(self, n):\\n        newN = str(n)\\n        output = \\'\\'\\n        for i in range(len(newN)):\\n            if i%2 == 0:\\n                output += \\'(+\\'+newN[i] +\\')+\\'\\n            else:\\n                output += \\'(-\\'+newN[i] +\\')+\\'\\n        return eval(output[0:-1])\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def alternateDigitSum(self, n):\\n        newN = str(n)\\n        output = \\'\\'\\n        for i in range(len(newN)):\\n            if i%2 == 0:\\n                output += \\'(+\\'+newN[i] +\\')+\\'\\n            else:\\n                output += \\'(-\\'+newN[i] +\\')+\\'\\n        return eval(output[0:-1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4013866,
                "title": "easy-to-understand-solution-and-self-explanatory",
                "content": "# Intuition\\nThis was a simple math, where first I had to convert it to a digit list. While converting I could get the digits in reverse so I stored in Stack and then pop each digit and add or subtract it according to the alternate variable.\\n\\n# Approach\\nUsed Stack to store the digits in reverse, and pop it as it will come out in correct order.\\n\\n# Complexity\\n- Time complexity:\\nO(n) where n is the number of digits in the number.\\n\\n- Space complexity:\\nO(n) as we are storing the digits in a Stack.\\n\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        var digits = getDigits(n);\\n\\n        int alternate = 0;\\n        int sum = 0;\\n        while (!digits.isEmpty()) {\\n            if (alternate % 2 == 0)\\n                sum += digits.pop();\\n            else\\n                sum -= digits.pop();\\n\\n            alternate++;\\n        }\\n\\n        return sum;\\n    }\\n\\n    private static Stack<Integer> getDigits(int n) {\\n        var digits = new Stack<Integer>();\\n        while(n > 0) {\\n            digits.push(n % 10);\\n            n /= 10;\\n        }\\n\\n        return digits;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        var digits = getDigits(n);\\n\\n        int alternate = 0;\\n        int sum = 0;\\n        while (!digits.isEmpty()) {\\n            if (alternate % 2 == 0)\\n                sum += digits.pop();\\n            else\\n                sum -= digits.pop();\\n\\n            alternate++;\\n        }\\n\\n        return sum;\\n    }\\n\\n    private static Stack<Integer> getDigits(int n) {\\n        var digits = new Stack<Integer>();\\n        while(n > 0) {\\n            digits.push(n % 10);\\n            n /= 10;\\n        }\\n\\n        return digits;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4012916,
                "title": "easy-java-solution-with-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        String s = String.valueOf(n);\\n        int sum=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(i%2==0)\\n            sum+=s.charAt(i)-\\'0\\';\\n            else\\n            sum-=s.charAt(i)-\\'0\\';\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        String s = String.valueOf(n);\\n        int sum=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(i%2==0)\\n            sum+=s.charAt(i)-\\'0\\';\\n            else\\n            sum-=s.charAt(i)-\\'0\\';\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4011846,
                "title": "short-good",
                "content": "# Intuition\\nShort = Good\\n\\n# Code\\n```\\nclass Solution:alternateDigitSum=lambda s,n:eval(\"+%s-%s\"*5%(*f\"{n:0<10}\",))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:alternateDigitSum=lambda s,n:eval(\"+%s-%s\"*5%(*f\"{n:0<10}\",))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4011831,
                "title": "easy-solution-1-line",
                "content": "# Complexity\\n- Time complexity:\\nO(d) -> d is number of digits in n\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        return sum(int(d) * (-1 if i % 2 else 1) for i, d in enumerate(str(n)))\\n```\\n\\nPlease let me know if any improvements can be made.\\n\\nThanks",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        return sum(int(d) * (-1 if i % 2 else 1) for i, d in enumerate(str(n)))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4011620,
                "title": "basic-java-soln-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int i=Integer.toString(n).length(),sum=0;\\n        while(n!=0){\\n            if(i%2==0)\\n                sum-=n%10;\\n            else\\n                sum+=n%10;\\n            n/=10;\\n            i--;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int i=Integer.toString(n).length(),sum=0;\\n        while(n!=0){\\n            if(i%2==0)\\n                sum-=n%10;\\n            else\\n                sum+=n%10;\\n            n/=10;\\n            i--;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4006132,
                "title": "beats-90-very-easy-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        x=0\\n        y=str(n)\\n        i=0\\n        while(i<len(y)):\\n            if i%2==0:\\n                x=x+int(y[i])\\n                i+=1\\n            else:\\n                x=x-int(y[i])\\n                i+=1\\n        return x\\n       \\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        x=0\\n        y=str(n)\\n        i=0\\n        while(i<len(y)):\\n            if i%2==0:\\n                x=x+int(y[i])\\n                i+=1\\n            else:\\n                x=x-int(y[i])\\n                i+=1\\n        return x\\n       \\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4004878,
                "title": "c-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n-  n is number of digit \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sum=0;\\n        bool flag=true;\\n        int temp=n;\\n        n=0;\\n        while(temp){\\n           \\n            n=n*10+temp%10;\\n             temp/=10;\\n        }\\n        while(n){\\n             if(flag) sum+=n%10;\\n             else sum-=n%10;\\n             n/=10;\\n             flag=!flag;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sum=0;\\n        bool flag=true;\\n        int temp=n;\\n        n=0;\\n        while(temp){\\n           \\n            n=n*10+temp%10;\\n             temp/=10;\\n        }\\n        while(n){\\n             if(flag) sum+=n%10;\\n             else sum-=n%10;\\n             n/=10;\\n             flag=!flag;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4004757,
                "title": "runtime-details-10ms-beats-87-93-of-users-with-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def alternateDigitSum(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        re=0\\n        for i in range(len(str(n))):\\n            if i%2==0:\\n                re+=int(str(n)[i])\\n            else:\\n                re-=int(str(n)[i])\\n        return re        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def alternateDigitSum(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        re=0\\n        for i in range(len(str(n))):\\n            if i%2==0:\\n                re+=int(str(n)[i])\\n            else:\\n                re-=int(str(n)[i])\\n        return re        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3997387,
                "title": "const-js-ts-single-line-solution",
                "content": "# Code\\n```\\nfunction alternateDigitSum(n: number): number {\\n    return n.toString()\\n        .split(\"\")\\n        .map((n, i) => i % 2 === 0 ? +n : +n * -1)\\n        .reduce((acc, curr) => acc + curr, 0)\\n};\\n\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction alternateDigitSum(n: number): number {\\n    return n.toString()\\n        .split(\"\")\\n        .map((n, i) => i % 2 === 0 ? +n : +n * -1)\\n        .reduce((acc, curr) => acc + curr, 0)\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3997368,
                "title": "js-ts-single-line-solution",
                "content": "# Code\\n```\\nfunction alternateDigitSum(n: number): number {\\n    return n.toString().split(\"\").reduce((acc, curr, index) => acc + (parseInt(curr, 10) * (index % 2 === 0 ? 1 : -1)), 0)\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction alternateDigitSum(n: number): number {\\n    return n.toString().split(\"\").reduce((acc, curr, index) => acc + (parseInt(curr, 10) * (index % 2 === 0 ? 1 : -1)), 0)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3996709,
                "title": "easy-c-solution-faster-than-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        bool posFlag = true;\\n        stack<int>st;\\n        int result = 0;\\n\\n        while(n != 0){\\n            int rem = n % 10;\\n            n = n/10;\\n            st.push(rem);\\n        }\\n\\n        while(!st.empty()){\\n            int digit = st.top();\\n                        st.pop();\\n            if(posFlag){\\n                result += digit;\\n                posFlag = false;\\n            }else{\\n                result -= digit;\\n                posFlag = true;\\n            }\\n        }\\n\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        bool posFlag = true;\\n        stack<int>st;\\n        int result = 0;\\n\\n        while(n != 0){\\n            int rem = n % 10;\\n            n = n/10;\\n            st.push(rem);\\n        }\\n\\n        while(!st.empty()){\\n            int digit = st.top();\\n                        st.pop();\\n            if(posFlag){\\n                result += digit;\\n                posFlag = false;\\n            }else{\\n                result -= digit;\\n                posFlag = true;\\n            }\\n        }\\n\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3983616,
                "title": "python-pretty-one-line-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe use `map(int, str(n))` to iterate over the digits of `n`, and then\\nuse the fact that $$(-1)^i$$ alternates between $$+1$$ and $$-1$$ to complete the solution.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        return sum((-1)**i * digit for i, digit in enumerate(map(int, str(n))))\\n```\\n\\n### Please Upvote if you liked the solution.",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        return sum((-1)**i * digit for i, digit in enumerate(map(int, str(n))))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3982996,
                "title": "java-clear-and-fastest-solution",
                "content": "\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n     boolean positive = true;\\n     int sum = 0;\\n\\n     while(n > 0){\\n         if(positive)\\n           sum += n % 10;\\n         else \\n           sum -= n % 10;\\n          \\n        positive = !positive;\\n        n /= 10;\\n     }   \\n\\n     return positive ? -sum : sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n     boolean positive = true;\\n     int sum = 0;\\n\\n     while(n > 0){\\n         if(positive)\\n           sum += n % 10;\\n         else \\n           sum -= n % 10;\\n          \\n        positive = !positive;\\n        n /= 10;\\n     }   \\n\\n     return positive ? -sum : sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3979238,
                "title": "2544-alternating-digit-sum",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n       String s=String.valueOf(n);\\n        int sum=0;\\n        for(int i=0;i<s.length();++i)\\n        {\\n            int num=Integer.parseInt(String.valueOf(s.charAt(i)));\\n            if(i%2==1)\\n            {\\n                sum-=num;\\n            }else{\\n                sum+=num;\\n            }\\n        }\\n\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n       String s=String.valueOf(n);\\n        int sum=0;\\n        for(int i=0;i<s.length();++i)\\n        {\\n            int num=Integer.parseInt(String.valueOf(s.charAt(i)));\\n            if(i%2==1)\\n            {\\n                sum-=num;\\n            }else{\\n                sum+=num;\\n            }\\n        }\\n\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3977140,
                "title": "beats-97-37-of-users-with-javascript-easy-solution-with-line-by-line-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar alternateDigitSum = function (n) {\\n\\n    // initialize sum to zero\\n    let sum = 0;\\n\\n    // convert n to string using toString()\\n    let str = n.toString();\\n\\n    // loop through every character of string str\\n    for (let i = 0; i < str.length; i++) {\\n\\n        // if i is divisable by 2 then add every character of str with prefix sign +\\n        if (i % 2 === 0) sum += (+str[i]);\\n\\n        // else add every character of str with prefix sign -    \\n        else sum += (-str[i]);\\n    }\\n\\n    // return sum\\n    return sum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar alternateDigitSum = function (n) {\\n\\n    // initialize sum to zero\\n    let sum = 0;\\n\\n    // convert n to string using toString()\\n    let str = n.toString();\\n\\n    // loop through every character of string str\\n    for (let i = 0; i < str.length; i++) {\\n\\n        // if i is divisable by 2 then add every character of str with prefix sign +\\n        if (i % 2 === 0) sum += (+str[i]);\\n\\n        // else add every character of str with prefix sign -    \\n        else sum += (-str[i]);\\n    }\\n\\n    // return sum\\n    return sum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3976033,
                "title": "beats-100-0-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func alternateDigitSum(_ n: Int) -> Int {\\n        var flag = true \\n        var sum = 0\\n\\n        var arr = Array(String(n)).compactMap{Int(String($0))!}\\n        for i in arr {\\n            if flag {\\n                sum += i\\n                flag = false\\n            } else {\\n                sum -= i\\n                flag = true\\n            }\\n        }\\n        return sum\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func alternateDigitSum(_ n: Int) -> Int {\\n        var flag = true \\n        var sum = 0\\n\\n        var arr = Array(String(n)).compactMap{Int(String($0))!}\\n        for i in arr {\\n            if flag {\\n                sum += i\\n                flag = false\\n            } else {\\n                sum -= i\\n                flag = true\\n            }\\n        }\\n        return sum\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3972477,
                "title": "easy-understanding-solution-using-java-beats-100",
                "content": "\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int len = (int)Math.log10(n) + 1;\\n        int ans = 0;\\n        int sign = len % 2 == 0 ? 1 : 0;\\n        while(n > 0){\\n            if(sign == 1){\\n                ans += (-n % 10);\\n                sign = 0;\\n            }\\n            else{\\n                ans += (n % 10);\\n                sign = 1;\\n            }\\n            n /= 10;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int len = (int)Math.log10(n) + 1;\\n        int ans = 0;\\n        int sign = len % 2 == 0 ? 1 : 0;\\n        while(n > 0){\\n            if(sign == 1){\\n                ans += (-n % 10);\\n                sign = 0;\\n            }\\n            else{\\n                ans += (n % 10);\\n                sign = 1;\\n            }\\n            n /= 10;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3971195,
                "title": "python-beginner-1-line",
                "content": "- Time complexity: $$O(n)$$\\n- Space complexity: $$O(1)$$\\n```\\nclass Solution(object):\\n    def alternateDigitSum(self, n):\\n        return sum((1-(i%2)*2)*int(v) for i,v in enumerate(str(n)))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def alternateDigitSum(self, n):\\n        return sum((1-(i%2)*2)*int(v) for i,v in enumerate(str(n)))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3967443,
                "title": "alternating-digit-sum-java-solution",
                "content": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        if (n <= 9) {\\n            return n;\\n        }\\n        String str = Integer.toString(n);\\n        int sum = 0;\\n        int start=0;\\n        \\n        while(start< str.length()) {\\n            if (start % 2 == 0) {\\n                sum += Character.getNumericValue(str.charAt(start));\\n            } \\n            else {\\n                sum -= Character.getNumericValue(str.charAt(start));\\n            }\\n            start++;\\n        }\\n        return sum;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int alternateDigitSum(int n) {\\n        if (n <= 9) {\\n            return n;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3946676,
                "title": "alternating-digit-sum-in-java",
                "content": "\\n# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\nO(1)\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int count=CountDigits(n);\\n        int sum=0;\\n        while(n!=0)\\n        {\\n            if(count%2==0)\\n            sum-=(n%10);\\n            else\\n            sum+=(n%10);\\n            count--;\\n            n/=10;\\n        }\\n        return sum;\\n    }\\n    public int CountDigits(int n)\\n    {\\n        int count=0;\\n        while(n!=0)\\n        {\\n            count++;\\n            n/=10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int count=CountDigits(n);\\n        int sum=0;\\n        while(n!=0)\\n        {\\n            if(count%2==0)\\n            sum-=(n%10);\\n            else\\n            sum+=(n%10);\\n            count--;\\n            n/=10;\\n        }\\n        return sum;\\n    }\\n    public int CountDigits(int n)\\n    {\\n        int count=0;\\n        while(n!=0)\\n        {\\n            count++;\\n            n/=10;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3946536,
                "title": "too-easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar alternateDigitSum = function(n) {\\n    let sum = 0\\n   const num = n.toString()\\n   for(let i=0; i<num.length; i++){\\n    if(i % 2 === 0){\\n        sum = sum + Number(num[i])\\n    }\\n    else{\\n        sum = sum - Number(num[i])\\n    }\\n   }\\n   return sum\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar alternateDigitSum = function(n) {\\n    let sum = 0\\n   const num = n.toString()\\n   for(let i=0; i<num.length; i++){\\n    if(i % 2 === 0){\\n        sum = sum + Number(num[i])\\n    }\\n    else{\\n        sum = sum - Number(num[i])\\n    }\\n   }\\n   return sum\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3944841,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int ans=0;\\n        vector<int>v;\\n        while(n)\\n        {\\n            v.push_back(n%10);\\n            n=n/10;\\n        }\\n        reverse(v.begin(),v.end());\\n        bool pos=true;\\n        for(auto it:v)\\n        {\\n            if(pos)\\n            {\\n                ans+=it;\\n            }\\n            else\\n            {\\n                ans+=-it;\\n            }\\n            pos=!pos;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int ans=0;\\n        vector<int>v;\\n        while(n)\\n        {\\n            v.push_back(n%10);\\n            n=n/10;\\n        }\\n        reverse(v.begin(),v.end());\\n        bool pos=true;\\n        for(auto it:v)\\n        {\\n            if(pos)\\n            {\\n                ans+=it;\\n            }\\n            else\\n            {\\n                ans+=-it;\\n            }\\n            pos=!pos;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3942939,
                "title": "python-easy-solution-totally-understandable",
                "content": "# Code\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        m = str(n)\\n        l = len(m)\\n        s = 0\\n        z = 0 \\n        for i in range(0, l, 2):\\n            s += int(m[i])\\n        for j in range(1, l, 2):\\n            z += int(m[j])\\n        return s - z\\n```\\n## Please Upvote!",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        m = str(n)\\n        l = len(m)\\n        s = 0\\n        z = 0 \\n        for i in range(0, l, 2):\\n            s += int(m[i])\\n        for j in range(1, l, 2):\\n            z += int(m[j])\\n        return s - z\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3942483,
                "title": "simple-python-solution-o-1-space-and-o-n-time-with-explanation-in-comments",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        #First find the len of the number\\n        numLen = len(str(n))\\n\\n        result = 0\\n        \\n        #Note for the first iteration the operation and the divisor values\\n        #need to be set outside the loop\\n\\n        #variable to store the operation to be performed \\n        operation = \\'add\\'\\n\\n        #the number we need to divide by to get the most siginigicant digit\\n        # power needs to be numLen - 1\\n        divisor = pow(10, numLen - 1) \\n\\n        while n > 0:\\n            #Getting the most significant digit\\n            # Note to get the msd, we need to divide by the divisor\\n            msd = int(n / divisor)\\n\\n            #depending on the operation, add or subtract the digit from the result\\n            if operation == \\'add\\':\\n                result += msd\\n            else:\\n                result -= msd\\n\\n            #update the num, divisor  and the operation for the next iteration of the while loop\\n\\n            n = n % divisor #Again to find the new number , it is the mode function\\n            #that needs to be used\\n            #the reverse of what we need to do when we are pulling digits friom the least\\n            #siginificant position\\n\\n            #The operation needs to be flipped\\n            if operation == \\'add\\':\\n                operation = \\'subtract\\'\\n            else:\\n                operation = \\'add\\'\\n\\n            divisor = divisor / 10\\n\\n        \\n        return result\\n\\n\\n\\n            \\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        #First find the len of the number\\n        numLen = len(str(n))\\n\\n        result = 0\\n        \\n        #Note for the first iteration the operation and the divisor values\\n        #need to be set outside the loop\\n\\n        #variable to store the operation to be performed \\n        operation = \\'add\\'\\n\\n        #the number we need to divide by to get the most siginigicant digit\\n        # power needs to be numLen - 1\\n        divisor = pow(10, numLen - 1) \\n\\n        while n > 0:\\n            #Getting the most significant digit\\n            # Note to get the msd, we need to divide by the divisor\\n            msd = int(n / divisor)\\n\\n            #depending on the operation, add or subtract the digit from the result\\n            if operation == \\'add\\':\\n                result += msd\\n            else:\\n                result -= msd\\n\\n            #update the num, divisor  and the operation for the next iteration of the while loop\\n\\n            n = n % divisor #Again to find the new number , it is the mode function\\n            #that needs to be used\\n            #the reverse of what we need to do when we are pulling digits friom the least\\n            #siginificant position\\n\\n            #The operation needs to be flipped\\n            if operation == \\'add\\':\\n                operation = \\'subtract\\'\\n            else:\\n                operation = \\'add\\'\\n\\n            divisor = divisor / 10\\n\\n        \\n        return result\\n\\n\\n\\n            \\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3939654,
                "title": "java-100-solution",
                "content": "\\'\\'\\'\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        String s= String.valueOf(n);\\n        int ans=Integer.parseInt(String.valueOf(s.charAt(0)));\\n        for(int i=1;i<s.length();i++)\\n        {\\n        if(i%2==1)\\n        {\\n            ans -= Integer.parseInt(String.valueOf(s.charAt(i)));\\n        }\\n        else\\n        {\\n             ans += Integer.parseInt(String.valueOf(s.charAt(i)));\\n        }\\n        }\\n        return ans;\\n    }\\n}\\n\\'\\'\\'",
                "solutionTags": [],
                "code": "class Solution {\\n    public int alternateDigitSum(int n) {\\n        String s= String.valueOf(n);\\n        int ans=Integer.parseInt(String.valueOf(s.charAt(0)));\\n        for(int i=1;i<s.length();i++)\\n        {\\n        if(i%2==1)\\n        {\\n            ans -= Integer.parseInt(String.valueOf(s.charAt(i)));\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3938720,
                "title": "mathematical-way",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func alternateDigitSum(_ n: Int) -> Int {\\n        guard n>0 else {return 0}\\n        var nString = String(n)\\n        nString = String(nString.reversed())\\n        var nNum = Int(nString)!\\n        var sum = 0\\n        var flag = 0\\n        while nNum/10 != 0 {\\n            sum = flag==0 ? sum+nNum%10 : sum-nNum%10\\n            flag = flag==0 ? flag+1 : flag-1\\n            nNum /= 10\\n        }\\n        \\n        sum = flag==0 ? sum+nNum : sum-nNum\\n        return sum\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func alternateDigitSum(_ n: Int) -> Int {\\n        guard n>0 else {return 0}\\n        var nString = String(n)\\n        nString = String(nString.reversed())\\n        var nNum = Int(nString)!\\n        var sum = 0\\n        var flag = 0\\n        while nNum/10 != 0 {\\n            sum = flag==0 ? sum+nNum%10 : sum-nNum%10\\n            flag = flag==0 ? flag+1 : flag-1\\n            nNum /= 10\\n        }\\n        \\n        sum = flag==0 ? sum+nNum : sum-nNum\\n        return sum\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3936609,
                "title": "easy-solution-java",
                "content": "# Intuition\\nusing while loop\\n\\n# Approach\\neasy and simple solution\\n\\n# Complexity\\n- Time complexity:\\no(log n)\\n\\n- Space complexity:\\no(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int sign=1;\\n        int count=0,res=0;\\n        while(n!=0){\\n            res=((n%10)*sign)+res;\\n            sign*=-1;\\n            count++;\\n            n/=10;\\n        }\\n        if(count%2==0){\\n            return res*-1;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int alternateDigitSum(int n) {\\n        int sign=1;\\n        int count=0,res=0;\\n        while(n!=0){\\n            res=((n%10)*sign)+res;\\n            sign*=-1;\\n            count++;\\n            n/=10;\\n        }\\n        if(count%2==0){\\n            return res*-1;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3931892,
                "title": "python-one-liner",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\nThe problem requires us to add / substract alternate digits in the number starting from the left.\\n\\nSo for ```n = 521``` we want to do the sum of the numbers ```[5, -2, 1]```\\n\\nThe task of separating out the digits can be done easily by converting the number into a string and iterating over it.\\n\\n```\\n[ int(i) for i in (str(n)) ]\\n```\\n\\nSo for ```n = 521``` we will get the list ```[5, 2, 1]```\\n\\nBut we would like this to be ```[5, -2, 1]```. Another way of writing the same is ```[5*(-1)**0, 2*(-1)**1, 1*(-1)**2 ]```\\n\\nWhere ```0, 1, 2 ``` are the index positions of the digits starting from the left. We can easily generate this information using ```enumerate```.\\n\\n```\\n[int(i)*(-1)**idx for idx,i in enumerate(str(n))]\\n```\\n\\nNow all that is left is to sum this list.\\n\\nPlease note the computing the exponent is definitely computationally more expensive as the $$length$$ of the number increases compared to a simple iterative approach.\\n\\n# Code\\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        return sum([int(i)*(-1)**idx for idx,i in enumerate(str(n))])\\n```\\n\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```n = 521```\n```[5, -2, 1]```\n```\\n[ int(i) for i in (str(n)) ]\\n```\n```n = 521```\n```[5, 2, 1]```\n```[5, -2, 1]```\n```[5*(-1)**0, 2*(-1)**1, 1*(-1)**2 ]```\n```0, 1, 2 ```\n```enumerate```\n```\\n[int(i)*(-1)**idx for idx,i in enumerate(str(n))]\\n```\n```\\nclass Solution:\\n    def alternateDigitSum(self, n: int) -> int:\\n        return sum([int(i)*(-1)**idx for idx,i in enumerate(str(n))])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3931078,
                "title": "very-easy-to-understand-c-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        string str=to_string(n);\\n        int m = str.size();\\n        int sum1=0;\\n        int sum2=0;\\n        for(int i=0;i<m;i+=2)\\n        {\\n            sum1+=str[i]-\\'0\\';\\n        }\\n         for(int j=1;j<m;j+=2)\\n         {\\n             sum2+=str[j]-\\'0\\';\\n         }\\n         return sum1-sum2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        string str=to_string(n);\\n        int m = str.size();\\n        int sum1=0;\\n        int sum2=0;\\n        for(int i=0;i<m;i+=2)\\n        {\\n            sum1+=str[i]-\\'0\\';\\n        }\\n         for(int j=1;j<m;j+=2)\\n         {\\n             sum2+=str[j]-\\'0\\';\\n         }\\n         return sum1-sum2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3927613,
                "title": "c-easy-using-two-statement-only",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n\\n    int alternateDigitSum(int n) {\\n        int ans = 0;\\n        while(n){\\n            ans=-ans+n%10;\\n            n=n/10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n    int alternateDigitSum(int n) {\\n        int ans = 0;\\n        while(n){\\n            ans=-ans+n%10;\\n            n=n/10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3927252,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int ans = 0;\\n        string str = to_string(n);\\n\\n        int len = str.length();\\n        for (int i=0 ; i<len ; i++){\\n            int digit = str[i]-\\'0\\';\\n            if (i%2 == 0)\\n                ans += digit;\\n    \\n            else\\n                ans -= digit;\\n        } \\n        return ans;  \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int ans = 0;\\n        string str = to_string(n);\\n\\n        int len = str.length();\\n        for (int i=0 ; i<len ; i++){\\n            int digit = str[i]-\\'0\\';\\n            if (i%2 == 0)\\n                ans += digit;\\n    \\n            else\\n                ans -= digit;\\n        } \\n        return ans;  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3925836,
                "title": "time-o-n-space-o-no-of-digits",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sum=0;\\n        int fac=1;\\n        stack<int> s;\\n        while(n>0){\\n            int num=n%10;\\n            n=n/10;\\n          s.push(num);\\n        }\\n        while(!s.empty()){\\n            sum+=s.top()*fac;\\n            s.pop();\\n            fac=fac*-1;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sum=0;\\n        int fac=1;\\n        stack<int> s;\\n        while(n>0){\\n            int num=n%10;\\n            n=n/10;\\n          s.push(num);\\n        }\\n        while(!s.empty()){\\n            sum+=s.top()*fac;\\n            s.pop();\\n            fac=fac*-1;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1769939,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "According to the site [Datacademia](https://datacadamia.com/data/type/number/significant#:~:text=Definition%20Most%20The%20most%20significant%20digit%20is%20the,least%20significant%20digit%20is%20the%20right-most%20known%20digit.) the formal definition of **Most Significant Digit** is:\n> The ***most significant digit** is the **left-most nonzero digit** \n> Where as The least significant digit is the right-most known digit.\n\nThus :\n- `n=25` :  (+2) + (-5)  = -3\n- `n=521` : (+5) + (-2) + (+1) = 4\n- `n=1234` : (+1) + (-2) + (+3) + (-4) = -2\n- `n=886996` : (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0\nHope it helps. ❤️"
                    },
                    {
                        "username": "uzeconomist0419",
                        "content": "thanks a lot"
                    },
                    {
                        "username": "qq710729301",
                        "content": "\\'The most significant digit\\' part got me. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re interested how to use math instead of strings, indexes and arrays, the solution is [here](https://leetcode.com/problems/alternating-digit-sum/solutions/3352079/python-pure-math-o-1-space-o-log-n-time-without-any-string-or-array/). One pass, O(1) space, pure math."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "Think about what happen when the index is odd or even :)"
                    },
                    {
                        "username": "Nikhil-Umesh",
                        "content": " ` public int alternateDigitSum(int number) {\n        int sum=0;\n        String s= String.valueOf(number);\n        char[]a = s.toCharArray();\n        for(int i=0;i<a.length;i++){\n            if(i%2==0){\n                sum = sum + Character.getNumericValue(a[i]);\n            }\n            else {\n                sum = sum - Character.getNumericValue(a[i]);\n            }\n        }\n\n        return sum;\n    }\n\n\nJava solution beats 100 % time"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Beat 100% in runtime\\n       int remain = n;\\n        int tempN = n;\\n        int count = 0;\\n        while (tempN > 0) {\\n            tempN = tempN / 10;\\n            count++;\\n        }\\n\\n        int sign = 1;\\n        if (count % 2 == 0) {\\n            sign = -1;\\n        }\\n\\n        int sum = 0;\\n        while (count-- > 0) {\\n            remain = n % 10;\\n            n /= 10;\\n            sum += (remain * sign);\\n            sign *= -1;\\n        }\\n        return sum;"
                    },
                    {
                        "username": "fymmmmm",
                        "content": "\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F"
                    },
                    {
                        "username": "siddharthjain14",
                        "content": "Can be easily done with log n time complexity"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sump=0,sumn=0;\\n        vector<int>v;\\n        while(n!=0){\\n            int x=n%10;\\n            v.push_back(x);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0) sump+=v[i];\\n            else sumn+=v[i];\\n        }\\n        return (sump-sumn);\\n    }\\n};\\n"
                    },
                    {
                        "username": "karan_____787",
                        "content": "import java.util.Scanner ;\\n\\nclass Soll\\n{\\n\\tint add(int []A)\\n\\t{\\n\\t\\tint res=0 ;\\n\\t\\tint n = A.length ;\\n\\t\\tfor(int i=0 ; i<n ; i++)\\n\\t\\t{\\n\\t\\t\\tif(i%2 == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res+A[i] ;\\n\\t\\t\\t}\\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res-A[i] ;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t  return res ;\\t\\n\\t}\\n\\t\\n\\tvoid soll()\\n\\t{\\n\\t\\tint n1 ;\\n\\t\\tScanner sc = new Scanner(System.in) ;\\n\\t\\tSystem.out.println(\" Enter the length of array required \") ;\\n\\t     n1 = sc.nextInt() ;\\n\\t\\tint A1[] = new int[n1+1] ;\\n\\t\\tSystem.out.println(\" Enter the elements of array \") ;\\n\\t\\tfor(int i = 0 ;i<n1 ; i++)\\n\\t\\t{\\n\\t\\t\\tA1[i] = sc.nextInt() ;\\n\\t\\t}\\n\\t\\tint ans = add(A1) ;\\n\\t\\tSystem.out.println(\" The sum is  \" + ans) ;\\n\\t}\\t\\n}\\n\\npublic class Main \\n{\\n\\tpublic static void main(String [] args)\\n\\t{\\n\\t\\tSoll kb = new Soll() ;\\n\\t\\tkb.soll() ;\\n\\n   }\\n\\t\\t\\n}"
                    }
                ]
            },
            {
                "id": 1784826,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "According to the site [Datacademia](https://datacadamia.com/data/type/number/significant#:~:text=Definition%20Most%20The%20most%20significant%20digit%20is%20the,least%20significant%20digit%20is%20the%20right-most%20known%20digit.) the formal definition of **Most Significant Digit** is:\n> The ***most significant digit** is the **left-most nonzero digit** \n> Where as The least significant digit is the right-most known digit.\n\nThus :\n- `n=25` :  (+2) + (-5)  = -3\n- `n=521` : (+5) + (-2) + (+1) = 4\n- `n=1234` : (+1) + (-2) + (+3) + (-4) = -2\n- `n=886996` : (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0\nHope it helps. ❤️"
                    },
                    {
                        "username": "uzeconomist0419",
                        "content": "thanks a lot"
                    },
                    {
                        "username": "qq710729301",
                        "content": "\\'The most significant digit\\' part got me. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re interested how to use math instead of strings, indexes and arrays, the solution is [here](https://leetcode.com/problems/alternating-digit-sum/solutions/3352079/python-pure-math-o-1-space-o-log-n-time-without-any-string-or-array/). One pass, O(1) space, pure math."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "Think about what happen when the index is odd or even :)"
                    },
                    {
                        "username": "Nikhil-Umesh",
                        "content": " ` public int alternateDigitSum(int number) {\n        int sum=0;\n        String s= String.valueOf(number);\n        char[]a = s.toCharArray();\n        for(int i=0;i<a.length;i++){\n            if(i%2==0){\n                sum = sum + Character.getNumericValue(a[i]);\n            }\n            else {\n                sum = sum - Character.getNumericValue(a[i]);\n            }\n        }\n\n        return sum;\n    }\n\n\nJava solution beats 100 % time"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Beat 100% in runtime\\n       int remain = n;\\n        int tempN = n;\\n        int count = 0;\\n        while (tempN > 0) {\\n            tempN = tempN / 10;\\n            count++;\\n        }\\n\\n        int sign = 1;\\n        if (count % 2 == 0) {\\n            sign = -1;\\n        }\\n\\n        int sum = 0;\\n        while (count-- > 0) {\\n            remain = n % 10;\\n            n /= 10;\\n            sum += (remain * sign);\\n            sign *= -1;\\n        }\\n        return sum;"
                    },
                    {
                        "username": "fymmmmm",
                        "content": "\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F"
                    },
                    {
                        "username": "siddharthjain14",
                        "content": "Can be easily done with log n time complexity"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sump=0,sumn=0;\\n        vector<int>v;\\n        while(n!=0){\\n            int x=n%10;\\n            v.push_back(x);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0) sump+=v[i];\\n            else sumn+=v[i];\\n        }\\n        return (sump-sumn);\\n    }\\n};\\n"
                    },
                    {
                        "username": "karan_____787",
                        "content": "import java.util.Scanner ;\\n\\nclass Soll\\n{\\n\\tint add(int []A)\\n\\t{\\n\\t\\tint res=0 ;\\n\\t\\tint n = A.length ;\\n\\t\\tfor(int i=0 ; i<n ; i++)\\n\\t\\t{\\n\\t\\t\\tif(i%2 == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res+A[i] ;\\n\\t\\t\\t}\\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res-A[i] ;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t  return res ;\\t\\n\\t}\\n\\t\\n\\tvoid soll()\\n\\t{\\n\\t\\tint n1 ;\\n\\t\\tScanner sc = new Scanner(System.in) ;\\n\\t\\tSystem.out.println(\" Enter the length of array required \") ;\\n\\t     n1 = sc.nextInt() ;\\n\\t\\tint A1[] = new int[n1+1] ;\\n\\t\\tSystem.out.println(\" Enter the elements of array \") ;\\n\\t\\tfor(int i = 0 ;i<n1 ; i++)\\n\\t\\t{\\n\\t\\t\\tA1[i] = sc.nextInt() ;\\n\\t\\t}\\n\\t\\tint ans = add(A1) ;\\n\\t\\tSystem.out.println(\" The sum is  \" + ans) ;\\n\\t}\\t\\n}\\n\\npublic class Main \\n{\\n\\tpublic static void main(String [] args)\\n\\t{\\n\\t\\tSoll kb = new Soll() ;\\n\\t\\tkb.soll() ;\\n\\n   }\\n\\t\\t\\n}"
                    }
                ]
            },
            {
                "id": 1846382,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "According to the site [Datacademia](https://datacadamia.com/data/type/number/significant#:~:text=Definition%20Most%20The%20most%20significant%20digit%20is%20the,least%20significant%20digit%20is%20the%20right-most%20known%20digit.) the formal definition of **Most Significant Digit** is:\n> The ***most significant digit** is the **left-most nonzero digit** \n> Where as The least significant digit is the right-most known digit.\n\nThus :\n- `n=25` :  (+2) + (-5)  = -3\n- `n=521` : (+5) + (-2) + (+1) = 4\n- `n=1234` : (+1) + (-2) + (+3) + (-4) = -2\n- `n=886996` : (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0\nHope it helps. ❤️"
                    },
                    {
                        "username": "uzeconomist0419",
                        "content": "thanks a lot"
                    },
                    {
                        "username": "qq710729301",
                        "content": "\\'The most significant digit\\' part got me. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re interested how to use math instead of strings, indexes and arrays, the solution is [here](https://leetcode.com/problems/alternating-digit-sum/solutions/3352079/python-pure-math-o-1-space-o-log-n-time-without-any-string-or-array/). One pass, O(1) space, pure math."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "Think about what happen when the index is odd or even :)"
                    },
                    {
                        "username": "Nikhil-Umesh",
                        "content": " ` public int alternateDigitSum(int number) {\n        int sum=0;\n        String s= String.valueOf(number);\n        char[]a = s.toCharArray();\n        for(int i=0;i<a.length;i++){\n            if(i%2==0){\n                sum = sum + Character.getNumericValue(a[i]);\n            }\n            else {\n                sum = sum - Character.getNumericValue(a[i]);\n            }\n        }\n\n        return sum;\n    }\n\n\nJava solution beats 100 % time"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Beat 100% in runtime\\n       int remain = n;\\n        int tempN = n;\\n        int count = 0;\\n        while (tempN > 0) {\\n            tempN = tempN / 10;\\n            count++;\\n        }\\n\\n        int sign = 1;\\n        if (count % 2 == 0) {\\n            sign = -1;\\n        }\\n\\n        int sum = 0;\\n        while (count-- > 0) {\\n            remain = n % 10;\\n            n /= 10;\\n            sum += (remain * sign);\\n            sign *= -1;\\n        }\\n        return sum;"
                    },
                    {
                        "username": "fymmmmm",
                        "content": "\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F"
                    },
                    {
                        "username": "siddharthjain14",
                        "content": "Can be easily done with log n time complexity"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sump=0,sumn=0;\\n        vector<int>v;\\n        while(n!=0){\\n            int x=n%10;\\n            v.push_back(x);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0) sump+=v[i];\\n            else sumn+=v[i];\\n        }\\n        return (sump-sumn);\\n    }\\n};\\n"
                    },
                    {
                        "username": "karan_____787",
                        "content": "import java.util.Scanner ;\\n\\nclass Soll\\n{\\n\\tint add(int []A)\\n\\t{\\n\\t\\tint res=0 ;\\n\\t\\tint n = A.length ;\\n\\t\\tfor(int i=0 ; i<n ; i++)\\n\\t\\t{\\n\\t\\t\\tif(i%2 == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res+A[i] ;\\n\\t\\t\\t}\\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res-A[i] ;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t  return res ;\\t\\n\\t}\\n\\t\\n\\tvoid soll()\\n\\t{\\n\\t\\tint n1 ;\\n\\t\\tScanner sc = new Scanner(System.in) ;\\n\\t\\tSystem.out.println(\" Enter the length of array required \") ;\\n\\t     n1 = sc.nextInt() ;\\n\\t\\tint A1[] = new int[n1+1] ;\\n\\t\\tSystem.out.println(\" Enter the elements of array \") ;\\n\\t\\tfor(int i = 0 ;i<n1 ; i++)\\n\\t\\t{\\n\\t\\t\\tA1[i] = sc.nextInt() ;\\n\\t\\t}\\n\\t\\tint ans = add(A1) ;\\n\\t\\tSystem.out.println(\" The sum is  \" + ans) ;\\n\\t}\\t\\n}\\n\\npublic class Main \\n{\\n\\tpublic static void main(String [] args)\\n\\t{\\n\\t\\tSoll kb = new Soll() ;\\n\\t\\tkb.soll() ;\\n\\n   }\\n\\t\\t\\n}"
                    }
                ]
            },
            {
                "id": 1840636,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "According to the site [Datacademia](https://datacadamia.com/data/type/number/significant#:~:text=Definition%20Most%20The%20most%20significant%20digit%20is%20the,least%20significant%20digit%20is%20the%20right-most%20known%20digit.) the formal definition of **Most Significant Digit** is:\n> The ***most significant digit** is the **left-most nonzero digit** \n> Where as The least significant digit is the right-most known digit.\n\nThus :\n- `n=25` :  (+2) + (-5)  = -3\n- `n=521` : (+5) + (-2) + (+1) = 4\n- `n=1234` : (+1) + (-2) + (+3) + (-4) = -2\n- `n=886996` : (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0\nHope it helps. ❤️"
                    },
                    {
                        "username": "uzeconomist0419",
                        "content": "thanks a lot"
                    },
                    {
                        "username": "qq710729301",
                        "content": "\\'The most significant digit\\' part got me. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re interested how to use math instead of strings, indexes and arrays, the solution is [here](https://leetcode.com/problems/alternating-digit-sum/solutions/3352079/python-pure-math-o-1-space-o-log-n-time-without-any-string-or-array/). One pass, O(1) space, pure math."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "Think about what happen when the index is odd or even :)"
                    },
                    {
                        "username": "Nikhil-Umesh",
                        "content": " ` public int alternateDigitSum(int number) {\n        int sum=0;\n        String s= String.valueOf(number);\n        char[]a = s.toCharArray();\n        for(int i=0;i<a.length;i++){\n            if(i%2==0){\n                sum = sum + Character.getNumericValue(a[i]);\n            }\n            else {\n                sum = sum - Character.getNumericValue(a[i]);\n            }\n        }\n\n        return sum;\n    }\n\n\nJava solution beats 100 % time"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Beat 100% in runtime\\n       int remain = n;\\n        int tempN = n;\\n        int count = 0;\\n        while (tempN > 0) {\\n            tempN = tempN / 10;\\n            count++;\\n        }\\n\\n        int sign = 1;\\n        if (count % 2 == 0) {\\n            sign = -1;\\n        }\\n\\n        int sum = 0;\\n        while (count-- > 0) {\\n            remain = n % 10;\\n            n /= 10;\\n            sum += (remain * sign);\\n            sign *= -1;\\n        }\\n        return sum;"
                    },
                    {
                        "username": "fymmmmm",
                        "content": "\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F"
                    },
                    {
                        "username": "siddharthjain14",
                        "content": "Can be easily done with log n time complexity"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sump=0,sumn=0;\\n        vector<int>v;\\n        while(n!=0){\\n            int x=n%10;\\n            v.push_back(x);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0) sump+=v[i];\\n            else sumn+=v[i];\\n        }\\n        return (sump-sumn);\\n    }\\n};\\n"
                    },
                    {
                        "username": "karan_____787",
                        "content": "import java.util.Scanner ;\\n\\nclass Soll\\n{\\n\\tint add(int []A)\\n\\t{\\n\\t\\tint res=0 ;\\n\\t\\tint n = A.length ;\\n\\t\\tfor(int i=0 ; i<n ; i++)\\n\\t\\t{\\n\\t\\t\\tif(i%2 == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res+A[i] ;\\n\\t\\t\\t}\\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res-A[i] ;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t  return res ;\\t\\n\\t}\\n\\t\\n\\tvoid soll()\\n\\t{\\n\\t\\tint n1 ;\\n\\t\\tScanner sc = new Scanner(System.in) ;\\n\\t\\tSystem.out.println(\" Enter the length of array required \") ;\\n\\t     n1 = sc.nextInt() ;\\n\\t\\tint A1[] = new int[n1+1] ;\\n\\t\\tSystem.out.println(\" Enter the elements of array \") ;\\n\\t\\tfor(int i = 0 ;i<n1 ; i++)\\n\\t\\t{\\n\\t\\t\\tA1[i] = sc.nextInt() ;\\n\\t\\t}\\n\\t\\tint ans = add(A1) ;\\n\\t\\tSystem.out.println(\" The sum is  \" + ans) ;\\n\\t}\\t\\n}\\n\\npublic class Main \\n{\\n\\tpublic static void main(String [] args)\\n\\t{\\n\\t\\tSoll kb = new Soll() ;\\n\\t\\tkb.soll() ;\\n\\n   }\\n\\t\\t\\n}"
                    }
                ]
            },
            {
                "id": 1777716,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "According to the site [Datacademia](https://datacadamia.com/data/type/number/significant#:~:text=Definition%20Most%20The%20most%20significant%20digit%20is%20the,least%20significant%20digit%20is%20the%20right-most%20known%20digit.) the formal definition of **Most Significant Digit** is:\n> The ***most significant digit** is the **left-most nonzero digit** \n> Where as The least significant digit is the right-most known digit.\n\nThus :\n- `n=25` :  (+2) + (-5)  = -3\n- `n=521` : (+5) + (-2) + (+1) = 4\n- `n=1234` : (+1) + (-2) + (+3) + (-4) = -2\n- `n=886996` : (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0\nHope it helps. ❤️"
                    },
                    {
                        "username": "uzeconomist0419",
                        "content": "thanks a lot"
                    },
                    {
                        "username": "qq710729301",
                        "content": "\\'The most significant digit\\' part got me. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re interested how to use math instead of strings, indexes and arrays, the solution is [here](https://leetcode.com/problems/alternating-digit-sum/solutions/3352079/python-pure-math-o-1-space-o-log-n-time-without-any-string-or-array/). One pass, O(1) space, pure math."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "Think about what happen when the index is odd or even :)"
                    },
                    {
                        "username": "Nikhil-Umesh",
                        "content": " ` public int alternateDigitSum(int number) {\n        int sum=0;\n        String s= String.valueOf(number);\n        char[]a = s.toCharArray();\n        for(int i=0;i<a.length;i++){\n            if(i%2==0){\n                sum = sum + Character.getNumericValue(a[i]);\n            }\n            else {\n                sum = sum - Character.getNumericValue(a[i]);\n            }\n        }\n\n        return sum;\n    }\n\n\nJava solution beats 100 % time"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Beat 100% in runtime\\n       int remain = n;\\n        int tempN = n;\\n        int count = 0;\\n        while (tempN > 0) {\\n            tempN = tempN / 10;\\n            count++;\\n        }\\n\\n        int sign = 1;\\n        if (count % 2 == 0) {\\n            sign = -1;\\n        }\\n\\n        int sum = 0;\\n        while (count-- > 0) {\\n            remain = n % 10;\\n            n /= 10;\\n            sum += (remain * sign);\\n            sign *= -1;\\n        }\\n        return sum;"
                    },
                    {
                        "username": "fymmmmm",
                        "content": "\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F"
                    },
                    {
                        "username": "siddharthjain14",
                        "content": "Can be easily done with log n time complexity"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sump=0,sumn=0;\\n        vector<int>v;\\n        while(n!=0){\\n            int x=n%10;\\n            v.push_back(x);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0) sump+=v[i];\\n            else sumn+=v[i];\\n        }\\n        return (sump-sumn);\\n    }\\n};\\n"
                    },
                    {
                        "username": "karan_____787",
                        "content": "import java.util.Scanner ;\\n\\nclass Soll\\n{\\n\\tint add(int []A)\\n\\t{\\n\\t\\tint res=0 ;\\n\\t\\tint n = A.length ;\\n\\t\\tfor(int i=0 ; i<n ; i++)\\n\\t\\t{\\n\\t\\t\\tif(i%2 == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res+A[i] ;\\n\\t\\t\\t}\\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res-A[i] ;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t  return res ;\\t\\n\\t}\\n\\t\\n\\tvoid soll()\\n\\t{\\n\\t\\tint n1 ;\\n\\t\\tScanner sc = new Scanner(System.in) ;\\n\\t\\tSystem.out.println(\" Enter the length of array required \") ;\\n\\t     n1 = sc.nextInt() ;\\n\\t\\tint A1[] = new int[n1+1] ;\\n\\t\\tSystem.out.println(\" Enter the elements of array \") ;\\n\\t\\tfor(int i = 0 ;i<n1 ; i++)\\n\\t\\t{\\n\\t\\t\\tA1[i] = sc.nextInt() ;\\n\\t\\t}\\n\\t\\tint ans = add(A1) ;\\n\\t\\tSystem.out.println(\" The sum is  \" + ans) ;\\n\\t}\\t\\n}\\n\\npublic class Main \\n{\\n\\tpublic static void main(String [] args)\\n\\t{\\n\\t\\tSoll kb = new Soll() ;\\n\\t\\tkb.soll() ;\\n\\n   }\\n\\t\\t\\n}"
                    }
                ]
            },
            {
                "id": 1777261,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "According to the site [Datacademia](https://datacadamia.com/data/type/number/significant#:~:text=Definition%20Most%20The%20most%20significant%20digit%20is%20the,least%20significant%20digit%20is%20the%20right-most%20known%20digit.) the formal definition of **Most Significant Digit** is:\n> The ***most significant digit** is the **left-most nonzero digit** \n> Where as The least significant digit is the right-most known digit.\n\nThus :\n- `n=25` :  (+2) + (-5)  = -3\n- `n=521` : (+5) + (-2) + (+1) = 4\n- `n=1234` : (+1) + (-2) + (+3) + (-4) = -2\n- `n=886996` : (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0\nHope it helps. ❤️"
                    },
                    {
                        "username": "uzeconomist0419",
                        "content": "thanks a lot"
                    },
                    {
                        "username": "qq710729301",
                        "content": "\\'The most significant digit\\' part got me. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re interested how to use math instead of strings, indexes and arrays, the solution is [here](https://leetcode.com/problems/alternating-digit-sum/solutions/3352079/python-pure-math-o-1-space-o-log-n-time-without-any-string-or-array/). One pass, O(1) space, pure math."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "Think about what happen when the index is odd or even :)"
                    },
                    {
                        "username": "Nikhil-Umesh",
                        "content": " ` public int alternateDigitSum(int number) {\n        int sum=0;\n        String s= String.valueOf(number);\n        char[]a = s.toCharArray();\n        for(int i=0;i<a.length;i++){\n            if(i%2==0){\n                sum = sum + Character.getNumericValue(a[i]);\n            }\n            else {\n                sum = sum - Character.getNumericValue(a[i]);\n            }\n        }\n\n        return sum;\n    }\n\n\nJava solution beats 100 % time"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Beat 100% in runtime\\n       int remain = n;\\n        int tempN = n;\\n        int count = 0;\\n        while (tempN > 0) {\\n            tempN = tempN / 10;\\n            count++;\\n        }\\n\\n        int sign = 1;\\n        if (count % 2 == 0) {\\n            sign = -1;\\n        }\\n\\n        int sum = 0;\\n        while (count-- > 0) {\\n            remain = n % 10;\\n            n /= 10;\\n            sum += (remain * sign);\\n            sign *= -1;\\n        }\\n        return sum;"
                    },
                    {
                        "username": "fymmmmm",
                        "content": "\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F"
                    },
                    {
                        "username": "siddharthjain14",
                        "content": "Can be easily done with log n time complexity"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sump=0,sumn=0;\\n        vector<int>v;\\n        while(n!=0){\\n            int x=n%10;\\n            v.push_back(x);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0) sump+=v[i];\\n            else sumn+=v[i];\\n        }\\n        return (sump-sumn);\\n    }\\n};\\n"
                    },
                    {
                        "username": "karan_____787",
                        "content": "import java.util.Scanner ;\\n\\nclass Soll\\n{\\n\\tint add(int []A)\\n\\t{\\n\\t\\tint res=0 ;\\n\\t\\tint n = A.length ;\\n\\t\\tfor(int i=0 ; i<n ; i++)\\n\\t\\t{\\n\\t\\t\\tif(i%2 == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res+A[i] ;\\n\\t\\t\\t}\\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res-A[i] ;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t  return res ;\\t\\n\\t}\\n\\t\\n\\tvoid soll()\\n\\t{\\n\\t\\tint n1 ;\\n\\t\\tScanner sc = new Scanner(System.in) ;\\n\\t\\tSystem.out.println(\" Enter the length of array required \") ;\\n\\t     n1 = sc.nextInt() ;\\n\\t\\tint A1[] = new int[n1+1] ;\\n\\t\\tSystem.out.println(\" Enter the elements of array \") ;\\n\\t\\tfor(int i = 0 ;i<n1 ; i++)\\n\\t\\t{\\n\\t\\t\\tA1[i] = sc.nextInt() ;\\n\\t\\t}\\n\\t\\tint ans = add(A1) ;\\n\\t\\tSystem.out.println(\" The sum is  \" + ans) ;\\n\\t}\\t\\n}\\n\\npublic class Main \\n{\\n\\tpublic static void main(String [] args)\\n\\t{\\n\\t\\tSoll kb = new Soll() ;\\n\\t\\tkb.soll() ;\\n\\n   }\\n\\t\\t\\n}"
                    }
                ]
            },
            {
                "id": 1771156,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "According to the site [Datacademia](https://datacadamia.com/data/type/number/significant#:~:text=Definition%20Most%20The%20most%20significant%20digit%20is%20the,least%20significant%20digit%20is%20the%20right-most%20known%20digit.) the formal definition of **Most Significant Digit** is:\n> The ***most significant digit** is the **left-most nonzero digit** \n> Where as The least significant digit is the right-most known digit.\n\nThus :\n- `n=25` :  (+2) + (-5)  = -3\n- `n=521` : (+5) + (-2) + (+1) = 4\n- `n=1234` : (+1) + (-2) + (+3) + (-4) = -2\n- `n=886996` : (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0\nHope it helps. ❤️"
                    },
                    {
                        "username": "uzeconomist0419",
                        "content": "thanks a lot"
                    },
                    {
                        "username": "qq710729301",
                        "content": "\\'The most significant digit\\' part got me. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re interested how to use math instead of strings, indexes and arrays, the solution is [here](https://leetcode.com/problems/alternating-digit-sum/solutions/3352079/python-pure-math-o-1-space-o-log-n-time-without-any-string-or-array/). One pass, O(1) space, pure math."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "Think about what happen when the index is odd or even :)"
                    },
                    {
                        "username": "Nikhil-Umesh",
                        "content": " ` public int alternateDigitSum(int number) {\n        int sum=0;\n        String s= String.valueOf(number);\n        char[]a = s.toCharArray();\n        for(int i=0;i<a.length;i++){\n            if(i%2==0){\n                sum = sum + Character.getNumericValue(a[i]);\n            }\n            else {\n                sum = sum - Character.getNumericValue(a[i]);\n            }\n        }\n\n        return sum;\n    }\n\n\nJava solution beats 100 % time"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Beat 100% in runtime\\n       int remain = n;\\n        int tempN = n;\\n        int count = 0;\\n        while (tempN > 0) {\\n            tempN = tempN / 10;\\n            count++;\\n        }\\n\\n        int sign = 1;\\n        if (count % 2 == 0) {\\n            sign = -1;\\n        }\\n\\n        int sum = 0;\\n        while (count-- > 0) {\\n            remain = n % 10;\\n            n /= 10;\\n            sum += (remain * sign);\\n            sign *= -1;\\n        }\\n        return sum;"
                    },
                    {
                        "username": "fymmmmm",
                        "content": "\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F"
                    },
                    {
                        "username": "siddharthjain14",
                        "content": "Can be easily done with log n time complexity"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sump=0,sumn=0;\\n        vector<int>v;\\n        while(n!=0){\\n            int x=n%10;\\n            v.push_back(x);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0) sump+=v[i];\\n            else sumn+=v[i];\\n        }\\n        return (sump-sumn);\\n    }\\n};\\n"
                    },
                    {
                        "username": "karan_____787",
                        "content": "import java.util.Scanner ;\\n\\nclass Soll\\n{\\n\\tint add(int []A)\\n\\t{\\n\\t\\tint res=0 ;\\n\\t\\tint n = A.length ;\\n\\t\\tfor(int i=0 ; i<n ; i++)\\n\\t\\t{\\n\\t\\t\\tif(i%2 == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res+A[i] ;\\n\\t\\t\\t}\\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res-A[i] ;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t  return res ;\\t\\n\\t}\\n\\t\\n\\tvoid soll()\\n\\t{\\n\\t\\tint n1 ;\\n\\t\\tScanner sc = new Scanner(System.in) ;\\n\\t\\tSystem.out.println(\" Enter the length of array required \") ;\\n\\t     n1 = sc.nextInt() ;\\n\\t\\tint A1[] = new int[n1+1] ;\\n\\t\\tSystem.out.println(\" Enter the elements of array \") ;\\n\\t\\tfor(int i = 0 ;i<n1 ; i++)\\n\\t\\t{\\n\\t\\t\\tA1[i] = sc.nextInt() ;\\n\\t\\t}\\n\\t\\tint ans = add(A1) ;\\n\\t\\tSystem.out.println(\" The sum is  \" + ans) ;\\n\\t}\\t\\n}\\n\\npublic class Main \\n{\\n\\tpublic static void main(String [] args)\\n\\t{\\n\\t\\tSoll kb = new Soll() ;\\n\\t\\tkb.soll() ;\\n\\n   }\\n\\t\\t\\n}"
                    }
                ]
            },
            {
                "id": 1901799,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "According to the site [Datacademia](https://datacadamia.com/data/type/number/significant#:~:text=Definition%20Most%20The%20most%20significant%20digit%20is%20the,least%20significant%20digit%20is%20the%20right-most%20known%20digit.) the formal definition of **Most Significant Digit** is:\n> The ***most significant digit** is the **left-most nonzero digit** \n> Where as The least significant digit is the right-most known digit.\n\nThus :\n- `n=25` :  (+2) + (-5)  = -3\n- `n=521` : (+5) + (-2) + (+1) = 4\n- `n=1234` : (+1) + (-2) + (+3) + (-4) = -2\n- `n=886996` : (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0\nHope it helps. ❤️"
                    },
                    {
                        "username": "uzeconomist0419",
                        "content": "thanks a lot"
                    },
                    {
                        "username": "qq710729301",
                        "content": "\\'The most significant digit\\' part got me. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re interested how to use math instead of strings, indexes and arrays, the solution is [here](https://leetcode.com/problems/alternating-digit-sum/solutions/3352079/python-pure-math-o-1-space-o-log-n-time-without-any-string-or-array/). One pass, O(1) space, pure math."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "Think about what happen when the index is odd or even :)"
                    },
                    {
                        "username": "Nikhil-Umesh",
                        "content": " ` public int alternateDigitSum(int number) {\n        int sum=0;\n        String s= String.valueOf(number);\n        char[]a = s.toCharArray();\n        for(int i=0;i<a.length;i++){\n            if(i%2==0){\n                sum = sum + Character.getNumericValue(a[i]);\n            }\n            else {\n                sum = sum - Character.getNumericValue(a[i]);\n            }\n        }\n\n        return sum;\n    }\n\n\nJava solution beats 100 % time"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Beat 100% in runtime\\n       int remain = n;\\n        int tempN = n;\\n        int count = 0;\\n        while (tempN > 0) {\\n            tempN = tempN / 10;\\n            count++;\\n        }\\n\\n        int sign = 1;\\n        if (count % 2 == 0) {\\n            sign = -1;\\n        }\\n\\n        int sum = 0;\\n        while (count-- > 0) {\\n            remain = n % 10;\\n            n /= 10;\\n            sum += (remain * sign);\\n            sign *= -1;\\n        }\\n        return sum;"
                    },
                    {
                        "username": "fymmmmm",
                        "content": "\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F"
                    },
                    {
                        "username": "siddharthjain14",
                        "content": "Can be easily done with log n time complexity"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sump=0,sumn=0;\\n        vector<int>v;\\n        while(n!=0){\\n            int x=n%10;\\n            v.push_back(x);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0) sump+=v[i];\\n            else sumn+=v[i];\\n        }\\n        return (sump-sumn);\\n    }\\n};\\n"
                    },
                    {
                        "username": "karan_____787",
                        "content": "import java.util.Scanner ;\\n\\nclass Soll\\n{\\n\\tint add(int []A)\\n\\t{\\n\\t\\tint res=0 ;\\n\\t\\tint n = A.length ;\\n\\t\\tfor(int i=0 ; i<n ; i++)\\n\\t\\t{\\n\\t\\t\\tif(i%2 == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res+A[i] ;\\n\\t\\t\\t}\\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res-A[i] ;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t  return res ;\\t\\n\\t}\\n\\t\\n\\tvoid soll()\\n\\t{\\n\\t\\tint n1 ;\\n\\t\\tScanner sc = new Scanner(System.in) ;\\n\\t\\tSystem.out.println(\" Enter the length of array required \") ;\\n\\t     n1 = sc.nextInt() ;\\n\\t\\tint A1[] = new int[n1+1] ;\\n\\t\\tSystem.out.println(\" Enter the elements of array \") ;\\n\\t\\tfor(int i = 0 ;i<n1 ; i++)\\n\\t\\t{\\n\\t\\t\\tA1[i] = sc.nextInt() ;\\n\\t\\t}\\n\\t\\tint ans = add(A1) ;\\n\\t\\tSystem.out.println(\" The sum is  \" + ans) ;\\n\\t}\\t\\n}\\n\\npublic class Main \\n{\\n\\tpublic static void main(String [] args)\\n\\t{\\n\\t\\tSoll kb = new Soll() ;\\n\\t\\tkb.soll() ;\\n\\n   }\\n\\t\\t\\n}"
                    }
                ]
            },
            {
                "id": 1838274,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "According to the site [Datacademia](https://datacadamia.com/data/type/number/significant#:~:text=Definition%20Most%20The%20most%20significant%20digit%20is%20the,least%20significant%20digit%20is%20the%20right-most%20known%20digit.) the formal definition of **Most Significant Digit** is:\n> The ***most significant digit** is the **left-most nonzero digit** \n> Where as The least significant digit is the right-most known digit.\n\nThus :\n- `n=25` :  (+2) + (-5)  = -3\n- `n=521` : (+5) + (-2) + (+1) = 4\n- `n=1234` : (+1) + (-2) + (+3) + (-4) = -2\n- `n=886996` : (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0\nHope it helps. ❤️"
                    },
                    {
                        "username": "uzeconomist0419",
                        "content": "thanks a lot"
                    },
                    {
                        "username": "qq710729301",
                        "content": "\\'The most significant digit\\' part got me. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re interested how to use math instead of strings, indexes and arrays, the solution is [here](https://leetcode.com/problems/alternating-digit-sum/solutions/3352079/python-pure-math-o-1-space-o-log-n-time-without-any-string-or-array/). One pass, O(1) space, pure math."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "Think about what happen when the index is odd or even :)"
                    },
                    {
                        "username": "Nikhil-Umesh",
                        "content": " ` public int alternateDigitSum(int number) {\n        int sum=0;\n        String s= String.valueOf(number);\n        char[]a = s.toCharArray();\n        for(int i=0;i<a.length;i++){\n            if(i%2==0){\n                sum = sum + Character.getNumericValue(a[i]);\n            }\n            else {\n                sum = sum - Character.getNumericValue(a[i]);\n            }\n        }\n\n        return sum;\n    }\n\n\nJava solution beats 100 % time"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Beat 100% in runtime\\n       int remain = n;\\n        int tempN = n;\\n        int count = 0;\\n        while (tempN > 0) {\\n            tempN = tempN / 10;\\n            count++;\\n        }\\n\\n        int sign = 1;\\n        if (count % 2 == 0) {\\n            sign = -1;\\n        }\\n\\n        int sum = 0;\\n        while (count-- > 0) {\\n            remain = n % 10;\\n            n /= 10;\\n            sum += (remain * sign);\\n            sign *= -1;\\n        }\\n        return sum;"
                    },
                    {
                        "username": "fymmmmm",
                        "content": "\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F"
                    },
                    {
                        "username": "siddharthjain14",
                        "content": "Can be easily done with log n time complexity"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sump=0,sumn=0;\\n        vector<int>v;\\n        while(n!=0){\\n            int x=n%10;\\n            v.push_back(x);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0) sump+=v[i];\\n            else sumn+=v[i];\\n        }\\n        return (sump-sumn);\\n    }\\n};\\n"
                    },
                    {
                        "username": "karan_____787",
                        "content": "import java.util.Scanner ;\\n\\nclass Soll\\n{\\n\\tint add(int []A)\\n\\t{\\n\\t\\tint res=0 ;\\n\\t\\tint n = A.length ;\\n\\t\\tfor(int i=0 ; i<n ; i++)\\n\\t\\t{\\n\\t\\t\\tif(i%2 == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res+A[i] ;\\n\\t\\t\\t}\\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res-A[i] ;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t  return res ;\\t\\n\\t}\\n\\t\\n\\tvoid soll()\\n\\t{\\n\\t\\tint n1 ;\\n\\t\\tScanner sc = new Scanner(System.in) ;\\n\\t\\tSystem.out.println(\" Enter the length of array required \") ;\\n\\t     n1 = sc.nextInt() ;\\n\\t\\tint A1[] = new int[n1+1] ;\\n\\t\\tSystem.out.println(\" Enter the elements of array \") ;\\n\\t\\tfor(int i = 0 ;i<n1 ; i++)\\n\\t\\t{\\n\\t\\t\\tA1[i] = sc.nextInt() ;\\n\\t\\t}\\n\\t\\tint ans = add(A1) ;\\n\\t\\tSystem.out.println(\" The sum is  \" + ans) ;\\n\\t}\\t\\n}\\n\\npublic class Main \\n{\\n\\tpublic static void main(String [] args)\\n\\t{\\n\\t\\tSoll kb = new Soll() ;\\n\\t\\tkb.soll() ;\\n\\n   }\\n\\t\\t\\n}"
                    }
                ]
            },
            {
                "id": 1800945,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "According to the site [Datacademia](https://datacadamia.com/data/type/number/significant#:~:text=Definition%20Most%20The%20most%20significant%20digit%20is%20the,least%20significant%20digit%20is%20the%20right-most%20known%20digit.) the formal definition of **Most Significant Digit** is:\n> The ***most significant digit** is the **left-most nonzero digit** \n> Where as The least significant digit is the right-most known digit.\n\nThus :\n- `n=25` :  (+2) + (-5)  = -3\n- `n=521` : (+5) + (-2) + (+1) = 4\n- `n=1234` : (+1) + (-2) + (+3) + (-4) = -2\n- `n=886996` : (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0\nHope it helps. ❤️"
                    },
                    {
                        "username": "uzeconomist0419",
                        "content": "thanks a lot"
                    },
                    {
                        "username": "qq710729301",
                        "content": "\\'The most significant digit\\' part got me. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re interested how to use math instead of strings, indexes and arrays, the solution is [here](https://leetcode.com/problems/alternating-digit-sum/solutions/3352079/python-pure-math-o-1-space-o-log-n-time-without-any-string-or-array/). One pass, O(1) space, pure math."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "Think about what happen when the index is odd or even :)"
                    },
                    {
                        "username": "Nikhil-Umesh",
                        "content": " ` public int alternateDigitSum(int number) {\n        int sum=0;\n        String s= String.valueOf(number);\n        char[]a = s.toCharArray();\n        for(int i=0;i<a.length;i++){\n            if(i%2==0){\n                sum = sum + Character.getNumericValue(a[i]);\n            }\n            else {\n                sum = sum - Character.getNumericValue(a[i]);\n            }\n        }\n\n        return sum;\n    }\n\n\nJava solution beats 100 % time"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Beat 100% in runtime\\n       int remain = n;\\n        int tempN = n;\\n        int count = 0;\\n        while (tempN > 0) {\\n            tempN = tempN / 10;\\n            count++;\\n        }\\n\\n        int sign = 1;\\n        if (count % 2 == 0) {\\n            sign = -1;\\n        }\\n\\n        int sum = 0;\\n        while (count-- > 0) {\\n            remain = n % 10;\\n            n /= 10;\\n            sum += (remain * sign);\\n            sign *= -1;\\n        }\\n        return sum;"
                    },
                    {
                        "username": "fymmmmm",
                        "content": "\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F"
                    },
                    {
                        "username": "siddharthjain14",
                        "content": "Can be easily done with log n time complexity"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sump=0,sumn=0;\\n        vector<int>v;\\n        while(n!=0){\\n            int x=n%10;\\n            v.push_back(x);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0) sump+=v[i];\\n            else sumn+=v[i];\\n        }\\n        return (sump-sumn);\\n    }\\n};\\n"
                    },
                    {
                        "username": "karan_____787",
                        "content": "import java.util.Scanner ;\\n\\nclass Soll\\n{\\n\\tint add(int []A)\\n\\t{\\n\\t\\tint res=0 ;\\n\\t\\tint n = A.length ;\\n\\t\\tfor(int i=0 ; i<n ; i++)\\n\\t\\t{\\n\\t\\t\\tif(i%2 == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res+A[i] ;\\n\\t\\t\\t}\\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res-A[i] ;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t  return res ;\\t\\n\\t}\\n\\t\\n\\tvoid soll()\\n\\t{\\n\\t\\tint n1 ;\\n\\t\\tScanner sc = new Scanner(System.in) ;\\n\\t\\tSystem.out.println(\" Enter the length of array required \") ;\\n\\t     n1 = sc.nextInt() ;\\n\\t\\tint A1[] = new int[n1+1] ;\\n\\t\\tSystem.out.println(\" Enter the elements of array \") ;\\n\\t\\tfor(int i = 0 ;i<n1 ; i++)\\n\\t\\t{\\n\\t\\t\\tA1[i] = sc.nextInt() ;\\n\\t\\t}\\n\\t\\tint ans = add(A1) ;\\n\\t\\tSystem.out.println(\" The sum is  \" + ans) ;\\n\\t}\\t\\n}\\n\\npublic class Main \\n{\\n\\tpublic static void main(String [] args)\\n\\t{\\n\\t\\tSoll kb = new Soll() ;\\n\\t\\tkb.soll() ;\\n\\n   }\\n\\t\\t\\n}"
                    }
                ]
            },
            {
                "id": 1769939,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "According to the site [Datacademia](https://datacadamia.com/data/type/number/significant#:~:text=Definition%20Most%20The%20most%20significant%20digit%20is%20the,least%20significant%20digit%20is%20the%20right-most%20known%20digit.) the formal definition of **Most Significant Digit** is:\n> The ***most significant digit** is the **left-most nonzero digit** \n> Where as The least significant digit is the right-most known digit.\n\nThus :\n- `n=25` :  (+2) + (-5)  = -3\n- `n=521` : (+5) + (-2) + (+1) = 4\n- `n=1234` : (+1) + (-2) + (+3) + (-4) = -2\n- `n=886996` : (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0\nHope it helps. ❤️"
                    },
                    {
                        "username": "uzeconomist0419",
                        "content": "thanks a lot"
                    },
                    {
                        "username": "qq710729301",
                        "content": "\\'The most significant digit\\' part got me. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re interested how to use math instead of strings, indexes and arrays, the solution is [here](https://leetcode.com/problems/alternating-digit-sum/solutions/3352079/python-pure-math-o-1-space-o-log-n-time-without-any-string-or-array/). One pass, O(1) space, pure math."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "Think about what happen when the index is odd or even :)"
                    },
                    {
                        "username": "Nikhil-Umesh",
                        "content": " ` public int alternateDigitSum(int number) {\n        int sum=0;\n        String s= String.valueOf(number);\n        char[]a = s.toCharArray();\n        for(int i=0;i<a.length;i++){\n            if(i%2==0){\n                sum = sum + Character.getNumericValue(a[i]);\n            }\n            else {\n                sum = sum - Character.getNumericValue(a[i]);\n            }\n        }\n\n        return sum;\n    }\n\n\nJava solution beats 100 % time"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Beat 100% in runtime\\n       int remain = n;\\n        int tempN = n;\\n        int count = 0;\\n        while (tempN > 0) {\\n            tempN = tempN / 10;\\n            count++;\\n        }\\n\\n        int sign = 1;\\n        if (count % 2 == 0) {\\n            sign = -1;\\n        }\\n\\n        int sum = 0;\\n        while (count-- > 0) {\\n            remain = n % 10;\\n            n /= 10;\\n            sum += (remain * sign);\\n            sign *= -1;\\n        }\\n        return sum;"
                    },
                    {
                        "username": "fymmmmm",
                        "content": "\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F"
                    },
                    {
                        "username": "siddharthjain14",
                        "content": "Can be easily done with log n time complexity"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sump=0,sumn=0;\\n        vector<int>v;\\n        while(n!=0){\\n            int x=n%10;\\n            v.push_back(x);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0) sump+=v[i];\\n            else sumn+=v[i];\\n        }\\n        return (sump-sumn);\\n    }\\n};\\n"
                    },
                    {
                        "username": "karan_____787",
                        "content": "import java.util.Scanner ;\\n\\nclass Soll\\n{\\n\\tint add(int []A)\\n\\t{\\n\\t\\tint res=0 ;\\n\\t\\tint n = A.length ;\\n\\t\\tfor(int i=0 ; i<n ; i++)\\n\\t\\t{\\n\\t\\t\\tif(i%2 == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res+A[i] ;\\n\\t\\t\\t}\\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res-A[i] ;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t  return res ;\\t\\n\\t}\\n\\t\\n\\tvoid soll()\\n\\t{\\n\\t\\tint n1 ;\\n\\t\\tScanner sc = new Scanner(System.in) ;\\n\\t\\tSystem.out.println(\" Enter the length of array required \") ;\\n\\t     n1 = sc.nextInt() ;\\n\\t\\tint A1[] = new int[n1+1] ;\\n\\t\\tSystem.out.println(\" Enter the elements of array \") ;\\n\\t\\tfor(int i = 0 ;i<n1 ; i++)\\n\\t\\t{\\n\\t\\t\\tA1[i] = sc.nextInt() ;\\n\\t\\t}\\n\\t\\tint ans = add(A1) ;\\n\\t\\tSystem.out.println(\" The sum is  \" + ans) ;\\n\\t}\\t\\n}\\n\\npublic class Main \\n{\\n\\tpublic static void main(String [] args)\\n\\t{\\n\\t\\tSoll kb = new Soll() ;\\n\\t\\tkb.soll() ;\\n\\n   }\\n\\t\\t\\n}"
                    }
                ]
            },
            {
                "id": 1784826,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "According to the site [Datacademia](https://datacadamia.com/data/type/number/significant#:~:text=Definition%20Most%20The%20most%20significant%20digit%20is%20the,least%20significant%20digit%20is%20the%20right-most%20known%20digit.) the formal definition of **Most Significant Digit** is:\n> The ***most significant digit** is the **left-most nonzero digit** \n> Where as The least significant digit is the right-most known digit.\n\nThus :\n- `n=25` :  (+2) + (-5)  = -3\n- `n=521` : (+5) + (-2) + (+1) = 4\n- `n=1234` : (+1) + (-2) + (+3) + (-4) = -2\n- `n=886996` : (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0\nHope it helps. ❤️"
                    },
                    {
                        "username": "uzeconomist0419",
                        "content": "thanks a lot"
                    },
                    {
                        "username": "qq710729301",
                        "content": "\\'The most significant digit\\' part got me. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re interested how to use math instead of strings, indexes and arrays, the solution is [here](https://leetcode.com/problems/alternating-digit-sum/solutions/3352079/python-pure-math-o-1-space-o-log-n-time-without-any-string-or-array/). One pass, O(1) space, pure math."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "Think about what happen when the index is odd or even :)"
                    },
                    {
                        "username": "Nikhil-Umesh",
                        "content": " ` public int alternateDigitSum(int number) {\n        int sum=0;\n        String s= String.valueOf(number);\n        char[]a = s.toCharArray();\n        for(int i=0;i<a.length;i++){\n            if(i%2==0){\n                sum = sum + Character.getNumericValue(a[i]);\n            }\n            else {\n                sum = sum - Character.getNumericValue(a[i]);\n            }\n        }\n\n        return sum;\n    }\n\n\nJava solution beats 100 % time"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Beat 100% in runtime\\n       int remain = n;\\n        int tempN = n;\\n        int count = 0;\\n        while (tempN > 0) {\\n            tempN = tempN / 10;\\n            count++;\\n        }\\n\\n        int sign = 1;\\n        if (count % 2 == 0) {\\n            sign = -1;\\n        }\\n\\n        int sum = 0;\\n        while (count-- > 0) {\\n            remain = n % 10;\\n            n /= 10;\\n            sum += (remain * sign);\\n            sign *= -1;\\n        }\\n        return sum;"
                    },
                    {
                        "username": "fymmmmm",
                        "content": "\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F"
                    },
                    {
                        "username": "siddharthjain14",
                        "content": "Can be easily done with log n time complexity"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sump=0,sumn=0;\\n        vector<int>v;\\n        while(n!=0){\\n            int x=n%10;\\n            v.push_back(x);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0) sump+=v[i];\\n            else sumn+=v[i];\\n        }\\n        return (sump-sumn);\\n    }\\n};\\n"
                    },
                    {
                        "username": "karan_____787",
                        "content": "import java.util.Scanner ;\\n\\nclass Soll\\n{\\n\\tint add(int []A)\\n\\t{\\n\\t\\tint res=0 ;\\n\\t\\tint n = A.length ;\\n\\t\\tfor(int i=0 ; i<n ; i++)\\n\\t\\t{\\n\\t\\t\\tif(i%2 == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res+A[i] ;\\n\\t\\t\\t}\\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res-A[i] ;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t  return res ;\\t\\n\\t}\\n\\t\\n\\tvoid soll()\\n\\t{\\n\\t\\tint n1 ;\\n\\t\\tScanner sc = new Scanner(System.in) ;\\n\\t\\tSystem.out.println(\" Enter the length of array required \") ;\\n\\t     n1 = sc.nextInt() ;\\n\\t\\tint A1[] = new int[n1+1] ;\\n\\t\\tSystem.out.println(\" Enter the elements of array \") ;\\n\\t\\tfor(int i = 0 ;i<n1 ; i++)\\n\\t\\t{\\n\\t\\t\\tA1[i] = sc.nextInt() ;\\n\\t\\t}\\n\\t\\tint ans = add(A1) ;\\n\\t\\tSystem.out.println(\" The sum is  \" + ans) ;\\n\\t}\\t\\n}\\n\\npublic class Main \\n{\\n\\tpublic static void main(String [] args)\\n\\t{\\n\\t\\tSoll kb = new Soll() ;\\n\\t\\tkb.soll() ;\\n\\n   }\\n\\t\\t\\n}"
                    }
                ]
            },
            {
                "id": 1846382,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "According to the site [Datacademia](https://datacadamia.com/data/type/number/significant#:~:text=Definition%20Most%20The%20most%20significant%20digit%20is%20the,least%20significant%20digit%20is%20the%20right-most%20known%20digit.) the formal definition of **Most Significant Digit** is:\n> The ***most significant digit** is the **left-most nonzero digit** \n> Where as The least significant digit is the right-most known digit.\n\nThus :\n- `n=25` :  (+2) + (-5)  = -3\n- `n=521` : (+5) + (-2) + (+1) = 4\n- `n=1234` : (+1) + (-2) + (+3) + (-4) = -2\n- `n=886996` : (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0\nHope it helps. ❤️"
                    },
                    {
                        "username": "uzeconomist0419",
                        "content": "thanks a lot"
                    },
                    {
                        "username": "qq710729301",
                        "content": "\\'The most significant digit\\' part got me. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re interested how to use math instead of strings, indexes and arrays, the solution is [here](https://leetcode.com/problems/alternating-digit-sum/solutions/3352079/python-pure-math-o-1-space-o-log-n-time-without-any-string-or-array/). One pass, O(1) space, pure math."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "Think about what happen when the index is odd or even :)"
                    },
                    {
                        "username": "Nikhil-Umesh",
                        "content": " ` public int alternateDigitSum(int number) {\n        int sum=0;\n        String s= String.valueOf(number);\n        char[]a = s.toCharArray();\n        for(int i=0;i<a.length;i++){\n            if(i%2==0){\n                sum = sum + Character.getNumericValue(a[i]);\n            }\n            else {\n                sum = sum - Character.getNumericValue(a[i]);\n            }\n        }\n\n        return sum;\n    }\n\n\nJava solution beats 100 % time"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Beat 100% in runtime\\n       int remain = n;\\n        int tempN = n;\\n        int count = 0;\\n        while (tempN > 0) {\\n            tempN = tempN / 10;\\n            count++;\\n        }\\n\\n        int sign = 1;\\n        if (count % 2 == 0) {\\n            sign = -1;\\n        }\\n\\n        int sum = 0;\\n        while (count-- > 0) {\\n            remain = n % 10;\\n            n /= 10;\\n            sum += (remain * sign);\\n            sign *= -1;\\n        }\\n        return sum;"
                    },
                    {
                        "username": "fymmmmm",
                        "content": "\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F"
                    },
                    {
                        "username": "siddharthjain14",
                        "content": "Can be easily done with log n time complexity"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sump=0,sumn=0;\\n        vector<int>v;\\n        while(n!=0){\\n            int x=n%10;\\n            v.push_back(x);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0) sump+=v[i];\\n            else sumn+=v[i];\\n        }\\n        return (sump-sumn);\\n    }\\n};\\n"
                    },
                    {
                        "username": "karan_____787",
                        "content": "import java.util.Scanner ;\\n\\nclass Soll\\n{\\n\\tint add(int []A)\\n\\t{\\n\\t\\tint res=0 ;\\n\\t\\tint n = A.length ;\\n\\t\\tfor(int i=0 ; i<n ; i++)\\n\\t\\t{\\n\\t\\t\\tif(i%2 == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res+A[i] ;\\n\\t\\t\\t}\\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res-A[i] ;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t  return res ;\\t\\n\\t}\\n\\t\\n\\tvoid soll()\\n\\t{\\n\\t\\tint n1 ;\\n\\t\\tScanner sc = new Scanner(System.in) ;\\n\\t\\tSystem.out.println(\" Enter the length of array required \") ;\\n\\t     n1 = sc.nextInt() ;\\n\\t\\tint A1[] = new int[n1+1] ;\\n\\t\\tSystem.out.println(\" Enter the elements of array \") ;\\n\\t\\tfor(int i = 0 ;i<n1 ; i++)\\n\\t\\t{\\n\\t\\t\\tA1[i] = sc.nextInt() ;\\n\\t\\t}\\n\\t\\tint ans = add(A1) ;\\n\\t\\tSystem.out.println(\" The sum is  \" + ans) ;\\n\\t}\\t\\n}\\n\\npublic class Main \\n{\\n\\tpublic static void main(String [] args)\\n\\t{\\n\\t\\tSoll kb = new Soll() ;\\n\\t\\tkb.soll() ;\\n\\n   }\\n\\t\\t\\n}"
                    }
                ]
            },
            {
                "id": 1840636,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "According to the site [Datacademia](https://datacadamia.com/data/type/number/significant#:~:text=Definition%20Most%20The%20most%20significant%20digit%20is%20the,least%20significant%20digit%20is%20the%20right-most%20known%20digit.) the formal definition of **Most Significant Digit** is:\n> The ***most significant digit** is the **left-most nonzero digit** \n> Where as The least significant digit is the right-most known digit.\n\nThus :\n- `n=25` :  (+2) + (-5)  = -3\n- `n=521` : (+5) + (-2) + (+1) = 4\n- `n=1234` : (+1) + (-2) + (+3) + (-4) = -2\n- `n=886996` : (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0\nHope it helps. ❤️"
                    },
                    {
                        "username": "uzeconomist0419",
                        "content": "thanks a lot"
                    },
                    {
                        "username": "qq710729301",
                        "content": "\\'The most significant digit\\' part got me. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re interested how to use math instead of strings, indexes and arrays, the solution is [here](https://leetcode.com/problems/alternating-digit-sum/solutions/3352079/python-pure-math-o-1-space-o-log-n-time-without-any-string-or-array/). One pass, O(1) space, pure math."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "Think about what happen when the index is odd or even :)"
                    },
                    {
                        "username": "Nikhil-Umesh",
                        "content": " ` public int alternateDigitSum(int number) {\n        int sum=0;\n        String s= String.valueOf(number);\n        char[]a = s.toCharArray();\n        for(int i=0;i<a.length;i++){\n            if(i%2==0){\n                sum = sum + Character.getNumericValue(a[i]);\n            }\n            else {\n                sum = sum - Character.getNumericValue(a[i]);\n            }\n        }\n\n        return sum;\n    }\n\n\nJava solution beats 100 % time"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Beat 100% in runtime\\n       int remain = n;\\n        int tempN = n;\\n        int count = 0;\\n        while (tempN > 0) {\\n            tempN = tempN / 10;\\n            count++;\\n        }\\n\\n        int sign = 1;\\n        if (count % 2 == 0) {\\n            sign = -1;\\n        }\\n\\n        int sum = 0;\\n        while (count-- > 0) {\\n            remain = n % 10;\\n            n /= 10;\\n            sum += (remain * sign);\\n            sign *= -1;\\n        }\\n        return sum;"
                    },
                    {
                        "username": "fymmmmm",
                        "content": "\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F"
                    },
                    {
                        "username": "siddharthjain14",
                        "content": "Can be easily done with log n time complexity"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sump=0,sumn=0;\\n        vector<int>v;\\n        while(n!=0){\\n            int x=n%10;\\n            v.push_back(x);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0) sump+=v[i];\\n            else sumn+=v[i];\\n        }\\n        return (sump-sumn);\\n    }\\n};\\n"
                    },
                    {
                        "username": "karan_____787",
                        "content": "import java.util.Scanner ;\\n\\nclass Soll\\n{\\n\\tint add(int []A)\\n\\t{\\n\\t\\tint res=0 ;\\n\\t\\tint n = A.length ;\\n\\t\\tfor(int i=0 ; i<n ; i++)\\n\\t\\t{\\n\\t\\t\\tif(i%2 == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res+A[i] ;\\n\\t\\t\\t}\\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res-A[i] ;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t  return res ;\\t\\n\\t}\\n\\t\\n\\tvoid soll()\\n\\t{\\n\\t\\tint n1 ;\\n\\t\\tScanner sc = new Scanner(System.in) ;\\n\\t\\tSystem.out.println(\" Enter the length of array required \") ;\\n\\t     n1 = sc.nextInt() ;\\n\\t\\tint A1[] = new int[n1+1] ;\\n\\t\\tSystem.out.println(\" Enter the elements of array \") ;\\n\\t\\tfor(int i = 0 ;i<n1 ; i++)\\n\\t\\t{\\n\\t\\t\\tA1[i] = sc.nextInt() ;\\n\\t\\t}\\n\\t\\tint ans = add(A1) ;\\n\\t\\tSystem.out.println(\" The sum is  \" + ans) ;\\n\\t}\\t\\n}\\n\\npublic class Main \\n{\\n\\tpublic static void main(String [] args)\\n\\t{\\n\\t\\tSoll kb = new Soll() ;\\n\\t\\tkb.soll() ;\\n\\n   }\\n\\t\\t\\n}"
                    }
                ]
            },
            {
                "id": 1777716,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "According to the site [Datacademia](https://datacadamia.com/data/type/number/significant#:~:text=Definition%20Most%20The%20most%20significant%20digit%20is%20the,least%20significant%20digit%20is%20the%20right-most%20known%20digit.) the formal definition of **Most Significant Digit** is:\n> The ***most significant digit** is the **left-most nonzero digit** \n> Where as The least significant digit is the right-most known digit.\n\nThus :\n- `n=25` :  (+2) + (-5)  = -3\n- `n=521` : (+5) + (-2) + (+1) = 4\n- `n=1234` : (+1) + (-2) + (+3) + (-4) = -2\n- `n=886996` : (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0\nHope it helps. ❤️"
                    },
                    {
                        "username": "uzeconomist0419",
                        "content": "thanks a lot"
                    },
                    {
                        "username": "qq710729301",
                        "content": "\\'The most significant digit\\' part got me. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re interested how to use math instead of strings, indexes and arrays, the solution is [here](https://leetcode.com/problems/alternating-digit-sum/solutions/3352079/python-pure-math-o-1-space-o-log-n-time-without-any-string-or-array/). One pass, O(1) space, pure math."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "Think about what happen when the index is odd or even :)"
                    },
                    {
                        "username": "Nikhil-Umesh",
                        "content": " ` public int alternateDigitSum(int number) {\n        int sum=0;\n        String s= String.valueOf(number);\n        char[]a = s.toCharArray();\n        for(int i=0;i<a.length;i++){\n            if(i%2==0){\n                sum = sum + Character.getNumericValue(a[i]);\n            }\n            else {\n                sum = sum - Character.getNumericValue(a[i]);\n            }\n        }\n\n        return sum;\n    }\n\n\nJava solution beats 100 % time"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Beat 100% in runtime\\n       int remain = n;\\n        int tempN = n;\\n        int count = 0;\\n        while (tempN > 0) {\\n            tempN = tempN / 10;\\n            count++;\\n        }\\n\\n        int sign = 1;\\n        if (count % 2 == 0) {\\n            sign = -1;\\n        }\\n\\n        int sum = 0;\\n        while (count-- > 0) {\\n            remain = n % 10;\\n            n /= 10;\\n            sum += (remain * sign);\\n            sign *= -1;\\n        }\\n        return sum;"
                    },
                    {
                        "username": "fymmmmm",
                        "content": "\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F"
                    },
                    {
                        "username": "siddharthjain14",
                        "content": "Can be easily done with log n time complexity"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sump=0,sumn=0;\\n        vector<int>v;\\n        while(n!=0){\\n            int x=n%10;\\n            v.push_back(x);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0) sump+=v[i];\\n            else sumn+=v[i];\\n        }\\n        return (sump-sumn);\\n    }\\n};\\n"
                    },
                    {
                        "username": "karan_____787",
                        "content": "import java.util.Scanner ;\\n\\nclass Soll\\n{\\n\\tint add(int []A)\\n\\t{\\n\\t\\tint res=0 ;\\n\\t\\tint n = A.length ;\\n\\t\\tfor(int i=0 ; i<n ; i++)\\n\\t\\t{\\n\\t\\t\\tif(i%2 == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res+A[i] ;\\n\\t\\t\\t}\\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res-A[i] ;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t  return res ;\\t\\n\\t}\\n\\t\\n\\tvoid soll()\\n\\t{\\n\\t\\tint n1 ;\\n\\t\\tScanner sc = new Scanner(System.in) ;\\n\\t\\tSystem.out.println(\" Enter the length of array required \") ;\\n\\t     n1 = sc.nextInt() ;\\n\\t\\tint A1[] = new int[n1+1] ;\\n\\t\\tSystem.out.println(\" Enter the elements of array \") ;\\n\\t\\tfor(int i = 0 ;i<n1 ; i++)\\n\\t\\t{\\n\\t\\t\\tA1[i] = sc.nextInt() ;\\n\\t\\t}\\n\\t\\tint ans = add(A1) ;\\n\\t\\tSystem.out.println(\" The sum is  \" + ans) ;\\n\\t}\\t\\n}\\n\\npublic class Main \\n{\\n\\tpublic static void main(String [] args)\\n\\t{\\n\\t\\tSoll kb = new Soll() ;\\n\\t\\tkb.soll() ;\\n\\n   }\\n\\t\\t\\n}"
                    }
                ]
            },
            {
                "id": 1777261,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "According to the site [Datacademia](https://datacadamia.com/data/type/number/significant#:~:text=Definition%20Most%20The%20most%20significant%20digit%20is%20the,least%20significant%20digit%20is%20the%20right-most%20known%20digit.) the formal definition of **Most Significant Digit** is:\n> The ***most significant digit** is the **left-most nonzero digit** \n> Where as The least significant digit is the right-most known digit.\n\nThus :\n- `n=25` :  (+2) + (-5)  = -3\n- `n=521` : (+5) + (-2) + (+1) = 4\n- `n=1234` : (+1) + (-2) + (+3) + (-4) = -2\n- `n=886996` : (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0\nHope it helps. ❤️"
                    },
                    {
                        "username": "uzeconomist0419",
                        "content": "thanks a lot"
                    },
                    {
                        "username": "qq710729301",
                        "content": "\\'The most significant digit\\' part got me. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re interested how to use math instead of strings, indexes and arrays, the solution is [here](https://leetcode.com/problems/alternating-digit-sum/solutions/3352079/python-pure-math-o-1-space-o-log-n-time-without-any-string-or-array/). One pass, O(1) space, pure math."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "Think about what happen when the index is odd or even :)"
                    },
                    {
                        "username": "Nikhil-Umesh",
                        "content": " ` public int alternateDigitSum(int number) {\n        int sum=0;\n        String s= String.valueOf(number);\n        char[]a = s.toCharArray();\n        for(int i=0;i<a.length;i++){\n            if(i%2==0){\n                sum = sum + Character.getNumericValue(a[i]);\n            }\n            else {\n                sum = sum - Character.getNumericValue(a[i]);\n            }\n        }\n\n        return sum;\n    }\n\n\nJava solution beats 100 % time"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Beat 100% in runtime\\n       int remain = n;\\n        int tempN = n;\\n        int count = 0;\\n        while (tempN > 0) {\\n            tempN = tempN / 10;\\n            count++;\\n        }\\n\\n        int sign = 1;\\n        if (count % 2 == 0) {\\n            sign = -1;\\n        }\\n\\n        int sum = 0;\\n        while (count-- > 0) {\\n            remain = n % 10;\\n            n /= 10;\\n            sum += (remain * sign);\\n            sign *= -1;\\n        }\\n        return sum;"
                    },
                    {
                        "username": "fymmmmm",
                        "content": "\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F"
                    },
                    {
                        "username": "siddharthjain14",
                        "content": "Can be easily done with log n time complexity"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sump=0,sumn=0;\\n        vector<int>v;\\n        while(n!=0){\\n            int x=n%10;\\n            v.push_back(x);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0) sump+=v[i];\\n            else sumn+=v[i];\\n        }\\n        return (sump-sumn);\\n    }\\n};\\n"
                    },
                    {
                        "username": "karan_____787",
                        "content": "import java.util.Scanner ;\\n\\nclass Soll\\n{\\n\\tint add(int []A)\\n\\t{\\n\\t\\tint res=0 ;\\n\\t\\tint n = A.length ;\\n\\t\\tfor(int i=0 ; i<n ; i++)\\n\\t\\t{\\n\\t\\t\\tif(i%2 == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res+A[i] ;\\n\\t\\t\\t}\\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res-A[i] ;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t  return res ;\\t\\n\\t}\\n\\t\\n\\tvoid soll()\\n\\t{\\n\\t\\tint n1 ;\\n\\t\\tScanner sc = new Scanner(System.in) ;\\n\\t\\tSystem.out.println(\" Enter the length of array required \") ;\\n\\t     n1 = sc.nextInt() ;\\n\\t\\tint A1[] = new int[n1+1] ;\\n\\t\\tSystem.out.println(\" Enter the elements of array \") ;\\n\\t\\tfor(int i = 0 ;i<n1 ; i++)\\n\\t\\t{\\n\\t\\t\\tA1[i] = sc.nextInt() ;\\n\\t\\t}\\n\\t\\tint ans = add(A1) ;\\n\\t\\tSystem.out.println(\" The sum is  \" + ans) ;\\n\\t}\\t\\n}\\n\\npublic class Main \\n{\\n\\tpublic static void main(String [] args)\\n\\t{\\n\\t\\tSoll kb = new Soll() ;\\n\\t\\tkb.soll() ;\\n\\n   }\\n\\t\\t\\n}"
                    }
                ]
            },
            {
                "id": 1771156,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "According to the site [Datacademia](https://datacadamia.com/data/type/number/significant#:~:text=Definition%20Most%20The%20most%20significant%20digit%20is%20the,least%20significant%20digit%20is%20the%20right-most%20known%20digit.) the formal definition of **Most Significant Digit** is:\n> The ***most significant digit** is the **left-most nonzero digit** \n> Where as The least significant digit is the right-most known digit.\n\nThus :\n- `n=25` :  (+2) + (-5)  = -3\n- `n=521` : (+5) + (-2) + (+1) = 4\n- `n=1234` : (+1) + (-2) + (+3) + (-4) = -2\n- `n=886996` : (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0\nHope it helps. ❤️"
                    },
                    {
                        "username": "uzeconomist0419",
                        "content": "thanks a lot"
                    },
                    {
                        "username": "qq710729301",
                        "content": "\\'The most significant digit\\' part got me. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re interested how to use math instead of strings, indexes and arrays, the solution is [here](https://leetcode.com/problems/alternating-digit-sum/solutions/3352079/python-pure-math-o-1-space-o-log-n-time-without-any-string-or-array/). One pass, O(1) space, pure math."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "Think about what happen when the index is odd or even :)"
                    },
                    {
                        "username": "Nikhil-Umesh",
                        "content": " ` public int alternateDigitSum(int number) {\n        int sum=0;\n        String s= String.valueOf(number);\n        char[]a = s.toCharArray();\n        for(int i=0;i<a.length;i++){\n            if(i%2==0){\n                sum = sum + Character.getNumericValue(a[i]);\n            }\n            else {\n                sum = sum - Character.getNumericValue(a[i]);\n            }\n        }\n\n        return sum;\n    }\n\n\nJava solution beats 100 % time"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Beat 100% in runtime\\n       int remain = n;\\n        int tempN = n;\\n        int count = 0;\\n        while (tempN > 0) {\\n            tempN = tempN / 10;\\n            count++;\\n        }\\n\\n        int sign = 1;\\n        if (count % 2 == 0) {\\n            sign = -1;\\n        }\\n\\n        int sum = 0;\\n        while (count-- > 0) {\\n            remain = n % 10;\\n            n /= 10;\\n            sum += (remain * sign);\\n            sign *= -1;\\n        }\\n        return sum;"
                    },
                    {
                        "username": "fymmmmm",
                        "content": "\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F"
                    },
                    {
                        "username": "siddharthjain14",
                        "content": "Can be easily done with log n time complexity"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sump=0,sumn=0;\\n        vector<int>v;\\n        while(n!=0){\\n            int x=n%10;\\n            v.push_back(x);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0) sump+=v[i];\\n            else sumn+=v[i];\\n        }\\n        return (sump-sumn);\\n    }\\n};\\n"
                    },
                    {
                        "username": "karan_____787",
                        "content": "import java.util.Scanner ;\\n\\nclass Soll\\n{\\n\\tint add(int []A)\\n\\t{\\n\\t\\tint res=0 ;\\n\\t\\tint n = A.length ;\\n\\t\\tfor(int i=0 ; i<n ; i++)\\n\\t\\t{\\n\\t\\t\\tif(i%2 == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res+A[i] ;\\n\\t\\t\\t}\\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res-A[i] ;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t  return res ;\\t\\n\\t}\\n\\t\\n\\tvoid soll()\\n\\t{\\n\\t\\tint n1 ;\\n\\t\\tScanner sc = new Scanner(System.in) ;\\n\\t\\tSystem.out.println(\" Enter the length of array required \") ;\\n\\t     n1 = sc.nextInt() ;\\n\\t\\tint A1[] = new int[n1+1] ;\\n\\t\\tSystem.out.println(\" Enter the elements of array \") ;\\n\\t\\tfor(int i = 0 ;i<n1 ; i++)\\n\\t\\t{\\n\\t\\t\\tA1[i] = sc.nextInt() ;\\n\\t\\t}\\n\\t\\tint ans = add(A1) ;\\n\\t\\tSystem.out.println(\" The sum is  \" + ans) ;\\n\\t}\\t\\n}\\n\\npublic class Main \\n{\\n\\tpublic static void main(String [] args)\\n\\t{\\n\\t\\tSoll kb = new Soll() ;\\n\\t\\tkb.soll() ;\\n\\n   }\\n\\t\\t\\n}"
                    }
                ]
            },
            {
                "id": 1901799,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "According to the site [Datacademia](https://datacadamia.com/data/type/number/significant#:~:text=Definition%20Most%20The%20most%20significant%20digit%20is%20the,least%20significant%20digit%20is%20the%20right-most%20known%20digit.) the formal definition of **Most Significant Digit** is:\n> The ***most significant digit** is the **left-most nonzero digit** \n> Where as The least significant digit is the right-most known digit.\n\nThus :\n- `n=25` :  (+2) + (-5)  = -3\n- `n=521` : (+5) + (-2) + (+1) = 4\n- `n=1234` : (+1) + (-2) + (+3) + (-4) = -2\n- `n=886996` : (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0\nHope it helps. ❤️"
                    },
                    {
                        "username": "uzeconomist0419",
                        "content": "thanks a lot"
                    },
                    {
                        "username": "qq710729301",
                        "content": "\\'The most significant digit\\' part got me. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re interested how to use math instead of strings, indexes and arrays, the solution is [here](https://leetcode.com/problems/alternating-digit-sum/solutions/3352079/python-pure-math-o-1-space-o-log-n-time-without-any-string-or-array/). One pass, O(1) space, pure math."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "Think about what happen when the index is odd or even :)"
                    },
                    {
                        "username": "Nikhil-Umesh",
                        "content": " ` public int alternateDigitSum(int number) {\n        int sum=0;\n        String s= String.valueOf(number);\n        char[]a = s.toCharArray();\n        for(int i=0;i<a.length;i++){\n            if(i%2==0){\n                sum = sum + Character.getNumericValue(a[i]);\n            }\n            else {\n                sum = sum - Character.getNumericValue(a[i]);\n            }\n        }\n\n        return sum;\n    }\n\n\nJava solution beats 100 % time"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Beat 100% in runtime\\n       int remain = n;\\n        int tempN = n;\\n        int count = 0;\\n        while (tempN > 0) {\\n            tempN = tempN / 10;\\n            count++;\\n        }\\n\\n        int sign = 1;\\n        if (count % 2 == 0) {\\n            sign = -1;\\n        }\\n\\n        int sum = 0;\\n        while (count-- > 0) {\\n            remain = n % 10;\\n            n /= 10;\\n            sum += (remain * sign);\\n            sign *= -1;\\n        }\\n        return sum;"
                    },
                    {
                        "username": "fymmmmm",
                        "content": "\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F"
                    },
                    {
                        "username": "siddharthjain14",
                        "content": "Can be easily done with log n time complexity"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sump=0,sumn=0;\\n        vector<int>v;\\n        while(n!=0){\\n            int x=n%10;\\n            v.push_back(x);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0) sump+=v[i];\\n            else sumn+=v[i];\\n        }\\n        return (sump-sumn);\\n    }\\n};\\n"
                    },
                    {
                        "username": "karan_____787",
                        "content": "import java.util.Scanner ;\\n\\nclass Soll\\n{\\n\\tint add(int []A)\\n\\t{\\n\\t\\tint res=0 ;\\n\\t\\tint n = A.length ;\\n\\t\\tfor(int i=0 ; i<n ; i++)\\n\\t\\t{\\n\\t\\t\\tif(i%2 == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res+A[i] ;\\n\\t\\t\\t}\\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res-A[i] ;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t  return res ;\\t\\n\\t}\\n\\t\\n\\tvoid soll()\\n\\t{\\n\\t\\tint n1 ;\\n\\t\\tScanner sc = new Scanner(System.in) ;\\n\\t\\tSystem.out.println(\" Enter the length of array required \") ;\\n\\t     n1 = sc.nextInt() ;\\n\\t\\tint A1[] = new int[n1+1] ;\\n\\t\\tSystem.out.println(\" Enter the elements of array \") ;\\n\\t\\tfor(int i = 0 ;i<n1 ; i++)\\n\\t\\t{\\n\\t\\t\\tA1[i] = sc.nextInt() ;\\n\\t\\t}\\n\\t\\tint ans = add(A1) ;\\n\\t\\tSystem.out.println(\" The sum is  \" + ans) ;\\n\\t}\\t\\n}\\n\\npublic class Main \\n{\\n\\tpublic static void main(String [] args)\\n\\t{\\n\\t\\tSoll kb = new Soll() ;\\n\\t\\tkb.soll() ;\\n\\n   }\\n\\t\\t\\n}"
                    }
                ]
            },
            {
                "id": 1838274,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "According to the site [Datacademia](https://datacadamia.com/data/type/number/significant#:~:text=Definition%20Most%20The%20most%20significant%20digit%20is%20the,least%20significant%20digit%20is%20the%20right-most%20known%20digit.) the formal definition of **Most Significant Digit** is:\n> The ***most significant digit** is the **left-most nonzero digit** \n> Where as The least significant digit is the right-most known digit.\n\nThus :\n- `n=25` :  (+2) + (-5)  = -3\n- `n=521` : (+5) + (-2) + (+1) = 4\n- `n=1234` : (+1) + (-2) + (+3) + (-4) = -2\n- `n=886996` : (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0\nHope it helps. ❤️"
                    },
                    {
                        "username": "uzeconomist0419",
                        "content": "thanks a lot"
                    },
                    {
                        "username": "qq710729301",
                        "content": "\\'The most significant digit\\' part got me. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re interested how to use math instead of strings, indexes and arrays, the solution is [here](https://leetcode.com/problems/alternating-digit-sum/solutions/3352079/python-pure-math-o-1-space-o-log-n-time-without-any-string-or-array/). One pass, O(1) space, pure math."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "Think about what happen when the index is odd or even :)"
                    },
                    {
                        "username": "Nikhil-Umesh",
                        "content": " ` public int alternateDigitSum(int number) {\n        int sum=0;\n        String s= String.valueOf(number);\n        char[]a = s.toCharArray();\n        for(int i=0;i<a.length;i++){\n            if(i%2==0){\n                sum = sum + Character.getNumericValue(a[i]);\n            }\n            else {\n                sum = sum - Character.getNumericValue(a[i]);\n            }\n        }\n\n        return sum;\n    }\n\n\nJava solution beats 100 % time"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Beat 100% in runtime\\n       int remain = n;\\n        int tempN = n;\\n        int count = 0;\\n        while (tempN > 0) {\\n            tempN = tempN / 10;\\n            count++;\\n        }\\n\\n        int sign = 1;\\n        if (count % 2 == 0) {\\n            sign = -1;\\n        }\\n\\n        int sum = 0;\\n        while (count-- > 0) {\\n            remain = n % 10;\\n            n /= 10;\\n            sum += (remain * sign);\\n            sign *= -1;\\n        }\\n        return sum;"
                    },
                    {
                        "username": "fymmmmm",
                        "content": "\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F"
                    },
                    {
                        "username": "siddharthjain14",
                        "content": "Can be easily done with log n time complexity"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sump=0,sumn=0;\\n        vector<int>v;\\n        while(n!=0){\\n            int x=n%10;\\n            v.push_back(x);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0) sump+=v[i];\\n            else sumn+=v[i];\\n        }\\n        return (sump-sumn);\\n    }\\n};\\n"
                    },
                    {
                        "username": "karan_____787",
                        "content": "import java.util.Scanner ;\\n\\nclass Soll\\n{\\n\\tint add(int []A)\\n\\t{\\n\\t\\tint res=0 ;\\n\\t\\tint n = A.length ;\\n\\t\\tfor(int i=0 ; i<n ; i++)\\n\\t\\t{\\n\\t\\t\\tif(i%2 == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res+A[i] ;\\n\\t\\t\\t}\\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res-A[i] ;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t  return res ;\\t\\n\\t}\\n\\t\\n\\tvoid soll()\\n\\t{\\n\\t\\tint n1 ;\\n\\t\\tScanner sc = new Scanner(System.in) ;\\n\\t\\tSystem.out.println(\" Enter the length of array required \") ;\\n\\t     n1 = sc.nextInt() ;\\n\\t\\tint A1[] = new int[n1+1] ;\\n\\t\\tSystem.out.println(\" Enter the elements of array \") ;\\n\\t\\tfor(int i = 0 ;i<n1 ; i++)\\n\\t\\t{\\n\\t\\t\\tA1[i] = sc.nextInt() ;\\n\\t\\t}\\n\\t\\tint ans = add(A1) ;\\n\\t\\tSystem.out.println(\" The sum is  \" + ans) ;\\n\\t}\\t\\n}\\n\\npublic class Main \\n{\\n\\tpublic static void main(String [] args)\\n\\t{\\n\\t\\tSoll kb = new Soll() ;\\n\\t\\tkb.soll() ;\\n\\n   }\\n\\t\\t\\n}"
                    }
                ]
            },
            {
                "id": 1800945,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "According to the site [Datacademia](https://datacadamia.com/data/type/number/significant#:~:text=Definition%20Most%20The%20most%20significant%20digit%20is%20the,least%20significant%20digit%20is%20the%20right-most%20known%20digit.) the formal definition of **Most Significant Digit** is:\n> The ***most significant digit** is the **left-most nonzero digit** \n> Where as The least significant digit is the right-most known digit.\n\nThus :\n- `n=25` :  (+2) + (-5)  = -3\n- `n=521` : (+5) + (-2) + (+1) = 4\n- `n=1234` : (+1) + (-2) + (+3) + (-4) = -2\n- `n=886996` : (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0\nHope it helps. ❤️"
                    },
                    {
                        "username": "uzeconomist0419",
                        "content": "thanks a lot"
                    },
                    {
                        "username": "qq710729301",
                        "content": "\\'The most significant digit\\' part got me. "
                    },
                    {
                        "username": "almostmonday",
                        "content": "If you\\'re interested how to use math instead of strings, indexes and arrays, the solution is [here](https://leetcode.com/problems/alternating-digit-sum/solutions/3352079/python-pure-math-o-1-space-o-log-n-time-without-any-string-or-array/). One pass, O(1) space, pure math."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "Think about what happen when the index is odd or even :)"
                    },
                    {
                        "username": "Nikhil-Umesh",
                        "content": " ` public int alternateDigitSum(int number) {\n        int sum=0;\n        String s= String.valueOf(number);\n        char[]a = s.toCharArray();\n        for(int i=0;i<a.length;i++){\n            if(i%2==0){\n                sum = sum + Character.getNumericValue(a[i]);\n            }\n            else {\n                sum = sum - Character.getNumericValue(a[i]);\n            }\n        }\n\n        return sum;\n    }\n\n\nJava solution beats 100 % time"
                    },
                    {
                        "username": "kingctan",
                        "content": "Java solution. Beat 100% in runtime\\n       int remain = n;\\n        int tempN = n;\\n        int count = 0;\\n        while (tempN > 0) {\\n            tempN = tempN / 10;\\n            count++;\\n        }\\n\\n        int sign = 1;\\n        if (count % 2 == 0) {\\n            sign = -1;\\n        }\\n\\n        int sum = 0;\\n        while (count-- > 0) {\\n            remain = n % 10;\\n            n /= 10;\\n            sum += (remain * sign);\\n            sign *= -1;\\n        }\\n        return sum;"
                    },
                    {
                        "username": "fymmmmm",
                        "content": "\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F\\uFF1F"
                    },
                    {
                        "username": "siddharthjain14",
                        "content": "Can be easily done with log n time complexity"
                    },
                    {
                        "username": "VamsidharReddyy",
                        "content": "class Solution {\\npublic:\\n    int alternateDigitSum(int n) {\\n        int sump=0,sumn=0;\\n        vector<int>v;\\n        while(n!=0){\\n            int x=n%10;\\n            v.push_back(x);\\n            n/=10;\\n        }\\n        reverse(v.begin(),v.end());\\n        for(int i=0;i<v.size();i++){\\n            if(i%2==0) sump+=v[i];\\n            else sumn+=v[i];\\n        }\\n        return (sump-sumn);\\n    }\\n};\\n"
                    },
                    {
                        "username": "karan_____787",
                        "content": "import java.util.Scanner ;\\n\\nclass Soll\\n{\\n\\tint add(int []A)\\n\\t{\\n\\t\\tint res=0 ;\\n\\t\\tint n = A.length ;\\n\\t\\tfor(int i=0 ; i<n ; i++)\\n\\t\\t{\\n\\t\\t\\tif(i%2 == 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res+A[i] ;\\n\\t\\t\\t}\\n\\t\\t\\telse \\n\\t\\t\\t{\\n\\t\\t\\t\\tres = res-A[i] ;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t  return res ;\\t\\n\\t}\\n\\t\\n\\tvoid soll()\\n\\t{\\n\\t\\tint n1 ;\\n\\t\\tScanner sc = new Scanner(System.in) ;\\n\\t\\tSystem.out.println(\" Enter the length of array required \") ;\\n\\t     n1 = sc.nextInt() ;\\n\\t\\tint A1[] = new int[n1+1] ;\\n\\t\\tSystem.out.println(\" Enter the elements of array \") ;\\n\\t\\tfor(int i = 0 ;i<n1 ; i++)\\n\\t\\t{\\n\\t\\t\\tA1[i] = sc.nextInt() ;\\n\\t\\t}\\n\\t\\tint ans = add(A1) ;\\n\\t\\tSystem.out.println(\" The sum is  \" + ans) ;\\n\\t}\\t\\n}\\n\\npublic class Main \\n{\\n\\tpublic static void main(String [] args)\\n\\t{\\n\\t\\tSoll kb = new Soll() ;\\n\\t\\tkb.soll() ;\\n\\n   }\\n\\t\\t\\n}"
                    }
                ]
            }
        ]
    }
]