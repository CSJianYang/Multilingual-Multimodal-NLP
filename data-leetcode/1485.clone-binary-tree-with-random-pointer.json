[
    {
        "title": "Group Sold Products By The Date",
        "question_content": "Table Activities:\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| sell_date   | date    |\n| product     | varchar |\n+-------------+---------+\nThere is no primary key (column with unique values) for this table. It may contain duplicates.\nEach row of this table contains the product name and the date it was sold in a market.\n\n&nbsp;\nWrite a solution to find for each date the number of different products sold and their names.\nThe sold products names for each date should be sorted lexicographically.\nReturn the result table ordered by sell_date.\nThe&nbsp;result format is in the following example.\n&nbsp;\nExample 1:\n\nInput: \nActivities table:\n+------------+------------+\n| sell_date  | product     |\n+------------+------------+\n| 2020-05-30 | Headphone  |\n| 2020-06-01 | Pencil     |\n| 2020-06-02 | Mask       |\n| 2020-05-30 | Basketball |\n| 2020-06-01 | Bible      |\n| 2020-06-02 | Mask       |\n| 2020-05-30 | T-Shirt    |\n+------------+------------+\nOutput: \n+------------+----------+------------------------------+\n| sell_date  | num_sold | products                     |\n+------------+----------+------------------------------+\n| 2020-05-30 | 3        | Basketball,Headphone,T-shirt |\n| 2020-06-01 | 2        | Bible,Pencil                 |\n| 2020-06-02 | 1        | Mask                         |\n+------------+----------+------------------------------+\nExplanation: \nFor 2020-05-30, Sold items were (Headphone, Basketball, T-shirt), we sort them lexicographically and separate them by a comma.\nFor 2020-06-01, Sold items were (Pencil, Bible), we sort them lexicographically and separate them by a comma.\nFor 2020-06-02, the Sold item is (Mask), we just return it.",
        "solutions": [
            {
                "id": 2139850,
                "title": "simple-explanation-easy",
                "content": "**<<<< Please Press upvote Button !!!!!**\\n\\nAlmost immediately detected, the only serious challange of this problem is how to aggregate the product names in one cell. In MySql, this can be done using GROUP_CONCAT, in which you can also specify the sorting mechanism for the group concatenation (aggregation). The rest is simple.\\n```\\nselect sell_date, count( DISTINCT product ) as num_sold ,\\n    \\n    GROUP_CONCAT( DISTINCT product order by product ASC separator \\',\\' ) as products\\n    \\n        FROM Activities GROUP BY sell_date order by sell_date ASC;\\n\\n```\\n![image](https://assets.leetcode.com/users/images/1a22513a-f19e-4338-b241-14a37d53c39d_1655656234.9439957.jpeg)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date, count( DISTINCT product ) as num_sold ,\\n    \\n    GROUP_CONCAT( DISTINCT product order by product ASC separator \\',\\' ) as products\\n    \\n        FROM Activities GROUP BY sell_date order by sell_date ASC;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 692814,
                "title": "mysql-order-by-product-name-and-sell-date",
                "content": "Almost immediately detected, the only serious challange of this problem is how to aggregate the product names in one cell. In MySql, this can be done using GROUP_CONCAT, in which you can also specify the sorting mechanism for the group concatenation (aggregation). The rest is simple.\\n```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "Almost immediately detected, the only serious challange of this problem is how to aggregate the product names in one cell. In MySql, this can be done using GROUP_CONCAT, in which you can also specify the sorting mechanism for the group concatenation (aggregation). The rest is simple.\\n```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC",
                "codeTag": "Unknown"
            },
            {
                "id": 2497772,
                "title": "mysql-solution-clean-faster-than-92",
                "content": "* ***please UPVOTE ***\\n```\\nSELECT  \\n\\tsell_date,\\n\\t(COUNT(sell_date ) ) as num_sold ,\\n\\tGROUP_CONCAT(distinct product  ORDER BY product) as products \\nFROM \\n\\t(SELECT DISTINCT sell_date,product FROM Activities) as Activities\\nGROUP BY sell_date;\\n```\\n\\n* ***please UPVOTE ***\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT  \\n\\tsell_date,\\n\\t(COUNT(sell_date ) ) as num_sold ,\\n\\tGROUP_CONCAT(distinct product  ORDER BY product) as products \\nFROM \\n\\t(SELECT DISTINCT sell_date,product FROM Activities) as Activities\\nGROUP BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2510956,
                "title": "mysql-beginner-level-easy-to-understand-simple-short-solution",
                "content": "**Please upvote to motivate me in my quest of documenting all leetcode solutions. HAPPY CODING:)\\nAny suggestions and improvements are always welcome.***\\n*====================================================================*\\n\\u2705 **MySQL Code :**\\n```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC\\n```\\n**Runtime:** 380 ms\\n**Memory Usage:**  0B\\n________________________________\\n__________________________________\\n\\nIf you like the solution, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3863267,
                "title": "pandas-vs-sql-elegant-short-all-30-days-of-pandas-solutions",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```Python []\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    return activities.groupby(\\n        \\'sell_date\\'\\n    )[\\'product\\'].agg([\\n        (\\'num_sold\\', \\'nunique\\'),\\n        (\\'products\\', lambda x: \\',\\'.join(sorted(x.unique())))\\n    ]).reset_index()\\n```\\n```SQL []\\nSELECT sell_date,\\n       count(DISTINCT product) AS num_sold,\\n       group_concat(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') products\\n  FROM activities\\n GROUP BY sell_date\\n ORDER BY sell_date;\\n```\\n\\n# Important!\\n###### If you like the solution or find it useful, feel free to **upvote** for it, it will support me in creating high quality solutions)\\n\\n# 30 Days of Pandas solutions\\n\\n### Data Filtering \\u2705\\n- [Big Countries](https://leetcode.com/problems/big-countries/solutions/3848474/pandas-elegant-short-1-line/)\\n- [Recyclable and Low Fat Products](https://leetcode.com/problems/recyclable-and-low-fat-products/solutions/3848500/pandas-elegant-short-1-line/)\\n- [Customers Who Never Order](https://leetcode.com/problems/customers-who-never-order/solutions/3848527/pandas-elegant-short-1-line/)\\n- [Article Views I](https://leetcode.com/problems/article-views-i/solutions/3867192/pandas-elegant-short-1-line/)\\n\\n\\n### String Methods \\u2705\\n- [Invalid Tweets](https://leetcode.com/problems/invalid-tweets/solutions/3849121/pandas-elegant-short-1-line/)\\n- [Calculate Special Bonus](https://leetcode.com/problems/calculate-special-bonus/solutions/3867209/pandas-elegant-short-1-line/)\\n- [Fix Names in a Table](https://leetcode.com/problems/fix-names-in-a-table/solutions/3849167/pandas-elegant-short-1-line/)\\n- [Find Users With Valid E-Mails](https://leetcode.com/problems/find-users-with-valid-e-mails/solutions/3849177/pandas-elegant-short-1-line/)\\n- [Patients With a Condition](https://leetcode.com/problems/patients-with-a-condition/solutions/3849196/pandas-elegant-short-1-line-regex/)\\n\\n\\n### Data Manipulation \\u2705\\n- [Nth Highest Salary](https://leetcode.com/problems/nth-highest-salary/solutions/3867257/pandas-elegant-short-1-line/)\\n- [Second Highest Salary](https://leetcode.com/problems/second-highest-salary/solutions/3867278/pandas-elegant-short/)\\n- [Department Highest Salary](https://leetcode.com/problems/department-highest-salary/solutions/3867312/pandas-elegant-short-1-line/)\\n- [Rank Scores](https://leetcode.com/problems/rank-scores/solutions/3872817/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Delete Duplicate Emails](https://leetcode.com/problems/delete-duplicate-emails/solutions/3849211/pandas-elegant-short/)\\n- [Rearrange Products Table](https://leetcode.com/problems/rearrange-products-table/solutions/3849226/pandas-elegant-short-1-line/)\\n\\n\\n### Statistics \\u2705\\n- [The Number of Rich Customers](https://leetcode.com/problems/the-number-of-rich-customers/solutions/3849251/pandas-elegant-short-1-line/)\\n- [Immediate Food Delivery I](https://leetcode.com/problems/immediate-food-delivery-i/solutions/3872719/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Count Salary Categories](https://leetcode.com/problems/count-salary-categories/solutions/3872801/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n\\n\\n### Data Aggregation \\u2705\\n- [Find Total Time Spent by Each Employee](https://leetcode.com/problems/find-total-time-spent-by-each-employee/solutions/3872715/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Game Play Analysis I](https://leetcode.com/problems/game-play-analysis-i/solutions/3863223/pandas-elegant-short-1-line/)\\n- [Number of Unique Subjects Taught by Each Teacher](https://leetcode.com/problems/number-of-unique-subjects-taught-by-each-teacher/solutions/3863239/pandas-elegant-short-1-line/)\\n- [Classes More Than 5 Students](https://leetcode.com/problems/classes-more-than-5-students/solutions/3863249/pandas-elegant-short/)\\n- [Customer Placing the Largest Number of Orders](https://leetcode.com/problems/customer-placing-the-largest-number-of-orders/solutions/3863257/pandas-elegant-short-1-line/)\\n- [Group Sold Products By The Date](https://leetcode.com/problems/group-sold-products-by-the-date/solutions/3863267/pandas-elegant-short-1-line/)\\n- [Daily Leads and Partners](https://leetcode.com/problems/daily-leads-and-partners/solutions/3863279/pandas-elegant-short-1-line/)\\n\\n\\n### Data Aggregation \\u2705\\n- [Actors and Directors Who Cooperated At Least Three Times](https://leetcode.com/problems/actors-and-directors-who-cooperated-at-least-three-times/solutions/3863309/pandas-elegant-short/)\\n- [Replace Employee ID With The Unique Identifier](https://leetcode.com/problems/replace-employee-id-with-the-unique-identifier/solutions/3872822/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Students and Examinations](https://leetcode.com/problems/students-and-examinations/solutions/3872699/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Managers with at Least 5 Direct Reports](https://leetcode.com/problems/managers-with-at-least-5-direct-reports/solutions/3872861/pandas-elegant-short/)\\n- [Sales Person](https://leetcode.com/problems/sales-person/solutions/3872712/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "MySQL",
                    "Pandas"
                ],
                "code": "```Python []\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    return activities.groupby(\\n        \\'sell_date\\'\\n    )[\\'product\\'].agg([\\n        (\\'num_sold\\', \\'nunique\\'),\\n        (\\'products\\', lambda x: \\',\\'.join(sorted(x.unique())))\\n    ]).reset_index()\\n```\n```SQL []\\nSELECT sell_date,\\n       count(DISTINCT product) AS num_sold,\\n       group_concat(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') products\\n  FROM activities\\n GROUP BY sell_date\\n ORDER BY sell_date;\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 845705,
                "title": "all-dbs-simple-solution",
                "content": "Oracle\\n```\\nselect to_char(a.sell_date, \\'yyyy-mm-dd\\') sell_date\\n    , count(a.product) num_sold\\n    , listagg(a.product, \\',\\') within group(order by a.product) products\\nfrom (select distinct * from activities) a\\ngroup by a.sell_date\\norder by a.sell_date\\n```\\nMy SQL\\n```\\nselect sell_date\\n\\t, count(distinct product) num_sold\\n\\t, group_concat(distinct product order by product asc separator \\',\\') products\\nfrom activities\\ngroup by sell_date\\norder by sell_date\\n```\\nMS SQL\\n```\\nselect a.sell_date\\n   , count(a.product) num_sold\\n   , string_agg(a.product,\\',\\') within group (order by a.product) products\\nfrom (select distinct sell_date,product from activities) a\\ngroup by a.sell_date\\norder by a.sell_date\\n```",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\nselect to_char(a.sell_date, \\'yyyy-mm-dd\\') sell_date\\n    , count(a.product) num_sold\\n    , listagg(a.product, \\',\\') within group(order by a.product) products\\nfrom (select distinct * from activities) a\\ngroup by a.sell_date\\norder by a.sell_date\\n```\n```\\nselect sell_date\\n\\t, count(distinct product) num_sold\\n\\t, group_concat(distinct product order by product asc separator \\',\\') products\\nfrom activities\\ngroup by sell_date\\norder by sell_date\\n```\n```\\nselect a.sell_date\\n   , count(a.product) num_sold\\n   , string_agg(a.product,\\',\\') within group (order by a.product) products\\nfrom (select distinct sell_date,product from activities) a\\ngroup by a.sell_date\\norder by a.sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3043998,
                "title": "mysql-simple-n-concise-query",
                "content": "# Query\\n```\\n# Write your MySQL query statement below\\nSELECT sell_date,\\n       COUNT(DISTINCT(product), sell_date) AS num_sold, \\n       GROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities\\nGROUP BY sell_date\\n```\\n\\n\\n\\n*if the solution worked for you* ***please upvote***",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT sell_date,\\n       COUNT(DISTINCT(product), sell_date) AS num_sold, \\n       GROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities\\nGROUP BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2209482,
                "title": "sql-easy-to-understand-using-group-concat",
                "content": "```\\nSELECT sell_date, \\n    count(DISTINCT product) as num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date \\nORDER BY sell_date;\\n```\\nPlease upvote if you found this useful :)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date, \\n    count(DISTINCT product) as num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date \\nORDER BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1262267,
                "title": "easiest-solution",
                "content": "```\\nSELECT\\n    sell_date,\\n    COUNT(DISTINCT product) num_sold,\\n    GROUP_CONCAT(DISTINCT product) products\\nFROM activities\\nGROUP BY sell_date\\nORDER BY sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT\\n    sell_date,\\n    COUNT(DISTINCT product) num_sold,\\n    GROUP_CONCAT(DISTINCT product) products\\nFROM activities\\nGROUP BY sell_date\\nORDER BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3946871,
                "title": "pandas-my-approach-with-clear-comments",
                "content": "\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    # Group the activities by sell_date and collect the unique products for each date\\n    grouped = activities.groupby(\\'sell_date\\')[\\'product\\'].agg([\\'nunique\\', lambda x: \\',\\'.join(sorted(set(x)))]).reset_index()\\n    \\n    # Rename the columns for clarity\\n    grouped.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    \\n    # Replace variations of \\'Mask\\' with just \\'Mask\\'\\n    grouped[\\'products\\'] = grouped[\\'products\\'].str.replace(r\\'(^|,)Mask(,|$)\\', r\\'\\\\1Mask\\\\2\\')\\n    \\n    # Sort the result table by sell_date\\n    result = grouped.sort_values(by=\\'sell_date\\')\\n    \\n    return result\\n\\n```\\n![upvote img.jpg](https://assets.leetcode.com/users/images/fe39393f-fae2-42ae-8f28-c486468073a2_1692727296.8042412.jpeg)\\n",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    # Group the activities by sell_date and collect the unique products for each date\\n    grouped = activities.groupby(\\'sell_date\\')[\\'product\\'].agg([\\'nunique\\', lambda x: \\',\\'.join(sorted(set(x)))]).reset_index()\\n    \\n    # Rename the columns for clarity\\n    grouped.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    \\n    # Replace variations of \\'Mask\\' with just \\'Mask\\'\\n    grouped[\\'products\\'] = grouped[\\'products\\'].str.replace(r\\'(^|,)Mask(,|$)\\', r\\'\\\\1Mask\\\\2\\')\\n    \\n    # Sort the result table by sell_date\\n    result = grouped.sort_values(by=\\'sell_date\\')\\n    \\n    return result\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2696570,
                "title": "faster-than-83-of-mysql-online-submissions",
                "content": "**<<<<upvote **\\n\\n\\tSELECT sell_date, COUNT( DISTINCT product ) AS num_sold ,    \\n    GROUP_CONCAT( DISTINCT product ORDER BY product ASC separator \\',\\' ) AS product   \\n    FROM Activities GROUP BY sell_date ORDER BY sell_date ASC;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "**<<<<upvote **\\n\\n\\tSELECT sell_date, COUNT( DISTINCT product ) AS num_sold ,    \\n    GROUP_CONCAT( DISTINCT product ORDER BY product ASC separator \\',\\' ) AS product   \\n    FROM Activities GROUP BY sell_date ORDER BY sell_date ASC;",
                "codeTag": "Unknown"
            },
            {
                "id": 2012924,
                "title": "sql-query-with-detailed-explanation-sql",
                "content": "##### **GROUPCONCAT() is used to concatenat data from multiple rows into one field**\\n***step 1*: First we will count distinct products and name the column as num_sold\\n*step 2*: Next we use group concat to get the disctinct products and to display them in a column with a seperator(,) and order by products and name the column as products\\n*step 3*: We will group them by sell_date**\\n\\n\\n```\\nselect sell_date,count(distinct(product)) as num_sold, GROUP_CONCAT(distinct product order by product asc) as products\\nfrom Activities\\ngroup by sell_date\\n```\\n\\nUpvote this if you find it useful\\nThanks",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date,count(distinct(product)) as num_sold, GROUP_CONCAT(distinct product order by product asc) as products\\nfrom Activities\\ngroup by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1074975,
                "title": "2-simple-sql-solutions-group-concat-and-string-agg",
                "content": "```\\nSELECT \\n  sell_date,\\n  COUNT(product) AS num_sold,\\n  STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product ASC) AS products\\nFROM (SELECT DISTINCT * FROM Activities) T\\nGROUP BY sell_date\\nORDER BY 1 ASC\\n```\\n\\n```\\nSELECT \\n    sell_date,\\n    COUNT(DISTINCT product) AS num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY 1 ASC\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT \\n  sell_date,\\n  COUNT(product) AS num_sold,\\n  STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product ASC) AS products\\nFROM (SELECT DISTINCT * FROM Activities) T\\nGROUP BY sell_date\\nORDER BY 1 ASC\\n```\n```\\nSELECT \\n    sell_date,\\n    COUNT(DISTINCT product) AS num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY 1 ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3731869,
                "title": "mysql-easy-solution",
                "content": "# Code\\n```\\nSELECT \\n  sell_date, \\n  COUNT(DISTINCT(product)) AS num_sold, \\n  GROUP_CONCAT(DISTINCT(product)) AS products\\nFROM Activities\\nGROUP BY sell_date\\n```\\n![catty.png](https://assets.leetcode.com/users/images/00b619c4-a2b5-4df8-b722-4d15b667f177_1688727609.374941.png)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT \\n  sell_date, \\n  COUNT(DISTINCT(product)) AS num_sold, \\n  GROUP_CONCAT(DISTINCT(product)) AS products\\nFROM Activities\\nGROUP BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2134094,
                "title": "ms-sql-solution-with-string-agg",
                "content": "Please note that this solution with `string_agg` will work only from SQL Server 2017 and above and SQL Azure\\n```\\nselect sell_date, count(product) as \\'num_sold\\', string_agg(product, \\',\\') as products\\nfrom\\n(\\n    select distinct *\\n    from Activities\\n) t\\ngroup by sell_date\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nselect sell_date, count(product) as \\'num_sold\\', string_agg(product, \\',\\') as products\\nfrom\\n(\\n    select distinct *\\n    from Activities\\n) t\\ngroup by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 752045,
                "title": "ms-sql-server-simple-solution",
                "content": "```\\nselect sell_date, \\n    COUNT(product) as num_sold,\\n    STRING_AGG(product,\\',\\') WITHIN GROUP (ORDER BY product) as products from\\n    (select distinct sell_date,product FROM Activities) Act\\n    GROUP BY sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nselect sell_date, \\n    COUNT(product) as num_sold,\\n    STRING_AGG(product,\\',\\') WITHIN GROUP (ORDER BY product) as products from\\n    (select distinct sell_date,product FROM Activities) Act\\n    GROUP BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2291965,
                "title": "best-solution-using-group-by-group-concat",
                "content": "#### **Please Upvote if you Like it**\\n##### The GROUP BY statement groups rows that have the same values into summary rows.\\n#####  The GROUP BY statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG()) to group the result-set by one or more columns.\\n##### Another group method we use is **GROUP_CONCAT**, which concat items of grouped rows and joins them by using \",\" seperator. \\n```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2264839,
                "title": "string-agg-explanation",
                "content": "This query will show the disired result: \\n select sell_date, count(distinct(product)) as num_sold,\\n STRING_AGG(product,\\',\\') within group (order by product) as products\\nfrom\\n(SELECT DISTINCT sell_date, product FROM Activities) T\\ngroup by sell_date\\norder by sell_date\\n\\nthe reason for using this part ((SELECT DISTINCT sell_date, product FROM Activities) T) is that \\nneed for bring distinct value on product name. (SQL server can not understand Distinct in the STRING_AGG, so need some query to send distinct value)\\n\\nin addition, postgres sql can understand Distinct in STRING_AGG, so you can use this query instead of top in postgrest sql:\\n\\n select sell_date, count(distinct(product)) as num_sold,\\n STRING_AGG(distinct(product), \\',\\'\\n order by product)\\n as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date\\nAlso you can check this link: \\nhttps://gregdodd.me/2021/08/24/distinct-list-in-string_agg/\\n\\nPlease UpVote if it was Helpful\\n\\n",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "This query will show the disired result: \\n select sell_date, count(distinct(product)) as num_sold,\\n STRING_AGG(product,\\',\\') within group (order by product) as products\\nfrom\\n(SELECT DISTINCT sell_date, product FROM Activities) T\\ngroup by sell_date\\norder by sell_date\\n\\nthe reason for using this part ((SELECT DISTINCT sell_date, product FROM Activities) T) is that \\nneed for bring distinct value on product name. (SQL server can not understand Distinct in the STRING_AGG, so need some query to send distinct value)\\n\\nin addition, postgres sql can understand Distinct in STRING_AGG, so you can use this query instead of top in postgrest sql:\\n\\n select sell_date, count(distinct(product)) as num_sold,\\n STRING_AGG(distinct(product), \\',\\'\\n order by product)\\n as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date\\nAlso you can check this link: \\nhttps://gregdodd.me/2021/08/24/distinct-list-in-string_agg/\\n\\nPlease UpVote if it was Helpful\\n\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2245118,
                "title": "simple-and-easy-solution-using-group-concat",
                "content": "```\\nSELECT \\n    sell_date,\\n    count(DISTINCT(product)) as num_sold,\\n    GROUP_CONCAT( DISTINCT product) as products\\nfrom Activities \\nGroup by sell_date;\\n```\\n\\n**Please UpVote if it was Helpful :)**",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT \\n    sell_date,\\n    count(DISTINCT(product)) as num_sold,\\n    GROUP_CONCAT( DISTINCT product) as products\\nfrom Activities \\nGroup by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1997039,
                "title": "ms-sql-using-string-agg",
                "content": "```\\nwith t as (\\n    select distinct * from Activities)\\n\\nselect \\n     sell_date\\n    ,count(1) as num_sold\\n    ,string_agg(product,\\',\\') within group (order by product) as products\\nfrom t\\ngroup by sell_date\\norder by sell_date\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nwith t as (\\n    select distinct * from Activities)\\n\\nselect \\n     sell_date\\n    ,count(1) as num_sold\\n    ,string_agg(product,\\',\\') within group (order by product) as products\\nfrom t\\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2591930,
                "title": "sql-solution-using-group-concat-definition-and-syntax-of-group-concat",
                "content": "--GROUP_CONCAT() function in MySQL is used to concatenate data from multiple rows into one field\\n--Syntax: SELECT col1, col2, ..., colN\\n        GROUP_CONCAT ( [DISTINCT] col_name1 \\n        [ORDER BY clause]  [SEPARATOR str_val] ) \\n        FROM table_name GROUP BY col_name2;\\n\\n            SELECT sell_date,\\n            COUNT(DISTINCT(product)) AS num_sold,\\n            GROUP_CONCAT(DISTINCT(product) SEPARATOR \\',\\') AS products\\n            FROM Activities\\n            GROUP BY sell_date;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "--GROUP_CONCAT() function in MySQL is used to concatenate data from multiple rows into one field\\n--Syntax: SELECT col1, col2, ..., colN\\n        GROUP_CONCAT ( [DISTINCT] col_name1 \\n        [ORDER BY clause]  [SEPARATOR str_val] ) \\n        FROM table_name GROUP BY col_name2;\\n\\n            SELECT sell_date,\\n            COUNT(DISTINCT(product)) AS num_sold,\\n            GROUP_CONCAT(DISTINCT(product) SEPARATOR \\',\\') AS products\\n            FROM Activities\\n            GROUP BY sell_date;",
                "codeTag": "Unknown"
            },
            {
                "id": 3896640,
                "title": "grouping-with-aggregations",
                "content": "# My SQL\\n\\nFirst, we group the data by the `sell_date` column. This allows us to count the number of unique products sold on each sell date, which we store in the `num_sold` column.\\n\\nThe most challenging part is to sort and join all unique product names in each group to get the products column. We can use the `GROUP_CONCAT()` function to combine multiple values from multiple rows into a single string. The syntax of the `GROUP_CONCAT()` function is as follows:\\n```\\nGROUP_CONCAT(DISTINCT [column_name] [separator])\\n```\\nThe `DISTINCT` keyword ensures that only unique values are concatenated. The separator parameter specifies the character that should be used to separate the values.\\n\\n``` sql []\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT(DISTINCT(product)) as num_sold,\\nGROUP_CONCAT(\\n    DISTINCT product \\n    ORDER BY product \\n    SEPARATOR \\',\\'\\n) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC\\n```\\n\\n# Pandas\\n\\nThe question asks us to group and summarize data by date. To do this, we first use the `groupby` function to group the `DataFrame` activities by date. This creates a new object called `groups`, which is a `DataFrameGroupBy` object.\\n\\nOnce we have the `DataFrameGroupBy` object, we can use the `agg()` function to perform aggregation operations on each group. The `agg()` function takes a list of aggregation tasks to perform. In this case, we are specifying two aggregation tasks:\\n- Creating num_solid column with the number of unique products sold on each sell date. \\n`num_sold=(\\'product\\', \\'nunique\\')`\\n- Join all unique names within each group. \\n`products=(\\'product\\', lambda x: \\',\\'.join(sorted(set(x))))`\\n\\n``` python3 []\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n  groups = activities.groupby(\\'sell_date\\')\\n\\n  stats = groups.agg(\\n    num_sold=(\\'product\\', \\'nunique\\'),\\n    products=(\\'product\\', lambda x: \\',\\'.join(sorted(set(x))))\\n  ).reset_index()\\n  stats.sort_values(\\'sell_date\\', inplace=True)\\n  return stats\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "MySQL",
                    "Pandas"
                ],
                "code": "```\\nGROUP_CONCAT(DISTINCT [column_name] [separator])\\n```\n``` sql []\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT(DISTINCT(product)) as num_sold,\\nGROUP_CONCAT(\\n    DISTINCT product \\n    ORDER BY product \\n    SEPARATOR \\',\\'\\n) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC\\n```\n``` python3 []\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n  groups = activities.groupby(\\'sell_date\\')\\n\\n  stats = groups.agg(\\n    num_sold=(\\'product\\', \\'nunique\\'),\\n    products=(\\'product\\', lambda x: \\',\\'.join(sorted(set(x))))\\n  ).reset_index()\\n  stats.sort_values(\\'sell_date\\', inplace=True)\\n  return stats\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3426731,
                "title": "superb-logic-mysql",
                "content": "\\n# Logic is to use distinct and group_concat\\n```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\nGroup_concat(distinct product) as products from activities\\ngroup by sell_date;\\n\\n```\\n# please upvote me it would encourage me alot\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\nGroup_concat(distinct product) as products from activities\\ngroup by sell_date;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3145587,
                "title": "group-concat",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT(DISTINCT product) as num_sold, GROUP_CONCAT(\\n    DISTINCT product \\n    ORDER BY product ASC \\n    separator \\',\\') AS Products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT(DISTINCT product) as num_sold, GROUP_CONCAT(\\n    DISTINCT product \\n    ORDER BY product ASC \\n    separator \\',\\') AS Products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2522870,
                "title": "mysql-easy-solution",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT sell_date,COUNT(DISTINCT(product)) AS num_sold,\\nGROUP_CONCAT(DISTINCT product SEPARATOR \",\" ) AS products FROM Activities\\nGroup by sell_date\\nORDER BY sell_date;\\n```\\n# upvote if u find it useful",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT sell_date,COUNT(DISTINCT(product)) AS num_sold,\\nGROUP_CONCAT(DISTINCT product SEPARATOR \",\" ) AS products FROM Activities\\nGroup by sell_date\\nORDER BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2246482,
                "title": "oracle-sql-solution-and-explanation",
                "content": "# Solution & explanation -\\nThe below code is not working but as per the oracle it should work.\\nClick this [link](https://livesql.oracle.com/apex/livesql/file/content_HT1O85E4BHSBWN93G1B3M8SI2.html) to check on oracle website.\\n\\n```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT TO_CHAR(sell_date, \\'YYYY-MM-DD\\') AS \"sell_date\", \\nCOUNT(DISTINCT(product)) AS \"num_sold\",\\nLISTAGG(DISTINCT(product), \\',\\') WITHIN GROUP (ORDER BY product) AS \"products\"\\nFROM activities \\nGROUP BY sell_date \\nORDER BY sell_date;\\n```\\n\\nIn question description, it is mentioned as **\"There is no primary key for this table, it may contain duplicates\"** and it contains duplicate values. So just fetch unqiue values of product & sell_date columns from activities table instead of fetching directly from the activities table. Check the below code.\\n```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT TO_CHAR(sell_date, \\'YYYY-MM-DD\\') AS \"sell_date\", \\nCOUNT(DISTINCT(product)) AS \"num_sold\",\\nLISTAGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS \"products\"\\nFROM (\\n    SELECT DISTINCT product, sell_date \\n    FROM activities\\n) \\nGROUP BY sell_date \\nORDER BY sell_date;\\n```\\n\\nI hope it is helpful to you.\\n",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT TO_CHAR(sell_date, \\'YYYY-MM-DD\\') AS \"sell_date\", \\nCOUNT(DISTINCT(product)) AS \"num_sold\",\\nLISTAGG(DISTINCT(product), \\',\\') WITHIN GROUP (ORDER BY product) AS \"products\"\\nFROM activities \\nGROUP BY sell_date \\nORDER BY sell_date;\\n```\n```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT TO_CHAR(sell_date, \\'YYYY-MM-DD\\') AS \"sell_date\", \\nCOUNT(DISTINCT(product)) AS \"num_sold\",\\nLISTAGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS \"products\"\\nFROM (\\n    SELECT DISTINCT product, sell_date \\n    FROM activities\\n) \\nGROUP BY sell_date \\nORDER BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2082472,
                "title": "sql-very-easy-solution",
                "content": "```\\nselect sell_date,\\ncount(distinct(product)) num_sold,\\ngroup_concat(distinct(product)) products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date;```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date,\\ncount(distinct(product)) num_sold,\\ngroup_concat(distinct(product)) products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date;```",
                "codeTag": "Unknown"
            },
            {
                "id": 1707967,
                "title": "simple-solution",
                "content": "SELECT sell_date, count(DISTINCT product) as num_sold, group_concat(DISTINCT product separator \\',\\') as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date",
                "solutionTags": [],
                "code": "SELECT sell_date, count(DISTINCT product) as num_sold, group_concat(DISTINCT product separator \\',\\') as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 692809,
                "title": "easy-mysql-solution",
                "content": "```\\nselect sell_date, count(distinct product) as num_sold , \\ngroup_concat(distinct product order by product asc separator \\',\\') as products               \\nfrom activities  \\ngroup by sell_date\\norder by sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nselect sell_date, count(distinct product) as num_sold , \\ngroup_concat(distinct product order by product asc separator \\',\\') as products               \\nfrom activities  \\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3903980,
                "title": "easy-solution",
                "content": "# SQL\\n```\\nselect sell_date, count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date\\n```\\n# Python\\n```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n  return activities.groupby(\\'sell_date\\')[\\'product\\'].agg([(\\'num_sold\\',\\'nunique\\'),(\\'products\\',lambda x: \\',\\'.join(sorted(x.unique())))]).reset_index()\\n\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nselect sell_date, count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date\\n```\n```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n  return activities.groupby(\\'sell_date\\')[\\'product\\'].agg([(\\'num_sold\\',\\'nunique\\'),(\\'products\\',lambda x: \\',\\'.join(sorted(x.unique())))]).reset_index()\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3647996,
                "title": "group-concat-explanation-mysql-pandas-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- In order to agrregate the product into a single row grouped by sell_date, we use **GROUP_CONCAT()** function.\\n- We can also specify the sorting condition in GROUP_CONCAT() as \\n`GROUP_CONCAT(DISTINCT product ORDER BY product) as products`\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT(DISTINCT product) as num_sold, \\n  GROUP_CONCAT(DISTINCT product ORDER BY product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n```\\n```\\nimport pandas as pd\\n\\ndef group_sold_products_by_the_date(activities: pd.DataFrame) -> pd.DataFrame:\\n    df = activities.groupby(\\'sell_date\\')[\\'product\\'].agg([\\n        (\\'num_sold\\', \\'nunique\\'),\\n        (\\'products\\', lambda x: \\',\\'.join(sorted(x.unique())))]).reset_index()\\n\\n    return df\\n```",
                "solutionTags": [
                    "MySQL",
                    "Pandas"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT(DISTINCT product) as num_sold, \\n  GROUP_CONCAT(DISTINCT product ORDER BY product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n```\n```\\nimport pandas as pd\\n\\ndef group_sold_products_by_the_date(activities: pd.DataFrame) -> pd.DataFrame:\\n    df = activities.groupby(\\'sell_date\\')[\\'product\\'].agg([\\n        (\\'num_sold\\', \\'nunique\\'),\\n        (\\'products\\', lambda x: \\',\\'.join(sorted(x.unique())))]).reset_index()\\n\\n    return df\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2564749,
                "title": "easiest-and-understandable-solution",
                "content": "# Write your MySQL query statement below\\nSELECT \\n    sell_date,\\n    COUNT(DISTINCT product) AS num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date",
                "solutionTags": [],
                "code": "# Write your MySQL query statement below\\nSELECT \\n    sell_date,\\n    COUNT(DISTINCT product) AS num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 2501716,
                "title": "sql-server-easy-solution",
                "content": "**Key points - **\\n1. Remove duplicates from the table using CTE\\n2. Group by sell_date, count each sell date\\n3. Use string_agg function and order within group by product.\\n\\n```\\nwith cteactivity AS \\n    (SELECT DISTINCT *\\n    FROM activities)\\nSELECT sell_date,\\n\\t\\t count(product) AS num_sold,\\n\\t\\t string_agg(product, \\',\\') within group (order by product) AS products\\nFROM cteactivity\\nGROUP BY  sell_date\\nORDER BY  sell_date",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "**Key points - **\\n1. Remove duplicates from the table using CTE\\n2. Group by sell_date, count each sell date\\n3. Use string_agg function and order within group by product.\\n\\n```\\nwith cteactivity AS \\n    (SELECT DISTINCT *\\n    FROM activities)\\nSELECT sell_date,\\n\\t\\t count(product) AS num_sold,\\n\\t\\t string_agg(product, \\',\\') within group (order by product) AS products\\nFROM cteactivity\\nGROUP BY  sell_date\\nORDER BY  sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 2078939,
                "title": "mysql-easy-solution",
                "content": "**Pls Upvote if you like the solution!**\\n```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "**Pls Upvote if you like the solution!**\\n```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC",
                "codeTag": "Unknown"
            },
            {
                "id": 2063222,
                "title": "simple-mysql-solution-beats-100",
                "content": "```\\nSELECT\\n\\tsell_date,\\n\\tCOUNT(DISTINCT (product)) AS num_sold, \\n\\tGROUP_CONCAT(DISTINCT(product)) AS products \\nFROM Activities \\nGROUP BY sell_date \\nORDER BY sell_date ASC;\\n```\\nEdit : As someone pointed out in the comments, we could use ```GROUP_CONCAT(DISTINCT(product) ORDER BY product ASC)``` to sort the products, but the above query works just as fine.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT\\n\\tsell_date,\\n\\tCOUNT(DISTINCT (product)) AS num_sold, \\n\\tGROUP_CONCAT(DISTINCT(product)) AS products \\nFROM Activities \\nGROUP BY sell_date \\nORDER BY sell_date ASC;\\n```\n```GROUP_CONCAT(DISTINCT(product) ORDER BY product ASC)```",
                "codeTag": "Unknown"
            },
            {
                "id": 2050476,
                "title": "quickest-solution",
                "content": "select sell_date, \\ncount(distinct product) as num_sold, \\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date,products",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "select sell_date, \\ncount(distinct product) as num_sold, \\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date,products",
                "codeTag": "Unknown"
            },
            {
                "id": 693799,
                "title": "oracle-solution-listagg",
                "content": "```\\nWITH cte as(\\nselect distinct sell_date, product from Activities)\\n\\nselect TO_CHAR(sell_date,\\'YYYY-MM-DD\\') as sell_date, count(product) as num_sold,\\nLISTAGG(product, \\',\\') WITHIN GROUP (ORDER BY product) as products\\nfrom cte\\ngroup by sell_date\\norder by sell_date\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nWITH cte as(\\nselect distinct sell_date, product from Activities)\\n\\nselect TO_CHAR(sell_date,\\'YYYY-MM-DD\\') as sell_date, count(product) as num_sold,\\nLISTAGG(product, \\',\\') WITHIN GROUP (ORDER BY product) as products\\nfrom cte\\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3600643,
                "title": "mysql-solution-for-group-sold-products-by-the-date-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe intuition behind the solution is to group the activities by sell date and then calculate the number of different products sold on each date. Additionally, we need to concatenate the names of the products and sort them lexicographically for each sell date.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach is to use the SQL query provided, which utilizes the GROUP BY clause to group the activities by sell date. Within each group, the COUNT(DISTINCT product) function is used to count the number of different products sold, while the GROUP_CONCAT(DISTINCT product ORDER BY product) function is used to concatenate and sort the product names lexicographically.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this solution depends on the number of rows in the Activities table. Let\\'s denote this number as n. The query performs a grouping operation, which typically has a time complexity of O(n log n) or O(n) depending on the database implementation. Additionally, the query involves sorting the product names lexicographically for each sell date, which also contributes to the overall time complexity.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of this solution depends on the number of distinct sell dates and the number of distinct products. Let\\'s denote these numbers as d and p respectively. The space complexity is O(d + p), as it requires storing the distinct sell dates and the distinct product names in memory for grouping and concatenation operations.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3279846,
                "title": "sql-server-clean-easy",
                "content": "```\\nWITH CTE AS (\\n  SELECT DISTINCT * FROM Activities\\n)\\n\\nSELECT \\nsell_date,\\nCOUNT(product) AS num_sold,\\nSTRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product ASC) AS products\\nFROM CTE\\nGROUP BY sell_date\\nORDER BY 1 ASC\\n```",
                "solutionTags": [],
                "code": "```\\nWITH CTE AS (\\n  SELECT DISTINCT * FROM Activities\\n)\\n\\nSELECT \\nsell_date,\\nCOUNT(product) AS num_sold,\\nSTRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product ASC) AS products\\nFROM CTE\\nGROUP BY sell_date\\nORDER BY 1 ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2546731,
                "title": "1484-group-sold-products-by-the-date",
                "content": "```\\nSELECT sell_date, COUNT(DISTINCT(product)) as num_sold, \\nGroup_Concat(distinct(product)\\nORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date ORDER BY sell_date;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date, COUNT(DISTINCT(product)) as num_sold, \\nGroup_Concat(distinct(product)\\nORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date ORDER BY sell_date;",
                "codeTag": "Unknown"
            },
            {
                "id": 2442281,
                "title": "simple-solution",
                "content": "```\\nSELECT sell_date, \\nCOUNT(DISTINCT(product)) AS num_sold, \\nGROUP_CONCAT(DISTINCT(product)) AS products \\nFROM Activities \\nGROUP BY sell_date \\nORDER BY sell_date;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT sell_date, \\nCOUNT(DISTINCT(product)) AS num_sold, \\nGROUP_CONCAT(DISTINCT(product)) AS products \\nFROM Activities \\nGROUP BY sell_date \\nORDER BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2392750,
                "title": "mysql-easy-solution-using-group-concat",
                "content": "##### GROUP_CONCAT() function\\n\\nMySQL GROUP_CONCAT() function eturns a string with concatenated non-NULL value from a group.\\nReturns NULL when there are no non-NULL values.\\n\\n\\n```\\nselect sell_date, \\n\\tcount(distinct(product)) as num_sold, \\n\\t\\tgroup_concat(distinct(product)) as products\\nfrom activities\\ngroup by sell_date order by sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date, \\n\\tcount(distinct(product)) as num_sold, \\n\\t\\tgroup_concat(distinct(product)) as products\\nfrom activities\\ngroup by sell_date order by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2335072,
                "title": "simple-readable-group-by-solution",
                "content": "```\\n# Write your MySQL query statement below\\nselect sell_date, count(distinct product) num_sold, \\ngroup_concat(distinct product) as products from Activities group by sell_date\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect sell_date, count(distinct product) num_sold, \\ngroup_concat(distinct product) as products from Activities group by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2271739,
                "title": "mysql-easy-understanding-beginner-friendly",
                "content": "```\\nselect  sell_date,\\n\\t    count(distinct product) as num_sold,\\n        group_concat(distinct product) as products\\nfrom activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect  sell_date,\\n\\t    count(distinct product) as num_sold,\\n        group_concat(distinct product) as products\\nfrom activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2265965,
                "title": "1484-group-sold-products-by-the-date",
                "content": "```\\nselect sell_date,\\ncount(distinct product)as num_sold,\\ngroup_concat(distinct product order by product) as products\\nfrom Activities \\ngroup by sell_date\\norder by sell_date;\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\nselect sell_date,\\ncount(distinct product)as num_sold,\\ngroup_concat(distinct product order by product) as products\\nfrom Activities \\ngroup by sell_date\\norder by sell_date;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2161143,
                "title": "group-concat-faster-than-95",
                "content": "```\\nSELECT sell_date, \\nCOUNT(DISTINCT product) num_sold, \\nGROUP_CONCAT(DISTINCT product) as products\\nFROM Activities\\nGROUP BY 1\\n```\\n\\nI am not sure if we have to use ORDER BY within GROUP_CONCAT as it returns the order lexicographically on its own. My assumption is that ---> ASC order is by default if you dont mention the ORDER BY in this clause. And also we dont need a SEPARATOR as the GROUP_CONCAT adds a \\',\\' between values by default. \\n\\nI can be wrong so please correct me if anyone knows more about this.",
                "solutionTags": [],
                "code": "```\\nSELECT sell_date, \\nCOUNT(DISTINCT product) num_sold, \\nGROUP_CONCAT(DISTINCT product) as products\\nFROM Activities\\nGROUP BY 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2105157,
                "title": "easy-mysql-query-beginner-friendly",
                "content": "```sql\\nselect \\n    sell_date, \\n    count(distinct product) as num_sold, \\n    group_concat(distinct product) as products\\nfrom activities\\ngroup by sell_date\\norder by sell_date;\\n```",
                "solutionTags": [],
                "code": "```sql\\nselect \\n    sell_date, \\n    count(distinct product) as num_sold, \\n    group_concat(distinct product) as products\\nfrom activities\\ngroup by sell_date\\norder by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1974783,
                "title": "mysql-beats-100-00-memory-speed-0ms-april-2022",
                "content": "```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1974660,
                "title": "mysql-solution-distict-group-concat-group-by",
                "content": "```\\nselect \\n    sell_date,\\n    count(distinct(product)) as num_sold,\\n    group_concat(distinct(product)) as products \\nfrom Activities  \\n    group by sell_date \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect \\n    sell_date,\\n    count(distinct(product)) as num_sold,\\n    group_concat(distinct(product)) as products \\nfrom Activities  \\n    group by sell_date \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1938564,
                "title": "oracle-listagg-group-by",
                "content": "Please upvote, if it helps\\n\\n```\\nselect to_char(sell_date) sell_date,count(1)num_sold,LISTAGG(product,\\',\\') within group (order by product) products from (select distinct * from Activities) group by sell_date order by sell_date\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nselect to_char(sell_date) sell_date,count(1)num_sold,LISTAGG(product,\\',\\') within group (order by product) products from (select distinct * from Activities) group by sell_date order by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1519970,
                "title": "ms-sql",
                "content": "#### Question\\n```\\n1484. Group Sold Products By The Date\\nEasy\\n\\nSQL Schema\\nTable Activities:\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| sell_date   | date    |\\n| product     | varchar |\\n+-------------+---------+\\nThere is no primary key for this table, it may contains duplicates.\\nEach row of this table contains the product name and the date it was sold in a market.\\n \\n\\nWrite an SQL query to find for each date, the number of distinct products sold and their names.\\n\\nThe sold-products names for each date should be sorted lexicographically. \\n\\nReturn the result table ordered by sell_date.\\n\\nThe query result format is in the following example.\\n\\nActivities table:\\n+------------+-------------+\\n| sell_date  | product     |\\n+------------+-------------+\\n| 2020-05-30 | Headphone   |\\n| 2020-06-01 | Pencil      |\\n| 2020-06-02 | Mask        |\\n| 2020-05-30 | Basketball  |\\n| 2020-06-01 | Bible       |\\n| 2020-06-02 | Mask        |\\n| 2020-05-30 | T-Shirt     |\\n+------------+-------------+\\n\\nResult table:\\n+------------+----------+------------------------------+\\n| sell_date  | num_sold | products                     |\\n+------------+----------+------------------------------+\\n| 2020-05-30 | 3        | Basketball,Headphone,T-shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |\\n+------------+----------+------------------------------+\\nFor 2020-05-30, Sold items were (Headphone, Basketball, T-shirt), we sort them lexicographically and separate them by comma.\\nFor 2020-06-01, Sold items were (Pencil, Bible), we sort them lexicographically and separate them by comma.\\nFor 2020-06-02, Sold item is (Mask), we just return it.\\n\\n```\\n\\n\\n#### Answer\\n```SQL\\n\\n/* Write your T-SQL query statement below */\\nselect sell_date, count(product) num_sold, STRING_AGG(product,\\',\\') WITHIN GROUP(order by product) as products from (select distinct * from Activities) as a \\ngroup by sell_date\\norder by sell_date\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n1484. Group Sold Products By The Date\\nEasy\\n\\nSQL Schema\\nTable Activities:\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| sell_date   | date    |\\n| product     | varchar |\\n+-------------+---------+\\nThere is no primary key for this table, it may contains duplicates.\\nEach row of this table contains the product name and the date it was sold in a market.\\n \\n\\nWrite an SQL query to find for each date, the number of distinct products sold and their names.\\n\\nThe sold-products names for each date should be sorted lexicographically. \\n\\nReturn the result table ordered by sell_date.\\n\\nThe query result format is in the following example.\\n\\nActivities table:\\n+------------+-------------+\\n| sell_date  | product     |\\n+------------+-------------+\\n| 2020-05-30 | Headphone   |\\n| 2020-06-01 | Pencil      |\\n| 2020-06-02 | Mask        |\\n| 2020-05-30 | Basketball  |\\n| 2020-06-01 | Bible       |\\n| 2020-06-02 | Mask        |\\n| 2020-05-30 | T-Shirt     |\\n+------------+-------------+\\n\\nResult table:\\n+------------+----------+------------------------------+\\n| sell_date  | num_sold | products                     |\\n+------------+----------+------------------------------+\\n| 2020-05-30 | 3        | Basketball,Headphone,T-shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |\\n+------------+----------+------------------------------+\\nFor 2020-05-30, Sold items were (Headphone, Basketball, T-shirt), we sort them lexicographically and separate them by comma.\\nFor 2020-06-01, Sold items were (Pencil, Bible), we sort them lexicographically and separate them by comma.\\nFor 2020-06-02, Sold item is (Mask), we just return it.\\n\\n```\n```SQL\\n\\n/* Write your T-SQL query statement below */\\nselect sell_date, count(product) num_sold, STRING_AGG(product,\\',\\') WITHIN GROUP(order by product) as products from (select distinct * from Activities) as a \\ngroup by sell_date\\norder by sell_date\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1028641,
                "title": "mysql",
                "content": "\\n```\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM Activities\\nGROUP BY sell_date\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM Activities\\nGROUP BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 694193,
                "title": "easy-oracle-solution-using-listagg",
                "content": "```\\nselect \\n(to_char(sell_date,\\'YYYY-MM-DD\\')) as sell_date,\\ncount(product) as num_sold,listagg(product,\\',\\') WITHIN GROUP (ORDER BY product) as products\\nfrom (select distinct sell_date,product from Activities)\\ngroup by sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nselect \\n(to_char(sell_date,\\'YYYY-MM-DD\\')) as sell_date,\\ncount(product) as num_sold,listagg(product,\\',\\') WITHIN GROUP (ORDER BY product) as products\\nfrom (select distinct sell_date,product from Activities)\\ngroup by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3269844,
                "title": "mysql-solution",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect sell_date, count(distinct(product)) as num_sold, \\ngroup_concat(distinct(product) order by product) as products\\nfrom Activities group by sell_date order by sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect sell_date, count(distinct(product)) as num_sold, \\ngroup_concat(distinct(product) order by product) as products\\nfrom Activities group by sell_date order by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2793643,
                "title": "mysql-89-2-faster",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe challange of this problem is how to aggregate the product names in one cell. So we use `GROUP_CONCAT()` to aggregate distinct product names with a separator \\',\\' and also sort the product names. The rest is simple, we group by sell_date and COUNT DISTINCT product.\\n\\n# Code\\n```\\nSELECT \\n    sell_date, \\n    COUNT(DISTINCT product) as num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n```\\n## Give it a **Upvote** If You Like My Explanation.\\n### Have a Great Day/Night.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT \\n    sell_date, \\n    COUNT(DISTINCT product) as num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2738697,
                "title": "sql-server-solution",
                "content": "it works well, and **Don\\'t forgot to upvote**\\n\\nthis below line do magic\\n\\n**string_agg(product,\\',\\') within group (order by product asc) as products **\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nselect sell_date, \\n        count(distinct product) as num_sold,\\n        string_agg(product,\\',\\') within group (order by product asc) as products\\nfrom(select distinct sell_date,product from Activities)sq \\ngroup by sell_date \\norder by sell_date\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nselect sell_date, \\n        count(distinct product) as num_sold,\\n        string_agg(product,\\',\\') within group (order by product asc) as products\\nfrom(select distinct sell_date,product from Activities)sq \\ngroup by sell_date \\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2611951,
                "title": "just-use-group-concat",
                "content": "```\\nselect \\n\\tsell_date, \\n\\tcount(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nselect \\n\\tsell_date, \\n\\tcount(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2558791,
                "title": "group-products-using-new-string-agg-funtion",
                "content": "**Upvote if you feel it easy :)**\\n\\nThis solution uses latest function STRING_AGG introduced by sql server\\n```\\nSELECT x.sell_date, SUM(x.num_sold) AS num_sold, STRING_AGG(x.product,\\',\\') as products\\nFROM (\\n\\tSELECT top 100 percent sell_date, COUNT(DISTINCT product) as num_sold, product\\n\\tFROM Activities\\n\\tGROUP BY sell_date, product\\n\\tORDER BY sell_date, product\\n) X\\nGROUP BY x.sell_date\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT x.sell_date, SUM(x.num_sold) AS num_sold, STRING_AGG(x.product,\\',\\') as products\\nFROM (\\n\\tSELECT top 100 percent sell_date, COUNT(DISTINCT product) as num_sold, product\\n\\tFROM Activities\\n\\tGROUP BY sell_date, product\\n\\tORDER BY sell_date, product\\n) X\\nGROUP BY x.sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2548241,
                "title": "simple-and-easy",
                "content": "select sell_date,count(distinct product) num_sold,group_concat(distinct product) products from activities group by sell_date order by sell_date",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "select sell_date,count(distinct product) num_sold,group_concat(distinct product) products from activities group by sell_date order by sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 2306463,
                "title": "group-concat-function-easy-to-understand-mysql-solution",
                "content": "```\\nSELECT\\n    sell_date,\\n    COUNT(DISTINCT product) AS \"num_sold\",\\n    GROUP_CONCAT(\\n        DISTINCT product\\n        ORDER BY\\n            product\\n    ) AS \"products\"\\nFROM\\n    activities\\nGROUP BY\\n    sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT\\n    sell_date,\\n    COUNT(DISTINCT product) AS \"num_sold\",\\n    GROUP_CONCAT(\\n        DISTINCT product\\n        ORDER BY\\n            product\\n    ) AS \"products\"\\nFROM\\n    activities\\nGROUP BY\\n    sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2285569,
                "title": "sql-query-using-string-agg",
                "content": "```\\nSELECT sell_date, \\n    COUNT(product) AS num_sold, \\n    STRING_AGG(product,\\',\\') WITHIN GROUP ( ORDER BY product ASC) AS products\\nFROM (SELECT DISTINCT sell_date, product FROM Activities)A\\nGROUP BY sell_date\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT sell_date, \\n    COUNT(product) AS num_sold, \\n    STRING_AGG(product,\\',\\') WITHIN GROUP ( ORDER BY product ASC) AS products\\nFROM (SELECT DISTINCT sell_date, product FROM Activities)A\\nGROUP BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2223011,
                "title": "group-sold-products-by-the-date",
                "content": "```\\nSELECT sell_date,\\nCOUNT(distinct(product)) AS num_sold,\\nGROUP_CONCAT(DISTINCT(product) ORDER BY product SEPARATOR \\',\\') as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,product;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date,\\nCOUNT(distinct(product)) AS num_sold,\\nGROUP_CONCAT(DISTINCT(product) ORDER BY product SEPARATOR \\',\\') as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,product;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2173362,
                "title": "mysql-solution-group-sold-products-by-the-date",
                "content": "In this question , we need to group our data based on the selling date  and we need to provide date and number of product sell at that day in the output :\\n              \\n\\t\\t\\t  SELECT \\n                         sell_date , \\n                         COUNT(DISTINCT product) AS num_sold , \\n              FROM activities\\n              GROUP BY sell_date \\n\\t\\n\\nNow as we need to order the output table based on selling_date so , \\n              \\n\\t\\t\\t  SELECT \\n                        sell_date , \\n                        COUNT(DISTINCT product) AS num_sold , \\n               FROM activities\\n               GROUP BY sell_date \\n               ORDER BY sell_date\\n     \\nAt last we are left with one column where we need to display the name of products which were sold at that day , products need to be display by adding \" , \" between them for that we had used a fuction :\\n\\n**Group_concat( column name)** : Function is used to contcat the values and inclued \\',\\' between them . \\n\\t\\n\\t  SELECT \\n                 sell_date , \\n                 COUNT(DISTINCT product) AS num_sold , \\n                 GROUP_CONCAT(DISTINCT product) AS products\\n      FROM activities\\n      GROUP BY sell_date \\n      ORDER BY sell_date",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "In this question , we need to group our data based on the selling date  and we need to provide date and number of product sell at that day in the output :\\n              \\n\\t\\t\\t  SELECT \\n                         sell_date , \\n                         COUNT(DISTINCT product) AS num_sold , \\n              FROM activities\\n              GROUP BY sell_date \\n\\t\\n\\nNow as we need to order the output table based on selling_date so , \\n              \\n\\t\\t\\t  SELECT \\n                        sell_date , \\n                        COUNT(DISTINCT product) AS num_sold , \\n               FROM activities\\n               GROUP BY sell_date \\n               ORDER BY sell_date\\n     \\nAt last we are left with one column where we need to display the name of products which were sold at that day , products need to be display by adding \" , \" between them for that we had used a fuction :\\n\\n**Group_concat( column name)** : Function is used to contcat the values and inclued \\',\\' between them . \\n\\t\\n\\t  SELECT \\n                 sell_date , \\n                 COUNT(DISTINCT product) AS num_sold , \\n                 GROUP_CONCAT(DISTINCT product) AS products\\n      FROM activities\\n      GROUP BY sell_date \\n      ORDER BY sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 2145382,
                "title": "you-got-it",
                "content": "select sell_date , Count(distinct product) \\'num_sold\\' ,\\nGroup_concat(Distinct product order by product) \\'products\\'\\nfrom activities group by sell_date;",
                "solutionTags": [],
                "code": "select sell_date , Count(distinct product) \\'num_sold\\' ,\\nGroup_concat(Distinct product order by product) \\'products\\'\\nfrom activities group by sell_date;",
                "codeTag": "Unknown"
            },
            {
                "id": 2039241,
                "title": "concat-95",
                "content": "```\\nselect\\n    sell_date, \\n    count(distinct product) as num_sold, \\n    group_concat(distinct product order by product asc) as products \\nfrom \\n    activities \\ngroup by \\n    sell_date\\norder by \\n    sell_date \\n```\\n\\nif you like this, please upvote.",
                "solutionTags": [],
                "code": "```\\nselect\\n    sell_date, \\n    count(distinct product) as num_sold, \\n    group_concat(distinct product order by product asc) as products \\nfrom \\n    activities \\ngroup by \\n    sell_date\\norder by \\n    sell_date \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2031482,
                "title": "tsql-string-agg-statement",
                "content": "```\\nSELECT sell_date, COUNT(DISTINCT(product)) AS num_sold, \\n    STRING_AGG(product,\\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM \\n(SELECT DISTINCT sell_date, product FROM Activities) T\\nGROUP BY sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT sell_date, COUNT(DISTINCT(product)) AS num_sold, \\n    STRING_AGG(product,\\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM \\n(SELECT DISTINCT sell_date, product FROM Activities) T\\nGROUP BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1980629,
                "title": "easy-solution-distinct-group-concat-group-by",
                "content": "SELECT sell_date, count(distinct product) as num_sold, group_concat(distinct product) as products\\nFROM activities\\nGROUP BY sell_date;",
                "solutionTags": [],
                "code": "SELECT sell_date, count(distinct product) as num_sold, group_concat(distinct product) as products\\nFROM activities\\nGROUP BY sell_date;",
                "codeTag": "Unknown"
            },
            {
                "id": 1936549,
                "title": "using-group-concat-easy-understanding-sql",
                "content": "The main problem here is to concatenate the distinct products that were sold on a particular date. \\n\\nWe can do that by using ```GROUP_CONCAT``` keyword.\\nWe provide the `DISTINCT` keyword in both count and group_concat functions because we don\\'t want any duplicate records to mess with our counts. (Question does mention that duplicate entries might be present).\\n\\n## Query:\\n\\n```sql\\n\\nselect sell_date, count(distinct product) as num_sold, group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```GROUP_CONCAT```\n```sql\\n\\nselect sell_date, count(distinct product) as num_sold, group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1882323,
                "title": "mysql-using-count-group-contact",
                "content": "```\\nselect sell_date, count(distinct product) num_sold, \\ngroup_concat(distinct product order by product) \\nproducts from Activities group by sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date, count(distinct product) num_sold, \\ngroup_concat(distinct product order by product) \\nproducts from Activities group by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1810821,
                "title": "simple-solution-using-group-concat-in-mysql",
                "content": "```\\nselect sell_date, \\n        count(distinct product) as num_sold,\\n        group_concat(distinct product order by product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nselect sell_date, \\n        count(distinct product) as num_sold,\\n        group_concat(distinct product order by product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1604982,
                "title": "mysql",
                "content": "```\\nselect distinct sell_date, count(distinct product) as num_sold, \\ngroup_concat(distinct product order by product) as products\\nfrom activities \\ngroup by sell_date\\norder by sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nselect distinct sell_date, count(distinct product) as num_sold, \\ngroup_concat(distinct product order by product) as products\\nfrom activities \\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 720664,
                "title": "simple-mysql-answer",
                "content": "# answer 1\\n> Runtime: 729 ms, faster than 25.00% of MySQL online submissions for Group Sold Products By The Date.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Group Sold Products By The Date.\\n\\n```sql\\nselect \\n\\tsell_date, \\n\\tCOUNT(product) num_sold,  \\n\\tgroup_concat(product order by product) products \\nfrom (SELECT DISTINCT * FROM Activities) Activities\\ngroup by sell_date\\norder by sell_date\\n```\\n# answer 2\\n> Runtime: 656 ms, faster than 35.06% of MySQL online submissions for Group Sold Products By The Date.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Group Sold Products By The Date.\\n\\n```sql\\nselect \\n    sell_date, COUNT(DISTINCT product) num_sold, \\n    group_concat(DISTINCT product) products \\nfrom Activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "solutionTags": [],
                "code": "```sql\\nselect \\n\\tsell_date, \\n\\tCOUNT(product) num_sold,  \\n\\tgroup_concat(product order by product) products \\nfrom (SELECT DISTINCT * FROM Activities) Activities\\ngroup by sell_date\\norder by sell_date\\n```\n```sql\\nselect \\n    sell_date, COUNT(DISTINCT product) num_sold, \\n    group_concat(DISTINCT product) products \\nfrom Activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 711161,
                "title": "mssql-xml-path",
                "content": "```\\n1. Distinct Rows\\n\\t\\tselect distinct * from activities\\n```\\n```\\n2. XML Path\\n\\t\\tselect \\',\\' + tb1.product from (select distinct * from activities) tb1 for XML path(\\'\\')\\n```\\n```\\n3. Add Stuff\\n\\t\\tselect products = stuff((select \\',\\' + a.product from (select distinct * from activities) a for XML path(\\'\\')),1,1,\\'\\')\\n```\\n```\\n4. Subquery\\n\\t\\tselect sell_date, count(distinct product) \\'num_sold\\', \\n\\t\\tproducts = stuff((select \\',\\' + a.product from (select distinct * from activities) a \\n\\t\\twhere a.sell_date = aa.sell_date for XMl path(\\'\\')),1,1,\\'\\')\\n\\t\\tfrom Activities aa group by aa.sell_date\\n```",
                "solutionTags": [],
                "code": "```\\n1. Distinct Rows\\n\\t\\tselect distinct * from activities\\n```\n```\\n2. XML Path\\n\\t\\tselect \\',\\' + tb1.product from (select distinct * from activities) tb1 for XML path(\\'\\')\\n```\n```\\n3. Add Stuff\\n\\t\\tselect products = stuff((select \\',\\' + a.product from (select distinct * from activities) a for XML path(\\'\\')),1,1,\\'\\')\\n```\n```\\n4. Subquery\\n\\t\\tselect sell_date, count(distinct product) \\'num_sold\\', \\n\\t\\tproducts = stuff((select \\',\\' + a.product from (select distinct * from activities) a \\n\\t\\twhere a.sell_date = aa.sell_date for XMl path(\\'\\')),1,1,\\'\\')\\n\\t\\tfrom Activities aa group by aa.sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3891154,
                "title": "eassy-mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect sell_date,\\ncount(distinct product) as num_sold,\\nGroup_concat(distinct product) as products from activities\\ngroup by sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect sell_date,\\ncount(distinct product) as num_sold,\\nGroup_concat(distinct product) as products from activities\\ngroup by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3578692,
                "title": "simple-mysql-solution-group-concat",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect sell_date, \\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product order by product separator \\',\\') as products\\nfrom activities\\ngroup by sell_date\\norder by sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect sell_date, \\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product order by product separator \\',\\') as products\\nfrom activities\\ngroup by sell_date\\norder by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3514785,
                "title": "simple-and-easy-to-understand-mysql-query",
                "content": "\\n\\n# Code\\n```\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold, \\n       GROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold, \\n       GROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3514732,
                "title": "t-sql-string-agg-function-used",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nselect \\n  sell_date, \\n  count(distinct product) as num_sold, \\n  string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product) as products\\nfrom (select distinct sell_date, product from activities) ac\\ngroup by ac.sell_date\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nselect \\n  sell_date, \\n  count(distinct product) as num_sold, \\n  string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product) as products\\nfrom (select distinct sell_date, product from activities) ac\\ngroup by ac.sell_date\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3260625,
                "title": "solution-with-string-agg-function-sql-server",
                "content": "# Intuition\\r\\n<!-- Describe your first thoughts on how to solve this problem. -->\\r\\n\\r\\n# Approach\\r\\n<!-- Describe your approach to solving the problem. -->\\r\\n\\r\\n# Complexity\\r\\n- Time complexity:\\r\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n- Space complexity:\\r\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n# Code\\r\\n```\\r\\n/* Write your T-SQL query statement below */\\r\\n\\r\\n-- /* SOLUTION 1: \\r\\nSELECT\\r\\n\\tsell_date,\\r\\n\\tCOUNT(product) num_sold,\\r\\n\\tSTRING_AGG(product,\\',\\') WITHIN GROUP(ORDER BY product ) products \\r\\nFROM\\r\\n    (\\r\\n\\r\\n        SELECT\\r\\n            DISTINCT\\r\\n            sell_date,\\r\\n            product\\r\\n        FROM\\r\\n            Activities\\r\\n    )TBL\\r\\n\\t\\r\\nGROUP BY\\r\\n\\tsell_date\\r\\n--SOLUTION 1: */\\r\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\r\\n/* Write your T-SQL query statement below */\\r\\n\\r\\n-- /* SOLUTION 1: \\r\\nSELECT\\r\\n\\tsell_date,\\r\\n\\tCOUNT(product) num_sold,\\r\\n\\tSTRING_AGG(product,\\',\\') WITHIN GROUP(ORDER BY product ) products \\r\\nFROM\\r\\n    (\\r\\n\\r\\n        SELECT\\r\\n            DISTINCT\\r\\n            sell_date,\\r\\n            product\\r\\n        FROM\\r\\n            Activities\\r\\n    )TBL\\r\\n\\t\\r\\nGROUP BY\\r\\n\\tsell_date\\r\\n--SOLUTION 1: */\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2677051,
                "title": "mysql-solution",
                "content": "```\\nSELECT sell_date, count(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product SEPARATOR \\',\\') AS products\\n\\tFROM Activities\\n\\tGROUP BY sell_date\\n\\tORDER BY sell_date\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date, count(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product SEPARATOR \\',\\') AS products\\n\\tFROM Activities\\n\\tGROUP BY sell_date\\n\\tORDER BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2671711,
                "title": "products-sold-in-each-day-solved-using-groupconcat",
                "content": "\\nHere we simply selecting the date , number of unique products sold and then we are displaying those products sold in each day using a keyword called \"GROUP_CONCAT\"\\n\\nGROUP CONCAT:\\nGROUP_CONCAT() function returns a string with concatenated non-NULL value from a group.\\n\\nQUERY:\\n\\nSELECT sell_date, \\n    count(DISTINCT product) as num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date \\nORDER BY sell_date;",
                "solutionTags": [],
                "code": "\\nHere we simply selecting the date , number of unique products sold and then we are displaying those products sold in each day using a keyword called \"GROUP_CONCAT\"\\n\\nGROUP CONCAT:\\nGROUP_CONCAT() function returns a string with concatenated non-NULL value from a group.\\n\\nQUERY:\\n\\nSELECT sell_date, \\n    count(DISTINCT product) as num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date \\nORDER BY sell_date;",
                "codeTag": "Unknown"
            },
            {
                "id": 2594165,
                "title": "sql-server-using-stuff-for-xml-path",
                "content": "select \\n    sell_date,\\n    Count(distinct product) num_sold,\\n    stuff(\\n        (\\n            select distinct\\n                \\',\\'+ a1.Product\\n            from\\n                Activities a1\\n            where\\n                a1.sell_date = a.sell_date\\n            for xml path(\\'\\')\\n        ),1,1,\\'\\'\\n    ) products\\nfrom\\n    Activities a\\ngroup by Sell_date",
                "solutionTags": [],
                "code": "select \\n    sell_date,\\n    Count(distinct product) num_sold,\\n    stuff(\\n        (\\n            select distinct\\n                \\',\\'+ a1.Product\\n            from\\n                Activities a1\\n            where\\n                a1.sell_date = a.sell_date\\n            for xml path(\\'\\')\\n        ),1,1,\\'\\'\\n    ) products\\nfrom\\n    Activities a\\ngroup by Sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 2563048,
                "title": "easy-mysql-solution-with-explanation",
                "content": "Rate me up if my solution was useful for you :)\\n\\n```\\nSELECT\\n    a.sell_date, #1\\n    COUNT(DISTINCT a.product) AS num_sold, #2\\n    GROUP_CONCAT(\\n        DISTINCT a.product ORDER BY a.product SEPARATOR \\',\\' #3\\n    ) AS products\\nFROM Activities a\\nGROUP BY a.sell_date #4\\nORDER BY a.sell_date; #5\\n```\\n\\n1. We simply select *sale date* because it nedeed by problem description.\\n2. We sould count only all **distinct** products in group by *sell date*.\\n3. Now we should query all **distinct** products names by *sell date*  and combine it in a string by comma without spaces in lexicographical order by *product name*. All rows who we combinating already groupped by *sell date* (see point #4).\\n4. Group all selected rows by *sell date*.\\n5. And order all rows by *sell date*.\\n\\nThank you! %)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT\\n    a.sell_date, #1\\n    COUNT(DISTINCT a.product) AS num_sold, #2\\n    GROUP_CONCAT(\\n        DISTINCT a.product ORDER BY a.product SEPARATOR \\',\\' #3\\n    ) AS products\\nFROM Activities a\\nGROUP BY a.sell_date #4\\nORDER BY a.sell_date; #5\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2499159,
                "title": "solution-in-mysql",
                "content": "```\\nselect sell_date, \\ncount(distinct product) as num_sold, \\n    group_concat(distinct product order by product) as products\\nfrom Activities\\ngroup by sell_date;\\n```",
                "solutionTags": [],
                "code": "```\\nselect sell_date, \\ncount(distinct product) as num_sold, \\n    group_concat(distinct product order by product) as products\\nfrom Activities\\ngroup by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2493429,
                "title": "mysql-simple-and-clean-solution",
                "content": "**Please Upvote if it helped you !!!**\\n```\\nselect sell_date,\\ncount(distinct product) as num_sold ,\\ngroup_concat(distinct product order by product) as products\\nfrom Activities\\ngroup by sell_date \\norder by sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date,\\ncount(distinct product) as num_sold ,\\ngroup_concat(distinct product order by product) as products\\nfrom Activities\\ngroup by sell_date \\norder by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2483556,
                "title": "mysql-solution-faster-than-100-group-concat",
                "content": "```\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2464227,
                "title": "mysql-solution-using-group-concat",
                "content": "```\\nselect sell_date,count(distinct product) as num_sold,\\ngroup_concat(distinct product order by product separator \\',\\') as products\\nfrom activities\\ngroup by sell_date\\norder by sell_date;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date,count(distinct product) as num_sold,\\ngroup_concat(distinct product order by product separator \\',\\') as products\\nfrom activities\\ngroup by sell_date\\norder by sell_date;",
                "codeTag": "Unknown"
            },
            {
                "id": 2405525,
                "title": "oracle-using-listagg",
                "content": "SELECT \\n    TO_CHAR(sell_date,\\'yyyy-mm-dd\\') AS sell_date,\\n    COUNT(DISTINCT product) AS num_sold,\\n    LISTAGG(product,\\',\\') WITHIN GROUP (ORDER BY product) AS products \\nFROM (SELECT \\n        DISTINCT sell_date, product FROM activities) \\nGROUP BY sell_date \\nORDER BY sell_date;\\n\\n**Please upvote if you liked the solution**",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "SELECT \\n    TO_CHAR(sell_date,\\'yyyy-mm-dd\\') AS sell_date,\\n    COUNT(DISTINCT product) AS num_sold,\\n    LISTAGG(product,\\',\\') WITHIN GROUP (ORDER BY product) AS products \\nFROM (SELECT \\n        DISTINCT sell_date, product FROM activities) \\nGROUP BY sell_date \\nORDER BY sell_date;\\n\\n**Please upvote if you liked the solution**",
                "codeTag": "Unknown"
            },
            {
                "id": 2390153,
                "title": "mysql-easy-to-read-solution-group-concat-and-count-distinct",
                "content": "```\\nSELECT sell_date,\\nCOUNT(DISTINCT(product)) as num_sold,\\nGROUP_CONCAT(DISTINCT product ORDER BY product SEPARATOR \\',\\') as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date\\n```\\n\\nFirst time using the GROUP_CONCAT function so this answer was tough and required some googling.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date,\\nCOUNT(DISTINCT(product)) as num_sold,\\nGROUP_CONCAT(DISTINCT product ORDER BY product SEPARATOR \\',\\') as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2386432,
                "title": "mysql-easy-to-understand-group-concat-distinct",
                "content": "```\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product) AS products FROM Activities GROUP BY sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product) AS products FROM Activities GROUP BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2359160,
                "title": "mysql-group-concat-group-by-count-easy-to-understand",
                "content": "```\\nselect sell_date,\\ncount(distinct(product)) as num_sold,\\ngroup_concat(distinct(product)) as products\\nfrom Activities \\ngroup by sell_date order by sell_date;\\n```",
                "solutionTags": [],
                "code": "```\\nselect sell_date,\\ncount(distinct(product)) as num_sold,\\ngroup_concat(distinct(product)) as products\\nfrom Activities \\ngroup by sell_date order by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2354721,
                "title": "easiest-solution-with-explanation-mysql-postgresql",
                "content": "```\\n# select sell_data, distinct count of products, concatenate the products in ascending order using a separator\\n# group the data by sell_data in ascending order\\n\\n# MySQL solution\\nSELECT sell_date, count(distinct(product)) as num_sold,\\nGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products \\nFROM activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC;\\n\\n# PostgreSQL solution\\nSELECT sell_date, count(distinct(product)) as num_sold,\\narray_to_string(array_agg(DISTINCT product ORDER BY product ASC), \\',\\') AS products \\nFROM activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# select sell_data, distinct count of products, concatenate the products in ascending order using a separator\\n# group the data by sell_data in ascending order\\n\\n# MySQL solution\\nSELECT sell_date, count(distinct(product)) as num_sold,\\nGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products \\nFROM activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC;\\n\\n# PostgreSQL solution\\nSELECT sell_date, count(distinct(product)) as num_sold,\\narray_to_string(array_agg(DISTINCT product ORDER BY product ASC), \\',\\') AS products \\nFROM activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2272923,
                "title": "mysql-3-lines",
                "content": "```\\nSELECT sell_date, COUNT(DISTINCT(product)) AS num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM Activities\\nGROUP BY sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT sell_date, COUNT(DISTINCT(product)) AS num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM Activities\\nGROUP BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2243995,
                "title": "funny-solution",
                "content": "```\\n\\nSELECT \\n    sell_date, \\n    COUNT(DISTINCT(product)) AS num_sold, \\n    GROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM \\n    Activities \\nGROUP BY\\n    sell_date;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Go"
                ],
                "code": "```\\n\\nSELECT \\n    sell_date, \\n    COUNT(DISTINCT(product)) AS num_sold, \\n    GROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM \\n    Activities \\nGROUP BY\\n    sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2206666,
                "title": "easy-to-understand-simple-solution",
                "content": "SELECT sell_date, count(DISTINCT product) num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product) products\\nFROM Activities\\nGROUP BY sell_date",
                "solutionTags": [],
                "code": "SELECT sell_date, count(DISTINCT product) num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product) products\\nFROM Activities\\nGROUP BY sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 2185059,
                "title": "mysql-using-group-concat-group-by-distinct",
                "content": "```\\n# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product order by product) as products\\nfrom activities\\ngroup by sell_date;\\n\\n\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product order by product) as products\\nfrom activities\\ngroup by sell_date;\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2171881,
                "title": "sql-solution",
                "content": "```\\nselect sell_date, \\ncount(distinct product) as num_sold ,\\ngroup_concat(distinct product) as products\\nfrom activities \\ngroup by sell_date; \\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date, \\ncount(distinct product) as num_sold ,\\ngroup_concat(distinct product) as products\\nfrom activities \\ngroup by sell_date; \\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2104409,
                "title": "using-group-concat-and-distinct",
                "content": "select sell_date, count(distinct product) as num_sold, group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date\\n\\ngroup_concat : https://www.w3resource.com/mysql/aggregate-functions-and-grouping/aggregate-functions-and-grouping-group_concat.php\\ndistinct get rid of the duplicate.",
                "solutionTags": [],
                "code": "select sell_date, count(distinct product) as num_sold, group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date\\n\\ngroup_concat : https://www.w3resource.com/mysql/aggregate-functions-and-grouping/aggregate-functions-and-grouping-group_concat.php\\ndistinct get rid of the duplicate.",
                "codeTag": "Unknown"
            },
            {
                "id": 2100743,
                "title": "beginner-friendly-solutions",
                "content": "```\\n# Write your MySQL query statement below\\nselect\\n    sell_date,\\n     count(distinct product) as num_sold,\\n     group_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect\\n    sell_date,\\n     count(distinct product) as num_sold,\\n     group_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2053447,
                "title": "using-cte-common-table-expression",
                "content": "/* Write your T-SQL query statement below */\\n\\n\\nWITH a (product, sell_date) AS (\\n    SELECT    \\n        distinct product, sell_date\\n    FROM    \\n        activities)\\n\\n\\nselect sell_date,count(distinct product) as num_sold,\\nSTRING_AGG(product,\\',\\') within group (order by product asc) products\\nfrom a \\ngroup by sell_date\\norder by sell_date asc",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "/* Write your T-SQL query statement below */\\n\\n\\nWITH a (product, sell_date) AS (\\n    SELECT    \\n        distinct product, sell_date\\n    FROM    \\n        activities)\\n\\n\\nselect sell_date,count(distinct product) as num_sold,\\nSTRING_AGG(product,\\',\\') within group (order by product asc) products\\nfrom a \\ngroup by sell_date\\norder by sell_date asc",
                "codeTag": "Unknown"
            },
            {
                "id": 2050076,
                "title": "simple-mysql-solution",
                "content": "Select sell_date, Count(Distinct product) As num_sold, Group_Concat(Distinct product Order By product Separator \\',\\') As products From Activities \\nGroup By sell_date\\nOrder By sell_date;\\n",
                "solutionTags": [],
                "code": "Select sell_date, Count(Distinct product) As num_sold, Group_Concat(Distinct product Order By product Separator \\',\\') As products From Activities \\nGroup By sell_date\\nOrder By sell_date;\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2049870,
                "title": "simple-sql-solution",
                "content": "```\\n/* Write your T-SQL query statement below */\\nSELECT \\n  A.sell_date, \\n  COUNT(DISTINCT A.product) num_sold, \\n  STUFF(\\n    (\\n      SELECT \\n        DISTINCT \\',\\' + product \\n      FROM \\n        Activities IA \\n      WHERE \\n        IA.sell_date = A.sell_date FOR XML PATH(\\'\\')\\n    ), \\n    1, \\n    1, \\n    \\'\\'\\n  ) products \\nFROM \\n  Activities A \\nGROUP BY \\n  A.sell_date \\nORDER BY \\n  A.sell_date;\\n```\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT \\n  A.sell_date, \\n  COUNT(DISTINCT A.product) num_sold, \\n  STUFF(\\n    (\\n      SELECT \\n        DISTINCT \\',\\' + product \\n      FROM \\n        Activities IA \\n      WHERE \\n        IA.sell_date = A.sell_date FOR XML PATH(\\'\\')\\n    ), \\n    1, \\n    1, \\n    \\'\\'\\n  ) products \\nFROM \\n  Activities A \\nGROUP BY \\n  A.sell_date \\nORDER BY \\n  A.sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2032990,
                "title": "mysql-simple",
                "content": "``` \\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product order by product asc) as products\\n\\nfrom Activities\\ngroup by sell_date\\norder by sell_date  \\n``` \\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "``` \\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product order by product asc) as products\\n\\nfrom Activities\\ngroup by sell_date\\norder by sell_date  \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2029270,
                "title": "1484-group-sold-products-by-the-date",
                "content": "```\\nSELECT sell_date,\\n       Count(DISTINCT( product ))        AS num_sold,\\n       Group_concat(DISTINCT( product )) AS products\\nFROM   activities\\nGROUP  BY sell_date; \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date,\\n       Count(DISTINCT( product ))        AS num_sold,\\n       Group_concat(DISTINCT( product )) AS products\\nFROM   activities\\nGROUP  BY sell_date; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1999654,
                "title": "simple-mysql-solution",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1972352,
                "title": "ms-sql-simple-solution-using-string-agg",
                "content": "```\\nselect sell_date, count(distinct product) as num_sold\\n,(select string_agg(product, \\',\\') within group(order by product) from \\n  (select distinct product from Activities where sell_date = y.sell_date) x) as products    \\nfrom Activities y\\ngroup by sell_date \\norder by sell_date \\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nselect sell_date, count(distinct product) as num_sold\\n,(select string_agg(product, \\',\\') within group(order by product) from \\n  (select distinct product from Activities where sell_date = y.sell_date) x) as products    \\nfrom Activities y\\ngroup by sell_date \\norder by sell_date \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1964814,
                "title": "mysql-solution",
                "content": "# Solution\\n```\\nselect sell_date, count(*) as num_sold, STRING_AGG( product,\\',\\') WITHIN GROUP ( ORDER BY product ASC) as products\\nfrom (select distinct sell_date,product from Activities) as tab\\ngroup by sell_date\\norder by sell_date\\n```\\n**STRING_AGG** is an aggregate function that takes all expressions from rows and concatenates them into a single string.\\nIf you find this **solution** and **explanation** helpful, please **upvote** it for others people.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date, count(*) as num_sold, STRING_AGG( product,\\',\\') WITHIN GROUP ( ORDER BY product ASC) as products\\nfrom (select distinct sell_date,product from Activities) as tab\\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1951209,
                "title": "easy-solution-with-explanation",
                "content": "```\\nselect sell_date,\\ncount(distinct(product)) as num_sold,#counting the number of products sold that day sepretly \\ngroup_concat(distinct (product))  as products# to group the product that sold in the same day\\nfrom activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nselect sell_date,\\ncount(distinct(product)) as num_sold,#counting the number of products sold that day sepretly \\ngroup_concat(distinct (product))  as products# to group the product that sold in the same day\\nfrom activities\\ngroup by sell_date\\norder by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1488017,
                "title": "using-group-concat",
                "content": "SELECT \\n      sell_date, \\n      COUNT(DISTINCT(product)) AS num_sold,\\n      GROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY 1;",
                "solutionTags": [],
                "code": "SELECT \\n      sell_date, \\n      COUNT(DISTINCT(product)) AS num_sold,\\n      GROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY 1;",
                "codeTag": "Unknown"
            },
            {
                "id": 1212779,
                "title": "mysql-never-in-my-life-have-i-needed-group-concat-lol",
                "content": "```sql\\nwith\\n\\n  cte_agg as (\\n    select\\n      sell_date,\\n      count(distinct product) as num_sold,\\n      group_concat(distinct product order by product separator \\',\\') as products\\n    from Activities\\n    group by 1\\n    order by 1\\n  )\\n  \\nselect * from cte_agg\\n```",
                "solutionTags": [],
                "code": "```sql\\nwith\\n\\n  cte_agg as (\\n    select\\n      sell_date,\\n      count(distinct product) as num_sold,\\n      group_concat(distinct product order by product separator \\',\\') as products\\n    from Activities\\n    group by 1\\n    order by 1\\n  )\\n  \\nselect * from cte_agg\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 907776,
                "title": "99-84-faster",
                "content": "SELECT\\n    sell_date, \\n\\tCOUNT(DISTINCT product) AS num_sold, \\n\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM\\n    Activities\\nGROUP BY 1\\nORDER BY 1 ASC\\n",
                "solutionTags": [],
                "code": "SELECT\\n    sell_date, \\n\\tCOUNT(DISTINCT product) AS num_sold, \\n\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM\\n    Activities\\nGROUP BY 1\\nORDER BY 1 ASC\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 830730,
                "title": "mssql-solution-using-string-agg",
                "content": "Select sell_date, count(distinct product) as num_sold , string_agg(product, \\',\\') as products\\nfrom(\\nSelect distinct product, sell_date\\nfrom Activities) a\\ngroup by sell_date",
                "solutionTags": [],
                "code": "Select sell_date, count(distinct product) as num_sold , string_agg(product, \\',\\') as products\\nfrom(\\nSelect distinct product, sell_date\\nfrom Activities) a\\ngroup by sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 762490,
                "title": "mysql-group-concat-function",
                "content": "```\\n# Write your MySQL query statement below\\nselect sell_date, count(distinct product) as num_sold, \\ngroup_concat(distinct product order by product ASC separator \\',\\') as products from Activities \\ngroup by sell_date\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nselect sell_date, count(distinct product) as num_sold, \\ngroup_concat(distinct product order by product ASC separator \\',\\') as products from Activities \\ngroup by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 708479,
                "title": "simple-solution-by-using-group-concat",
                "content": "select sell_date, \\ncount(distinct product) as num_sold, \\ngroup_concat(distinct product order by product ASC separator \\',\\') as products from activities\\ngroup by sell_date;",
                "solutionTags": [],
                "code": "select sell_date, \\ncount(distinct product) as num_sold, \\ngroup_concat(distinct product order by product ASC separator \\',\\') as products from activities\\ngroup by sell_date;",
                "codeTag": "Unknown"
            },
            {
                "id": 692982,
                "title": "2-approches-for-mssql-string-agg-and-xml",
                "content": "1. Using the `string_agg` function, this approach is rather straightforward.\\n\\n```\\nselect\\nsell_date\\n, num_sold = count(product)\\n, products = string_agg(product, \\',\\') within group(order by product)\\nfrom \\n(select distinct sell_date, product from Activities) t\\ngroup by sell_date\\norder by sell_date\\n```\\n\\n2. Using the built-in XML syntax.\\nThe tricky part is to \"concatenate\" the sold products on the same day.\\n* Using XML to push all the products into one single row\\n* Using LEFT(XXX, len(XXX)-1) to remove the last comma.\\n\\n\\n```\\nselect\\nsell_date\\n, num_sold = count(distinct product)\\n, products = left(\\n\\t\\t\\t\\t(select distinct product + \\',\\' from Activities A2 where A1.sell_date = A2.sell_date order by 1  for xml path (\\'\\')) \\n\\t\\t\\t\\t,\\n\\t\\t\\t\\tlen((select distinct product + \\',\\' from Activities A2 where A1.sell_date = A2.sell_date order by 1  for xml path (\\'\\'))) -1\\n\\t\\t\\t    )\\nfrom Activities A1\\ngroup by sell_date\\norder by sell_date\\n\\n```\\n",
                "solutionTags": [],
                "code": "```\\nselect\\nsell_date\\n, num_sold = count(product)\\n, products = string_agg(product, \\',\\') within group(order by product)\\nfrom \\n(select distinct sell_date, product from Activities) t\\ngroup by sell_date\\norder by sell_date\\n```\n```\\nselect\\nsell_date\\n, num_sold = count(distinct product)\\n, products = left(\\n\\t\\t\\t\\t(select distinct product + \\',\\' from Activities A2 where A1.sell_date = A2.sell_date order by 1  for xml path (\\'\\')) \\n\\t\\t\\t\\t,\\n\\t\\t\\t\\tlen((select distinct product + \\',\\' from Activities A2 where A1.sell_date = A2.sell_date order by 1  for xml path (\\'\\'))) -1\\n\\t\\t\\t    )\\nfrom Activities A1\\ngroup by sell_date\\norder by sell_date\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 692799,
                "title": "mysql-solution-group-concat",
                "content": "select sell_date, \\n    count(distinct product) as num_sold, \\n    group_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date",
                "solutionTags": [],
                "code": "select sell_date, \\n    count(distinct product) as num_sold, \\n    group_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 692797,
                "title": "simple-mysql-solution-most-optimal-faster-than-100",
                "content": "SELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product SEPARATOR \\',\\') AS products\\nFROM Activities \\nGROUP BY sell_date\\nORDER BY sell_date ASC",
                "solutionTags": [],
                "code": "SELECT sell_date, COUNT(DISTINCT product) AS num_sold, GROUP_CONCAT(DISTINCT product SEPARATOR \\',\\') AS products\\nFROM Activities \\nGROUP BY sell_date\\nORDER BY sell_date ASC",
                "codeTag": "Unknown"
            },
            {
                "id": 4066344,
                "title": "pandas-easy-explained-step-by-step-group-sold-products-by-the-date",
                "content": "[see the successfully Accepted Solution](https://leetcode.com/submissions/detail/1054010892/)\\n\\n```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    grouped_table = activities.groupby(\\'sell_date\\')\\n    statistics_product =grouped_table.agg(\\n    num_sold=(\\'product\\', \\'nunique\\'),\\n    products=(\\'product\\', lambda x: \\',\\'.join(sorted(x.unique())))\\n)\\n     \\n    statistics_product_index = statistics_product.reset_index()\\n    \\n    return statistics_product_index\\n```\\n\\n\\n\\n**Intuition Explained**\\nFirst, we group the \\'activities\\' DataFrame by the \\'sell_date\\' column. It effectively splits the DataFrame into multiple groups, each corresponding to a unique \\'sell_date\\' value.\\n```\\n    grouped_table = activities.groupby(\\'sell_date\\')\\n```\\n\\nThen we perform aggregation operations on each group created by the \\'sell_date\\'.\\n```\\n    statistics_product =grouped_table.agg(\\n```\\n\\nWe must calculate the number of unique products sold within each group. The result is a new column named \\'num_sold\\' in the statistics_product DataFrame, which represents the count of unique products sold on each \\'sell_date\\'.\\n```\\n    num_sold=(\\'product\\', \\'nunique\\'),\\n```\\n\\nWe must also create a new column named \\'products\\' in the statistics_product which gets the unique values of the \\'product\\' column within each group, sorts the unique product values. and joins the sorted unique product values into a single comma-separated string.\\n```\\n    products=(\\'product\\', lambda x: \\',\\'.join(sorted(x.unique()))))\\n```\\n\\nThen, we remove the current index and assigns a new default integer index to the DataFrame.\\n```\\n    statistics_product_index = statistics_product.reset_index()\\n```\\n\\n\\n![image](https://assets.leetcode.com/users/images/658b38cc-c1d4-48c7-b194-a10d15fe7b04_1695164239.1172192.jpeg)\\n",
                "solutionTags": [],
                "code": "```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    grouped_table = activities.groupby(\\'sell_date\\')\\n    statistics_product =grouped_table.agg(\\n    num_sold=(\\'product\\', \\'nunique\\'),\\n    products=(\\'product\\', lambda x: \\',\\'.join(sorted(x.unique())))\\n)\\n     \\n    statistics_product_index = statistics_product.reset_index()\\n    \\n    return statistics_product_index\\n```\n```\\n    grouped_table = activities.groupby(\\'sell_date\\')\\n```\n```\\n    statistics_product =grouped_table.agg(\\n```\n```\\n    num_sold=(\\'product\\', \\'nunique\\'),\\n```\n```\\n    products=(\\'product\\', lambda x: \\',\\'.join(sorted(x.unique()))))\\n```\n```\\n    statistics_product_index = statistics_product.reset_index()\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4054424,
                "title": "ms-sql-string-agg-within-group",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSELECT\\n    sell_date,\\n    COUNT(DISTINCT product) AS num_sold,\\n    STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n    (SELECT DISTINCT\\n        *\\n    FROM\\n        Activities) subquery\\nGROUP BY\\n    sell_date\\nORDER BY\\n    sell_date\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT\\n    sell_date,\\n    COUNT(DISTINCT product) AS num_sold,\\n    STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n    (SELECT DISTINCT\\n        *\\n    FROM\\n        Activities) subquery\\nGROUP BY\\n    sell_date\\nORDER BY\\n    sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3973237,
                "title": "some-shit-beats-86-65-in-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    activities = activities.drop_duplicates()\\n    size = activities.groupby(\"sell_date\").size().reset_index(name=\\'num_sold\\')\\n    products = activities.groupby(\"sell_date\")[\"product\"].apply(lambda x: \\',\\'.join(sorted(x))).reset_index(name=\\'products\\')\\n    result = pd.merge(size, products, on=\\'sell_date\\')\\n    return result.rename(columns={\"product\": \"products\"}).sort_values(by=\"sell_date\")\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    activities = activities.drop_duplicates()\\n    size = activities.groupby(\"sell_date\").size().reset_index(name=\\'num_sold\\')\\n    products = activities.groupby(\"sell_date\")[\"product\"].apply(lambda x: \\',\\'.join(sorted(x))).reset_index(name=\\'products\\')\\n    result = pd.merge(size, products, on=\\'sell_date\\')\\n    return result.rename(columns={\"product\": \"products\"}).sort_values(by=\"sell_date\")\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3967400,
                "title": "pandas-simple-step-by-step-solution-for-beginners",
                "content": "**\\uD83D\\uDD3C IF YOU FIND THIS POST HELPFUL PLEASE UPVOTE \\uD83D\\uDC4D**\\n```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    grouped = activities.groupby(\\'sell_date\\')[\\'product\\'].agg([\\'nunique\\', lambda x: \\',\\'.join(sorted(set(x)))]).reset_index()\\n    \\n    grouped.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    \\n    grouped[\\'products\\'] = grouped[\\'products\\'].str.replace(r\\'(^|,)Mask(,|$)\\', r\\'\\\\1Mask\\\\2\\')\\n    \\n    result = grouped.sort_values(by=\\'sell_date\\')\\n    \\n    return result\\n```\\n**Thank you for reading! \\uD83D\\uDE04 Comment if you have any questions or feedback.**",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    grouped = activities.groupby(\\'sell_date\\')[\\'product\\'].agg([\\'nunique\\', lambda x: \\',\\'.join(sorted(set(x)))]).reset_index()\\n    \\n    grouped.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    \\n    grouped[\\'products\\'] = grouped[\\'products\\'].str.replace(r\\'(^|,)Mask(,|$)\\', r\\'\\\\1Mask\\\\2\\')\\n    \\n    result = grouped.sort_values(by=\\'sell_date\\')\\n    \\n    return result\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3954766,
                "title": "pandas-vs-sql-easiest-comparison-out-there",
                "content": "I have posted this type of comparison solution for all questions in 30 days of Pandas solutions\\n\\nPandas Code\\n```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    # Group the activities by sell_date and collect the unique products for each date\\n    grouped = activities.groupby(\\'sell_date\\')[\\'product\\'].agg([\\'nunique\\', lambda x: \\',\\'.join(sorted(set(x)))]).reset_index()\\n    \\n    # Rename the columns for clarity\\n    grouped.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    \\n    # Replace variations of \\'Mask\\' with just \\'Mask\\'\\n    grouped[\\'products\\'] = grouped[\\'products\\'].str.replace(r\\'(^|,)Mask(,|$)\\', r\\'\\\\1Mask\\\\2\\')\\n    \\n    # Sort the result table by sell_date\\n    result = grouped.sort_values(by=\\'sell_date\\')\\n    \\n    return result\\n ```\\nSQL Code\\n```\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    # Group the activities by sell_date and collect the unique products for each date\\n    grouped = activities.groupby(\\'sell_date\\')[\\'product\\'].agg([\\'nunique\\', lambda x: \\',\\'.join(sorted(set(x)))]).reset_index()\\n    \\n    # Rename the columns for clarity\\n    grouped.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    \\n    # Replace variations of \\'Mask\\' with just \\'Mask\\'\\n    grouped[\\'products\\'] = grouped[\\'products\\'].str.replace(r\\'(^|,)Mask(,|$)\\', r\\'\\\\1Mask\\\\2\\')\\n    \\n    # Sort the result table by sell_date\\n    result = grouped.sort_values(by=\\'sell_date\\')\\n    \\n    return result\\n ```\n```\\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3953503,
                "title": "t-sql-simple-solution-with-count-string-agg-within",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```sql\\nWITH t AS (SELECT DISTINCT * FROM Activities)\\n\\nSELECT \\n    t.sell_date,\\n    COUNT(t.product) AS num_sold,\\n    STRING_AGG(t.product, \\',\\') WITHIN GROUP (ORDER BY t.product) as products\\nFROM t\\nGROUP BY sell_date\\nORDER BY sell_date\\n```\\n",
                "solutionTags": [
                    "MS SQL Server",
                    "Database"
                ],
                "code": "```sql\\nWITH t AS (SELECT DISTINCT * FROM Activities)\\n\\nSELECT \\n    t.sell_date,\\n    COUNT(t.product) AS num_sold,\\n    STRING_AGG(t.product, \\',\\') WITHIN GROUP (ORDER BY t.product) as products\\nFROM t\\nGROUP BY sell_date\\nORDER BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3946360,
                "title": "using-group-by-and-agg-functions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n   act_df = activities.groupby(\\'sell_date\\')[\\'product\\'].agg([(\\'num_sold\\', \\'nunique\\'),\\n   (\\'products\\', lambda x: \\',\\'.join(sorted(x.unique())))]).reset_index()\\n   return act_df\\n   \\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n   act_df = activities.groupby(\\'sell_date\\')[\\'product\\'].agg([(\\'num_sold\\', \\'nunique\\'),\\n   (\\'products\\', lambda x: \\',\\'.join(sorted(x.unique())))]).reset_index()\\n   return act_df\\n   \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3913822,
                "title": "pandas-solution-3-steps",
                "content": "# Approach\\nGroup by `sell_date`, and join the resulting strings with the comma character `\\',\\'`.\\n\\nAdd a new column `num_sold`, which counts the different strings between commas.\\n\\nRename the `product` column to `products`, sort by `sell_date` and return the DataFrame with the required ordered columns.\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    acts = activities.groupby(\\'sell_date\\')[\\'product\\'].apply(lambda x: \\',\\'.join(sorted(x.unique()))).reset_index()\\n    acts[\\'num_sold\\'] = acts[\\'product\\'].apply(lambda x: len(x.split(\\',\\')))\\n    acts = acts.rename(columns={\\'product\\': \\'products\\'}).sort_values(by=[\\'sell_date\\'], ascending=True)\\n    return acts[[\\'sell_date\\', \\'num_sold\\', \\'products\\']]\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    acts = activities.groupby(\\'sell_date\\')[\\'product\\'].apply(lambda x: \\',\\'.join(sorted(x.unique()))).reset_index()\\n    acts[\\'num_sold\\'] = acts[\\'product\\'].apply(lambda x: len(x.split(\\',\\')))\\n    acts = acts.rename(columns={\\'product\\': \\'products\\'}).sort_values(by=[\\'sell_date\\'], ascending=True)\\n    return acts[[\\'sell_date\\', \\'num_sold\\', \\'products\\']]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3890569,
                "title": "slow-but-with-relatively-low-memory-usage",
                "content": "# Intuition\\nWe need to find the number of different products sold and their names for each date. To achieve this, we group the `Activities` table by `sell_date` and aggregate the products as a set to ensure uniqueness. Then, we calculate the number of sold products and sort the products within each set lexicographically.\\n\\n# Approach\\n1. Group the `activities` dataframe by `sell_date`.\\n2. For each group, aggregate the products as a set using the `apply(set)` function on the \\'product\\' column.\\n3. Reset the index of the resulting dataframe to include the \\'sell_date\\' column.\\n4. Calculate the number of sold products by applying the `len` function on the \\'product\\' sets.\\n5. Sort the products within each set lexicographically by applying the `sorted` function and joining them with a comma using the `join` function.\\n6. Return the resulting dataframe with the \\'sell_date\\', \\'num_sold\\', and \\'product\\' columns.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity depends on the size of the `activities` dataframe and the group and aggregate operations. The overall complexity is linear with respect to the number of rows in the dataframe.\\n\\n- Space complexity:\\nThe space complexity is linear as we create intermediate dataframes and the resulting dataframe that depend on the input size.\\n# Code\\n```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    # Group the activities dataframe by sell_date and aggregate the products as unique set\\n    grouped = activities.groupby(\\'sell_date\\')[\\'product\\'].apply(set).reset_index()\\n    \\n    # Calculate the number of sold products for each date\\n    grouped[\\'num_sold\\'] = grouped[\\'product\\'].apply(len)\\n    \\n    # Sort the products within each set\\n    grouped[\\'products\\'] = grouped[\\'product\\'].apply(lambda x: \\',\\'.join(sorted(x)))\\n    \\n    # Return the result with only the required columns\\n    return grouped[[\\'sell_date\\', \\'num_sold\\', \\'products\\']]\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    # Group the activities dataframe by sell_date and aggregate the products as unique set\\n    grouped = activities.groupby(\\'sell_date\\')[\\'product\\'].apply(set).reset_index()\\n    \\n    # Calculate the number of sold products for each date\\n    grouped[\\'num_sold\\'] = grouped[\\'product\\'].apply(len)\\n    \\n    # Sort the products within each set\\n    grouped[\\'products\\'] = grouped[\\'product\\'].apply(lambda x: \\',\\'.join(sorted(x)))\\n    \\n    # Return the result with only the required columns\\n    return grouped[[\\'sell_date\\', \\'num_sold\\', \\'products\\']]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3806677,
                "title": "using-group-concat",
                "content": "# Approach\\nThe query first groups the `Activities` table by the `sell_date` column. This means that the query will produce one row for each unique date in the `Activities` table.\\n\\nThe query then uses the `COUNT()` function to count the number of `distinct` products sold on each date. The `DISTINCT` keyword ensures that the query only counts each product once.\\n\\nThe query then uses the GROUP_CONCAT() function to concatenate a list of the `distinct `products sold on each date. The `ORDER BY` clause ensures that the list of products is sorted alphabetically. The separator parameter specifies that the products should be separated by `commas`.\\n\\nFinally, the query orders the results by the sell_date column in ascending order.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT( DISTINCT product ) AS num_sold ,    \\nGROUP_CONCAT( DISTINCT product ORDER BY product ASC   ) AS products   \\nFROM Activities GROUP BY sell_date ORDER BY sell_date ASC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT sell_date, COUNT( DISTINCT product ) AS num_sold ,    \\nGROUP_CONCAT( DISTINCT product ORDER BY product ASC   ) AS products   \\nFROM Activities GROUP BY sell_date ORDER BY sell_date ASC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3786579,
                "title": "sql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect sell_date, count(distinct product) as num_sold, \\nGROUP_CONCAT(distinct product order by product ASC separator \\',\\') products\\nfrom Activities\\ngroup by sell_date order by sell_Date ASC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect sell_date, count(distinct product) as num_sold, \\nGROUP_CONCAT(distinct product order by product ASC separator \\',\\') products\\nfrom Activities\\ngroup by sell_date order by sell_Date ASC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587176,
                "title": "attention-coders-optimum-approach-step-by-step-explanation-with-beats-85",
                "content": "## ***Please Upvote my solution, if you find it helpful ;)***\\n\\n# Intuition\\nThe goal of the problem is to group the sold products based on the date they were sold. We need to count the number of distinct products sold on each sell_date and create a list of distinct products for each sell_date.\\n\\n# Approach\\n1. The first step is to specify the columns we want to include in the result. In this case, we need the sell_date, the number of distinct products sold on each sell_date (num_sold), and a list of distinct products sold on each sell_date (products).\\n\\n1. To calculate the number of distinct products sold on each sell_date, we use the **COUNT(DISTINCT product)** function. This function counts the number of unique (distinct) values in the \"product\" column. We assign this count the alias \"num_sold\" so that we can refer to it later.\\n\\n1. To create a list of distinct products sold on each sell_date, we use the **GROUP_CONCAT(DISTINCT product)** function. This function concatenates the distinct values in the \"product\" column into a comma-separated string. We assign this string the alias \"products\".\\n\\n1. We specify the \"FROM\" clause to indicate the table from which we want to retrieve the data. In this case, the table is \"Activities\".\\n\\n1. To group the result by sell_date, we use the \"GROUP BY\" clause. This means that the rows with the same sell_date will be grouped together.\\n\\n1. Finally, we use the \"ORDER BY\" clause to sort the result in ascending order based on the sell_date. This ensures that the output is arranged in chronological order.\\n\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of your solution depends on the size of the Activities table and the number of distinct sell_dates. The query needs to scan through the Activities table to calculate the counts and concatenate the products for each sell_date. Therefore, the time complexity is typically $$O(n)$$, where n is the number of rows in the Activities table.\\n\\n- Space complexity:\\nThe space complexity is influenced by the number of distinct sell_dates and the number of distinct products sold. The query uses additional memory to store the intermediate results, including the distinct products and their counts. Therefore, the space complexity is $$O(m)$$, where m is the number of distinct sell_dates.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\n`SELECT sell_date, \\n  count(distinct product) AS num_sold,\\n  group_concat(distinct product) AS products \\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date`\\n\\n```\\n***Please Upvote my solution, if you find it helpful ;)***\\n\\n![6a87bc25-d70b-424f-9e60-7da6f345b82a_1673875931.8933976.jpeg](https://assets.leetcode.com/users/images/38b9ca96-481f-43db-b597-728d5f94ccfb_1685647313.7010021.jpeg)\\n",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\n`SELECT sell_date, \\n  count(distinct product) AS num_sold,\\n  group_concat(distinct product) AS products \\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date`\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3077601,
                "title": "mysql-solution",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nSELECT  \\n\\tsell_date,\\n\\t(COUNT(sell_date ) ) as num_sold ,\\n\\tGROUP_CONCAT(distinct product  ORDER BY product) as products \\nFROM \\n\\t(SELECT DISTINCT sell_date,product FROM Activities) as Activities\\nGROUP BY sell_date;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT  \\n\\tsell_date,\\n\\t(COUNT(sell_date ) ) as num_sold ,\\n\\tGROUP_CONCAT(distinct product  ORDER BY product) as products \\nFROM \\n\\t(SELECT DISTINCT sell_date,product FROM Activities) as Activities\\nGROUP BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2937351,
                "title": "89-faster-clean-2-ways-solution",
                "content": "### UPVOTE if like\\n\\n\\n### way 1\\n```\\n\\nselect sell_date, count( DISTINCT product ) as num_sold ,\\n    \\n    GROUP_CONCAT( DISTINCT product order by product ASC separator \\',\\' ) as products\\n    \\n        FROM Activities GROUP BY sell_date order by sell_date ASC;\\n\\n```\\n\\n### way 2\\n\\n``` \\nSELECT \\n    sell_date, \\n    COUNT(DISTINCT product) as num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n```\\n![60d33be8cf4ba7565123c8bc_YPD3ulQQAGQpOcnqIm3QzSTRgzmr1SexpW9ZjMpJ1mAnUxx4iF05XOTu44sk0qQG-8XgBcYmGZGAD-5SAZvJl3TjtmhgWnn-w0C2XKwhBscV78RVvhwZfyp0v_Pa6sNj5zxpOvRW.png](https://assets.leetcode.com/users/images/b1c219d7-60a7-4386-86cd-ccd57a7bcc56_1671676735.14143.png)\\n\\n\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n\\nselect sell_date, count( DISTINCT product ) as num_sold ,\\n    \\n    GROUP_CONCAT( DISTINCT product order by product ASC separator \\',\\' ) as products\\n    \\n        FROM Activities GROUP BY sell_date order by sell_date ASC;\\n\\n```\n``` \\nSELECT \\n    sell_date, \\n    COUNT(DISTINCT product) as num_sold,\\n    GROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2917714,
                "title": "easy-understanding-beginners-method-mysql",
                "content": "The key is using group_concat function\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect sell_date, count(distinct product) \\'num_sold\\', group_concat(distinct product) \\'products\\' from activities group by 1 order by 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect sell_date, count(distinct product) \\'num_sold\\', group_concat(distinct product) \\'products\\' from activities group by 1 order by 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2841016,
                "title": "mysql-solution",
                "content": "```\\nselect sell_date, count(DISTINCT product) as num_sold ,\\n    GROUP_CONCAT(DISTINCT product order by product ASC separator \\',\\') as products\\nFROM Activities GROUP BY sell_date order by sell_date ASC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date, count(DISTINCT product) as num_sold ,\\n    GROUP_CONCAT(DISTINCT product order by product ASC separator \\',\\') as products\\nFROM Activities GROUP BY sell_date order by sell_date ASC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2746614,
                "title": "group-sold-products-by-the-date-mysql",
                "content": "```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2682580,
                "title": "mysql-solution-using-group-concat-keyword-simple-and-easy",
                "content": "```\\nselect sell_date,\\ncount(distinct(product)) as num_sold, \\nGROUP_CONCAT(distinct(product) order by product SEPARATOR \\',\\') as products\\nfrom activities\\ngroup by sell_date\\norder by sell_date;\\n```\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date,\\ncount(distinct(product)) as num_sold, \\nGROUP_CONCAT(distinct(product) order by product SEPARATOR \\',\\') as products\\nfrom activities\\ngroup by sell_date\\norder by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2634369,
                "title": "fast-easy-solution",
                "content": "select distinct sell_date, count(distinct product) as num_sold,  group_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date",
                "solutionTags": [],
                "code": "select distinct sell_date, count(distinct product) as num_sold,  group_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date\\norder by sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 2634099,
                "title": "group-concat-separator",
                "content": "SELECT sell_date, COUNT(DISTINCT product) AS num_sold , \\nGROUP_CONCAT(DISTINCT product ORDER BY product separator \",\") AS products\\n\\n\\nFROM Activities\\n\\nGROUP BY sell_date",
                "solutionTags": [],
                "code": "SELECT sell_date, COUNT(DISTINCT product) AS num_sold , \\nGROUP_CONCAT(DISTINCT product ORDER BY product separator \",\") AS products\\n\\n\\nFROM Activities\\n\\nGROUP BY sell_date",
                "codeTag": "Unknown"
            },
            {
                "id": 2611410,
                "title": "group-concat",
                "content": "### This can be solved using group concat\\n\\n```\\nselect sell_date, count(distinct product) as num_sold, GROUP_CONCAT(DISTINCT product order by product ASC) as products from Activities  group by sell_date;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date, count(distinct product) as num_sold, GROUP_CONCAT(DISTINCT product order by product ASC) as products from Activities  group by sell_date;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2607397,
                "title": "leetcode-1484-learn-the-concept-with-the-answer",
                "content": "In MySQL, you can concatenate data from numerous rows into a single field using the GROUP CONCAT() function.\\n\\n```\\nselect sell_date, count(distinct product) as num_sold, group_concat(distinct product order by product) as products from activities group by sell_date; \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect sell_date, count(distinct product) as num_sold, group_concat(distinct product order by product) as products from activities group by sell_date; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2604305,
                "title": "simple-solution-using-group-by",
                "content": "SELECT sell_date,count(distinct product) as num_sold ,GROUP_CONCAT(distinct product ORDER BY product) as products From Activities \\ngroup by sell_date\\norder by sell_date;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "SELECT sell_date,count(distinct product) as num_sold ,GROUP_CONCAT(distinct product ORDER BY product) as products From Activities \\ngroup by sell_date\\norder by sell_date;",
                "codeTag": "Unknown"
            },
            {
                "id": 2565071,
                "title": "mysql-group-concat-with-group-by-63",
                "content": "```\\nselect  \\nsell_date, count( distinct product) as num_sold, group_concat(distinct product) as products \\nfrom activities \\ngroup by sell_date;           \\n```",
                "solutionTags": [],
                "code": "```\\nselect  \\nsell_date, count( distinct product) as num_sold, group_concat(distinct product) as products \\nfrom activities \\ngroup by sell_date;           \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2555820,
                "title": "easy-solution-with-group-concat-group-by",
                "content": "![image](https://assets.leetcode.com/users/images/8045b875-d2e3-4393-aa3f-e714b85c77b5_1662925653.5336535.png)\\n\\n",
                "solutionTags": [],
                "code": "![image](https://assets.leetcode.com/users/images/8045b875-d2e3-4393-aa3f-e714b85c77b5_1662925653.5336535.png)\\n\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2555771,
                "title": "simple-solution-using-string-agg-sql-server",
                "content": "```\\nselect t.sell_date, count(t.product) as num_sold, \\nSTRING_AGG(t.product, \\',\\') within group(order by t.product) as products \\nfrom (select distinct product, sell_date from Activities) t \\ngroup by t.sell_date order by t.sell_date;\\n```\\n",
                "solutionTags": [],
                "code": "```\\nselect t.sell_date, count(t.product) as num_sold, \\nSTRING_AGG(t.product, \\',\\') within group(order by t.product) as products \\nfrom (select distinct product, sell_date from Activities) t \\ngroup by t.sell_date order by t.sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2552246,
                "title": "mysql-solution",
                "content": "```\\n# Write your MySQL query statement below\\n# GROUP_CONCAT( DISTINCT product order by product ASC separator \\',\\' ) \\n# function is used to concatenate data from multiple rows into one field\\n\\n\\nselect sell_date, count( DISTINCT product ) as num_sold ,\\nGROUP_CONCAT( DISTINCT product ORDER BY product ASC SEPARATOR \\',\\' ) AS products\\nFROM Activities \\nGROUP BY sell_date \\nORDER BY sell_date ASC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n# GROUP_CONCAT( DISTINCT product order by product ASC separator \\',\\' ) \\n# function is used to concatenate data from multiple rows into one field\\n\\n\\nselect sell_date, count( DISTINCT product ) as num_sold ,\\nGROUP_CONCAT( DISTINCT product ORDER BY product ASC SEPARATOR \\',\\' ) AS products\\nFROM Activities \\nGROUP BY sell_date \\nORDER BY sell_date ASC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2551962,
                "title": "mysql-easy",
                "content": "```\\nselect\\n    sell_date, \\n    count(distinct product) as num_sold, \\n    group_concat(distinct product order by product) as products\\nfrom Activities\\ngroup by sell_date\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect\\n    sell_date, \\n    count(distinct product) as num_sold, \\n    group_concat(distinct product order by product) as products\\nfrom Activities\\ngroup by sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2531043,
                "title": "mysql-simple-solution",
                "content": "***\\nSELECT a.sell_date, COUNT(DISTINCT a.product) AS num_sold,\\nGROUP_CONCAT(DISTINCT a.product ORDER BY a.product) as products\\nFROM Activities a\\nGROUP By sell_date\\nORDER BY sell_date\\n***",
                "solutionTags": [],
                "code": "***\\nSELECT a.sell_date, COUNT(DISTINCT a.product) AS num_sold,\\nGROUP_CONCAT(DISTINCT a.product ORDER BY a.product) as products\\nFROM Activities a\\nGROUP By sell_date\\nORDER BY sell_date\\n***",
                "codeTag": "Unknown"
            },
            {
                "id": 2521999,
                "title": "neat-and-easy-solution",
                "content": "**#Solution**\\n\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "**#Solution**\\n\\nSELECT sell_date,\\n\\t\\tCOUNT(DISTINCT(product)) AS num_sold, \\n\\t\\tGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR \\',\\') AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC;",
                "codeTag": "Unknown"
            },
            {
                "id": 2517931,
                "title": "mysql-using-group-concat",
                "content": "**MY SQL:**\\n\\n```\\nSELECT sell_date, count(distinct(product)) as num_sold, \\nGroup_Concat(distinct(product) order by product) as products\\nFROM Activities \\nGroup by sell_date \\nOrder by sell_date;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT sell_date, count(distinct(product)) as num_sold, \\nGroup_Concat(distinct(product) order by product) as products\\nFROM Activities \\nGroup by sell_date \\nOrder by sell_date;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2492329,
                "title": "faster-than-90-75-of-mysql-online-submissions",
                "content": "```\\nSELECT sell_date, \\nCOUNT(DISTINCT product) AS num_sold, \\nGROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM activities\\nGROUP BY sell_date ORDER BY sell_date ASC;",
                "solutionTags": [],
                "code": "```\\nSELECT sell_date, \\nCOUNT(DISTINCT product) AS num_sold, \\nGROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products\\nFROM activities\\nGROUP BY sell_date ORDER BY sell_date ASC;",
                "codeTag": "Unknown"
            },
            {
                "id": 2472864,
                "title": "mysql",
                "content": "```\\nSELECT sell_date, \\nCOUNT(DISTINCT(product)) AS num_sold,\\nGROUP_CONCAT(DISTINCT(product))AS products\\nFROM Activities\\nGROUP BY sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT sell_date, \\nCOUNT(DISTINCT(product)) AS num_sold,\\nGROUP_CONCAT(DISTINCT(product))AS products\\nFROM Activities\\nGROUP BY sell_date\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2472332,
                "title": "group-sold-products-by-date",
                "content": "# Write your MySQL query statement below\\n```\\nselect sell_date, count(distinct(product)) as num_sold, group_concat(distinct(product) order by product) as products\\nfrom Activities\\ngroup by sell_date\\n```",
                "solutionTags": [],
                "code": "```\\nselect sell_date, count(distinct(product)) as num_sold, group_concat(distinct(product) order by product) as products\\nfrom Activities\\ngroup by sell_date\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1577002,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1567768,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1729660,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1684046,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 2017214,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 2004774,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1576946,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 2008235,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1576784,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1576881,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1577002,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1567768,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1729660,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1684046,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 2017214,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 2004774,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1576946,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 2008235,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1576784,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1576881,
                "content": [
                    {
                        "username": "25ajeet",
                        "content": "EXPLANATION\\nGROUP CONCAT is the function in mySQL which returns the row values in the comma separated fashion. Rest of the idea is pretty conventional.\\nPlease post your query/concerns/doubts over here in the comment section, will try to respond.\\nPLEASE UPVOTE.\\n\\nQuery, you may find below:\\n\\nSELECT sell_date, COUNT(DISTINCT product) as \\'num_sold\\', \\nGROUP_CONCAT(DISTINCT product ORDER BY product) AS \\'products\\'\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "user7938G",
                        "content": "[@cafe28](/cafe28)  because in query it is said that we need to find the number of product sold by sell_date. So, we need to group all the item sold on that Particular date. I hope u got it. "
                    },
                    {
                        "username": "cafe28",
                        "content": "Hey this is great, can you just explain why the GROUP BY at the end?"
                    },
                    {
                        "username": "htiwari313",
                        "content": "The solution is:\\n\\n\\tselect \\n\\tsell_date, count(distinct product) as num_sold, \\n\\tgroup_concat(distinct product) as products \\n\\tfrom activities \\n\\tgroup by sell_date;"
                    },
                    {
                        "username": "denniscorsi",
                        "content": "Please don\\'t post solutions in the discussions."
                    },
                    {
                        "username": "stalsams",
                        "content": "Solution in MS SQL Server:\\n\\nwith cte_distinct as\\n(\\n    select distinct sell_date, product\\n    from activities\\n)\\nselect sell_date,\\n       count(product) as num_sold,\\n       string_agg(product, \\',\\') WITHIN GROUP (ORDER BY product)  as products\\nfrom cte_distinct\\ngroup by sell_date\\norder by sell_date"
                    },
                    {
                        "username": "rohitsharma740431",
                        "content": "How to implement the query in MS SQL Server ?\\n"
                    },
                    {
                        "username": "krishnamohanvr",
                        "content": "SELECT sell_date,\\n    COUNT(1) AS num_sold,\\n    STRING_AGG(product,\\',\\') as products\\nFROM (\\nSELECT sell_date,\\n    product\\nFROM Activities\\nGROUP BY sell_date,\\n    product\\n) AS T1\\nGROUP BY sell_date"
                    },
                    {
                        "username": "saiiitkgp713",
                        "content": "SELECT  sell_date,\\n        COUNT(product) AS num_sold,\\n        STRING_AGG(product, \\',\\') WITHIN GROUP (ORDER BY product) AS products\\nFROM\\n(SELECT DISTINCT sell_date, product\\nFROM Activities) t\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "With this code I\\'m getting identical output to the expected output in the test case given by the question, however it is marked as wrong, what could be going on? \\n\\n```def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    lists = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].unique()\\n    lists[\\'product\\'] = lists[\\'product\\'].apply(lambda x: sorted(x))\\n    counts = activities.groupby([\\'sell_date\\'], as_index = False)[\\'product\\'].nunique()\\n    return pd.DataFrame({\"sell_date\": counts[\\'sell_date\\'], \\'num_sold\\':counts[\\'product\\'], \\'products\\':lists[\\'product\\']})```\\n\\n"
                    },
                    {
                        "username": "JuanKarim",
                        "content": "[@mshao](/mshao) Thank you, that was it. "
                    },
                    {
                        "username": "mshao",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "therealchainman",
                        "content": "I\\'m getting same issue, same output but says it is wrong answer."
                    },
                    {
                        "username": "APTUUU",
                        "content": "Help!\\nIt keeps giving me Wrong Answer but the Output matches exactly the Expected.\\nHere\\'s the code:\\n\\ndef sort(val):\\n    return sorted(val)\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    \\n    activities = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\', \\'unique\\']}).reset_index()\\n    activities.columns = [\\'sell_date\\', \\'num_sold\\', \\'products\\']\\n    activities.products = activities.products.apply(sort)\\n    return activities.sort_values(\\'sell_date\\', ascending=True)\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Here is a trouble with type of column \\'products\\'. This column should has type list<str>"
                    },
                    {
                        "username": "Anchal_Gupta04",
                        "content": "# Write your MySQL query statement below\\n\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;"
                    },
                    {
                        "username": "rds95",
                        "content": "Does anyone know why the following solution is not accepted? The output seems to match the expected output exactly.\\n\\n    activities = activities.sort_values(\"product\")\\n\\n    df = activities.groupby(\"sell_date\", as_index=False).agg({\"product\":[\"nunique\",\"unique\"]})\\n\\n    df.columns =[[\"sell_date\",\"num_sold\",\"products\"]]\\n\\n    return df`"
                    },
                    {
                        "username": "BeCharge",
                        "content": "the type of \\'products\\' should be string instead of list of string use \\',\\'.join() for \\'products\\' column"
                    },
                    {
                        "username": "nkalash",
                        "content": "GROUP_CONCAT() fn returns a string with non-null value from a group.\\n\\'\\'\\'\\nSELECT sell_date,\\nCOUNT(DISTINCT product) AS num_sold,\\nGROUP_CONCAT(DISTINCT product) AS products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date,products\\n\\'\\'\\'"
                    },
                    {
                        "username": "kumarakash",
                        "content": "# Write your MySQL query statement below\\nselect sell_date,count(distinct product) as num_sold,GROUP_CONCAT(distinct product) products from Activities group by sell_date order by sell_date;"
                    }
                ]
            },
            {
                "id": 1576690,
                "content": [
                    {
                        "username": "ankitabagaria",
                        "content": "# Write your MySQL query statement below\\nSELECT sell_date, COUNT(distinct product) AS num_sold, \\nGROUP_CONCAT(distinct product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date;"
                    },
                    {
                        "username": "Anthonysutherland21",
                        "content": "\\'\\'\\'\\nselect b.sell_date, b.num_sold, GROUP_CONCAT(DISTINCT product) as products from Activities as a \\njoin\\n(select sell_date, count(DISTINCT product) as \\'num_sold\\' from Activities\\ngroup by sell_date) as b\\non a.sell_date = b.sell_date\\ngroup by b.sell_date\\n\\'\\'\\'"
                    },
                    {
                        "username": "manojrk28",
                        "content": "import pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    df= activities\\n    df=df.groupby(\\'sell_date\\')[\\'product\\'].agg(num_sold=\\'nunique\\',products=\\'unique\\').reset_index()\\n    df[\\'products\\']=df[\\'products\\'].apply(lambda x: sorted(x))\\n    return df\\n\\n\\ncan anyone tell why this cod is not correct in testcase even giving correct reasult\\n"
                    },
                    {
                        "username": "naldoyohardi992",
                        "content": "Is there another solution for MYSQL without using STRING_AGG() or GROUP_CONCAT() ?"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "If I don\\'t add the DISTINCT clause in GROUP_CONCAT, it returns multiple records repeated, even if the count is just one.\\nExample : \"Mask,Mask\", when there\\'s just 1 Mask sold on that date.\\nCan anyone explaiin why does it behaves so"
                    },
                    {
                        "username": "ArtemBaykov",
                        "content": "OUTPUT = Expected but still wrong?  WHY?\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    gr = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\',\\'unique\\']}).reset_index()\\n    gr.columns = [\\'sell_date\\',\\'num_sold\\',\\'products\\']\\n    gr[\\'products\\'] = gr[\\'products\\'].apply(sorted)\\n    return gr\\n\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Some troubles with pandas:\\nColumn \\'products\\' has type list<str>, but if yours output dataframe has different type then you will get exception and tests will not let you go. To fix this just a cast \\'products\\' to list<str>)"
                    },
                    {
                        "username": "uaoiuaoi",
                        "content": "For pandasman. \"products\" must be a sring!"
                    },
                    {
                        "username": "edithi",
                        "content": "You can use the groupby() function along with the agg() function to group the data by \\'sell_date\\' and then aggregate the product names into a list. After that, you can calculate the number of different products sold using the length of the list. Finally, sort the product names lexicographically and join them using commas. Make sure to sort the result by \\'sell_date\\'"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "Use GROUP_CONCAT function to get comma separated product list as products :\n\nselect sell_date , count(distinct product) as num_sold , group_concat(distinct product ) as products\nfrom activities\ngroup by sell_date\norder by sell_date"
                    }
                ]
            },
            {
                "id": 1574288,
                "content": [
                    {
                        "username": "ankitabagaria",
                        "content": "# Write your MySQL query statement below\\nSELECT sell_date, COUNT(distinct product) AS num_sold, \\nGROUP_CONCAT(distinct product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date;"
                    },
                    {
                        "username": "Anthonysutherland21",
                        "content": "\\'\\'\\'\\nselect b.sell_date, b.num_sold, GROUP_CONCAT(DISTINCT product) as products from Activities as a \\njoin\\n(select sell_date, count(DISTINCT product) as \\'num_sold\\' from Activities\\ngroup by sell_date) as b\\non a.sell_date = b.sell_date\\ngroup by b.sell_date\\n\\'\\'\\'"
                    },
                    {
                        "username": "manojrk28",
                        "content": "import pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    df= activities\\n    df=df.groupby(\\'sell_date\\')[\\'product\\'].agg(num_sold=\\'nunique\\',products=\\'unique\\').reset_index()\\n    df[\\'products\\']=df[\\'products\\'].apply(lambda x: sorted(x))\\n    return df\\n\\n\\ncan anyone tell why this cod is not correct in testcase even giving correct reasult\\n"
                    },
                    {
                        "username": "naldoyohardi992",
                        "content": "Is there another solution for MYSQL without using STRING_AGG() or GROUP_CONCAT() ?"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "If I don\\'t add the DISTINCT clause in GROUP_CONCAT, it returns multiple records repeated, even if the count is just one.\\nExample : \"Mask,Mask\", when there\\'s just 1 Mask sold on that date.\\nCan anyone explaiin why does it behaves so"
                    },
                    {
                        "username": "ArtemBaykov",
                        "content": "OUTPUT = Expected but still wrong?  WHY?\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    gr = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\',\\'unique\\']}).reset_index()\\n    gr.columns = [\\'sell_date\\',\\'num_sold\\',\\'products\\']\\n    gr[\\'products\\'] = gr[\\'products\\'].apply(sorted)\\n    return gr\\n\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Some troubles with pandas:\\nColumn \\'products\\' has type list<str>, but if yours output dataframe has different type then you will get exception and tests will not let you go. To fix this just a cast \\'products\\' to list<str>)"
                    },
                    {
                        "username": "uaoiuaoi",
                        "content": "For pandasman. \"products\" must be a sring!"
                    },
                    {
                        "username": "edithi",
                        "content": "You can use the groupby() function along with the agg() function to group the data by \\'sell_date\\' and then aggregate the product names into a list. After that, you can calculate the number of different products sold using the length of the list. Finally, sort the product names lexicographically and join them using commas. Make sure to sort the result by \\'sell_date\\'"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "Use GROUP_CONCAT function to get comma separated product list as products :\n\nselect sell_date , count(distinct product) as num_sold , group_concat(distinct product ) as products\nfrom activities\ngroup by sell_date\norder by sell_date"
                    }
                ]
            },
            {
                "id": 2059979,
                "content": [
                    {
                        "username": "ankitabagaria",
                        "content": "# Write your MySQL query statement below\\nSELECT sell_date, COUNT(distinct product) AS num_sold, \\nGROUP_CONCAT(distinct product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date;"
                    },
                    {
                        "username": "Anthonysutherland21",
                        "content": "\\'\\'\\'\\nselect b.sell_date, b.num_sold, GROUP_CONCAT(DISTINCT product) as products from Activities as a \\njoin\\n(select sell_date, count(DISTINCT product) as \\'num_sold\\' from Activities\\ngroup by sell_date) as b\\non a.sell_date = b.sell_date\\ngroup by b.sell_date\\n\\'\\'\\'"
                    },
                    {
                        "username": "manojrk28",
                        "content": "import pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    df= activities\\n    df=df.groupby(\\'sell_date\\')[\\'product\\'].agg(num_sold=\\'nunique\\',products=\\'unique\\').reset_index()\\n    df[\\'products\\']=df[\\'products\\'].apply(lambda x: sorted(x))\\n    return df\\n\\n\\ncan anyone tell why this cod is not correct in testcase even giving correct reasult\\n"
                    },
                    {
                        "username": "naldoyohardi992",
                        "content": "Is there another solution for MYSQL without using STRING_AGG() or GROUP_CONCAT() ?"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "If I don\\'t add the DISTINCT clause in GROUP_CONCAT, it returns multiple records repeated, even if the count is just one.\\nExample : \"Mask,Mask\", when there\\'s just 1 Mask sold on that date.\\nCan anyone explaiin why does it behaves so"
                    },
                    {
                        "username": "ArtemBaykov",
                        "content": "OUTPUT = Expected but still wrong?  WHY?\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    gr = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\',\\'unique\\']}).reset_index()\\n    gr.columns = [\\'sell_date\\',\\'num_sold\\',\\'products\\']\\n    gr[\\'products\\'] = gr[\\'products\\'].apply(sorted)\\n    return gr\\n\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Some troubles with pandas:\\nColumn \\'products\\' has type list<str>, but if yours output dataframe has different type then you will get exception and tests will not let you go. To fix this just a cast \\'products\\' to list<str>)"
                    },
                    {
                        "username": "uaoiuaoi",
                        "content": "For pandasman. \"products\" must be a sring!"
                    },
                    {
                        "username": "edithi",
                        "content": "You can use the groupby() function along with the agg() function to group the data by \\'sell_date\\' and then aggregate the product names into a list. After that, you can calculate the number of different products sold using the length of the list. Finally, sort the product names lexicographically and join them using commas. Make sure to sort the result by \\'sell_date\\'"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "Use GROUP_CONCAT function to get comma separated product list as products :\n\nselect sell_date , count(distinct product) as num_sold , group_concat(distinct product ) as products\nfrom activities\ngroup by sell_date\norder by sell_date"
                    }
                ]
            },
            {
                "id": 2048549,
                "content": [
                    {
                        "username": "ankitabagaria",
                        "content": "# Write your MySQL query statement below\\nSELECT sell_date, COUNT(distinct product) AS num_sold, \\nGROUP_CONCAT(distinct product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date;"
                    },
                    {
                        "username": "Anthonysutherland21",
                        "content": "\\'\\'\\'\\nselect b.sell_date, b.num_sold, GROUP_CONCAT(DISTINCT product) as products from Activities as a \\njoin\\n(select sell_date, count(DISTINCT product) as \\'num_sold\\' from Activities\\ngroup by sell_date) as b\\non a.sell_date = b.sell_date\\ngroup by b.sell_date\\n\\'\\'\\'"
                    },
                    {
                        "username": "manojrk28",
                        "content": "import pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    df= activities\\n    df=df.groupby(\\'sell_date\\')[\\'product\\'].agg(num_sold=\\'nunique\\',products=\\'unique\\').reset_index()\\n    df[\\'products\\']=df[\\'products\\'].apply(lambda x: sorted(x))\\n    return df\\n\\n\\ncan anyone tell why this cod is not correct in testcase even giving correct reasult\\n"
                    },
                    {
                        "username": "naldoyohardi992",
                        "content": "Is there another solution for MYSQL without using STRING_AGG() or GROUP_CONCAT() ?"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "If I don\\'t add the DISTINCT clause in GROUP_CONCAT, it returns multiple records repeated, even if the count is just one.\\nExample : \"Mask,Mask\", when there\\'s just 1 Mask sold on that date.\\nCan anyone explaiin why does it behaves so"
                    },
                    {
                        "username": "ArtemBaykov",
                        "content": "OUTPUT = Expected but still wrong?  WHY?\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    gr = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\',\\'unique\\']}).reset_index()\\n    gr.columns = [\\'sell_date\\',\\'num_sold\\',\\'products\\']\\n    gr[\\'products\\'] = gr[\\'products\\'].apply(sorted)\\n    return gr\\n\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Some troubles with pandas:\\nColumn \\'products\\' has type list<str>, but if yours output dataframe has different type then you will get exception and tests will not let you go. To fix this just a cast \\'products\\' to list<str>)"
                    },
                    {
                        "username": "uaoiuaoi",
                        "content": "For pandasman. \"products\" must be a sring!"
                    },
                    {
                        "username": "edithi",
                        "content": "You can use the groupby() function along with the agg() function to group the data by \\'sell_date\\' and then aggregate the product names into a list. After that, you can calculate the number of different products sold using the length of the list. Finally, sort the product names lexicographically and join them using commas. Make sure to sort the result by \\'sell_date\\'"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "Use GROUP_CONCAT function to get comma separated product list as products :\n\nselect sell_date , count(distinct product) as num_sold , group_concat(distinct product ) as products\nfrom activities\ngroup by sell_date\norder by sell_date"
                    }
                ]
            },
            {
                "id": 2039630,
                "content": [
                    {
                        "username": "ankitabagaria",
                        "content": "# Write your MySQL query statement below\\nSELECT sell_date, COUNT(distinct product) AS num_sold, \\nGROUP_CONCAT(distinct product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date;"
                    },
                    {
                        "username": "Anthonysutherland21",
                        "content": "\\'\\'\\'\\nselect b.sell_date, b.num_sold, GROUP_CONCAT(DISTINCT product) as products from Activities as a \\njoin\\n(select sell_date, count(DISTINCT product) as \\'num_sold\\' from Activities\\ngroup by sell_date) as b\\non a.sell_date = b.sell_date\\ngroup by b.sell_date\\n\\'\\'\\'"
                    },
                    {
                        "username": "manojrk28",
                        "content": "import pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    df= activities\\n    df=df.groupby(\\'sell_date\\')[\\'product\\'].agg(num_sold=\\'nunique\\',products=\\'unique\\').reset_index()\\n    df[\\'products\\']=df[\\'products\\'].apply(lambda x: sorted(x))\\n    return df\\n\\n\\ncan anyone tell why this cod is not correct in testcase even giving correct reasult\\n"
                    },
                    {
                        "username": "naldoyohardi992",
                        "content": "Is there another solution for MYSQL without using STRING_AGG() or GROUP_CONCAT() ?"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "If I don\\'t add the DISTINCT clause in GROUP_CONCAT, it returns multiple records repeated, even if the count is just one.\\nExample : \"Mask,Mask\", when there\\'s just 1 Mask sold on that date.\\nCan anyone explaiin why does it behaves so"
                    },
                    {
                        "username": "ArtemBaykov",
                        "content": "OUTPUT = Expected but still wrong?  WHY?\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    gr = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\',\\'unique\\']}).reset_index()\\n    gr.columns = [\\'sell_date\\',\\'num_sold\\',\\'products\\']\\n    gr[\\'products\\'] = gr[\\'products\\'].apply(sorted)\\n    return gr\\n\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Some troubles with pandas:\\nColumn \\'products\\' has type list<str>, but if yours output dataframe has different type then you will get exception and tests will not let you go. To fix this just a cast \\'products\\' to list<str>)"
                    },
                    {
                        "username": "uaoiuaoi",
                        "content": "For pandasman. \"products\" must be a sring!"
                    },
                    {
                        "username": "edithi",
                        "content": "You can use the groupby() function along with the agg() function to group the data by \\'sell_date\\' and then aggregate the product names into a list. After that, you can calculate the number of different products sold using the length of the list. Finally, sort the product names lexicographically and join them using commas. Make sure to sort the result by \\'sell_date\\'"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "Use GROUP_CONCAT function to get comma separated product list as products :\n\nselect sell_date , count(distinct product) as num_sold , group_concat(distinct product ) as products\nfrom activities\ngroup by sell_date\norder by sell_date"
                    }
                ]
            },
            {
                "id": 2039387,
                "content": [
                    {
                        "username": "ankitabagaria",
                        "content": "# Write your MySQL query statement below\\nSELECT sell_date, COUNT(distinct product) AS num_sold, \\nGROUP_CONCAT(distinct product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date;"
                    },
                    {
                        "username": "Anthonysutherland21",
                        "content": "\\'\\'\\'\\nselect b.sell_date, b.num_sold, GROUP_CONCAT(DISTINCT product) as products from Activities as a \\njoin\\n(select sell_date, count(DISTINCT product) as \\'num_sold\\' from Activities\\ngroup by sell_date) as b\\non a.sell_date = b.sell_date\\ngroup by b.sell_date\\n\\'\\'\\'"
                    },
                    {
                        "username": "manojrk28",
                        "content": "import pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    df= activities\\n    df=df.groupby(\\'sell_date\\')[\\'product\\'].agg(num_sold=\\'nunique\\',products=\\'unique\\').reset_index()\\n    df[\\'products\\']=df[\\'products\\'].apply(lambda x: sorted(x))\\n    return df\\n\\n\\ncan anyone tell why this cod is not correct in testcase even giving correct reasult\\n"
                    },
                    {
                        "username": "naldoyohardi992",
                        "content": "Is there another solution for MYSQL without using STRING_AGG() or GROUP_CONCAT() ?"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "If I don\\'t add the DISTINCT clause in GROUP_CONCAT, it returns multiple records repeated, even if the count is just one.\\nExample : \"Mask,Mask\", when there\\'s just 1 Mask sold on that date.\\nCan anyone explaiin why does it behaves so"
                    },
                    {
                        "username": "ArtemBaykov",
                        "content": "OUTPUT = Expected but still wrong?  WHY?\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    gr = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\',\\'unique\\']}).reset_index()\\n    gr.columns = [\\'sell_date\\',\\'num_sold\\',\\'products\\']\\n    gr[\\'products\\'] = gr[\\'products\\'].apply(sorted)\\n    return gr\\n\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Some troubles with pandas:\\nColumn \\'products\\' has type list<str>, but if yours output dataframe has different type then you will get exception and tests will not let you go. To fix this just a cast \\'products\\' to list<str>)"
                    },
                    {
                        "username": "uaoiuaoi",
                        "content": "For pandasman. \"products\" must be a sring!"
                    },
                    {
                        "username": "edithi",
                        "content": "You can use the groupby() function along with the agg() function to group the data by \\'sell_date\\' and then aggregate the product names into a list. After that, you can calculate the number of different products sold using the length of the list. Finally, sort the product names lexicographically and join them using commas. Make sure to sort the result by \\'sell_date\\'"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "Use GROUP_CONCAT function to get comma separated product list as products :\n\nselect sell_date , count(distinct product) as num_sold , group_concat(distinct product ) as products\nfrom activities\ngroup by sell_date\norder by sell_date"
                    }
                ]
            },
            {
                "id": 2038665,
                "content": [
                    {
                        "username": "ankitabagaria",
                        "content": "# Write your MySQL query statement below\\nSELECT sell_date, COUNT(distinct product) AS num_sold, \\nGROUP_CONCAT(distinct product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date;"
                    },
                    {
                        "username": "Anthonysutherland21",
                        "content": "\\'\\'\\'\\nselect b.sell_date, b.num_sold, GROUP_CONCAT(DISTINCT product) as products from Activities as a \\njoin\\n(select sell_date, count(DISTINCT product) as \\'num_sold\\' from Activities\\ngroup by sell_date) as b\\non a.sell_date = b.sell_date\\ngroup by b.sell_date\\n\\'\\'\\'"
                    },
                    {
                        "username": "manojrk28",
                        "content": "import pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    df= activities\\n    df=df.groupby(\\'sell_date\\')[\\'product\\'].agg(num_sold=\\'nunique\\',products=\\'unique\\').reset_index()\\n    df[\\'products\\']=df[\\'products\\'].apply(lambda x: sorted(x))\\n    return df\\n\\n\\ncan anyone tell why this cod is not correct in testcase even giving correct reasult\\n"
                    },
                    {
                        "username": "naldoyohardi992",
                        "content": "Is there another solution for MYSQL without using STRING_AGG() or GROUP_CONCAT() ?"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "If I don\\'t add the DISTINCT clause in GROUP_CONCAT, it returns multiple records repeated, even if the count is just one.\\nExample : \"Mask,Mask\", when there\\'s just 1 Mask sold on that date.\\nCan anyone explaiin why does it behaves so"
                    },
                    {
                        "username": "ArtemBaykov",
                        "content": "OUTPUT = Expected but still wrong?  WHY?\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    gr = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\',\\'unique\\']}).reset_index()\\n    gr.columns = [\\'sell_date\\',\\'num_sold\\',\\'products\\']\\n    gr[\\'products\\'] = gr[\\'products\\'].apply(sorted)\\n    return gr\\n\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Some troubles with pandas:\\nColumn \\'products\\' has type list<str>, but if yours output dataframe has different type then you will get exception and tests will not let you go. To fix this just a cast \\'products\\' to list<str>)"
                    },
                    {
                        "username": "uaoiuaoi",
                        "content": "For pandasman. \"products\" must be a sring!"
                    },
                    {
                        "username": "edithi",
                        "content": "You can use the groupby() function along with the agg() function to group the data by \\'sell_date\\' and then aggregate the product names into a list. After that, you can calculate the number of different products sold using the length of the list. Finally, sort the product names lexicographically and join them using commas. Make sure to sort the result by \\'sell_date\\'"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "Use GROUP_CONCAT function to get comma separated product list as products :\n\nselect sell_date , count(distinct product) as num_sold , group_concat(distinct product ) as products\nfrom activities\ngroup by sell_date\norder by sell_date"
                    }
                ]
            },
            {
                "id": 2023841,
                "content": [
                    {
                        "username": "ankitabagaria",
                        "content": "# Write your MySQL query statement below\\nSELECT sell_date, COUNT(distinct product) AS num_sold, \\nGROUP_CONCAT(distinct product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date;"
                    },
                    {
                        "username": "Anthonysutherland21",
                        "content": "\\'\\'\\'\\nselect b.sell_date, b.num_sold, GROUP_CONCAT(DISTINCT product) as products from Activities as a \\njoin\\n(select sell_date, count(DISTINCT product) as \\'num_sold\\' from Activities\\ngroup by sell_date) as b\\non a.sell_date = b.sell_date\\ngroup by b.sell_date\\n\\'\\'\\'"
                    },
                    {
                        "username": "manojrk28",
                        "content": "import pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    df= activities\\n    df=df.groupby(\\'sell_date\\')[\\'product\\'].agg(num_sold=\\'nunique\\',products=\\'unique\\').reset_index()\\n    df[\\'products\\']=df[\\'products\\'].apply(lambda x: sorted(x))\\n    return df\\n\\n\\ncan anyone tell why this cod is not correct in testcase even giving correct reasult\\n"
                    },
                    {
                        "username": "naldoyohardi992",
                        "content": "Is there another solution for MYSQL without using STRING_AGG() or GROUP_CONCAT() ?"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "If I don\\'t add the DISTINCT clause in GROUP_CONCAT, it returns multiple records repeated, even if the count is just one.\\nExample : \"Mask,Mask\", when there\\'s just 1 Mask sold on that date.\\nCan anyone explaiin why does it behaves so"
                    },
                    {
                        "username": "ArtemBaykov",
                        "content": "OUTPUT = Expected but still wrong?  WHY?\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    gr = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\',\\'unique\\']}).reset_index()\\n    gr.columns = [\\'sell_date\\',\\'num_sold\\',\\'products\\']\\n    gr[\\'products\\'] = gr[\\'products\\'].apply(sorted)\\n    return gr\\n\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Some troubles with pandas:\\nColumn \\'products\\' has type list<str>, but if yours output dataframe has different type then you will get exception and tests will not let you go. To fix this just a cast \\'products\\' to list<str>)"
                    },
                    {
                        "username": "uaoiuaoi",
                        "content": "For pandasman. \"products\" must be a sring!"
                    },
                    {
                        "username": "edithi",
                        "content": "You can use the groupby() function along with the agg() function to group the data by \\'sell_date\\' and then aggregate the product names into a list. After that, you can calculate the number of different products sold using the length of the list. Finally, sort the product names lexicographically and join them using commas. Make sure to sort the result by \\'sell_date\\'"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "Use GROUP_CONCAT function to get comma separated product list as products :\n\nselect sell_date , count(distinct product) as num_sold , group_concat(distinct product ) as products\nfrom activities\ngroup by sell_date\norder by sell_date"
                    }
                ]
            },
            {
                "id": 2010143,
                "content": [
                    {
                        "username": "ankitabagaria",
                        "content": "# Write your MySQL query statement below\\nSELECT sell_date, COUNT(distinct product) AS num_sold, \\nGROUP_CONCAT(distinct product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date;"
                    },
                    {
                        "username": "Anthonysutherland21",
                        "content": "\\'\\'\\'\\nselect b.sell_date, b.num_sold, GROUP_CONCAT(DISTINCT product) as products from Activities as a \\njoin\\n(select sell_date, count(DISTINCT product) as \\'num_sold\\' from Activities\\ngroup by sell_date) as b\\non a.sell_date = b.sell_date\\ngroup by b.sell_date\\n\\'\\'\\'"
                    },
                    {
                        "username": "manojrk28",
                        "content": "import pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    df= activities\\n    df=df.groupby(\\'sell_date\\')[\\'product\\'].agg(num_sold=\\'nunique\\',products=\\'unique\\').reset_index()\\n    df[\\'products\\']=df[\\'products\\'].apply(lambda x: sorted(x))\\n    return df\\n\\n\\ncan anyone tell why this cod is not correct in testcase even giving correct reasult\\n"
                    },
                    {
                        "username": "naldoyohardi992",
                        "content": "Is there another solution for MYSQL without using STRING_AGG() or GROUP_CONCAT() ?"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "If I don\\'t add the DISTINCT clause in GROUP_CONCAT, it returns multiple records repeated, even if the count is just one.\\nExample : \"Mask,Mask\", when there\\'s just 1 Mask sold on that date.\\nCan anyone explaiin why does it behaves so"
                    },
                    {
                        "username": "ArtemBaykov",
                        "content": "OUTPUT = Expected but still wrong?  WHY?\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    gr = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\',\\'unique\\']}).reset_index()\\n    gr.columns = [\\'sell_date\\',\\'num_sold\\',\\'products\\']\\n    gr[\\'products\\'] = gr[\\'products\\'].apply(sorted)\\n    return gr\\n\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Some troubles with pandas:\\nColumn \\'products\\' has type list<str>, but if yours output dataframe has different type then you will get exception and tests will not let you go. To fix this just a cast \\'products\\' to list<str>)"
                    },
                    {
                        "username": "uaoiuaoi",
                        "content": "For pandasman. \"products\" must be a sring!"
                    },
                    {
                        "username": "edithi",
                        "content": "You can use the groupby() function along with the agg() function to group the data by \\'sell_date\\' and then aggregate the product names into a list. After that, you can calculate the number of different products sold using the length of the list. Finally, sort the product names lexicographically and join them using commas. Make sure to sort the result by \\'sell_date\\'"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "Use GROUP_CONCAT function to get comma separated product list as products :\n\nselect sell_date , count(distinct product) as num_sold , group_concat(distinct product ) as products\nfrom activities\ngroup by sell_date\norder by sell_date"
                    }
                ]
            },
            {
                "id": 1990298,
                "content": [
                    {
                        "username": "ankitabagaria",
                        "content": "# Write your MySQL query statement below\\nSELECT sell_date, COUNT(distinct product) AS num_sold, \\nGROUP_CONCAT(distinct product ORDER BY product) AS products\\nFROM Activities \\nGROUP BY sell_date;"
                    },
                    {
                        "username": "Anthonysutherland21",
                        "content": "\\'\\'\\'\\nselect b.sell_date, b.num_sold, GROUP_CONCAT(DISTINCT product) as products from Activities as a \\njoin\\n(select sell_date, count(DISTINCT product) as \\'num_sold\\' from Activities\\ngroup by sell_date) as b\\non a.sell_date = b.sell_date\\ngroup by b.sell_date\\n\\'\\'\\'"
                    },
                    {
                        "username": "manojrk28",
                        "content": "import pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    df= activities\\n    df=df.groupby(\\'sell_date\\')[\\'product\\'].agg(num_sold=\\'nunique\\',products=\\'unique\\').reset_index()\\n    df[\\'products\\']=df[\\'products\\'].apply(lambda x: sorted(x))\\n    return df\\n\\n\\ncan anyone tell why this cod is not correct in testcase even giving correct reasult\\n"
                    },
                    {
                        "username": "naldoyohardi992",
                        "content": "Is there another solution for MYSQL without using STRING_AGG() or GROUP_CONCAT() ?"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "If I don\\'t add the DISTINCT clause in GROUP_CONCAT, it returns multiple records repeated, even if the count is just one.\\nExample : \"Mask,Mask\", when there\\'s just 1 Mask sold on that date.\\nCan anyone explaiin why does it behaves so"
                    },
                    {
                        "username": "ArtemBaykov",
                        "content": "OUTPUT = Expected but still wrong?  WHY?\\nimport pandas as pd\\n\\ndef categorize_products(activities: pd.DataFrame) -> pd.DataFrame:\\n    gr = activities.groupby(\\'sell_date\\').agg({\\'product\\':[\\'nunique\\',\\'unique\\']}).reset_index()\\n    gr.columns = [\\'sell_date\\',\\'num_sold\\',\\'products\\']\\n    gr[\\'products\\'] = gr[\\'products\\'].apply(sorted)\\n    return gr\\n\\n"
                    },
                    {
                        "username": "marcenavuc",
                        "content": "Some troubles with pandas:\\nColumn \\'products\\' has type list<str>, but if yours output dataframe has different type then you will get exception and tests will not let you go. To fix this just a cast \\'products\\' to list<str>)"
                    },
                    {
                        "username": "uaoiuaoi",
                        "content": "For pandasman. \"products\" must be a sring!"
                    },
                    {
                        "username": "edithi",
                        "content": "You can use the groupby() function along with the agg() function to group the data by \\'sell_date\\' and then aggregate the product names into a list. After that, you can calculate the number of different products sold using the length of the list. Finally, sort the product names lexicographically and join them using commas. Make sure to sort the result by \\'sell_date\\'"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "Use GROUP_CONCAT function to get comma separated product list as products :\n\nselect sell_date , count(distinct product) as num_sold , group_concat(distinct product ) as products\nfrom activities\ngroup by sell_date\norder by sell_date"
                    }
                ]
            },
            {
                "id": 1913567,
                "content": [
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT sell_date,count(*) AS \\'num_sold\\' ,STRING_AGG(product,\\',\\') AS \\'Products\\' \\nFROM( SELECT DISTINCT * FROM Activities)A\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT sell_date, COUNT(DISTINCT(product)) as num_sold, group_concat(distinct product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the code worked for me,\\nselect ac.sell_date,count(distinct ac.product) as num_sold,group_concat(distinct ac.product order by ac.product asc) as products from Activities as ac group by ac.sell_date"
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date;\\nit\\'s working properly.\\n"
                    },
                    {
                        "username": "0x415374",
                        "content": "In MSSQL this is very much not easy at all. "
                    },
                    {
                        "username": "DEVELOPER_m77",
                        "content": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;\\n```\\nThis query is the solution of this problem !"
                    },
                    {
                        "username": "nvpolyakova",
                        "content": "oracle: listagg(product,\\',\\') within group (order by product) as products"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "in Mysql try group_concat to build the list of product names in alphabetical order\\n\\nhttps://devdocs.io/mariadb/group_concat/index\\n\\n`group_concat(distinct col order by col) as products`"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi Leetcode team,\\n I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. Hence I have cast the column to date but still the issue is not getting same timestamps adding to date. NB; the column type of sell_date is date type I am not sure why leetcode adding timestamp to it.\\n\\nSELECT cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM\\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query:\\n\\nOutput\\nSELL_DATE\\tNUM_SOLD\\tPRODUCTS\\n2020-05-30 00:00:00\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01 00:00:00\\t2\\tBible,Pencil\\n2020-06-02 00:00:00\\t1\\tMask\\nExpected\\t\\t\\nsell_date\\tnum_sold\\tproducts\\n2020-05-30\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01\\t2\\tBible,Pencil\\n2020-06-02\\t1\\tMask"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. NB; the column type of sell_date is date type I am not sure why leet code adding timestamp to it.\\n\\nSELECT  cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM \\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query: \\n\\nOutput\\n| SELL_DATE           | NUM_SOLD | PRODUCTS                     |\\n| ------------------- | -------- | ---------------------------- |\\n| 2020-05-30 00:00:00 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 00:00:00 | 2        | Bible,Pencil                 |\\n| 2020-06-02 00:00:00 | 1        | Mask                         |\\nExpected\\n| sell_date  | num_sold | products                     |\\n| ---------- | -------- | ---------------------------- |\\n| 2020-05-30 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |"
                    }
                ]
            },
            {
                "id": 1886066,
                "content": [
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT sell_date,count(*) AS \\'num_sold\\' ,STRING_AGG(product,\\',\\') AS \\'Products\\' \\nFROM( SELECT DISTINCT * FROM Activities)A\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT sell_date, COUNT(DISTINCT(product)) as num_sold, group_concat(distinct product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the code worked for me,\\nselect ac.sell_date,count(distinct ac.product) as num_sold,group_concat(distinct ac.product order by ac.product asc) as products from Activities as ac group by ac.sell_date"
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date;\\nit\\'s working properly.\\n"
                    },
                    {
                        "username": "0x415374",
                        "content": "In MSSQL this is very much not easy at all. "
                    },
                    {
                        "username": "DEVELOPER_m77",
                        "content": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;\\n```\\nThis query is the solution of this problem !"
                    },
                    {
                        "username": "nvpolyakova",
                        "content": "oracle: listagg(product,\\',\\') within group (order by product) as products"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "in Mysql try group_concat to build the list of product names in alphabetical order\\n\\nhttps://devdocs.io/mariadb/group_concat/index\\n\\n`group_concat(distinct col order by col) as products`"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi Leetcode team,\\n I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. Hence I have cast the column to date but still the issue is not getting same timestamps adding to date. NB; the column type of sell_date is date type I am not sure why leetcode adding timestamp to it.\\n\\nSELECT cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM\\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query:\\n\\nOutput\\nSELL_DATE\\tNUM_SOLD\\tPRODUCTS\\n2020-05-30 00:00:00\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01 00:00:00\\t2\\tBible,Pencil\\n2020-06-02 00:00:00\\t1\\tMask\\nExpected\\t\\t\\nsell_date\\tnum_sold\\tproducts\\n2020-05-30\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01\\t2\\tBible,Pencil\\n2020-06-02\\t1\\tMask"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. NB; the column type of sell_date is date type I am not sure why leet code adding timestamp to it.\\n\\nSELECT  cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM \\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query: \\n\\nOutput\\n| SELL_DATE           | NUM_SOLD | PRODUCTS                     |\\n| ------------------- | -------- | ---------------------------- |\\n| 2020-05-30 00:00:00 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 00:00:00 | 2        | Bible,Pencil                 |\\n| 2020-06-02 00:00:00 | 1        | Mask                         |\\nExpected\\n| sell_date  | num_sold | products                     |\\n| ---------- | -------- | ---------------------------- |\\n| 2020-05-30 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |"
                    }
                ]
            },
            {
                "id": 1860135,
                "content": [
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT sell_date,count(*) AS \\'num_sold\\' ,STRING_AGG(product,\\',\\') AS \\'Products\\' \\nFROM( SELECT DISTINCT * FROM Activities)A\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT sell_date, COUNT(DISTINCT(product)) as num_sold, group_concat(distinct product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the code worked for me,\\nselect ac.sell_date,count(distinct ac.product) as num_sold,group_concat(distinct ac.product order by ac.product asc) as products from Activities as ac group by ac.sell_date"
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date;\\nit\\'s working properly.\\n"
                    },
                    {
                        "username": "0x415374",
                        "content": "In MSSQL this is very much not easy at all. "
                    },
                    {
                        "username": "DEVELOPER_m77",
                        "content": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;\\n```\\nThis query is the solution of this problem !"
                    },
                    {
                        "username": "nvpolyakova",
                        "content": "oracle: listagg(product,\\',\\') within group (order by product) as products"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "in Mysql try group_concat to build the list of product names in alphabetical order\\n\\nhttps://devdocs.io/mariadb/group_concat/index\\n\\n`group_concat(distinct col order by col) as products`"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi Leetcode team,\\n I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. Hence I have cast the column to date but still the issue is not getting same timestamps adding to date. NB; the column type of sell_date is date type I am not sure why leetcode adding timestamp to it.\\n\\nSELECT cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM\\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query:\\n\\nOutput\\nSELL_DATE\\tNUM_SOLD\\tPRODUCTS\\n2020-05-30 00:00:00\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01 00:00:00\\t2\\tBible,Pencil\\n2020-06-02 00:00:00\\t1\\tMask\\nExpected\\t\\t\\nsell_date\\tnum_sold\\tproducts\\n2020-05-30\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01\\t2\\tBible,Pencil\\n2020-06-02\\t1\\tMask"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. NB; the column type of sell_date is date type I am not sure why leet code adding timestamp to it.\\n\\nSELECT  cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM \\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query: \\n\\nOutput\\n| SELL_DATE           | NUM_SOLD | PRODUCTS                     |\\n| ------------------- | -------- | ---------------------------- |\\n| 2020-05-30 00:00:00 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 00:00:00 | 2        | Bible,Pencil                 |\\n| 2020-06-02 00:00:00 | 1        | Mask                         |\\nExpected\\n| sell_date  | num_sold | products                     |\\n| ---------- | -------- | ---------------------------- |\\n| 2020-05-30 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |"
                    }
                ]
            },
            {
                "id": 1858140,
                "content": [
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT sell_date,count(*) AS \\'num_sold\\' ,STRING_AGG(product,\\',\\') AS \\'Products\\' \\nFROM( SELECT DISTINCT * FROM Activities)A\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT sell_date, COUNT(DISTINCT(product)) as num_sold, group_concat(distinct product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the code worked for me,\\nselect ac.sell_date,count(distinct ac.product) as num_sold,group_concat(distinct ac.product order by ac.product asc) as products from Activities as ac group by ac.sell_date"
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date;\\nit\\'s working properly.\\n"
                    },
                    {
                        "username": "0x415374",
                        "content": "In MSSQL this is very much not easy at all. "
                    },
                    {
                        "username": "DEVELOPER_m77",
                        "content": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;\\n```\\nThis query is the solution of this problem !"
                    },
                    {
                        "username": "nvpolyakova",
                        "content": "oracle: listagg(product,\\',\\') within group (order by product) as products"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "in Mysql try group_concat to build the list of product names in alphabetical order\\n\\nhttps://devdocs.io/mariadb/group_concat/index\\n\\n`group_concat(distinct col order by col) as products`"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi Leetcode team,\\n I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. Hence I have cast the column to date but still the issue is not getting same timestamps adding to date. NB; the column type of sell_date is date type I am not sure why leetcode adding timestamp to it.\\n\\nSELECT cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM\\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query:\\n\\nOutput\\nSELL_DATE\\tNUM_SOLD\\tPRODUCTS\\n2020-05-30 00:00:00\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01 00:00:00\\t2\\tBible,Pencil\\n2020-06-02 00:00:00\\t1\\tMask\\nExpected\\t\\t\\nsell_date\\tnum_sold\\tproducts\\n2020-05-30\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01\\t2\\tBible,Pencil\\n2020-06-02\\t1\\tMask"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. NB; the column type of sell_date is date type I am not sure why leet code adding timestamp to it.\\n\\nSELECT  cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM \\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query: \\n\\nOutput\\n| SELL_DATE           | NUM_SOLD | PRODUCTS                     |\\n| ------------------- | -------- | ---------------------------- |\\n| 2020-05-30 00:00:00 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 00:00:00 | 2        | Bible,Pencil                 |\\n| 2020-06-02 00:00:00 | 1        | Mask                         |\\nExpected\\n| sell_date  | num_sold | products                     |\\n| ---------- | -------- | ---------------------------- |\\n| 2020-05-30 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |"
                    }
                ]
            },
            {
                "id": 1857181,
                "content": [
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT sell_date,count(*) AS \\'num_sold\\' ,STRING_AGG(product,\\',\\') AS \\'Products\\' \\nFROM( SELECT DISTINCT * FROM Activities)A\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT sell_date, COUNT(DISTINCT(product)) as num_sold, group_concat(distinct product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the code worked for me,\\nselect ac.sell_date,count(distinct ac.product) as num_sold,group_concat(distinct ac.product order by ac.product asc) as products from Activities as ac group by ac.sell_date"
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date;\\nit\\'s working properly.\\n"
                    },
                    {
                        "username": "0x415374",
                        "content": "In MSSQL this is very much not easy at all. "
                    },
                    {
                        "username": "DEVELOPER_m77",
                        "content": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;\\n```\\nThis query is the solution of this problem !"
                    },
                    {
                        "username": "nvpolyakova",
                        "content": "oracle: listagg(product,\\',\\') within group (order by product) as products"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "in Mysql try group_concat to build the list of product names in alphabetical order\\n\\nhttps://devdocs.io/mariadb/group_concat/index\\n\\n`group_concat(distinct col order by col) as products`"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi Leetcode team,\\n I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. Hence I have cast the column to date but still the issue is not getting same timestamps adding to date. NB; the column type of sell_date is date type I am not sure why leetcode adding timestamp to it.\\n\\nSELECT cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM\\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query:\\n\\nOutput\\nSELL_DATE\\tNUM_SOLD\\tPRODUCTS\\n2020-05-30 00:00:00\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01 00:00:00\\t2\\tBible,Pencil\\n2020-06-02 00:00:00\\t1\\tMask\\nExpected\\t\\t\\nsell_date\\tnum_sold\\tproducts\\n2020-05-30\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01\\t2\\tBible,Pencil\\n2020-06-02\\t1\\tMask"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. NB; the column type of sell_date is date type I am not sure why leet code adding timestamp to it.\\n\\nSELECT  cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM \\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query: \\n\\nOutput\\n| SELL_DATE           | NUM_SOLD | PRODUCTS                     |\\n| ------------------- | -------- | ---------------------------- |\\n| 2020-05-30 00:00:00 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 00:00:00 | 2        | Bible,Pencil                 |\\n| 2020-06-02 00:00:00 | 1        | Mask                         |\\nExpected\\n| sell_date  | num_sold | products                     |\\n| ---------- | -------- | ---------------------------- |\\n| 2020-05-30 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |"
                    }
                ]
            },
            {
                "id": 1855923,
                "content": [
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT sell_date,count(*) AS \\'num_sold\\' ,STRING_AGG(product,\\',\\') AS \\'Products\\' \\nFROM( SELECT DISTINCT * FROM Activities)A\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT sell_date, COUNT(DISTINCT(product)) as num_sold, group_concat(distinct product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the code worked for me,\\nselect ac.sell_date,count(distinct ac.product) as num_sold,group_concat(distinct ac.product order by ac.product asc) as products from Activities as ac group by ac.sell_date"
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date;\\nit\\'s working properly.\\n"
                    },
                    {
                        "username": "0x415374",
                        "content": "In MSSQL this is very much not easy at all. "
                    },
                    {
                        "username": "DEVELOPER_m77",
                        "content": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;\\n```\\nThis query is the solution of this problem !"
                    },
                    {
                        "username": "nvpolyakova",
                        "content": "oracle: listagg(product,\\',\\') within group (order by product) as products"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "in Mysql try group_concat to build the list of product names in alphabetical order\\n\\nhttps://devdocs.io/mariadb/group_concat/index\\n\\n`group_concat(distinct col order by col) as products`"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi Leetcode team,\\n I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. Hence I have cast the column to date but still the issue is not getting same timestamps adding to date. NB; the column type of sell_date is date type I am not sure why leetcode adding timestamp to it.\\n\\nSELECT cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM\\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query:\\n\\nOutput\\nSELL_DATE\\tNUM_SOLD\\tPRODUCTS\\n2020-05-30 00:00:00\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01 00:00:00\\t2\\tBible,Pencil\\n2020-06-02 00:00:00\\t1\\tMask\\nExpected\\t\\t\\nsell_date\\tnum_sold\\tproducts\\n2020-05-30\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01\\t2\\tBible,Pencil\\n2020-06-02\\t1\\tMask"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. NB; the column type of sell_date is date type I am not sure why leet code adding timestamp to it.\\n\\nSELECT  cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM \\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query: \\n\\nOutput\\n| SELL_DATE           | NUM_SOLD | PRODUCTS                     |\\n| ------------------- | -------- | ---------------------------- |\\n| 2020-05-30 00:00:00 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 00:00:00 | 2        | Bible,Pencil                 |\\n| 2020-06-02 00:00:00 | 1        | Mask                         |\\nExpected\\n| sell_date  | num_sold | products                     |\\n| ---------- | -------- | ---------------------------- |\\n| 2020-05-30 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |"
                    }
                ]
            },
            {
                "id": 1833374,
                "content": [
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT sell_date,count(*) AS \\'num_sold\\' ,STRING_AGG(product,\\',\\') AS \\'Products\\' \\nFROM( SELECT DISTINCT * FROM Activities)A\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT sell_date, COUNT(DISTINCT(product)) as num_sold, group_concat(distinct product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the code worked for me,\\nselect ac.sell_date,count(distinct ac.product) as num_sold,group_concat(distinct ac.product order by ac.product asc) as products from Activities as ac group by ac.sell_date"
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date;\\nit\\'s working properly.\\n"
                    },
                    {
                        "username": "0x415374",
                        "content": "In MSSQL this is very much not easy at all. "
                    },
                    {
                        "username": "DEVELOPER_m77",
                        "content": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;\\n```\\nThis query is the solution of this problem !"
                    },
                    {
                        "username": "nvpolyakova",
                        "content": "oracle: listagg(product,\\',\\') within group (order by product) as products"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "in Mysql try group_concat to build the list of product names in alphabetical order\\n\\nhttps://devdocs.io/mariadb/group_concat/index\\n\\n`group_concat(distinct col order by col) as products`"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi Leetcode team,\\n I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. Hence I have cast the column to date but still the issue is not getting same timestamps adding to date. NB; the column type of sell_date is date type I am not sure why leetcode adding timestamp to it.\\n\\nSELECT cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM\\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query:\\n\\nOutput\\nSELL_DATE\\tNUM_SOLD\\tPRODUCTS\\n2020-05-30 00:00:00\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01 00:00:00\\t2\\tBible,Pencil\\n2020-06-02 00:00:00\\t1\\tMask\\nExpected\\t\\t\\nsell_date\\tnum_sold\\tproducts\\n2020-05-30\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01\\t2\\tBible,Pencil\\n2020-06-02\\t1\\tMask"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. NB; the column type of sell_date is date type I am not sure why leet code adding timestamp to it.\\n\\nSELECT  cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM \\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query: \\n\\nOutput\\n| SELL_DATE           | NUM_SOLD | PRODUCTS                     |\\n| ------------------- | -------- | ---------------------------- |\\n| 2020-05-30 00:00:00 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 00:00:00 | 2        | Bible,Pencil                 |\\n| 2020-06-02 00:00:00 | 1        | Mask                         |\\nExpected\\n| sell_date  | num_sold | products                     |\\n| ---------- | -------- | ---------------------------- |\\n| 2020-05-30 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |"
                    }
                ]
            },
            {
                "id": 1811189,
                "content": [
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT sell_date,count(*) AS \\'num_sold\\' ,STRING_AGG(product,\\',\\') AS \\'Products\\' \\nFROM( SELECT DISTINCT * FROM Activities)A\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT sell_date, COUNT(DISTINCT(product)) as num_sold, group_concat(distinct product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the code worked for me,\\nselect ac.sell_date,count(distinct ac.product) as num_sold,group_concat(distinct ac.product order by ac.product asc) as products from Activities as ac group by ac.sell_date"
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date;\\nit\\'s working properly.\\n"
                    },
                    {
                        "username": "0x415374",
                        "content": "In MSSQL this is very much not easy at all. "
                    },
                    {
                        "username": "DEVELOPER_m77",
                        "content": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;\\n```\\nThis query is the solution of this problem !"
                    },
                    {
                        "username": "nvpolyakova",
                        "content": "oracle: listagg(product,\\',\\') within group (order by product) as products"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "in Mysql try group_concat to build the list of product names in alphabetical order\\n\\nhttps://devdocs.io/mariadb/group_concat/index\\n\\n`group_concat(distinct col order by col) as products`"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi Leetcode team,\\n I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. Hence I have cast the column to date but still the issue is not getting same timestamps adding to date. NB; the column type of sell_date is date type I am not sure why leetcode adding timestamp to it.\\n\\nSELECT cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM\\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query:\\n\\nOutput\\nSELL_DATE\\tNUM_SOLD\\tPRODUCTS\\n2020-05-30 00:00:00\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01 00:00:00\\t2\\tBible,Pencil\\n2020-06-02 00:00:00\\t1\\tMask\\nExpected\\t\\t\\nsell_date\\tnum_sold\\tproducts\\n2020-05-30\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01\\t2\\tBible,Pencil\\n2020-06-02\\t1\\tMask"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. NB; the column type of sell_date is date type I am not sure why leet code adding timestamp to it.\\n\\nSELECT  cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM \\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query: \\n\\nOutput\\n| SELL_DATE           | NUM_SOLD | PRODUCTS                     |\\n| ------------------- | -------- | ---------------------------- |\\n| 2020-05-30 00:00:00 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 00:00:00 | 2        | Bible,Pencil                 |\\n| 2020-06-02 00:00:00 | 1        | Mask                         |\\nExpected\\n| sell_date  | num_sold | products                     |\\n| ---------- | -------- | ---------------------------- |\\n| 2020-05-30 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |"
                    }
                ]
            },
            {
                "id": 1798158,
                "content": [
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT sell_date,count(*) AS \\'num_sold\\' ,STRING_AGG(product,\\',\\') AS \\'Products\\' \\nFROM( SELECT DISTINCT * FROM Activities)A\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT sell_date, COUNT(DISTINCT(product)) as num_sold, group_concat(distinct product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the code worked for me,\\nselect ac.sell_date,count(distinct ac.product) as num_sold,group_concat(distinct ac.product order by ac.product asc) as products from Activities as ac group by ac.sell_date"
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date;\\nit\\'s working properly.\\n"
                    },
                    {
                        "username": "0x415374",
                        "content": "In MSSQL this is very much not easy at all. "
                    },
                    {
                        "username": "DEVELOPER_m77",
                        "content": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;\\n```\\nThis query is the solution of this problem !"
                    },
                    {
                        "username": "nvpolyakova",
                        "content": "oracle: listagg(product,\\',\\') within group (order by product) as products"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "in Mysql try group_concat to build the list of product names in alphabetical order\\n\\nhttps://devdocs.io/mariadb/group_concat/index\\n\\n`group_concat(distinct col order by col) as products`"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi Leetcode team,\\n I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. Hence I have cast the column to date but still the issue is not getting same timestamps adding to date. NB; the column type of sell_date is date type I am not sure why leetcode adding timestamp to it.\\n\\nSELECT cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM\\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query:\\n\\nOutput\\nSELL_DATE\\tNUM_SOLD\\tPRODUCTS\\n2020-05-30 00:00:00\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01 00:00:00\\t2\\tBible,Pencil\\n2020-06-02 00:00:00\\t1\\tMask\\nExpected\\t\\t\\nsell_date\\tnum_sold\\tproducts\\n2020-05-30\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01\\t2\\tBible,Pencil\\n2020-06-02\\t1\\tMask"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. NB; the column type of sell_date is date type I am not sure why leet code adding timestamp to it.\\n\\nSELECT  cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM \\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query: \\n\\nOutput\\n| SELL_DATE           | NUM_SOLD | PRODUCTS                     |\\n| ------------------- | -------- | ---------------------------- |\\n| 2020-05-30 00:00:00 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 00:00:00 | 2        | Bible,Pencil                 |\\n| 2020-06-02 00:00:00 | 1        | Mask                         |\\nExpected\\n| sell_date  | num_sold | products                     |\\n| ---------- | -------- | ---------------------------- |\\n| 2020-05-30 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |"
                    }
                ]
            },
            {
                "id": 1798154,
                "content": [
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT sell_date,count(*) AS \\'num_sold\\' ,STRING_AGG(product,\\',\\') AS \\'Products\\' \\nFROM( SELECT DISTINCT * FROM Activities)A\\nGROUP BY sell_date\\nORDER BY sell_date"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT sell_date, COUNT(DISTINCT(product)) as num_sold, group_concat(distinct product) as products\\nFROM Activities\\nGROUP BY sell_date\\nORDER BY sell_date ASC"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the code worked for me,\\nselect ac.sell_date,count(distinct ac.product) as num_sold,group_concat(distinct ac.product order by ac.product asc) as products from Activities as ac group by ac.sell_date"
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date order by sell_date;\\nit\\'s working properly.\\n"
                    },
                    {
                        "username": "0x415374",
                        "content": "In MSSQL this is very much not easy at all. "
                    },
                    {
                        "username": "DEVELOPER_m77",
                        "content": "```\\nselect sell_date,\\ncount(distinct product) as num_sold,\\ngroup_concat(distinct product) as products\\nfrom Activities\\ngroup by sell_date;\\n```\\nThis query is the solution of this problem !"
                    },
                    {
                        "username": "nvpolyakova",
                        "content": "oracle: listagg(product,\\',\\') within group (order by product) as products"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "in Mysql try group_concat to build the list of product names in alphabetical order\\n\\nhttps://devdocs.io/mariadb/group_concat/index\\n\\n`group_concat(distinct col order by col) as products`"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi Leetcode team,\\n I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. Hence I have cast the column to date but still the issue is not getting same timestamps adding to date. NB; the column type of sell_date is date type I am not sure why leetcode adding timestamp to it.\\n\\nSELECT cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM\\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query:\\n\\nOutput\\nSELL_DATE\\tNUM_SOLD\\tPRODUCTS\\n2020-05-30 00:00:00\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01 00:00:00\\t2\\tBible,Pencil\\n2020-06-02 00:00:00\\t1\\tMask\\nExpected\\t\\t\\nsell_date\\tnum_sold\\tproducts\\n2020-05-30\\t3\\tBasketball,Headphone,T-Shirt\\n2020-06-01\\t2\\tBible,Pencil\\n2020-06-02\\t1\\tMask"
                    },
                    {
                        "username": "LaughingLamb6",
                        "content": "Hi I have prepared this query but it is not giving right results. the Leetcode is adding timestamps to the date while run the query. When I try the same query in my local oracle instance it is giving right result. NB; the column type of sell_date is date type I am not sure why leet code adding timestamp to it.\\n\\nSELECT  cast(sell_date as date)sell_date, COUNT(PRODUCT)num_sold,listagg(product, \\',\\')within group\\n( order by 1)products\\nfrom (\\nSELECT SELL_DATE ,PRODUCT FROM ( SELECT A.*, ROW_NUMBER() OVER(PARTITION BY SELL_DATE,product ORDER BY 1)TOP FROM \\nACTIVITIES A\\n) WHERE TOP = 1\\n)\\nGROUP BY sell_date\\norder by sell_date\\n\\nWhile running the query: \\n\\nOutput\\n| SELL_DATE           | NUM_SOLD | PRODUCTS                     |\\n| ------------------- | -------- | ---------------------------- |\\n| 2020-05-30 00:00:00 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 00:00:00 | 2        | Bible,Pencil                 |\\n| 2020-06-02 00:00:00 | 1        | Mask                         |\\nExpected\\n| sell_date  | num_sold | products                     |\\n| ---------- | -------- | ---------------------------- |\\n| 2020-05-30 | 3        | Basketball,Headphone,T-Shirt |\\n| 2020-06-01 | 2        | Bible,Pencil                 |\\n| 2020-06-02 | 1        | Mask                         |"
                    }
                ]
            },
            {
                "id": 1796820,
                "content": [
                    {
                        "username": "CoolCoder99",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date;\\n\\nselect sell_date,count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date order by sell_date,products;\\n\\nWhy is the second query faster than the first one?\\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select sell_date,Count(Distinct(product)) as num_sold,\\nString_agg(product,\\',\\') as products from (\\nselect sell_date,product from activities group by sell_date,product) as temp\\ngroup by sell_date;"
                    },
                    {
                        "username": "Rosanguyen263",
                        "content": "My solution is \\nSELECT\\nsell_date,\\nCount(Distinct product) As num_sold,\\nGroup_concat(product) as Products\\nFROM Activities\\nGroup by sell_date\\n\\n\\nHowever, I dont know why my table gave out the extra count for mask, mask in the colum group_concat \\n"
                    },
                    {
                        "username": "The_Desert_Fox",
                        "content": "Group_concat(product) ------>Group_concat( distinct product)"
                    },
                    {
                        "username": "aymendj",
                        "content": "Why does is say that this query is incorrect, even though the result is almost the same, with the exception of the order of the items in the products column?\\n\\nSELECT \\n        sell_date,\\n        COUNT(DISTINCT product) AS num_sold,\\n        GROUP_CONCAT(product) products\\nFROM \\n        Activities\\nGROUP BY \\n        sell_date\\nORDER BY \\n        sell_date "
                    },
                    {
                        "username": "nayakbhishek",
                        "content": "`can anybody pls tell me whats wrong with my code it is running perfectly fine but while submitting in the test case the format of the dates get\\'s changed to yyyy-m-d due to which i am not able to submit.\\n`\\nselect sell_date ,count(*) as num_sold ,group_concat(product) as products from (\\nselect * , row_number() over(partition by product) as rn from Activities) as x where rn = 1 group by sell_date;"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "Don\\'t know how it\\'s acceptance rate is > 80%. It\\'s not easy in MS SQL Server.\\n\\nWITH cte AS (\\n    SELECT DISTINCT sell_date, product\\n    FROM activities\\n)\\nSELECT sell_date, count(1) num_sold, STRING_AGG( product, \\',\\') products\\nFROM cte\\nGROUP BY sell_date\\norder by sell_date;"
                    },
                    {
                        "username": "priyabrata_",
                        "content": "why i am getting run time error\\n MY code\\nselect sell_date , count( distinct product ) as num_sold , \\ngroup_concat ( distinct product order by product ) as products  from Activities group by sell_date order by sell_date;\\n\\nRuntime Error\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'distinct product order by product ) as products  from Activities group by sell_d\\' at line 3\\n "
                    },
                    {
                        "username": "ajay203",
                        "content": "Hi ,\n\nYour code logic is right , just try to avoid putting unnecessary spaces \" \" between the code and also try to put allias name of the column in Quotation Mark like \"num_sold\" .\nThis should solve the issue.\n\nyour code below with correction for reference.\n\n`\nselect sell_date , count(distinct product) as \"num_sold\" , \ngroup_concat(distinct product order by product) as \"products\" from Activities group by sell_date order by sell_date;\n`"
                    },
                    {
                        "username": "abdelrahmanmah",
                        "content": "select \\nr.sell_date,max(r.rn) as num_sold , group_concat(distinct r.product) as products  \\nfrom \\n    (\\n        select DISTINCT product, ROW_NUMBER() OVER(partition by sell_date order by product) as rn,\\n              Product as ss, sell_date   \\n        from \\n            Activities  \\n        group by \\n            product \\n        order by \\n            sell_date\\n    ) as r \\ngroup by \\n    r.sell_date \\norder by \\n    r.sell_date \\n\\n\\n"
                    },
                    {
                        "username": "linuxchata",
                        "content": "MS SQL SERVER\n\n```WITH [groupped] ([sell_date], [product]) AS \n(SELECT [sell_date], [product]\nFROM [Activities]\nGROUP BY [sell_date], [product])\n\nSELECT \n    [G].[sell_date],\n    COUNT([G].[product]) AS [num_sold],\n    STRING_AGG([G].[product], ',') WITHIN GROUP (ORDER BY [G].[product] ASC) AS [products]\nFROM [groupped] AS [G]\nGROUP BY [sell_date]\nORDER BY [G].[sell_date]"
                    },
                    {
                        "username": "EricaWanja",
                        "content": " `select  sell_date, count(product) as num_sold, string_Agg(product, \\',\\') as products from Activities group by sell_date\\norder by sell_date `\\n\\nWhen i execute above code it causes a repetition in the last row i.e outputs two masks and there is only one, yo can run the code what i mean, anyone who can help me figure this out"
                    }
                ]
            },
            {
                "id": 1793750,
                "content": [
                    {
                        "username": "CoolCoder99",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date;\\n\\nselect sell_date,count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date order by sell_date,products;\\n\\nWhy is the second query faster than the first one?\\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select sell_date,Count(Distinct(product)) as num_sold,\\nString_agg(product,\\',\\') as products from (\\nselect sell_date,product from activities group by sell_date,product) as temp\\ngroup by sell_date;"
                    },
                    {
                        "username": "Rosanguyen263",
                        "content": "My solution is \\nSELECT\\nsell_date,\\nCount(Distinct product) As num_sold,\\nGroup_concat(product) as Products\\nFROM Activities\\nGroup by sell_date\\n\\n\\nHowever, I dont know why my table gave out the extra count for mask, mask in the colum group_concat \\n"
                    },
                    {
                        "username": "The_Desert_Fox",
                        "content": "Group_concat(product) ------>Group_concat( distinct product)"
                    },
                    {
                        "username": "aymendj",
                        "content": "Why does is say that this query is incorrect, even though the result is almost the same, with the exception of the order of the items in the products column?\\n\\nSELECT \\n        sell_date,\\n        COUNT(DISTINCT product) AS num_sold,\\n        GROUP_CONCAT(product) products\\nFROM \\n        Activities\\nGROUP BY \\n        sell_date\\nORDER BY \\n        sell_date "
                    },
                    {
                        "username": "nayakbhishek",
                        "content": "`can anybody pls tell me whats wrong with my code it is running perfectly fine but while submitting in the test case the format of the dates get\\'s changed to yyyy-m-d due to which i am not able to submit.\\n`\\nselect sell_date ,count(*) as num_sold ,group_concat(product) as products from (\\nselect * , row_number() over(partition by product) as rn from Activities) as x where rn = 1 group by sell_date;"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "Don\\'t know how it\\'s acceptance rate is > 80%. It\\'s not easy in MS SQL Server.\\n\\nWITH cte AS (\\n    SELECT DISTINCT sell_date, product\\n    FROM activities\\n)\\nSELECT sell_date, count(1) num_sold, STRING_AGG( product, \\',\\') products\\nFROM cte\\nGROUP BY sell_date\\norder by sell_date;"
                    },
                    {
                        "username": "priyabrata_",
                        "content": "why i am getting run time error\\n MY code\\nselect sell_date , count( distinct product ) as num_sold , \\ngroup_concat ( distinct product order by product ) as products  from Activities group by sell_date order by sell_date;\\n\\nRuntime Error\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'distinct product order by product ) as products  from Activities group by sell_d\\' at line 3\\n "
                    },
                    {
                        "username": "ajay203",
                        "content": "Hi ,\n\nYour code logic is right , just try to avoid putting unnecessary spaces \" \" between the code and also try to put allias name of the column in Quotation Mark like \"num_sold\" .\nThis should solve the issue.\n\nyour code below with correction for reference.\n\n`\nselect sell_date , count(distinct product) as \"num_sold\" , \ngroup_concat(distinct product order by product) as \"products\" from Activities group by sell_date order by sell_date;\n`"
                    },
                    {
                        "username": "abdelrahmanmah",
                        "content": "select \\nr.sell_date,max(r.rn) as num_sold , group_concat(distinct r.product) as products  \\nfrom \\n    (\\n        select DISTINCT product, ROW_NUMBER() OVER(partition by sell_date order by product) as rn,\\n              Product as ss, sell_date   \\n        from \\n            Activities  \\n        group by \\n            product \\n        order by \\n            sell_date\\n    ) as r \\ngroup by \\n    r.sell_date \\norder by \\n    r.sell_date \\n\\n\\n"
                    },
                    {
                        "username": "linuxchata",
                        "content": "MS SQL SERVER\n\n```WITH [groupped] ([sell_date], [product]) AS \n(SELECT [sell_date], [product]\nFROM [Activities]\nGROUP BY [sell_date], [product])\n\nSELECT \n    [G].[sell_date],\n    COUNT([G].[product]) AS [num_sold],\n    STRING_AGG([G].[product], ',') WITHIN GROUP (ORDER BY [G].[product] ASC) AS [products]\nFROM [groupped] AS [G]\nGROUP BY [sell_date]\nORDER BY [G].[sell_date]"
                    },
                    {
                        "username": "EricaWanja",
                        "content": " `select  sell_date, count(product) as num_sold, string_Agg(product, \\',\\') as products from Activities group by sell_date\\norder by sell_date `\\n\\nWhen i execute above code it causes a repetition in the last row i.e outputs two masks and there is only one, yo can run the code what i mean, anyone who can help me figure this out"
                    }
                ]
            },
            {
                "id": 1783875,
                "content": [
                    {
                        "username": "CoolCoder99",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date;\\n\\nselect sell_date,count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date order by sell_date,products;\\n\\nWhy is the second query faster than the first one?\\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select sell_date,Count(Distinct(product)) as num_sold,\\nString_agg(product,\\',\\') as products from (\\nselect sell_date,product from activities group by sell_date,product) as temp\\ngroup by sell_date;"
                    },
                    {
                        "username": "Rosanguyen263",
                        "content": "My solution is \\nSELECT\\nsell_date,\\nCount(Distinct product) As num_sold,\\nGroup_concat(product) as Products\\nFROM Activities\\nGroup by sell_date\\n\\n\\nHowever, I dont know why my table gave out the extra count for mask, mask in the colum group_concat \\n"
                    },
                    {
                        "username": "The_Desert_Fox",
                        "content": "Group_concat(product) ------>Group_concat( distinct product)"
                    },
                    {
                        "username": "aymendj",
                        "content": "Why does is say that this query is incorrect, even though the result is almost the same, with the exception of the order of the items in the products column?\\n\\nSELECT \\n        sell_date,\\n        COUNT(DISTINCT product) AS num_sold,\\n        GROUP_CONCAT(product) products\\nFROM \\n        Activities\\nGROUP BY \\n        sell_date\\nORDER BY \\n        sell_date "
                    },
                    {
                        "username": "nayakbhishek",
                        "content": "`can anybody pls tell me whats wrong with my code it is running perfectly fine but while submitting in the test case the format of the dates get\\'s changed to yyyy-m-d due to which i am not able to submit.\\n`\\nselect sell_date ,count(*) as num_sold ,group_concat(product) as products from (\\nselect * , row_number() over(partition by product) as rn from Activities) as x where rn = 1 group by sell_date;"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "Don\\'t know how it\\'s acceptance rate is > 80%. It\\'s not easy in MS SQL Server.\\n\\nWITH cte AS (\\n    SELECT DISTINCT sell_date, product\\n    FROM activities\\n)\\nSELECT sell_date, count(1) num_sold, STRING_AGG( product, \\',\\') products\\nFROM cte\\nGROUP BY sell_date\\norder by sell_date;"
                    },
                    {
                        "username": "priyabrata_",
                        "content": "why i am getting run time error\\n MY code\\nselect sell_date , count( distinct product ) as num_sold , \\ngroup_concat ( distinct product order by product ) as products  from Activities group by sell_date order by sell_date;\\n\\nRuntime Error\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'distinct product order by product ) as products  from Activities group by sell_d\\' at line 3\\n "
                    },
                    {
                        "username": "ajay203",
                        "content": "Hi ,\n\nYour code logic is right , just try to avoid putting unnecessary spaces \" \" between the code and also try to put allias name of the column in Quotation Mark like \"num_sold\" .\nThis should solve the issue.\n\nyour code below with correction for reference.\n\n`\nselect sell_date , count(distinct product) as \"num_sold\" , \ngroup_concat(distinct product order by product) as \"products\" from Activities group by sell_date order by sell_date;\n`"
                    },
                    {
                        "username": "abdelrahmanmah",
                        "content": "select \\nr.sell_date,max(r.rn) as num_sold , group_concat(distinct r.product) as products  \\nfrom \\n    (\\n        select DISTINCT product, ROW_NUMBER() OVER(partition by sell_date order by product) as rn,\\n              Product as ss, sell_date   \\n        from \\n            Activities  \\n        group by \\n            product \\n        order by \\n            sell_date\\n    ) as r \\ngroup by \\n    r.sell_date \\norder by \\n    r.sell_date \\n\\n\\n"
                    },
                    {
                        "username": "linuxchata",
                        "content": "MS SQL SERVER\n\n```WITH [groupped] ([sell_date], [product]) AS \n(SELECT [sell_date], [product]\nFROM [Activities]\nGROUP BY [sell_date], [product])\n\nSELECT \n    [G].[sell_date],\n    COUNT([G].[product]) AS [num_sold],\n    STRING_AGG([G].[product], ',') WITHIN GROUP (ORDER BY [G].[product] ASC) AS [products]\nFROM [groupped] AS [G]\nGROUP BY [sell_date]\nORDER BY [G].[sell_date]"
                    },
                    {
                        "username": "EricaWanja",
                        "content": " `select  sell_date, count(product) as num_sold, string_Agg(product, \\',\\') as products from Activities group by sell_date\\norder by sell_date `\\n\\nWhen i execute above code it causes a repetition in the last row i.e outputs two masks and there is only one, yo can run the code what i mean, anyone who can help me figure this out"
                    }
                ]
            },
            {
                "id": 1773059,
                "content": [
                    {
                        "username": "CoolCoder99",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date;\\n\\nselect sell_date,count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date order by sell_date,products;\\n\\nWhy is the second query faster than the first one?\\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select sell_date,Count(Distinct(product)) as num_sold,\\nString_agg(product,\\',\\') as products from (\\nselect sell_date,product from activities group by sell_date,product) as temp\\ngroup by sell_date;"
                    },
                    {
                        "username": "Rosanguyen263",
                        "content": "My solution is \\nSELECT\\nsell_date,\\nCount(Distinct product) As num_sold,\\nGroup_concat(product) as Products\\nFROM Activities\\nGroup by sell_date\\n\\n\\nHowever, I dont know why my table gave out the extra count for mask, mask in the colum group_concat \\n"
                    },
                    {
                        "username": "The_Desert_Fox",
                        "content": "Group_concat(product) ------>Group_concat( distinct product)"
                    },
                    {
                        "username": "aymendj",
                        "content": "Why does is say that this query is incorrect, even though the result is almost the same, with the exception of the order of the items in the products column?\\n\\nSELECT \\n        sell_date,\\n        COUNT(DISTINCT product) AS num_sold,\\n        GROUP_CONCAT(product) products\\nFROM \\n        Activities\\nGROUP BY \\n        sell_date\\nORDER BY \\n        sell_date "
                    },
                    {
                        "username": "nayakbhishek",
                        "content": "`can anybody pls tell me whats wrong with my code it is running perfectly fine but while submitting in the test case the format of the dates get\\'s changed to yyyy-m-d due to which i am not able to submit.\\n`\\nselect sell_date ,count(*) as num_sold ,group_concat(product) as products from (\\nselect * , row_number() over(partition by product) as rn from Activities) as x where rn = 1 group by sell_date;"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "Don\\'t know how it\\'s acceptance rate is > 80%. It\\'s not easy in MS SQL Server.\\n\\nWITH cte AS (\\n    SELECT DISTINCT sell_date, product\\n    FROM activities\\n)\\nSELECT sell_date, count(1) num_sold, STRING_AGG( product, \\',\\') products\\nFROM cte\\nGROUP BY sell_date\\norder by sell_date;"
                    },
                    {
                        "username": "priyabrata_",
                        "content": "why i am getting run time error\\n MY code\\nselect sell_date , count( distinct product ) as num_sold , \\ngroup_concat ( distinct product order by product ) as products  from Activities group by sell_date order by sell_date;\\n\\nRuntime Error\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'distinct product order by product ) as products  from Activities group by sell_d\\' at line 3\\n "
                    },
                    {
                        "username": "ajay203",
                        "content": "Hi ,\n\nYour code logic is right , just try to avoid putting unnecessary spaces \" \" between the code and also try to put allias name of the column in Quotation Mark like \"num_sold\" .\nThis should solve the issue.\n\nyour code below with correction for reference.\n\n`\nselect sell_date , count(distinct product) as \"num_sold\" , \ngroup_concat(distinct product order by product) as \"products\" from Activities group by sell_date order by sell_date;\n`"
                    },
                    {
                        "username": "abdelrahmanmah",
                        "content": "select \\nr.sell_date,max(r.rn) as num_sold , group_concat(distinct r.product) as products  \\nfrom \\n    (\\n        select DISTINCT product, ROW_NUMBER() OVER(partition by sell_date order by product) as rn,\\n              Product as ss, sell_date   \\n        from \\n            Activities  \\n        group by \\n            product \\n        order by \\n            sell_date\\n    ) as r \\ngroup by \\n    r.sell_date \\norder by \\n    r.sell_date \\n\\n\\n"
                    },
                    {
                        "username": "linuxchata",
                        "content": "MS SQL SERVER\n\n```WITH [groupped] ([sell_date], [product]) AS \n(SELECT [sell_date], [product]\nFROM [Activities]\nGROUP BY [sell_date], [product])\n\nSELECT \n    [G].[sell_date],\n    COUNT([G].[product]) AS [num_sold],\n    STRING_AGG([G].[product], ',') WITHIN GROUP (ORDER BY [G].[product] ASC) AS [products]\nFROM [groupped] AS [G]\nGROUP BY [sell_date]\nORDER BY [G].[sell_date]"
                    },
                    {
                        "username": "EricaWanja",
                        "content": " `select  sell_date, count(product) as num_sold, string_Agg(product, \\',\\') as products from Activities group by sell_date\\norder by sell_date `\\n\\nWhen i execute above code it causes a repetition in the last row i.e outputs two masks and there is only one, yo can run the code what i mean, anyone who can help me figure this out"
                    }
                ]
            },
            {
                "id": 1771209,
                "content": [
                    {
                        "username": "CoolCoder99",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date;\\n\\nselect sell_date,count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date order by sell_date,products;\\n\\nWhy is the second query faster than the first one?\\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select sell_date,Count(Distinct(product)) as num_sold,\\nString_agg(product,\\',\\') as products from (\\nselect sell_date,product from activities group by sell_date,product) as temp\\ngroup by sell_date;"
                    },
                    {
                        "username": "Rosanguyen263",
                        "content": "My solution is \\nSELECT\\nsell_date,\\nCount(Distinct product) As num_sold,\\nGroup_concat(product) as Products\\nFROM Activities\\nGroup by sell_date\\n\\n\\nHowever, I dont know why my table gave out the extra count for mask, mask in the colum group_concat \\n"
                    },
                    {
                        "username": "The_Desert_Fox",
                        "content": "Group_concat(product) ------>Group_concat( distinct product)"
                    },
                    {
                        "username": "aymendj",
                        "content": "Why does is say that this query is incorrect, even though the result is almost the same, with the exception of the order of the items in the products column?\\n\\nSELECT \\n        sell_date,\\n        COUNT(DISTINCT product) AS num_sold,\\n        GROUP_CONCAT(product) products\\nFROM \\n        Activities\\nGROUP BY \\n        sell_date\\nORDER BY \\n        sell_date "
                    },
                    {
                        "username": "nayakbhishek",
                        "content": "`can anybody pls tell me whats wrong with my code it is running perfectly fine but while submitting in the test case the format of the dates get\\'s changed to yyyy-m-d due to which i am not able to submit.\\n`\\nselect sell_date ,count(*) as num_sold ,group_concat(product) as products from (\\nselect * , row_number() over(partition by product) as rn from Activities) as x where rn = 1 group by sell_date;"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "Don\\'t know how it\\'s acceptance rate is > 80%. It\\'s not easy in MS SQL Server.\\n\\nWITH cte AS (\\n    SELECT DISTINCT sell_date, product\\n    FROM activities\\n)\\nSELECT sell_date, count(1) num_sold, STRING_AGG( product, \\',\\') products\\nFROM cte\\nGROUP BY sell_date\\norder by sell_date;"
                    },
                    {
                        "username": "priyabrata_",
                        "content": "why i am getting run time error\\n MY code\\nselect sell_date , count( distinct product ) as num_sold , \\ngroup_concat ( distinct product order by product ) as products  from Activities group by sell_date order by sell_date;\\n\\nRuntime Error\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'distinct product order by product ) as products  from Activities group by sell_d\\' at line 3\\n "
                    },
                    {
                        "username": "ajay203",
                        "content": "Hi ,\n\nYour code logic is right , just try to avoid putting unnecessary spaces \" \" between the code and also try to put allias name of the column in Quotation Mark like \"num_sold\" .\nThis should solve the issue.\n\nyour code below with correction for reference.\n\n`\nselect sell_date , count(distinct product) as \"num_sold\" , \ngroup_concat(distinct product order by product) as \"products\" from Activities group by sell_date order by sell_date;\n`"
                    },
                    {
                        "username": "abdelrahmanmah",
                        "content": "select \\nr.sell_date,max(r.rn) as num_sold , group_concat(distinct r.product) as products  \\nfrom \\n    (\\n        select DISTINCT product, ROW_NUMBER() OVER(partition by sell_date order by product) as rn,\\n              Product as ss, sell_date   \\n        from \\n            Activities  \\n        group by \\n            product \\n        order by \\n            sell_date\\n    ) as r \\ngroup by \\n    r.sell_date \\norder by \\n    r.sell_date \\n\\n\\n"
                    },
                    {
                        "username": "linuxchata",
                        "content": "MS SQL SERVER\n\n```WITH [groupped] ([sell_date], [product]) AS \n(SELECT [sell_date], [product]\nFROM [Activities]\nGROUP BY [sell_date], [product])\n\nSELECT \n    [G].[sell_date],\n    COUNT([G].[product]) AS [num_sold],\n    STRING_AGG([G].[product], ',') WITHIN GROUP (ORDER BY [G].[product] ASC) AS [products]\nFROM [groupped] AS [G]\nGROUP BY [sell_date]\nORDER BY [G].[sell_date]"
                    },
                    {
                        "username": "EricaWanja",
                        "content": " `select  sell_date, count(product) as num_sold, string_Agg(product, \\',\\') as products from Activities group by sell_date\\norder by sell_date `\\n\\nWhen i execute above code it causes a repetition in the last row i.e outputs two masks and there is only one, yo can run the code what i mean, anyone who can help me figure this out"
                    }
                ]
            },
            {
                "id": 1769384,
                "content": [
                    {
                        "username": "CoolCoder99",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date;\\n\\nselect sell_date,count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date order by sell_date,products;\\n\\nWhy is the second query faster than the first one?\\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select sell_date,Count(Distinct(product)) as num_sold,\\nString_agg(product,\\',\\') as products from (\\nselect sell_date,product from activities group by sell_date,product) as temp\\ngroup by sell_date;"
                    },
                    {
                        "username": "Rosanguyen263",
                        "content": "My solution is \\nSELECT\\nsell_date,\\nCount(Distinct product) As num_sold,\\nGroup_concat(product) as Products\\nFROM Activities\\nGroup by sell_date\\n\\n\\nHowever, I dont know why my table gave out the extra count for mask, mask in the colum group_concat \\n"
                    },
                    {
                        "username": "The_Desert_Fox",
                        "content": "Group_concat(product) ------>Group_concat( distinct product)"
                    },
                    {
                        "username": "aymendj",
                        "content": "Why does is say that this query is incorrect, even though the result is almost the same, with the exception of the order of the items in the products column?\\n\\nSELECT \\n        sell_date,\\n        COUNT(DISTINCT product) AS num_sold,\\n        GROUP_CONCAT(product) products\\nFROM \\n        Activities\\nGROUP BY \\n        sell_date\\nORDER BY \\n        sell_date "
                    },
                    {
                        "username": "nayakbhishek",
                        "content": "`can anybody pls tell me whats wrong with my code it is running perfectly fine but while submitting in the test case the format of the dates get\\'s changed to yyyy-m-d due to which i am not able to submit.\\n`\\nselect sell_date ,count(*) as num_sold ,group_concat(product) as products from (\\nselect * , row_number() over(partition by product) as rn from Activities) as x where rn = 1 group by sell_date;"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "Don\\'t know how it\\'s acceptance rate is > 80%. It\\'s not easy in MS SQL Server.\\n\\nWITH cte AS (\\n    SELECT DISTINCT sell_date, product\\n    FROM activities\\n)\\nSELECT sell_date, count(1) num_sold, STRING_AGG( product, \\',\\') products\\nFROM cte\\nGROUP BY sell_date\\norder by sell_date;"
                    },
                    {
                        "username": "priyabrata_",
                        "content": "why i am getting run time error\\n MY code\\nselect sell_date , count( distinct product ) as num_sold , \\ngroup_concat ( distinct product order by product ) as products  from Activities group by sell_date order by sell_date;\\n\\nRuntime Error\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'distinct product order by product ) as products  from Activities group by sell_d\\' at line 3\\n "
                    },
                    {
                        "username": "ajay203",
                        "content": "Hi ,\n\nYour code logic is right , just try to avoid putting unnecessary spaces \" \" between the code and also try to put allias name of the column in Quotation Mark like \"num_sold\" .\nThis should solve the issue.\n\nyour code below with correction for reference.\n\n`\nselect sell_date , count(distinct product) as \"num_sold\" , \ngroup_concat(distinct product order by product) as \"products\" from Activities group by sell_date order by sell_date;\n`"
                    },
                    {
                        "username": "abdelrahmanmah",
                        "content": "select \\nr.sell_date,max(r.rn) as num_sold , group_concat(distinct r.product) as products  \\nfrom \\n    (\\n        select DISTINCT product, ROW_NUMBER() OVER(partition by sell_date order by product) as rn,\\n              Product as ss, sell_date   \\n        from \\n            Activities  \\n        group by \\n            product \\n        order by \\n            sell_date\\n    ) as r \\ngroup by \\n    r.sell_date \\norder by \\n    r.sell_date \\n\\n\\n"
                    },
                    {
                        "username": "linuxchata",
                        "content": "MS SQL SERVER\n\n```WITH [groupped] ([sell_date], [product]) AS \n(SELECT [sell_date], [product]\nFROM [Activities]\nGROUP BY [sell_date], [product])\n\nSELECT \n    [G].[sell_date],\n    COUNT([G].[product]) AS [num_sold],\n    STRING_AGG([G].[product], ',') WITHIN GROUP (ORDER BY [G].[product] ASC) AS [products]\nFROM [groupped] AS [G]\nGROUP BY [sell_date]\nORDER BY [G].[sell_date]"
                    },
                    {
                        "username": "EricaWanja",
                        "content": " `select  sell_date, count(product) as num_sold, string_Agg(product, \\',\\') as products from Activities group by sell_date\\norder by sell_date `\\n\\nWhen i execute above code it causes a repetition in the last row i.e outputs two masks and there is only one, yo can run the code what i mean, anyone who can help me figure this out"
                    }
                ]
            },
            {
                "id": 1765392,
                "content": [
                    {
                        "username": "CoolCoder99",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date;\\n\\nselect sell_date,count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date order by sell_date,products;\\n\\nWhy is the second query faster than the first one?\\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select sell_date,Count(Distinct(product)) as num_sold,\\nString_agg(product,\\',\\') as products from (\\nselect sell_date,product from activities group by sell_date,product) as temp\\ngroup by sell_date;"
                    },
                    {
                        "username": "Rosanguyen263",
                        "content": "My solution is \\nSELECT\\nsell_date,\\nCount(Distinct product) As num_sold,\\nGroup_concat(product) as Products\\nFROM Activities\\nGroup by sell_date\\n\\n\\nHowever, I dont know why my table gave out the extra count for mask, mask in the colum group_concat \\n"
                    },
                    {
                        "username": "The_Desert_Fox",
                        "content": "Group_concat(product) ------>Group_concat( distinct product)"
                    },
                    {
                        "username": "aymendj",
                        "content": "Why does is say that this query is incorrect, even though the result is almost the same, with the exception of the order of the items in the products column?\\n\\nSELECT \\n        sell_date,\\n        COUNT(DISTINCT product) AS num_sold,\\n        GROUP_CONCAT(product) products\\nFROM \\n        Activities\\nGROUP BY \\n        sell_date\\nORDER BY \\n        sell_date "
                    },
                    {
                        "username": "nayakbhishek",
                        "content": "`can anybody pls tell me whats wrong with my code it is running perfectly fine but while submitting in the test case the format of the dates get\\'s changed to yyyy-m-d due to which i am not able to submit.\\n`\\nselect sell_date ,count(*) as num_sold ,group_concat(product) as products from (\\nselect * , row_number() over(partition by product) as rn from Activities) as x where rn = 1 group by sell_date;"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "Don\\'t know how it\\'s acceptance rate is > 80%. It\\'s not easy in MS SQL Server.\\n\\nWITH cte AS (\\n    SELECT DISTINCT sell_date, product\\n    FROM activities\\n)\\nSELECT sell_date, count(1) num_sold, STRING_AGG( product, \\',\\') products\\nFROM cte\\nGROUP BY sell_date\\norder by sell_date;"
                    },
                    {
                        "username": "priyabrata_",
                        "content": "why i am getting run time error\\n MY code\\nselect sell_date , count( distinct product ) as num_sold , \\ngroup_concat ( distinct product order by product ) as products  from Activities group by sell_date order by sell_date;\\n\\nRuntime Error\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'distinct product order by product ) as products  from Activities group by sell_d\\' at line 3\\n "
                    },
                    {
                        "username": "ajay203",
                        "content": "Hi ,\n\nYour code logic is right , just try to avoid putting unnecessary spaces \" \" between the code and also try to put allias name of the column in Quotation Mark like \"num_sold\" .\nThis should solve the issue.\n\nyour code below with correction for reference.\n\n`\nselect sell_date , count(distinct product) as \"num_sold\" , \ngroup_concat(distinct product order by product) as \"products\" from Activities group by sell_date order by sell_date;\n`"
                    },
                    {
                        "username": "abdelrahmanmah",
                        "content": "select \\nr.sell_date,max(r.rn) as num_sold , group_concat(distinct r.product) as products  \\nfrom \\n    (\\n        select DISTINCT product, ROW_NUMBER() OVER(partition by sell_date order by product) as rn,\\n              Product as ss, sell_date   \\n        from \\n            Activities  \\n        group by \\n            product \\n        order by \\n            sell_date\\n    ) as r \\ngroup by \\n    r.sell_date \\norder by \\n    r.sell_date \\n\\n\\n"
                    },
                    {
                        "username": "linuxchata",
                        "content": "MS SQL SERVER\n\n```WITH [groupped] ([sell_date], [product]) AS \n(SELECT [sell_date], [product]\nFROM [Activities]\nGROUP BY [sell_date], [product])\n\nSELECT \n    [G].[sell_date],\n    COUNT([G].[product]) AS [num_sold],\n    STRING_AGG([G].[product], ',') WITHIN GROUP (ORDER BY [G].[product] ASC) AS [products]\nFROM [groupped] AS [G]\nGROUP BY [sell_date]\nORDER BY [G].[sell_date]"
                    },
                    {
                        "username": "EricaWanja",
                        "content": " `select  sell_date, count(product) as num_sold, string_Agg(product, \\',\\') as products from Activities group by sell_date\\norder by sell_date `\\n\\nWhen i execute above code it causes a repetition in the last row i.e outputs two masks and there is only one, yo can run the code what i mean, anyone who can help me figure this out"
                    }
                ]
            },
            {
                "id": 1763246,
                "content": [
                    {
                        "username": "CoolCoder99",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date;\\n\\nselect sell_date,count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date order by sell_date,products;\\n\\nWhy is the second query faster than the first one?\\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select sell_date,Count(Distinct(product)) as num_sold,\\nString_agg(product,\\',\\') as products from (\\nselect sell_date,product from activities group by sell_date,product) as temp\\ngroup by sell_date;"
                    },
                    {
                        "username": "Rosanguyen263",
                        "content": "My solution is \\nSELECT\\nsell_date,\\nCount(Distinct product) As num_sold,\\nGroup_concat(product) as Products\\nFROM Activities\\nGroup by sell_date\\n\\n\\nHowever, I dont know why my table gave out the extra count for mask, mask in the colum group_concat \\n"
                    },
                    {
                        "username": "The_Desert_Fox",
                        "content": "Group_concat(product) ------>Group_concat( distinct product)"
                    },
                    {
                        "username": "aymendj",
                        "content": "Why does is say that this query is incorrect, even though the result is almost the same, with the exception of the order of the items in the products column?\\n\\nSELECT \\n        sell_date,\\n        COUNT(DISTINCT product) AS num_sold,\\n        GROUP_CONCAT(product) products\\nFROM \\n        Activities\\nGROUP BY \\n        sell_date\\nORDER BY \\n        sell_date "
                    },
                    {
                        "username": "nayakbhishek",
                        "content": "`can anybody pls tell me whats wrong with my code it is running perfectly fine but while submitting in the test case the format of the dates get\\'s changed to yyyy-m-d due to which i am not able to submit.\\n`\\nselect sell_date ,count(*) as num_sold ,group_concat(product) as products from (\\nselect * , row_number() over(partition by product) as rn from Activities) as x where rn = 1 group by sell_date;"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "Don\\'t know how it\\'s acceptance rate is > 80%. It\\'s not easy in MS SQL Server.\\n\\nWITH cte AS (\\n    SELECT DISTINCT sell_date, product\\n    FROM activities\\n)\\nSELECT sell_date, count(1) num_sold, STRING_AGG( product, \\',\\') products\\nFROM cte\\nGROUP BY sell_date\\norder by sell_date;"
                    },
                    {
                        "username": "priyabrata_",
                        "content": "why i am getting run time error\\n MY code\\nselect sell_date , count( distinct product ) as num_sold , \\ngroup_concat ( distinct product order by product ) as products  from Activities group by sell_date order by sell_date;\\n\\nRuntime Error\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'distinct product order by product ) as products  from Activities group by sell_d\\' at line 3\\n "
                    },
                    {
                        "username": "ajay203",
                        "content": "Hi ,\n\nYour code logic is right , just try to avoid putting unnecessary spaces \" \" between the code and also try to put allias name of the column in Quotation Mark like \"num_sold\" .\nThis should solve the issue.\n\nyour code below with correction for reference.\n\n`\nselect sell_date , count(distinct product) as \"num_sold\" , \ngroup_concat(distinct product order by product) as \"products\" from Activities group by sell_date order by sell_date;\n`"
                    },
                    {
                        "username": "abdelrahmanmah",
                        "content": "select \\nr.sell_date,max(r.rn) as num_sold , group_concat(distinct r.product) as products  \\nfrom \\n    (\\n        select DISTINCT product, ROW_NUMBER() OVER(partition by sell_date order by product) as rn,\\n              Product as ss, sell_date   \\n        from \\n            Activities  \\n        group by \\n            product \\n        order by \\n            sell_date\\n    ) as r \\ngroup by \\n    r.sell_date \\norder by \\n    r.sell_date \\n\\n\\n"
                    },
                    {
                        "username": "linuxchata",
                        "content": "MS SQL SERVER\n\n```WITH [groupped] ([sell_date], [product]) AS \n(SELECT [sell_date], [product]\nFROM [Activities]\nGROUP BY [sell_date], [product])\n\nSELECT \n    [G].[sell_date],\n    COUNT([G].[product]) AS [num_sold],\n    STRING_AGG([G].[product], ',') WITHIN GROUP (ORDER BY [G].[product] ASC) AS [products]\nFROM [groupped] AS [G]\nGROUP BY [sell_date]\nORDER BY [G].[sell_date]"
                    },
                    {
                        "username": "EricaWanja",
                        "content": " `select  sell_date, count(product) as num_sold, string_Agg(product, \\',\\') as products from Activities group by sell_date\\norder by sell_date `\\n\\nWhen i execute above code it causes a repetition in the last row i.e outputs two masks and there is only one, yo can run the code what i mean, anyone who can help me figure this out"
                    }
                ]
            },
            {
                "id": 1762076,
                "content": [
                    {
                        "username": "CoolCoder99",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date;\\n\\nselect sell_date,count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date order by sell_date,products;\\n\\nWhy is the second query faster than the first one?\\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select sell_date,Count(Distinct(product)) as num_sold,\\nString_agg(product,\\',\\') as products from (\\nselect sell_date,product from activities group by sell_date,product) as temp\\ngroup by sell_date;"
                    },
                    {
                        "username": "Rosanguyen263",
                        "content": "My solution is \\nSELECT\\nsell_date,\\nCount(Distinct product) As num_sold,\\nGroup_concat(product) as Products\\nFROM Activities\\nGroup by sell_date\\n\\n\\nHowever, I dont know why my table gave out the extra count for mask, mask in the colum group_concat \\n"
                    },
                    {
                        "username": "The_Desert_Fox",
                        "content": "Group_concat(product) ------>Group_concat( distinct product)"
                    },
                    {
                        "username": "aymendj",
                        "content": "Why does is say that this query is incorrect, even though the result is almost the same, with the exception of the order of the items in the products column?\\n\\nSELECT \\n        sell_date,\\n        COUNT(DISTINCT product) AS num_sold,\\n        GROUP_CONCAT(product) products\\nFROM \\n        Activities\\nGROUP BY \\n        sell_date\\nORDER BY \\n        sell_date "
                    },
                    {
                        "username": "nayakbhishek",
                        "content": "`can anybody pls tell me whats wrong with my code it is running perfectly fine but while submitting in the test case the format of the dates get\\'s changed to yyyy-m-d due to which i am not able to submit.\\n`\\nselect sell_date ,count(*) as num_sold ,group_concat(product) as products from (\\nselect * , row_number() over(partition by product) as rn from Activities) as x where rn = 1 group by sell_date;"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "Don\\'t know how it\\'s acceptance rate is > 80%. It\\'s not easy in MS SQL Server.\\n\\nWITH cte AS (\\n    SELECT DISTINCT sell_date, product\\n    FROM activities\\n)\\nSELECT sell_date, count(1) num_sold, STRING_AGG( product, \\',\\') products\\nFROM cte\\nGROUP BY sell_date\\norder by sell_date;"
                    },
                    {
                        "username": "priyabrata_",
                        "content": "why i am getting run time error\\n MY code\\nselect sell_date , count( distinct product ) as num_sold , \\ngroup_concat ( distinct product order by product ) as products  from Activities group by sell_date order by sell_date;\\n\\nRuntime Error\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'distinct product order by product ) as products  from Activities group by sell_d\\' at line 3\\n "
                    },
                    {
                        "username": "ajay203",
                        "content": "Hi ,\n\nYour code logic is right , just try to avoid putting unnecessary spaces \" \" between the code and also try to put allias name of the column in Quotation Mark like \"num_sold\" .\nThis should solve the issue.\n\nyour code below with correction for reference.\n\n`\nselect sell_date , count(distinct product) as \"num_sold\" , \ngroup_concat(distinct product order by product) as \"products\" from Activities group by sell_date order by sell_date;\n`"
                    },
                    {
                        "username": "abdelrahmanmah",
                        "content": "select \\nr.sell_date,max(r.rn) as num_sold , group_concat(distinct r.product) as products  \\nfrom \\n    (\\n        select DISTINCT product, ROW_NUMBER() OVER(partition by sell_date order by product) as rn,\\n              Product as ss, sell_date   \\n        from \\n            Activities  \\n        group by \\n            product \\n        order by \\n            sell_date\\n    ) as r \\ngroup by \\n    r.sell_date \\norder by \\n    r.sell_date \\n\\n\\n"
                    },
                    {
                        "username": "linuxchata",
                        "content": "MS SQL SERVER\n\n```WITH [groupped] ([sell_date], [product]) AS \n(SELECT [sell_date], [product]\nFROM [Activities]\nGROUP BY [sell_date], [product])\n\nSELECT \n    [G].[sell_date],\n    COUNT([G].[product]) AS [num_sold],\n    STRING_AGG([G].[product], ',') WITHIN GROUP (ORDER BY [G].[product] ASC) AS [products]\nFROM [groupped] AS [G]\nGROUP BY [sell_date]\nORDER BY [G].[sell_date]"
                    },
                    {
                        "username": "EricaWanja",
                        "content": " `select  sell_date, count(product) as num_sold, string_Agg(product, \\',\\') as products from Activities group by sell_date\\norder by sell_date `\\n\\nWhen i execute above code it causes a repetition in the last row i.e outputs two masks and there is only one, yo can run the code what i mean, anyone who can help me figure this out"
                    }
                ]
            },
            {
                "id": 1758037,
                "content": [
                    {
                        "username": "CoolCoder99",
                        "content": "select sell_date,count(distinct product) as num_sold,group_concat(distinct product order by product) as products from Activities group by sell_date;\\n\\nselect sell_date,count(distinct product) as num_sold,group_concat(distinct product) as products from Activities group by sell_date order by sell_date,products;\\n\\nWhy is the second query faster than the first one?\\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select sell_date,Count(Distinct(product)) as num_sold,\\nString_agg(product,\\',\\') as products from (\\nselect sell_date,product from activities group by sell_date,product) as temp\\ngroup by sell_date;"
                    },
                    {
                        "username": "Rosanguyen263",
                        "content": "My solution is \\nSELECT\\nsell_date,\\nCount(Distinct product) As num_sold,\\nGroup_concat(product) as Products\\nFROM Activities\\nGroup by sell_date\\n\\n\\nHowever, I dont know why my table gave out the extra count for mask, mask in the colum group_concat \\n"
                    },
                    {
                        "username": "The_Desert_Fox",
                        "content": "Group_concat(product) ------>Group_concat( distinct product)"
                    },
                    {
                        "username": "aymendj",
                        "content": "Why does is say that this query is incorrect, even though the result is almost the same, with the exception of the order of the items in the products column?\\n\\nSELECT \\n        sell_date,\\n        COUNT(DISTINCT product) AS num_sold,\\n        GROUP_CONCAT(product) products\\nFROM \\n        Activities\\nGROUP BY \\n        sell_date\\nORDER BY \\n        sell_date "
                    },
                    {
                        "username": "nayakbhishek",
                        "content": "`can anybody pls tell me whats wrong with my code it is running perfectly fine but while submitting in the test case the format of the dates get\\'s changed to yyyy-m-d due to which i am not able to submit.\\n`\\nselect sell_date ,count(*) as num_sold ,group_concat(product) as products from (\\nselect * , row_number() over(partition by product) as rn from Activities) as x where rn = 1 group by sell_date;"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "Don\\'t know how it\\'s acceptance rate is > 80%. It\\'s not easy in MS SQL Server.\\n\\nWITH cte AS (\\n    SELECT DISTINCT sell_date, product\\n    FROM activities\\n)\\nSELECT sell_date, count(1) num_sold, STRING_AGG( product, \\',\\') products\\nFROM cte\\nGROUP BY sell_date\\norder by sell_date;"
                    },
                    {
                        "username": "priyabrata_",
                        "content": "why i am getting run time error\\n MY code\\nselect sell_date , count( distinct product ) as num_sold , \\ngroup_concat ( distinct product order by product ) as products  from Activities group by sell_date order by sell_date;\\n\\nRuntime Error\\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'distinct product order by product ) as products  from Activities group by sell_d\\' at line 3\\n "
                    },
                    {
                        "username": "ajay203",
                        "content": "Hi ,\n\nYour code logic is right , just try to avoid putting unnecessary spaces \" \" between the code and also try to put allias name of the column in Quotation Mark like \"num_sold\" .\nThis should solve the issue.\n\nyour code below with correction for reference.\n\n`\nselect sell_date , count(distinct product) as \"num_sold\" , \ngroup_concat(distinct product order by product) as \"products\" from Activities group by sell_date order by sell_date;\n`"
                    },
                    {
                        "username": "abdelrahmanmah",
                        "content": "select \\nr.sell_date,max(r.rn) as num_sold , group_concat(distinct r.product) as products  \\nfrom \\n    (\\n        select DISTINCT product, ROW_NUMBER() OVER(partition by sell_date order by product) as rn,\\n              Product as ss, sell_date   \\n        from \\n            Activities  \\n        group by \\n            product \\n        order by \\n            sell_date\\n    ) as r \\ngroup by \\n    r.sell_date \\norder by \\n    r.sell_date \\n\\n\\n"
                    },
                    {
                        "username": "linuxchata",
                        "content": "MS SQL SERVER\n\n```WITH [groupped] ([sell_date], [product]) AS \n(SELECT [sell_date], [product]\nFROM [Activities]\nGROUP BY [sell_date], [product])\n\nSELECT \n    [G].[sell_date],\n    COUNT([G].[product]) AS [num_sold],\n    STRING_AGG([G].[product], ',') WITHIN GROUP (ORDER BY [G].[product] ASC) AS [products]\nFROM [groupped] AS [G]\nGROUP BY [sell_date]\nORDER BY [G].[sell_date]"
                    },
                    {
                        "username": "EricaWanja",
                        "content": " `select  sell_date, count(product) as num_sold, string_Agg(product, \\',\\') as products from Activities group by sell_date\\norder by sell_date `\\n\\nWhen i execute above code it causes a repetition in the last row i.e outputs two masks and there is only one, yo can run the code what i mean, anyone who can help me figure this out"
                    }
                ]
            }
        ]
    },
    {
        "title": "Clone Binary Tree With Random Pointer",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1833536,
                "content": [
                    {
                        "username": "IliaOzhmegov",
                        "content": "I spend too much on this due to not being careful enough, hopefully my hint save somebody time: \\nMake sure that you return a `NodeCopy` instance and not just a `Node` instance.\\n\\nI solved it in Python and a `NodeCopy` class defined somewhere outside, but they show the definition only for `Node` class, which were slightly confusing. So I was creating the instances of the `Node` class instead of `NodeCopy`, it could\\'t understand what was the problem which is funny because I thought that there is something wrong with my deep copy approach, hehe."
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style=\\'color:green\\'>Hint 1</span>\\n\\nKeep a hash map of cloned nodes\\n\\n# <span style=\\'color:green\\'>Hint 2</span>\\nUse a function to create a cloned node if it\\'s not in the hash map or return it if it is"
                    },
                    {
                        "username": "TangHao1987",
                        "content": "The most important condition is missing in the description:\\nThe Node and NodeCopy class is hashable. "
                    },
                    {
                        "username": "samdcodes",
                        "content": "shouldn\\'t really matter at least in the java case, memory signatures is enough in this problem no?"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Frankly I despise this question. The whole point of a graph structure like a tree is that the nodes and their pointers define the structure. There IS no natural implied index. We arent supposed to think of the nodes as being stored in an array that can be accessed via index. Now you could make a node class where the nodes have unique IDs, but this would be a stored property of the node. I guess that would make this problem too simple. Instead we have to discern that there IS an implied sort of indexing here and I guess map that? This seems so unusual, and not in good or clever way, but obtuse and obnoxious. \n\nFurthermore, I dont know what is up with the implementation of the checker, but this questions seems to have weirdly fragile results. I CANNOT get the debugger to behave properly. It just exits early, even when stepping through line by line and will terminate at random lines, include some that are VERY basic operations. This whole thing needs to be reevaluated. "
                    },
                    {
                        "username": "XuLuYue",
                        "content": "Two DFS methods solved the problem."
                    }
                ]
            },
            {
                "id": 1804711,
                "content": [
                    {
                        "username": "IliaOzhmegov",
                        "content": "I spend too much on this due to not being careful enough, hopefully my hint save somebody time: \\nMake sure that you return a `NodeCopy` instance and not just a `Node` instance.\\n\\nI solved it in Python and a `NodeCopy` class defined somewhere outside, but they show the definition only for `Node` class, which were slightly confusing. So I was creating the instances of the `Node` class instead of `NodeCopy`, it could\\'t understand what was the problem which is funny because I thought that there is something wrong with my deep copy approach, hehe."
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style=\\'color:green\\'>Hint 1</span>\\n\\nKeep a hash map of cloned nodes\\n\\n# <span style=\\'color:green\\'>Hint 2</span>\\nUse a function to create a cloned node if it\\'s not in the hash map or return it if it is"
                    },
                    {
                        "username": "TangHao1987",
                        "content": "The most important condition is missing in the description:\\nThe Node and NodeCopy class is hashable. "
                    },
                    {
                        "username": "samdcodes",
                        "content": "shouldn\\'t really matter at least in the java case, memory signatures is enough in this problem no?"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Frankly I despise this question. The whole point of a graph structure like a tree is that the nodes and their pointers define the structure. There IS no natural implied index. We arent supposed to think of the nodes as being stored in an array that can be accessed via index. Now you could make a node class where the nodes have unique IDs, but this would be a stored property of the node. I guess that would make this problem too simple. Instead we have to discern that there IS an implied sort of indexing here and I guess map that? This seems so unusual, and not in good or clever way, but obtuse and obnoxious. \n\nFurthermore, I dont know what is up with the implementation of the checker, but this questions seems to have weirdly fragile results. I CANNOT get the debugger to behave properly. It just exits early, even when stepping through line by line and will terminate at random lines, include some that are VERY basic operations. This whole thing needs to be reevaluated. "
                    },
                    {
                        "username": "XuLuYue",
                        "content": "Two DFS methods solved the problem."
                    }
                ]
            },
            {
                "id": 1834017,
                "content": [
                    {
                        "username": "IliaOzhmegov",
                        "content": "I spend too much on this due to not being careful enough, hopefully my hint save somebody time: \\nMake sure that you return a `NodeCopy` instance and not just a `Node` instance.\\n\\nI solved it in Python and a `NodeCopy` class defined somewhere outside, but they show the definition only for `Node` class, which were slightly confusing. So I was creating the instances of the `Node` class instead of `NodeCopy`, it could\\'t understand what was the problem which is funny because I thought that there is something wrong with my deep copy approach, hehe."
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style=\\'color:green\\'>Hint 1</span>\\n\\nKeep a hash map of cloned nodes\\n\\n# <span style=\\'color:green\\'>Hint 2</span>\\nUse a function to create a cloned node if it\\'s not in the hash map or return it if it is"
                    },
                    {
                        "username": "TangHao1987",
                        "content": "The most important condition is missing in the description:\\nThe Node and NodeCopy class is hashable. "
                    },
                    {
                        "username": "samdcodes",
                        "content": "shouldn\\'t really matter at least in the java case, memory signatures is enough in this problem no?"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Frankly I despise this question. The whole point of a graph structure like a tree is that the nodes and their pointers define the structure. There IS no natural implied index. We arent supposed to think of the nodes as being stored in an array that can be accessed via index. Now you could make a node class where the nodes have unique IDs, but this would be a stored property of the node. I guess that would make this problem too simple. Instead we have to discern that there IS an implied sort of indexing here and I guess map that? This seems so unusual, and not in good or clever way, but obtuse and obnoxious. \n\nFurthermore, I dont know what is up with the implementation of the checker, but this questions seems to have weirdly fragile results. I CANNOT get the debugger to behave properly. It just exits early, even when stepping through line by line and will terminate at random lines, include some that are VERY basic operations. This whole thing needs to be reevaluated. "
                    },
                    {
                        "username": "XuLuYue",
                        "content": "Two DFS methods solved the problem."
                    }
                ]
            },
            {
                "id": 1833057,
                "content": [
                    {
                        "username": "IliaOzhmegov",
                        "content": "I spend too much on this due to not being careful enough, hopefully my hint save somebody time: \\nMake sure that you return a `NodeCopy` instance and not just a `Node` instance.\\n\\nI solved it in Python and a `NodeCopy` class defined somewhere outside, but they show the definition only for `Node` class, which were slightly confusing. So I was creating the instances of the `Node` class instead of `NodeCopy`, it could\\'t understand what was the problem which is funny because I thought that there is something wrong with my deep copy approach, hehe."
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style=\\'color:green\\'>Hint 1</span>\\n\\nKeep a hash map of cloned nodes\\n\\n# <span style=\\'color:green\\'>Hint 2</span>\\nUse a function to create a cloned node if it\\'s not in the hash map or return it if it is"
                    },
                    {
                        "username": "TangHao1987",
                        "content": "The most important condition is missing in the description:\\nThe Node and NodeCopy class is hashable. "
                    },
                    {
                        "username": "samdcodes",
                        "content": "shouldn\\'t really matter at least in the java case, memory signatures is enough in this problem no?"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Frankly I despise this question. The whole point of a graph structure like a tree is that the nodes and their pointers define the structure. There IS no natural implied index. We arent supposed to think of the nodes as being stored in an array that can be accessed via index. Now you could make a node class where the nodes have unique IDs, but this would be a stored property of the node. I guess that would make this problem too simple. Instead we have to discern that there IS an implied sort of indexing here and I guess map that? This seems so unusual, and not in good or clever way, but obtuse and obnoxious. \n\nFurthermore, I dont know what is up with the implementation of the checker, but this questions seems to have weirdly fragile results. I CANNOT get the debugger to behave properly. It just exits early, even when stepping through line by line and will terminate at random lines, include some that are VERY basic operations. This whole thing needs to be reevaluated. "
                    },
                    {
                        "username": "XuLuYue",
                        "content": "Two DFS methods solved the problem."
                    }
                ]
            },
            {
                "id": 1835362,
                "content": [
                    {
                        "username": "IliaOzhmegov",
                        "content": "I spend too much on this due to not being careful enough, hopefully my hint save somebody time: \\nMake sure that you return a `NodeCopy` instance and not just a `Node` instance.\\n\\nI solved it in Python and a `NodeCopy` class defined somewhere outside, but they show the definition only for `Node` class, which were slightly confusing. So I was creating the instances of the `Node` class instead of `NodeCopy`, it could\\'t understand what was the problem which is funny because I thought that there is something wrong with my deep copy approach, hehe."
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style=\\'color:green\\'>Hint 1</span>\\n\\nKeep a hash map of cloned nodes\\n\\n# <span style=\\'color:green\\'>Hint 2</span>\\nUse a function to create a cloned node if it\\'s not in the hash map or return it if it is"
                    },
                    {
                        "username": "TangHao1987",
                        "content": "The most important condition is missing in the description:\\nThe Node and NodeCopy class is hashable. "
                    },
                    {
                        "username": "samdcodes",
                        "content": "shouldn\\'t really matter at least in the java case, memory signatures is enough in this problem no?"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Frankly I despise this question. The whole point of a graph structure like a tree is that the nodes and their pointers define the structure. There IS no natural implied index. We arent supposed to think of the nodes as being stored in an array that can be accessed via index. Now you could make a node class where the nodes have unique IDs, but this would be a stored property of the node. I guess that would make this problem too simple. Instead we have to discern that there IS an implied sort of indexing here and I guess map that? This seems so unusual, and not in good or clever way, but obtuse and obnoxious. \n\nFurthermore, I dont know what is up with the implementation of the checker, but this questions seems to have weirdly fragile results. I CANNOT get the debugger to behave properly. It just exits early, even when stepping through line by line and will terminate at random lines, include some that are VERY basic operations. This whole thing needs to be reevaluated. "
                    },
                    {
                        "username": "XuLuYue",
                        "content": "Two DFS methods solved the problem."
                    }
                ]
            }
        ]
    }
]