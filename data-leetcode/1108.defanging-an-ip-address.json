[
    {
        "title": "Defanging an IP Address",
        "question_content": "Given a valid (IPv4) IP address, return a defanged version of that IP address.\r\n\r\nA defanged&nbsp;IP address&nbsp;replaces every period \".\" with \"[.]\".\r\n\r\n&nbsp;\r\nExample 1:\r\nInput: address = \"1.1.1.1\"\r\nOutput: \"1[.]1[.]1[.]1\"\r\nExample 2:\r\nInput: address = \"255.100.50.0\"\r\nOutput: \"255[.]100[.]50[.]0\"\r\n\r\n&nbsp;\r\nConstraints:\r\n\r\n\r\n\tThe given address is a valid IPv4 address.",
        "solutions": [
            {
                "id": 328895,
                "title": "java-python-3-3-one-liners-one-w-o-lib-w-analysis",
                "content": "```java\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\", \"[.]\");\\n    }\\n    public String defangIPaddr(String address) {\\n        return String.join(\"[.]\", address.split(\"\\\\\\\\.\"));\\n    }\\n    public String defangIPaddr(String address) {\\n        return address.replaceAll(\"\\\\\\\\.\", \"[.]\");\\n    }\\n    public String defangIPaddr(String address) {\\n        StringBuilder sb = new StringBuilder();\\n        for (char c : address.toCharArray()) {\\n            sb.append(c == \\'.\\' ? \"[.]\" : c);\\n        }\\n        return sb.toString();\\n    }\\n```\\n\\n```python\\n    def defangIPaddr(self, address: str) -> str:\\n        return address.replace(\\'.\\', \\'[.]\\')\\n    def defangIPaddr(self, address: str) -> str:\\n        return \\'[.]\\'.join(address.split(\\'.\\'))\\n    def defangIPaddr(self, address: str) -> str:\\n        return re.sub(\\'\\\\.\\', \\'[.]\\', address)\\n    def defangIPaddr(self, address: str) -> str:\\n        return \\'\\'.join(\\'[.]\\' if c == \\'.\\' else c for c in address)\\n```\\n\\n**Analysis:**\\n\\nAll characters are visited at most twice, therefore, \\n\\nTime & space: `O(n)`, where `n = address.length()`.",
                "solutionTags": [
                    "Java",
                    "Python3"
                ],
                "code": "```java\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\", \"[.]\");\\n    }\\n    public String defangIPaddr(String address) {\\n        return String.join(\"[.]\", address.split(\"\\\\\\\\.\"));\\n    }\\n    public String defangIPaddr(String address) {\\n        return address.replaceAll(\"\\\\\\\\.\", \"[.]\");\\n    }\\n    public String defangIPaddr(String address) {\\n        StringBuilder sb = new StringBuilder();\\n        for (char c : address.toCharArray()) {\\n            sb.append(c == \\'.\\' ? \"[.]\" : c);\\n        }\\n        return sb.toString();\\n    }\\n```\n```python\\n    def defangIPaddr(self, address: str) -> str:\\n        return address.replace(\\'.\\', \\'[.]\\')\\n    def defangIPaddr(self, address: str) -> str:\\n        return \\'[.]\\'.join(address.split(\\'.\\'))\\n    def defangIPaddr(self, address: str) -> str:\\n        return re.sub(\\'\\\\.\\', \\'[.]\\', address)\\n    def defangIPaddr(self, address: str) -> str:\\n        return \\'\\'.join(\\'[.]\\' if c == \\'.\\' else c for c in address)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 328855,
                "title": "c-1-liner-regex-replace",
                "content": "```\\nstring defangIPaddr(string address) {\\n  return regex_replace(address, regex(\"[.]\"), \"[.]\");\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nstring defangIPaddr(string address) {\\n  return regex_replace(address, regex(\"[.]\"), \"[.]\");\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 351240,
                "title": "c-100-faster-solution-with-0ms-runtime",
                "content": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string res;\\n        for(auto c: address) {\\n            if(c==\\'.\\') {\\n                res+=\"[.]\";\\n            } else res+=c;\\n        }\\n        return res;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string res;\\n        for(auto c: address) {\\n            if(c==\\'.\\') {\\n                res+=\"[.]\";\\n            } else res+=c;\\n        }\\n        return res;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 332184,
                "title": "java-solution",
                "content": "Here is my solution. Runs in O(n) runtime.\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder str = new StringBuilder();\\n        for (int i = 0; i < address.length(); i++){\\n            if (address.charAt(i) == \\'.\\'){\\n                str.append(\"[.]\");\\n            } else {\\n                str.append(address.charAt(i));\\n            }\\n        }\\n        return str.toString();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder str = new StringBuilder();\\n        for (int i = 0; i < address.length(); i++){\\n            if (address.charAt(i) == \\'.\\'){\\n                str.append(\"[.]\");\\n            } else {\\n                str.append(address.charAt(i));\\n            }\\n        }\\n        return str.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 570466,
                "title": "python-3-solutions",
                "content": "**First Solution**\\n\\nTime: O(N)\\nSpace: O(1)\\n\\nUses Python\\'s built-in string replace method\\n\\n``` \\nclass Solution:\\n\\tdef defangIPaddr(self, address: str) -> str:\\n\\t\\treturn address.replace(\\'.\\', \\'[.]\\')\\n```\\n\\n**Second Solution**\\n\\nTime: O(N)\\nSpace: O(1)\\n\\nConvert the ip address into a list of the numbers using the split method. Add the \"[.]\" chars between the numbers using the join method.\\n\\n```\\nclass Solution:\\n\\tdef defangIPaddr(self, address: str) -> str:\\n\\t\\treturn \"[.]\".join(address.split(\".\"))\\n```\\n\\n**Third Solution**\\n\\nTime: O(N)\\nSpace: O(N)\\n\\nCreate an empty list. Iterate through the characters in the address, numbers get appended to the list while periods signal that \"[.]\" chars must be appended. This method had the best speed results out of all others.\\n\\n```\\nclass Solution:\\n\\tdef defangIPaddr(self, address: str) -> str:\\n\\t\\tans = []\\n\\t\\tfor ch in address:\\n\\t\\t\\tif ch.isdigit():\\n\\t\\t\\t\\tans.append(ch)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tans.append(\"[.]\")\\n\\n\\t\\treturn \"\".join(ans)\\n```\\n\\t\\t\\t",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "``` \\nclass Solution:\\n\\tdef defangIPaddr(self, address: str) -> str:\\n\\t\\treturn address.replace(\\'.\\', \\'[.]\\')\\n```\n```\\nclass Solution:\\n\\tdef defangIPaddr(self, address: str) -> str:\\n\\t\\treturn \"[.]\".join(address.split(\".\"))\\n```\n```\\nclass Solution:\\n\\tdef defangIPaddr(self, address: str) -> str:\\n\\t\\tans = []\\n\\t\\tfor ch in address:\\n\\t\\t\\tif ch.isdigit():\\n\\t\\t\\t\\tans.append(ch)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tans.append(\"[.]\")\\n\\n\\t\\treturn \"\".join(ans)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 340369,
                "title": "python-one-line",
                "content": "Using split and join functions\\n```\\n    def defangIPaddr(self, address: str) -> str:\\n        return \\'[.]\\'.join(address.split(\\'.\\'))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n    def defangIPaddr(self, address: str) -> str:\\n        return \\'[.]\\'.join(address.split(\\'.\\'))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 428284,
                "title": "javascript-w-o-cheating-o-n-time-o-n-space",
                "content": "Yeah, your one-liner set operations are cute, but clearly defeat the purpose of the exercise, which is having you understand the underlying, abstracted algorithms and what their complexity is.\\n\\n```\\n/**\\n * @param {string} address\\n * @return {string}\\n */\\nvar defangIPaddr = function(address) {\\n    var result=\"\";\\n    \\n    for(var i=0;i<address.length;i++) {\\n        if(address[i] === \".\")\\n            result += \"[.]\";\\n        else\\n            result += address[i];\\n    }\\n    \\n    return result;    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} address\\n * @return {string}\\n */\\nvar defangIPaddr = function(address) {\\n    var result=\"\";\\n    \\n    for(var i=0;i<address.length;i++) {\\n        if(address[i] === \".\")\\n            result += \"[.]\";\\n        else\\n            result += address[i];\\n    }\\n    \\n    return result;    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3366971,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n- Just iterate through string and copy every character same into `ans` and replace `\\'.\\'` to `\\'[.]\\'`.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n`Upvote ! It just takes a click :)`\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string ans;\\n        for(int i=0;i<address.size();i++){\\n            if(address[i] == \\'.\\'){\\n                ans+=\"[.]\";\\n            }\\n            else{\\n                ans+=address[i];\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n![Upvote.jpeg](https://assets.leetcode.com/users/images/cc50bb3d-5e68-4825-9a63-30100c047ab9_1680369640.3874342.jpeg)",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string ans;\\n        for(int i=0;i<address.size();i++){\\n            if(address[i] == \\'.\\'){\\n                ans+=\"[.]\";\\n            }\\n            else{\\n                ans+=address[i];\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 840879,
                "title": "replace-insert-simple-100-00",
                "content": "**replace**\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string str=\"[.]\";\\n        for(int i=0;i<address.length();i++){\\n            if(address[i]==\\'.\\'){\\n                address.replace(i,1,str);\\n                i+=2;\\n            }\\n        }\\n        return address;\\n    }\\n};\\n```\\ninsert \\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        for(int i=0;i<address.length();i++)\\n        {\\n            if(address[i]==\\'.\\')\\n            {\\n                address.insert(i,1,\\'[\\');\\n                address.insert(i+2,1,\\']\\');\\n                i+=2;\\n            }\\n        }\\n        return address;\\n    }\\n};\\n```\\nsimple \\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string m = \"[.]\";\\n        string sol = \"\";\\n        for(int i=0;i<address.length();i++){\\n            if(address[i]==\\'.\\'){\\n                sol+=m;\\n            }else{\\n                sol+=address[i];\\n            }\\n        }\\n        return sol;\\n    }\\n};\\n```\\n**Feel free to ask any question in the comment section.**\\nI hope that you\\'ve found the solution useful.\\nIn that case, **please do upvote and encourage me** to on my quest to document all leetcode problems\\uD83D\\uDE03\\nHappy Coding :)\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string str=\"[.]\";\\n        for(int i=0;i<address.length();i++){\\n            if(address[i]==\\'.\\'){\\n                address.replace(i,1,str);\\n                i+=2;\\n            }\\n        }\\n        return address;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        for(int i=0;i<address.length();i++)\\n        {\\n            if(address[i]==\\'.\\')\\n            {\\n                address.insert(i,1,\\'[\\');\\n                address.insert(i+2,1,\\']\\');\\n                i+=2;\\n            }\\n        }\\n        return address;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string m = \"[.]\";\\n        string sol = \"\";\\n        for(int i=0;i<address.length();i++){\\n            if(address[i]==\\'.\\'){\\n                sol+=m;\\n            }else{\\n                sol+=address[i];\\n            }\\n        }\\n        return sol;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 442529,
                "title": "c-c-java-python-c-php-ruby-js-ts-go-rust-swift-regex-and-replace",
                "content": "### C using a for loop:\\n\\n```\\n#include <stdio.h>\\n#include <stdlib.h>\\n\\nstatic const char *defangIPaddr(\\n    const char *address\\n) {\\n    char *ipv4_memory = calloc(1, sizeof(\"###[.]###[.]###[.]###\"));\\n    char *defanged = ipv4_memory;\\n\\n    for (const char *character = address; *character; character++) {\\n        if (*character == \\'.\\') {\\n            *ipv4_memory++ = \\'[\\';\\n            *ipv4_memory++ = \\'.\\';\\n            *ipv4_memory++ = \\']\\';\\n\\n        } else {\\n            *ipv4_memory++ = *character;\\n        }\\n    }\\n\\n    return defanged;\\n}\\n\\n```\\n\\n\\n### C using `asprintf()` (from Code Review SE):\\n\\n```\\n#include <stdio.h>\\n\\nchar *defangIPaddr(const char *address) {\\n    char *defanged;\\n    int ip[4];\\n\\n    if (sscanf(address, \"%d.%d.%d.%d\", &ip[0], &ip[1], &ip[2], &ip[3]) != 4) {\\n        return NULL;\\n    }\\n\\n    if (asprintf(&defanged, \"%d[.]%d[.]%d[.]%d\", ip[0], ip[1], ip[2], ip[3]) == -1) {\\n        return NULL;\\n    }\\n\\n    return defanged;\\n}\\n```\\n\\n### C using a for loop a bit simplified:\\n\\n```\\n#include <stdio.h>\\n#include <stdlib.h>\\n\\nstatic const char *defangIPaddr(\\n    const char *address\\n) {\\n    char *q = calloc(1, sizeof(\"###[.]###[.]###[.]###\"));\\n    char *defanged = q;\\n\\n    for (const char *p = address; *p; p++) {\\n        if (*p == \\'.\\') {\\n            *q++ = \\'[\\';\\n            *q++ = \\'.\\';\\n            *q++ = \\']\\';\\n\\n        } else {\\n            *q++ = *p;\\n        }\\n    }\\n\\n    return defanged;\\n}\\n```\\n\\n\\n**C++**: with regex (using character class: `[]`):\\n\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string a) {\\n        return regex_replace(a, regex(\"[.]\"), \"[.]\");\\n    }\\n};\\n```\\n\\n**C++**: with regex (without using character class: `[]` with just escaping `\\\\\\\\.`):\\n\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string a) {\\n        return regex_replace(a, regex(\"\\\\\\\\.\"), \"[.]\");\\n    }\\n};\\n```\\n\\n**Java**: using `replace()`:\\n\\n```\\nclass Solution {\\n    public String defangIPaddr(String a) {\\n        return a.replace(\".\", \"[.]\");\\n    }\\n}\\n```\\n\\n**Java**: using `replaceAll()`:\\n\\n```\\nclass Solution {\\n    public String defangIPaddr(String a) {\\n        return a.replaceAll(\"\\\\\\\\.\", \"[.]\");\\n    }\\n}\\n```\\n\\n**Java**: similar to C++ using a character class `[]` with `replaceAll()`:\\n\\n```\\nclass Solution {\\n    public String defangIPaddr(String a) {\\n        return a.replaceAll(\"[.]\", \"[.]\");\\n    }\\n}\\n```\\n\\n**Python3 or Python:** with `re.sub()`:\\n\\n```\\nclass Solution:\\n    def defangIPaddr(self, a):\\n        return re.sub(\\'\\\\.\\', \\'[.]\\', a)\\n```\\n\\n**Python3 or Python:** with `replace()`:\\n\\n```\\nclass Solution:\\n    def defangIPaddr(self, a):\\n        return a.replace(\".\", \"[.]\")\\n```\\n\\n\\n**PHP**: using `str_replace()`:\\n\\n```\\nclass Solution\\n{\\n    public function defangIPaddr($a)\\n    {\\n        return str_replace(\\'.\\', \\'[.]\\', $a);\\n    }\\n}\\n```\\n\\n\\n**PHP**: using `preg_replace()`:\\n\\n```\\nclass Solution\\n{\\n    public function defangIPaddr($a)\\n    {\\n        return preg_replace(\\'/\\\\./\\', \\'[.]\\', $a);\\n    }\\n}\\n```\\n\\n**PHP**: using `preg_replace()` and a character class `[]`:\\n\\n```\\nclass Solution\\n{\\n    public function defangIPaddr($a)\\n    {\\n        return preg_replace(\\'/[.]/\\', \\'[.]\\', $a);\\n    }\\n}\\n```\\n\\n**Ruby**: similar to PHP using `gsub()`:\\n\\n```\\ndef defang_i_paddr(a)\\n  a.gsub(/\\\\./, \"[.]\")\\nend\\n```\\n\\n\\n**JavaScript/TypeScript**: using the `g` global flag (modifier) with `replace()`:\\n\\n```\\nconst defangIPaddr = function(a) {\\n    return a.replace(/\\\\./g, \"[.]\")\\n}\\n```\\n\\n```\\nfunction defangIPaddr(a: string): string {\\n    return a.replace(/\\\\./g, \"[.]\")\\n}\\n```\\n\\n**C#**: using `Replace()`:\\n\\n```\\nclass Solution {\\n    public string DefangIPaddr(string a) {\\n        return a.Replace(\".\", \"[.]\");\\n    }\\n}\\n```\\n\\n\\n**Go**: using `strings.Replace()`:\\n\\n```\\nfunc defangIPaddr(a string) string {\\n    return strings.Replace(a, \".\", \"[.]\", -1)\\n}\\n```\\n\\n**Rust**: using `replace()`:\\n\\n```\\nimpl Solution {\\n    pub fn defang_i_paddr(a: String) -> String {\\n       a.replace( \".\", \"[.]\" )\\n    }\\n}\\n```\\n\\n**Swift**: using `replacingOccurrences()`:\\n\\n\\n```\\nclass Solution {\\n    func defangIPaddr(_ a: String) -> String {\\n        return a.replacingOccurrences(of: \".\", with: \"[.]\")\\n    }\\n}\\n```\\n\\n\\n**Explanation**:\\n\\nThe `.` is a metachar in RegEx engines. We would either use a character class `[]` as a wrapper or we have to escape such metachars using one or two backslashes (depending on the language and functions).\\n",
                "solutionTags": [
                    "Java",
                    "C",
                    "JavaScript",
                    "Ruby",
                    "Swift",
                    "Go",
                    "Rust",
                    "PHP",
                    "TypeScript"
                ],
                "code": "```\\n#include <stdio.h>\\n#include <stdlib.h>\\n\\nstatic const char *defangIPaddr(\\n    const char *address\\n) {\\n    char *ipv4_memory = calloc(1, sizeof(\"###[.]###[.]###[.]###\"));\\n    char *defanged = ipv4_memory;\\n\\n    for (const char *character = address; *character; character++) {\\n        if (*character == \\'.\\') {\\n            *ipv4_memory++ = \\'[\\';\\n            *ipv4_memory++ = \\'.\\';\\n            *ipv4_memory++ = \\']\\';\\n\\n        } else {\\n            *ipv4_memory++ = *character;\\n        }\\n    }\\n\\n    return defanged;\\n}\\n\\n```\n```\\n#include <stdio.h>\\n\\nchar *defangIPaddr(const char *address) {\\n    char *defanged;\\n    int ip[4];\\n\\n    if (sscanf(address, \"%d.%d.%d.%d\", &ip[0], &ip[1], &ip[2], &ip[3]) != 4) {\\n        return NULL;\\n    }\\n\\n    if (asprintf(&defanged, \"%d[.]%d[.]%d[.]%d\", ip[0], ip[1], ip[2], ip[3]) == -1) {\\n        return NULL;\\n    }\\n\\n    return defanged;\\n}\\n```\n```\\n#include <stdio.h>\\n#include <stdlib.h>\\n\\nstatic const char *defangIPaddr(\\n    const char *address\\n) {\\n    char *q = calloc(1, sizeof(\"###[.]###[.]###[.]###\"));\\n    char *defanged = q;\\n\\n    for (const char *p = address; *p; p++) {\\n        if (*p == \\'.\\') {\\n            *q++ = \\'[\\';\\n            *q++ = \\'.\\';\\n            *q++ = \\']\\';\\n\\n        } else {\\n            *q++ = *p;\\n        }\\n    }\\n\\n    return defanged;\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string a) {\\n        return regex_replace(a, regex(\"[.]\"), \"[.]\");\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string a) {\\n        return regex_replace(a, regex(\"\\\\\\\\.\"), \"[.]\");\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public String defangIPaddr(String a) {\\n        return a.replace(\".\", \"[.]\");\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public String defangIPaddr(String a) {\\n        return a.replaceAll(\"\\\\\\\\.\", \"[.]\");\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public String defangIPaddr(String a) {\\n        return a.replaceAll(\"[.]\", \"[.]\");\\n    }\\n}\\n```\n```\\nclass Solution:\\n    def defangIPaddr(self, a):\\n        return re.sub(\\'\\\\.\\', \\'[.]\\', a)\\n```\n```\\nclass Solution:\\n    def defangIPaddr(self, a):\\n        return a.replace(\".\", \"[.]\")\\n```\n```\\nclass Solution\\n{\\n    public function defangIPaddr($a)\\n    {\\n        return str_replace(\\'.\\', \\'[.]\\', $a);\\n    }\\n}\\n```\n```\\nclass Solution\\n{\\n    public function defangIPaddr($a)\\n    {\\n        return preg_replace(\\'/\\\\./\\', \\'[.]\\', $a);\\n    }\\n}\\n```\n```\\nclass Solution\\n{\\n    public function defangIPaddr($a)\\n    {\\n        return preg_replace(\\'/[.]/\\', \\'[.]\\', $a);\\n    }\\n}\\n```\n```\\ndef defang_i_paddr(a)\\n  a.gsub(/\\\\./, \"[.]\")\\nend\\n```\n```\\nconst defangIPaddr = function(a) {\\n    return a.replace(/\\\\./g, \"[.]\")\\n}\\n```\n```\\nfunction defangIPaddr(a: string): string {\\n    return a.replace(/\\\\./g, \"[.]\")\\n}\\n```\n```\\nclass Solution {\\n    public string DefangIPaddr(string a) {\\n        return a.Replace(\".\", \"[.]\");\\n    }\\n}\\n```\n```\\nfunc defangIPaddr(a string) string {\\n    return strings.Replace(a, \".\", \"[.]\", -1)\\n}\\n```\n```\\nimpl Solution {\\n    pub fn defang_i_paddr(a: String) -> String {\\n       a.replace( \".\", \"[.]\" )\\n    }\\n}\\n```\n```\\nclass Solution {\\n    func defangIPaddr(_ a: String) -> String {\\n        return a.replacingOccurrences(of: \".\", with: \"[.]\")\\n    }\\n}\\n```",
                "codeTag": "C++"
            },
            {
                "id": 343181,
                "title": "simple-java-solution",
                "content": "The manual version is the best efficiency-wise, 0ms and 100% in both time and memory\\n\\n```\\nfinal StringBuilder sb = new StringBuilder();\\n        for (int i = 0; i < address.length(); i++) {\\n            if (address.charAt(i) == \\'.\\')\\n                sb.append(\"[.]\");\\n            else\\n                sb.append(address.charAt(i));\\n        }\\n        \\n        return sb.toString();\\n```\\n\\nBut a slightly less efficient solution is archivied using java\\'s build-in libraries, like so\\n\\n```\\nreturn address.replace(\".\", \"[.]\");\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nfinal StringBuilder sb = new StringBuilder();\\n        for (int i = 0; i < address.length(); i++) {\\n            if (address.charAt(i) == \\'.\\')\\n                sb.append(\"[.]\");\\n            else\\n                sb.append(address.charAt(i));\\n        }\\n        \\n        return sb.toString();\\n```\n```\\nreturn address.replace(\".\", \"[.]\");\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 338888,
                "title": "c-solution-o-n-100-time-100-space",
                "content": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        for (int i = address.size() - 2; i >= 0; i--)\\n            if (address[i + 1] == \\'.\\')\\n                address = address.substr(0, i + 1) + \"[.]\" + address.substr(i + 2);\\n        return address;\\n    }\\n};\\n```\\n\\nWe start looking from the second to last position because we know the last character in address will never be \\'.\\'\\nWe look backward through the string because we don\\'t want to mess up our indices when we start inserting the brackets.\\n\\nThis scored in",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        for (int i = address.size() - 2; i >= 0; i--)\\n            if (address[i + 1] == \\'.\\')\\n                address = address.substr(0, i + 1) + \"[.]\" + address.substr(i + 2);\\n        return address;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4031868,
                "title": "two-java-simple-solution-in-1-line-runtime-0ms-beats100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# code1\\n```Java\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\" , \"[.]\");\\n    }\\n}\\n```\\n\\n\\n# Code2\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder str = new StringBuilder();\\n        for (char c : address.toCharArray()){\\n            str.append((c == \\'.\\')? \"[.]\" : c );\\n        }\\n        return str.toString();\\n    }\\n}\\n```\\n\\n![abcd1.jpeg](https://assets.leetcode.com/users/images/5db11db7-1336-477d-af6c-d0ca683bb9b1_1694447536.287339.jpeg)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```Java\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\" , \"[.]\");\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder str = new StringBuilder();\\n        for (char c : address.toCharArray()){\\n            str.append((c == \\'.\\')? \"[.]\" : c );\\n        }\\n        return str.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 328909,
                "title": "very-simple-inbuilt-function",
                "content": "Java has inbuilt function\\nreplace(CharSequence target, CharSequence replacement)\\nreplaceAll(String regex, String replacement)\\n```\\npublic String defangIPaddr(String address) {\\n        return address.replace(\".\", \"[.]\");\\n    }\\n```\\n\\n```\\npublic String defangIPaddr(String address) {\\n        return address.replaceAll(\"\\\\\\\\.\", \"[.]\");\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic String defangIPaddr(String address) {\\n        return address.replace(\".\", \"[.]\");\\n    }\\n```\n```\\npublic String defangIPaddr(String address) {\\n        return address.replaceAll(\"\\\\\\\\.\", \"[.]\");\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 392115,
                "title": "quick-c-solution",
                "content": "quick c solution\\n```c\\nchar * defangIPaddr(char * address){\\n    char *re = malloc(24);\\n    char *out = re;\\n    while (*address) {\\n        if (*address == \\'.\\') {\\n            *out++ = \\'[\\';\\n            *out++ = \\'.\\';\\n            *out++ = \\']\\';\\n            *address++;\\n        } else {\\n            *out++ = *address++;\\n        }\\n    }\\n    *out = \\'\\\\0\\';\\n    return re;\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```c\\nchar * defangIPaddr(char * address){\\n    char *re = malloc(24);\\n    char *out = re;\\n    while (*address) {\\n        if (*address == \\'.\\') {\\n            *out++ = \\'[\\';\\n            *out++ = \\'.\\';\\n            *out++ = \\']\\';\\n            *address++;\\n        } else {\\n            *out++ = *address++;\\n        }\\n    }\\n    *out = \\'\\\\0\\';\\n    return re;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3125643,
                "title": "java-best-solution-o-n-time-complexity-beats-100",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder str = new StringBuilder();\\n        for (int i = 0; i < address.length(); i++) {\\n            if (address.charAt(i) == \\'.\\') {\\n                str.append(\"[.]\");\\n            } else {\\n                str.append(address.charAt(i));\\n            }\\n        }\\n        return str.toString();\\n    }\\n}\\n```\\n![please-upvote-and.jpg](https://assets.leetcode.com/users/images/e78315ef-8a9d-492b-9908-e3917f23eb31_1674946036.087042.jpeg)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder str = new StringBuilder();\\n        for (int i = 0; i < address.length(); i++) {\\n            if (address.charAt(i) == \\'.\\') {\\n                str.append(\"[.]\");\\n            } else {\\n                str.append(address.charAt(i));\\n            }\\n        }\\n        return str.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1190287,
                "title": "java-1-line-code-beats-100",
                "content": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n      \\n        String replaceString = address.replace(\".\",\"[.]\");\\n        return replaceString;\\n        \\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "class Solution {\\n    public String defangIPaddr(String address) {\\n      \\n        String replaceString = address.replace(\".\",\"[.]\");\\n        return replaceString;\\n        \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 989884,
                "title": "99-faster-1-liner-python-why-did-somebody-downvote-this",
                "content": "class Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n\\t\\n        address = address.replace(\\'.\\',\\'[.]\\')\\n        return(address)",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "class Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n\\t\\n        address = address.replace(\\'.\\',\\'[.]\\')\\n        return(address)",
                "codeTag": "Java"
            },
            {
                "id": 575813,
                "title": "c-0ms-simple-and-short",
                "content": "```\\nchar * defangIPaddr(char * address){\\n    char *d = calloc(1, sizeof(\"xxx[.]xxx[.]xxx[.]xxx\")), *t = d;\\n    for (char *a = address ; *a ; a++)\\n        *a == \\'.\\' ? *d++ = \\'[\\', *d++ = \\'.\\', *d++ = \\']\\' : (*d++ = *a);\\n    return t;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nchar * defangIPaddr(char * address){\\n    char *d = calloc(1, sizeof(\"xxx[.]xxx[.]xxx[.]xxx\")), *t = d;\\n    for (char *a = address ; *a ; a++)\\n        *a == \\'.\\' ? *d++ = \\'[\\', *d++ = \\'.\\', *d++ = \\']\\' : (*d++ = *a);\\n    return t;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 331694,
                "title": "javascript-regex-solution",
                "content": "Simple one line that uses regex and the string.replace() method. \\n\\n```\\nvar defangIPaddr = function(address) {\\n    return address.replace(/\\\\./g, \"[.]\")\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar defangIPaddr = function(address) {\\n    return address.replace(/\\\\./g, \"[.]\")\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2785391,
                "title": "c-beats-100-0ms-best-solution-easy-to-understand",
                "content": "# Complexity\\n- Time complexity: O(n)\\n\\n# Code\\n```\\n//Please upvote if it helps..........\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string ans;\\n        for(int i=0;i<address.length();++i){\\n            if(address[i]==\\'.\\')\\n            ans+=\"[.]\";\\n            else\\n            ans+=address[i];\\n        } return ans;\\n    }\\n};\\n//.........\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\n//Please upvote if it helps..........\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string ans;\\n        for(int i=0;i<address.length();++i){\\n            if(address[i]==\\'.\\')\\n            ans+=\"[.]\";\\n            else\\n            ans+=address[i];\\n        } return ans;\\n    }\\n};\\n//.........\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2673600,
                "title": "simple-c-solution-3-method-100-faster",
                "content": "```\\n\\u2705 PLEASE UPVOTE IF YOU LIKE! \\u2705\\n```\\n# Simple\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string result;\\n        for(int i = 0 ; i < address.length();i++){\\n            if(address[i]==\\'.\\'){\\n                result +=\"[.]\";\\n            }\\n            else result += address[i];\\n        }\\n\\n        return result;\\n    }\\n};\\n```\\n\\n\\n# Code using insert\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n\\n        for(int i = 0 ; i < address.length();i++){\\n            if(address[i]==\\'.\\'){\\n                address.insert(address.begin() + (i), \\'[\\');\\n                i++;\\n                address.insert(address.begin() + (i + 1), \\']\\');\\n            }\\n        }\\n\\n        return address;\\n    }\\n};\\n```\\n# Code using regex_replace\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        return regex_replace(address, regex(\"[.]\"), \"[.]\");\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\n\\u2705 PLEASE UPVOTE IF YOU LIKE! \\u2705\\n```\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string result;\\n        for(int i = 0 ; i < address.length();i++){\\n            if(address[i]==\\'.\\'){\\n                result +=\"[.]\";\\n            }\\n            else result += address[i];\\n        }\\n\\n        return result;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n\\n        for(int i = 0 ; i < address.length();i++){\\n            if(address[i]==\\'.\\'){\\n                address.insert(address.begin() + (i), \\'[\\');\\n                i++;\\n                address.insert(address.begin() + (i + 1), \\']\\');\\n            }\\n        }\\n\\n        return address;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        return regex_replace(address, regex(\"[.]\"), \"[.]\");\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2641851,
                "title": "js-one-line",
                "content": "```\\nvar defangIPaddr = function(address) {\\n    return address.split(\\'.\\').join(\\'[.]\\');\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar defangIPaddr = function(address) {\\n    return address.split(\\'.\\').join(\\'[.]\\');\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1224178,
                "title": "java-100-stringbuilder-solution",
                "content": "if you like it pls upvote\\n\\nJAVA\\n\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder res = new StringBuilder();\\n        \\n        for(int i = 0;i<address.length();i++){\\n            if(address.charAt(i) == \\'.\\')\\n                res.append(\"[.]\");\\n            else\\n                res.append(address.charAt(i));\\n        }\\n        \\n        return res.toString();\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder res = new StringBuilder();\\n        \\n        for(int i = 0;i<address.length();i++){\\n            if(address.charAt(i) == \\'.\\')\\n                res.append(\"[.]\");\\n            else\\n                res.append(address.charAt(i));\\n        }\\n        \\n        return res.toString();\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 471519,
                "title": "c-100",
                "content": "class Solution \\n{\\n    public:\\n    \\n    std::string defangIPaddr(std::string a) \\n    {       \\n        for(size_t i = 0 ;; i++)\\n        {\\n            if(a[i] == \\'.\\')\\n            {\\n                a.replace(i, 1, std::string(\"[.]\"));\\n                i++;\\n            }\\n                          \\n            if(i == a.size() - 1) break;\\n        }\\n        \\n        return a;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution \\n{\\n    public:\\n    \\n    std::string defangIPaddr(std::string a) \\n    {       \\n        for(size_t i = 0 ;; i++)\\n        {\\n            if(a[i] == \\'.\\')\\n            {\\n                a.replace(i, 1, std::string(\"[.]\"));\\n                i++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 438253,
                "title": "python-3-24-ms-faster-than-96-73",
                "content": "```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        return address.replace(\".\",\"[.]\")\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        return address.replace(\".\",\"[.]\")\\n```",
                "codeTag": "Java"
            },
            {
                "id": 381707,
                "title": "javascript",
                "content": "```\\nvar defangIPaddr = function(address) {\\n    return address.split(\\'.\\').join(\\'[.]\\');\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar defangIPaddr = function(address) {\\n    return address.split(\\'.\\').join(\\'[.]\\');\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2808184,
                "title": "java-one-line-code",
                "content": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\",\"[.]\");\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\",\"[.]\");\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2673917,
                "title": "python-simple-solution-in-7-lines-faster-than-96-41",
                "content": "```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        s=\\'\\'\\n        for i in address:\\n            if i==\\'.\\':\\n                s+=\\'[.]\\'\\n            else:\\n                s+=i\\n        return s\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        s=\\'\\'\\n        for i in address:\\n            if i==\\'.\\':\\n                s+=\\'[.]\\'\\n            else:\\n                s+=i\\n        return s\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1094299,
                "title": "c-solution",
                "content": "```\\nchar * defangIPaddr(char * address){\\n    char * buffer = (char *)malloc(30*sizeof(char));\\n    int a = 0, b = 0, c = 0, d = 0;\\n    sscanf(address,\"%d.%d.%d.%d\",&a ,&b ,&c ,&d);\\n    sprintf(buffer,\"%d[.]%d[.]%d[.]%d\",a ,b ,c ,d);\\n    return buffer;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nchar * defangIPaddr(char * address){\\n    char * buffer = (char *)malloc(30*sizeof(char));\\n    int a = 0, b = 0, c = 0, d = 0;\\n    sscanf(address,\"%d.%d.%d.%d\",&a ,&b ,&c ,&d);\\n    sprintf(buffer,\"%d[.]%d[.]%d[.]%d\",a ,b ,c ,d);\\n    return buffer;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 872844,
                "title": "c-o-n-one-line-replace-easy-answer",
                "content": "```\\npublic class Solution {\\n    public string DefangIPaddr(string address) {\\n        return address.Replace(\".\", \"[.]\");\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public string DefangIPaddr(string address) {\\n        return address.Replace(\".\", \"[.]\");\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 3436082,
                "title": "java-easy-solution-beats-100-runtime-0ms-2-methods-to-solve",
                "content": "Hope this helps!!\\nDo Upvote if you like it.\\n\\nThanks :)\\n# Code\\n```\\n//Method-1\\n\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder sb= new StringBuilder();\\n        for(int i=0; i<address.length(); i++){\\n            if(address.charAt(i)==\\'.\\'){\\n                sb.append(\"[.]\");\\n            }else{\\n                sb.append(address.charAt(i));\\n            }\\n        }\\n        return sb.toString();\\n    }    \\n}\\n\\n\\n// Method-2\\n\\n// class Solution {\\n//     public String defangIPaddr(String address) {\\n//         String str= address.replace(\".\",\"[.]\");\\n//         return str;\\n//     }    \\n// }\\n\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n//Method-1\\n\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder sb= new StringBuilder();\\n        for(int i=0; i<address.length(); i++){\\n            if(address.charAt(i)==\\'.\\'){\\n                sb.append(\"[.]\");\\n            }else{\\n                sb.append(address.charAt(i));\\n            }\\n        }\\n        return sb.toString();\\n    }    \\n}\\n\\n\\n// Method-2\\n\\n// class Solution {\\n//     public String defangIPaddr(String address) {\\n//         String str= address.replace(\".\",\"[.]\");\\n//         return str;\\n//     }    \\n// }\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 479795,
                "title": "c-solution",
                "content": "```\\nchar * defangIPaddr(char * address){\\n    char *result = (char *)malloc(sizeof(char) * (strlen(address) + 10));\\n    memset(result,0,strlen(address) + 10);\\n    int k = 0;\\n    for (int i = 0;address[i] != \\'\\\\0\\';i++) {\\n        if (address[i]==\\'.\\') {\\n            result[k] = \\'[\\';\\n            result[k+1] = \\'.\\';\\n            result[k+2] = \\']\\';\\n            k+=3;\\n        }else {\\n            result[k++] = address[i];\\n        }\\n    }\\n    result[k] = 0;\\n    return result;\\n}\\n\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nchar * defangIPaddr(char * address){\\n    char *result = (char *)malloc(sizeof(char) * (strlen(address) + 10));\\n    memset(result,0,strlen(address) + 10);\\n    int k = 0;\\n    for (int i = 0;address[i] != \\'\\\\0\\';i++) {\\n        if (address[i]==\\'.\\') {\\n            result[k] = \\'[\\';\\n            result[k+1] = \\'.\\';\\n            result[k+2] = \\']\\';\\n            k+=3;\\n        }else {\\n            result[k++] = address[i];\\n        }\\n    }\\n    result[k] = 0;\\n    return result;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 427653,
                "title": "c-two-solutions",
                "content": "It is important for me as a C# programmer to warm up all kinds of class and common APIs. string.Join and string.Split are two APIs which can be used to solve the problem. \\n\\n\\n\\nSolution 1: \\n\\n```\\npublic class Solution {\\n    public string DefangIPaddr(string address) {\\n     \\n        if(address == null || address.Length == 0)\\n            return \"\";\\n        \\n        return string.Join(\"[.]\", address.Split(\\'.\\'));\\n    }\\n}\\n```\\nSolution II:\\n```\\npublic string DefangIPaddr(string address)\\n{\\n\\tif (address == null || address.Length == 0)\\n\\t\\treturn \"\";\\n\\n    var defangled = new StringBuilder();\\n\\n    foreach (var item in address)\\n    {\\n\\t\\tif (item == \\'.\\')\\n        {\\n\\t\\t\\tdefangled.Append(\"[.]\");\\n        }\\n        else\\n        {\\n\\t\\t\\tdefangled.Append(item);\\n        }\\n\\t}\\n\\n    return defangled.ToString();\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public string DefangIPaddr(string address) {\\n     \\n        if(address == null || address.Length == 0)\\n            return \"\";\\n        \\n        return string.Join(\"[.]\", address.Split(\\'.\\'));\\n    }\\n}\\n```\n```\\npublic string DefangIPaddr(string address)\\n{\\n\\tif (address == null || address.Length == 0)\\n\\t\\treturn \"\";\\n\\n    var defangled = new StringBuilder();\\n\\n    foreach (var item in address)\\n    {\\n\\t\\tif (item == \\'.\\')\\n        {\\n\\t\\t\\tdefangled.Append(\"[.]\");\\n        }\\n        else\\n        {\\n\\t\\t\\tdefangled.Append(item);\\n        }\\n\\t}\\n\\n    return defangled.ToString();\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3077687,
                "title": "100-beats-with-0ms-easy-solve",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string s;\\n        for(int i=0;i<address.size();i++)\\n        {\\n            if(address[i]==\\'.\\')\\n            {\\n                s=s+\"[.]\";\\n            }\\n            else\\n            {\\n                s=s+address[i];\\n            }\\n        }\\n        return s;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string s;\\n        for(int i=0;i<address.size();i++)\\n        {\\n            if(address[i]==\\'.\\')\\n            {\\n                s=s+\"[.]\";\\n            }\\n            else\\n            {\\n                s=s+address[i];\\n            }\\n        }\\n        return s;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2900111,
                "title": "beats-98-93-of-python-solutions-at-runtime-beats-95-22-of-python-solutions-in-memory-usage",
                "content": "Please Upvote if you find the solution useful.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->Used String replace() function. \\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        x = address.replace(\".\",\"[.]\")\\n        return x\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        x = address.replace(\".\",\"[.]\")\\n        return x\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2833009,
                "title": "c-std-regex-replace-one-liner",
                "content": "Maybe a bit of an overkill, but quick to write. :)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        return regex_replace(address, regex(\"[.]\"), \"[.]\");\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        return regex_replace(address, regex(\"[.]\"), \"[.]\");\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2432727,
                "title": "java-easy-100-fast-stringbuilder-class",
                "content": "# Please Upvote\\uD83D\\uDE4F\\uD83D\\uDE4F\\uD83D\\uDE4F\\n\\n```\\nRuntime: 0 ms, faster than 100.00% of Java online submissions for Defanging an IP Address.\\nMemory Usage: 41.9 MB, less than 64.91% of Java online submissions for Defanging an IP Address.\\n```\\n```\\nStringBuilder sb = new StringBuilder();\\n        for(char c : address.toCharArray()){\\n            if(c == \\'.\\'){\\n                sb.append(\\'[\\');\\n                sb.append(c);\\n                sb.append(\\']\\');\\n            }else\\n                sb.append(c);\\n        }\\n        return sb.toString();\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nRuntime: 0 ms, faster than 100.00% of Java online submissions for Defanging an IP Address.\\nMemory Usage: 41.9 MB, less than 64.91% of Java online submissions for Defanging an IP Address.\\n```\n```\\nStringBuilder sb = new StringBuilder();\\n        for(char c : address.toCharArray()){\\n            if(c == \\'.\\'){\\n                sb.append(\\'[\\');\\n                sb.append(c);\\n                sb.append(\\']\\');\\n            }else\\n                sb.append(c);\\n        }\\n        return sb.toString();\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1340914,
                "title": "simple-c-faster-than-100-00-basic-string",
                "content": "Using basic string operation we can solve this problem.\\nIn the given string where we find `\\'.\\'`, we add `[.]` to the answer string, otherwise we add the character normally.\\n```class Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string ans = \"\" ;\\n        for(auto i:address)\\n        {\\n            if(i == \\'.\\')\\n            {\\n                ans += \"[.]\" ;\\n            }\\n            else\\n            {\\n                ans += i ;\\n            }\\n        }\\n        return ans ;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string ans = \"\" ;\\n        for(auto i:address)\\n        {\\n            if(i == \\'.\\')\\n            {\\n                ans += \"[.]\" ;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1247232,
                "title": "100-faster-c-solution",
                "content": "The basic strategy for the solution is to add each character one by one to a new string and as soon as the pointer encounters \\'.\\' (period) we will add a string \\'[.]\\' to this new string else the char is added to that string.\\n\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string re=\"\";\\n        for(int i=0;i<address.length();++i)\\n        {\\n            if(address[i]==\\'.\\')\\n                re+=\"[.]\";\\n            else\\n                re+=address[i];\\n        }\\n        return re;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string re=\"\";\\n        for(int i=0;i<address.length();++i)\\n        {\\n            if(address[i]==\\'.\\')\\n                re+=\"[.]\";\\n            else\\n                re+=address[i];\\n        }\\n        return re;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1153918,
                "title": "swift-defanging-an-ip-address",
                "content": "```swift\\nclass Solution {\\n    func defangIPaddr(_ address: String) -> String {\\n        return address.components(separatedBy: \".\").joined(separator: \"[.]\")\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```swift\\nclass Solution {\\n    func defangIPaddr(_ address: String) -> String {\\n        return address.components(separatedBy: \".\").joined(separator: \"[.]\")\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1113407,
                "title": "easy-to-understand-in-python-3",
                "content": "Easy To Understand Python Solution:\\n\\n```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        \\n        answerString = \"\"\\n        for c in address:\\n            if c == \".\":\\n                answerString += \"[.]\"\\n            else:\\n                answerString += c\\n        \\n        return answerString\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        \\n        answerString = \"\"\\n        for c in address:\\n            if c == \".\":\\n                answerString += \"[.]\"\\n            else:\\n                answerString += c\\n        \\n        return answerString\\n```",
                "codeTag": "Java"
            },
            {
                "id": 996880,
                "title": "very-easy-solution-c-java-o-n-very-easy-to-understand",
                "content": "Implementation\\n\\n**1st Approach in C++**\\n\\n**Time Complexity = O(N), Space Complexity = O(N)**\\n\\n```\\nstring defangIPaddr(string address) {\\n    string str;\\n    for(int itr = 0; itr < address.size(); itr++){\\n        if(address[itr] == \\'.\\') str += \"[.]\";                \\n        else str += address[itr];                \\n    }            \\n    return str;\\n}\\n```\\n\\n\\n**2nd Approach in Java**\\n\\n**Time Complexity = O(N), Space Complexity = O(N)**\\n\\n```\\npublic String defangIPaddr(String address) {\\n    String str = \"\";\\n    for(int itr = 0; itr < address.length(); itr++){\\n        if(address.charAt(itr) == \\'.\\') str += \"[.]\";                \\n        else str += address.charAt(itr);                \\n    }            \\n    return str;\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "C",
                    "String"
                ],
                "code": "```\\nstring defangIPaddr(string address) {\\n    string str;\\n    for(int itr = 0; itr < address.size(); itr++){\\n        if(address[itr] == \\'.\\') str += \"[.]\";                \\n        else str += address[itr];                \\n    }            \\n    return str;\\n}\\n```\n```\\npublic String defangIPaddr(String address) {\\n    String str = \"\";\\n    for(int itr = 0; itr < address.length(); itr++){\\n        if(address.charAt(itr) == \\'.\\') str += \"[.]\";                \\n        else str += address.charAt(itr);                \\n    }            \\n    return str;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 810808,
                "title": "javascript-solution-1108",
                "content": "```\\n/**\\n * @param {string} address\\n * @return {string}\\n */\\nlet defangIPaddr = function(address) {\\n        return address.replace(/[.]/g,\\'[.]\\')\\n    };\\n```\\n\\n**Runtime: 76 ms, faster than 54.73% of JavaScript online submissions for Defanging an IP Address.**\\n\\n**Memory Usage: 36.9 MB, less than 5.00% of JavaScript online submissions for Defanging an IP Address.**\\n\\n**Feedback Appreciated**",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} address\\n * @return {string}\\n */\\nlet defangIPaddr = function(address) {\\n        return address.replace(/[.]/g,\\'[.]\\')\\n    };\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 774568,
                "title": "python-solution-with-and-without-inbuilt-function",
                "content": "With Inbuit Function:\\n---------------\\n```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        return address.replace(\".\", \"[.]\")\\n```\\n\\nWithout Inbuit Function: O(n)\\n--------------------\\n```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        res=\"\"\\n        for i in range(len(address)):\\n            if (address[i]!=\\'.\\'):\\n                res+=address[i]\\n            else:\\n                res+=\"[.]\"\\n        return res\\n```\\nhttps://github.com/shubhamthrills",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        return address.replace(\".\", \"[.]\")\\n```\n```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        res=\"\"\\n        for i in range(len(address)):\\n            if (address[i]!=\\'.\\'):\\n                res+=address[i]\\n            else:\\n                res+=\"[.]\"\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 526222,
                "title": "java-replace-vs-replace-all-join",
                "content": "```\\npublic String defangIPaddr(String address) {\\n        //return String.join(\"[.]\", address.split(\"\\\\\\\\.\"));\\n        // return address.replaceAll(\"\\\\\\\\.\", \"[.]\"); // use reges \" \\\\\\\\.\" other than \".\";\\n        return address.replace(\".\", \"[.]\");\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic String defangIPaddr(String address) {\\n        //return String.join(\"[.]\", address.split(\"\\\\\\\\.\"));\\n        // return address.replaceAll(\"\\\\\\\\.\", \"[.]\"); // use reges \" \\\\\\\\.\" other than \".\";\\n        return address.replace(\".\", \"[.]\");\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 415553,
                "title": "it-says-runtime-0-ms-faster-than-100-00-of-c-online-submissions",
                "content": "***Runtime: 0 ms, faster than 100.00% of C online submissions for Defanging an IP Address.\\nMemory Usage: 6.6 MB, less than 100.00% of C online submissions for Defanging an IP Address.***\\n\\nI\\'m new to programming, any suggestion with this code would be appreciated.\\n```\\n\\n\\nchar * defangIPaddr(char * address){\\n    \\n    int length = strlen(address), j = 0;\\n    char * returnIp = malloc((length + 7));\\n    \\n    for (int i = 0; i < length; i++)\\n    {\\n        if (address[i] != \\'.\\')\\n        {\\n            *(returnIp + j) = address[i];\\n            j++;\\n        }\\n        else\\n        {\\n            *(returnIp + j) = \\'[\\';\\n            *(returnIp + (j + 1)) = \\'.\\';\\n            *(returnIp + (j + 2)) = \\']\\';\\n            j = j + 3;\\n        }\\n    }\\n    \\n    *(returnIp + j) = \\'\\\\0\\';\\n    \\n    return returnIp;\\n}\\n\\n\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n\\n\\nchar * defangIPaddr(char * address){\\n    \\n    int length = strlen(address), j = 0;\\n    char * returnIp = malloc((length + 7));\\n    \\n    for (int i = 0; i < length; i++)\\n    {\\n        if (address[i] != \\'.\\')\\n        {\\n            *(returnIp + j) = address[i];\\n            j++;\\n        }\\n        else\\n        {\\n            *(returnIp + j) = \\'[\\';\\n            *(returnIp + (j + 1)) = \\'.\\';\\n            *(returnIp + (j + 2)) = \\']\\';\\n            j = j + 3;\\n        }\\n    }\\n    \\n    *(returnIp + j) = \\'\\\\0\\';\\n    \\n    return returnIp;\\n}\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 383317,
                "title": "0ms-c-inverse-enumeration",
                "content": "```cpp\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        for(int i = address.size(); i >= 0; i--){\\n            if(address[i] == \\'.\\'){\\n                address.replace(i, 1, \"[.]\");\\n            }\\n        }\\n        return address;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        for(int i = address.size(); i >= 0; i--){\\n            if(address[i] == \\'.\\'){\\n                address.replace(i, 1, \"[.]\");\\n            }\\n        }\\n        return address;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 361331,
                "title": "defang-34-1mb-and-faster-than-100",
                "content": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder output =new StringBuilder();\\n        for (char ch: address.toCharArray()) {\\n            switch(ch) {\\n                case \\'.\\' : output.append(\"[.]\"); break;\\n                default: output.append(ch); break;\\n            }\\n        }\\n        return output.toString();\\n    }\\n}\\n```\\nSwitch is faster than if/else and \\'?\\' statements. StringBuilder saves memory.\\nhttps://leetcode.com/submissions/detail/252654344/\\n\\nCheers.",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder output =new StringBuilder();\\n        for (char ch: address.toCharArray()) {\\n            switch(ch) {\\n                case \\'.\\' : output.append(\"[.]\"); break;\\n                default: output.append(ch); break;\\n            }\\n        }\\n        return output.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 339583,
                "title": "kotlin-different-approach",
                "content": "```\\nclass Solution {\\n    fun defangIPaddr(address: String): String = StringBuilder().run { \\n        address.forEach{\\n            if(it.equals(\\'.\\')){\\n                append(\"[.]\")\\n            }else{\\n                append(it)\\n            }\\n        }\\n        toString()\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    fun defangIPaddr(address: String): String = StringBuilder().run { \\n        address.forEach{\\n            if(it.equals(\\'.\\')){\\n                append(\"[.]\")\\n            }else{\\n                append(it)\\n            }\\n        }\\n        toString()\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 330713,
                "title": "python-one-liner",
                "content": "class Solution(object):\\n    def defangIPaddr(self, address):\\n        \"\"\"\\n        :type address: str\\n        :rtype: str\\n        \"\"\"\\n        return \"[.]\".join(address.split(\\'.\\'))",
                "solutionTags": [],
                "code": "class Solution(object):\\n    def defangIPaddr(self, address):\\n        \"\"\"\\n        :type address: str\\n        :rtype: str\\n        \"\"\"\\n        return \"[.]\".join(address.split(\\'.\\'))",
                "codeTag": "Java"
            },
            {
                "id": 3650582,
                "title": "1108-defanging-an-ip-address-100-easy-java-program",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n\\n        String str = address.replace(\".\",\"[.]\");\\n        return str;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n\\n        String str = address.replace(\".\",\"[.]\");\\n        return str;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3181188,
                "title": "100-beat-zero-run-time",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string a) {\\n        queue<char>q;\\n        int i=0;\\n        while(i<a.size()){\\n            q.push(a[i]);\\n            i++;\\n        }\\n\\n        string s;\\n        while(!q.empty()){\\n            if(q.front()==\\'.\\'){\\n                s+=\\'[\\';\\n                s+=\\'.\\';\\n                s+=\\']\\';\\n                q.pop();\\n            }\\n\\n            else{\\n                s+=q.front();\\n                q.pop();\\n            }\\n        }\\n        return s;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string a) {\\n        queue<char>q;\\n        int i=0;\\n        while(i<a.size()){\\n            q.push(a[i]);\\n            i++;\\n        }\\n\\n        string s;\\n        while(!q.empty()){\\n            if(q.front()==\\'.\\'){\\n                s+=\\'[\\';\\n                s+=\\'.\\';\\n                s+=\\']\\';\\n                q.pop();\\n            }\\n\\n            else{\\n                s+=q.front();\\n                q.pop();\\n            }\\n        }\\n        return s;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3178837,
                "title": "c-straightforward-clean-code-beginner-friendly",
                "content": "![image](https://assets.leetcode.com/users/images/12c0dc6b-6db7-4dad-bed4-8b8b710ecdbe_1676265829.7416234.png)\\n\\n**n == address.size()\\nT->O(n) && S->O(n)**\\n\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tstring defangIPaddr(string address) {\\n\\t\\t\\tstring defan = \"\";\\n\\n\\t\\t\\tfor(auto i : address){\\n\\t\\t\\t\\tif(i == \\'.\\'){\\n\\t\\t\\t\\t\\tdefan += \"[.]\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\tdefan += i;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn defan;\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tstring defangIPaddr(string address) {\\n\\t\\t\\tstring defan = \"\";\\n\\n\\t\\t\\tfor(auto i : address){\\n\\t\\t\\t\\tif(i == \\'.\\'){\\n\\t\\t\\t\\t\\tdefan += \"[.]\";\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 3127222,
                "title": "c-solution",
                "content": "\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string ans;\\n        for(int i=0;i<address.length();i++)\\n        {\\n            if(address[i]==\\'.\\')\\n            ans+=\"[.]\";\\n\\n            else\\n            ans+=address[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string ans;\\n        for(int i=0;i<address.length();i++)\\n        {\\n            if(address[i]==\\'.\\')\\n            ans+=\"[.]\";\\n\\n            else\\n            ans+=address[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3087962,
                "title": "beats-94-61-in-time",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n# Code\\n```\\npublic class Solution {\\n    public string DefangIPaddr(string address) \\n    {\\n        StringBuilder sb = new StringBuilder();\\n        for (int i = 0; i < address.Length; i++)\\n        {\\n            if (address[i] == \\'.\\')\\n                sb.Append(\"[.]\");\\n            else\\n                sb.Append(address[i]);\\n        }\\n        return sb.ToString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public string DefangIPaddr(string address) \\n    {\\n        StringBuilder sb = new StringBuilder();\\n        for (int i = 0; i < address.Length; i++)\\n        {\\n            if (address[i] == \\'.\\')\\n                sb.Append(\"[.]\");\\n            else\\n                sb.Append(address[i]);\\n        }\\n        return sb.ToString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2731024,
                "title": "one-line-easiest-python-solution",
                "content": "**Hi there!  Please upvote**\\n```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str: \\n        \\n        return address.replace(\\'.\\', \\'[.]\\')\\n        \\n        \\n``` \\n**Happy Coding :)**",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str: \\n        \\n        return address.replace(\\'.\\', \\'[.]\\')\\n        \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2673922,
                "title": "python-simple-one-line-solution",
                "content": "```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        return address.replace(\\'.\\',\\'[.]\\')\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        return address.replace(\\'.\\',\\'[.]\\')\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2212726,
                "title": "c-sol-in-place",
                "content": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) \\n    {\\n        for(int i=0,j=0;j<3;i++){\\n            if(address[i]==\\'.\\'){\\n                address.insert(address.begin()+(i),\\'[\\');\\n                address.insert(address.begin()+(i+2),\\']\\');\\n                i++;\\n                j++;\\n            }\\n        }\\n        return address;\\n    }\\n};\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    string defangIPaddr(string address) \\n    {\\n        for(int i=0,j=0;j<3;i++){\\n            if(address[i]==\\'.\\'){\\n                address.insert(address.begin()+(i),\\'[\\');\\n                address.insert(address.begin()+(i+2),\\']\\');\\n                i++;\\n                j++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1493059,
                "title": "java-solution-faster-then-100-easy-explanation-with-code-and-comments",
                "content": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder ans = new StringBuilder();    // We are using StringBuilder instead of String bcz StringBuilder is mutable and using this we can change the string without creating new objects. While in case of String it will keep creating new objects hence wastage of memory\\n        \\n        for(int i=0;i<address.length();i++){\\n            if(address.charAt(i) == \\'.\\')    // if \\'.\\' is present in the string then replace it with \\'[.]\\'\\n                ans.append(\"[.]\");\\n            else\\n                ans.append(address.charAt(i));   // keep adding other things as it is\\n        }\\n        return ans.toString();    // We can\\'t directly return \"ans\" as \"ans\" is of type StringBuilder and we have to return String. Hence, ans.toString() \\n    }\\n}\\n\\n// If you find this post helpful then plz upvote :-)\\n```",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder ans = new StringBuilder();    // We are using StringBuilder instead of String bcz StringBuilder is mutable and using this we can change the string without creating new objects. While in case of String it will keep creating new objects hence wastage of memory\\n        \\n        for(int i=0;i<address.length();i++){\\n            if(address.charAt(i) == \\'.\\')    // if \\'.\\' is present in the string then replace it with \\'[.]\\'\\n                ans.append(\"[.]\");\\n            else\\n                ans.append(address.charAt(i));   // keep adding other things as it is\\n        }\\n        return ans.toString();    // We can\\'t directly return \"ans\" as \"ans\" is of type StringBuilder and we have to return String. Hence, ans.toString() \\n    }\\n}\\n\\n// If you find this post helpful then plz upvote :-)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1263589,
                "title": "simple-c-code-100-faster",
                "content": "```\\nstring defangIPaddr(string address) {\\n       for(int i=1;i<address.size();i++){\\n           if(address[i]==\\'.\\'){\\n              address.insert(i,\"[\");\\n              address.insert(i+2,\"]\");\\n               i+=2;\\n           }\\n         }\\n        return address;\\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nstring defangIPaddr(string address) {\\n       for(int i=1;i<address.size();i++){\\n           if(address[i]==\\'.\\'){\\n              address.insert(i,\"[\");\\n              address.insert(i+2,\"]\");\\n               i+=2;\\n           }\\n         }\\n        return address;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 953318,
                "title": "rust-one-liner",
                "content": "```rust\\npub fn defang_i_paddr(address: String) -> String {\\n\\taddress.replace(\\'.\\', \"[.]\")\\n}\\n```",
                "solutionTags": [],
                "code": "```rust\\npub fn defang_i_paddr(address: String) -> String {\\n\\taddress.replace(\\'.\\', \"[.]\")\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 857770,
                "title": "python-one-line-string-replace",
                "content": "```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        return address.replace(\".\",\"[.]\")\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        return address.replace(\".\",\"[.]\")\\n```",
                "codeTag": "Java"
            },
            {
                "id": 703556,
                "title": "c-speed-mem-o-n-o-n-simple-video",
                "content": "\\nClick URL: https://youtu.be/LI-Jis4xOMI\\nClicking the play button does not work.\\n\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        \\n        string out;\\n        for(int i=0; i < address.size(); i++){\\n            if(address[i]==\\'.\\')\\n                out += \"[.]\";\\n            else\\n                out += address[i];\\n        }\\n        return out;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        \\n        string out;\\n        for(int i=0; i < address.size(); i++){\\n            if(address[i]==\\'.\\')\\n                out += \"[.]\";\\n            else\\n                out += address[i];\\n        }\\n        return out;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 621885,
                "title": "100-100-java-silly-question",
                "content": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\", \"[.]\");\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\", \"[.]\");\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 533313,
                "title": "naive-c-97-5-time-100-memory",
                "content": "```\\npublic class Solution {\\n    public string DefangIPaddr(string address) {\\n        char[] newAddress = new char[address.Length + 6];\\n        int pointer = 0;\\n        \\n        foreach(char c in address) {\\n            if (c == \\'.\\') {\\n                newAddress[pointer++] = \\'[\\';\\n                newAddress[pointer++] = \\'.\\';\\n                newAddress[pointer++] = \\']\\';\\n            } else {\\n                newAddress[pointer++] = c;\\n            }\\n        }\\n        \\n        return new string(newAddress);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public string DefangIPaddr(string address) {\\n        char[] newAddress = new char[address.Length + 6];\\n        int pointer = 0;\\n        \\n        foreach(char c in address) {\\n            if (c == \\'.\\') {\\n                newAddress[pointer++] = \\'[\\';\\n                newAddress[pointer++] = \\'.\\';\\n                newAddress[pointer++] = \\']\\';\\n            } else {\\n                newAddress[pointer++] = c;\\n            }\\n        }\\n        \\n        return new string(newAddress);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 485800,
                "title": "1108-defanging-an-ip-address",
                "content": "class Solution {\\n    public String defangIPaddr(String address) {\\n        String result = \"\";\\n        for(int i = 0; i < address.length(); i ++){\\n            if(address.charAt(i)==\\'.\\'){\\n                result = result.concat(\"[\")\\n                               .concat(String.valueOf(address.charAt(i)))\\n                               .concat(\"]\");\\n            }else{\\n                result = result.concat(String.valueOf(address.charAt(i)));\\n            }\\n        }\\n        return result;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public String defangIPaddr(String address) {\\n        String result = \"\";\\n        for(int i = 0; i < address.length(); i ++){\\n            if(address.charAt(i)==\\'.\\'){\\n                result = result.concat(\"[\")\\n                               .concat(String.valueOf(address.charAt(i)))\\n                               .concat(\"]\");\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 361663,
                "title": "c-one-liner",
                "content": "```\\npublic class Solution {\\n    public string DefangIPaddr(string address) {\\n        return address.Replace(\".\", \"[.]\");\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public string DefangIPaddr(string address) {\\n        return address.Replace(\".\", \"[.]\");\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 358386,
                "title": "1-line-in-javascript",
                "content": "```javascript\\n\\taddress.split(\\'.\\').join(\\'[.]\\')\\n```\\n\\nThat\\'s it!",
                "solutionTags": [],
                "code": "```javascript\\n\\taddress.split(\\'.\\').join(\\'[.]\\')\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 349451,
                "title": "python-solution",
                "content": "```\\n    def defangIPaddr(self, address):\\n        return address.replace(\".\", \"[.]\")\\n```",
                "solutionTags": [],
                "code": "```\\n    def defangIPaddr(self, address):\\n        return address.replace(\".\", \"[.]\")\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 331492,
                "title": "javascript-solution-o-n-time",
                "content": "```\\nvar defangIPaddr = function(address) {\\n    let str = \\'\\';\\n    for(let i = 0; i < address.length; i++){\\n        let char = address.charAt(i);\\n        if(char == \\'.\\') char = \\'[.]\\';\\n        str = str + char;\\n    }\\n    return str;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar defangIPaddr = function(address) {\\n    let str = \\'\\';\\n    for(let i = 0; i < address.length; i++){\\n        let char = address.charAt(i);\\n        if(char == \\'.\\') char = \\'[.]\\';\\n        str = str + char;\\n    }\\n    return str;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 330484,
                "title": "c-solution",
                "content": "\\tchar * defangIPaddr(char * address)\\n\\t{\\n\\t\\tint len = strlen(address);\\n\\t\\tchar *res = malloc(sizeof(char) * (len + 7)); // 6 for 3 sets of brackets + 1 NULL\\n\\n\\t\\tint i = 0, j = 0;\\n\\t\\twhile (i < len)\\n\\t\\t{   \\n\\t\\t\\tres[j++] = address[i];\\n\\n\\t\\t\\tif (address[i+1] == \\'.\\') \\n\\t\\t\\t{\\n\\t\\t\\t\\tres[j++] = \\'[\\';\\n\\t\\t\\t\\tres[j++] = address[++i];\\n\\t\\t\\t\\tres[j++] = \\']\\';\\n\\t\\t\\t}\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tres[j] = \\'\\\\0\\';\\n\\t\\treturn res;\\n\\t}",
                "solutionTags": [],
                "code": "\\tchar * defangIPaddr(char * address)\\n\\t{\\n\\t\\tint len = strlen(address);\\n\\t\\tchar *res = malloc(sizeof(char) * (len + 7)); // 6 for 3 sets of brackets + 1 NULL\\n\\n\\t\\tint i = 0, j = 0;\\n\\t\\twhile (i < len)\\n\\t\\t{   \\n\\t\\t\\tres[j++] = address[i];\\n\\n\\t\\t\\tif (address[i+1] == \\'.\\') \\n\\t\\t\\t{\\n\\t\\t\\t\\tres[j++] = \\'[\\';\\n\\t\\t\\t\\tres[j++] = address[++i];\\n\\t\\t\\t\\tres[j++] = \\']\\';\\n\\t\\t\\t}\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tres[j] = \\'\\\\0\\';\\n\\t\\treturn res;\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 329626,
                "title": "javascript-1-line-faster-than-100",
                "content": "This is a simple text replacement problem. Break the string into an array by separating on \".\" . Then rejoin the string with the new text, \"[.]\" using array join.\\n```\\n//100% on speed and space \\n//https://leetcode.com/problems/defanging-an-ip-address/submissions/\\n\\n/**\\n * @param {string} address\\n * @return {string}\\n */\\nvar defangIPaddr = function(address) {\\n    return address.split(\".\").join(\\'[.]\\')\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n//100% on speed and space \\n//https://leetcode.com/problems/defanging-an-ip-address/submissions/\\n\\n/**\\n * @param {string} address\\n * @return {string}\\n */\\nvar defangIPaddr = function(address) {\\n    return address.split(\".\").join(\\'[.]\\')\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3993949,
                "title": "1-line",
                "content": "***String has replace method which takes two parameters String.replace(\"old one\",\"new one\");\\n\\n# Code\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\",\"[.]\");\\n    }\\n}\\n\\n\\n```\\n![f9e51783-3660-4252-933c-ec2c42b2d57d_1677809905.0379472.jpeg](https://assets.leetcode.com/users/images/607eea57-2eaf-4410-9174-96cee82995a0_1693680746.2719412.jpeg)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\",\"[.]\");\\n    }\\n}\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3934872,
                "title": "easy-peasy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string adress) {\\n        string ans=\"\";\\n\\n\\n        for(int i=0;i<adress.size();i++)\\n        {\\n            if(adress[i]==\\'.\\')\\n            {\\n                ans+=\"[.]\";\\n            }\\n            else\\n            {\\n                ans+=adress[i];\\n            }\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string adress) {\\n        string ans=\"\";\\n\\n\\n        for(int i=0;i<adress.size();i++)\\n        {\\n            if(adress[i]==\\'.\\')\\n            {\\n                ans+=\"[.]\";\\n            }\\n            else\\n            {\\n                ans+=adress[i];\\n            }\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3862213,
                "title": "100-beats-in-time-and-99-50-beats-in-memory-java-easy-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n       int n = address.length();\\n       StringBuilder sb = new StringBuilder();\\n       for(int i=0;i<n;i++){\\n           if(address.charAt(i)==\\'.\\'){\\n               sb.append(\"[\");\\n               sb.append(\".\");\\n               sb.append(\"]\");\\n           }\\n           else{\\n               sb.append(address.charAt(i));\\n           }\\n       } \\n       String str = sb.toString();\\n       return str;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n       int n = address.length();\\n       StringBuilder sb = new StringBuilder();\\n       for(int i=0;i<n;i++){\\n           if(address.charAt(i)==\\'.\\'){\\n               sb.append(\"[\");\\n               sb.append(\".\");\\n               sb.append(\"]\");\\n           }\\n           else{\\n               sb.append(address.charAt(i));\\n           }\\n       } \\n       String str = sb.toString();\\n       return str;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3623258,
                "title": "java-very-easy-solution-with-100-beats-0ms-runtime-memory-40-6mb-t-n-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\",\"[.]\");\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\",\"[.]\");\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3342662,
                "title": "easy-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        return address.replace(\\'.\\', \\'[.]\\')\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        return address.replace(\\'.\\', \\'[.]\\')\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3339179,
                "title": "defangipaddr-function-is-simple",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach used in the defangIPaddr function is simple. It loops through the input string character by character and checks if the character is a period .. If it is, it adds [.] to the defanged_address string. Otherwise, it adds the character as it is to the defanged_address string.\\n\\n# Complexity\\n\\nThe time complexity of this code is O(n), where n is the length of the input string. This is because the code loops through the input string character by character, and each character is examined only once.\\n\\nThe space complexity of this code is also O(n), where n is the length of the input string. This is because a new string defanged_address is created to hold the defanged IP address, and its size can be as large as the input string if every character in the input string is a period.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string defanged_address;\\n\\n        for (size_t i = 0; i < address.size(); i++) {\\n            if (address[i] == \\'.\\') {\\n                defanged_address += \"[.]\";\\n            } else {\\n                defanged_address += address[i];\\n        }\\n    }\\n\\n    return defanged_address;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string defanged_address;\\n\\n        for (size_t i = 0; i < address.size(); i++) {\\n            if (address[i] == \\'.\\') {\\n                defanged_address += \"[.]\";\\n            } else {\\n                defanged_address += address[i];\\n        }\\n    }\\n\\n    return defanged_address;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3181930,
                "title": "faster-than-100-with-explanation-easy",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Declare a StringBuider class or you can just create another String to modify the value\\n2. If you find **\\' . \\'** in the String then append the String by **\"[.]\"** and increase the index.\\n3. Else add other characters as it is in the String.\\n4. then return the ans in the String by using sb.**toString()** method\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder sb = new StringBuilder();\\n        for(int i=0; i<address.length();i++){\\n            if(address.charAt(i)==\\'.\\'){\\n                sb.append(\"[.]\");\\n                i++;\\n            }\\n            sb.append(address.charAt(i));\\n        }\\n        return sb.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder sb = new StringBuilder();\\n        for(int i=0; i<address.length();i++){\\n            if(address.charAt(i)==\\'.\\'){\\n                sb.append(\"[.]\");\\n                i++;\\n            }\\n            sb.append(address.charAt(i));\\n        }\\n        return sb.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3181192,
                "title": "100-beat-0ms-run-time",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string s) {\\n        queue<char> s1;\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]==\\'.\\'){\\n                s1.push(\\'[\\');\\n                s1.push(s[i]);\\n                s1.push(\\']\\');\\n            }else{\\n                s1.push(s[i]);\\n            }\\n        }\\n        string st;\\n        while(!s1.empty()){\\n            st+=s1.front();\\n            s1.pop();\\n        }\\n        return st;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string s) {\\n        queue<char> s1;\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]==\\'.\\'){\\n                s1.push(\\'[\\');\\n                s1.push(s[i]);\\n                s1.push(\\']\\');\\n            }else{\\n                s1.push(s[i]);\\n            }\\n        }\\n        string st;\\n        while(!s1.empty()){\\n            st+=s1.front();\\n            s1.pop();\\n        }\\n        return st;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3181191,
                "title": "100-beat",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string str;\\n        for(int i=0;i<address.size();i++){\\n            if(address[i]==\\'.\\'){\\n                str+=\\'[\\';\\n                str+=\\'.\\';\\n                str+=\\']\\';\\n            }\\n            else\\n            str+=address[i];\\n        }\\n        return str;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string str;\\n        for(int i=0;i<address.size();i++){\\n            if(address[i]==\\'.\\'){\\n                str+=\\'[\\';\\n                str+=\\'.\\';\\n                str+=\\']\\';\\n            }\\n            else\\n            str+=address[i];\\n        }\\n        return str;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3181177,
                "title": "100-beat-best-and-easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string s) {\\n             queue<int>q;\\n             string p;\\n        for (int i=0;i<s.size();i++){\\n              q.push(s[i]); \\n        } \\n            while(!q.empty()){\\n                if (q.front()==\\'.\\'){\\n                  p+=\\'[\\';\\n                  p+=\\'.\\';\\n                  p+=\\']\\';\\n                }\\n                else {\\n                    p+=q.front();\\n                }\\n                q.pop();\\n            }\\n        return p; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string s) {\\n             queue<int>q;\\n             string p;\\n        for (int i=0;i<s.size();i++){\\n              q.push(s[i]); \\n        } \\n            while(!q.empty()){\\n                if (q.front()==\\'.\\'){\\n                  p+=\\'[\\';\\n                  p+=\\'.\\';\\n                  p+=\\']\\';\\n                }\\n                else {\\n                    p+=q.front();\\n                }\\n                q.pop();\\n            }\\n        return p; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3127169,
                "title": "java-solution-fast-0-ms-100-simple-and-optimal",
                "content": "\\n1 method\\nRuntime : 0ms [100%]\\n# Code\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder str = new StringBuilder();\\n        for(char x:address.toCharArray()){\\n            if(x==\\'.\\')str.append(\"[.]\");\\n            else str.append(x);\\n        }\\n        return str.toString();\\n    }\\n}\\n-----------------------------------------------------------------\\n```\\n2 method \\n\\nRuntime : 2ms [29.51%]\\n# Code\\n```\\n\\n\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replaceAll(\"\\\\\\\\.\",\"[.]\");\\n    }\\n}\\n\\n",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder str = new StringBuilder();\\n        for(char x:address.toCharArray()){\\n            if(x==\\'.\\')str.append(\"[.]\");\\n            else str.append(x);\\n        }\\n        return str.toString();\\n    }\\n}\\n-----------------------------------------------------------------\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2862446,
                "title": "java-clean-char-array-solution-two-pointers-0-ms",
                "content": "# Code\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        char[] charArray = new char[address.length() + (2 * 3)];\\n        for (int i = 0, y = 0; i < address.length(); i++, y++) {\\n            char current = address.charAt(i);\\n            if (current == \\'.\\') {\\n                charArray[y++] = \\'[\\';\\n                charArray[y++] = current;\\n                charArray[y] = \\']\\';\\n            } else {\\n                charArray[y] = current;\\n            }\\n        }\\n        return String.valueOf(charArray);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        char[] charArray = new char[address.length() + (2 * 3)];\\n        for (int i = 0, y = 0; i < address.length(); i++, y++) {\\n            char current = address.charAt(i);\\n            if (current == \\'.\\') {\\n                charArray[y++] = \\'[\\';\\n                charArray[y++] = current;\\n                charArray[y] = \\']\\';\\n            } else {\\n                charArray[y] = current;\\n            }\\n        }\\n        return String.valueOf(charArray);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2796827,
                "title": "java-2-solutions-easy",
                "content": "### **Please Upvote** :D\\n##### 1. Using in-built **`replace()`** method:\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\", \"[.]\");\\n    }\\n}\\n\\n// TC: O(n)\\n```\\n##### 2. Using StringBuilder:\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder sb = new StringBuilder();\\n\\n        for (char c : address.toCharArray()) {\\n            if (c != \\'.\\') sb.append(c);\\n            else sb.append(\"[.]\");\\n        }\\n\\n        return sb.toString();\\n    }\\n}\\n\\n// TC: O(n)\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\", \"[.]\");\\n    }\\n}\\n\\n// TC: O(n)\\n```\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder sb = new StringBuilder();\\n\\n        for (char c : address.toCharArray()) {\\n            if (c != \\'.\\') sb.append(c);\\n            else sb.append(\"[.]\");\\n        }\\n\\n        return sb.toString();\\n    }\\n}\\n\\n// TC: O(n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2561329,
                "title": "one-line-solution",
                "content": "```\\nvar defangIPaddr = function (address) {\\n  return address.split(\".\").join(\"[.]\");\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar defangIPaddr = function (address) {\\n  return address.split(\".\").join(\"[.]\");\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 2441556,
                "title": "python-90-faster-and-low-memory-usage",
                "content": "```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        return address.replace(\".\", \"[.]\")\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        return address.replace(\".\", \"[.]\")\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2415896,
                "title": "c-solution-easy-and-simple",
                "content": "class Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n\\t\\n        string ans=\"\";\\n        for(int i=0; i<address.length(); i++){\\n            if(address[i]==\\'.\\') \\n                ans+=\"[.]\"; \\n            else\\n                ans+=address[i];\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n\\t\\n        string ans=\"\";\\n        for(int i=0; i<address.length(); i++){\\n            if(address[i]==\\'.\\') \\n                ans+=\"[.]\"; \\n            else\\n                ans+=address[i];\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2389486,
                "title": "c-easiest-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n     string res;\\n        for(int i=0;i<address.length();i++){\\n         if(address[i]==\\'.\\'){\\n             res+=\"[.]\";\\n             \\n         }\\n        else{\\n                res+=address[i];\\n            }\\n     }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n     string res;\\n        for(int i=0;i<address.length();i++){\\n         if(address[i]==\\'.\\'){\\n             res+=\"[.]\";\\n             \\n         }\\n        else{\\n                res+=address[i];\\n            }\\n     }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2203114,
                "title": "runtime-0-ms-faster-than-100-00-of-c-online-submissions",
                "content": "***If you lke it, Please Upvote***\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string str1 = \"[.]\";\\n        int i = 0;\\n        while(address[i] != \\'\\\\0\\') {\\n            if(address[i] == \\'.\\') {\\n                address.replace(i,1,str1);\\n                i++; //Incrementing for \\'.\\' presenting in \\'[.]\\' otherwise output will look like 255[[[[[[[.]]]]]]]100[[[[[[.]]]]]50[[[[[.]]]]]0\\n            }\\n            i++; //Incrementing for getting out of while loop\\n        }\\n        return address;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string str1 = \"[.]\";\\n        int i = 0;\\n        while(address[i] != \\'\\\\0\\') {\\n            if(address[i] == \\'.\\') {\\n                address.replace(i,1,str1);\\n                i++; //Incrementing for \\'.\\' presenting in \\'[.]\\' otherwise output will look like 255[[[[[[[.]]]]]]]100[[[[[[.]]]]]50[[[[[.]]]]]0\\n            }\\n            i++; //Incrementing for getting out of while loop\\n        }\\n        return address;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2076384,
                "title": "c-easy-sol",
                "content": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string st;\\n        for(auto ch: address){\\n            if(ch==\\'.\\'){\\n                st=st+\"[.]\";\\n            }\\n            else{\\n                st=st+ch;}\\n        }\\n        return st;       \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string st;\\n        for(auto ch: address){\\n            if(ch==\\'.\\'){\\n                st=st+\"[.]\";\\n            }\\n            else{\\n                st=st+ch;}\\n        }\\n        return st;       \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1697285,
                "title": "python-code-defanging-an-ip-address",
                "content": "```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        address=address.replace(\".\",\"[.]\")\\n        return address\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        address=address.replace(\".\",\"[.]\")\\n        return address\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1507988,
                "title": "simple-to-understand-3-different-ways-using-basic-loops-with-comments",
                "content": "**Thumbs up if you find this helpful** \\uD83D\\uDC4D\\n\\n**1. Using Split & Join**\\n\\n```\\npublic class Solution {\\n    public string DefangIPaddr(string address) {\\n        var segments = address.Split(\".\");\\n        return string.Join(\"[.]\", segments);\\n    }\\n}\\n```\\n\\n**2. Using Basic Loop**\\n\\n```\\npublic class Solution {\\n    public string DefangIPaddr(string address) {\\n        // Create new result\\n        var result = new StringBuilder();   \\n\\t\\t\\n        foreach (var ch in address) {\\n            if (ch == \\'.\\') {\\n                result.Append(\"[.]\");\\n            } else {\\n                result.Append(ch);\\n            }\\n        }        \\n        return result.ToString();\\n    }\\n}\\n```\\n\\n**3. Reconstruct New Result By Segments**\\n\\n```\\npublic class Solution {\\n    public string DefangIPaddr(string address) {\\n        var segments = new List<string>();\\n        \\n        // Get the segments in the ip address\\n        var word = new StringBuilder();\\n        foreach (var ch in address) {\\n            if (ch != \\'.\\') {\\n                word.Append(ch);\\n            } else if (word.Length > 0) {\\n                segments.Add(word.ToString());\\n                word.Clear();\\n            }\\n        }\\n        \\n        // Add in any remaining data\\n        if (word.Length > 0) {\\n            segments.Add(word.ToString());\\n        }\\n        \\n        // Build the result \\n        var result = new StringBuilder();\\n        foreach (var item in segments) {\\n            if (result.Length > 0) {\\n                result.Append(\"[.]\");\\n            }\\n            result.Append(item);\\n        }\\n        \\n        return result.ToString();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public string DefangIPaddr(string address) {\\n        var segments = address.Split(\".\");\\n        return string.Join(\"[.]\", segments);\\n    }\\n}\\n```\n```\\npublic class Solution {\\n    public string DefangIPaddr(string address) {\\n        // Create new result\\n        var result = new StringBuilder();   \\n\\t\\t\\n        foreach (var ch in address) {\\n            if (ch == \\'.\\') {\\n                result.Append(\"[.]\");\\n            } else {\\n                result.Append(ch);\\n            }\\n        }        \\n        return result.ToString();\\n    }\\n}\\n```\n```\\npublic class Solution {\\n    public string DefangIPaddr(string address) {\\n        var segments = new List<string>();\\n        \\n        // Get the segments in the ip address\\n        var word = new StringBuilder();\\n        foreach (var ch in address) {\\n            if (ch != \\'.\\') {\\n                word.Append(ch);\\n            } else if (word.Length > 0) {\\n                segments.Add(word.ToString());\\n                word.Clear();\\n            }\\n        }\\n        \\n        // Add in any remaining data\\n        if (word.Length > 0) {\\n            segments.Add(word.ToString());\\n        }\\n        \\n        // Build the result \\n        var result = new StringBuilder();\\n        foreach (var item in segments) {\\n            if (result.Length > 0) {\\n                result.Append(\"[.]\");\\n            }\\n            result.Append(item);\\n        }\\n        \\n        return result.ToString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1475717,
                "title": "c-simple-solution-beginner-friendly",
                "content": "```\\nstring defangIPaddr(string address) \\n    {\\n        string answer;\\n        for(int i=0;i<address.size();i++)\\n        {\\n            if(address[i]==\\'.\\')\\n            {\\n                answer=answer+\"[.]\";\\n            }\\n            else \\n                answer=answer+address[i];\\n        }\\n        return answer;\\n    }\\n```\\n**Please Upvote if it helped you !!!\\nHappu Coding :)**",
                "solutionTags": [],
                "code": "```\\nstring defangIPaddr(string address) \\n    {\\n        string answer;\\n        for(int i=0;i<address.size();i++)\\n        {\\n            if(address[i]==\\'.\\')\\n            {\\n                answer=answer+\"[.]\";\\n            }\\n            else \\n                answer=answer+address[i];\\n        }\\n        return answer;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1446464,
                "title": "python-solutions",
                "content": "Method-1\\n```\\ndef defangingIPAddress(ipAddress):\\n    to_replace = \\'.\\'\\n    replaced = \\'[.]\\'\\n    new_string = \\'\\'\\n    for elem in ipAddress:\\n        if elem == to_replace:\\n            new_string += replaced\\n        else:\\n            new_string += elem\\n    return new_string\\n```\\n\\nMethod-2\\n```\\ndef defangingIPAddress(ipAddress):\\n    return ipAddress.replace(\\'.\\', \\'[.]\\')\\n```\\nMethod-3\\n```\\ndef defangingIPAddress(ipAddress):\\n    return \\'[.]\\'.join(ipAddress.split(\\'.\\'))\\n```\\n",
                "solutionTags": [],
                "code": "```\\ndef defangingIPAddress(ipAddress):\\n    to_replace = \\'.\\'\\n    replaced = \\'[.]\\'\\n    new_string = \\'\\'\\n    for elem in ipAddress:\\n        if elem == to_replace:\\n            new_string += replaced\\n        else:\\n            new_string += elem\\n    return new_string\\n```\n```\\ndef defangingIPAddress(ipAddress):\\n    return ipAddress.replace(\\'.\\', \\'[.]\\')\\n```\n```\\ndef defangingIPAddress(ipAddress):\\n    return \\'[.]\\'.join(ipAddress.split(\\'.\\'))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1408967,
                "title": "java-100-faster-and-93-48-less-memory-usage",
                "content": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n    StringBuilder sb = new StringBuilder();\\n    \\n    for(char a : address.toCharArray()){\\n        if(a == \\'.\\') sb.append(\"[.]\");\\n        else sb.append(a);\\n    }\\n    \\n    return sb.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n    StringBuilder sb = new StringBuilder();\\n    \\n    for(char a : address.toCharArray()){\\n        if(a == \\'.\\') sb.append(\"[.]\");\\n        else sb.append(a);\\n    }\\n    \\n    return sb.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1395843,
                "title": "very-very-simple-c-solution-for-beginners",
                "content": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        int n=address.length();\\n        string s=\"\";\\n        for(int i=0;i<n;i++){\\n            if(address[i]==\\'.\\'){\\n                s.push_back(\\'[\\');\\n                s.push_back(address[i]);\\n                s.push_back(\\']\\');\\n            }else{\\n                s.push_back(address[i]);\\n            }\\n        }\\n        return s;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        int n=address.length();\\n        string s=\"\";\\n        for(int i=0;i<n;i++){\\n            if(address[i]==\\'.\\'){\\n                s.push_back(\\'[\\');\\n                s.push_back(address[i]);\\n                s.push_back(\\']\\');\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1265106,
                "title": "simple-java-solution-0ms-approach-100-faster",
                "content": "0ms Approach -\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\",\"[.]\");   //replacing all the occurences of  \".\"  with \"[.]\" and returning it\\n    }\\n}\\n```\\n\\nAnother approach(9ms Runtime)\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        String str = \"\";\\n        for(int i=0; i<address.length(); i++) {\\n\\t\\t//Replacing single occurence at a time and adding it to str\\n            if(address.charAt(i)==\\'.\\') {\\n                str = str + \"[.]\";\\n            }\\n            else {\\n                str = str + address.charAt(i);\\n            }\\n        }\\n        return str;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\",\"[.]\");   //replacing all the occurences of  \".\"  with \"[.]\" and returning it\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        String str = \"\";\\n        for(int i=0; i<address.length(); i++) {\\n\\t\\t//Replacing single occurence at a time and adding it to str\\n            if(address.charAt(i)==\\'.\\') {\\n                str = str + \"[.]\";\\n            }\\n            else {\\n                str = str + address.charAt(i);\\n            }\\n        }\\n        return str;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1258669,
                "title": "runtime-0-ms-faster-than-100-00-of-java-1-liner-solution",
                "content": "We have a predefined function replace in java which is used to find and replace all the occurrences. \\nwant to know more - visit https://www.javatpoint.com/java-string-replace\\n\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        String s = address.replace(\".\",\"[.]\");\\n        return s;\\n    }\\n}\\n```\\n\\n**Upvote** if it is helpfull.",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        String s = address.replace(\".\",\"[.]\");\\n        return s;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1179242,
                "title": "cutest-solution-ever",
                "content": "**C++**\\n```\\nstring ans = \"\";\\nfor (char c: s)\\n\\tif (c == \\'.\\') ans += \"[.]\";\\n\\telse ans += c;\\nreturn ans;\\n```\\n**Java**\\n```\\nStringBuilder sb = new StringBuilder();\\nfor (int i = 0; i < s.length(); ++i)\\n\\tif (s.charAt(i) == \\'.\\') sb.append(\"[.]\");\\n\\telse sb.append(s.charAt(i));\\nreturn sb.toString();\\n```\\n**If you liked it, even a little bit then pls consider giving this solution a Upvote\\nThank You :)**",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "```\\nstring ans = \"\";\\nfor (char c: s)\\n\\tif (c == \\'.\\') ans += \"[.]\";\\n\\telse ans += c;\\nreturn ans;\\n```\n```\\nStringBuilder sb = new StringBuilder();\\nfor (int i = 0; i < s.length(); ++i)\\n\\tif (s.charAt(i) == \\'.\\') sb.append(\"[.]\");\\n\\telse sb.append(s.charAt(i));\\nreturn sb.toString();\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1167692,
                "title": "runtime-0-ms-faster-than-100-00",
                "content": "Memory Usage: 36.7 MB, less than 94.48%\\n\\nclass Solution {\\n    public String defangIPaddr(String address){\\n        return address.replace(\".\",\"[.]\");\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public String defangIPaddr(String address){\\n        return address.replace(\".\",\"[.]\");\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1137132,
                "title": "c-lambda-replace-runtime-80-ms-faster-than-85-84",
                "content": "```\\n public string DefangIPaddr( string address ) \\n        => address.Replace( \".\" ,  \"[.]\" );\\n```",
                "solutionTags": [],
                "code": "```\\n public string DefangIPaddr( string address ) \\n        => address.Replace( \".\" ,  \"[.]\" );\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1125365,
                "title": "python-3-one-liner",
                "content": "```\\n    def defangIPaddr(self, address: str) -> str:\\n        return address.replace(\".\" , \"[.]\")\\n```",
                "solutionTags": [],
                "code": "```\\n    def defangIPaddr(self, address: str) -> str:\\n        return address.replace(\".\" , \"[.]\")\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1116190,
                "title": "c-runtime-0ms-faster-than-100-submissions",
                "content": "```\\nchar * defangIPaddr(char * address){\\n    char *result;\\n    //Max size 22: 12 IP digits + 3 . + 6 braces + 1 null terminator\\n    result = (char*)malloc(22*sizeof(char));\\n    int i = 0, j = 0;\\n    for(i = 0; address[i] != \\'\\\\0\\'; i++){\\n        if (address[i] == \\'.\\') {\\n            result[j] = \\'[\\';\\n            result[j+1] = \\'.\\';\\n            result[j+2] = \\']\\';\\n            j = j+ 3;\\n        } else{\\n            result[j++] = address[i];\\n        }\\n    }\\n\\n    result[j] = \\'\\\\0\\';\\n    return result;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nchar * defangIPaddr(char * address){\\n    char *result;\\n    //Max size 22: 12 IP digits + 3 . + 6 braces + 1 null terminator\\n    result = (char*)malloc(22*sizeof(char));\\n    int i = 0, j = 0;\\n    for(i = 0; address[i] != \\'\\\\0\\'; i++){\\n        if (address[i] == \\'.\\') {\\n            result[j] = \\'[\\';\\n            result[j+1] = \\'.\\';\\n            result[j+2] = \\']\\';\\n            j = j+ 3;\\n        } else{\\n            result[j++] = address[i];\\n        }\\n    }\\n\\n    result[j] = \\'\\\\0\\';\\n    return result;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1045209,
                "title": "javascript-oneliner-replace-with-regex-solution",
                "content": "```\\nconst defangIPaddr = address => address.replace(/\\\\./g, \\'[.]\\')\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst defangIPaddr = address => address.replace(/\\\\./g, \\'[.]\\')\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1026311,
                "title": "one-line-in-java",
                "content": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\", \"[.]\");\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\", \"[.]\");\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 941201,
                "title": "python-simple-solution",
                "content": "#### Solution 1: Using replace\\n\\n```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        return address.replace(\\'.\\',\\'[.]\\')\\n```\\n\\n#### Solution 2: Using join and split\\n\\n```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        return \\'[.]\\'.join(address.split(\\'.\\'))\\n```\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        return address.replace(\\'.\\',\\'[.]\\')\\n```\n```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        return \\'[.]\\'.join(address.split(\\'.\\'))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 930244,
                "title": "fastest-than-100-0-in-c",
                "content": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        // string s;\\n        vector<int> v;\\n       for(auto x:address)\\n       {\\n           if(x==\\'.\\'){v.push_back(\\'[\\');}\\n           v.push_back(x);\\n           if(x==\\'.\\'){v.push_back(\\']\\');}\\n       }\\n        string s={v.begin() , v.end()};\\n        return s;\\n    }\\n}; \\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        // string s;\\n        vector<int> v;\\n       for(auto x:address)\\n       {\\n           if(x==\\'.\\'){v.push_back(\\'[\\');}\\n           v.push_back(x);\\n           if(x==\\'.\\'){v.push_back(\\']\\');}\\n       }\\n        string s={v.begin() , v.end()};\\n        return s;\\n    }\\n}; \\n```",
                "codeTag": "Java"
            },
            {
                "id": 817488,
                "title": "swift-1-liner-readable-solution",
                "content": "Just use the standard swift library replacingOcurrences. No need do complex & unreadable stuff.\\n\\n```\\nfunc defangIPaddr(_ address: String) -> String {\\n\\treturn address.replacingOccurrences(of: \".\", with: \"[.]\")\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nfunc defangIPaddr(_ address: String) -> String {\\n\\treturn address.replacingOccurrences(of: \".\", with: \"[.]\")\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 760391,
                "title": "2-line-c",
                "content": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) \\n    {\\n        regex re(\"\\\\\\\\.\"); \\n        return regex_replace(address, re, \"[.]\");                \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) \\n    {\\n        regex re(\"\\\\\\\\.\"); \\n        return regex_replace(address, re, \"[.]\");                \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 724309,
                "title": "one-line-java-code-so-easy-i-don-t-know-why-people-making-it-so-compicated",
                "content": "class Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\",\"[.]\");\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\",\"[.]\");\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 666213,
                "title": "java-1-line-of-code-29-100",
                "content": "```\\npublic String defangIPaddr(String address) {\\n    return address.replaceAll(\"\\\\\\\\.\", \"[.]\");\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic String defangIPaddr(String address) {\\n    return address.replaceAll(\"\\\\\\\\.\", \"[.]\");\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 629453,
                "title": "short-and-sweet-c-solution",
                "content": "\\tstring defangIPaddr(string address)\\n\\t{\\n\\t\\tstring result;\\n\\n\\t\\tfor (size_t i = 0; i < address.length(); i++)\\n\\t\\t{\\n\\t\\t\\tif (address[i] == \\'.\\')\\n\\t\\t\\t{\\n\\t\\t\\t\\tresult.append(\"[.]\");\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tresult.append(1, address[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn result;\\n\\t}",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "\\tstring defangIPaddr(string address)\\n\\t{\\n\\t\\tstring result;\\n\\n\\t\\tfor (size_t i = 0; i < address.length(); i++)\\n\\t\\t{\\n\\t\\t\\tif (address[i] == \\'.\\')\\n\\t\\t\\t{\\n\\t\\t\\t\\tresult.append(\"[.]\");\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tresult.append(1, address[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn result;\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 562378,
                "title": "java-one-liner",
                "content": "```\\nreturn address.replaceAll(\"\\\\\\\\.\", \"[.]\")\\n```",
                "solutionTags": [],
                "code": "```\\nreturn address.replaceAll(\"\\\\\\\\.\", \"[.]\")\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 560937,
                "title": "python-one-liner",
                "content": "this was easy with python\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        return address.replace(\".\",\"[.]\")\\n",
                "solutionTags": [],
                "code": "this was easy with python\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        return address.replace(\".\",\"[.]\")\\n",
                "codeTag": "Java"
            },
            {
                "id": 555145,
                "title": "c-100-time-and-100-space",
                "content": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string a;\\n        int x = address.length();\\n        for(int i =0;i<x;i++){\\n            if(address[i] == \\'.\\'){\\n                a.push_back(\\'[\\');\\n                a.push_back(\\'.\\');\\n                a.push_back(\\']\\');\\n                \\n            }\\n            else{\\n                a.push_back(address[i]);\\n            }\\n        }\\n        return a;\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string a;\\n        int x = address.length();\\n        for(int i =0;i<x;i++){\\n            if(address[i] == \\'.\\'){\\n                a.push_back(\\'[\\');\\n                a.push_back(\\'.\\');\\n                a.push_back(\\']\\');\\n                \\n            }\\n            else{\\n                a.push_back(address[i]);\\n            }\\n        }\\n        return a;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 465595,
                "title": "100-00-faster-in-runtime-and-memory",
                "content": "Runtime: **0 ms**, faster than 1**00.00%** of C++ online submissions for Defanging an IP Address.\\nMemory Usage: **8.1** MB, less than **100.00%** of C++ online submissions for Defanging an IP Address.\\n\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string defangIP(\"\");\\n        for(char c: address)\\n            (c==\\'.\\')? defangIP+=\"[.]\":defangIP+=c;\\n        return defangIP;\\n    }\\n};\\n```\\n\\n-----\\nRuntime: **0 ms**, faster than **100.00%** of C++ online submissions for Defanging an IP Address.\\nMemory Usage: **8 MB**, less than **100.00%** of C++ online submissions for Defanging an IP Address.\\n```\\nclass Solution { // isdigit(char) stl\\npublic:\\n    string defangIPaddr(string address) {\\n        string defangIP(\"\");\\n        for(char c: address){\\n            if(isdigit(c)) defangIP+=c;\\n            else defangIP+=\"[.]\";\\n        }\\n        return defangIP;\\n    }\\n};\\n```\\n\\n----\\nRuntime: **4 ms**, faster than **54.08%** of C++ online submissions for Defanging an IP Address.\\nMemory Usage: **8 MB**, less than **100.00%** of C++ online submissions for Defanging an IP Address.\\n```\\nclass Solution { // using substr(pos,length) and substr(pos) stl\\npublic:\\n    string defangIPaddr(string address) {\\n        for(int i(address.length()-1);i>=0;i--){\\n            if(address[i]==\\'.\\')\\n                address = address.substr(0,i) + \"[.]\" + address.substr(i+1);\\n        }\\n        return address;\\n    }\\n};\\n```\\nWe start looking from the second to last position because we know the last character in address will never be \\'.\\'\\nWe look backward through the string because we don\\'t want to mess up our indices when we start inserting the brackets.\\n\\n----\\nRuntime: **4 ms**, faster than **54.08%** of C++ online submissions for Defanging an IP Address.\\nMemory Usage: 8.1 MB, less than **100.00%** of C++ online submissions for Defanging an IP Address.\\n```\\nclass Solution { // using replace(pos,length,withStr) stl\\npublic:\\n    string defangIPaddr(string address) {\\n        for(int i(address.length()-1);i>=0;i--){\\n            if(address[i]==\\'.\\')\\n                address = address.replace(i,1,\"[.]\");\\n        }\\n        return address;\\n    }\\n};\\n```\\n\\n----\\nRuntime: **12 ms**, faster than **54.08%** of C++ online submissions for Defanging an IP Address. **O(n^2)**\\nMemory Usage: **11.5 MB**, less than **100.00%** of C++ online submissions for Defanging an IP Address. \\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        return regex_replace(address,regex(\"[.]\"),\"[.]\");\\n    }\\n};\\n```\\n\\n---- \\nExtra\\n\\n----\\n\\n```\\nchar * defangIPaddr(char * address){\\n    char *re = malloc(24);\\n    char *out = re;\\n    while (*address) {\\n        if (*address == \\'.\\') {\\n            *out++ = \\'[\\';\\n            *out++ = \\'.\\';\\n            *out++ = \\']\\';\\n            *address++;\\n        } else {\\n            *out++ = *address++;\\n        }\\n    }\\n    *out = \\'\\\\0\\';\\n    return re;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string defangIP(\"\");\\n        for(char c: address)\\n            (c==\\'.\\')? defangIP+=\"[.]\":defangIP+=c;\\n        return defangIP;\\n    }\\n};\\n```\n```\\nclass Solution { // isdigit(char) stl\\npublic:\\n    string defangIPaddr(string address) {\\n        string defangIP(\"\");\\n        for(char c: address){\\n            if(isdigit(c)) defangIP+=c;\\n            else defangIP+=\"[.]\";\\n        }\\n        return defangIP;\\n    }\\n};\\n```\n```\\nclass Solution { // using substr(pos,length) and substr(pos) stl\\npublic:\\n    string defangIPaddr(string address) {\\n        for(int i(address.length()-1);i>=0;i--){\\n            if(address[i]==\\'.\\')\\n                address = address.substr(0,i) + \"[.]\" + address.substr(i+1);\\n        }\\n        return address;\\n    }\\n};\\n```\n```\\nclass Solution { // using replace(pos,length,withStr) stl\\npublic:\\n    string defangIPaddr(string address) {\\n        for(int i(address.length()-1);i>=0;i--){\\n            if(address[i]==\\'.\\')\\n                address = address.replace(i,1,\"[.]\");\\n        }\\n        return address;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        return regex_replace(address,regex(\"[.]\"),\"[.]\");\\n    }\\n};\\n```\n```\\nchar * defangIPaddr(char * address){\\n    char *re = malloc(24);\\n    char *out = re;\\n    while (*address) {\\n        if (*address == \\'.\\') {\\n            *out++ = \\'[\\';\\n            *out++ = \\'.\\';\\n            *out++ = \\']\\';\\n            *address++;\\n        } else {\\n            *out++ = *address++;\\n        }\\n    }\\n    *out = \\'\\\\0\\';\\n    return re;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 461799,
                "title": "go",
                "content": "```golang\\nimport \"strings\"\\nfunc defangIPaddr(address string) string {\\n    return strings.Replace(address,\".\",\"[.]\",-1)\\n}\\n```",
                "solutionTags": [],
                "code": "```golang\\nimport \"strings\"\\nfunc defangIPaddr(address string) string {\\n    return strings.Replace(address,\".\",\"[.]\",-1)\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 444826,
                "title": "javascript-one-liner-less-memory-than-100-of-other-solutions",
                "content": "```\\nvar defangIPaddr = function(address) {\\n    return address.split(\\'.\\').join(\\'[.]\\')\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nvar defangIPaddr = function(address) {\\n    return address.split(\\'.\\').join(\\'[.]\\')\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 389729,
                "title": "ruby-code-20ms-faster-than-99-77",
                "content": "**Runtime:** 20 ms, faster than 99.77% of Ruby submissions.\\n**Memory Usage:** 9.2 MB, less than 100.00% of Ruby submissions.\\n\\n```ruby\\ndef defang_i_paddr(address)\\n  address.split(\\'.\\').join(\\'[.]\\')\\nend\\n```\\n\\n[Why `split` & `join` is faster than `gsub` (stackoverflow)](https://stackoverflow.com/a/29956753/9440171)\\n",
                "solutionTags": [],
                "code": "```ruby\\ndef defang_i_paddr(address)\\n  address.split(\\'.\\').join(\\'[.]\\')\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 385850,
                "title": "simplest-of-c-0ms",
                "content": "```\\nchar * defangIPaddr(char * addr){\\n\\n    char* ret = malloc(22);\\n    int f[4];\\n\\t\\n    sscanf(addr, \"%d.%d.%d.%d\", &f[0], &f[1], &f[2], &f[3]);\\n    sprintf(ret, \"%d[.]%d[.]%d[.]%d\", f[0], f[1], f[2], f[3]);\\n    \\n    return ret;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nchar * defangIPaddr(char * addr){\\n\\n    char* ret = malloc(22);\\n    int f[4];\\n\\t\\n    sscanf(addr, \"%d.%d.%d.%d\", &f[0], &f[1], &f[2], &f[3]);\\n    sprintf(ret, \"%d[.]%d[.]%d[.]%d\", f[0], f[1], f[2], f[3]);\\n    \\n    return ret;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 359714,
                "title": "python3-regex-solution",
                "content": "```import re\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        newadr = re.sub(\"\\\\.\",\"[.]\",address)\\n        return newadr\\n\\t\\n100% memory,99.8% speed,20ms",
                "solutionTags": [
                    "Python"
                ],
                "code": "```import re\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        newadr = re.sub(\"\\\\.\",\"[.]\",address)\\n        return newadr\\n\\t\\n100% memory,99.8% speed,20ms",
                "codeTag": "Java"
            },
            {
                "id": 342412,
                "title": "javascript",
                "content": "```\\nvar defangIPaddr = function(address) {\\n  let str = \\'\\'\\n  \\n  for (let i in address){\\n      address[i] !== \\'.\\' ? str += address[i] : str += \\'[.]\\'\\n  }\\n  return str\\n  \\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar defangIPaddr = function(address) {\\n  let str = \\'\\'\\n  \\n  for (let i in address){\\n      address[i] !== \\'.\\' ? str += address[i] : str += \\'[.]\\'\\n  }\\n  return str\\n  \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 330471,
                "title": "javascript-one-liner",
                "content": "```\\n/**\\n * @param {string} address\\n * @return {string}\\n */\\nvar defangIPaddr = function(address) {\\n    return address.replace(/[.]/g, \\'[.]\\');\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} address\\n * @return {string}\\n */\\nvar defangIPaddr = function(address) {\\n    return address.replace(/[.]/g, \\'[.]\\');\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 329803,
                "title": "100-very-very-easy-to-understand-python-code",
                "content": "class Solution(object):\\n    def defangIPaddr(self, address):\\n        \"\"\"\\n        :type address: str\\n        :rtype: str\\n        \"\"\"\\n        \\n        a = list(address)\\n        for i in range(len(a)):\\n            if a[i] == \\'.\\':\\n                a[i] = \\'[.]\\'\\n                \\n        S = \"\".join(a)\\n        \\n        \\n            \\n        return S",
                "solutionTags": [],
                "code": "class Solution(object):\\n    def defangIPaddr(self, address):\\n        \"\"\"\\n        :type address: str\\n        :rtype: str\\n        \"\"\"\\n        \\n        a = list(address)\\n        for i in range(len(a)):\\n            if a[i] == \\'.\\':\\n                a[i] = \\'[.]\\'\\n                \\n        S = \"\".join(a)\\n        \\n        \\n            \\n        return S",
                "codeTag": "Java"
            },
            {
                "id": 4008980,
                "title": "easy-efficient-code-for-beginners-using-stringbuilder",
                "content": "# Intuition\\nFirst thought was to create a new variable and store the values while simultaneousely checking for the dots(\\'.\\'). Using a regular string will waste a lot of memory hence used StringBuilder\\n\\n# Approach\\nVery Simple and beats 100%\\nkeep adding characters of string address into a StringBuilder variable build until you find a dot. if character is dot then add [.] into build.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder build=new StringBuilder();\\n        for(int i=0;i<address.length();i++)\\n        {\\n            if(address.charAt(i)==\\'.\\')\\n            {\\n                build.append(\"[.]\");\\n                continue;\\n            }\\n            build.append(address.charAt(i));\\n        }\\n        return build.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder build=new StringBuilder();\\n        for(int i=0;i<address.length();i++)\\n        {\\n            if(address.charAt(i)==\\'.\\')\\n            {\\n                build.append(\"[.]\");\\n                continue;\\n            }\\n            build.append(address.charAt(i));\\n        }\\n        return build.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3979906,
                "title": "waste-of-time-but-still",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n*String has replace method which takes two parameters String.replace(\"old one\",\"new one\");\\n1st one is what to replace \\n2nd one for what to replace instead.*\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\",\"[.]\");\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\",\"[.]\");\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3908104,
                "title": "100-easy-and-optimised-solution-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder sb=new StringBuilder();\\n       for(int i=0;i<address.length();i++){\\n           if(address.charAt(i)==\\'.\\'){\\n               sb.append(\"[\");\\n               sb.append(\".\");\\n               sb.append(\"]\");\\n           }\\n           else{\\n               sb.append(address.charAt(i));\\n           }\\n       }\\n       String str=sb.toString(); \\n       return str;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder sb=new StringBuilder();\\n       for(int i=0;i<address.length();i++){\\n           if(address.charAt(i)==\\'.\\'){\\n               sb.append(\"[\");\\n               sb.append(\".\");\\n               sb.append(\"]\");\\n           }\\n           else{\\n               sb.append(address.charAt(i));\\n           }\\n       }\\n       String str=sb.toString(); \\n       return str;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3890213,
                "title": "c-easy-one-line-solution-with-explanation",
                "content": "\\n# Approach\\n\\nI used ```string.Split(\".\")``` method to get input string seperated by dots. So, that method returns an array of strings. Then I used ```string.Join(\"[.]\")``` to convert that array into one string while adding \"[.]\" between and returned via lambda expression. \\n\\n# Code\\n```\\npublic class Solution {\\n    public string DefangIPaddr(string address) => string.Join(\"[.]\", address.Split(\".\"));\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```string.Split(\".\")```\n```string.Join(\"[.]\")```\n```\\npublic class Solution {\\n    public string DefangIPaddr(string address) => string.Join(\"[.]\", address.Split(\".\"));\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3864195,
                "title": "beats-100-java-one-line-solution-beginner-friendly-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\", \"[.]\");\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\", \"[.]\");\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3687192,
                "title": "easy-solution-c",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nInside the defangIPaddr function, we iterate through each character c in the input address. If c is a period (\\'.\\'), we append \"[.]\" to the defangedAddress string. Otherwise, we simply append c to defangedAddress.\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address)\\n   {\\n       string defang;\\n       \\n       for(char c:address)\\n       {\\n           if(c==\\'.\\')\\n           {\\n               defang.push_back(\\'[\\');\\n               defang.push_back(\\'.\\');\\n               defang.push_back(\\']\\');\\n           }\\n           else\\n           {\\n               defang.push_back(c);\\n           }\\n       }\\n       return defang;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address)\\n   {\\n       string defang;\\n       \\n       for(char c:address)\\n       {\\n           if(c==\\'.\\')\\n           {\\n               defang.push_back(\\'[\\');\\n               defang.push_back(\\'.\\');\\n               defang.push_back(\\']\\');\\n           }\\n           else\\n           {\\n               defang.push_back(c);\\n           }\\n       }\\n       return defang;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3566642,
                "title": "beginners-friendly",
                "content": "\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder t= new StringBuilder(address);\\n        StringBuilder s= new StringBuilder();\\n        for(int i=0;i<address.length();i++){\\n            if(address.charAt(i)==\\'.\\'){\\n                s.append(\"[.]\");\\n            }else s.append(address.charAt(i));\\n\\n        }\\n        return s.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder t= new StringBuilder(address);\\n        StringBuilder s= new StringBuilder();\\n        for(int i=0;i<address.length();i++){\\n            if(address.charAt(i)==\\'.\\'){\\n                s.append(\"[.]\");\\n            }else s.append(address.charAt(i));\\n\\n        }\\n        return s.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3541617,
                "title": "defanging-an-ip-address-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        int i=0;\\n        string defanged_ip_address;\\n        for(i=0 ; i<address.length() ; i++)\\n        {\\n            if(address[i]==\\'.\\')\\n            {\\n                defanged_ip_address += \"[.]\";\\n            }\\n            else\\n            {\\n                defanged_ip_address += address[i];\\n            }\\n        }\\n        return defanged_ip_address;\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/1db8f363-7ff2-4424-8ed0-adefc3973c07_1684498679.514323.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        int i=0;\\n        string defanged_ip_address;\\n        for(i=0 ; i<address.length() ; i++)\\n        {\\n            if(address[i]==\\'.\\')\\n            {\\n                defanged_ip_address += \"[.]\";\\n            }\\n            else\\n            {\\n                defanged_ip_address += address[i];\\n            }\\n        }\\n        return defanged_ip_address;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3493485,
                "title": "one-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nvar defangIPaddr = function(address) {\\n \\n return address.replaceAll(\\'.\\', \\'[.]\\');\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\nvar defangIPaddr = function(address) {\\n \\n return address.replaceAll(\\'.\\', \\'[.]\\');\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3399758,
                "title": "simple-go-solution-using-buffer",
                "content": "\\n# Code\\n```\\nfunc defangIPaddr(address string) string {\\n\\tvar b bytes.Buffer\\n\\tfor _, c := range address {\\n\\t\\tif c == \\'.\\' {\\n\\t\\t\\tb.WriteString(\"[.]\")\\n\\t\\t} else {\\n\\t\\t\\tb.WriteRune(c)\\n\\t\\t}\\n\\t}\\n\\treturn b.String()\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc defangIPaddr(address string) string {\\n\\tvar b bytes.Buffer\\n\\tfor _, c := range address {\\n\\t\\tif c == \\'.\\' {\\n\\t\\t\\tb.WriteString(\"[.]\")\\n\\t\\t} else {\\n\\t\\t\\tb.WriteRune(c)\\n\\t\\t}\\n\\t}\\n\\treturn b.String()\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3358474,
                "title": "c-easy-solution-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string a;\\n\\n        \\n        for(int i =0;i<address.size();i++){\\n            if(address[i]==\\'.\\'){\\n                a.push_back(\\'[\\');\\n                a.push_back(\\'.\\');\\n                a.push_back(\\']\\');\\n            }\\n            else{\\n                a.push_back(address[i]);\\n            }\\n        }\\n        return a;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string a;\\n\\n        \\n        for(int i =0;i<address.size();i++){\\n            if(address[i]==\\'.\\'){\\n                a.push_back(\\'[\\');\\n                a.push_back(\\'.\\');\\n                a.push_back(\\']\\');\\n            }\\n            else{\\n                a.push_back(address[i]);\\n            }\\n        }\\n        return a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3284617,
                "title": "1-line-solution-beats-100-runtime-0ms-o-n",
                "content": "\\n\\n# Complexity            \\n\\n\\n- Time complexity:\\nO(n)\\n# Code\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\", \"[.]\");\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\", \"[.]\");\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3275843,
                "title": "java-super-easy-one-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\",\"[.]\");\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\",\"[.]\");\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3274516,
                "title": "one-line-code-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\", \"[.]\");\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        return address.replace(\".\", \"[.]\");\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3271905,
                "title": "defanging-an-ip-address-c-easy-approach-fast-simple",
                "content": "**PLEASEUPVOTE, IF YOU LIKE\\u2764\\uFE0F\\u2764\\uFE0F**\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) \\n    {\\n        string ans;\\n        for(int i=0;i<address.length();i++)\\n        {\\n            if(address[i]==\\'.\\')\\n            {\\n                ans=ans+\"[.]\";\\n            }\\n            else\\n                ans=ans+address[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) \\n    {\\n        string ans;\\n        for(int i=0;i<address.length();i++)\\n        {\\n            if(address[i]==\\'.\\')\\n            {\\n                ans=ans+\"[.]\";\\n            }\\n            else\\n                ans=ans+address[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3235317,
                "title": "beat-100-easy-cpp-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string ans;\\n        for(int i=0;i<address.size();i++)\\n        {\\n            if(address[i]==\\'.\\')\\n            {\\n                ans.push_back(\\'[\\');\\n               ans.push_back(\\'.\\');\\n               ans.push_back(\\']\\');\\n\\n            }\\n             else\\n        {\\n            ans.push_back(address[i]);\\n        }\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string ans;\\n        for(int i=0;i<address.size();i++)\\n        {\\n            if(address[i]==\\'.\\')\\n            {\\n                ans.push_back(\\'[\\');\\n               ans.push_back(\\'.\\');\\n               ans.push_back(\\']\\');\\n\\n            }\\n             else\\n        {\\n            ans.push_back(address[i]);\\n        }\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3224266,
                "title": "simple-python-code-with-if-else-statement",
                "content": "# Approach\\nsimple approch\\n\\n# Code\\n```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        s = \\'\\'\\n        for i in address:\\n            if i == \\'.\\': s+=\\'[.]\\'\\n            else: s+=i\\n        return s\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def defangIPaddr(self, address: str) -> str:\\n        s = \\'\\'\\n        for i in address:\\n            if i == \\'.\\': s+=\\'[.]\\'\\n            else: s+=i\\n        return s\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3195145,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n\\n    string ans;\\n    for (int i = 0; i < address.size(); i++)\\n    {\\n        if (address[i] == \\'.\\')\\n        {\\n            ans.push_back(\\'[\\');\\n            ans.push_back(\\'.\\');\\n            ans.push_back(\\']\\');\\n        }\\n        else\\n        {\\n            ans.push_back(address[i]);\\n        }\\n    }\\n    return ans;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n\\n    string ans;\\n    for (int i = 0; i < address.size(); i++)\\n    {\\n        if (address[i] == \\'.\\')\\n        {\\n            ans.push_back(\\'[\\');\\n            ans.push_back(\\'.\\');\\n            ans.push_back(\\']\\');\\n        }\\n        else\\n        {\\n            ans.push_back(address[i]);\\n        }\\n    }\\n    return ans;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3176670,
                "title": "simple-c-code-easy-beats-100",
                "content": "Runtime : Beats 100%\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string res=\"\";\\n        for(auto i: address){\\n            if(i==\\'.\\'){\\n                res=res+\"[.]\";\\n            }else{\\n                res=res+i;\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```\\nHope you liked the implementation of the code, if you like it feel free to upvote \\uD83D\\uDC4D",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string res=\"\";\\n        for(auto i: address){\\n            if(i==\\'.\\'){\\n                res=res+\"[.]\";\\n            }else{\\n                res=res+i;\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3168477,
                "title": "one-line-in-python",
                "content": "```\\nclass Solution:\\n    def defangIPaddr(self, a: str) -> str:\\n        a = a.replace(\\'.\\',\"[.]\")\\n        return a\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def defangIPaddr(self, a: str) -> str:\\n        a = a.replace(\\'.\\',\"[.]\")\\n        return a\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3125746,
                "title": "c-easy-solution",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nLoop through the address checking for . and if it finds it, it will replace it with [.]\\nthen return that string\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\no(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string ans=\"\";\\n        for(int i=0;i<address.size();i++){\\n            if(address[i]==\\'.\\'){\\n                ans=ans+\"[.]\";\\n            }\\n            else{\\n                ans=ans+address[i];\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string ans=\"\";\\n        for(int i=0;i<address.size();i++){\\n            if(address[i]==\\'.\\'){\\n                ans=ans+\"[.]\";\\n            }\\n            else{\\n                ans=ans+address[i];\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3083538,
                "title": "easiest-solution-c-with-0ms-beats-100-of-solutions",
                "content": "\\n# Approach\\nLoop through the address checking for `.` and if it finds it, it will replace it with `[.]`\\nthen return that string\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string temp {};\\n        for(int i {};i<address.size();i++){ if(address[i]==\\'.\\') temp+=\"[.]\";else temp+=address[i];}\\n        return temp;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string temp {};\\n        for(int i {};i<address.size();i++){ if(address[i]==\\'.\\') temp+=\"[.]\";else temp+=address[i];}\\n        return temp;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2901064,
                "title": "simple-kotlin-solution-without-replace-function",
                "content": "# Useful links for StringBuilder() \\nhttps://medium.com/@ramazanbullet/what-is-stringbuilder-in-kotlin-729adc76dc31\\n# Code\\n```\\nclass Solution {\\n    fun defangIPaddr(address: String): String {\\n       // Defang the given address\\n    val defanged = StringBuilder()\\n    for (ch in address) {\\n        if (ch == \\'.\\') {\\n            defanged.append(\"[.]\")\\n        } else {\\n            defanged.append(ch)\\n        }\\n    }\\n    return defanged.toString()\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun defangIPaddr(address: String): String {\\n       // Defang the given address\\n    val defanged = StringBuilder()\\n    for (ch in address) {\\n        if (ch == \\'.\\') {\\n            defanged.append(\"[.]\")\\n        } else {\\n            defanged.append(ch)\\n        }\\n    }\\n    return defanged.toString()\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2860236,
                "title": "simple-c-solution-easy-to-understand",
                "content": "**Intuition:**\\n\\n---\\nSimple replace \".\" with \"[.]\";\\nand return string as answer.\\n\\n---\\n**Solution:**\\n\\n---\\n```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string ans =\"\";\\n\\n        for(char x:address)\\n        {\\n            if(x ==\\'.\\')\\n               ans = ans + \"[.]\";\\n            else\\n               ans = ans + x; \\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n---\\n**Analysis:**\\n\\n**Time Complexity:** ```O(n)```  Where n is the length of the string.\\n**Space Complexity:** ```O(n)```\\n\\n---\\nIf this solution Helps you then please ```UPVOTE```.\\nTill then **Keep Learning, Keep Growing !!!!**\\n\\nThank You!!!\\n\\n---",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string defangIPaddr(string address) {\\n        string ans =\"\";\\n\\n        for(char x:address)\\n        {\\n            if(x ==\\'.\\')\\n               ans = ans + \"[.]\";\\n            else\\n               ans = ans + x; \\n        }\\n        return ans;\\n    }\\n};\\n```\n```O(n)```\n```O(n)```\n```UPVOTE```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1756452,
                "content": [
                    {
                        "username": "TavisTheEngineer",
                        "content": "Can we stop putting solutions in the discussion area. People are looking for tips and hints in this area, not the answer."
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "cavidanbagiri",
                        "content": "l agree with you. "
                    },
                    {
                        "username": "alectr",
                        "content": "var defangIPaddr = function(address) {\\n  return address.split(\\'.\\').join(\\'[.]\\');\\n};"
                    },
                    {
                        "username": "Zaki-1337",
                        "content": "[@riskostorm](/riskostorm) JS has str.replaceAll(\\'.\\' , \\'[.]\\') \\uD83D\\uDE0F"
                    },
                    {
                        "username": "riskofstorm",
                        "content": "str.replace is better, less methods to call if javascript have that in built-ins. idk! Python does!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "user5278r",
                        "content": "I\\'ve noticed there are a lot of dislikes for this problem, why? It\\'s an easy problem for a beginner, why to dislike it so hard? =)) Lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "abandonedforlife",
                        "content": "this is not an O(n) solution but a constant time operation and constant space operation.\\n\\na valid IPv4 address is dependent on the number of bits which is 32 (4 bytes).\\nthe input string will never exceed 255.255.255.255 so in the worst case scenario this is the length of the string."
                    },
                    {
                        "username": "rafau112",
                        "content": "return address.replace(\".\", \"[.]\");"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "santoshallu",
                        "content": "\\tpublic String defangIPaddr(String address) {\\n\\treturn address.replace(\".\",\"[.]\");\\n\\t}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "gty246",
                        "content": "`return address.replace(\\'.\\',\\'[.]\\')`"
                    },
                    {
                        "username": "hynmj",
                        "content": "[@sarthak_sachdev](/sarthak_sachdev)  write between the quotation of this character  `"
                    },
                    {
                        "username": "UTSAV_0712",
                        "content": "return address.replace(\\'.\\',\\'[.]\\')\\n--> this syntex does not work. "
                    },
                    {
                        "username": "sarthak_sachdev",
                        "content": "hey how do people write code in this highlighted form on websites unlike other code which get printed as simple text??"
                    },
                    {
                        "username": "encore0722",
                        "content": "const defangIPaddr = (address) =>address.split(\".\").join(\"[.]\")"
                    },
                    {
                        "username": "abdalaa123",
                        "content": "Runtime: 48 ms, faster than 90.34% of JavaScript\\n\\nsolved it less than one minute.\\uD83D\\uDE0E  \\n\\n..................  then  i will try other easy proplem & spend 10hours on it\\uD83E\\uDD23\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "LOL\\n"
                    },
                    {
                        "username": "akared3223",
                        "content": "too slow"
                    },
                    {
                        "username": "Billgates",
                        "content": "return \\'\\'.join(s if s !=\\'.\\' else \\'[.]\\' for s in address)"
                    }
                ]
            },
            {
                "id": 1564950,
                "content": [
                    {
                        "username": "TavisTheEngineer",
                        "content": "Can we stop putting solutions in the discussion area. People are looking for tips and hints in this area, not the answer."
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "cavidanbagiri",
                        "content": "l agree with you. "
                    },
                    {
                        "username": "alectr",
                        "content": "var defangIPaddr = function(address) {\\n  return address.split(\\'.\\').join(\\'[.]\\');\\n};"
                    },
                    {
                        "username": "Zaki-1337",
                        "content": "[@riskostorm](/riskostorm) JS has str.replaceAll(\\'.\\' , \\'[.]\\') \\uD83D\\uDE0F"
                    },
                    {
                        "username": "riskofstorm",
                        "content": "str.replace is better, less methods to call if javascript have that in built-ins. idk! Python does!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "user5278r",
                        "content": "I\\'ve noticed there are a lot of dislikes for this problem, why? It\\'s an easy problem for a beginner, why to dislike it so hard? =)) Lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "abandonedforlife",
                        "content": "this is not an O(n) solution but a constant time operation and constant space operation.\\n\\na valid IPv4 address is dependent on the number of bits which is 32 (4 bytes).\\nthe input string will never exceed 255.255.255.255 so in the worst case scenario this is the length of the string."
                    },
                    {
                        "username": "rafau112",
                        "content": "return address.replace(\".\", \"[.]\");"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "santoshallu",
                        "content": "\\tpublic String defangIPaddr(String address) {\\n\\treturn address.replace(\".\",\"[.]\");\\n\\t}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "gty246",
                        "content": "`return address.replace(\\'.\\',\\'[.]\\')`"
                    },
                    {
                        "username": "hynmj",
                        "content": "[@sarthak_sachdev](/sarthak_sachdev)  write between the quotation of this character  `"
                    },
                    {
                        "username": "UTSAV_0712",
                        "content": "return address.replace(\\'.\\',\\'[.]\\')\\n--> this syntex does not work. "
                    },
                    {
                        "username": "sarthak_sachdev",
                        "content": "hey how do people write code in this highlighted form on websites unlike other code which get printed as simple text??"
                    },
                    {
                        "username": "encore0722",
                        "content": "const defangIPaddr = (address) =>address.split(\".\").join(\"[.]\")"
                    },
                    {
                        "username": "abdalaa123",
                        "content": "Runtime: 48 ms, faster than 90.34% of JavaScript\\n\\nsolved it less than one minute.\\uD83D\\uDE0E  \\n\\n..................  then  i will try other easy proplem & spend 10hours on it\\uD83E\\uDD23\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "LOL\\n"
                    },
                    {
                        "username": "akared3223",
                        "content": "too slow"
                    },
                    {
                        "username": "Billgates",
                        "content": "return \\'\\'.join(s if s !=\\'.\\' else \\'[.]\\' for s in address)"
                    }
                ]
            },
            {
                "id": 1568261,
                "content": [
                    {
                        "username": "TavisTheEngineer",
                        "content": "Can we stop putting solutions in the discussion area. People are looking for tips and hints in this area, not the answer."
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "cavidanbagiri",
                        "content": "l agree with you. "
                    },
                    {
                        "username": "alectr",
                        "content": "var defangIPaddr = function(address) {\\n  return address.split(\\'.\\').join(\\'[.]\\');\\n};"
                    },
                    {
                        "username": "Zaki-1337",
                        "content": "[@riskostorm](/riskostorm) JS has str.replaceAll(\\'.\\' , \\'[.]\\') \\uD83D\\uDE0F"
                    },
                    {
                        "username": "riskofstorm",
                        "content": "str.replace is better, less methods to call if javascript have that in built-ins. idk! Python does!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "user5278r",
                        "content": "I\\'ve noticed there are a lot of dislikes for this problem, why? It\\'s an easy problem for a beginner, why to dislike it so hard? =)) Lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "abandonedforlife",
                        "content": "this is not an O(n) solution but a constant time operation and constant space operation.\\n\\na valid IPv4 address is dependent on the number of bits which is 32 (4 bytes).\\nthe input string will never exceed 255.255.255.255 so in the worst case scenario this is the length of the string."
                    },
                    {
                        "username": "rafau112",
                        "content": "return address.replace(\".\", \"[.]\");"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "santoshallu",
                        "content": "\\tpublic String defangIPaddr(String address) {\\n\\treturn address.replace(\".\",\"[.]\");\\n\\t}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "gty246",
                        "content": "`return address.replace(\\'.\\',\\'[.]\\')`"
                    },
                    {
                        "username": "hynmj",
                        "content": "[@sarthak_sachdev](/sarthak_sachdev)  write between the quotation of this character  `"
                    },
                    {
                        "username": "UTSAV_0712",
                        "content": "return address.replace(\\'.\\',\\'[.]\\')\\n--> this syntex does not work. "
                    },
                    {
                        "username": "sarthak_sachdev",
                        "content": "hey how do people write code in this highlighted form on websites unlike other code which get printed as simple text??"
                    },
                    {
                        "username": "encore0722",
                        "content": "const defangIPaddr = (address) =>address.split(\".\").join(\"[.]\")"
                    },
                    {
                        "username": "abdalaa123",
                        "content": "Runtime: 48 ms, faster than 90.34% of JavaScript\\n\\nsolved it less than one minute.\\uD83D\\uDE0E  \\n\\n..................  then  i will try other easy proplem & spend 10hours on it\\uD83E\\uDD23\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "LOL\\n"
                    },
                    {
                        "username": "akared3223",
                        "content": "too slow"
                    },
                    {
                        "username": "Billgates",
                        "content": "return \\'\\'.join(s if s !=\\'.\\' else \\'[.]\\' for s in address)"
                    }
                ]
            },
            {
                "id": 1572880,
                "content": [
                    {
                        "username": "TavisTheEngineer",
                        "content": "Can we stop putting solutions in the discussion area. People are looking for tips and hints in this area, not the answer."
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "cavidanbagiri",
                        "content": "l agree with you. "
                    },
                    {
                        "username": "alectr",
                        "content": "var defangIPaddr = function(address) {\\n  return address.split(\\'.\\').join(\\'[.]\\');\\n};"
                    },
                    {
                        "username": "Zaki-1337",
                        "content": "[@riskostorm](/riskostorm) JS has str.replaceAll(\\'.\\' , \\'[.]\\') \\uD83D\\uDE0F"
                    },
                    {
                        "username": "riskofstorm",
                        "content": "str.replace is better, less methods to call if javascript have that in built-ins. idk! Python does!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "user5278r",
                        "content": "I\\'ve noticed there are a lot of dislikes for this problem, why? It\\'s an easy problem for a beginner, why to dislike it so hard? =)) Lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "abandonedforlife",
                        "content": "this is not an O(n) solution but a constant time operation and constant space operation.\\n\\na valid IPv4 address is dependent on the number of bits which is 32 (4 bytes).\\nthe input string will never exceed 255.255.255.255 so in the worst case scenario this is the length of the string."
                    },
                    {
                        "username": "rafau112",
                        "content": "return address.replace(\".\", \"[.]\");"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "santoshallu",
                        "content": "\\tpublic String defangIPaddr(String address) {\\n\\treturn address.replace(\".\",\"[.]\");\\n\\t}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "gty246",
                        "content": "`return address.replace(\\'.\\',\\'[.]\\')`"
                    },
                    {
                        "username": "hynmj",
                        "content": "[@sarthak_sachdev](/sarthak_sachdev)  write between the quotation of this character  `"
                    },
                    {
                        "username": "UTSAV_0712",
                        "content": "return address.replace(\\'.\\',\\'[.]\\')\\n--> this syntex does not work. "
                    },
                    {
                        "username": "sarthak_sachdev",
                        "content": "hey how do people write code in this highlighted form on websites unlike other code which get printed as simple text??"
                    },
                    {
                        "username": "encore0722",
                        "content": "const defangIPaddr = (address) =>address.split(\".\").join(\"[.]\")"
                    },
                    {
                        "username": "abdalaa123",
                        "content": "Runtime: 48 ms, faster than 90.34% of JavaScript\\n\\nsolved it less than one minute.\\uD83D\\uDE0E  \\n\\n..................  then  i will try other easy proplem & spend 10hours on it\\uD83E\\uDD23\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "LOL\\n"
                    },
                    {
                        "username": "akared3223",
                        "content": "too slow"
                    },
                    {
                        "username": "Billgates",
                        "content": "return \\'\\'.join(s if s !=\\'.\\' else \\'[.]\\' for s in address)"
                    }
                ]
            },
            {
                "id": 1569852,
                "content": [
                    {
                        "username": "TavisTheEngineer",
                        "content": "Can we stop putting solutions in the discussion area. People are looking for tips and hints in this area, not the answer."
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "cavidanbagiri",
                        "content": "l agree with you. "
                    },
                    {
                        "username": "alectr",
                        "content": "var defangIPaddr = function(address) {\\n  return address.split(\\'.\\').join(\\'[.]\\');\\n};"
                    },
                    {
                        "username": "Zaki-1337",
                        "content": "[@riskostorm](/riskostorm) JS has str.replaceAll(\\'.\\' , \\'[.]\\') \\uD83D\\uDE0F"
                    },
                    {
                        "username": "riskofstorm",
                        "content": "str.replace is better, less methods to call if javascript have that in built-ins. idk! Python does!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "user5278r",
                        "content": "I\\'ve noticed there are a lot of dislikes for this problem, why? It\\'s an easy problem for a beginner, why to dislike it so hard? =)) Lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "abandonedforlife",
                        "content": "this is not an O(n) solution but a constant time operation and constant space operation.\\n\\na valid IPv4 address is dependent on the number of bits which is 32 (4 bytes).\\nthe input string will never exceed 255.255.255.255 so in the worst case scenario this is the length of the string."
                    },
                    {
                        "username": "rafau112",
                        "content": "return address.replace(\".\", \"[.]\");"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "santoshallu",
                        "content": "\\tpublic String defangIPaddr(String address) {\\n\\treturn address.replace(\".\",\"[.]\");\\n\\t}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "gty246",
                        "content": "`return address.replace(\\'.\\',\\'[.]\\')`"
                    },
                    {
                        "username": "hynmj",
                        "content": "[@sarthak_sachdev](/sarthak_sachdev)  write between the quotation of this character  `"
                    },
                    {
                        "username": "UTSAV_0712",
                        "content": "return address.replace(\\'.\\',\\'[.]\\')\\n--> this syntex does not work. "
                    },
                    {
                        "username": "sarthak_sachdev",
                        "content": "hey how do people write code in this highlighted form on websites unlike other code which get printed as simple text??"
                    },
                    {
                        "username": "encore0722",
                        "content": "const defangIPaddr = (address) =>address.split(\".\").join(\"[.]\")"
                    },
                    {
                        "username": "abdalaa123",
                        "content": "Runtime: 48 ms, faster than 90.34% of JavaScript\\n\\nsolved it less than one minute.\\uD83D\\uDE0E  \\n\\n..................  then  i will try other easy proplem & spend 10hours on it\\uD83E\\uDD23\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "LOL\\n"
                    },
                    {
                        "username": "akared3223",
                        "content": "too slow"
                    },
                    {
                        "username": "Billgates",
                        "content": "return \\'\\'.join(s if s !=\\'.\\' else \\'[.]\\' for s in address)"
                    }
                ]
            },
            {
                "id": 1573980,
                "content": [
                    {
                        "username": "TavisTheEngineer",
                        "content": "Can we stop putting solutions in the discussion area. People are looking for tips and hints in this area, not the answer."
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "cavidanbagiri",
                        "content": "l agree with you. "
                    },
                    {
                        "username": "alectr",
                        "content": "var defangIPaddr = function(address) {\\n  return address.split(\\'.\\').join(\\'[.]\\');\\n};"
                    },
                    {
                        "username": "Zaki-1337",
                        "content": "[@riskostorm](/riskostorm) JS has str.replaceAll(\\'.\\' , \\'[.]\\') \\uD83D\\uDE0F"
                    },
                    {
                        "username": "riskofstorm",
                        "content": "str.replace is better, less methods to call if javascript have that in built-ins. idk! Python does!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "user5278r",
                        "content": "I\\'ve noticed there are a lot of dislikes for this problem, why? It\\'s an easy problem for a beginner, why to dislike it so hard? =)) Lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "abandonedforlife",
                        "content": "this is not an O(n) solution but a constant time operation and constant space operation.\\n\\na valid IPv4 address is dependent on the number of bits which is 32 (4 bytes).\\nthe input string will never exceed 255.255.255.255 so in the worst case scenario this is the length of the string."
                    },
                    {
                        "username": "rafau112",
                        "content": "return address.replace(\".\", \"[.]\");"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "santoshallu",
                        "content": "\\tpublic String defangIPaddr(String address) {\\n\\treturn address.replace(\".\",\"[.]\");\\n\\t}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "gty246",
                        "content": "`return address.replace(\\'.\\',\\'[.]\\')`"
                    },
                    {
                        "username": "hynmj",
                        "content": "[@sarthak_sachdev](/sarthak_sachdev)  write between the quotation of this character  `"
                    },
                    {
                        "username": "UTSAV_0712",
                        "content": "return address.replace(\\'.\\',\\'[.]\\')\\n--> this syntex does not work. "
                    },
                    {
                        "username": "sarthak_sachdev",
                        "content": "hey how do people write code in this highlighted form on websites unlike other code which get printed as simple text??"
                    },
                    {
                        "username": "encore0722",
                        "content": "const defangIPaddr = (address) =>address.split(\".\").join(\"[.]\")"
                    },
                    {
                        "username": "abdalaa123",
                        "content": "Runtime: 48 ms, faster than 90.34% of JavaScript\\n\\nsolved it less than one minute.\\uD83D\\uDE0E  \\n\\n..................  then  i will try other easy proplem & spend 10hours on it\\uD83E\\uDD23\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "LOL\\n"
                    },
                    {
                        "username": "akared3223",
                        "content": "too slow"
                    },
                    {
                        "username": "Billgates",
                        "content": "return \\'\\'.join(s if s !=\\'.\\' else \\'[.]\\' for s in address)"
                    }
                ]
            },
            {
                "id": 1575150,
                "content": [
                    {
                        "username": "TavisTheEngineer",
                        "content": "Can we stop putting solutions in the discussion area. People are looking for tips and hints in this area, not the answer."
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "cavidanbagiri",
                        "content": "l agree with you. "
                    },
                    {
                        "username": "alectr",
                        "content": "var defangIPaddr = function(address) {\\n  return address.split(\\'.\\').join(\\'[.]\\');\\n};"
                    },
                    {
                        "username": "Zaki-1337",
                        "content": "[@riskostorm](/riskostorm) JS has str.replaceAll(\\'.\\' , \\'[.]\\') \\uD83D\\uDE0F"
                    },
                    {
                        "username": "riskofstorm",
                        "content": "str.replace is better, less methods to call if javascript have that in built-ins. idk! Python does!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "user5278r",
                        "content": "I\\'ve noticed there are a lot of dislikes for this problem, why? It\\'s an easy problem for a beginner, why to dislike it so hard? =)) Lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "abandonedforlife",
                        "content": "this is not an O(n) solution but a constant time operation and constant space operation.\\n\\na valid IPv4 address is dependent on the number of bits which is 32 (4 bytes).\\nthe input string will never exceed 255.255.255.255 so in the worst case scenario this is the length of the string."
                    },
                    {
                        "username": "rafau112",
                        "content": "return address.replace(\".\", \"[.]\");"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "santoshallu",
                        "content": "\\tpublic String defangIPaddr(String address) {\\n\\treturn address.replace(\".\",\"[.]\");\\n\\t}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "gty246",
                        "content": "`return address.replace(\\'.\\',\\'[.]\\')`"
                    },
                    {
                        "username": "hynmj",
                        "content": "[@sarthak_sachdev](/sarthak_sachdev)  write between the quotation of this character  `"
                    },
                    {
                        "username": "UTSAV_0712",
                        "content": "return address.replace(\\'.\\',\\'[.]\\')\\n--> this syntex does not work. "
                    },
                    {
                        "username": "sarthak_sachdev",
                        "content": "hey how do people write code in this highlighted form on websites unlike other code which get printed as simple text??"
                    },
                    {
                        "username": "encore0722",
                        "content": "const defangIPaddr = (address) =>address.split(\".\").join(\"[.]\")"
                    },
                    {
                        "username": "abdalaa123",
                        "content": "Runtime: 48 ms, faster than 90.34% of JavaScript\\n\\nsolved it less than one minute.\\uD83D\\uDE0E  \\n\\n..................  then  i will try other easy proplem & spend 10hours on it\\uD83E\\uDD23\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "LOL\\n"
                    },
                    {
                        "username": "akared3223",
                        "content": "too slow"
                    },
                    {
                        "username": "Billgates",
                        "content": "return \\'\\'.join(s if s !=\\'.\\' else \\'[.]\\' for s in address)"
                    }
                ]
            },
            {
                "id": 1570285,
                "content": [
                    {
                        "username": "TavisTheEngineer",
                        "content": "Can we stop putting solutions in the discussion area. People are looking for tips and hints in this area, not the answer."
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "cavidanbagiri",
                        "content": "l agree with you. "
                    },
                    {
                        "username": "alectr",
                        "content": "var defangIPaddr = function(address) {\\n  return address.split(\\'.\\').join(\\'[.]\\');\\n};"
                    },
                    {
                        "username": "Zaki-1337",
                        "content": "[@riskostorm](/riskostorm) JS has str.replaceAll(\\'.\\' , \\'[.]\\') \\uD83D\\uDE0F"
                    },
                    {
                        "username": "riskofstorm",
                        "content": "str.replace is better, less methods to call if javascript have that in built-ins. idk! Python does!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "user5278r",
                        "content": "I\\'ve noticed there are a lot of dislikes for this problem, why? It\\'s an easy problem for a beginner, why to dislike it so hard? =)) Lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "abandonedforlife",
                        "content": "this is not an O(n) solution but a constant time operation and constant space operation.\\n\\na valid IPv4 address is dependent on the number of bits which is 32 (4 bytes).\\nthe input string will never exceed 255.255.255.255 so in the worst case scenario this is the length of the string."
                    },
                    {
                        "username": "rafau112",
                        "content": "return address.replace(\".\", \"[.]\");"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "santoshallu",
                        "content": "\\tpublic String defangIPaddr(String address) {\\n\\treturn address.replace(\".\",\"[.]\");\\n\\t}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "gty246",
                        "content": "`return address.replace(\\'.\\',\\'[.]\\')`"
                    },
                    {
                        "username": "hynmj",
                        "content": "[@sarthak_sachdev](/sarthak_sachdev)  write between the quotation of this character  `"
                    },
                    {
                        "username": "UTSAV_0712",
                        "content": "return address.replace(\\'.\\',\\'[.]\\')\\n--> this syntex does not work. "
                    },
                    {
                        "username": "sarthak_sachdev",
                        "content": "hey how do people write code in this highlighted form on websites unlike other code which get printed as simple text??"
                    },
                    {
                        "username": "encore0722",
                        "content": "const defangIPaddr = (address) =>address.split(\".\").join(\"[.]\")"
                    },
                    {
                        "username": "abdalaa123",
                        "content": "Runtime: 48 ms, faster than 90.34% of JavaScript\\n\\nsolved it less than one minute.\\uD83D\\uDE0E  \\n\\n..................  then  i will try other easy proplem & spend 10hours on it\\uD83E\\uDD23\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "LOL\\n"
                    },
                    {
                        "username": "akared3223",
                        "content": "too slow"
                    },
                    {
                        "username": "Billgates",
                        "content": "return \\'\\'.join(s if s !=\\'.\\' else \\'[.]\\' for s in address)"
                    }
                ]
            },
            {
                "id": 1573552,
                "content": [
                    {
                        "username": "TavisTheEngineer",
                        "content": "Can we stop putting solutions in the discussion area. People are looking for tips and hints in this area, not the answer."
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "cavidanbagiri",
                        "content": "l agree with you. "
                    },
                    {
                        "username": "alectr",
                        "content": "var defangIPaddr = function(address) {\\n  return address.split(\\'.\\').join(\\'[.]\\');\\n};"
                    },
                    {
                        "username": "Zaki-1337",
                        "content": "[@riskostorm](/riskostorm) JS has str.replaceAll(\\'.\\' , \\'[.]\\') \\uD83D\\uDE0F"
                    },
                    {
                        "username": "riskofstorm",
                        "content": "str.replace is better, less methods to call if javascript have that in built-ins. idk! Python does!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "user5278r",
                        "content": "I\\'ve noticed there are a lot of dislikes for this problem, why? It\\'s an easy problem for a beginner, why to dislike it so hard? =)) Lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "abandonedforlife",
                        "content": "this is not an O(n) solution but a constant time operation and constant space operation.\\n\\na valid IPv4 address is dependent on the number of bits which is 32 (4 bytes).\\nthe input string will never exceed 255.255.255.255 so in the worst case scenario this is the length of the string."
                    },
                    {
                        "username": "rafau112",
                        "content": "return address.replace(\".\", \"[.]\");"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "santoshallu",
                        "content": "\\tpublic String defangIPaddr(String address) {\\n\\treturn address.replace(\".\",\"[.]\");\\n\\t}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "gty246",
                        "content": "`return address.replace(\\'.\\',\\'[.]\\')`"
                    },
                    {
                        "username": "hynmj",
                        "content": "[@sarthak_sachdev](/sarthak_sachdev)  write between the quotation of this character  `"
                    },
                    {
                        "username": "UTSAV_0712",
                        "content": "return address.replace(\\'.\\',\\'[.]\\')\\n--> this syntex does not work. "
                    },
                    {
                        "username": "sarthak_sachdev",
                        "content": "hey how do people write code in this highlighted form on websites unlike other code which get printed as simple text??"
                    },
                    {
                        "username": "encore0722",
                        "content": "const defangIPaddr = (address) =>address.split(\".\").join(\"[.]\")"
                    },
                    {
                        "username": "abdalaa123",
                        "content": "Runtime: 48 ms, faster than 90.34% of JavaScript\\n\\nsolved it less than one minute.\\uD83D\\uDE0E  \\n\\n..................  then  i will try other easy proplem & spend 10hours on it\\uD83E\\uDD23\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "LOL\\n"
                    },
                    {
                        "username": "akared3223",
                        "content": "too slow"
                    },
                    {
                        "username": "Billgates",
                        "content": "return \\'\\'.join(s if s !=\\'.\\' else \\'[.]\\' for s in address)"
                    }
                ]
            },
            {
                "id": 1569554,
                "content": [
                    {
                        "username": "TavisTheEngineer",
                        "content": "Can we stop putting solutions in the discussion area. People are looking for tips and hints in this area, not the answer."
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "cavidanbagiri",
                        "content": "l agree with you. "
                    },
                    {
                        "username": "alectr",
                        "content": "var defangIPaddr = function(address) {\\n  return address.split(\\'.\\').join(\\'[.]\\');\\n};"
                    },
                    {
                        "username": "Zaki-1337",
                        "content": "[@riskostorm](/riskostorm) JS has str.replaceAll(\\'.\\' , \\'[.]\\') \\uD83D\\uDE0F"
                    },
                    {
                        "username": "riskofstorm",
                        "content": "str.replace is better, less methods to call if javascript have that in built-ins. idk! Python does!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "user5278r",
                        "content": "I\\'ve noticed there are a lot of dislikes for this problem, why? It\\'s an easy problem for a beginner, why to dislike it so hard? =)) Lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "abandonedforlife",
                        "content": "this is not an O(n) solution but a constant time operation and constant space operation.\\n\\na valid IPv4 address is dependent on the number of bits which is 32 (4 bytes).\\nthe input string will never exceed 255.255.255.255 so in the worst case scenario this is the length of the string."
                    },
                    {
                        "username": "rafau112",
                        "content": "return address.replace(\".\", \"[.]\");"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "santoshallu",
                        "content": "\\tpublic String defangIPaddr(String address) {\\n\\treturn address.replace(\".\",\"[.]\");\\n\\t}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "gty246",
                        "content": "`return address.replace(\\'.\\',\\'[.]\\')`"
                    },
                    {
                        "username": "hynmj",
                        "content": "[@sarthak_sachdev](/sarthak_sachdev)  write between the quotation of this character  `"
                    },
                    {
                        "username": "UTSAV_0712",
                        "content": "return address.replace(\\'.\\',\\'[.]\\')\\n--> this syntex does not work. "
                    },
                    {
                        "username": "sarthak_sachdev",
                        "content": "hey how do people write code in this highlighted form on websites unlike other code which get printed as simple text??"
                    },
                    {
                        "username": "encore0722",
                        "content": "const defangIPaddr = (address) =>address.split(\".\").join(\"[.]\")"
                    },
                    {
                        "username": "abdalaa123",
                        "content": "Runtime: 48 ms, faster than 90.34% of JavaScript\\n\\nsolved it less than one minute.\\uD83D\\uDE0E  \\n\\n..................  then  i will try other easy proplem & spend 10hours on it\\uD83E\\uDD23\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "LOL\\n"
                    },
                    {
                        "username": "akared3223",
                        "content": "too slow"
                    },
                    {
                        "username": "Billgates",
                        "content": "return \\'\\'.join(s if s !=\\'.\\' else \\'[.]\\' for s in address)"
                    }
                ]
            },
            {
                "id": 1756452,
                "content": [
                    {
                        "username": "TavisTheEngineer",
                        "content": "Can we stop putting solutions in the discussion area. People are looking for tips and hints in this area, not the answer."
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "cavidanbagiri",
                        "content": "l agree with you. "
                    },
                    {
                        "username": "alectr",
                        "content": "var defangIPaddr = function(address) {\\n  return address.split(\\'.\\').join(\\'[.]\\');\\n};"
                    },
                    {
                        "username": "Zaki-1337",
                        "content": "[@riskostorm](/riskostorm) JS has str.replaceAll(\\'.\\' , \\'[.]\\') \\uD83D\\uDE0F"
                    },
                    {
                        "username": "riskofstorm",
                        "content": "str.replace is better, less methods to call if javascript have that in built-ins. idk! Python does!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "user5278r",
                        "content": "I\\'ve noticed there are a lot of dislikes for this problem, why? It\\'s an easy problem for a beginner, why to dislike it so hard? =)) Lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "abandonedforlife",
                        "content": "this is not an O(n) solution but a constant time operation and constant space operation.\\n\\na valid IPv4 address is dependent on the number of bits which is 32 (4 bytes).\\nthe input string will never exceed 255.255.255.255 so in the worst case scenario this is the length of the string."
                    },
                    {
                        "username": "rafau112",
                        "content": "return address.replace(\".\", \"[.]\");"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "santoshallu",
                        "content": "\\tpublic String defangIPaddr(String address) {\\n\\treturn address.replace(\".\",\"[.]\");\\n\\t}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "gty246",
                        "content": "`return address.replace(\\'.\\',\\'[.]\\')`"
                    },
                    {
                        "username": "hynmj",
                        "content": "[@sarthak_sachdev](/sarthak_sachdev)  write between the quotation of this character  `"
                    },
                    {
                        "username": "UTSAV_0712",
                        "content": "return address.replace(\\'.\\',\\'[.]\\')\\n--> this syntex does not work. "
                    },
                    {
                        "username": "sarthak_sachdev",
                        "content": "hey how do people write code in this highlighted form on websites unlike other code which get printed as simple text??"
                    },
                    {
                        "username": "encore0722",
                        "content": "const defangIPaddr = (address) =>address.split(\".\").join(\"[.]\")"
                    },
                    {
                        "username": "abdalaa123",
                        "content": "Runtime: 48 ms, faster than 90.34% of JavaScript\\n\\nsolved it less than one minute.\\uD83D\\uDE0E  \\n\\n..................  then  i will try other easy proplem & spend 10hours on it\\uD83E\\uDD23\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "LOL\\n"
                    },
                    {
                        "username": "akared3223",
                        "content": "too slow"
                    },
                    {
                        "username": "Billgates",
                        "content": "return \\'\\'.join(s if s !=\\'.\\' else \\'[.]\\' for s in address)"
                    }
                ]
            },
            {
                "id": 1564950,
                "content": [
                    {
                        "username": "TavisTheEngineer",
                        "content": "Can we stop putting solutions in the discussion area. People are looking for tips and hints in this area, not the answer."
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "cavidanbagiri",
                        "content": "l agree with you. "
                    },
                    {
                        "username": "alectr",
                        "content": "var defangIPaddr = function(address) {\\n  return address.split(\\'.\\').join(\\'[.]\\');\\n};"
                    },
                    {
                        "username": "Zaki-1337",
                        "content": "[@riskostorm](/riskostorm) JS has str.replaceAll(\\'.\\' , \\'[.]\\') \\uD83D\\uDE0F"
                    },
                    {
                        "username": "riskofstorm",
                        "content": "str.replace is better, less methods to call if javascript have that in built-ins. idk! Python does!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "user5278r",
                        "content": "I\\'ve noticed there are a lot of dislikes for this problem, why? It\\'s an easy problem for a beginner, why to dislike it so hard? =)) Lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "abandonedforlife",
                        "content": "this is not an O(n) solution but a constant time operation and constant space operation.\\n\\na valid IPv4 address is dependent on the number of bits which is 32 (4 bytes).\\nthe input string will never exceed 255.255.255.255 so in the worst case scenario this is the length of the string."
                    },
                    {
                        "username": "rafau112",
                        "content": "return address.replace(\".\", \"[.]\");"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "santoshallu",
                        "content": "\\tpublic String defangIPaddr(String address) {\\n\\treturn address.replace(\".\",\"[.]\");\\n\\t}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "gty246",
                        "content": "`return address.replace(\\'.\\',\\'[.]\\')`"
                    },
                    {
                        "username": "hynmj",
                        "content": "[@sarthak_sachdev](/sarthak_sachdev)  write between the quotation of this character  `"
                    },
                    {
                        "username": "UTSAV_0712",
                        "content": "return address.replace(\\'.\\',\\'[.]\\')\\n--> this syntex does not work. "
                    },
                    {
                        "username": "sarthak_sachdev",
                        "content": "hey how do people write code in this highlighted form on websites unlike other code which get printed as simple text??"
                    },
                    {
                        "username": "encore0722",
                        "content": "const defangIPaddr = (address) =>address.split(\".\").join(\"[.]\")"
                    },
                    {
                        "username": "abdalaa123",
                        "content": "Runtime: 48 ms, faster than 90.34% of JavaScript\\n\\nsolved it less than one minute.\\uD83D\\uDE0E  \\n\\n..................  then  i will try other easy proplem & spend 10hours on it\\uD83E\\uDD23\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "LOL\\n"
                    },
                    {
                        "username": "akared3223",
                        "content": "too slow"
                    },
                    {
                        "username": "Billgates",
                        "content": "return \\'\\'.join(s if s !=\\'.\\' else \\'[.]\\' for s in address)"
                    }
                ]
            },
            {
                "id": 1568261,
                "content": [
                    {
                        "username": "TavisTheEngineer",
                        "content": "Can we stop putting solutions in the discussion area. People are looking for tips and hints in this area, not the answer."
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "cavidanbagiri",
                        "content": "l agree with you. "
                    },
                    {
                        "username": "alectr",
                        "content": "var defangIPaddr = function(address) {\\n  return address.split(\\'.\\').join(\\'[.]\\');\\n};"
                    },
                    {
                        "username": "Zaki-1337",
                        "content": "[@riskostorm](/riskostorm) JS has str.replaceAll(\\'.\\' , \\'[.]\\') \\uD83D\\uDE0F"
                    },
                    {
                        "username": "riskofstorm",
                        "content": "str.replace is better, less methods to call if javascript have that in built-ins. idk! Python does!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "user5278r",
                        "content": "I\\'ve noticed there are a lot of dislikes for this problem, why? It\\'s an easy problem for a beginner, why to dislike it so hard? =)) Lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "abandonedforlife",
                        "content": "this is not an O(n) solution but a constant time operation and constant space operation.\\n\\na valid IPv4 address is dependent on the number of bits which is 32 (4 bytes).\\nthe input string will never exceed 255.255.255.255 so in the worst case scenario this is the length of the string."
                    },
                    {
                        "username": "rafau112",
                        "content": "return address.replace(\".\", \"[.]\");"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "santoshallu",
                        "content": "\\tpublic String defangIPaddr(String address) {\\n\\treturn address.replace(\".\",\"[.]\");\\n\\t}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "gty246",
                        "content": "`return address.replace(\\'.\\',\\'[.]\\')`"
                    },
                    {
                        "username": "hynmj",
                        "content": "[@sarthak_sachdev](/sarthak_sachdev)  write between the quotation of this character  `"
                    },
                    {
                        "username": "UTSAV_0712",
                        "content": "return address.replace(\\'.\\',\\'[.]\\')\\n--> this syntex does not work. "
                    },
                    {
                        "username": "sarthak_sachdev",
                        "content": "hey how do people write code in this highlighted form on websites unlike other code which get printed as simple text??"
                    },
                    {
                        "username": "encore0722",
                        "content": "const defangIPaddr = (address) =>address.split(\".\").join(\"[.]\")"
                    },
                    {
                        "username": "abdalaa123",
                        "content": "Runtime: 48 ms, faster than 90.34% of JavaScript\\n\\nsolved it less than one minute.\\uD83D\\uDE0E  \\n\\n..................  then  i will try other easy proplem & spend 10hours on it\\uD83E\\uDD23\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "LOL\\n"
                    },
                    {
                        "username": "akared3223",
                        "content": "too slow"
                    },
                    {
                        "username": "Billgates",
                        "content": "return \\'\\'.join(s if s !=\\'.\\' else \\'[.]\\' for s in address)"
                    }
                ]
            },
            {
                "id": 1572880,
                "content": [
                    {
                        "username": "TavisTheEngineer",
                        "content": "Can we stop putting solutions in the discussion area. People are looking for tips and hints in this area, not the answer."
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "cavidanbagiri",
                        "content": "l agree with you. "
                    },
                    {
                        "username": "alectr",
                        "content": "var defangIPaddr = function(address) {\\n  return address.split(\\'.\\').join(\\'[.]\\');\\n};"
                    },
                    {
                        "username": "Zaki-1337",
                        "content": "[@riskostorm](/riskostorm) JS has str.replaceAll(\\'.\\' , \\'[.]\\') \\uD83D\\uDE0F"
                    },
                    {
                        "username": "riskofstorm",
                        "content": "str.replace is better, less methods to call if javascript have that in built-ins. idk! Python does!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "user5278r",
                        "content": "I\\'ve noticed there are a lot of dislikes for this problem, why? It\\'s an easy problem for a beginner, why to dislike it so hard? =)) Lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "abandonedforlife",
                        "content": "this is not an O(n) solution but a constant time operation and constant space operation.\\n\\na valid IPv4 address is dependent on the number of bits which is 32 (4 bytes).\\nthe input string will never exceed 255.255.255.255 so in the worst case scenario this is the length of the string."
                    },
                    {
                        "username": "rafau112",
                        "content": "return address.replace(\".\", \"[.]\");"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "santoshallu",
                        "content": "\\tpublic String defangIPaddr(String address) {\\n\\treturn address.replace(\".\",\"[.]\");\\n\\t}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "gty246",
                        "content": "`return address.replace(\\'.\\',\\'[.]\\')`"
                    },
                    {
                        "username": "hynmj",
                        "content": "[@sarthak_sachdev](/sarthak_sachdev)  write between the quotation of this character  `"
                    },
                    {
                        "username": "UTSAV_0712",
                        "content": "return address.replace(\\'.\\',\\'[.]\\')\\n--> this syntex does not work. "
                    },
                    {
                        "username": "sarthak_sachdev",
                        "content": "hey how do people write code in this highlighted form on websites unlike other code which get printed as simple text??"
                    },
                    {
                        "username": "encore0722",
                        "content": "const defangIPaddr = (address) =>address.split(\".\").join(\"[.]\")"
                    },
                    {
                        "username": "abdalaa123",
                        "content": "Runtime: 48 ms, faster than 90.34% of JavaScript\\n\\nsolved it less than one minute.\\uD83D\\uDE0E  \\n\\n..................  then  i will try other easy proplem & spend 10hours on it\\uD83E\\uDD23\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "LOL\\n"
                    },
                    {
                        "username": "akared3223",
                        "content": "too slow"
                    },
                    {
                        "username": "Billgates",
                        "content": "return \\'\\'.join(s if s !=\\'.\\' else \\'[.]\\' for s in address)"
                    }
                ]
            },
            {
                "id": 1569852,
                "content": [
                    {
                        "username": "TavisTheEngineer",
                        "content": "Can we stop putting solutions in the discussion area. People are looking for tips and hints in this area, not the answer."
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "cavidanbagiri",
                        "content": "l agree with you. "
                    },
                    {
                        "username": "alectr",
                        "content": "var defangIPaddr = function(address) {\\n  return address.split(\\'.\\').join(\\'[.]\\');\\n};"
                    },
                    {
                        "username": "Zaki-1337",
                        "content": "[@riskostorm](/riskostorm) JS has str.replaceAll(\\'.\\' , \\'[.]\\') \\uD83D\\uDE0F"
                    },
                    {
                        "username": "riskofstorm",
                        "content": "str.replace is better, less methods to call if javascript have that in built-ins. idk! Python does!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "user5278r",
                        "content": "I\\'ve noticed there are a lot of dislikes for this problem, why? It\\'s an easy problem for a beginner, why to dislike it so hard? =)) Lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "abandonedforlife",
                        "content": "this is not an O(n) solution but a constant time operation and constant space operation.\\n\\na valid IPv4 address is dependent on the number of bits which is 32 (4 bytes).\\nthe input string will never exceed 255.255.255.255 so in the worst case scenario this is the length of the string."
                    },
                    {
                        "username": "rafau112",
                        "content": "return address.replace(\".\", \"[.]\");"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "santoshallu",
                        "content": "\\tpublic String defangIPaddr(String address) {\\n\\treturn address.replace(\".\",\"[.]\");\\n\\t}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "gty246",
                        "content": "`return address.replace(\\'.\\',\\'[.]\\')`"
                    },
                    {
                        "username": "hynmj",
                        "content": "[@sarthak_sachdev](/sarthak_sachdev)  write between the quotation of this character  `"
                    },
                    {
                        "username": "UTSAV_0712",
                        "content": "return address.replace(\\'.\\',\\'[.]\\')\\n--> this syntex does not work. "
                    },
                    {
                        "username": "sarthak_sachdev",
                        "content": "hey how do people write code in this highlighted form on websites unlike other code which get printed as simple text??"
                    },
                    {
                        "username": "encore0722",
                        "content": "const defangIPaddr = (address) =>address.split(\".\").join(\"[.]\")"
                    },
                    {
                        "username": "abdalaa123",
                        "content": "Runtime: 48 ms, faster than 90.34% of JavaScript\\n\\nsolved it less than one minute.\\uD83D\\uDE0E  \\n\\n..................  then  i will try other easy proplem & spend 10hours on it\\uD83E\\uDD23\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "LOL\\n"
                    },
                    {
                        "username": "akared3223",
                        "content": "too slow"
                    },
                    {
                        "username": "Billgates",
                        "content": "return \\'\\'.join(s if s !=\\'.\\' else \\'[.]\\' for s in address)"
                    }
                ]
            },
            {
                "id": 1573980,
                "content": [
                    {
                        "username": "TavisTheEngineer",
                        "content": "Can we stop putting solutions in the discussion area. People are looking for tips and hints in this area, not the answer."
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "cavidanbagiri",
                        "content": "l agree with you. "
                    },
                    {
                        "username": "alectr",
                        "content": "var defangIPaddr = function(address) {\\n  return address.split(\\'.\\').join(\\'[.]\\');\\n};"
                    },
                    {
                        "username": "Zaki-1337",
                        "content": "[@riskostorm](/riskostorm) JS has str.replaceAll(\\'.\\' , \\'[.]\\') \\uD83D\\uDE0F"
                    },
                    {
                        "username": "riskofstorm",
                        "content": "str.replace is better, less methods to call if javascript have that in built-ins. idk! Python does!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "user5278r",
                        "content": "I\\'ve noticed there are a lot of dislikes for this problem, why? It\\'s an easy problem for a beginner, why to dislike it so hard? =)) Lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "abandonedforlife",
                        "content": "this is not an O(n) solution but a constant time operation and constant space operation.\\n\\na valid IPv4 address is dependent on the number of bits which is 32 (4 bytes).\\nthe input string will never exceed 255.255.255.255 so in the worst case scenario this is the length of the string."
                    },
                    {
                        "username": "rafau112",
                        "content": "return address.replace(\".\", \"[.]\");"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "santoshallu",
                        "content": "\\tpublic String defangIPaddr(String address) {\\n\\treturn address.replace(\".\",\"[.]\");\\n\\t}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "gty246",
                        "content": "`return address.replace(\\'.\\',\\'[.]\\')`"
                    },
                    {
                        "username": "hynmj",
                        "content": "[@sarthak_sachdev](/sarthak_sachdev)  write between the quotation of this character  `"
                    },
                    {
                        "username": "UTSAV_0712",
                        "content": "return address.replace(\\'.\\',\\'[.]\\')\\n--> this syntex does not work. "
                    },
                    {
                        "username": "sarthak_sachdev",
                        "content": "hey how do people write code in this highlighted form on websites unlike other code which get printed as simple text??"
                    },
                    {
                        "username": "encore0722",
                        "content": "const defangIPaddr = (address) =>address.split(\".\").join(\"[.]\")"
                    },
                    {
                        "username": "abdalaa123",
                        "content": "Runtime: 48 ms, faster than 90.34% of JavaScript\\n\\nsolved it less than one minute.\\uD83D\\uDE0E  \\n\\n..................  then  i will try other easy proplem & spend 10hours on it\\uD83E\\uDD23\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "LOL\\n"
                    },
                    {
                        "username": "akared3223",
                        "content": "too slow"
                    },
                    {
                        "username": "Billgates",
                        "content": "return \\'\\'.join(s if s !=\\'.\\' else \\'[.]\\' for s in address)"
                    }
                ]
            },
            {
                "id": 1575150,
                "content": [
                    {
                        "username": "TavisTheEngineer",
                        "content": "Can we stop putting solutions in the discussion area. People are looking for tips and hints in this area, not the answer."
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "cavidanbagiri",
                        "content": "l agree with you. "
                    },
                    {
                        "username": "alectr",
                        "content": "var defangIPaddr = function(address) {\\n  return address.split(\\'.\\').join(\\'[.]\\');\\n};"
                    },
                    {
                        "username": "Zaki-1337",
                        "content": "[@riskostorm](/riskostorm) JS has str.replaceAll(\\'.\\' , \\'[.]\\') \\uD83D\\uDE0F"
                    },
                    {
                        "username": "riskofstorm",
                        "content": "str.replace is better, less methods to call if javascript have that in built-ins. idk! Python does!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "user5278r",
                        "content": "I\\'ve noticed there are a lot of dislikes for this problem, why? It\\'s an easy problem for a beginner, why to dislike it so hard? =)) Lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "abandonedforlife",
                        "content": "this is not an O(n) solution but a constant time operation and constant space operation.\\n\\na valid IPv4 address is dependent on the number of bits which is 32 (4 bytes).\\nthe input string will never exceed 255.255.255.255 so in the worst case scenario this is the length of the string."
                    },
                    {
                        "username": "rafau112",
                        "content": "return address.replace(\".\", \"[.]\");"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "santoshallu",
                        "content": "\\tpublic String defangIPaddr(String address) {\\n\\treturn address.replace(\".\",\"[.]\");\\n\\t}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "gty246",
                        "content": "`return address.replace(\\'.\\',\\'[.]\\')`"
                    },
                    {
                        "username": "hynmj",
                        "content": "[@sarthak_sachdev](/sarthak_sachdev)  write between the quotation of this character  `"
                    },
                    {
                        "username": "UTSAV_0712",
                        "content": "return address.replace(\\'.\\',\\'[.]\\')\\n--> this syntex does not work. "
                    },
                    {
                        "username": "sarthak_sachdev",
                        "content": "hey how do people write code in this highlighted form on websites unlike other code which get printed as simple text??"
                    },
                    {
                        "username": "encore0722",
                        "content": "const defangIPaddr = (address) =>address.split(\".\").join(\"[.]\")"
                    },
                    {
                        "username": "abdalaa123",
                        "content": "Runtime: 48 ms, faster than 90.34% of JavaScript\\n\\nsolved it less than one minute.\\uD83D\\uDE0E  \\n\\n..................  then  i will try other easy proplem & spend 10hours on it\\uD83E\\uDD23\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "LOL\\n"
                    },
                    {
                        "username": "akared3223",
                        "content": "too slow"
                    },
                    {
                        "username": "Billgates",
                        "content": "return \\'\\'.join(s if s !=\\'.\\' else \\'[.]\\' for s in address)"
                    }
                ]
            },
            {
                "id": 1570285,
                "content": [
                    {
                        "username": "TavisTheEngineer",
                        "content": "Can we stop putting solutions in the discussion area. People are looking for tips and hints in this area, not the answer."
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "cavidanbagiri",
                        "content": "l agree with you. "
                    },
                    {
                        "username": "alectr",
                        "content": "var defangIPaddr = function(address) {\\n  return address.split(\\'.\\').join(\\'[.]\\');\\n};"
                    },
                    {
                        "username": "Zaki-1337",
                        "content": "[@riskostorm](/riskostorm) JS has str.replaceAll(\\'.\\' , \\'[.]\\') \\uD83D\\uDE0F"
                    },
                    {
                        "username": "riskofstorm",
                        "content": "str.replace is better, less methods to call if javascript have that in built-ins. idk! Python does!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "user5278r",
                        "content": "I\\'ve noticed there are a lot of dislikes for this problem, why? It\\'s an easy problem for a beginner, why to dislike it so hard? =)) Lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "abandonedforlife",
                        "content": "this is not an O(n) solution but a constant time operation and constant space operation.\\n\\na valid IPv4 address is dependent on the number of bits which is 32 (4 bytes).\\nthe input string will never exceed 255.255.255.255 so in the worst case scenario this is the length of the string."
                    },
                    {
                        "username": "rafau112",
                        "content": "return address.replace(\".\", \"[.]\");"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "santoshallu",
                        "content": "\\tpublic String defangIPaddr(String address) {\\n\\treturn address.replace(\".\",\"[.]\");\\n\\t}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "gty246",
                        "content": "`return address.replace(\\'.\\',\\'[.]\\')`"
                    },
                    {
                        "username": "hynmj",
                        "content": "[@sarthak_sachdev](/sarthak_sachdev)  write between the quotation of this character  `"
                    },
                    {
                        "username": "UTSAV_0712",
                        "content": "return address.replace(\\'.\\',\\'[.]\\')\\n--> this syntex does not work. "
                    },
                    {
                        "username": "sarthak_sachdev",
                        "content": "hey how do people write code in this highlighted form on websites unlike other code which get printed as simple text??"
                    },
                    {
                        "username": "encore0722",
                        "content": "const defangIPaddr = (address) =>address.split(\".\").join(\"[.]\")"
                    },
                    {
                        "username": "abdalaa123",
                        "content": "Runtime: 48 ms, faster than 90.34% of JavaScript\\n\\nsolved it less than one minute.\\uD83D\\uDE0E  \\n\\n..................  then  i will try other easy proplem & spend 10hours on it\\uD83E\\uDD23\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "LOL\\n"
                    },
                    {
                        "username": "akared3223",
                        "content": "too slow"
                    },
                    {
                        "username": "Billgates",
                        "content": "return \\'\\'.join(s if s !=\\'.\\' else \\'[.]\\' for s in address)"
                    }
                ]
            },
            {
                "id": 1573552,
                "content": [
                    {
                        "username": "TavisTheEngineer",
                        "content": "Can we stop putting solutions in the discussion area. People are looking for tips and hints in this area, not the answer."
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "cavidanbagiri",
                        "content": "l agree with you. "
                    },
                    {
                        "username": "alectr",
                        "content": "var defangIPaddr = function(address) {\\n  return address.split(\\'.\\').join(\\'[.]\\');\\n};"
                    },
                    {
                        "username": "Zaki-1337",
                        "content": "[@riskostorm](/riskostorm) JS has str.replaceAll(\\'.\\' , \\'[.]\\') \\uD83D\\uDE0F"
                    },
                    {
                        "username": "riskofstorm",
                        "content": "str.replace is better, less methods to call if javascript have that in built-ins. idk! Python does!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "user5278r",
                        "content": "I\\'ve noticed there are a lot of dislikes for this problem, why? It\\'s an easy problem for a beginner, why to dislike it so hard? =)) Lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "abandonedforlife",
                        "content": "this is not an O(n) solution but a constant time operation and constant space operation.\\n\\na valid IPv4 address is dependent on the number of bits which is 32 (4 bytes).\\nthe input string will never exceed 255.255.255.255 so in the worst case scenario this is the length of the string."
                    },
                    {
                        "username": "rafau112",
                        "content": "return address.replace(\".\", \"[.]\");"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "santoshallu",
                        "content": "\\tpublic String defangIPaddr(String address) {\\n\\treturn address.replace(\".\",\"[.]\");\\n\\t}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "gty246",
                        "content": "`return address.replace(\\'.\\',\\'[.]\\')`"
                    },
                    {
                        "username": "hynmj",
                        "content": "[@sarthak_sachdev](/sarthak_sachdev)  write between the quotation of this character  `"
                    },
                    {
                        "username": "UTSAV_0712",
                        "content": "return address.replace(\\'.\\',\\'[.]\\')\\n--> this syntex does not work. "
                    },
                    {
                        "username": "sarthak_sachdev",
                        "content": "hey how do people write code in this highlighted form on websites unlike other code which get printed as simple text??"
                    },
                    {
                        "username": "encore0722",
                        "content": "const defangIPaddr = (address) =>address.split(\".\").join(\"[.]\")"
                    },
                    {
                        "username": "abdalaa123",
                        "content": "Runtime: 48 ms, faster than 90.34% of JavaScript\\n\\nsolved it less than one minute.\\uD83D\\uDE0E  \\n\\n..................  then  i will try other easy proplem & spend 10hours on it\\uD83E\\uDD23\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "LOL\\n"
                    },
                    {
                        "username": "akared3223",
                        "content": "too slow"
                    },
                    {
                        "username": "Billgates",
                        "content": "return \\'\\'.join(s if s !=\\'.\\' else \\'[.]\\' for s in address)"
                    }
                ]
            },
            {
                "id": 1569554,
                "content": [
                    {
                        "username": "TavisTheEngineer",
                        "content": "Can we stop putting solutions in the discussion area. People are looking for tips and hints in this area, not the answer."
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "cavidanbagiri",
                        "content": "l agree with you. "
                    },
                    {
                        "username": "alectr",
                        "content": "var defangIPaddr = function(address) {\\n  return address.split(\\'.\\').join(\\'[.]\\');\\n};"
                    },
                    {
                        "username": "Zaki-1337",
                        "content": "[@riskostorm](/riskostorm) JS has str.replaceAll(\\'.\\' , \\'[.]\\') \\uD83D\\uDE0F"
                    },
                    {
                        "username": "riskofstorm",
                        "content": "str.replace is better, less methods to call if javascript have that in built-ins. idk! Python does!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "user5278r",
                        "content": "I\\'ve noticed there are a lot of dislikes for this problem, why? It\\'s an easy problem for a beginner, why to dislike it so hard? =)) Lol"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\uD83D\\uDC4C Simple C++ Optimal Code 0ms100% fast\\nhttps://leetcode.com/problems/defanging-an-ip-address/solutions/2167964/simple-c-optimal-code-0ms100-fast/"
                    },
                    {
                        "username": "abandonedforlife",
                        "content": "this is not an O(n) solution but a constant time operation and constant space operation.\\n\\na valid IPv4 address is dependent on the number of bits which is 32 (4 bytes).\\nthe input string will never exceed 255.255.255.255 so in the worst case scenario this is the length of the string."
                    },
                    {
                        "username": "rafau112",
                        "content": "return address.replace(\".\", \"[.]\");"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "santoshallu",
                        "content": "\\tpublic String defangIPaddr(String address) {\\n\\treturn address.replace(\".\",\"[.]\");\\n\\t}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "gty246",
                        "content": "`return address.replace(\\'.\\',\\'[.]\\')`"
                    },
                    {
                        "username": "hynmj",
                        "content": "[@sarthak_sachdev](/sarthak_sachdev)  write between the quotation of this character  `"
                    },
                    {
                        "username": "UTSAV_0712",
                        "content": "return address.replace(\\'.\\',\\'[.]\\')\\n--> this syntex does not work. "
                    },
                    {
                        "username": "sarthak_sachdev",
                        "content": "hey how do people write code in this highlighted form on websites unlike other code which get printed as simple text??"
                    },
                    {
                        "username": "encore0722",
                        "content": "const defangIPaddr = (address) =>address.split(\".\").join(\"[.]\")"
                    },
                    {
                        "username": "abdalaa123",
                        "content": "Runtime: 48 ms, faster than 90.34% of JavaScript\\n\\nsolved it less than one minute.\\uD83D\\uDE0E  \\n\\n..................  then  i will try other easy proplem & spend 10hours on it\\uD83E\\uDD23\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "LOL\\n"
                    },
                    {
                        "username": "akared3223",
                        "content": "too slow"
                    },
                    {
                        "username": "Billgates",
                        "content": "return \\'\\'.join(s if s !=\\'.\\' else \\'[.]\\' for s in address)"
                    }
                ]
            },
            {
                "id": 1573313,
                "content": [
                    {
                        "username": "Jack_oS",
                        "content": "`return address.replace(\\'.\\', \\'[.]\\')`\\n\\nCan this be made even simpler?"
                    },
                    {
                        "username": "mkrishnateja07",
                        "content": "/**\\n * @param {string} address\\n * @return {string}\\n */\\nvar defangIPaddr = function(address) {\\n   return address.split(\\'.\\').join(\"[.]\");\\n};"
                    },
                    {
                        "username": "kadoyan",
                        "content": "var defangIPaddr = address => address.split(\\'.\\').join(\\'[.]\\');"
                    },
                    {
                        "username": "rocky-andre",
                        "content": "return address.replace(\".\", \"[.]\")"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "zengfei216",
                        "content": "What skill is this problem targeting? it seems kind of trivial.."
                    },
                    {
                        "username": "nguyenvantuyen6789",
                        "content": "I also think like you"
                    },
                    {
                        "username": "harshita12y",
                        "content": "![image](https://assets.leetcode.com/users/images/d828876e-e260-454e-9572-494a0e58665c_1621444482.0735073.png)\\n"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "WHAT LANGUAGE IS THIS?\\n"
                    },
                    {
                        "username": "MikeBarskiy",
                        "content": "Why we just can\\'t use String method: replaceAll() or replace()?\\n*Replace() in the body use replaceAll()*\\n\\nAnd our solution will be:\\n        `return address.replaceAll(\"\\\\\\\\.\", \"[.]\");`"
                    },
                    {
                        "username": "bbbbbbbbb9",
                        "content": "\\'\\'\\'\\nreturn address.Replace(\".\",\"[.]\");\\n\\'\\'\\'"
                    },
                    {
                        "username": "Code_Enthusiast232",
                        "content": "Just try to create a new string type variable, which can help you to beat 100% of users"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\\n\\nBelow solution worked for in \\n\\n `class Solution {\\n    public String defangIPaddr(String address) {\\n      String st=address.replace(\".\",\"[.]\");\\n      return st;\\n    }\\n}`\\n\\nDo let me know if you have any suggestions."
                    }
                ]
            },
            {
                "id": 1573225,
                "content": [
                    {
                        "username": "Jack_oS",
                        "content": "`return address.replace(\\'.\\', \\'[.]\\')`\\n\\nCan this be made even simpler?"
                    },
                    {
                        "username": "mkrishnateja07",
                        "content": "/**\\n * @param {string} address\\n * @return {string}\\n */\\nvar defangIPaddr = function(address) {\\n   return address.split(\\'.\\').join(\"[.]\");\\n};"
                    },
                    {
                        "username": "kadoyan",
                        "content": "var defangIPaddr = address => address.split(\\'.\\').join(\\'[.]\\');"
                    },
                    {
                        "username": "rocky-andre",
                        "content": "return address.replace(\".\", \"[.]\")"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "zengfei216",
                        "content": "What skill is this problem targeting? it seems kind of trivial.."
                    },
                    {
                        "username": "nguyenvantuyen6789",
                        "content": "I also think like you"
                    },
                    {
                        "username": "harshita12y",
                        "content": "![image](https://assets.leetcode.com/users/images/d828876e-e260-454e-9572-494a0e58665c_1621444482.0735073.png)\\n"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "WHAT LANGUAGE IS THIS?\\n"
                    },
                    {
                        "username": "MikeBarskiy",
                        "content": "Why we just can\\'t use String method: replaceAll() or replace()?\\n*Replace() in the body use replaceAll()*\\n\\nAnd our solution will be:\\n        `return address.replaceAll(\"\\\\\\\\.\", \"[.]\");`"
                    },
                    {
                        "username": "bbbbbbbbb9",
                        "content": "\\'\\'\\'\\nreturn address.Replace(\".\",\"[.]\");\\n\\'\\'\\'"
                    },
                    {
                        "username": "Code_Enthusiast232",
                        "content": "Just try to create a new string type variable, which can help you to beat 100% of users"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\\n\\nBelow solution worked for in \\n\\n `class Solution {\\n    public String defangIPaddr(String address) {\\n      String st=address.replace(\".\",\"[.]\");\\n      return st;\\n    }\\n}`\\n\\nDo let me know if you have any suggestions."
                    }
                ]
            },
            {
                "id": 1572913,
                "content": [
                    {
                        "username": "Jack_oS",
                        "content": "`return address.replace(\\'.\\', \\'[.]\\')`\\n\\nCan this be made even simpler?"
                    },
                    {
                        "username": "mkrishnateja07",
                        "content": "/**\\n * @param {string} address\\n * @return {string}\\n */\\nvar defangIPaddr = function(address) {\\n   return address.split(\\'.\\').join(\"[.]\");\\n};"
                    },
                    {
                        "username": "kadoyan",
                        "content": "var defangIPaddr = address => address.split(\\'.\\').join(\\'[.]\\');"
                    },
                    {
                        "username": "rocky-andre",
                        "content": "return address.replace(\".\", \"[.]\")"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "zengfei216",
                        "content": "What skill is this problem targeting? it seems kind of trivial.."
                    },
                    {
                        "username": "nguyenvantuyen6789",
                        "content": "I also think like you"
                    },
                    {
                        "username": "harshita12y",
                        "content": "![image](https://assets.leetcode.com/users/images/d828876e-e260-454e-9572-494a0e58665c_1621444482.0735073.png)\\n"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "WHAT LANGUAGE IS THIS?\\n"
                    },
                    {
                        "username": "MikeBarskiy",
                        "content": "Why we just can\\'t use String method: replaceAll() or replace()?\\n*Replace() in the body use replaceAll()*\\n\\nAnd our solution will be:\\n        `return address.replaceAll(\"\\\\\\\\.\", \"[.]\");`"
                    },
                    {
                        "username": "bbbbbbbbb9",
                        "content": "\\'\\'\\'\\nreturn address.Replace(\".\",\"[.]\");\\n\\'\\'\\'"
                    },
                    {
                        "username": "Code_Enthusiast232",
                        "content": "Just try to create a new string type variable, which can help you to beat 100% of users"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\\n\\nBelow solution worked for in \\n\\n `class Solution {\\n    public String defangIPaddr(String address) {\\n      String st=address.replace(\".\",\"[.]\");\\n      return st;\\n    }\\n}`\\n\\nDo let me know if you have any suggestions."
                    }
                ]
            },
            {
                "id": 1572827,
                "content": [
                    {
                        "username": "Jack_oS",
                        "content": "`return address.replace(\\'.\\', \\'[.]\\')`\\n\\nCan this be made even simpler?"
                    },
                    {
                        "username": "mkrishnateja07",
                        "content": "/**\\n * @param {string} address\\n * @return {string}\\n */\\nvar defangIPaddr = function(address) {\\n   return address.split(\\'.\\').join(\"[.]\");\\n};"
                    },
                    {
                        "username": "kadoyan",
                        "content": "var defangIPaddr = address => address.split(\\'.\\').join(\\'[.]\\');"
                    },
                    {
                        "username": "rocky-andre",
                        "content": "return address.replace(\".\", \"[.]\")"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "zengfei216",
                        "content": "What skill is this problem targeting? it seems kind of trivial.."
                    },
                    {
                        "username": "nguyenvantuyen6789",
                        "content": "I also think like you"
                    },
                    {
                        "username": "harshita12y",
                        "content": "![image](https://assets.leetcode.com/users/images/d828876e-e260-454e-9572-494a0e58665c_1621444482.0735073.png)\\n"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "WHAT LANGUAGE IS THIS?\\n"
                    },
                    {
                        "username": "MikeBarskiy",
                        "content": "Why we just can\\'t use String method: replaceAll() or replace()?\\n*Replace() in the body use replaceAll()*\\n\\nAnd our solution will be:\\n        `return address.replaceAll(\"\\\\\\\\.\", \"[.]\");`"
                    },
                    {
                        "username": "bbbbbbbbb9",
                        "content": "\\'\\'\\'\\nreturn address.Replace(\".\",\"[.]\");\\n\\'\\'\\'"
                    },
                    {
                        "username": "Code_Enthusiast232",
                        "content": "Just try to create a new string type variable, which can help you to beat 100% of users"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\\n\\nBelow solution worked for in \\n\\n `class Solution {\\n    public String defangIPaddr(String address) {\\n      String st=address.replace(\".\",\"[.]\");\\n      return st;\\n    }\\n}`\\n\\nDo let me know if you have any suggestions."
                    }
                ]
            },
            {
                "id": 1569553,
                "content": [
                    {
                        "username": "Jack_oS",
                        "content": "`return address.replace(\\'.\\', \\'[.]\\')`\\n\\nCan this be made even simpler?"
                    },
                    {
                        "username": "mkrishnateja07",
                        "content": "/**\\n * @param {string} address\\n * @return {string}\\n */\\nvar defangIPaddr = function(address) {\\n   return address.split(\\'.\\').join(\"[.]\");\\n};"
                    },
                    {
                        "username": "kadoyan",
                        "content": "var defangIPaddr = address => address.split(\\'.\\').join(\\'[.]\\');"
                    },
                    {
                        "username": "rocky-andre",
                        "content": "return address.replace(\".\", \"[.]\")"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "zengfei216",
                        "content": "What skill is this problem targeting? it seems kind of trivial.."
                    },
                    {
                        "username": "nguyenvantuyen6789",
                        "content": "I also think like you"
                    },
                    {
                        "username": "harshita12y",
                        "content": "![image](https://assets.leetcode.com/users/images/d828876e-e260-454e-9572-494a0e58665c_1621444482.0735073.png)\\n"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "WHAT LANGUAGE IS THIS?\\n"
                    },
                    {
                        "username": "MikeBarskiy",
                        "content": "Why we just can\\'t use String method: replaceAll() or replace()?\\n*Replace() in the body use replaceAll()*\\n\\nAnd our solution will be:\\n        `return address.replaceAll(\"\\\\\\\\.\", \"[.]\");`"
                    },
                    {
                        "username": "bbbbbbbbb9",
                        "content": "\\'\\'\\'\\nreturn address.Replace(\".\",\"[.]\");\\n\\'\\'\\'"
                    },
                    {
                        "username": "Code_Enthusiast232",
                        "content": "Just try to create a new string type variable, which can help you to beat 100% of users"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\\n\\nBelow solution worked for in \\n\\n `class Solution {\\n    public String defangIPaddr(String address) {\\n      String st=address.replace(\".\",\"[.]\");\\n      return st;\\n    }\\n}`\\n\\nDo let me know if you have any suggestions."
                    }
                ]
            },
            {
                "id": 1575282,
                "content": [
                    {
                        "username": "Jack_oS",
                        "content": "`return address.replace(\\'.\\', \\'[.]\\')`\\n\\nCan this be made even simpler?"
                    },
                    {
                        "username": "mkrishnateja07",
                        "content": "/**\\n * @param {string} address\\n * @return {string}\\n */\\nvar defangIPaddr = function(address) {\\n   return address.split(\\'.\\').join(\"[.]\");\\n};"
                    },
                    {
                        "username": "kadoyan",
                        "content": "var defangIPaddr = address => address.split(\\'.\\').join(\\'[.]\\');"
                    },
                    {
                        "username": "rocky-andre",
                        "content": "return address.replace(\".\", \"[.]\")"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "zengfei216",
                        "content": "What skill is this problem targeting? it seems kind of trivial.."
                    },
                    {
                        "username": "nguyenvantuyen6789",
                        "content": "I also think like you"
                    },
                    {
                        "username": "harshita12y",
                        "content": "![image](https://assets.leetcode.com/users/images/d828876e-e260-454e-9572-494a0e58665c_1621444482.0735073.png)\\n"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "WHAT LANGUAGE IS THIS?\\n"
                    },
                    {
                        "username": "MikeBarskiy",
                        "content": "Why we just can\\'t use String method: replaceAll() or replace()?\\n*Replace() in the body use replaceAll()*\\n\\nAnd our solution will be:\\n        `return address.replaceAll(\"\\\\\\\\.\", \"[.]\");`"
                    },
                    {
                        "username": "bbbbbbbbb9",
                        "content": "\\'\\'\\'\\nreturn address.Replace(\".\",\"[.]\");\\n\\'\\'\\'"
                    },
                    {
                        "username": "Code_Enthusiast232",
                        "content": "Just try to create a new string type variable, which can help you to beat 100% of users"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\\n\\nBelow solution worked for in \\n\\n `class Solution {\\n    public String defangIPaddr(String address) {\\n      String st=address.replace(\".\",\"[.]\");\\n      return st;\\n    }\\n}`\\n\\nDo let me know if you have any suggestions."
                    }
                ]
            },
            {
                "id": 1573145,
                "content": [
                    {
                        "username": "Jack_oS",
                        "content": "`return address.replace(\\'.\\', \\'[.]\\')`\\n\\nCan this be made even simpler?"
                    },
                    {
                        "username": "mkrishnateja07",
                        "content": "/**\\n * @param {string} address\\n * @return {string}\\n */\\nvar defangIPaddr = function(address) {\\n   return address.split(\\'.\\').join(\"[.]\");\\n};"
                    },
                    {
                        "username": "kadoyan",
                        "content": "var defangIPaddr = address => address.split(\\'.\\').join(\\'[.]\\');"
                    },
                    {
                        "username": "rocky-andre",
                        "content": "return address.replace(\".\", \"[.]\")"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "zengfei216",
                        "content": "What skill is this problem targeting? it seems kind of trivial.."
                    },
                    {
                        "username": "nguyenvantuyen6789",
                        "content": "I also think like you"
                    },
                    {
                        "username": "harshita12y",
                        "content": "![image](https://assets.leetcode.com/users/images/d828876e-e260-454e-9572-494a0e58665c_1621444482.0735073.png)\\n"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "WHAT LANGUAGE IS THIS?\\n"
                    },
                    {
                        "username": "MikeBarskiy",
                        "content": "Why we just can\\'t use String method: replaceAll() or replace()?\\n*Replace() in the body use replaceAll()*\\n\\nAnd our solution will be:\\n        `return address.replaceAll(\"\\\\\\\\.\", \"[.]\");`"
                    },
                    {
                        "username": "bbbbbbbbb9",
                        "content": "\\'\\'\\'\\nreturn address.Replace(\".\",\"[.]\");\\n\\'\\'\\'"
                    },
                    {
                        "username": "Code_Enthusiast232",
                        "content": "Just try to create a new string type variable, which can help you to beat 100% of users"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\\n\\nBelow solution worked for in \\n\\n `class Solution {\\n    public String defangIPaddr(String address) {\\n      String st=address.replace(\".\",\"[.]\");\\n      return st;\\n    }\\n}`\\n\\nDo let me know if you have any suggestions."
                    }
                ]
            },
            {
                "id": 1572983,
                "content": [
                    {
                        "username": "Jack_oS",
                        "content": "`return address.replace(\\'.\\', \\'[.]\\')`\\n\\nCan this be made even simpler?"
                    },
                    {
                        "username": "mkrishnateja07",
                        "content": "/**\\n * @param {string} address\\n * @return {string}\\n */\\nvar defangIPaddr = function(address) {\\n   return address.split(\\'.\\').join(\"[.]\");\\n};"
                    },
                    {
                        "username": "kadoyan",
                        "content": "var defangIPaddr = address => address.split(\\'.\\').join(\\'[.]\\');"
                    },
                    {
                        "username": "rocky-andre",
                        "content": "return address.replace(\".\", \"[.]\")"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "zengfei216",
                        "content": "What skill is this problem targeting? it seems kind of trivial.."
                    },
                    {
                        "username": "nguyenvantuyen6789",
                        "content": "I also think like you"
                    },
                    {
                        "username": "harshita12y",
                        "content": "![image](https://assets.leetcode.com/users/images/d828876e-e260-454e-9572-494a0e58665c_1621444482.0735073.png)\\n"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "WHAT LANGUAGE IS THIS?\\n"
                    },
                    {
                        "username": "MikeBarskiy",
                        "content": "Why we just can\\'t use String method: replaceAll() or replace()?\\n*Replace() in the body use replaceAll()*\\n\\nAnd our solution will be:\\n        `return address.replaceAll(\"\\\\\\\\.\", \"[.]\");`"
                    },
                    {
                        "username": "bbbbbbbbb9",
                        "content": "\\'\\'\\'\\nreturn address.Replace(\".\",\"[.]\");\\n\\'\\'\\'"
                    },
                    {
                        "username": "Code_Enthusiast232",
                        "content": "Just try to create a new string type variable, which can help you to beat 100% of users"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\\n\\nBelow solution worked for in \\n\\n `class Solution {\\n    public String defangIPaddr(String address) {\\n      String st=address.replace(\".\",\"[.]\");\\n      return st;\\n    }\\n}`\\n\\nDo let me know if you have any suggestions."
                    }
                ]
            },
            {
                "id": 2058583,
                "content": [
                    {
                        "username": "Jack_oS",
                        "content": "`return address.replace(\\'.\\', \\'[.]\\')`\\n\\nCan this be made even simpler?"
                    },
                    {
                        "username": "mkrishnateja07",
                        "content": "/**\\n * @param {string} address\\n * @return {string}\\n */\\nvar defangIPaddr = function(address) {\\n   return address.split(\\'.\\').join(\"[.]\");\\n};"
                    },
                    {
                        "username": "kadoyan",
                        "content": "var defangIPaddr = address => address.split(\\'.\\').join(\\'[.]\\');"
                    },
                    {
                        "username": "rocky-andre",
                        "content": "return address.replace(\".\", \"[.]\")"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "zengfei216",
                        "content": "What skill is this problem targeting? it seems kind of trivial.."
                    },
                    {
                        "username": "nguyenvantuyen6789",
                        "content": "I also think like you"
                    },
                    {
                        "username": "harshita12y",
                        "content": "![image](https://assets.leetcode.com/users/images/d828876e-e260-454e-9572-494a0e58665c_1621444482.0735073.png)\\n"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "WHAT LANGUAGE IS THIS?\\n"
                    },
                    {
                        "username": "MikeBarskiy",
                        "content": "Why we just can\\'t use String method: replaceAll() or replace()?\\n*Replace() in the body use replaceAll()*\\n\\nAnd our solution will be:\\n        `return address.replaceAll(\"\\\\\\\\.\", \"[.]\");`"
                    },
                    {
                        "username": "bbbbbbbbb9",
                        "content": "\\'\\'\\'\\nreturn address.Replace(\".\",\"[.]\");\\n\\'\\'\\'"
                    },
                    {
                        "username": "Code_Enthusiast232",
                        "content": "Just try to create a new string type variable, which can help you to beat 100% of users"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\\n\\nBelow solution worked for in \\n\\n `class Solution {\\n    public String defangIPaddr(String address) {\\n      String st=address.replace(\".\",\"[.]\");\\n      return st;\\n    }\\n}`\\n\\nDo let me know if you have any suggestions."
                    }
                ]
            },
            {
                "id": 1918893,
                "content": [
                    {
                        "username": "Jack_oS",
                        "content": "`return address.replace(\\'.\\', \\'[.]\\')`\\n\\nCan this be made even simpler?"
                    },
                    {
                        "username": "mkrishnateja07",
                        "content": "/**\\n * @param {string} address\\n * @return {string}\\n */\\nvar defangIPaddr = function(address) {\\n   return address.split(\\'.\\').join(\"[.]\");\\n};"
                    },
                    {
                        "username": "kadoyan",
                        "content": "var defangIPaddr = address => address.split(\\'.\\').join(\\'[.]\\');"
                    },
                    {
                        "username": "rocky-andre",
                        "content": "return address.replace(\".\", \"[.]\")"
                    },
                    {
                        "username": "Abhishek_Singh_512",
                        "content": "You could just return the original one with replace.\\nI means:\\nreturn address.replace(\".\",\"[.]\");\\nBeacuse in java string is immutable, inside it (replace or other string changing methods) create another string object."
                    },
                    {
                        "username": "zengfei216",
                        "content": "What skill is this problem targeting? it seems kind of trivial.."
                    },
                    {
                        "username": "nguyenvantuyen6789",
                        "content": "I also think like you"
                    },
                    {
                        "username": "harshita12y",
                        "content": "![image](https://assets.leetcode.com/users/images/d828876e-e260-454e-9572-494a0e58665c_1621444482.0735073.png)\\n"
                    },
                    {
                        "username": "roshanjha_23",
                        "content": "WHAT LANGUAGE IS THIS?\\n"
                    },
                    {
                        "username": "MikeBarskiy",
                        "content": "Why we just can\\'t use String method: replaceAll() or replace()?\\n*Replace() in the body use replaceAll()*\\n\\nAnd our solution will be:\\n        `return address.replaceAll(\"\\\\\\\\.\", \"[.]\");`"
                    },
                    {
                        "username": "bbbbbbbbb9",
                        "content": "\\'\\'\\'\\nreturn address.Replace(\".\",\"[.]\");\\n\\'\\'\\'"
                    },
                    {
                        "username": "Code_Enthusiast232",
                        "content": "Just try to create a new string type variable, which can help you to beat 100% of users"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Hi All,\\n\\nBelow solution worked for in \\n\\n `class Solution {\\n    public String defangIPaddr(String address) {\\n      String st=address.replace(\".\",\"[.]\");\\n      return st;\\n    }\\n}`\\n\\nDo let me know if you have any suggestions."
                    }
                ]
            },
            {
                "id": 1913637,
                "content": [
                    {
                        "username": "saurabh15094",
                        "content": "#Very Easy Java Solution #\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n      return address.replace(\".\",\"[.]\"); \\n    }\\n}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "solutyon",
                        "content": "Javascript beginner solution\\n ( 2 lines of code)\\n\\nvar defangIPaddr = function(address) {\\n    let newAddress = address.replaceAll(\".\", \"[.]\")\\n    return newAddress\\n    \\n    };\\n\\nlet input = \"1.1.1.1\"\\nconsole.log(defangIPaddr(input))"
                    },
                    {
                        "username": "chaitanya312",
                        "content": "May be there exist a inbuilt function that can be used in this problem"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/defanging-an-ip-address/solutions/3183694/javascript-beat-92-time-beat-97-space-2-solution/\\n\\nLinear Space | Linear Time"
                    },
                    {
                        "username": "Kalpit_Rathi",
                        "content": "100% faster solution in java || very easy\\n\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder sb = new StringBuilder();\\n        char[] arr = address.toCharArray();\\n\\n        for (int i = 0; i < arr.length; i++)\\n        {\\n            if (arr[i] == \\'.\\')\\n            {\\n                sb.append(\"[.]\");\\n            }\\n            else\\n            {\\n                sb.append(arr[i]);\\n            }\\n        }\\n\\n        return sb.toString();\\n    }\\n}"
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public String defangIPaddr(String address) {\\n        int l = address.length();\\n        int ol = l+6;\\n        String s= \"\";\\n        for(int i=0;i<l;i++){\\n            if(address.charAt(i)==\\'.\\'){\\n                s = s + \"[\";\\n                s = s+ \".\";\\n                s = s + \"]\";\\n            }else{\\n                s = s+address.charAt(i);\\n            }\\n        }\\n        return s;\\n    }\\n} //`Defanging an IP Address`"
                    },
                    {
                        "username": "ravi-_123",
                        "content": "solutions ::\\ninsted of (.)we need to just add the string\"[.]\".\\n\\nbelow solutions link:\\nhttps://leetcode.com/problems/defanging-an-ip-address/description/"
                    },
                    {
                        "username": "StellarAlpit",
                        "content": "One Line Solution:\\n `return address.replaceAll(\".\",\"[.]\")`"
                    },
                    {
                        "username": "Darl1ng",
                        "content": "address = \\n\"1.1.1.1\"\\nOutput\\n\"255[.]100[.]50[.]0\"\\nExpected\\n\"1[.]1[.]1[.]1\"\\nStdout\\n\"1[.]1[.]1[.]1\"\\ni dont know...\\nhelp please :("
                    }
                ]
            },
            {
                "id": 1902989,
                "content": [
                    {
                        "username": "saurabh15094",
                        "content": "#Very Easy Java Solution #\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n      return address.replace(\".\",\"[.]\"); \\n    }\\n}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "solutyon",
                        "content": "Javascript beginner solution\\n ( 2 lines of code)\\n\\nvar defangIPaddr = function(address) {\\n    let newAddress = address.replaceAll(\".\", \"[.]\")\\n    return newAddress\\n    \\n    };\\n\\nlet input = \"1.1.1.1\"\\nconsole.log(defangIPaddr(input))"
                    },
                    {
                        "username": "chaitanya312",
                        "content": "May be there exist a inbuilt function that can be used in this problem"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/defanging-an-ip-address/solutions/3183694/javascript-beat-92-time-beat-97-space-2-solution/\\n\\nLinear Space | Linear Time"
                    },
                    {
                        "username": "Kalpit_Rathi",
                        "content": "100% faster solution in java || very easy\\n\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder sb = new StringBuilder();\\n        char[] arr = address.toCharArray();\\n\\n        for (int i = 0; i < arr.length; i++)\\n        {\\n            if (arr[i] == \\'.\\')\\n            {\\n                sb.append(\"[.]\");\\n            }\\n            else\\n            {\\n                sb.append(arr[i]);\\n            }\\n        }\\n\\n        return sb.toString();\\n    }\\n}"
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public String defangIPaddr(String address) {\\n        int l = address.length();\\n        int ol = l+6;\\n        String s= \"\";\\n        for(int i=0;i<l;i++){\\n            if(address.charAt(i)==\\'.\\'){\\n                s = s + \"[\";\\n                s = s+ \".\";\\n                s = s + \"]\";\\n            }else{\\n                s = s+address.charAt(i);\\n            }\\n        }\\n        return s;\\n    }\\n} //`Defanging an IP Address`"
                    },
                    {
                        "username": "ravi-_123",
                        "content": "solutions ::\\ninsted of (.)we need to just add the string\"[.]\".\\n\\nbelow solutions link:\\nhttps://leetcode.com/problems/defanging-an-ip-address/description/"
                    },
                    {
                        "username": "StellarAlpit",
                        "content": "One Line Solution:\\n `return address.replaceAll(\".\",\"[.]\")`"
                    },
                    {
                        "username": "Darl1ng",
                        "content": "address = \\n\"1.1.1.1\"\\nOutput\\n\"255[.]100[.]50[.]0\"\\nExpected\\n\"1[.]1[.]1[.]1\"\\nStdout\\n\"1[.]1[.]1[.]1\"\\ni dont know...\\nhelp please :("
                    }
                ]
            },
            {
                "id": 1854943,
                "content": [
                    {
                        "username": "saurabh15094",
                        "content": "#Very Easy Java Solution #\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n      return address.replace(\".\",\"[.]\"); \\n    }\\n}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "solutyon",
                        "content": "Javascript beginner solution\\n ( 2 lines of code)\\n\\nvar defangIPaddr = function(address) {\\n    let newAddress = address.replaceAll(\".\", \"[.]\")\\n    return newAddress\\n    \\n    };\\n\\nlet input = \"1.1.1.1\"\\nconsole.log(defangIPaddr(input))"
                    },
                    {
                        "username": "chaitanya312",
                        "content": "May be there exist a inbuilt function that can be used in this problem"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/defanging-an-ip-address/solutions/3183694/javascript-beat-92-time-beat-97-space-2-solution/\\n\\nLinear Space | Linear Time"
                    },
                    {
                        "username": "Kalpit_Rathi",
                        "content": "100% faster solution in java || very easy\\n\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder sb = new StringBuilder();\\n        char[] arr = address.toCharArray();\\n\\n        for (int i = 0; i < arr.length; i++)\\n        {\\n            if (arr[i] == \\'.\\')\\n            {\\n                sb.append(\"[.]\");\\n            }\\n            else\\n            {\\n                sb.append(arr[i]);\\n            }\\n        }\\n\\n        return sb.toString();\\n    }\\n}"
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public String defangIPaddr(String address) {\\n        int l = address.length();\\n        int ol = l+6;\\n        String s= \"\";\\n        for(int i=0;i<l;i++){\\n            if(address.charAt(i)==\\'.\\'){\\n                s = s + \"[\";\\n                s = s+ \".\";\\n                s = s + \"]\";\\n            }else{\\n                s = s+address.charAt(i);\\n            }\\n        }\\n        return s;\\n    }\\n} //`Defanging an IP Address`"
                    },
                    {
                        "username": "ravi-_123",
                        "content": "solutions ::\\ninsted of (.)we need to just add the string\"[.]\".\\n\\nbelow solutions link:\\nhttps://leetcode.com/problems/defanging-an-ip-address/description/"
                    },
                    {
                        "username": "StellarAlpit",
                        "content": "One Line Solution:\\n `return address.replaceAll(\".\",\"[.]\")`"
                    },
                    {
                        "username": "Darl1ng",
                        "content": "address = \\n\"1.1.1.1\"\\nOutput\\n\"255[.]100[.]50[.]0\"\\nExpected\\n\"1[.]1[.]1[.]1\"\\nStdout\\n\"1[.]1[.]1[.]1\"\\ni dont know...\\nhelp please :("
                    }
                ]
            },
            {
                "id": 1848684,
                "content": [
                    {
                        "username": "saurabh15094",
                        "content": "#Very Easy Java Solution #\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n      return address.replace(\".\",\"[.]\"); \\n    }\\n}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "solutyon",
                        "content": "Javascript beginner solution\\n ( 2 lines of code)\\n\\nvar defangIPaddr = function(address) {\\n    let newAddress = address.replaceAll(\".\", \"[.]\")\\n    return newAddress\\n    \\n    };\\n\\nlet input = \"1.1.1.1\"\\nconsole.log(defangIPaddr(input))"
                    },
                    {
                        "username": "chaitanya312",
                        "content": "May be there exist a inbuilt function that can be used in this problem"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/defanging-an-ip-address/solutions/3183694/javascript-beat-92-time-beat-97-space-2-solution/\\n\\nLinear Space | Linear Time"
                    },
                    {
                        "username": "Kalpit_Rathi",
                        "content": "100% faster solution in java || very easy\\n\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder sb = new StringBuilder();\\n        char[] arr = address.toCharArray();\\n\\n        for (int i = 0; i < arr.length; i++)\\n        {\\n            if (arr[i] == \\'.\\')\\n            {\\n                sb.append(\"[.]\");\\n            }\\n            else\\n            {\\n                sb.append(arr[i]);\\n            }\\n        }\\n\\n        return sb.toString();\\n    }\\n}"
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public String defangIPaddr(String address) {\\n        int l = address.length();\\n        int ol = l+6;\\n        String s= \"\";\\n        for(int i=0;i<l;i++){\\n            if(address.charAt(i)==\\'.\\'){\\n                s = s + \"[\";\\n                s = s+ \".\";\\n                s = s + \"]\";\\n            }else{\\n                s = s+address.charAt(i);\\n            }\\n        }\\n        return s;\\n    }\\n} //`Defanging an IP Address`"
                    },
                    {
                        "username": "ravi-_123",
                        "content": "solutions ::\\ninsted of (.)we need to just add the string\"[.]\".\\n\\nbelow solutions link:\\nhttps://leetcode.com/problems/defanging-an-ip-address/description/"
                    },
                    {
                        "username": "StellarAlpit",
                        "content": "One Line Solution:\\n `return address.replaceAll(\".\",\"[.]\")`"
                    },
                    {
                        "username": "Darl1ng",
                        "content": "address = \\n\"1.1.1.1\"\\nOutput\\n\"255[.]100[.]50[.]0\"\\nExpected\\n\"1[.]1[.]1[.]1\"\\nStdout\\n\"1[.]1[.]1[.]1\"\\ni dont know...\\nhelp please :("
                    }
                ]
            },
            {
                "id": 1800375,
                "content": [
                    {
                        "username": "saurabh15094",
                        "content": "#Very Easy Java Solution #\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n      return address.replace(\".\",\"[.]\"); \\n    }\\n}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "solutyon",
                        "content": "Javascript beginner solution\\n ( 2 lines of code)\\n\\nvar defangIPaddr = function(address) {\\n    let newAddress = address.replaceAll(\".\", \"[.]\")\\n    return newAddress\\n    \\n    };\\n\\nlet input = \"1.1.1.1\"\\nconsole.log(defangIPaddr(input))"
                    },
                    {
                        "username": "chaitanya312",
                        "content": "May be there exist a inbuilt function that can be used in this problem"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/defanging-an-ip-address/solutions/3183694/javascript-beat-92-time-beat-97-space-2-solution/\\n\\nLinear Space | Linear Time"
                    },
                    {
                        "username": "Kalpit_Rathi",
                        "content": "100% faster solution in java || very easy\\n\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder sb = new StringBuilder();\\n        char[] arr = address.toCharArray();\\n\\n        for (int i = 0; i < arr.length; i++)\\n        {\\n            if (arr[i] == \\'.\\')\\n            {\\n                sb.append(\"[.]\");\\n            }\\n            else\\n            {\\n                sb.append(arr[i]);\\n            }\\n        }\\n\\n        return sb.toString();\\n    }\\n}"
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public String defangIPaddr(String address) {\\n        int l = address.length();\\n        int ol = l+6;\\n        String s= \"\";\\n        for(int i=0;i<l;i++){\\n            if(address.charAt(i)==\\'.\\'){\\n                s = s + \"[\";\\n                s = s+ \".\";\\n                s = s + \"]\";\\n            }else{\\n                s = s+address.charAt(i);\\n            }\\n        }\\n        return s;\\n    }\\n} //`Defanging an IP Address`"
                    },
                    {
                        "username": "ravi-_123",
                        "content": "solutions ::\\ninsted of (.)we need to just add the string\"[.]\".\\n\\nbelow solutions link:\\nhttps://leetcode.com/problems/defanging-an-ip-address/description/"
                    },
                    {
                        "username": "StellarAlpit",
                        "content": "One Line Solution:\\n `return address.replaceAll(\".\",\"[.]\")`"
                    },
                    {
                        "username": "Darl1ng",
                        "content": "address = \\n\"1.1.1.1\"\\nOutput\\n\"255[.]100[.]50[.]0\"\\nExpected\\n\"1[.]1[.]1[.]1\"\\nStdout\\n\"1[.]1[.]1[.]1\"\\ni dont know...\\nhelp please :("
                    }
                ]
            },
            {
                "id": 1795323,
                "content": [
                    {
                        "username": "saurabh15094",
                        "content": "#Very Easy Java Solution #\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n      return address.replace(\".\",\"[.]\"); \\n    }\\n}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "solutyon",
                        "content": "Javascript beginner solution\\n ( 2 lines of code)\\n\\nvar defangIPaddr = function(address) {\\n    let newAddress = address.replaceAll(\".\", \"[.]\")\\n    return newAddress\\n    \\n    };\\n\\nlet input = \"1.1.1.1\"\\nconsole.log(defangIPaddr(input))"
                    },
                    {
                        "username": "chaitanya312",
                        "content": "May be there exist a inbuilt function that can be used in this problem"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/defanging-an-ip-address/solutions/3183694/javascript-beat-92-time-beat-97-space-2-solution/\\n\\nLinear Space | Linear Time"
                    },
                    {
                        "username": "Kalpit_Rathi",
                        "content": "100% faster solution in java || very easy\\n\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder sb = new StringBuilder();\\n        char[] arr = address.toCharArray();\\n\\n        for (int i = 0; i < arr.length; i++)\\n        {\\n            if (arr[i] == \\'.\\')\\n            {\\n                sb.append(\"[.]\");\\n            }\\n            else\\n            {\\n                sb.append(arr[i]);\\n            }\\n        }\\n\\n        return sb.toString();\\n    }\\n}"
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public String defangIPaddr(String address) {\\n        int l = address.length();\\n        int ol = l+6;\\n        String s= \"\";\\n        for(int i=0;i<l;i++){\\n            if(address.charAt(i)==\\'.\\'){\\n                s = s + \"[\";\\n                s = s+ \".\";\\n                s = s + \"]\";\\n            }else{\\n                s = s+address.charAt(i);\\n            }\\n        }\\n        return s;\\n    }\\n} //`Defanging an IP Address`"
                    },
                    {
                        "username": "ravi-_123",
                        "content": "solutions ::\\ninsted of (.)we need to just add the string\"[.]\".\\n\\nbelow solutions link:\\nhttps://leetcode.com/problems/defanging-an-ip-address/description/"
                    },
                    {
                        "username": "StellarAlpit",
                        "content": "One Line Solution:\\n `return address.replaceAll(\".\",\"[.]\")`"
                    },
                    {
                        "username": "Darl1ng",
                        "content": "address = \\n\"1.1.1.1\"\\nOutput\\n\"255[.]100[.]50[.]0\"\\nExpected\\n\"1[.]1[.]1[.]1\"\\nStdout\\n\"1[.]1[.]1[.]1\"\\ni dont know...\\nhelp please :("
                    }
                ]
            },
            {
                "id": 1793978,
                "content": [
                    {
                        "username": "saurabh15094",
                        "content": "#Very Easy Java Solution #\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n      return address.replace(\".\",\"[.]\"); \\n    }\\n}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "solutyon",
                        "content": "Javascript beginner solution\\n ( 2 lines of code)\\n\\nvar defangIPaddr = function(address) {\\n    let newAddress = address.replaceAll(\".\", \"[.]\")\\n    return newAddress\\n    \\n    };\\n\\nlet input = \"1.1.1.1\"\\nconsole.log(defangIPaddr(input))"
                    },
                    {
                        "username": "chaitanya312",
                        "content": "May be there exist a inbuilt function that can be used in this problem"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/defanging-an-ip-address/solutions/3183694/javascript-beat-92-time-beat-97-space-2-solution/\\n\\nLinear Space | Linear Time"
                    },
                    {
                        "username": "Kalpit_Rathi",
                        "content": "100% faster solution in java || very easy\\n\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder sb = new StringBuilder();\\n        char[] arr = address.toCharArray();\\n\\n        for (int i = 0; i < arr.length; i++)\\n        {\\n            if (arr[i] == \\'.\\')\\n            {\\n                sb.append(\"[.]\");\\n            }\\n            else\\n            {\\n                sb.append(arr[i]);\\n            }\\n        }\\n\\n        return sb.toString();\\n    }\\n}"
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public String defangIPaddr(String address) {\\n        int l = address.length();\\n        int ol = l+6;\\n        String s= \"\";\\n        for(int i=0;i<l;i++){\\n            if(address.charAt(i)==\\'.\\'){\\n                s = s + \"[\";\\n                s = s+ \".\";\\n                s = s + \"]\";\\n            }else{\\n                s = s+address.charAt(i);\\n            }\\n        }\\n        return s;\\n    }\\n} //`Defanging an IP Address`"
                    },
                    {
                        "username": "ravi-_123",
                        "content": "solutions ::\\ninsted of (.)we need to just add the string\"[.]\".\\n\\nbelow solutions link:\\nhttps://leetcode.com/problems/defanging-an-ip-address/description/"
                    },
                    {
                        "username": "StellarAlpit",
                        "content": "One Line Solution:\\n `return address.replaceAll(\".\",\"[.]\")`"
                    },
                    {
                        "username": "Darl1ng",
                        "content": "address = \\n\"1.1.1.1\"\\nOutput\\n\"255[.]100[.]50[.]0\"\\nExpected\\n\"1[.]1[.]1[.]1\"\\nStdout\\n\"1[.]1[.]1[.]1\"\\ni dont know...\\nhelp please :("
                    }
                ]
            },
            {
                "id": 1781594,
                "content": [
                    {
                        "username": "saurabh15094",
                        "content": "#Very Easy Java Solution #\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n      return address.replace(\".\",\"[.]\"); \\n    }\\n}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "solutyon",
                        "content": "Javascript beginner solution\\n ( 2 lines of code)\\n\\nvar defangIPaddr = function(address) {\\n    let newAddress = address.replaceAll(\".\", \"[.]\")\\n    return newAddress\\n    \\n    };\\n\\nlet input = \"1.1.1.1\"\\nconsole.log(defangIPaddr(input))"
                    },
                    {
                        "username": "chaitanya312",
                        "content": "May be there exist a inbuilt function that can be used in this problem"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/defanging-an-ip-address/solutions/3183694/javascript-beat-92-time-beat-97-space-2-solution/\\n\\nLinear Space | Linear Time"
                    },
                    {
                        "username": "Kalpit_Rathi",
                        "content": "100% faster solution in java || very easy\\n\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder sb = new StringBuilder();\\n        char[] arr = address.toCharArray();\\n\\n        for (int i = 0; i < arr.length; i++)\\n        {\\n            if (arr[i] == \\'.\\')\\n            {\\n                sb.append(\"[.]\");\\n            }\\n            else\\n            {\\n                sb.append(arr[i]);\\n            }\\n        }\\n\\n        return sb.toString();\\n    }\\n}"
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public String defangIPaddr(String address) {\\n        int l = address.length();\\n        int ol = l+6;\\n        String s= \"\";\\n        for(int i=0;i<l;i++){\\n            if(address.charAt(i)==\\'.\\'){\\n                s = s + \"[\";\\n                s = s+ \".\";\\n                s = s + \"]\";\\n            }else{\\n                s = s+address.charAt(i);\\n            }\\n        }\\n        return s;\\n    }\\n} //`Defanging an IP Address`"
                    },
                    {
                        "username": "ravi-_123",
                        "content": "solutions ::\\ninsted of (.)we need to just add the string\"[.]\".\\n\\nbelow solutions link:\\nhttps://leetcode.com/problems/defanging-an-ip-address/description/"
                    },
                    {
                        "username": "StellarAlpit",
                        "content": "One Line Solution:\\n `return address.replaceAll(\".\",\"[.]\")`"
                    },
                    {
                        "username": "Darl1ng",
                        "content": "address = \\n\"1.1.1.1\"\\nOutput\\n\"255[.]100[.]50[.]0\"\\nExpected\\n\"1[.]1[.]1[.]1\"\\nStdout\\n\"1[.]1[.]1[.]1\"\\ni dont know...\\nhelp please :("
                    }
                ]
            },
            {
                "id": 1759034,
                "content": [
                    {
                        "username": "saurabh15094",
                        "content": "#Very Easy Java Solution #\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n      return address.replace(\".\",\"[.]\"); \\n    }\\n}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "solutyon",
                        "content": "Javascript beginner solution\\n ( 2 lines of code)\\n\\nvar defangIPaddr = function(address) {\\n    let newAddress = address.replaceAll(\".\", \"[.]\")\\n    return newAddress\\n    \\n    };\\n\\nlet input = \"1.1.1.1\"\\nconsole.log(defangIPaddr(input))"
                    },
                    {
                        "username": "chaitanya312",
                        "content": "May be there exist a inbuilt function that can be used in this problem"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/defanging-an-ip-address/solutions/3183694/javascript-beat-92-time-beat-97-space-2-solution/\\n\\nLinear Space | Linear Time"
                    },
                    {
                        "username": "Kalpit_Rathi",
                        "content": "100% faster solution in java || very easy\\n\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder sb = new StringBuilder();\\n        char[] arr = address.toCharArray();\\n\\n        for (int i = 0; i < arr.length; i++)\\n        {\\n            if (arr[i] == \\'.\\')\\n            {\\n                sb.append(\"[.]\");\\n            }\\n            else\\n            {\\n                sb.append(arr[i]);\\n            }\\n        }\\n\\n        return sb.toString();\\n    }\\n}"
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public String defangIPaddr(String address) {\\n        int l = address.length();\\n        int ol = l+6;\\n        String s= \"\";\\n        for(int i=0;i<l;i++){\\n            if(address.charAt(i)==\\'.\\'){\\n                s = s + \"[\";\\n                s = s+ \".\";\\n                s = s + \"]\";\\n            }else{\\n                s = s+address.charAt(i);\\n            }\\n        }\\n        return s;\\n    }\\n} //`Defanging an IP Address`"
                    },
                    {
                        "username": "ravi-_123",
                        "content": "solutions ::\\ninsted of (.)we need to just add the string\"[.]\".\\n\\nbelow solutions link:\\nhttps://leetcode.com/problems/defanging-an-ip-address/description/"
                    },
                    {
                        "username": "StellarAlpit",
                        "content": "One Line Solution:\\n `return address.replaceAll(\".\",\"[.]\")`"
                    },
                    {
                        "username": "Darl1ng",
                        "content": "address = \\n\"1.1.1.1\"\\nOutput\\n\"255[.]100[.]50[.]0\"\\nExpected\\n\"1[.]1[.]1[.]1\"\\nStdout\\n\"1[.]1[.]1[.]1\"\\ni dont know...\\nhelp please :("
                    }
                ]
            },
            {
                "id": 1758032,
                "content": [
                    {
                        "username": "saurabh15094",
                        "content": "#Very Easy Java Solution #\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n      return address.replace(\".\",\"[.]\"); \\n    }\\n}"
                    },
                    {
                        "username": "Cyrus0606",
                        "content": "\\u5C4C\\u4F60\\u8001\\u6BCD\\u5168\\u5BB6\\u5403\\u5C4E\\u98F2Ovaltine"
                    },
                    {
                        "username": "solutyon",
                        "content": "Javascript beginner solution\\n ( 2 lines of code)\\n\\nvar defangIPaddr = function(address) {\\n    let newAddress = address.replaceAll(\".\", \"[.]\")\\n    return newAddress\\n    \\n    };\\n\\nlet input = \"1.1.1.1\"\\nconsole.log(defangIPaddr(input))"
                    },
                    {
                        "username": "chaitanya312",
                        "content": "May be there exist a inbuilt function that can be used in this problem"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/defanging-an-ip-address/solutions/3183694/javascript-beat-92-time-beat-97-space-2-solution/\\n\\nLinear Space | Linear Time"
                    },
                    {
                        "username": "Kalpit_Rathi",
                        "content": "100% faster solution in java || very easy\\n\\nclass Solution {\\n    public String defangIPaddr(String address) {\\n        StringBuilder sb = new StringBuilder();\\n        char[] arr = address.toCharArray();\\n\\n        for (int i = 0; i < arr.length; i++)\\n        {\\n            if (arr[i] == \\'.\\')\\n            {\\n                sb.append(\"[.]\");\\n            }\\n            else\\n            {\\n                sb.append(arr[i]);\\n            }\\n        }\\n\\n        return sb.toString();\\n    }\\n}"
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public String defangIPaddr(String address) {\\n        int l = address.length();\\n        int ol = l+6;\\n        String s= \"\";\\n        for(int i=0;i<l;i++){\\n            if(address.charAt(i)==\\'.\\'){\\n                s = s + \"[\";\\n                s = s+ \".\";\\n                s = s + \"]\";\\n            }else{\\n                s = s+address.charAt(i);\\n            }\\n        }\\n        return s;\\n    }\\n} //`Defanging an IP Address`"
                    },
                    {
                        "username": "ravi-_123",
                        "content": "solutions ::\\ninsted of (.)we need to just add the string\"[.]\".\\n\\nbelow solutions link:\\nhttps://leetcode.com/problems/defanging-an-ip-address/description/"
                    },
                    {
                        "username": "StellarAlpit",
                        "content": "One Line Solution:\\n `return address.replaceAll(\".\",\"[.]\")`"
                    },
                    {
                        "username": "Darl1ng",
                        "content": "address = \\n\"1.1.1.1\"\\nOutput\\n\"255[.]100[.]50[.]0\"\\nExpected\\n\"1[.]1[.]1[.]1\"\\nStdout\\n\"1[.]1[.]1[.]1\"\\ni dont know...\\nhelp please :("
                    }
                ]
            }
        ]
    }
]