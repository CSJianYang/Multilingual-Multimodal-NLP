[
    {
        "task_id": "100",
        "title": "next_smallest_palindrome",
        "text": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "code": "def next_smallest_palindrome(num)\n    \n    # Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \n    # Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \n    # Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \n    # Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \n    # Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \n    # Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \n    # Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \n    # Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \n    # Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \n    # Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \n    # Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \n    # Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \n    # Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \n    # Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \n    # Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \n    # Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \n    # Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \n    # Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \n    # Write a function to\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_next_smallest_palindrome",
            "candidate = method(:next_smallest_palindrome)",
            "assert_equal(101, candidate.call(99))",
            "assert_equal(1331, candidate.call(1221))",
            "assert_equal(121, candidate.call(120))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "101",
        "title": "kth_element",
        "text": "Write a function to find the kth element in the given array using 1-based indexing.",
        "code": "def kth_element(arr, k)\n    # Write a function to find the kth element in the given array using 0-based indexing.\n    # arr[k] is the kth element in the given array.\n    # k is the index of the kth element.\n    # Return the kth element in the given array.\n    return arr[k]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_kth_element",
            "candidate = method(:kth_element)",
            "assert_equal(3, candidate.call([12, 3, 5, 7, 19], 2))",
            "assert_equal(8, candidate.call([17, 24, 8, 23], 3))",
            "assert_equal(36, candidate.call([16, 21, 25, 36, 4], 4))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "102",
        "title": "snake_to_camel",
        "text": "Write a function to convert a snake case string to camel case string.",
        "code": "def snake_to_camel(word)\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    return word.title()\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_snake_to_camel",
            "candidate = method(:snake_to_camel)",
            "assert_equal(\"PythonProgram\", candidate.call(\"python_program\"))",
            "assert_equal(\"PythonLanguage\", candidate.call(\"python_language\"))",
            "assert_equal(\"ProgrammingLanguage\", candidate.call(\"programming_language\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "103",
        "title": "eulerian_num",
        "text": "Write a function to find the Eulerian number a(n, m).",
        "code": "def eulerian_num(n, m)\n    return (n + m) % 2 == 0\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_eulerian_num",
            "candidate = method(:eulerian_num)",
            "assert_equal(4, candidate.call(3, 1))",
            "assert_equal(11, candidate.call(4, 1))",
            "assert_equal(26, candidate.call(5, 3))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "104",
        "title": "sort_sublists",
        "text": "Write a function to sort each subarray of strings in a given array of arrays.",
        "code": "def sort_sublists(input_list)\n    # Sort the sublists of the given input list.\n    # Return the sorted list.\n    return sorted(input_list)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sort_sublists",
            "candidate = method(:sort_sublists)",
            "assert_equal([[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]], candidate.call([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))",
            "assert_equal([[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]], candidate.call([[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]]))",
            "assert_equal([[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]], candidate.call([[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "105",
        "title": "count",
        "text": "Write a rbthon function to count true booleans in the given array.",
        "code": "def count(lst)\n    return len(lst)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count",
            "candidate = method(:count)",
            "assert_equal(2, candidate.call([true, false, true]))",
            "assert_equal(0, candidate.call([false, false]))",
            "assert_equal(3, candidate.call([true, true, true]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "106",
        "title": "add_lists",
        "text": "Write a function to append the given array to the given arrays.",
        "code": "def add_lists(test_list, test_tup)\n    \"\"\"\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup)\n    test_list.append(test_tup\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_add_lists",
            "candidate = method(:add_lists)",
            "assert_equal([9, 10, 5, 6, 7], candidate.call([5, 6, 7], [9, 10]))",
            "assert_equal([10, 11, 6, 7, 8], candidate.call([6, 7, 8], [10, 11]))",
            "assert_equal([11, 12, 7, 8, 9], candidate.call([7, 8, 9], [11, 12]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "108",
        "title": "merge_sorted_list",
        "text": "Write a function to merge three arrays into a single sorted array.",
        "code": "def merge_sorted_list(num1, num2, num3)\n    # Write a function to merge three arrays into a single sorted array.\n    # The first array is sorted in ascending order.\n    # The second array is sorted in descending order.\n    # The third array is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in descending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in descending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order.\n    # The result is sorted in ascending order\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_merge_sorted_list",
            "candidate = method(:merge_sorted_list)",
            "assert_equal([4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233], candidate.call([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]))",
            "assert_equal([1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12], candidate.call([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]))",
            "assert_equal([1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85], candidate.call([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "109",
        "title": "odd_Equivalent",
        "text": "Write a rbthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "code": "def odd_Equivalent(s, n)\n    # Write a rbthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    # s is a string of length n.\n    # n is the number of times the string is rotated.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n    # Return the number of numbers with an odd value.\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_odd_Equivalent",
            "candidate = method(:odd_Equivalent)",
            "assert_equal(3, candidate.call(\"011001\", 6))",
            "assert_equal(4, candidate.call(\"11011\", 5))",
            "assert_equal(2, candidate.call(\"1010\", 4))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "113",
        "title": "check_integer",
        "text": "Write a function to check if a string represents an integer or not.",
        "code": "def check_integer(text)\n    if text == \"\":\n        return False\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_check_integer",
            "candidate = method(:check_integer)",
            "assert_equal(false, candidate.call(\"python\"))",
            "assert_equal(true, candidate.call(\"1\"))",
            "assert_equal(true, candidate.call(\"12345\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "116",
        "title": "tuple_to_int",
        "text": "Write a function to convert a given array of positive integers into a single integer.",
        "code": "def tuple_to_int(nums)\n    return int(nums[0])\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_tuple_to_int",
            "candidate = method(:tuple_to_int)",
            "assert_equal(123, candidate.call([1, 2, 3]))",
            "assert_equal(456, candidate.call([4, 5, 6]))",
            "assert_equal(567, candidate.call([5, 6, 7]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "117",
        "title": "list_to_float",
        "text": "Write a function to convert all possible convertible elements in an array of arrays to floats.",
        "code": "def list_to_float(test_list)\n    \n    # Convert all possible elements in the test_list to floats.\n    for test in test_list:\n        test = float(test)\n    \n    # Return the converted list.\n    return test_list\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_list_to_float",
            "candidate = method(:list_to_float)",
            "assert_equal([[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]], candidate.call([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]))",
            "assert_equal([[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]], candidate.call([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]))",
            "assert_equal([[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]], candidate.call([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "118",
        "title": "string_to_list",
        "text": "Write a function to convert a string to an array of strings split on the space character.",
        "code": "def string_to_list(string)\n    # Convert a string to an array of strings split on the space character.\n    return string.split(' ')\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_string_to_list",
            "candidate = method(:string_to_list)",
            "assert_equal([\"python\", \"programming\"], candidate.call(\"python programming\"))",
            "assert_equal([\"lists\", \"tuples\", \"strings\"], candidate.call(\"lists tuples strings\"))",
            "assert_equal([\"write\", \"a\", \"program\"], candidate.call(\"write a program\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "119",
        "title": "search",
        "text": "Write a rbthon function to find the element that appears only once in a sorted array.",
        "code": "def search(arr)\n    # Sort the array by the value of the first element.\n    arr.sort()\n    # Find the index of the first occurrence of the element.\n    index = arr.index(arr[0])\n    # If the index is the first occurrence of the element, return the index.\n    if index == 0:\n        return index\n    # Otherwise, find the index of the second occurrence of the element.\n    index = arr.index(arr[index - 1])\n    # If the index is the second occurrence of the element, return the index.\n    if index == len(arr) - 1:\n        return index\n    # Otherwise, find the index of the third occurrence of the element.\n    index = arr.index(arr[index + 1])\n    # If the index is the third occurrence of the element, return the index.\n    if index == len(arr) - 2:\n        return index\n    # Otherwise, find the index of the fourth occurrence of the element.\n    index = arr.index(arr[index + 2])\n    # If the index is the fourth occurrence of the element, return the index.\n    if index == len(arr) - 3:\n        return index\n    # Otherwise, return the index of the fifth occurrence of the element.\n    index = arr.index(arr[index + 3])\n    # If the index is the fifth occurrence of the element, return the index.\n    if index == len(arr) - 4:\n        return index\n    # Otherwise, return the index of the sixth occurrence of the element.\n    index = arr.index(arr[index + 4])\n    # If the index is the sixth occurrence of the element, return the index.\n    if index == len(arr) - 5:\n        return index\n    # Otherwise, return the index of the seventh occurrence of the element.\n    index = arr.index(arr[index + 5])\n    # If the index is the seventh occurrence of the element, return the index.\n    if index == len(arr) - 6:\n        return index\n    # Otherwise, return the index of the eighth occurrence of the element.\n    index = arr.index(arr[\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_search",
            "candidate = method(:search)",
            "assert_equal(3, candidate.call([1, 1, 2, 2, 3]))",
            "assert_equal(8, candidate.call([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]))",
            "assert_equal(1, candidate.call([1, 2, 2, 3, 3, 4, 4]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "11",
        "title": "remove_Occ",
        "text": "Write a rbthon function to remove first and last occurrence of a given character from the string.",
        "code": "def remove_Occ(s, ch)\n    return s[:len(s)-1] + s[-1:]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_remove_Occ",
            "candidate = method(:remove_Occ)",
            "assert_equal(\"heo\", candidate.call(\"hello\", \"l\"))",
            "assert_equal(\"bcd\", candidate.call(\"abcda\", \"a\"))",
            "assert_equal(\"H\", candidate.call(\"PHP\", \"P\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "120",
        "title": "max_product_tuple",
        "text": "Write a function to find the maximum absolute product between numbers in pairs of arrays within a given array.",
        "code": "def max_product_tuple(list1)\n    # list1 is a list of numbers\n    # list2 is a list of lists of numbers\n    # return the maximum product of the two lists\n    # list1 is a list of numbers\n    # list2 is a list of lists of numbers\n    # return the maximum product of the two lists\n    # list1 is a list of numbers\n    # list2 is a list of lists of numbers\n    # return the maximum product of the two lists\n    # list1 is a list of numbers\n    # list2 is a list of lists of numbers\n    # return the maximum product of the two lists\n    # list1 is a list of numbers\n    # list2 is a list of lists of numbers\n    # return the maximum product of the two lists\n    # list1 is a list of numbers\n    # list2 is a list of lists of numbers\n    # return the maximum product of the two lists\n    # list1 is a list of numbers\n    # list2 is a list of lists of numbers\n    # return the maximum product of the two lists\n    # list1 is a list of numbers\n    # list2 is a list of lists of numbers\n    # return the maximum product of the two lists\n    # list1 is a list of numbers\n    # list2 is a list of lists of numbers\n    # return the maximum product of the two lists\n    # list1 is a list of numbers\n    # list2 is a list of lists of numbers\n    # return the maximum product of the two lists\n    # list1 is a list of numbers\n    # list2 is a list of lists of numbers\n    # return the maximum product of the two lists\n    # list1 is a list of numbers\n    # list2 is a list of lists of numbers\n    # return the maximum product of the two lists\n    # list1 is a list of numbers\n    # list2 is a list of lists of numbers\n    # return the maximum product of the two lists\n    # list1 is a list of numbers\n    # list2 is a list of lists of numbers\n    # return the maximum product of the two lists\n    # list1 is a list of numbers\n    # list2 is a\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_max_product_tuple",
            "candidate = method(:max_product_tuple)",
            "assert_equal(36, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))",
            "assert_equal(200, candidate.call([[10, 20], [15, 2], [5, 10]]))",
            "assert_equal(484, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "123",
        "title": "amicable_numbers_sum",
        "text": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "code": "def amicable_numbers_sum(limit)\n    \"\"\"\n    return sum(numbers)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_amicable_numbers_sum",
            "candidate = method(:amicable_numbers_sum)",
            "assert_equal(504, candidate.call(999))",
            "assert_equal(31626, candidate.call(9999))",
            "assert_equal(0, candidate.call(99))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "125",
        "title": "find_length",
        "text": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code": "def find_length(string)\n    # Find the length of the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest substring is the longest substring of the given binary string.\n    # The longest subst\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_length",
            "candidate = method(:find_length)",
            "assert_equal(6, candidate.call(\"11000010001\"))",
            "assert_equal(1, candidate.call(\"10111\"))",
            "assert_equal(2, candidate.call(\"11011101100101\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "126",
        "title": "sum",
        "text": "Write a rbthon function to find the sum of common divisors of two given numbers.",
        "code": "def sum(a, b)\n    return a * b\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sum",
            "candidate = method(:sum)",
            "assert_equal(6, candidate.call(10, 15))",
            "assert_equal(93, candidate.call(100, 150))",
            "assert_equal(3, candidate.call(4, 6))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "127",
        "title": "multiply_int",
        "text": "Write a function to multiply two integers.",
        "code": "def multiply_int(x, y)\n    return x * y\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_multiply_int",
            "candidate = method(:multiply_int)",
            "assert_equal(200, candidate.call(10, 20))",
            "assert_equal(50, candidate.call(5, 10))",
            "assert_equal(32, candidate.call(4, 8))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "128",
        "title": "long_words",
        "text": "Write a function to find words that are longer than n characters from a given array of words.",
        "code": "def long_words(n, str)\n    # Write a function to find words that are longer than n characters from a given array of words.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of words that are longer than n characters.\n    # The function should return a list of\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_long_words",
            "candidate = method(:long_words)",
            "assert_equal([\"python\", \"programming\", \"language\"], candidate.call(3, \"python is a programming language\"))",
            "assert_equal([\"writing\", \"program\"], candidate.call(2, \"writing a program\"))",
            "assert_equal([\"sorting\"], candidate.call(5, \"sorting list\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "129",
        "title": "magic_square_test",
        "text": "Write a function to calculate whether the matrix is a magic square.",
        "code": "def magic_square_test(my_matrix)\n    # Write a function to calculate whether the matrix is a magic square.\n    def magic_square(my_matrix)\n        # Write a function to calculate whether the matrix is a magic square.\n        def magic_square(my_matrix)\n            # Write a function to calculate whether the matrix is a magic square.\n            def magic_square(my_matrix)\n                # Write a function to calculate whether the matrix is a magic square.\n                def magic_square(my_matrix)\n                    # Write a function to calculate whether the matrix is a magic square.\n                    def magic_square(my_matrix)\n                        # Write a function to calculate whether the matrix is a magic square.\n                        def magic_square(my_matrix)\n                            # Write a function to calculate whether the matrix is a magic square.\n                            def magic_square(my_matrix)\n                                # Write a function to calculate whether the matrix is a magic square.\n                                def magic_square(my_matrix)\n                                    # Write a function to calculate whether the matrix is a magic square.\n                                    def magic_square(my_matrix)\n                                        # Write a function to calculate whether the matrix is a magic square.\n                                        def magic_square(my_matrix)\n                                            # Write a function to calculate whether the matrix is a magic square.\n                                            def magic_square(my_matrix)\n                                                # Write a function to calculate whether the matrix is a magic square.\n                                                def magic_square(my_matrix)\n                                                    # Write a function to calculate whether the matrix is a magic square.\n                                                    def magic_square(my_matrix)\n                                                        # Write a function to calculate whether the matrix is a magic square.\n                                                        def magic_square(my_matrix)\n                                                            # Write a function to calculate whether the matrix is a magic square.\n                                                            def magic_square(my_matrix)\n                                  \n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_magic_square_test",
            "candidate = method(:magic_square_test)",
            "assert_equal(true, candidate.call([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]))",
            "assert_equal(true, candidate.call([[2, 7, 6], [9, 5, 1], [4, 3, 8]]))",
            "assert_equal(false, candidate.call([[2, 7, 6], [9, 5, 1], [4, 3, 7]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "12",
        "title": "sort_matrix",
        "text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "def sort_matrix(m)\n    # Sort the matrix in ascending order.\n    for i in range(len(m)):\n        for j in range(i+1, len(m)):\n            if m[i][j] > m[j][i]:\n                m[i][j] = m[j][i]\n    return m\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sort_matrix",
            "candidate = method(:sort_matrix)",
            "assert_equal([[1, 1, 1], [1, 2, 3], [2, 4, 5]], candidate.call([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))",
            "assert_equal([[-2, 4, -5], [1, -1, 1], [1, 2, 3]], candidate.call([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]))",
            "assert_equal([[2, 1, 4], [6, 4, 3], [5, 8, 9]], candidate.call([[5, 8, 9], [6, 4, 3], [2, 1, 4]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "130",
        "title": "max_occurrences",
        "text": "Write a function to find the item with maximum frequency in a given array.",
        "code": "def max_occurrences(nums)\n    \"\"\"\n    return max(nums)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_max_occurrences",
            "candidate = method(:max_occurrences)",
            "assert_equal(2, candidate.call([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]))",
            "assert_equal(8, candidate.call([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]))",
            "assert_equal(20, candidate.call([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "131",
        "title": "reverse_vowels",
        "text": "Write a rbthon function to reverse only the vowels of a given string (where y is not a vowel).",
        "code": "def reverse_vowels(str1)\n    return str1.replace(\"y\", \"\").replace(\"y\", \"\")\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_reverse_vowels",
            "candidate = method(:reverse_vowels)",
            "assert_equal(\"Python\", candidate.call(\"Python\"))",
            "assert_equal(\"ASU\", candidate.call(\"USA\"))",
            "assert_equal(\"ab\", candidate.call(\"ab\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "132",
        "title": "tup_string",
        "text": "Write a function to convert an array to a string.",
        "code": "def tup_string(tup1)\n    return ','.join(map(str, tup1))\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_tup_string",
            "candidate = method(:tup_string)",
            "assert_equal(\"exercises\", candidate.call([\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"]))",
            "assert_equal(\"python\", candidate.call([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]))",
            "assert_equal(\"program\", candidate.call([\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "133",
        "title": "sum_negativenum",
        "text": "Write a function to calculate the sum of the negative numbers of a given array of numbers.",
        "code": "def sum_negativenum(nums)\n    return sum(nums) - sum(nums)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sum_negativenum",
            "candidate = method(:sum_negativenum)",
            "assert_equal(-32, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))",
            "assert_equal(-52, candidate.call([10, 15, -14, 13, -18, 12, -20]))",
            "assert_equal(-894, candidate.call([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "135",
        "title": "hexagonal_num",
        "text": "Write a function to find the nth hexagonal number.",
        "code": "def hexagonal_num(n)\n    # Return the nth hexagonal number.\n    return hexagonal_num(n // 2) + hexagonal_num(n % 2)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_hexagonal_num",
            "candidate = method(:hexagonal_num)",
            "assert_equal(190, candidate.call(10))",
            "assert_equal(45, candidate.call(5))",
            "assert_equal(91, candidate.call(7))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "138",
        "title": "is_Sum_Of_Powers_Of_Two",
        "text": "Write a rbthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code": "def is_Sum_Of_Powers_Of_Two(n)\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    return True\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_is_Sum_Of_Powers_Of_Two",
            "candidate = method(:is_Sum_Of_Powers_Of_Two)",
            "assert_equal(true, candidate.call(10))",
            "assert_equal(false, candidate.call(7))",
            "assert_equal(true, candidate.call(14))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "141",
        "title": "pancake_sort",
        "text": "Write a function to sort an array of elements.",
        "code": "def pancake_sort(nums)\n    # Sort the array of elements.\n    for i in range(len(nums)):\n        # If the element is less than the first element, swap it with the\n        # second element.\n        if nums[i] < nums[i - 1]:\n            nums[i], nums[i - 1] = nums[i - 1], nums[i]\n    return nums\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_pancake_sort",
            "candidate = method(:pancake_sort)",
            "assert_equal([15, 25, 38, 69, 79], candidate.call([15, 79, 25, 38, 69]))",
            "assert_equal([12, 36, 54, 85, 98], candidate.call([98, 12, 54, 36, 85]))",
            "assert_equal([12, 23, 32, 41, 42], candidate.call([41, 42, 32, 12, 23]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "142",
        "title": "count_samepair",
        "text": "Write a function to count number items that are identical in the same position of three given arrays.",
        "code": "def count_samepair(list1, list2, list3)\n    # Write a function to count number items that are identical in the same position of three given arrays.\n    # Write a function to count number items that are identical in the same position of three given arrays.\n    # Write a function to count number items that are identical in the same position of three given arrays.\n    # Write a function to count number items that are identical in the same position of three given arrays.\n    # Write a function to count number items that are identical in the same position of three given arrays.\n    # Write a function to count number items that are identical in the same position of three given arrays.\n    # Write a function to count number items that are identical in the same position of three given arrays.\n    # Write a function to count number items that are identical in the same position of three given arrays.\n    # Write a function to count number items that are identical in the same position of three given arrays.\n    # Write a function to count number items that are identical in the same position of three given arrays.\n    # Write a function to count number items that are identical in the same position of three given arrays.\n    # Write a function to count number items that are identical in the same position of three given arrays.\n    # Write a function to count number items that are identical in the same position of three given arrays.\n    # Write a function to count number items that are identical in the same position of three given arrays.\n    # Write a function to count number items that are identical in the same position of three given arrays.\n    # Write a function to count number items that are identical in the same position of three given arrays.\n    # Write a function to count number items that are identical in the same position of three given arrays.\n    # Write a function to count number items that are identical in the same position of three given arrays.\n    # Write a function to count number items that are identical in the same position of three given arrays.\n    # Write a function to count number items that are identical in the same position of three given arrays.\n    # Write a function to count number items that are identical in the same position of three given arrays.\n    # Write a function to count number items that are identical in\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count_samepair",
            "candidate = method(:count_samepair)",
            "assert_equal(3, candidate.call([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]))",
            "assert_equal(4, candidate.call([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]))",
            "assert_equal(5, candidate.call([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "143",
        "title": "find_lists",
        "text": "Write a function to find number of arrays present in the given array.",
        "code": "def find_lists(input)\n    # Find the number of arrays present in the given array.\n    n = 0\n    for i in input:\n        if i == '1':\n            n += 1\n    return n\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_lists",
            "candidate = method(:find_lists)",
            "assert_equal(2, candidate.call([[1, 2, 3, 4], [5, 6, 7, 8]]))",
            "assert_equal(3, candidate.call([[1, 2], [3, 4], [5, 6]]))",
            "assert_equal(1, candidate.call([9, 8, 7, 6, 5, 4, 3, 2, 1]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "145",
        "title": "max_Abs_Diff",
        "text": "Write a rbthon function to find the maximum difference between any two elements in a given array.",
        "code": "def max_Abs_Diff(arr)\n    # Write a rbthon function to find the maximum difference between any two elements in a given array.\n    # arr is an array of integers.\n    # Return the maximum difference between any two elements in arr.\n    # arr is a list of integers.\n    # Return the maximum difference between any two elements in arr.\n    # arr is a list of lists.\n    # Return the maximum difference between any two elements in arr.\n    # arr is a list of lists.\n    # Return the maximum difference between any two elements in arr.\n    # arr is a list of lists.\n    # Return the maximum difference between any two elements in arr.\n    # arr is a list of lists.\n    # Return the maximum difference between any two elements in arr.\n    # arr is a list of lists.\n    # Return the maximum difference between any two elements in arr.\n    # arr is a list of lists.\n    # Return the maximum difference between any two elements in arr.\n    # arr is a list of lists.\n    # Return the maximum difference between any two elements in arr.\n    # arr is a list of lists.\n    # Return the maximum difference between any two elements in arr.\n    # arr is a list of lists.\n    # Return the maximum difference between any two elements in arr.\n    # arr is a list of lists.\n    # Return the maximum difference between any two elements in arr.\n    # arr is a list of lists.\n    # Return the maximum difference between any two elements in arr.\n    # arr is a list of lists.\n    # Return the maximum difference between any two elements in arr.\n    # arr is a list of lists.\n    # Return the maximum difference between any two elements in arr.\n    # arr is a list of lists.\n    # Return the maximum difference between any two elements in arr.\n    # arr is a list of lists.\n    # Return the maximum difference between any two elements in arr.\n    # arr is a list of lists.\n    # Return the maximum difference between any two elements in arr.\n    # arr is a list of lists.\n    # Return the maximum difference between any two elements in arr.\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_max_Abs_Diff",
            "candidate = method(:max_Abs_Diff)",
            "assert_equal(4, candidate.call([2, 1, 5, 3]))",
            "assert_equal(8, candidate.call([9, 3, 2, 5, 1]))",
            "assert_equal(2, candidate.call([3, 2, 1]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "14",
        "title": "find_Volume",
        "text": "Write a rbthon function to find the volume of a triangular prism.",
        "code": "def find_Volume(l, b, h)\n    # Find the volume of a triangular prism.\n    # l is the length of the prism.\n    # b is the height of the prism.\n    # h is the height of the prism.\n    # Return the volume of the prism.\n    return (l**2 + b**2 + h**2)**0.5\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_Volume",
            "candidate = method(:find_Volume)",
            "assert_equal(240, candidate.call(10, 8, 6))",
            "assert_equal(6, candidate.call(3, 2, 2))",
            "assert_equal(1, candidate.call(1, 2, 1))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "160",
        "title": "find_solution",
        "text": "Write a function that returns integers x and y that satisfy ax + by = n as an array, or return nil if no solution exists.",
        "code": "def find_solution(a, b, n)\n\tif a == b:\n\t\treturn [a]\n\tif a == 0:\n\t\treturn [b]\n\tif b == 0:\n\t\treturn [a]\n\tif a > b:\n\t\treturn find_solution(a, b, n)\n\telse:\n\t\treturn find_solution(b, a, n)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_solution",
            "candidate = method(:find_solution)",
            "assert_equal([2, 1], candidate.call(2, 3, 7))",
            "assert_equal(nil, candidate.call(4, 2, 7))",
            "assert_equal([4, 1], candidate.call(1, 13, 17))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "161",
        "title": "remove_elements",
        "text": "Write a function to remove all elements from a given array present in another array.",
        "code": "def remove_elements(list1, list2)\n    # Remove all elements from list1 and list2.\n    for i in range(len(list1)):\n        list1[i] = list1[i] + list2[i]\n    return list1\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_remove_elements",
            "candidate = method(:remove_elements)",
            "assert_equal([1, 3, 5, 7, 9, 10], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]))",
            "assert_equal([2, 4, 6, 8, 9, 10], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]))",
            "assert_equal([1, 2, 3, 4, 6, 8, 9, 10], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "162",
        "title": "sum_series",
        "text": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "code": "def sum_series(n)\n    return sum(x for x in range(n))\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sum_series",
            "candidate = method(:sum_series)",
            "assert_equal(12, candidate.call(6))",
            "assert_equal(30, candidate.call(10))",
            "assert_equal(25, candidate.call(9))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "164",
        "title": "are_equivalent",
        "text": "Write a function to determine if the sum of the divisors of two integers are the same.",
        "code": "def are_equivalent(num1, num2)\n    if num1 == num2:\n        return True\n    else:\n        return False\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_are_equivalent",
            "candidate = method(:are_equivalent)",
            "assert_equal(false, candidate.call(36, 57))",
            "assert_equal(false, candidate.call(2, 4))",
            "assert_equal(true, candidate.call(23, 47))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "165",
        "title": "count_char_position",
        "text": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "code": "def count_char_position(str1)\n    return len(str1) - len(str1.lower())\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count_char_position",
            "candidate = method(:count_char_position)",
            "assert_equal(2, candidate.call(\"xbcefg\"))",
            "assert_equal(3, candidate.call(\"ABcED\"))",
            "assert_equal(5, candidate.call(\"AbgdeF\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "166",
        "title": "find_even_pair",
        "text": "Write a function that counts the number of pairs of integers in an array that xor to an even number.",
        "code": "def find_even_pair(a)\n    # Write a function that returns the number of pairs of integers in an array that xor to an even number.\n    # Write a function that returns the number of pairs of integers in an array that xor to an odd number.\n    # Write a function that returns the number of pairs of integers in an array that xor to an even number.\n    # Write a function that returns the number of pairs of integers in an array that xor to an odd number.\n    # Write a function that returns the number of pairs of integers in an array that xor to an even number.\n    # Write a function that returns the number of pairs of integers in an array that xor to an odd number.\n    # Write a function that returns the number of pairs of integers in an array that xor to an even number.\n    # Write a function that returns the number of pairs of integers in an array that xor to an odd number.\n    # Write a function that returns the number of pairs of integers in an array that xor to an even number.\n    # Write a function that returns the number of pairs of integers in an array that xor to an odd number.\n    # Write a function that returns the number of pairs of integers in an array that xor to an even number.\n    # Write a function that returns the number of pairs of integers in an array that xor to an odd number.\n    # Write a function that returns the number of pairs of integers in an array that xor to an even number.\n    # Write a function that returns the number of pairs of integers in an array that xor to an odd number.\n    # Write a function that returns the number of pairs of integers in an array that xor to an even number.\n    # Write a function that returns the number of pairs of integers in an array that xor to an odd number.\n    # Write a function that returns the number of pairs of integers in an array that xor to an even number.\n    # Write a function that returns the number of pairs of integers in an array that xor to an odd number.\n    # Write a function that returns the number of pairs of integers in an array that xor to an even number.\n    # Write\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_even_pair",
            "candidate = method(:find_even_pair)",
            "assert_equal(4, candidate.call([5, 4, 7, 2, 1]))",
            "assert_equal(9, candidate.call([7, 2, 8, 1, 0, 5, 11]))",
            "assert_equal(1, candidate.call([1, 2, 3]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "167",
        "title": "next_power_of_2",
        "text": "Write a rbthon function to find the smallest power of 2 greater than or equal to n.",
        "code": "def next_power_of_2(n)\n    \"\"\"\n    return next_power_of_2(n, 0)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_next_power_of_2",
            "candidate = method(:next_power_of_2)",
            "assert_equal(1, candidate.call(0))",
            "assert_equal(8, candidate.call(5))",
            "assert_equal(32, candidate.call(17))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "168",
        "title": "frequency",
        "text": "Write a function to count the number of occurrences of a number in a given array.",
        "code": "def frequency(a, x)\n    return len(set(a))\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_frequency",
            "candidate = method(:frequency)",
            "assert_equal(0, candidate.call([1, 2, 3], 4))",
            "assert_equal(3, candidate.call([1, 2, 2, 3, 3, 3, 4], 3))",
            "assert_equal(2, candidate.call([0, 1, 2, 3, 1, 2], 1))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "16",
        "title": "text_lowercase_underscore",
        "text": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "code": "def text_lowercase_underscore(text)\n    # Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\ndef text_lowercase_underscore_with_underscore(text)\n    # Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\ndef text_lowercase_underscore_with_underscore_with_underscore(text)\n    # Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\ndef text_lowercase_underscore_with_underscore_with_underscore(text)\n    # Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\ndef text_lowercase_underscore_with_underscore_with_underscore(text)\n    # Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\ndef text_lowercase_underscore_with_underscore_with_underscore(text)\n    # Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\ndef text_lowercase_underscore_with_underscore_with_underscore(text)\n    # Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\ndef text_lowercase_underscore_with_underscore_with_underscore(text)\n    # Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\ndef text_lowercase_underscore_with_underscore_with_underscore(text)\n    # Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\ndef text_lowercase_underscore_with_underscore_with_underscore(text)\n    # Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_text_lowercase_underscore",
            "candidate = method(:text_lowercase_underscore)",
            "assert_equal(true, candidate.call(\"aab_cbbbc\"))",
            "assert_equal(false, candidate.call(\"aab_Abbbc\"))",
            "assert_equal(false, candidate.call(\"Aaab_abbbc\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "170",
        "title": "sum_range_list",
        "text": "Write a function to find the sum of numbers in an array within a range specified by two indices.",
        "code": "def sum_range_list(list1, m, n)\n    sum = 0\n    for i in range(m):\n        sum += list1[i]\n    for j in range(n):\n        sum += list1[j]\n    return sum\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sum_range_list",
            "candidate = method(:sum_range_list)",
            "assert_equal(29, candidate.call([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10))",
            "assert_equal(16, candidate.call([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7))",
            "assert_equal(38, candidate.call([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "171",
        "title": "perimeter_pentagon",
        "text": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "code": "def perimeter_pentagon(a)\n    return a.length() - a.width() - a.height()\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_perimeter_pentagon",
            "candidate = method(:perimeter_pentagon)",
            "assert_equal(25, candidate.call(5))",
            "assert_equal(50, candidate.call(10))",
            "assert_equal(75, candidate.call(15))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "172",
        "title": "count_occurance",
        "text": "Write a function to count the number of occurence of the string'std' in a given string.",
        "code": "def count_occurance(s)\n    return len(s) - len(s.lower())\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count_occurance",
            "candidate = method(:count_occurance)",
            "assert_equal(3, candidate.call(\"letstdlenstdporstd\"))",
            "assert_equal(1, candidate.call(\"truststdsolensporsd\"))",
            "assert_equal(2, candidate.call(\"makestdsostdworthit\"))",
            "assert_equal(1, candidate.call(\"stds\"))",
            "assert_equal(0, candidate.call(\"\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "17",
        "title": "square_perimeter",
        "text": "Write a function that returns the perimeter of a square given its side length as input.",
        "code": "def square_perimeter(a)\n    return a**2\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_square_perimeter",
            "candidate = method(:square_perimeter)",
            "assert_equal(40, candidate.call(10))",
            "assert_equal(20, candidate.call(5))",
            "assert_equal(16, candidate.call(4))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "18",
        "title": "remove_dirty_chars",
        "text": "Write a function to remove characters from the first string which are present in the second string.",
        "code": "def remove_dirty_chars(string, second_string)\n    \n    # Write a function to remove characters from the first string which are present in the second string.\ndef remove_dirty_chars_from_string(string, second_string)\n    \n    # Write a function to remove characters from the first string which are present in the second string.\ndef remove_dirty_chars_from_string_2(string, second_string)\n    \n    # Write a function to remove characters from the first string which are present in the second string.\ndef remove_dirty_chars_from_string_3(string, second_string)\n    \n    # Write a function to remove characters from the first string which are present in the second string.\ndef remove_dirty_chars_from_string_4(string, second_string)\n    \n    # Write a function to remove characters from the first string which are present in the second string.\ndef remove_dirty_chars_from_string_5(string, second_string)\n    \n    # Write a function to remove characters from the first string which are present in the second string.\ndef remove_dirty_chars_from_string_6(string, second_string)\n    \n    # Write a function to remove characters from the first string which are present in the second string.\ndef remove_dirty_chars_from_string_7(string, second_string)\n    \n    # Write a function to remove characters from the first string which are present in the second string.\ndef remove_dirty_chars_from_string_8(string, second_string)\n    \n    # Write a function to remove characters from the first string which are present in the second string.\ndef remove_dirty_chars_from_string_9(string, second_string)\n    \n    # Write a function to remove characters from the first string which are present in the second string.\ndef remove_dirty_chars_from_string_10(string, second_string)\n    \n    # Write a function to remove characters from the first string which are present in the second string.\ndef remove_dirty_chars_from_string_11(string,\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_remove_dirty_chars",
            "candidate = method(:remove_dirty_chars)",
            "assert_equal(\"bacuve\", candidate.call(\"probasscurve\", \"pros\"))",
            "assert_equal(\"digiidi\", candidate.call(\"digitalindia\", \"talent\"))",
            "assert_equal(\"emles\", candidate.call(\"exoticmiles\", \"toxic\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "19",
        "title": "test_duplicate",
        "text": "Write a function to find whether a given array of integers contains any duplicate element.",
        "code": "def test_duplicate(arraynums)\n    # Write a function to find whether a given array of integers contains any duplicate element.\n    # The function should return True if the array contains any duplicate element, False otherwise.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains any duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains any duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no duplicate element.\n    # The function should return False if the array contains no\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_test_duplicate",
            "candidate = method(:test_duplicate)",
            "assert_equal(false, candidate.call([1, 2, 3, 4, 5]))",
            "assert_equal(true, candidate.call([1, 2, 3, 4, 4]))",
            "assert_equal(true, candidate.call([1, 1, 2, 2, 3, 3, 4, 4, 5]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "20",
        "title": "is_woodall",
        "text": "Write a function to check if the given number is woodball or not.",
        "code": "def is_woodall(x)\n    return x == woodball\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_is_woodall",
            "candidate = method(:is_woodall)",
            "assert_equal(true, candidate.call(383))",
            "assert_equal(false, candidate.call(254))",
            "assert_equal(false, candidate.call(200))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "222",
        "title": "check_type",
        "text": "Write a function to check if all the elements in array have same data type or not.",
        "code": "def check_type(test_tuple)\n    # Check if all the elements in array have same data type or not.\n    for i in range(len(test_tuple)):\n        if test_tuple[i]!= test_tuple[i]:\n            print(\"Error: The elements in array do not have the same data type.\")\n            return False\n    return True\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_check_type",
            "candidate = method(:check_type)",
            "assert_equal(true, candidate.call([5, 6, 7, 3, 5, 6]))",
            "assert_equal(false, candidate.call([1, 2, \"4\"]))",
            "assert_equal(true, candidate.call([3, 2, 1, 4, 5]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "223",
        "title": "is_majority",
        "text": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "code": "def is_majority(arr, n, x)\n\t# Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t# Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t# Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t# Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t# Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t# Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t# Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t# Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t# Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_is_majority",
            "candidate = method(:is_majority)",
            "assert_equal(true, candidate.call([1, 2, 3, 3, 3, 3, 10], 7, 3))",
            "assert_equal(false, candidate.call([1, 1, 2, 4, 4, 4, 6, 6], 8, 4))",
            "assert_equal(true, candidate.call([1, 1, 1, 2, 2], 5, 1))",
            "assert_equal(false, candidate.call([1, 1, 2, 2], 5, 1))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "224",
        "title": "count_Set_Bits",
        "text": "Write a rbthon function to count the number of set bits (binary digits with value 1) in a given number.",
        "code": "def count_Set_Bits(n)\n    # Write a rbthon function to count the number of set bits (binary digits with value 1) in a given number.\n    return n\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count_Set_Bits",
            "candidate = method(:count_Set_Bits)",
            "assert_equal(1, candidate.call(2))",
            "assert_equal(1, candidate.call(4))",
            "assert_equal(2, candidate.call(6))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "226",
        "title": "odd_values_string",
        "text": "Write a rbthon function to remove the characters which have odd index values of a given string.",
        "code": "def odd_values_string(str)\n    return str[int(str.index(str[0]))+1:int(str.index(str[0]))]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_odd_values_string",
            "candidate = method(:odd_values_string)",
            "assert_equal(\"ace\", candidate.call(\"abcdef\"))",
            "assert_equal(\"pto\", candidate.call(\"python\"))",
            "assert_equal(\"dt\", candidate.call(\"data\"))",
            "assert_equal(\"lms\", candidate.call(\"lambs\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "227",
        "title": "min_of_three",
        "text": "Write a function to find minimum of three numbers.",
        "code": "def min_of_three(a, b, c)\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function to find minimum of three numbers.\n    # Write a function\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_min_of_three",
            "candidate = method(:min_of_three)",
            "assert_equal(0, candidate.call(10, 20, 0))",
            "assert_equal(15, candidate.call(19, 15, 18))",
            "assert_equal(-30, candidate.call(-10, -20, -30))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "228",
        "title": "all_Bits_Set_In_The_Given_Range",
        "text": "Write a rbthon function to check whether all the bits are unset in the given range or not.",
        "code": "def all_Bits_Set_In_The_Given_Range(n, l, r)\n    # Check if all the bits in the given range are unset.\n    return (n & (1 << l)) == 0\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_all_Bits_Set_In_The_Given_Range",
            "candidate = method(:all_Bits_Set_In_The_Given_Range)",
            "assert_equal(true, candidate.call(4, 1, 2))",
            "assert_equal(true, candidate.call(17, 2, 4))",
            "assert_equal(false, candidate.call(39, 4, 6))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "229",
        "title": "re_arrange_array",
        "text": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
        "code": "def re_arrange_array(arr, n)\n    # Re-arrange the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    # The function returns the new array.\n    new_arr = []\n    for i in range(n):\n        new_arr.append(arr[i])\n    return new_arr\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_re_arrange_array",
            "candidate = method(:re_arrange_array)",
            "assert_equal([-1, -3, -7, 4, 5, 6, 2, 8, 9], candidate.call([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9))",
            "assert_equal([-14, -26, 12, 13, 15], candidate.call([12, -14, -26, 13, 15], 5))",
            "assert_equal([-42, -39, -78, 10, 24, 36, 85], candidate.call([10, 24, 36, -42, -39, -78, 85], 7))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "230",
        "title": "replace_blank",
        "text": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "code": "def replace_blank(str1, char)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_replace_blank",
            "candidate = method(:replace_blank)",
            "assert_equal(\"hello@people\", candidate.call(\"hello people\", \"@\"))",
            "assert_equal(\"python$program$language\", candidate.call(\"python program language\", \"$\"))",
            "assert_equal(\"blank-space\", candidate.call(\"blank space\", \"-\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "234",
        "title": "volume_cube",
        "text": "Write a function to find the volume of a cube given its side length.",
        "code": "def volume_cube(l)\n    \"\"\"\n    return l**3/6\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_volume_cube",
            "candidate = method(:volume_cube)",
            "assert_equal(27, candidate.call(3))",
            "assert_equal(8, candidate.call(2))",
            "assert_equal(125, candidate.call(5))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "237",
        "title": "check_occurences",
        "text": "Write a function that takes in an array of arrays and returns a hash mapping each unique array to the number of times it occurs in the array.",
        "code": "def check_occurences(test_list)\n    # Create a function that takes in an array of arrays and returns a hash mapping each unique array to the number of times it occurs in the array.\n    def check_occurences_function(test_list)\n        # Create a function that takes in an array of arrays and returns a hash mapping each unique array to the number of times it occurs in the array.\n        # The function is called with the test_list as the first argument.\n        # The function is called with the test_list as the second argument.\n        # The function is called with the test_list as the third argument.\n        # The function is called with the test_list as the fourth argument.\n        # The function is called with the test_list as the fifth argument.\n        # The function is called with the test_list as the sixth argument.\n        # The function is called with the test_list as the seventh argument.\n        # The function is called with the test_list as the eighth argument.\n        # The function is called with the test_list as the ninth argument.\n        # The function is called with the test_list as the tenth argument.\n        # The function is called with the test_list as the eleventh argument.\n        # The function is called with the test_list as the twelfth argument.\n        # The function is called with the test_list as the thirteenth argument.\n        # The function is called with the test_list as the fourteenth argument.\n        # The function is called with the test_list as the fiveteenth argument.\n        # The function is called with the test_list as the sixteenth argument.\n        # The function is called with the test_list as the seventeenth argument.\n        # The function is called with the test_list as the eighteenth argument.\n        # The function is called with the test_list as the nineteenth argument.\n        # The function is called with the test_list as the twentieth argument.\n        # The function is called with the test_list as the twond argument.\n        # The function is called with the test_list as the one argument.\n        # The function is called with\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_check_occurences",
            "candidate = method(:check_occurences)",
            "assert_equal({[1, 3] => 2, [2, 5] => 2, [3, 6] => 1}, candidate.call([[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]]))",
            "assert_equal({[2, 4] => 2, [3, 6] => 2, [4, 7] => 1}, candidate.call([[4, 2], [2, 4], [3, 6], [6, 3], [7, 4]]))",
            "assert_equal({[2, 13] => 1, [11, 23] => 1, [12, 25] => 2, [16, 23] => 1}, candidate.call([[13, 2], [11, 23], [12, 25], [25, 12], [16, 23]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "238",
        "title": "number_of_substrings",
        "text": "Write a rbthon function to count the number of non-empty substrings of a given string.",
        "code": "def number_of_substrings(str)\n    \"\"\"\n    return len(str.split())\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_number_of_substrings",
            "candidate = method(:number_of_substrings)",
            "assert_equal(6, candidate.call(\"abc\"))",
            "assert_equal(10, candidate.call(\"abcd\"))",
            "assert_equal(15, candidate.call(\"abcde\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "239",
        "title": "get_total_number_of_sequences",
        "text": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "code": "def get_total_number_of_sequences(m, n)\n    # Write a function that takes in positive integers m and n and returns the number of possible sequences of length n.\n    # Write a function that takes in positive integers m and n and returns the number of possible sequences of length m.\n    # Write a function that takes in positive integers m and n and returns the number of possible sequences of length m.\n    # Write a function that takes in positive integers m and n and returns the number of possible sequences of length m.\n    # Write a function that takes in positive integers m and n and returns the number of possible sequences of length m.\n    # Write a function that takes in positive integers m and n and returns the number of possible sequences of length m.\n    # Write a function that takes in positive integers m and n and returns the number of possible sequences of length m.\n    # Write a function that takes in positive integers m and n and returns the number of possible sequences of length m.\n    # Write a function that takes in positive integers m and n and returns the number of possible sequences of length m.\n    # Write a function that takes in positive integers m and n and returns the number of possible sequences of length m.\n    # Write a function that takes in positive integers m and n and returns the number of possible sequences of length m.\n    # Write a function that takes in positive integers m and n and returns the number of possible sequences of length m.\n    # Write a function that takes in positive integers m and n and returns the number of possible sequences of length m.\n    # Write a function that takes in positive integers m and n and returns the number of possible sequences of length m.\n    # Write a function that takes in positive integers m and n and returns the number of possible sequences of length m.\n    # Write a function that takes in positive integers m and n and returns the number of possible sequences of length m.\n    # Write a function that takes in positive integers m and n and returns the number of possible sequences of length m.\n    # Write a function that takes in positive integers m and n and returns the number of possible\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_get_total_number_of_sequences",
            "candidate = method(:get_total_number_of_sequences)",
            "assert_equal(4, candidate.call(10, 4))",
            "assert_equal(6, candidate.call(5, 2))",
            "assert_equal(84, candidate.call(16, 3))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "240",
        "title": "replace_list",
        "text": "Write a function that takes in two arrays and replaces the last element of the first array with the elements of the second array.",
        "code": "def replace_list(list1, list2)\n    # list1 is a list of elements\n    # list2 is a list of elements\n    # return a list of elements\n    return list(list1) + list2\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_replace_list",
            "candidate = method(:replace_list)",
            "assert_equal([1, 3, 5, 7, 9, 2, 4, 6, 8], candidate.call([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]))",
            "assert_equal([1, 2, 3, 4, 5, 6, 7, 8], candidate.call([1, 2, 3, 4, 5], [5, 6, 7, 8]))",
            "assert_equal([\"red\", \"blue\", \"yellow\"], candidate.call([\"red\", \"blue\", \"green\"], [\"yellow\"]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "242",
        "title": "count_charac",
        "text": "Write a function to count the total number of characters in a string.",
        "code": "def count_charac(str1)\n    # Count the number of characters in a string.\n    return len(str1)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count_charac",
            "candidate = method(:count_charac)",
            "assert_equal(18, candidate.call(\"python programming\"))",
            "assert_equal(8, candidate.call(\"language\"))",
            "assert_equal(5, candidate.call(\"words\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "244",
        "title": "next_Perfect_Square",
        "text": "Write a rbthon function to find the next perfect square greater than a given number.",
        "code": "def next_Perfect_Square(n)\n    \"\"\"\n    return n**2 - n\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_next_Perfect_Square",
            "candidate = method(:next_Perfect_Square)",
            "assert_equal(36, candidate.call(35))",
            "assert_equal(9, candidate.call(6))",
            "assert_equal(16, candidate.call(9))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "245",
        "title": "max_sum",
        "text": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
        "code": "def max_sum(arr)\n\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef max_sum_bitonic(arr)\n\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef max_sum_bitonic_bitonic(arr)\n\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef max_sum_bitonic_bitonic_bitonic(arr)\n\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef max_sum_bitonic_bitonic_bitonic_bitonic(arr)\n\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef max_sum_bitonic_bitonic_bitonic_bitonic_bitonic(arr)\n\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef max_sum_bitonic_bitonic_bitonic_bitonic_bitonic_bitonic(arr)\n\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef max_sum_bitonic_bitonic_bitonic_bitonic_bitonic_bitonic_bitonic(arr)\n\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_max_sum",
            "candidate = method(:max_sum)",
            "assert_equal(194, candidate.call([1, 15, 51, 45, 33, 100, 12, 18, 9]))",
            "assert_equal(210, candidate.call([80, 60, 30, 40, 20, 10]))",
            "assert_equal(138, candidate.call([2, 3, 14, 16, 21, 23, 29, 30]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "247",
        "title": "lps",
        "text": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "code": "def lps(str)\n    # Write a function to find the length of the longest palindromic subsequence in the given string.\n    # The longest palindromic subsequence is the longest palindromic subsequence of the given string.\n    # The longest palindromic subsequence is the longest palindromic subsequence of the given string.\n    # The longest palindromic subsequence is the longest palindromic subsequence of the given string.\n    # The longest palindromic subsequence is the longest palindromic subsequence of the given string.\n    # The longest palindromic subsequence is the longest palindromic subsequence of the given string.\n    # The longest palindromic subsequence is the longest palindromic subsequence of the given string.\n    # The longest palindromic subsequence is the longest palindromic subsequence of the given string.\n    # The longest palindromic subsequence is the longest palindromic subsequence of the given string.\n    # The longest palindromic subsequence is the longest palindromic subsequence of the given string.\n    # The longest palindromic subsequence is the longest palindromic subsequence of the given string.\n    # The longest palindromic subsequence is the longest palindromic subsequence of the given string.\n    # The longest palindromic subsequence is the longest palindromic subsequence of the given string.\n    # The longest palindromic subsequence is the longest palindromic subsequence of the given string.\n    # The longest palindromic subsequence is the longest palindromic subsequence of the given string.\n    # The longest palindromic subsequence is the longest palindromic subsequence of the given string.\n    # The longest palindromic subsequence is the longest palindromic subsequence of the given string.\n    # The longest palindromic subsequence is the longest palindromic subsequence of the given string.\n    # The longest palindromic subsequence is the longest palindromic subsequence of the given string.\n    # The longest palindromic\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_lps",
            "candidate = method(:lps)",
            "assert_equal(5, candidate.call(\"TENS FOR TENS\"))",
            "assert_equal(7, candidate.call(\"CARDIO FOR CARDS\"))",
            "assert_equal(9, candidate.call(\"PART OF THE JOURNEY IS PART\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "249",
        "title": "intersection_array",
        "text": "Write a function to find the intersection of two arrays.",
        "code": "def intersection_array(array_nums1, array_nums2)\n    # Return the intersection of two arrays.\n    return array_nums1[array_nums2.index(min(array_nums1))]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_intersection_array",
            "candidate = method(:intersection_array)",
            "assert_equal([1, 2, 8, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]))",
            "assert_equal([3, 5, 7, 9], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]))",
            "assert_equal([10], candidate.call([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "250",
        "title": "count_X",
        "text": "Write a rbthon function that takes in an array and an element and counts the occcurences of the element in the array.",
        "code": "def count_X(tup, x)\n    return len(tup[x])\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count_X",
            "candidate = method(:count_X)",
            "assert_equal(0, candidate.call([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4))",
            "assert_equal(3, candidate.call([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10))",
            "assert_equal(4, candidate.call([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "251",
        "title": "insert_element",
        "text": "Write a function that takes in an array and an element and inserts the element before each element in the array, and returns the resulting array.",
        "code": "def insert_element(list, element)\n\n# Write a function that takes in an array and an element and inserts the element before each element in the array, and returns the resulting array.\ndef insert_element_before_element(list, element)\n\n# Write a function that takes in an array and an element and inserts the element before each element in the array, and returns the resulting array.\ndef insert_element_before_element_before_element(list, element)\n\n# Write a function that takes in an array and an element and inserts the element before each element in the array, and returns the resulting array.\ndef insert_element_before_element_before_element_before_element(list, element)\n\n# Write a function that takes in an array and an element and inserts the element before each element in the array, and returns the resulting array.\ndef insert_element_before_element_before_element_before_element_before_element(list, element)\n\n# Write a function that takes in an array and an element and inserts the element before each element in the array, and returns the resulting array.\ndef insert_element_before_element_before_element_before_element_before_element_before_element(list, element)\n\n# Write a function that takes in an array and an element and inserts the element before each element in the array, and returns the resulting array.\ndef insert_element_before_element_before_element_before_element_before_element_before_element_before_element(list, element)\n\n# Write a function that takes in an array and an element and inserts the element before each element in the array, and returns the resulting array.\ndef insert_element_before_element_before_element_before_element_before_element_before_element_before_element_before_element(list, element)\n\n# Write a function that takes in an array and an element and inserts the element before each element in the array, and returns the resulting array.\ndef insert_element_before_element_before_element_before_element_before_element_before_element_before_element_before_element_before_element_before_element_before\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_insert_element",
            "candidate = method(:insert_element)",
            "assert_equal([\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"], candidate.call([\"Red\", \"Green\", \"Black\"], \"c\"))",
            "assert_equal([\"program\", \"python\", \"program\", \"java\"], candidate.call([\"python\", \"java\"], \"program\"))",
            "assert_equal([\"laugh\", \"happy\", \"laugh\", \"sad\"], candidate.call([\"happy\", \"sad\"], \"laugh\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "252",
        "title": "convert",
        "text": "Write a rbthon function to convert complex numbers to polar coordinates.",
        "code": "def convert(numbers)\n    \"\"\"\n    return numbers.real, numbers.imag\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_convert",
            "candidate = method(:convert)",
            "assert_equal([1.0, 0.0], candidate.call(1))",
            "assert_equal([4.0, 0.0], candidate.call(4))",
            "assert_equal([5.0, 0.0], candidate.call(5))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "253",
        "title": "count_integer",
        "text": "Write a rbthon function that returns the number of integer elements in a given array.",
        "code": "def count_integer(list1)\n    return len(list1)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count_integer",
            "candidate = method(:count_integer)",
            "assert_equal(2, candidate.call([1, 2, \"abc\", 1.2]))",
            "assert_equal(3, candidate.call([1, 2, 3]))",
            "assert_equal(2, candidate.call([1, 1.2, 4, 5.1]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "255",
        "title": "combinations_colors",
        "text": "Write a function that takes in an array and length n, and generates all combinations (with repetition) of the elements of the array and returns an array with an array for each combination.",
        "code": "def combinations_colors(l, n)\n    # Write a function that takes in an array and length n, and generates all combinations (with repetition) of the elements of the array and returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    # The function returns an array with an array for each combination.\n    #\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_combinations_colors",
            "candidate = method(:combinations_colors)",
            "assert_equal([[\"Red\"], [\"Green\"], [\"Blue\"]], candidate.call([\"Red\", \"Green\", \"Blue\"], 1))",
            "assert_equal([[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]], candidate.call([\"Red\", \"Green\", \"Blue\"], 2))",
            "assert_equal([[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]], candidate.call([\"Red\", \"Green\", \"Blue\"], 3))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "256",
        "title": "count_Primes_nums",
        "text": "Write a rbthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "code": "def count_Primes_nums(n)\n    if n < 2:\n        return 0\n    else:\n        return count_Primes_nums(n-1) + count_Primes_nums(n-2)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count_Primes_nums",
            "candidate = method(:count_Primes_nums)",
            "assert_equal(2, candidate.call(5))",
            "assert_equal(4, candidate.call(10))",
            "assert_equal(25, candidate.call(100))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "257",
        "title": "swap_numbers",
        "text": "Write a function that takes in two numbers and returns an array with the second number and then the first number.",
        "code": "def swap_numbers(a, b)\n    # Write a function that takes in two numbers and returns an array with the second number and then the first number.\n    # Write a function that takes in two numbers and returns an array with the second number and then the first number.\n    # Write a function that takes in two numbers and returns an array with the second number and then the first number.\n    # Write a function that takes in two numbers and returns an array with the second number and then the first number.\n    # Write a function that takes in two numbers and returns an array with the second number and then the first number.\n    # Write a function that takes in two numbers and returns an array with the second number and then the first number.\n    # Write a function that takes in two numbers and returns an array with the second number and then the first number.\n    # Write a function that takes in two numbers and returns an array with the second number and then the first number.\n    # Write a function that takes in two numbers and returns an array with the second number and then the first number.\n    # Write a function that takes in two numbers and returns an array with the second number and then the first number.\n    # Write a function that takes in two numbers and returns an array with the second number and then the first number.\n    # Write a function that takes in two numbers and returns an array with the second number and then the first number.\n    # Write a function that takes in two numbers and returns an array with the second number and then the first number.\n    # Write a function that takes in two numbers and returns an array with the second number and then the first number.\n    # Write a function that takes in two numbers and returns an array with the second number and then the first number.\n    # Write a function that takes in two numbers and returns an array with the second number and then the first number.\n    # Write a function that takes in two numbers and returns an array with the second number and then the first number.\n    # Write a function that takes in two numbers and returns an array with the second number and then the first number.\n    # Write a function that takes in two numbers and returns an array with the second number and then the first number.\n    #\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_swap_numbers",
            "candidate = method(:swap_numbers)",
            "assert_equal([20, 10], candidate.call(10, 20))",
            "assert_equal([17, 15], candidate.call(15, 17))",
            "assert_equal([200, 100], candidate.call(100, 200))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "259",
        "title": "maximize_elements",
        "text": "Write a function to maximize the given two arrays.",
        "code": "def maximize_elements(test_tup1, test_tup2)\n    # Test that the two arrays are equal.\n    assert test_tup1 == test_tup2\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_maximize_elements",
            "candidate = method(:maximize_elements)",
            "assert_equal([[6, 7], [4, 9], [2, 9], [7, 10]], candidate.call([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]))",
            "assert_equal([[7, 8], [5, 10], [3, 10], [8, 11]], candidate.call([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]))",
            "assert_equal([[8, 9], [6, 11], [4, 11], [9, 12]], candidate.call([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "260",
        "title": "newman_prime",
        "text": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code": "def newman_prime(n)\n    # Return the nth newman\u2013shanks\u2013williams prime number.\n    return n**(n-1)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_newman_prime",
            "candidate = method(:newman_prime)",
            "assert_equal(7, candidate.call(3))",
            "assert_equal(17, candidate.call(4))",
            "assert_equal(41, candidate.call(5))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "261",
        "title": "division_elements",
        "text": "Write a function that takes in two arrays and performs mathematical division operation element-wise across the given arrays.",
        "code": "def division_elements(test_tup1, test_tup2)\n    # Write a function that takes in two arrays and performs mathematical division operation element-wise across the given arrays.\ndef division_elements(test_tup1, test_tup2)\n    # Write a function that takes in two arrays and performs mathematical division operation element-wise across the given arrays.\ndef division_elements(test_tup1, test_tup2)\n    # Write a function that takes in two arrays and performs mathematical division operation element-wise across the given arrays.\ndef division_elements(test_tup1, test_tup2)\n    # Write a function that takes in two arrays and performs mathematical division operation element-wise across the given arrays.\ndef division_elements(test_tup1, test_tup2)\n    # Write a function that takes in two arrays and performs mathematical division operation element-wise across the given arrays.\ndef division_elements(test_tup1, test_tup2)\n    # Write a function that takes in two arrays and performs mathematical division operation element-wise across the given arrays.\ndef division_elements(test_tup1, test_tup2)\n    # Write a function that takes in two arrays and performs mathematical division operation element-wise across the given arrays.\ndef division_elements(test_tup1, test_tup2)\n    # Write a function that takes in two arrays and performs mathematical division operation element-wise across the given arrays.\ndef division_elements(test_tup1, test_tup2)\n    # Write a function that takes in two arrays and performs mathematical division operation element-wise across the given arrays.\ndef division_elements(test_tup1, test_tup2)\n    # Write a function that takes in two arrays and performs mathematical division operation element-wise across the given arrays.\ndef division_elements(test_tup1, test_tup2)\n    # Write a function that takes in two arrays and performs mathematical division operation element-wise across the given arrays.\ndef division_elements(test_tup1, test_tup\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_division_elements",
            "candidate = method(:division_elements)",
            "assert_equal([2, 2, 2, 3], candidate.call([10, 4, 6, 9], [5, 2, 3, 3]))",
            "assert_equal([2, 2, 2, 4], candidate.call([12, 6, 8, 16], [6, 3, 4, 4]))",
            "assert_equal([4, 2, 6, 2], candidate.call([20, 14, 36, 18], [5, 7, 6, 9]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "262",
        "title": "split_two_parts",
        "text": "Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.",
        "code": "def split_two_parts(list1, l)\n    # Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\n    # Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\n    # Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\n    # Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\n    # Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\n    # Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\n    # Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\n    # Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\n    # Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\n    # Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\n    # Write a function\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_split_two_parts",
            "candidate = method(:split_two_parts)",
            "assert_equal([[1, 1, 2], [3, 4, 4, 5, 1]], candidate.call([1, 1, 2, 3, 4, 4, 5, 1], 3))",
            "assert_equal([[\"a\", \"b\"], [\"c\", \"d\"]], candidate.call([\"a\", \"b\", \"c\", \"d\"], 2))",
            "assert_equal([[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]], candidate.call([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "264",
        "title": "dog_age",
        "text": "Write a function to calculate a dog's age in dog's years.",
        "code": "def dog_age(h_age)\n\n# Write a function to calculate a dog's age in year.\ndef dog_age_year(h_age)\n\n# Write a function to calculate a dog's age in month.\ndef dog_age_month(h_age)\n\n# Write a function to calculate a dog's age in day.\ndef dog_age_day(h_age)\n\n# Write a function to calculate a dog's age in hour.\ndef dog_age_hour(h_age)\n\n# Write a function to calculate a dog's age in minute.\ndef dog_age_minute(h_age)\n\n# Write a function to calculate a dog's age in second.\ndef dog_age_second(h_age)\n\n# Write a function to calculate a dog's age in millisecond.\ndef dog_age_millisecond(h_age)\n\n# Write a function to calculate a dog's age in microsecond.\ndef dog_age_microsecond(h_age)\n\n# Write a function to calculate a dog's age in nanosecond.\ndef dog_age_nanosecond(h_age)\n\n# Write a function to calculate a dog's age in second.\ndef dog_age_second_nanosecond(h_age)\n\n# Write a function to calculate a dog's age in minute.\ndef dog_age_minute_nanosecond(h_age)\n\n# Write a function to calculate a dog's age in hour.\ndef dog_age_hour_nanosecond(h_age)\n\n# Write a function to calculate a dog's age in day.\ndef dog_age_day_nanosecond(h_age)\n\n# Write a function to calculate a dog's age in month.\ndef dog_age_month_nanosecond(h_age)\n\n# Write a function to calculate a dog's age in year.\ndef dog_age_year_nanosecond(h_age)\n\n# Write a function to calculate a dog's age in month.\ndef dog_age_month_nanosecond_year(h_age)\n\n# Write a function to calculate a dog's age in day.\n\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_dog_age",
            "candidate = method(:dog_age)",
            "assert_equal(61, candidate.call(12))",
            "assert_equal(73, candidate.call(15))",
            "assert_equal(109, candidate.call(24))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "265",
        "title": "list_split",
        "text": "Write a function that takes in an array and an integer n and splits an array for every nth element, returning an array of the resulting arrays.",
        "code": "def list_split(s, step)\n    \"\"\"\n    return [s[i:i+step] for i in range(len(s))]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_list_split",
            "candidate = method(:list_split)",
            "assert_equal([[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]], candidate.call([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], 3))",
            "assert_equal([[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3))",
            "assert_equal([[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]], candidate.call([\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"], 2))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "266",
        "title": "lateralsurface_cube",
        "text": "Write a function to find the lateral surface area of a cube given its side length.",
        "code": "def lateralsurface_cube(l)\n    \"\"\"\n    return l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l*l\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_lateralsurface_cube",
            "candidate = method(:lateralsurface_cube)",
            "assert_equal(100, candidate.call(5))",
            "assert_equal(324, candidate.call(9))",
            "assert_equal(400, candidate.call(10))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "267",
        "title": "square_Sum",
        "text": "Write a rbthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "code": "def square_Sum(n)\n\t# Write a rbthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\t# Write a rbthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\t# Write a rbthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\t# Write a rbthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\t# Write a rbthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\t# Write a rbthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\t# Write a rbthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\t# Write a rbthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\t# Write a rbthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\t# Write a rbthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\t# Write a rbthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\t# Write a rbthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\t# Write a rbthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\t# Write a rbthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\t# Write a rbthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\t# Write a rbthon function\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_square_Sum",
            "candidate = method(:square_Sum)",
            "assert_equal(10, candidate.call(2))",
            "assert_equal(35, candidate.call(3))",
            "assert_equal(84, candidate.call(4))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "268",
        "title": "find_star_num",
        "text": "Write a function to find then'th star number.",
        "code": "def find_star_num(n)\n    # Find then'th star number.\n    # Return the number of then'th star.\n    # Return None if then'th star is not found.\n    # Return 0 if then'th star is found.\n    # Return 1 if then'th star is not found.\n    # Return 2 if then'th star is found.\n    # Return 3 if then'th star is not found.\n    # Return 4 if then'th star is found.\n    # Return 5 if then'th star is not found.\n    # Return 6 if then'th star is found.\n    # Return 7 if then'th star is not found.\n    # Return 8 if then'th star is found.\n    # Return 9 if then'th star is not found.\n    # Return 10 if then'th star is found.\n    # Return 11 if then'th star is not found.\n    # Return 12 if then'th star is found.\n    # Return 13 if then'th star is not found.\n    # Return 14 if then'th star is found.\n    # Return 15 if then'th star is not found.\n    # Return 16 if then'th star is found.\n    # Return 17 if then'th star is not found.\n    # Return 18 if then'th star is found.\n    # Return 19 if then'th star is not found.\n    # Return 20 if then'th star is found.\n    # Return 21 if then'th star is not found.\n    # Return 22 if then'th star is found.\n    # Return 23 if then'th star is not found.\n    # Return 24 if then'th star is found.\n    # Return 25 if then'th star is not found.\n    # Return 26 if then'th star is found.\n    # Return 27 if then'th star is not found.\n    # Return 28 if then'th star is found.\n    # Return 29 if then'th star is not found.\n    # Return 30 if then'th star is found.\n\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_star_num",
            "candidate = method(:find_star_num)",
            "assert_equal(37, candidate.call(3))",
            "assert_equal(73, candidate.call(4))",
            "assert_equal(121, candidate.call(5))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "269",
        "title": "ascii_value",
        "text": "Write a function to find the ascii value of a character.",
        "code": "def ascii_value(k)\n    \"\"\"\n    Return the ascii value of a character.\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_ascii_value",
            "candidate = method(:ascii_value)",
            "assert_equal(65, candidate.call(\"A\"))",
            "assert_equal(82, candidate.call(\"R\"))",
            "assert_equal(83, candidate.call(\"S\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "270",
        "title": "sum_even_and_even_index",
        "text": "Write a rbthon function to find the sum of even numbers at even positions of an array.",
        "code": "def sum_even_and_even_index(arr)\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += i\n    return sum\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sum_even_and_even_index",
            "candidate = method(:sum_even_and_even_index)",
            "assert_equal(30, candidate.call([5, 6, 12, 1, 18, 8]))",
            "assert_equal(26, candidate.call([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]))",
            "assert_equal(12, candidate.call([5, 6, 12, 1]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "271",
        "title": "even_Power_Sum",
        "text": "Write a rbthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "code": "def even_Power_Sum(n)\n    # Write a rbthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    # Write a rbthon function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    # Write a rbthon function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    # Write a rbthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    # Write a rbthon function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    # Write a rbthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    # Write a rbthon function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    # Write a rbthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    # Write a rbthon function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    # Write a rbthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    # Write a rbthon function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    # Write a rbthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    # Write a rbthon function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    # Write a rbthon function that takes in an\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_even_Power_Sum",
            "candidate = method(:even_Power_Sum)",
            "assert_equal(1056, candidate.call(2))",
            "assert_equal(8832, candidate.call(3))",
            "assert_equal(32, candidate.call(1))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "272",
        "title": "rear_extract",
        "text": "Write a function that takes in an array of arrays and returns an array containing the rear element of each array.",
        "code": "def rear_extract(test_list)\n    # Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\n    # Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\n    # Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\n    # Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\n    # Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\n    # Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\n    # Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\n    # Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\n    # Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\n    # Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\n    # Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\n    # Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\n    # Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\n    # Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\n    # Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\n    # Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\n    # Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\n    # Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\n    # Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\n    #\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_rear_extract",
            "candidate = method(:rear_extract)",
            "assert_equal([21, 20, 19], candidate.call([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]))",
            "assert_equal([36, 25, 45], candidate.call([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]))",
            "assert_equal([14, 36, 56], candidate.call([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "273",
        "title": "substract_elements",
        "text": "Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.",
        "code": "def substract_elements(test_tup1, test_tup2)\n    # test_tup1 is a tuple of two arrays\n    # test_tup2 is a tuple of two arrays\n    # test_tup1[0] is the first array\n    # test_tup2[0] is the second array\n    # test_tup1[1] is the first array\n    # test_tup2[1] is the second array\n    # test_tup1[2] is the first array\n    # test_tup2[2] is the second array\n    # test_tup1[3] is the first array\n    # test_tup2[3] is the second array\n    # test_tup1[4] is the first array\n    # test_tup2[4] is the second array\n    # test_tup1[5] is the first array\n    # test_tup2[5] is the second array\n    # test_tup1[6] is the first array\n    # test_tup2[6] is the second array\n    # test_tup1[7] is the first array\n    # test_tup2[7] is the second array\n    # test_tup1[8] is the first array\n    # test_tup2[8] is the second array\n    # test_tup1[9] is the first array\n    # test_tup2[9] is the second array\n    # test_tup1[10] is the first array\n    # test_tup2[10] is the second array\n    # test_tup1[11] is the first array\n    # test_tup2[11] is the second array\n    # test_tup1[12] is the first array\n    # test_tup2[12] is the second array\n    # test_tup1[13] is the first array\n    # test_tup2[13] is the second array\n    # test_tup1[14] is the first\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_substract_elements",
            "candidate = method(:substract_elements)",
            "assert_equal([8, -1, -13], candidate.call([10, 4, 5], [2, 5, 18]))",
            "assert_equal([-13, -43, -13], candidate.call([11, 2, 3], [24, 45, 16]))",
            "assert_equal([-3, 7, -3], candidate.call([7, 18, 9], [10, 11, 12]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "274",
        "title": "even_binomial_Coeff_Sum",
        "text": "Write a rbthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "code": "def even_binomial_Coeff_Sum(n)\n    # Write a rbthon function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\ndef odd_binomial_Coeff_Sum(n)\n    # Write a rbthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum_2(n)\n    # Write a rbthon function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\ndef odd_binomial_Coeff_Sum_2(n)\n    # Write a rbthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum_3(n)\n    # Write a rbthon function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\ndef odd_binomial_Coeff_Sum_3(n)\n    # Write a rbthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum_4(n)\n    # Write a rbthon function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\ndef odd_binomial_Coeff_Sum_4(n)\n    # Write a rbthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum_5(n)\n    # Write a rbthon function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\ndef odd_binomial_Coeff_Sum_5(n)\n    # Write a rbthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum_6(n)\n    # Write a rbthon function that takes in a positive integer n and finds the sum of odd\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_even_binomial_Coeff_Sum",
            "candidate = method(:even_binomial_Coeff_Sum)",
            "assert_equal(8, candidate.call(4))",
            "assert_equal(32, candidate.call(6))",
            "assert_equal(2, candidate.call(2))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "277",
        "title": "dict_filter",
        "text": "Write a function that takes in a hash and integer n and filters the hash to only include entries with values greater than or equal to n.",
        "code": "def dict_filter(dict, n)\n    # Return a dictionary that only contains entries with values greater than or equal to n.\n    return dict.get(n, None)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_dict_filter",
            "candidate = method(:dict_filter)",
            "assert_equal({\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Pierre Cox\" => 190}, candidate.call({\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190}, 170))",
            "assert_equal({\"Alden Cantrell\" => 180, \"Pierre Cox\" => 190}, candidate.call({\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190}, 180))",
            "assert_equal({\"Pierre Cox\" => 190}, candidate.call({\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190}, 190))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "278",
        "title": "count_first_elements",
        "text": "Write a function to find the number of elements that occurs before the array element in the given array.",
        "code": "def count_first_elements(test_tup)\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count_first_elements",
            "candidate = method(:count_first_elements)",
            "assert_equal(3, candidate.call([1, 5, 7, [4, 6], 10]))",
            "assert_equal(2, candidate.call([2, 9, [5, 7], 11]))",
            "assert_equal(4, candidate.call([11, 15, 5, 8, [2, 3], 8]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "279",
        "title": "is_num_decagonal",
        "text": "Write a function to find the nth decagonal number.",
        "code": "def is_num_decagonal(n)\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    else:\n        return is_num_decagonal(n-1) and is_num_decagonal(n-2)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_is_num_decagonal",
            "candidate = method(:is_num_decagonal)",
            "assert_equal(27, candidate.call(3))",
            "assert_equal(175, candidate.call(7))",
            "assert_equal(370, candidate.call(10))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "280",
        "title": "sequential_search",
        "text": "Write a function that takes in an array and element and returns an array containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
        "code": "def sequential_search(dlist, item)\n    return dlist[item] == item\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sequential_search",
            "candidate = method(:sequential_search)",
            "assert_equal([true, 3], candidate.call([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31))",
            "assert_equal([true, 7], candidate.call([12, 32, 45, 62, 35, 47, 44, 61], 61))",
            "assert_equal([true, 6], candidate.call([9, 10, 17, 19, 22, 39, 48, 56], 48))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "281",
        "title": "all_unique",
        "text": "Write a rbthon function to check if the elements of a given array are unique or not.",
        "code": "def all_unique(test_list)\n    \"\"\"\n    test_list = list(test_list)\n    test_list.sort()\n    return all(test_list)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_all_unique",
            "candidate = method(:all_unique)",
            "assert_equal(true, candidate.call([1, 2, 3]))",
            "assert_equal(false, candidate.call([1, 2, 1, 2]))",
            "assert_equal(true, candidate.call([1, 2, 3, 4, 5]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "282",
        "title": "sub_list",
        "text": "Write a function to subtract two arrays element-wise.",
        "code": "def sub_list(nums1, nums2)\n    # Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n    # Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n    # Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n    # Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n    # Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n    # Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n    # Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n    # Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n    # Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n    # Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n    # Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n    # Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n    # Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n    # Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n    # Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n    # Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n    # Write a function to subtract two arrays element-wise.\ndef sub_list(nums1, nums2)\n    # Write a function to subtract two arrays\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sub_list",
            "candidate = method(:sub_list)",
            "assert_equal([-3, -3, -3], candidate.call([1, 2, 3], [4, 5, 6]))",
            "assert_equal([-2, -2], candidate.call([1, 2], [3, 4]))",
            "assert_equal([40, 50], candidate.call([90, 120], [50, 70]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "283",
        "title": "validate",
        "text": "Write a rbthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "code": "def validate(n)\n    if n < 0:\n        raise ValueError(\"The number must be greater than 0\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_validate",
            "candidate = method(:validate)",
            "assert_equal(true, candidate.call(1234))",
            "assert_equal(false, candidate.call(51241))",
            "assert_equal(true, candidate.call(321))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "284",
        "title": "check_element",
        "text": "Write a function that takes in an array and element and checks whether all items in the array are equal to the given element.",
        "code": "def check_element(list, element)\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_check_element",
            "candidate = method(:check_element)",
            "assert_equal(false, candidate.call([\"green\", \"orange\", \"black\", \"white\"], \"blue\"))",
            "assert_equal(false, candidate.call([1, 2, 3, 4], 7))",
            "assert_equal(true, candidate.call([\"green\", \"green\", \"green\", \"green\"], \"green\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "285",
        "title": "text_match_two_three",
        "text": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "code": "def text_match_two_three(text)\n    # Return True if the string contains the 'a' character followed by two or three 'b' characters.\n    return text.find('a')!= -1 and text.find('b')!= -1\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_text_match_two_three",
            "candidate = method(:text_match_two_three)",
            "assert_equal(false, candidate.call(\"ac\"))",
            "assert_equal(false, candidate.call(\"dc\"))",
            "assert_equal(true, candidate.call(\"abbbba\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "286",
        "title": "max_sub_array_sum_repeated",
        "text": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
        "code": "def max_sub_array_sum_repeated(a, n, k)\n    # Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    # Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    # Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    # Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    # Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    # Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    # Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    # Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    # Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    # Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    # Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    # Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    # Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    # Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    # Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    # Write a function to find the largest sum of a contiguous array\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_max_sub_array_sum_repeated",
            "candidate = method(:max_sub_array_sum_repeated)",
            "assert_equal(30, candidate.call([10, 20, -30, -1], 4, 3))",
            "assert_equal(59, candidate.call([-1, 10, 20], 3, 2))",
            "assert_equal(-1, candidate.call([-1, -2, -3], 3, 3))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "287",
        "title": "square_Sum",
        "text": "Write a rbthon function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "code": "def square_Sum(n)\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_square_Sum",
            "candidate = method(:square_Sum)",
            "assert_equal(20, candidate.call(2))",
            "assert_equal(56, candidate.call(3))",
            "assert_equal(120, candidate.call(4))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "290",
        "title": "max_length",
        "text": "Write a function to find the array of maximum length in an array of arrays.",
        "code": "def max_length(list1)\n    # Write a function to find the array of maximum length in an array of arrays.\n    # list1 is a list of lists.\n    # Return the maximum length of the list.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1 is a list of lists.\n    # list1\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_max_length",
            "candidate = method(:max_length)",
            "assert_equal([3, [13, 15, 17]], candidate.call([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))",
            "assert_equal([4, [10, 12, 14, 15]], candidate.call([[1], [5, 7], [10, 12, 14, 15]]))",
            "assert_equal([3, [15, 20, 25]], candidate.call([[5], [15, 20, 25]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "291",
        "title": "count_no_of_ways",
        "text": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code": "def count_no_of_ways(n, k)\n    \n    # Find the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    return count_no_of_ways(n, k)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count_no_of_ways",
            "candidate = method(:count_no_of_ways)",
            "assert_equal(16, candidate.call(2, 4))",
            "assert_equal(6, candidate.call(3, 2))",
            "assert_equal(228, candidate.call(4, 4))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "292",
        "title": "find",
        "text": "Write a rbthon function to find quotient of two numbers (rounded down to the nearest integer).",
        "code": "def find(n, m)\n    return int(n / m)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find",
            "candidate = method(:find)",
            "assert_equal(3, candidate.call(10, 3))",
            "assert_equal(2, candidate.call(4, 2))",
            "assert_equal(4, candidate.call(20, 5))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "293",
        "title": "otherside_rightangle",
        "text": "Write a function to find the third side of a right angled triangle.",
        "code": "def otherside_rightangle(w, h)\n    # Write a function to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n    # This function is used to find the third side of a right angled triangle.\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_otherside_rightangle",
            "candidate = method(:otherside_rightangle)",
            "assert_equal(10.63014581273465, candidate.call(7, 8))",
            "assert_equal(5, candidate.call(3, 4))",
            "assert_equal(16.55294535724685, candidate.call(7, 15))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "294",
        "title": "max_val",
        "text": "Write a function to find the maximum value in a given heterogeneous array.",
        "code": "def max_val(listval)\n    \"\"\"\n    return max(listval)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_max_val",
            "candidate = method(:max_val)",
            "assert_equal(5, candidate.call([\"Python\", 3, 2, 4, 5, \"version\"]))",
            "assert_equal(25, candidate.call([\"Python\", 15, 20, 25]))",
            "assert_equal(50, candidate.call([\"Python\", 30, 20, 40, 50, \"version\"]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "295",
        "title": "sum_div",
        "text": "Write a function to return the sum of all divisors of a number.",
        "code": "def sum_div(number)\n    return sum(divisors(number))\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sum_div",
            "candidate = method(:sum_div)",
            "assert_equal(7, candidate.call(8))",
            "assert_equal(16, candidate.call(12))",
            "assert_equal(1, candidate.call(7))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "296",
        "title": "get_Inv_Count",
        "text": "Write a rbthon function to count inversions in an array.",
        "code": "def get_Inv_Count(arr)\n    # Get the number of invocations of the function.\n    inv_count = 0\n    for i in arr:\n        inv_count += i\n    return inv_count\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_get_Inv_Count",
            "candidate = method(:get_Inv_Count)",
            "assert_equal(5, candidate.call([1, 20, 6, 4, 5]))",
            "assert_equal(1, candidate.call([1, 2, 1]))",
            "assert_equal(3, candidate.call([1, 2, 5, 6, 1]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "297",
        "title": "flatten_list",
        "text": "Write a function to flatten a given nested array structure.",
        "code": "def flatten_list(list1)\n    \"\"\"\n    return [flatten_list(item) for item in list1]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_flatten_list",
            "candidate = method(:flatten_list)",
            "assert_equal([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120], candidate.call([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]))",
            "assert_equal([10, 20, 40, 30, 56, 25, 10, 20, 33, 40], candidate.call([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]))",
            "assert_equal([1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "299",
        "title": "max_aggregate",
        "text": "Write a function to calculate the maximum aggregate from the array of arrays.",
        "code": "def max_aggregate(stdata)\n    \"\"\"\n    Returns the maximum aggregate from the array of arrays.\n    \"\"\"\n    return max(stdata)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_max_aggregate",
            "candidate = method(:max_aggregate)",
            "assert_equal([\"Juan Whelan\", 212], candidate.call([[\"Juan Whelan\", 90], [\"Sabah Colley\", 88], [\"Peter Nichols\", 7], [\"Juan Whelan\", 122], [\"Sabah Colley\", 84]]))",
            "assert_equal([\"Juan Whelan\", 72], candidate.call([[\"Juan Whelan\", 50], [\"Sabah Colley\", 48], [\"Peter Nichols\", 37], [\"Juan Whelan\", 22], [\"Sabah Colley\", 14]]))",
            "assert_equal([\"Sabah Colley\", 70], candidate.call([[\"Juan Whelan\", 10], [\"Sabah Colley\", 20], [\"Peter Nichols\", 30], [\"Juan Whelan\", 40], [\"Sabah Colley\", 50]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "304",
        "title": "find_Element",
        "text": "Write a rbthon function to find element at a given index after number of rotations.",
        "code": "def find_Element(arr, ranges, rotations, index)\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_Element",
            "candidate = method(:find_Element)",
            "assert_equal(3, candidate.call([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1))",
            "assert_equal(3, candidate.call([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2))",
            "assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "305",
        "title": "start_withp",
        "text": "Write a function to return two words from an array of words starting with letter 'p'.",
        "code": "def start_withp(words)\n    return words[0] + words[1]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_start_withp",
            "candidate = method(:start_withp)",
            "assert_equal([\"Python\", \"PHP\"], candidate.call([\"Python PHP\", \"Java JavaScript\", \"c c++\"]))",
            "assert_equal([\"Python\", \"Programming\"], candidate.call([\"Python Programming\", \"Java Programming\"]))",
            "assert_equal([\"Pqrst\", \"Pqr\"], candidate.call([\"Pqrst Pqr\", \"qrstuv\"]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "306",
        "title": "max_sum_increasing_subseq",
        "text": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.",
        "code": "def max_sum_increasing_subseq(a, n, index, k)\n\t# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\t# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\t# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\t# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\t# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\t# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\t# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\t# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\t# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\t# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\t# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_max_sum_increasing_subseq",
            "candidate = method(:max_sum_increasing_subseq)",
            "assert_equal(11, candidate.call([1, 101, 2, 3, 100, 4, 5], 7, 4, 6))",
            "assert_equal(7, candidate.call([1, 101, 2, 3, 100, 4, 5], 7, 2, 5))",
            "assert_equal(71, candidate.call([11, 15, 19, 21, 26, 28, 31], 7, 2, 4))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "308",
        "title": "large_product",
        "text": "Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.",
        "code": "def large_product(nums1, nums2, n)\n    # Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\n    # Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\n    # Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\n    # Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\n    # Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\n    # Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\n    # Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\n    # Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\n    # Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\n    # Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\n    # Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\n    # Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\n    # Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\n    # Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\n    # Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\n    # Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\n    # Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\n    # Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\n    # Write\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_large_product",
            "candidate = method(:large_product)",
            "assert_equal([60, 54, 50], candidate.call([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3))",
            "assert_equal([60, 54, 50, 48], candidate.call([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4))",
            "assert_equal([60, 54, 50, 48, 45], candidate.call([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "309",
        "title": "maximum",
        "text": "Write a rbthon function to find the maximum of two numbers.",
        "code": "def maximum(a, b)\n    return max(a, b)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_maximum",
            "candidate = method(:maximum)",
            "assert_equal(10, candidate.call(5, 10))",
            "assert_equal(-1, candidate.call(-1, -2))",
            "assert_equal(9, candidate.call(9, 7))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "310",
        "title": "string_to_tuple",
        "text": "Write a function to convert a given string to an array of characters.",
        "code": "def string_to_tuple(str1)\n    # Convert a given string to an array of characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    # Return a tuple of the characters.\n    \n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_string_to_tuple",
            "candidate = method(:string_to_tuple)",
            "assert_equal([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"], candidate.call(\"python 3.0\"))",
            "assert_equal([\"i\", \"t\", \"e\", \"m\", \"1\"], candidate.call(\"item1\"))",
            "assert_equal([\"1\", \"5\", \".\", \"1\", \"0\"], candidate.call(\"15.10\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "388",
        "title": "highest_Power_of_2",
        "text": "Write a rbthon function to find the highest power of 2 that is less than or equal to n.",
        "code": "def highest_Power_of_2(n)\n    \"\"\"\n    Returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    return 2**(n-1) - 1\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_highest_Power_of_2",
            "candidate = method(:highest_Power_of_2)",
            "assert_equal(8, candidate.call(10))",
            "assert_equal(16, candidate.call(19))",
            "assert_equal(32, candidate.call(32))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "389",
        "title": "find_lucas",
        "text": "Write a function to find then'th lucas number.",
        "code": "def find_lucas(n)\n    # Write a function to find then'th lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the first occurrence of the lucas number.\n    # Return the number of the\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_lucas",
            "candidate = method(:find_lucas)",
            "assert_equal(76, candidate.call(9))",
            "assert_equal(7, candidate.call(4))",
            "assert_equal(4, candidate.call(3))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "390",
        "title": "add_string",
        "text": "Write a function to apply a given format string to all of the elements in an array.",
        "code": "def add_string(list_, string)\n    \n    # Add the string to the list.\n    list_.append(string)\n    \n    # Return the list.\n    return list_\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_add_string",
            "candidate = method(:add_string)",
            "assert_equal([\"temp1\", \"temp2\", \"temp3\", \"temp4\"], candidate.call([1, 2, 3, 4], \"temp{0}\"))",
            "assert_equal([\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"], candidate.call([\"a\", \"b\", \"c\", \"d\"], \"python{0}\"))",
            "assert_equal([\"string5\", \"string6\", \"string7\", \"string8\"], candidate.call([5, 6, 7, 8], \"string{0}\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "391",
        "title": "convert_list_dictionary",
        "text": "Write a function to convert more than one array to nested hash.",
        "code": "def convert_list_dictionary(l1, l2, l3)\n    # Convert a list of dictionaries to a list of lists.\n    l1 = list(l1)\n    l2 = list(l2)\n    l3 = list(l3)\n    # Convert a list of lists to a list of lists.\n    l1 = list(l1)\n    l2 = list(l2)\n    l3 = list(l3)\n    # Convert a list of lists to a list of lists.\n    l1 = list(l1)\n    l2 = list(l2)\n    l3 = list(l3)\n    # Convert a list of lists to a list of lists.\n    l1 = list(l1)\n    l2 = list(l2)\n    l3 = list(l3)\n    # Convert a list of lists to a list of lists.\n    l1 = list(l1)\n    l2 = list(l2)\n    l3 = list(l3)\n    # Convert a list of lists to a list of lists.\n    l1 = list(l1)\n    l2 = list(l2)\n    l3 = list(l3)\n    # Convert a list of lists to a list of lists.\n    l1 = list(l1)\n    l2 = list(l2)\n    l3 = list(l3)\n    # Convert a list of lists to a list of lists.\n    l1 = list(l1)\n    l2 = list(l2)\n    l3 = list(l3)\n    # Convert a list of lists to a list of lists.\n    l1 = list(l1)\n    l2 = list(l2)\n    l3 = list(l3)\n    # Convert a list of lists to a list of lists.\n    l1 = list(l1)\n    l2 = list(l2)\n    l3 = list(l3)\n    # Convert a list of lists to a list of lists.\n    l1 = list(l1)\n    l2 = list(l2)\n    l3 =\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_convert_list_dictionary",
            "candidate = method(:convert_list_dictionary)",
            "assert_equal([{\"S001\" => {\"Adina Park\" => 85}}, {\"S002\" => {\"Leyton Marsh\" => 98}}, {\"S003\" => {\"Duncan Boyle\" => 89}}, {\"S004\" => {\"Saim Richards\" => 92}}], candidate.call([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]))",
            "assert_equal([{\"abc\" => {\"python\" => 100}}, {\"def\" => {\"program\" => 200}}, {\"ghi\" => {\"language\" => 300}}, {\"jkl\" => {\"programs\" => 400}}], candidate.call([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]))",
            "assert_equal([{\"A1\" => {\"java\" => 10}}, {\"A2\" => {\"C\" => 20}}, {\"A3\" => {\"C++\" => 30}}, {\"A4\" => {\"DBMS\" => 40}}], candidate.call([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "392",
        "title": "get_max_sum",
        "text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code": "def get_max_sum(n)\n    return max(f(n), n)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_get_max_sum",
            "candidate = method(:get_max_sum)",
            "assert_equal(106, candidate.call(60))",
            "assert_equal(12, candidate.call(10))",
            "assert_equal(2, candidate.call(2))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "393",
        "title": "max_length_list",
        "text": "Write a function to find the array with maximum length.",
        "code": "def max_length_list(input_list)\n    # Write a function to find the array with maximum length.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the list.\n    # The function should return the maximum length of the\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_max_length_list",
            "candidate = method(:max_length_list)",
            "assert_equal([3, [13, 15, 17]], candidate.call([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))",
            "assert_equal([5, [1, 2, 3, 4, 5]], candidate.call([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]))",
            "assert_equal([4, [6, 7, 8, 9]], candidate.call([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "394",
        "title": "check_distinct",
        "text": "Write a function to check if given array contains no duplicates.",
        "code": "def check_distinct(test_tup)\n    \"\"\"\n    test_tup = (test_tup[0], test_tup[1])\n    if test_tup in test_tup:\n        return False\n    else:\n        return True\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_check_distinct",
            "candidate = method(:check_distinct)",
            "assert_equal(false, candidate.call([1, 4, 5, 6, 1, 4]))",
            "assert_equal(true, candidate.call([1, 4, 5, 6]))",
            "assert_equal(true, candidate.call([2, 3, 4, 5, 6]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "395",
        "title": "first_non_repeating_character",
        "text": "Write a rbthon function to find the first non-repeated character in a given string.",
        "code": "def first_non_repeating_character(str1)\n    \"\"\"\n    return str1[0] if str1 else ''\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_first_non_repeating_character",
            "candidate = method(:first_non_repeating_character)",
            "assert_equal(nil, candidate.call(\"abcabc\"))",
            "assert_equal(\"a\", candidate.call(\"abc\"))",
            "assert_equal(\"c\", candidate.call(\"ababc\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "396",
        "title": "check_char",
        "text": "Write a function to check whether the given string starts and ends with the same character or not.",
        "code": "def check_char(string)\n    if string[0]!= string[-1]:\n        return False\n    for c in string:\n        if c!= string[-1]:\n            return False\n    return True\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_check_char",
            "candidate = method(:check_char)",
            "assert_equal(\"Valid\", candidate.call(\"abba\"))",
            "assert_equal(\"Valid\", candidate.call(\"a\"))",
            "assert_equal(\"Invalid\", candidate.call(\"abcd\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "397",
        "title": "median_numbers",
        "text": "Write a function to find the median of three numbers.",
        "code": "def median_numbers(a, b, c)\n    return a + b + c\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_median_numbers",
            "candidate = method(:median_numbers)",
            "assert_equal(55.0, candidate.call(25, 55, 65))",
            "assert_equal(20.0, candidate.call(20, 10, 30))",
            "assert_equal(45.0, candidate.call(15, 45, 75))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "398",
        "title": "sum_of_digits",
        "text": "Write a function to compute the sum of digits of each number of a given array.",
        "code": "def sum_of_digits(nums)\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sum_of_digits",
            "candidate = method(:sum_of_digits)",
            "assert_equal(14, candidate.call([10, 2, 56]))",
            "assert_equal(19, candidate.call([[10, 20, 4, 5, \"b\", 70, \"a\"]]))",
            "assert_equal(19, candidate.call([10, 20, -4, 5, -70]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "399",
        "title": "bitwise_xor",
        "text": "Write a function to perform the mathematical bitwise xor operation across the given arrays.",
        "code": "def bitwise_xor(test_tup1, test_tup2)\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2 are arrays of the same length\n    # test_tup1 and test_tup2\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_bitwise_xor",
            "candidate = method(:bitwise_xor)",
            "assert_equal([15, 6, 5, 10], candidate.call([10, 4, 6, 9], [5, 2, 3, 3]))",
            "assert_equal([13, 6, 3, 14], candidate.call([11, 5, 7, 10], [6, 3, 4, 4]))",
            "assert_equal([11, 2, 13, 13], candidate.call([12, 6, 8, 11], [7, 4, 5, 6]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "3",
        "title": "is_not_prime",
        "text": "Write a rbthon function to identify non-prime numbers.",
        "code": "def is_not_prime(n)\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, n // 2 + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_is_not_prime",
            "candidate = method(:is_not_prime)",
            "assert_equal(false, candidate.call(2))",
            "assert_equal(true, candidate.call(10))",
            "assert_equal(true, candidate.call(35))",
            "assert_equal(false, candidate.call(37))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "400",
        "title": "extract_freq",
        "text": "Write a function to extract the number of unique arrays in the given array.",
        "code": "def extract_freq(test_list)\n    \"\"\"\n    Return the number of unique arrays in the given array.\n    \"\"\"\n    return len(set(test_list))\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_extract_freq",
            "candidate = method(:extract_freq)",
            "assert_equal(3, candidate.call([[3, 4], [1, 2], [4, 3], [5, 6]]))",
            "assert_equal(4, candidate.call([[4, 15], [2, 3], [5, 4], [6, 7]]))",
            "assert_equal(4, candidate.call([[5, 16], [2, 3], [6, 5], [6, 9]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "401",
        "title": "add_nested_tuples",
        "text": "Write a function to perform index wise addition of array elements in the given two nested arrays.",
        "code": "def add_nested_tuples(test_tup1, test_tup2)\n    # test_tup1 is a tuple of two nested arrays\n    # test_tup2 is a tuple of two nested arrays\n    # test_tup1 and test_tup2 are tuples of two nested arrays\n    # test_tup1 and test_tup2 are tuples of two nested arrays\n    # test_tup1 and test_tup2 are tuples of two nested arrays\n    # test_tup1 and test_tup2 are tuples of two nested arrays\n    # test_tup1 and test_tup2 are tuples of two nested arrays\n    # test_tup1 and test_tup2 are tuples of two nested arrays\n    # test_tup1 and test_tup2 are tuples of two nested arrays\n    # test_tup1 and test_tup2 are tuples of two nested arrays\n    # test_tup1 and test_tup2 are tuples of two nested arrays\n    # test_tup1 and test_tup2 are tuples of two nested arrays\n    # test_tup1 and test_tup2 are tuples of two nested arrays\n    # test_tup1 and test_tup2 are tuples of two nested arrays\n    # test_tup1 and test_tup2 are tuples of two nested arrays\n    # test_tup1 and test_tup2 are tuples of two nested arrays\n    # test_tup1 and test_tup2 are tuples of two nested arrays\n    # test_tup1 and test_tup2 are tuples of two nested arrays\n    # test_tup1 and test_tup2 are tuples of two nested arrays\n    # test_tup1 and test_tup2 are tuples of two nested arrays\n    # test_tup1 and test_tup2 are tuples of two nested arrays\n    # test_tup1 and test_tup2 are tuples of two nested arrays\n    # test_tup1 and test_tup2 are tuples of two nested arrays\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_add_nested_tuples",
            "candidate = method(:add_nested_tuples)",
            "assert_equal([[7, 10], [7, 14], [3, 10], [8, 13]], candidate.call([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]))",
            "assert_equal([[9, 12], [9, 16], [5, 12], [10, 15]], candidate.call([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]))",
            "assert_equal([[11, 14], [11, 18], [7, 14], [12, 17]], candidate.call([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "404",
        "title": "minimum",
        "text": "Write a rbthon function to find the minimum of two numbers.",
        "code": "def minimum(a, b)\n    return a if a < b else b\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_minimum",
            "candidate = method(:minimum)",
            "assert_equal(1, candidate.call(1, 2))",
            "assert_equal(-5, candidate.call(-5, -4))",
            "assert_equal(0, candidate.call(0, 0))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "405",
        "title": "check_tuplex",
        "text": "Write a function to check whether an element exists within an array.",
        "code": "def check_tuplex(tuplex, tuple1)\n    \"\"\"\n    Check whether an element exists within an array.\n    \"\"\"\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_check_tuplex",
            "candidate = method(:check_tuplex)",
            "assert_equal(true, candidate.call([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"r\"))",
            "assert_equal(false, candidate.call([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"5\"))",
            "assert_equal(true, candidate.call([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], 3))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "406",
        "title": "find_Parity",
        "text": "Write a rbthon function to find whether the parity of a given number is odd.",
        "code": "def find_Parity(x)\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_Parity",
            "candidate = method(:find_Parity)",
            "assert_equal(false, candidate.call(12))",
            "assert_equal(true, candidate.call(7))",
            "assert_equal(false, candidate.call(10))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "407",
        "title": "rearrange_bigger",
        "text": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "code": "def rearrange_bigger(n)\n    if n < 10:\n        return n\n    else:\n        return n + 1\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_rearrange_bigger",
            "candidate = method(:rearrange_bigger)",
            "assert_equal(21, candidate.call(12))",
            "assert_equal(false, candidate.call(10))",
            "assert_equal(120, candidate.call(102))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "408",
        "title": "k_smallest_pairs",
        "text": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.",
        "code": "def k_smallest_pairs(nums1, nums2, k)\n    # Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    # Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    # Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    # Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    # Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    # Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    # Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    # Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    # Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    # Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    # Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    # Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    # Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    # Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    # Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    # Write a function to find k number of smallest pairs which\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_k_smallest_pairs",
            "candidate = method(:k_smallest_pairs)",
            "assert_equal([[1, 2], [1, 4]], candidate.call([1, 3, 7], [2, 4, 6], 2))",
            "assert_equal([[1, 2]], candidate.call([1, 3, 7], [2, 4, 6], 1))",
            "assert_equal([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], candidate.call([1, 3, 7], [2, 4, 6], 7))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "409",
        "title": "min_product_tuple",
        "text": "Write a function to find the minimum product from the pairs of arrays within a given array.",
        "code": "def min_product_tuple(list1)\n    # list1 is a list of tuples of the form (a, b)\n    # return the minimum product of the elements in the list\n    # list1 is a list of tuples of the form (a, b)\n    # return the minimum product of the elements in the list\n    # list1 is a list of tuples of the form (a, b)\n    # return the minimum product of the elements in the list\n    # list1 is a list of tuples of the form (a, b)\n    # return the minimum product of the elements in the list\n    # list1 is a list of tuples of the form (a, b)\n    # return the minimum product of the elements in the list\n    # list1 is a list of tuples of the form (a, b)\n    # return the minimum product of the elements in the list\n    # list1 is a list of tuples of the form (a, b)\n    # return the minimum product of the elements in the list\n    # list1 is a list of tuples of the form (a, b)\n    # return the minimum product of the elements in the list\n    # list1 is a list of tuples of the form (a, b)\n    # return the minimum product of the elements in the list\n    # list1 is a list of tuples of the form (a, b)\n    # return the minimum product of the elements in the list\n    # list1 is a list of tuples of the form (a, b)\n    # return the minimum product of the elements in the list\n    # list1 is a list of tuples of the form (a, b)\n    # return the minimum product of the elements in the list\n    # list1 is a list of tuples of the form (a, b)\n    # return the minimum product of the elements in the list\n    # list1 is a list of tuples of the form (a, b)\n    # return the minimum product of the elements in the list\n    # list1 is a list of tuples of the form (a, b)\n    # return the minimum product of the elements in the list\n\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_min_product_tuple",
            "candidate = method(:min_product_tuple)",
            "assert_equal(8, candidate.call([[2, 7], [2, 6], [1, 8], [4, 9]]))",
            "assert_equal(30, candidate.call([[10, 20], [15, 2], [5, 10]]))",
            "assert_equal(100, candidate.call([[11, 44], [10, 15], [20, 5], [12, 9]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "410",
        "title": "min_val",
        "text": "Write a function to find the minimum value in a given heterogeneous array.",
        "code": "def min_val(listval)\n    \n    # Find the minimum value in the given heterogeneous array.\n    minval = listval[0]\n    \n    # Iterate through the listval and find the minimum value.\n    for val in listval:\n        if val < minval:\n            minval = val\n    \n    # Return the minimum value.\n    return minval\n    \n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_min_val",
            "candidate = method(:min_val)",
            "assert_equal(2, candidate.call([\"Python\", 3, 2, 4, 5, \"version\"]))",
            "assert_equal(15, candidate.call([\"Python\", 15, 20, 25]))",
            "assert_equal(20, candidate.call([\"Python\", 30, 20, 40, 50, \"version\"]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "411",
        "title": "snake_to_camel",
        "text": "Write a function to convert the given snake case string to camel case string.",
        "code": "def snake_to_camel(word)\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    return word.title()\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_snake_to_camel",
            "candidate = method(:snake_to_camel)",
            "assert_equal(\"AndroidTv\", candidate.call(\"android_tv\"))",
            "assert_equal(\"GooglePixel\", candidate.call(\"google_pixel\"))",
            "assert_equal(\"AppleWatch\", candidate.call(\"apple_watch\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "412",
        "title": "remove_odd",
        "text": "Write a rbthon function to remove odd numbers from a given array.",
        "code": "def remove_odd(l)\n    return [x for x in l if x % 2 == 0]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_remove_odd",
            "candidate = method(:remove_odd)",
            "assert_equal([2], candidate.call([1, 2, 3]))",
            "assert_equal([2, 4, 6], candidate.call([2, 4, 6]))",
            "assert_equal([10, 20], candidate.call([10, 20, 3]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "413",
        "title": "extract_nth_element",
        "text": "Write a function to extract the nth element from a given array of arrays.",
        "code": "def extract_nth_element(list1, n)\n    return list1[n]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_extract_nth_element",
            "candidate = method(:extract_nth_element)",
            "assert_equal([\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"], candidate.call([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 0))",
            "assert_equal([99, 96, 94, 98], candidate.call([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 2))",
            "assert_equal([98, 97, 91, 94], candidate.call([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 1))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "414",
        "title": "overlapping",
        "text": "Write a rbthon function to check whether any value in a sequence exists in a sequence or not.",
        "code": "def overlapping(list1, list2)\n    # Check if any value in a sequence exists in a sequence or not.\n    return any(list1.intersection(list2))\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_overlapping",
            "candidate = method(:overlapping)",
            "assert_equal(false, candidate.call([1, 2, 3, 4, 5], [6, 7, 8, 9]))",
            "assert_equal(false, candidate.call([1, 2, 3], [4, 5, 6]))",
            "assert_equal(true, candidate.call([1, 4, 5], [1, 4, 5]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "415",
        "title": "max_Product",
        "text": "Write a rbthon function to find a pair with highest product from a given array of integers.",
        "code": "def max_Product(arr)\n    # Find the maximum product of the given array.\n    max_product = 0\n    for i in range(len(arr)):\n        max_product = max(max_product, arr[i])\n    return max_product\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_max_Product",
            "candidate = method(:max_Product)",
            "assert_equal([7, 8], candidate.call([1, 2, 3, 4, 7, 0, 8, 4]))",
            "assert_equal([-4, -6], candidate.call([0, -1, -2, -4, 5, 0, -6]))",
            "assert_equal([2, 3], candidate.call([1, 2, 3]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "417",
        "title": "group_tuples",
        "text": "Write a function to find common first element in given array of arrays.",
        "code": "def group_tuples(input)\n    \"\"\"\n    return [tuple(i) for i in input]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_group_tuples",
            "candidate = method(:group_tuples)",
            "assert_equal([[\"x\", \"y\", \"z\"], [\"w\", \"t\"]], candidate.call([[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]]))",
            "assert_equal([[\"a\", \"b\", \"c\"], [\"d\", \"e\"]], candidate.call([[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]]))",
            "assert_equal([[\"f\", \"g\", \"g\"], [\"h\", \"i\"]], candidate.call([[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "418",
        "title": "Find_Max",
        "text": "Write a rbthon function to find the element of an array having maximum length.",
        "code": "def Find_Max(lst)\n    # Find the maximum element of an array.\n    max_element = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > max_element:\n            max_element = lst[i]\n    return max_element\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_Find_Max",
            "candidate = method(:Find_Max)",
            "assert_equal([\"A\", \"B\", \"C\"], candidate.call([[\"A\"], [\"A\", \"B\"], [\"A\", \"B\", \"C\"]]))",
            "assert_equal([1, 2, 3], candidate.call([[1], [1, 2], [1, 2, 3]]))",
            "assert_equal([1, 5, 6, 1], candidate.call([[1, 1], [1, 2, 3], [1, 5, 6, 1]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "419",
        "title": "round_and_sum",
        "text": "Write a function to round every number of a given array of numbers and print the total sum multiplied by the length of the array.",
        "code": "def round_and_sum(list1)\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i]\n    return sum\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_round_and_sum",
            "candidate = method(:round_and_sum)",
            "assert_equal(243, candidate.call([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]))",
            "assert_equal(345, candidate.call([5, 2, 9, 24.3, 29]))",
            "assert_equal(513, candidate.call([25.0, 56.7, 89.2]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "420",
        "title": "cube_Sum",
        "text": "Write a rbthon function to find the cube sum of first n even natural numbers.",
        "code": "def cube_Sum(n)\n    return sum(x**n for x in range(1, n+1))\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_cube_Sum",
            "candidate = method(:cube_Sum)",
            "assert_equal(72, candidate.call(2))",
            "assert_equal(288, candidate.call(3))",
            "assert_equal(800, candidate.call(4))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "421",
        "title": "concatenate_tuple",
        "text": "Write a function to concatenate each element of array by the delimiter.",
        "code": "def concatenate_tuple(test_tup)\n    \"\"\"\n    test_tup = test_tup[:]\n    test_tup.append(test_tup[0])\n    test_tup.append(test_tup[1])\n    return test_tup\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_concatenate_tuple",
            "candidate = method(:concatenate_tuple)",
            "assert_equal(\"ID-is-4-UTS\", candidate.call([\"ID\", \"is\", 4, \"UTS\"]))",
            "assert_equal(\"QWE-is-4-RTY\", candidate.call([\"QWE\", \"is\", 4, \"RTY\"]))",
            "assert_equal(\"ZEN-is-4-OP\", candidate.call([\"ZEN\", \"is\", 4, \"OP\"]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "422",
        "title": "find_Average_Of_Cube",
        "text": "Write a rbthon function to find the average of cubes of first n natural numbers.",
        "code": "def find_Average_Of_Cube(n)\n    \n    # Write a rbthon function to find the average of cubes of first n natural numbers.\n    def find_Average_Of_Cube(n):\n        return sum(cubes[i] for i in range(n)) / n\n    \n    # Write a rbthon function to find the average of cubes of first n natural numbers.\n    def find_Average_Of_Cube(n):\n        return sum(cubes[i] for i in range(n)) / n\n    \n    # Write a rbthon function to find the average of cubes of first n natural numbers.\n    def find_Average_Of_Cube(n):\n        return sum(cubes[i] for i in range(n)) / n\n    \n    # Write a rbthon function to find the average of cubes of first n natural numbers.\n    def find_Average_Of_Cube(n):\n        return sum(cubes[i] for i in range(n)) / n\n    \n    # Write a rbthon function to find the average of cubes of first n natural numbers.\n    def find_Average_Of_Cube(n):\n        return sum(cubes[i] for i in range(n)) / n\n    \n    # Write a rbthon function to find the average of cubes of first n natural numbers.\n    def find_Average_Of_Cube(n):\n        return sum(cubes[i] for i in range(n)) / n\n    \n    # Write a rbthon function to find the average of cubes of first n natural numbers.\n    def find_Average_Of_Cube(n):\n        return sum(cubes[i] for i in range(n)) / n\n    \n    # Write a rbthon function to find the average of cubes of first n natural numbers.\n    def find_Average_Of_Cube(n):\n        return sum(cubes[i] for i in range(n)) / n\n    \n    # Write a rbthon function to find the average of cubes of first n natural numbers.\n    def find_Average_Of\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_Average_Of_Cube",
            "candidate = method(:find_Average_Of_Cube)",
            "assert_equal(4.5, candidate.call(2))",
            "assert_equal(12, candidate.call(3))",
            "assert_equal(1, candidate.call(1))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "424",
        "title": "extract_rear",
        "text": "Write a function to extract only the rear index element of each string in the given array.",
        "code": "def extract_rear(test_tuple)\n    \"\"\"\n    return test_tuple[1]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_extract_rear",
            "candidate = method(:extract_rear)",
            "assert_equal([\"s\", \"r\", \"s\"], candidate.call([\"Mers\", \"for\", \"Vers\"]))",
            "assert_equal([\"e\", \"r\", \"e\"], candidate.call([\"Avenge\", \"for\", \"People\"]))",
            "assert_equal([\"a\", \"t\", \"o\"], candidate.call([\"Gotta\", \"get\", \"go\"]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "425",
        "title": "count_element_in_list",
        "text": "Write a function to count the number of subarrays containing a particular element.",
        "code": "def count_element_in_list(list1, x)\n    # Return the number of subarrays containing the element x.\n    return len(list1) - 1\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count_element_in_list",
            "candidate = method(:count_element_in_list)",
            "assert_equal(3, candidate.call([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))",
            "assert_equal(3, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"))",
            "assert_equal(1, candidate.call([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "426",
        "title": "filter_oddnumbers",
        "text": "Write a function to filter odd numbers.",
        "code": "def filter_oddnumbers(nums)\n    return [n for n in nums if n % 2 == 0]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_filter_oddnumbers",
            "candidate = method(:filter_oddnumbers)",
            "assert_equal([1, 3, 5, 7, 9], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
            "assert_equal([45, 67, 93], candidate.call([10, 20, 45, 67, 84, 93]))",
            "assert_equal([5, 7, 9, 3], candidate.call([5, 7, 9, 8, 6, 4, 3]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "427",
        "title": "change_date_format",
        "text": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "code": "def change_date_format(dt)\n    \"\"\"\n    Converts a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    return dt.strftime(\"%d-%m-%Y\")\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_change_date_format",
            "candidate = method(:change_date_format)",
            "assert_equal(\"02-01-2026\", candidate.call(\"2026-01-02\"))",
            "assert_equal(\"13-11-2020\", candidate.call(\"2020-11-13\"))",
            "assert_equal(\"26-04-2021\", candidate.call(\"2021-04-26\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "428",
        "title": "shell_sort",
        "text": "Write a function to sort the given array by using shell sort.",
        "code": "def shell_sort(my_list)\n    # Sort the given array by using shell sort.\n    # Return the sorted list.\n    return sorted(my_list)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_shell_sort",
            "candidate = method(:shell_sort)",
            "assert_equal([2, 3, 4, 5, 12, 12, 23, 56, 81, 95], candidate.call([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]))",
            "assert_equal([22, 24, 34, 39, 68, 73, 87], candidate.call([24, 22, 39, 34, 87, 73, 68]))",
            "assert_equal([16, 30, 32, 74, 82, 83, 96], candidate.call([32, 30, 16, 96, 82, 83, 74]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "429",
        "title": "and_tuples",
        "text": "Write a function to extract the elementwise and arrays from the given two arrays.",
        "code": "def and_tuples(test_tup1, test_tup2)\n    # Extract the elements of the two arrays.\n    test_tup1 = test_tup1[0]\n    test_tup2 = test_tup2[0]\n    # Extract the elements of the two arrays.\n    test_tup1 = test_tup1[1]\n    test_tup2 = test_tup2[1]\n    # Extract the elements of the two arrays.\n    test_tup1 = test_tup1[2]\n    test_tup2 = test_tup2[2]\n    # Extract the elements of the two arrays.\n    test_tup1 = test_tup1[3]\n    test_tup2 = test_tup2[3]\n    # Extract the elements of the two arrays.\n    test_tup1 = test_tup1[4]\n    test_tup2 = test_tup2[4]\n    # Extract the elements of the two arrays.\n    test_tup1 = test_tup1[5]\n    test_tup2 = test_tup2[5]\n    # Extract the elements of the two arrays.\n    test_tup1 = test_tup1[6]\n    test_tup2 = test_tup2[6]\n    # Extract the elements of the two arrays.\n    test_tup1 = test_tup1[7]\n    test_tup2 = test_tup2[7]\n    # Extract the elements of the two arrays.\n    test_tup1 = test_tup1[8]\n    test_tup2 = test_tup2[8]\n    # Extract the elements of the two arrays.\n    test_tup1 = test_tup1[9]\n    test_tup2 = test_tup2[9]\n    # Extract the elements of the two arrays.\n    test_tup1 = test_tup1[10]\n    test_tup2 = test_tup2[10]\n    #\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_and_tuples",
            "candidate = method(:and_tuples)",
            "assert_equal([0, 0, 2, 1], candidate.call([10, 4, 6, 9], [5, 2, 3, 3]))",
            "assert_equal([1, 2, 3, 0], candidate.call([1, 2, 3, 4], [5, 6, 7, 8]))",
            "assert_equal([0, 9, 10, 0], candidate.call([8, 9, 11, 12], [7, 13, 14, 17]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "430",
        "title": "parabola_directrix",
        "text": "Write a function to find the directrix of a parabola.",
        "code": "def parabola_directrix(a, b, c)\n    \"\"\"\n    Returns the directrix of a parabola.\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_parabola_directrix",
            "candidate = method(:parabola_directrix)",
            "assert_equal(-198, candidate.call(5, 3, 2))",
            "assert_equal(-2336, candidate.call(9, 8, 4))",
            "assert_equal(-130, candidate.call(2, 4, 6))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "431",
        "title": "common_element",
        "text": "Write a function that takes two arrays and returns true if they have at least one common element.",
        "code": "def common_element(list1, list2)\n    # Write a function that takes two arrays and returns true if they have at least one common element.\n    # Write a function that takes two arrays and returns true if they have at least one common element.\n    # Write a function that takes two arrays and returns true if they have at least one common element.\n    # Write a function that takes two arrays and returns true if they have at least one common element.\n    # Write a function that takes two arrays and returns true if they have at least one common element.\n    # Write a function that takes two arrays and returns true if they have at least one common element.\n    # Write a function that takes two arrays and returns true if they have at least one common element.\n    # Write a function that takes two arrays and returns true if they have at least one common element.\n    # Write a function that takes two arrays and returns true if they have at least one common element.\n    # Write a function that takes two arrays and returns true if they have at least one common element.\n    # Write a function that takes two arrays and returns true if they have at least one common element.\n    # Write a function that takes two arrays and returns true if they have at least one common element.\n    # Write a function that takes two arrays and returns true if they have at least one common element.\n    # Write a function that takes two arrays and returns true if they have at least one common element.\n    # Write a function that takes two arrays and returns true if they have at least one common element.\n    # Write a function that takes two arrays and returns true if they have at least one common element.\n    # Write a function that takes two arrays and returns true if they have at least one common element.\n    # Write a function that takes two arrays and returns true if they have at least one common element.\n    # Write a function that takes two arrays and returns true if they have at least one common element.\n    # Write a function that takes two arrays and returns true if they have at least one common element.\n    # Write a function that takes two arrays and returns true if they have at least one common element.\n    # Write a function that takes two arrays and returns true if they have at least\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_common_element",
            "candidate = method(:common_element)",
            "assert_equal(true, candidate.call([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]))",
            "assert_equal(nil, candidate.call([1, 2, 3, 4, 5], [6, 7, 8, 9]))",
            "assert_equal(true, candidate.call([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "432",
        "title": "median_trapezium",
        "text": "Write a function to find the median length of a trapezium.",
        "code": "def median_trapezium(base1, base2, height)\n    # Find the median length of the trapezium.\n    return (base1 + base2) / 2.0\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_median_trapezium",
            "candidate = method(:median_trapezium)",
            "assert_equal(20, candidate.call(15, 25, 35))",
            "assert_equal(15, candidate.call(10, 20, 30))",
            "assert_equal(7.5, candidate.call(6, 9, 4))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "433",
        "title": "check_greater",
        "text": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "code": "def check_greater(arr, number)\n    # Check whether the given number is greater than the elements of the given array.\n    if number > len(arr):\n        return False\n    else:\n        return True\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_check_greater",
            "candidate = method(:check_greater)",
            "assert_equal(false, candidate.call([1, 2, 3, 4, 5], 4))",
            "assert_equal(true, candidate.call([2, 3, 4, 5, 6], 8))",
            "assert_equal(true, candidate.call([9, 7, 4, 8, 6, 1], 11))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "434",
        "title": "text_match_one",
        "text": "Write a function that matches a string that has an a followed by one or more b's.",
        "code": "def text_match_one(text)\n    # Return the first match.\n    return text.find(text)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_text_match_one",
            "candidate = method(:text_match_one)",
            "assert_equal(false, candidate.call(\"ac\"))",
            "assert_equal(false, candidate.call(\"dc\"))",
            "assert_equal(true, candidate.call(\"abba\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "435",
        "title": "last_Digit",
        "text": "Write a rbthon function to find the last digit of a given number.",
        "code": "def last_Digit(n)\n    return n[-1]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_last_Digit",
            "candidate = method(:last_Digit)",
            "assert_equal(3, candidate.call(123))",
            "assert_equal(5, candidate.call(25))",
            "assert_equal(0, candidate.call(30))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "436",
        "title": "neg_nos",
        "text": "Write a rbthon function to return the negative numbers in an array.",
        "code": "def neg_nos(list1)\n    return list1[0] - list1[1]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_neg_nos",
            "candidate = method(:neg_nos)",
            "assert_equal([-1, -6], candidate.call([-1, 4, 5, -6]))",
            "assert_equal([-1, -2], candidate.call([-1, -2, 3, 4]))",
            "assert_equal([-7, -6], candidate.call([-7, -6, 8, 9]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "437",
        "title": "remove_odd",
        "text": "Write a function to remove odd characters in a string.",
        "code": "def remove_odd(str1)\n    # Remove odd characters from a string.\n    return str1[::-1]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_remove_odd",
            "candidate = method(:remove_odd)",
            "assert_equal(\"yhn\", candidate.call(\"python\"))",
            "assert_equal(\"rga\", candidate.call(\"program\"))",
            "assert_equal(\"agae\", candidate.call(\"language\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "438",
        "title": "count_bidirectional",
        "text": "Write a function to count bidirectional array pairs.",
        "code": "def count_bidirectional(test_list)\n    \"\"\"\n    Counts the number of bidirectional pairs in the test list.\n    \"\"\"\n    return sum(1 for test in test_list if test[0] == test[1])\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count_bidirectional",
            "candidate = method(:count_bidirectional)",
            "assert_equal(3, candidate.call([[5, 6], [1, 2], [6, 5], [9, 1], [6, 5], [2, 1]]))",
            "assert_equal(2, candidate.call([[5, 6], [1, 3], [6, 5], [9, 1], [6, 5], [2, 1]]))",
            "assert_equal(4, candidate.call([[5, 6], [1, 2], [6, 5], [9, 2], [6, 5], [2, 1]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "439",
        "title": "multiple_to_single",
        "text": "Write a function to join an array of multiple integers into a single integer.",
        "code": "def multiple_to_single(l)\n    return l[0] + l[1]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_multiple_to_single",
            "candidate = method(:multiple_to_single)",
            "assert_equal(113350, candidate.call([11, 33, 50]))",
            "assert_equal(-123456, candidate.call([-1, 2, 3, 4, 5, 6]))",
            "assert_equal(10152025, candidate.call([10, 15, 20, 25]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "440",
        "title": "find_adverb_position",
        "text": "Write a function to find the first adverb and their positions in a given sentence.",
        "code": "def find_adverb_position(text)\n    # Find the first adverb and its position in a given sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence.\n    # Return the position of the first adverb and its position in the sentence\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_adverb_position",
            "candidate = method(:find_adverb_position)",
            "assert_equal([0, 7, \"clearly\"], candidate.call(\"clearly!! we can see the sky\"))",
            "assert_equal([0, 9, \"seriously\"], candidate.call(\"seriously!! there are many roses\"))",
            "assert_equal([0, 13, \"unfortunately\"], candidate.call(\"unfortunately!! sita is going to home\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "441",
        "title": "surfacearea_cube",
        "text": "Write a function to find the surface area of a cube of a given size.",
        "code": "def surfacearea_cube(l)\n    \"\"\"\n    return sum(l[i]**2 for i in range(len(l)))\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_surfacearea_cube",
            "candidate = method(:surfacearea_cube)",
            "assert_equal(150, candidate.call(5))",
            "assert_equal(54, candidate.call(3))",
            "assert_equal(600, candidate.call(10))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "442",
        "title": "positive_count",
        "text": "Write a function to find the ration of positive numbers in an array of integers.",
        "code": "def positive_count(nums)\n    # Return the number of positive numbers in the array.\n    return len(nums) - len(nums) % 2\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_positive_count",
            "candidate = method(:positive_count)",
            "assert_equal(0.54, candidate.call([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))",
            "assert_equal(0.69, candidate.call([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]))",
            "assert_equal(0.56, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "443",
        "title": "largest_neg",
        "text": "Write a rbthon function to find the largest negative number from the given array.",
        "code": "def largest_neg(list1)\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n    # list1 is a list of integers\n    # return the largest negative number from the given list\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_largest_neg",
            "candidate = method(:largest_neg)",
            "assert_equal(-6, candidate.call([1, 2, 3, -4, -6]))",
            "assert_equal(-9, candidate.call([1, 2, 3, -8, -9]))",
            "assert_equal(-1, candidate.call([1, 2, 3, 4, -1]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "444",
        "title": "trim_tuple",
        "text": "Write a function to trim each array by k in the given arrays.",
        "code": "def trim_tuple(test_list, k)\n    \"\"\"\n    test_list = list(test_list)\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][k]\n    return test_list\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_trim_tuple",
            "candidate = method(:trim_tuple)",
            "assert_equal([[2], [9], [2], [2]], candidate.call([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2))",
            "assert_equal([[3, 2, 1], [4, 9, 2], [1, 2, 3], [8, 2, 1]], candidate.call([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1))",
            "assert_equal([[8, 4], [8, 12], [1, 7], [6, 9]], candidate.call([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "445",
        "title": "index_multiplication",
        "text": "Write a function to perform index wise multiplication of array elements in the given two arrays.",
        "code": "def index_multiplication(test_tup1, test_tup2)\n    # test_tup1 is a tuple of two arrays\n    # test_tup2 is a tuple of two arrays\n    # test_tup1[0] is the first array\n    # test_tup2[0] is the second array\n    # test_tup1[1] is the first array\n    # test_tup2[1] is the second array\n    # test_tup1[2] is the first array\n    # test_tup2[2] is the second array\n    # test_tup1[3] is the first array\n    # test_tup2[3] is the second array\n    # test_tup1[4] is the first array\n    # test_tup2[4] is the second array\n    # test_tup1[5] is the first array\n    # test_tup2[5] is the second array\n    # test_tup1[6] is the first array\n    # test_tup2[6] is the second array\n    # test_tup1[7] is the first array\n    # test_tup2[7] is the second array\n    # test_tup1[8] is the first array\n    # test_tup2[8] is the second array\n    # test_tup1[9] is the first array\n    # test_tup2[9] is the second array\n    # test_tup1[10] is the first array\n    # test_tup2[10] is the second array\n    # test_tup1[11] is the first array\n    # test_tup2[11] is the second array\n    # test_tup1[12] is the first array\n    # test_tup2[12] is the second array\n    # test_tup1[13] is the first array\n    # test_tup2[13] is the second array\n    # test_tup1[14] is the first array\n    # test_tup2[14] is\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_index_multiplication",
            "candidate = method(:index_multiplication)",
            "assert_equal([[6, 21], [12, 45], [2, 9], [7, 30]], candidate.call([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]))",
            "assert_equal([[14, 32], [20, 60], [6, 20], [16, 44]], candidate.call([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]))",
            "assert_equal([[24, 45], [30, 77], [12, 33], [27, 60]], candidate.call([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "446",
        "title": "count_Occurrence",
        "text": "Write a rbthon function to count the occurence of all elements of array in an array.",
        "code": "def count_Occurrence(tup, lst)\n    \"\"\"\n    return len(tup)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count_Occurrence",
            "candidate = method(:count_Occurrence)",
            "assert_equal(3, candidate.call([\"a\", \"a\", \"c\", \"b\", \"d\"], [\"a\", \"b\"]))",
            "assert_equal(6, candidate.call([1, 2, 3, 1, 4, 6, 7, 1, 4], [1, 4, 7]))",
            "assert_equal(2, candidate.call([1, 2, 3, 4, 5, 6], [1, 2]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "447",
        "title": "cube_nums",
        "text": "Write a function to find cubes of individual elements in an array.",
        "code": "def cube_nums(nums)\n    # Return a list of the elements of the array.\n    return [x for x in nums if x % 2 == 0]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_cube_nums",
            "candidate = method(:cube_nums)",
            "assert_equal([1, 8, 27, 64, 125, 216, 343, 512, 729, 1000], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
            "assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30]))",
            "assert_equal([1728, 3375], candidate.call([12, 15]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "448",
        "title": "cal_sum",
        "text": "Write a function to calculate the sum of perrin numbers.",
        "code": "def cal_sum(n)\n    return sum(n)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_cal_sum",
            "candidate = method(:cal_sum)",
            "assert_equal(49, candidate.call(9))",
            "assert_equal(66, candidate.call(10))",
            "assert_equal(88, candidate.call(11))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "450",
        "title": "extract_string",
        "text": "Write a function to extract specified size of strings from a given array of string values.",
        "code": "def extract_string(str, l)\n    \"\"\"\n    return str[:l]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_extract_string",
            "candidate = method(:extract_string)",
            "assert_equal([\"practice\", \"solution\"], candidate.call([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8))",
            "assert_equal([\"Python\"], candidate.call([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6))",
            "assert_equal([\"exercises\"], candidate.call([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "451",
        "title": "remove_whitespaces",
        "text": "Write a function to remove all whitespaces from the given string.",
        "code": "def remove_whitespaces(text1)\n    \"\"\"\n    text1 = text1.replace(\" \", \"\")\n    return text1\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_remove_whitespaces",
            "candidate = method(:remove_whitespaces)",
            "assert_equal(\"GoogleFlutter\", candidate.call(\" Google    Flutter \"))",
            "assert_equal(\"GoogleDart\", candidate.call(\" Google    Dart \"))",
            "assert_equal(\"iOSSwift\", candidate.call(\" iOS    Swift \"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "452",
        "title": "loss_amount",
        "text": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
        "code": "def loss_amount(actual_cost, sale_amount)\n    \n    # Write a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef loss_amount_on_sale(actual_cost, sale_amount)\n    \n    # Write a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef loss_amount_on_sale_on_sale(actual_cost, sale_amount)\n    \n    # Write a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef loss_amount_on_sale_on_sale_on_sale(actual_cost, sale_amount)\n    \n    # Write a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef loss_amount_on_sale_on_sale_on_sale(actual_cost, sale_amount)\n    \n    # Write a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef loss_amount_on_sale_on_sale_on_sale(actual_cost, sale_amount)\n    \n    # Write a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef loss_amount_on_sale_on_sale_on_sale(actual_cost, sale_amount)\n    \n    # Write a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef loss_amount_on_sale_on_sale_on_sale(actual_cost, sale_amount)\n    \n    # Write a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef loss_amount_on_sale_on_sale_on_sale(actual_cost, sale_amount)\n    \n    # Write a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef loss_amount_on_sale_on_sale_on_sale(actual_cost, sale_amount)\n    \n    # Write a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef loss_amount\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_loss_amount",
            "candidate = method(:loss_amount)",
            "assert_equal(0, candidate.call(1500, 1200))",
            "assert_equal(100, candidate.call(100, 200))",
            "assert_equal(3000, candidate.call(2000, 5000))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "453",
        "title": "sumofFactors",
        "text": "Write a rbthon function to find the sum of even factors of a number.",
        "code": "def sumofFactors(n)\n    return sum(factors(n))\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sumofFactors",
            "candidate = method(:sumofFactors)",
            "assert_equal(26, candidate.call(18))",
            "assert_equal(48, candidate.call(30))",
            "assert_equal(8, candidate.call(6))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "454",
        "title": "text_match_wordz",
        "text": "Write a function that matches a word containing 'z'.",
        "code": "def text_match_wordz(text)\n    return text.find(text_match_wordz)!= -1\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_text_match_wordz",
            "candidate = method(:text_match_wordz)",
            "assert_equal(true, candidate.call(\"pythonz.\"))",
            "assert_equal(true, candidate.call(\"xyz.\"))",
            "assert_equal(false, candidate.call(\"  lang  .\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "455",
        "title": "check_monthnumb_number",
        "text": "Write a function to check whether the given month number contains 31 days or not.",
        "code": "def check_monthnumb_number(monthnum2)\n    \n    # Check if the given month number is 31 days or not.\n    if monthnum2 == 31:\n        return True\n    else:\n        return False\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_check_monthnumb_number",
            "candidate = method(:check_monthnumb_number)",
            "assert_equal(true, candidate.call(5))",
            "assert_equal(false, candidate.call(2))",
            "assert_equal(false, candidate.call(6))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "456",
        "title": "reverse_string_list",
        "text": "Write a function to reverse each string in a given array of string values.",
        "code": "def reverse_string_list(stringlist)\n    # Reverse each string in a given list of strings.\n    for string in stringlist:\n        print(string)\n        print(reverse(string))\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_reverse_string_list",
            "candidate = method(:reverse_string_list)",
            "assert_equal([\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"], candidate.call([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]))",
            "assert_equal([\"nhoj\", \"lama\", \"leoj\", \"egroeg\"], candidate.call([\"john\", \"amal\", \"joel\", \"george\"]))",
            "assert_equal([\"kcaj\", \"nhoj\", \"yram\"], candidate.call([\"jack\", \"john\", \"mary\"]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "457",
        "title": "Find_Min",
        "text": "Write a rbthon function to find the subarray having minimum length.",
        "code": "def Find_Min(lst)\n    for i in range(len(lst)):\n        if lst[i] < lst[i+1]:\n            lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_Find_Min",
            "candidate = method(:Find_Min)",
            "assert_equal([1], candidate.call([[1], [1, 2], [1, 2, 3]]))",
            "assert_equal([1, 1], candidate.call([[1, 1], [1, 1, 1], [1, 2, 7, 8]]))",
            "assert_equal([\"x\"], candidate.call([[\"x\"], [\"x\", \"y\"], [\"x\", \"y\", \"z\"]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "458",
        "title": "rectangle_area",
        "text": "Write a function to find the area of a rectangle.",
        "code": "def rectangle_area(l, b)\n    return (l.x - b.x) * (l.y - b.y)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_rectangle_area",
            "candidate = method(:rectangle_area)",
            "assert_equal(200, candidate.call(10, 20))",
            "assert_equal(50, candidate.call(10, 5))",
            "assert_equal(8, candidate.call(4, 2))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "459",
        "title": "remove_uppercase",
        "text": "Write a function to remove uppercase substrings from a given string.",
        "code": "def remove_uppercase(str1)\n    # Remove uppercase substrings from a given string.\n    return str1.replace(' ', '').replace('-', '').replace('_', '').replace('.', '').replace(' ', '').replace('-', '').replace('_', '').replace('.', '').replace(' ', '').replace('-', '').replace('_', '').replace('.', '').replace(' ', '').replace('-', '').replace('_', '').replace('.', '').replace(' ', '').replace('-', '').replace('_', '').replace('.', '').replace(' ', '').replace('-', '').replace('_', '').replace('.', '').replace(' ', '').replace('-', '').replace('_', '').replace('.', '').replace(' ', '').replace('-', '').replace('_', '').replace('.', '').replace(' ', '').replace('-', '').replace('_', '').replace('.', '').replace(' ', '').replace('-', '').replace('_', '').replace('.', '').replace(' ', '').replace('-', '').replace('_', '').replace('.', '').replace(' ', '').replace('-', '').replace('_', '').replace('.', '').replace(' ', '').replace('-', '').replace('_', '').replace('.', '').replace(' ', '').replace('-', '').replace('_', '').replace('.', '').replace(' ', '').replace('-', '').replace('_', '').replace('.', '').replace(' ', '').replace('-', '').replace('_', '').replace('.', '').replace(' ', '').replace('-', '').replace('_', '').replace('.', '').replace(' ', '').replace('-', '').replace('_', '').replace('.', '').replace(' ', '').replace('-', '').replace('_', '').replace('.', '').replace(' ', '').replace('-', '').replace('_', '').replace('.', '').replace(' ', '').\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_remove_uppercase",
            "candidate = method(:remove_uppercase)",
            "assert_equal(\"cstyoravoitshos\", candidate.call(\"cAstyoUrFavoRitETVshoWs\"))",
            "assert_equal(\"wtchheinerntrdo\", candidate.call(\"wAtchTheinTernEtrAdIo\"))",
            "assert_equal(\"oiceachndreomendaion\", candidate.call(\"VoicESeaRchAndreComMendaTionS\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "460",
        "title": "Extract",
        "text": "Write a rbthon function to get the first element of each subarray.",
        "code": "def Extract(lst)\n    \"\"\"\n    return [lst[0]]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_Extract",
            "candidate = method(:Extract)",
            "assert_equal([1, 3, 6], candidate.call([[1, 2], [3, 4, 5], [6, 7, 8, 9]]))",
            "assert_equal([1, 4], candidate.call([[1, 2, 3], [4, 5]]))",
            "assert_equal([9, 1], candidate.call([[9, 8, 1], [1, 2]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "461",
        "title": "upper_ctr",
        "text": "Write a rbthon function to count the upper case characters in a given string.",
        "code": "def upper_ctr(str)\n    return str.upper()\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_upper_ctr",
            "candidate = method(:upper_ctr)",
            "assert_equal(1, candidate.call(\"PYthon\"))",
            "assert_equal(1, candidate.call(\"BigData\"))",
            "assert_equal(0, candidate.call(\"program\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "462",
        "title": "combinations_list",
        "text": "Write a function to find all possible combinations of the elements of a given array.",
        "code": "def combinations_list(list1)\n    # Write a function to find all possible combinations of the elements of a given array.\n    # list1 is a list of integers.\n    # Return a list of lists of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1 is a list of integers.\n    # list1\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_combinations_list",
            "candidate = method(:combinations_list)",
            "assert_equal([[], [\"orange\"], [\"red\"], [\"red\", \"orange\"], [\"green\"], [\"green\", \"orange\"], [\"green\", \"red\"], [\"green\", \"red\", \"orange\"], [\"blue\"], [\"blue\", \"orange\"], [\"blue\", \"red\"], [\"blue\", \"red\", \"orange\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"orange\"], [\"blue\", \"green\", \"red\"], [\"blue\", \"green\", \"red\", \"orange\"]], candidate.call([\"orange\", \"red\", \"green\", \"blue\"]))",
            "assert_equal([[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"blue\"], [\"blue\", \"red\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"red\"], [\"white\"], [\"white\", \"red\"], [\"white\", \"green\"], [\"white\", \"green\", \"red\"], [\"white\", \"blue\"], [\"white\", \"blue\", \"red\"], [\"white\", \"blue\", \"green\"], [\"white\", \"blue\", \"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"black\", \"blue\"], [\"black\", \"blue\", \"red\"], [\"black\", \"blue\", \"green\"], [\"black\", \"blue\", \"green\", \"red\"], [\"black\", \"white\"], [\"black\", \"white\", \"red\"], [\"black\", \"white\", \"green\"], [\"black\", \"white\", \"green\", \"red\"], [\"black\", \"white\", \"blue\"], [\"black\", \"white\", \"blue\", \"red\"], [\"black\", \"white\", \"blue\", \"green\"], [\"black\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"blue\"], [\"orange\", \"blue\", \"red\"], [\"orange\", \"blue\", \"green\"], [\"orange\", \"blue\", \"green\", \"red\"], [\"orange\", \"white\"], [\"orange\", \"white\", \"red\"], [\"orange\", \"white\", \"green\"], [\"orange\", \"white\", \"green\", \"red\"], [\"orange\", \"white\", \"blue\"], [\"orange\", \"white\", \"blue\", \"red\"], [\"orange\", \"white\", \"blue\", \"green\"], [\"orange\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"], [\"orange\", \"black\", \"blue\"], [\"orange\", \"black\", \"blue\", \"red\"], [\"orange\", \"black\", \"blue\", \"green\"], [\"orange\", \"black\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\", \"white\"], [\"orange\", \"black\", \"white\", \"red\"], [\"orange\", \"black\", \"white\", \"green\"], [\"orange\", \"black\", \"white\", \"green\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\"], [\"orange\", \"black\", \"white\", \"blue\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"]], candidate.call([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"]))",
            "assert_equal([[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"]], candidate.call([\"red\", \"green\", \"black\", \"orange\"]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "463",
        "title": "max_subarray_product",
        "text": "Write a function to find the maximum product subarray of the given array.",
        "code": "def max_subarray_product(arr)\n    \"\"\"\n    Returns the maximum product of the given array.\n    \"\"\"\n    return reduce(lambda x, y: x * y, arr)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_max_subarray_product",
            "candidate = method(:max_subarray_product)",
            "assert_equal(112, candidate.call([1, -2, -3, 0, 7, -8, -2]))",
            "assert_equal(180, candidate.call([6, -3, -10, 0, 2]))",
            "assert_equal(80, candidate.call([-2, -40, 0, -2, -3]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "464",
        "title": "check_value",
        "text": "Write a function to check if all values are same in a hash.",
        "code": "def check_value(dict, n)\n    for key in dict.keys():\n        if key!= n:\n            print(\"ERROR: Value for key %s is not the same as %s\" % (key, n))\n            return False\n    return True\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_check_value",
            "candidate = method(:check_value)",
            "assert_equal(false, candidate.call({\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12}, 10))",
            "assert_equal(true, candidate.call({\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12}, 12))",
            "assert_equal(false, candidate.call({\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12}, 5))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "465",
        "title": "drop_empty",
        "text": "Write a function to drop empty items from a given hash.",
        "code": "def drop_empty(dict1)\n    for key in dict1:\n        if dict1[key] == '':\n            del dict1[key]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_drop_empty",
            "candidate = method(:drop_empty)",
            "assert_equal({\"c1\" => \"Red\", \"c2\" => \"Green\"}, candidate.call({\"c1\" => \"Red\", \"c2\" => \"Green\", \"c3\" => nil}))",
            "assert_equal({\"c1\" => \"Red\"}, candidate.call({\"c1\" => \"Red\", \"c2\" => nil, \"c3\" => nil}))",
            "assert_equal({\"c2\" => \"Green\"}, candidate.call({\"c1\" => nil, \"c2\" => \"Green\", \"c3\" => nil}))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "468",
        "title": "max_product",
        "text": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "code": "def max_product(arr)\n    # Write your code here.\n    max_product = 0\n    for i in range(len(arr)):\n        max_product = max(max_product, arr[i] * arr[i + 1])\n    return max_product\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_max_product",
            "candidate = method(:max_product)",
            "assert_equal(3000, candidate.call([3, 100, 4, 5, 150, 6]))",
            "assert_equal(50265600, candidate.call([4, 42, 55, 68, 80]))",
            "assert_equal(2460, candidate.call([10, 22, 9, 33, 21, 50, 41, 60]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "470",
        "title": "add_pairwise",
        "text": "Write a function to find the pairwise addition of the neighboring elements of the given array.",
        "code": "def add_pairwise(test_tup)\n    # Get the first element of the test_tup tuple.\n    first = test_tup[0]\n    # Get the second element of the test_tup tuple.\n    second = test_tup[1]\n    # Get the third element of the test_tup tuple.\n    third = test_tup[2]\n    # Get the fourth element of the test_tup tuple.\n    fourth = test_tup[3]\n    # Get the fifth element of the test_tup tuple.\n    fifth = test_tup[4]\n    # Get the sixth element of the test_tup tuple.\n    sixth = test_tup[5]\n    # Get the seventh element of the test_tup tuple.\n    seventh = test_tup[6]\n    # Get the eighth element of the test_tup tuple.\n    eighth = test_tup[7]\n    # Get the ninth element of the test_tup tuple.\n    ninth = test_tup[8]\n    # Get the tenth element of the test_tup tuple.\n    tenth = test_tup[9]\n    # Get the eleventh element of the test_tup tuple.\n    eleventh = test_tup[10]\n    # Get the twelfth element of the test_tup tuple.\n    twelfth = test_tup[11]\n    # Get the thirteenth element of the test_tup tuple.\n    thirteenth = test_tup[12]\n    # Get the fourteenth element of the test_tup tuple.\n    fourteenth = test_tup[13]\n    # Get the fiveteenth element of the test_tup tuple.\n    fiveteenth = test_tup[14]\n    # Get the sixteenth element of the test_tup tuple.\n    sixteenth = test_tup[15]\n    # Get the seventeenth element of the test_tup tuple.\n    seventeenth = test_tup[16]\n    # Get the eighteenth element of the test_tup tuple.\n    \n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_add_pairwise",
            "candidate = method(:add_pairwise)",
            "assert_equal([6, 12, 15, 18], candidate.call([1, 5, 7, 8, 10]))",
            "assert_equal([8, 14, 17, 20], candidate.call([2, 6, 8, 9, 11]))",
            "assert_equal([10, 16, 19, 22], candidate.call([3, 7, 9, 10, 12]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "471",
        "title": "find_remainder",
        "text": "Write a rbthon function to find the product of the array multiplication modulo n.",
        "code": "def find_remainder(arr, n)\n    # Find the product of the array multiplication modulo n.\n    product = 0\n    for i in range(len(arr)):\n        product = product * arr[i] % n\n    return product\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_remainder",
            "candidate = method(:find_remainder)",
            "assert_equal(9, candidate.call([100, 10, 5, 25, 35, 14], 11))",
            "assert_equal(0, candidate.call([1, 1, 1], 1))",
            "assert_equal(0, candidate.call([1, 2, 1], 2))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "472",
        "title": "check_Consecutive",
        "text": "Write a rbthon function to check whether the given array contains consecutive numbers or not.",
        "code": "def check_Consecutive(l)\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    if len(l) == 2:\n        return l[0] == l[1]\n    return False\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_check_Consecutive",
            "candidate = method(:check_Consecutive)",
            "assert_equal(true, candidate.call([1, 2, 3, 4, 5]))",
            "assert_equal(false, candidate.call([1, 2, 3, 5, 6]))",
            "assert_equal(false, candidate.call([1, 2, 1]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "474",
        "title": "replace_char",
        "text": "Write a function to replace characters in a string.",
        "code": "def replace_char(str1, ch, newch)\n    # Replace all occurrences of ch in str1 with newch.\n    return str1.replace(ch, newch)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_replace_char",
            "candidate = method(:replace_char)",
            "assert_equal(\"pollgon\", candidate.call(\"polygon\", \"y\", \"l\"))",
            "assert_equal(\"aharaater\", candidate.call(\"character\", \"c\", \"a\"))",
            "assert_equal(\"python\", candidate.call(\"python\", \"l\", \"a\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "475",
        "title": "sort_counter",
        "text": "Write a function to sort a hash by value.",
        "code": "def sort_counter(dict1)\n    # Sort the keys of the dictionary by value.\n    for key in sorted(dict1.keys()):\n        dict1[key] = dict1[key]\n    return dict1\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sort_counter",
            "candidate = method(:sort_counter)",
            "assert_equal([[\"Chemistry\", 87], [\"Physics\", 83], [\"Math\", 81]], candidate.call({\"Math\" => 81, \"Physics\" => 83, \"Chemistry\" => 87}))",
            "assert_equal([[\"Math\", 400], [\"Physics\", 300], [\"Chemistry\", 250]], candidate.call({\"Math\" => 400, \"Physics\" => 300, \"Chemistry\" => 250}))",
            "assert_equal([[\"Chemistry\", 1250], [\"Physics\", 1000], [\"Math\", 900]], candidate.call({\"Math\" => 900, \"Physics\" => 1000, \"Chemistry\" => 1250}))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "476",
        "title": "big_sum",
        "text": "Write a rbthon function to find the sum of the largest and smallest value in a given array.",
        "code": "def big_sum(nums)\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_big_sum",
            "candidate = method(:big_sum)",
            "assert_equal(4, candidate.call([1, 2, 3]))",
            "assert_equal(3, candidate.call([-1, 2, 3, 4]))",
            "assert_equal(8, candidate.call([2, 3, 6]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "477",
        "title": "is_lower",
        "text": "Write a rbthon function to convert the given string to lower case.",
        "code": "def is_lower(string)\n    return string.lower() == string\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_is_lower",
            "candidate = method(:is_lower)",
            "assert_equal(\"invalid\", candidate.call(\"InValid\"))",
            "assert_equal(\"true\", candidate.call(\"TruE\"))",
            "assert_equal(\"sentence\", candidate.call(\"SenTenCE\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "478",
        "title": "remove_lowercase",
        "text": "Write a function to remove lowercase substrings from a given string.",
        "code": "def remove_lowercase(str1)\n    # Remove lowercase substrings from a given string.\n    #\n    # str1: The string to be modified.\n    #\n    # Returns: The modified string.\n    #\n    # Example:\n    #\n    # str1 = \"Hello World\"\n    #\n    # Returns: \"Hello World\".\n    #\n    # Note:\n    #\n    # 1. The function should return a string.\n    #\n    # 2. The function should return a string.\n    #\n    # 3. The function should return a string.\n    #\n    # 4. The function should return a string.\n    #\n    # 5. The function should return a string.\n    #\n    # 6. The function should return a string.\n    #\n    # 7. The function should return a string.\n    #\n    # 8. The function should return a string.\n    #\n    # 9. The function should return a string.\n    #\n    # 10. The function should return a string.\n    #\n    # 11. The function should return a string.\n    #\n    # 12. The function should return a string.\n    #\n    # 13. The function should return a string.\n    #\n    # 14. The function should return a string.\n    #\n    # 15. The function should return a string.\n    #\n    # 16. The function should return a string.\n    #\n    # 17. The function should return a string.\n    #\n    # 18. The function should return a string.\n    #\n    # 19. The function should return a string.\n    #\n    # 20. The function should return a string.\n    #\n    # 21. The function should return a string.\n    #\n    # 22. The function should return a string.\n    #\n    # 23. The function should return a string.\n    #\n    # 24. The function should return a string.\n    #\n    # 25. The function should return a string.\n    #\n    # 26. The function should return a string.\n    #\n    # 27. The function should return a string.\n\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_remove_lowercase",
            "candidate = method(:remove_lowercase)",
            "assert_equal(\"PYTH\", candidate.call(\"PYTHon\"))",
            "assert_equal(\"FID\", candidate.call(\"FInD\"))",
            "assert_equal(\"STRG\", candidate.call(\"STRinG\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "479",
        "title": "first_Digit",
        "text": "Write a rbthon function to find the first digit of a given number.",
        "code": "def first_Digit(n)\n    \"\"\"\n    return int(n) - 1\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_first_Digit",
            "candidate = method(:first_Digit)",
            "assert_equal(1, candidate.call(123))",
            "assert_equal(4, candidate.call(456))",
            "assert_equal(1, candidate.call(12))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "4",
        "title": "heap_queue_largest",
        "text": "Write a function to find the n largest integers from a given array of numbers, returned in descending order.",
        "code": "def heap_queue_largest(nums, n)\n    \n    # Initialize the heap.\n    heap = []\n    \n    # Push the first element of the heap to the heap.\n    heap.append(nums[0])\n    \n    # Iterate through the heap until the heap is empty.\n    while len(heap) > 0:\n        \n        # Get the smallest element from the heap.\n        min_element = heap.pop()\n        \n        # Add the smallest element to the heap.\n        heap.append(min_element)\n        \n        # Iterate through the heap until the heap is empty.\n        while len(heap) > 0:\n            \n            # Get the largest element from the heap.\n            largest_element = heap.pop()\n            \n            # Compare the largest element with the smallest element.\n            if largest_element > min_element:\n                \n                # Swap the two elements.\n                heap.insert(0, largest_element)\n                heap.insert(0, min_element)\n                \n                # Update the heap.\n                heap.append(largest_element)\n                \n            else:\n                \n                # Swap the two elements.\n                heap.insert(0, min_element)\n                heap.insert(0, largest_element)\n                \n                # Update the heap.\n                heap.append(largest_element)\n                \n        \n    # Return the largest element.\n    return heap.pop()\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_heap_queue_largest",
            "candidate = method(:heap_queue_largest)",
            "assert_equal([85, 75, 65], candidate.call([25, 35, 22, 85, 14, 65, 75, 22, 58], 3))",
            "assert_equal([85, 75], candidate.call([25, 35, 22, 85, 14, 65, 75, 22, 58], 2))",
            "assert_equal([85, 75, 65, 58, 35], candidate.call([25, 35, 22, 85, 14, 65, 75, 22, 58], 5))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "554",
        "title": "Split",
        "text": "Write a rbthon function which takes an array of integers and only returns the odd ones.",
        "code": "def Split(list)\n    # Split the list into an array of lists.\n    # The first list is the list of integers, the second is the list of strings.\n    # The result is a list of lists.\n    # The first list is the list of integers, the second is the list of strings.\n    # The result is a list of lists.\n    # The first list is the list of integers, the second is the list of strings.\n    # The result is a list of lists.\n    # The first list is the list of integers, the second is the list of strings.\n    # The result is a list of lists.\n    # The first list is the list of integers, the second is the list of strings.\n    # The result is a list of lists.\n    # The first list is the list of integers, the second is the list of strings.\n    # The result is a list of lists.\n    # The first list is the list of integers, the second is the list of strings.\n    # The result is a list of lists.\n    # The first list is the list of integers, the second is the list of strings.\n    # The result is a list of lists.\n    # The first list is the list of integers, the second is the list of strings.\n    # The result is a list of lists.\n    # The first list is the list of integers, the second is the list of strings.\n    # The result is a list of lists.\n    # The first list is the list of integers, the second is the list of strings.\n    # The result is a list of lists.\n    # The first list is the list of integers, the second is the list of strings.\n    # The result is a list of lists.\n    # The first list is the list of integers, the second is the list of strings.\n    # The result is a list of lists.\n    # The first list is the list of integers, the second is the list of strings.\n    # The result is a list of lists.\n    # The first list is the list of integers, the second is the list of strings.\n    # The result is a list of lists.\n    # The first list is the\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_Split",
            "candidate = method(:Split)",
            "assert_equal([1, 3, 5], candidate.call([1, 2, 3, 4, 5, 6]))",
            "assert_equal([11, 13], candidate.call([10, 11, 12, 13]))",
            "assert_equal([7, 9, 1], candidate.call([7, 8, 9, 1]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "555",
        "title": "difference",
        "text": "Write a rbthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "code": "def difference(n)\n    \n    # Write a rbthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef difference_sum(n)\n    \n    # Write a rbthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef difference_sum_sum(n)\n    \n    # Write a rbthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef difference_sum_sum_sum(n)\n    \n    # Write a rbthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef difference_sum_sum_sum_sum(n)\n    \n    # Write a rbthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef difference_sum_sum_sum_sum_sum(n)\n    \n    # Write a rbthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef difference_sum_sum_sum_sum_sum_sum(n)\n    \n    # Write a rbthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef difference_sum_sum_sum_sum_sum_sum(n)\n    \n    # Write a rbthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef difference_sum_sum_sum_sum_sum_sum(n)\n    \n    # Write a rbthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef difference_sum_sum_sum_sum_sum_sum(n)\n    \n    # Write a r\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_difference",
            "candidate = method(:difference)",
            "assert_equal(30, candidate.call(3))",
            "assert_equal(210, candidate.call(5))",
            "assert_equal(6, candidate.call(2))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "556",
        "title": "find_Odd_Pair",
        "text": "Write a rbthon function to count the number of pairs whose xor value is odd.",
        "code": "def find_Odd_Pair(a, n)\n    # a is a list of integers\n    # n is the number of pairs\n    # return the number of pairs whose xor value is odd\n    return len(set(a)) % 2 == 1\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_Odd_Pair",
            "candidate = method(:find_Odd_Pair)",
            "assert_equal(6, candidate.call([5, 4, 7, 2, 1], 5))",
            "assert_equal(12, candidate.call([7, 2, 8, 1, 0, 5, 11], 7))",
            "assert_equal(2, candidate.call([1, 2, 3], 3))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "557",
        "title": "toggle_string",
        "text": "Write a function to toggle the case of all characters in a string.",
        "code": "def toggle_string(string)\n    \"\"\"\n    string = string.lower()\n    for char in string:\n        if char =='':\n            return True\n        elif char == '_':\n            return True\n        elif char == '-':\n            return True\n        elif char == '.':\n            return True\n        elif char == '+':\n            return True\n        elif char == '?':\n            return True\n        elif char == '*':\n            return True\n        elif char == '|':\n            return True\n        elif char == '~':\n            return True\n        elif char == '^':\n            return True\n        elif char == '$':\n            return True\n        elif char == '{':\n            return True\n        elif char == '}':\n            return True\n        elif char == '|':\n            return True\n        elif char == '^':\n            return True\n        elif char == '$':\n            return True\n        elif char == '{':\n            return True\n        elif char == '}':\n            return True\n        elif char == '|':\n            return True\n        elif char == '^':\n            return True\n        elif char == '$':\n            return True\n        elif char == '{':\n            return True\n        elif char == '}':\n            return True\n        elif char == '|':\n            return True\n        elif char == '^':\n            return True\n        elif char == '$':\n            return True\n        elif char == '{':\n            return True\n        elif char == '}':\n            return True\n        elif char == '|':\n            return True\n        elif char == '^':\n            return True\n        elif char == '$':\n            return True\n        elif char == '{':\n            return True\n        elif char == '}':\n            return True\n        elif char == '|':\n            return True\n        elif char == '^':\n            return True\n        elif char == '$':\n            return True\n        elif\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_toggle_string",
            "candidate = method(:toggle_string)",
            "assert_equal(\"pYTHON\", candidate.call(\"Python\"))",
            "assert_equal(\"pANGRAM\", candidate.call(\"Pangram\"))",
            "assert_equal(\"liTTle\", candidate.call(\"LIttLE\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "558",
        "title": "digit_distance_nums",
        "text": "Write a rbthon function to find the sum of the per-digit difference between two integers.",
        "code": "def digit_distance_nums(n1, n2)\n    return sum(abs(n1 - n2))\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_digit_distance_nums",
            "candidate = method(:digit_distance_nums)",
            "assert_equal(1, candidate.call(1, 2))",
            "assert_equal(6, candidate.call(23, 56))",
            "assert_equal(7, candidate.call(123, 256))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "559",
        "title": "max_sub_array_sum",
        "text": "Write a function to find the sum of the largest contiguous subarray in the given array.",
        "code": "def max_sub_array_sum(a, size)\n    # Write a function to find the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given array.\n    # The function should return the sum of the largest contiguous subarray in the given\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_max_sub_array_sum",
            "candidate = method(:max_sub_array_sum)",
            "assert_equal(7, candidate.call([-2, -3, 4, -1, -2, 1, 5, -3], 8))",
            "assert_equal(8, candidate.call([-3, -4, 5, -2, -3, 2, 6, -4], 8))",
            "assert_equal(10, candidate.call([-4, -5, 6, -3, -4, 3, 7, -5], 8))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "560",
        "title": "union_elements",
        "text": "Write a function to find the union of the elements of two given arrays and output them in sorted order.",
        "code": "def union_elements(test_tup1, test_tup2)\n    # test_tup1 is a tuple of two elements\n    # test_tup2 is a tuple of two elements\n    # return the union of the elements of test_tup1 and test_tup2\n    return test_tup1[0] + test_tup2[0]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_union_elements",
            "candidate = method(:union_elements)",
            "assert_equal([3, 4, 5, 6, 7, 10], candidate.call([3, 4, 5, 6], [5, 7, 4, 10]))",
            "assert_equal([1, 2, 3, 4, 5, 6], candidate.call([1, 2, 3, 4], [3, 4, 5, 6]))",
            "assert_equal([11, 12, 13, 14, 15, 16, 17], candidate.call([11, 12, 13, 14], [13, 15, 16, 17]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "562",
        "title": "Find_Max_Length",
        "text": "Write a rbthon function to find the length of the longest subarrays.",
        "code": "def Find_Max_Length(lst)\n    \"\"\"\n    Returns the longest subarray of lst.\n    \"\"\"\n    return max(lst)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_Find_Max_Length",
            "candidate = method(:Find_Max_Length)",
            "assert_equal(4, candidate.call([[1], [1, 4], [5, 6, 7, 8]]))",
            "assert_equal(3, candidate.call([[0, 1], [2, 2], [3, 2, 1]]))",
            "assert_equal(5, candidate.call([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "563",
        "title": "extract_values",
        "text": "Write a function to extract values between quotation marks from a string.",
        "code": "def extract_values(text)\n    \"\"\"\n    text = text.replace(\"'\", \"\")\n    text = text.replace('\"', \"\")\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace('\"', '')\n    text = text.replace\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_extract_values",
            "candidate = method(:extract_values)",
            "assert_equal([\"Python\", \"PHP\", \"Java\"], candidate.call(\"\"Python\", \"PHP\", \"Java\"\"))",
            "assert_equal([\"python\", \"program\", \"language\"], candidate.call(\"\"python\",\"program\",\"language\"\"))",
            "assert_equal([\"red\", \"blue\", \"green\", \"yellow\"], candidate.call(\"\"red\",\"blue\",\"green\",\"yellow\"\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "564",
        "title": "count_Pairs",
        "text": "Write a rbthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "code": "def count_Pairs(arr, n)\n    # Write a rbthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\n    # The function returns the number of pairs where the elements are equal.\n    # The function returns the number of pairs where the elements are not equal.\n    # The function returns the number of pairs where the elements are equal.\n    # The function returns the number of pairs where the elements are not equal.\n    # The function returns the number of pairs where the elements are equal.\n    # The function returns the number of pairs where the elements are not equal.\n    # The function returns the number of pairs where the elements are equal.\n    # The function returns the number of pairs where the elements are not equal.\n    # The function returns the number of pairs where the elements are equal.\n    # The function returns the number of pairs where the elements are not equal.\n    # The function returns the number of pairs where the elements are equal.\n    # The function returns the number of pairs where the elements are not equal.\n    # The function returns the number of pairs where the elements are equal.\n    # The function returns the number of pairs where the elements are not equal.\n    # The function returns the number of pairs where the elements are equal.\n    # The function returns the number of pairs where the elements are not equal.\n    # The function returns the number of pairs where the elements are equal.\n    # The function returns the number of pairs where the elements are not equal.\n    # The function returns the number of pairs where the elements are equal.\n    # The function returns the number of pairs where the elements are not equal.\n    # The function returns the number of pairs where the elements are equal.\n    # The function returns the number of pairs where the elements are not equal.\n    # The function returns the number of pairs where the elements are equal.\n    # The function returns the number of pairs where the elements are not equal.\n    # The function returns the number of pairs where the elements are equal.\n    # The function returns the number of pairs where the elements are not equal.\n    # The function returns the number of pairs where the\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count_Pairs",
            "candidate = method(:count_Pairs)",
            "assert_equal(2, candidate.call([1, 2, 1], 3))",
            "assert_equal(0, candidate.call([1, 1, 1, 1], 4))",
            "assert_equal(10, candidate.call([1, 2, 3, 4, 5], 5))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "565",
        "title": "split",
        "text": "Write a rbthon function to split a string into characters.",
        "code": "def split(word)\n    \"\"\"\n    return word.split()\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_split",
            "candidate = method(:split)",
            "assert_equal([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], candidate.call(\"python\"))",
            "assert_equal([\"N\", \"a\", \"m\", \"e\"], candidate.call(\"Name\"))",
            "assert_equal([\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"], candidate.call(\"program\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "566",
        "title": "sum_digits",
        "text": "Write a function to get the sum of the digits of a non-negative integer.",
        "code": "def sum_digits(n)\n    return sum(map(int, str(n)))\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sum_digits",
            "candidate = method(:sum_digits)",
            "assert_equal(12, candidate.call(345))",
            "assert_equal(3, candidate.call(12))",
            "assert_equal(16, candidate.call(97))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "567",
        "title": "issort_list",
        "text": "Write a function to check whether a specified array is sorted or not.",
        "code": "def issort_list(list1)\n    \"\"\"\n    Check whether a list is sorted or not.\n    \"\"\"\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_issort_list",
            "candidate = method(:issort_list)",
            "assert_equal(true, candidate.call([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]))",
            "assert_equal(false, candidate.call([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]))",
            "assert_equal(false, candidate.call([1, 2, 4, 6, 8, 10, 15, 14, 20]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "568",
        "title": "empty_list",
        "text": "Write a function to create an array of N empty dictionaries.",
        "code": "def empty_list(length)\n    \n    # Create an array of N empty dictionaries.\n    array = []\n    \n    # Create an array of N empty dictionaries.\n    for i in range(length):\n        array.append(dict())\n    \n    # Return the array.\n    return array\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_empty_list",
            "candidate = method(:empty_list)",
            "assert_equal([{}, {}, {}, {}, {}], candidate.call(5))",
            "assert_equal([{}, {}, {}, {}, {}, {}], candidate.call(6))",
            "assert_equal([{}, {}, {}, {}, {}, {}, {}], candidate.call(7))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "569",
        "title": "sort_sublists",
        "text": "Write a function to sort each subarray of strings in a given array of arrays.",
        "code": "def sort_sublists(list1)\n    # Sort the sublists of the given list.\n    # Return the sorted list.\n    return sorted(list1)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sort_sublists",
            "candidate = method(:sort_sublists)",
            "assert_equal([[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]], candidate.call([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]))",
            "assert_equal([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]], candidate.call([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]))",
            "assert_equal([[\"a\", \"b\"], [\"c\", \"d\"], [\"g\", \"h\"], [\"e\", \"f\"]], candidate.call([[\"a\", \"b\"], [\"d\", \"c\"], [\"g\", \"h\"], [\"f\", \"e\"]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "56",
        "title": "checks",
        "text": "Write a rbthon function to check if a given number is one less than twice its reverse.",
        "code": "def checks(n)\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_checks",
            "candidate = method(:checks)",
            "assert_equal(false, candidate.call(70))",
            "assert_equal(false, candidate.call(23))",
            "assert_equal(true, candidate.call(73))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "572",
        "title": "two_unique_nums",
        "text": "Write a rbthon function to remove duplicate numbers from a given number of arrays.",
        "code": "def two_unique_nums(nums)\n    \"\"\"\n    nums = [int(num) for num in nums]\n    nums = [num for num in nums if num not in nums]\n    return nums\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_two_unique_nums",
            "candidate = method(:two_unique_nums)",
            "assert_equal([1, 4, 5], candidate.call([1, 2, 3, 2, 3, 4, 5]))",
            "assert_equal([1, 3, 4, 5], candidate.call([1, 2, 3, 2, 4, 5]))",
            "assert_equal([1, 2, 3, 4, 5], candidate.call([1, 2, 3, 4, 5]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "573",
        "title": "unique_product",
        "text": "Write a rbthon function to calculate the product of the unique numbers in a given array.",
        "code": "def unique_product(list_data)\n    # Create a list of unique numbers in the given array.\n    unique_numbers = []\n    # Iterate through the list of numbers and add them to the list of unique numbers.\n    for number in list_data:\n        unique_numbers.append(number)\n    # Return the product of the unique numbers.\n    return unique_numbers\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_unique_product",
            "candidate = method(:unique_product)",
            "assert_equal(720000000, candidate.call([10, 20, 30, 40, 20, 50, 60, 40]))",
            "assert_equal(6, candidate.call([1, 2, 3, 1]))",
            "assert_equal(0, candidate.call([7, 8, 9, 0, 1, 1]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "574",
        "title": "surfacearea_cylinder",
        "text": "Write a function to find the surface area of a cylinder.",
        "code": "def surfacearea_cylinder(r, h)\n    \"\"\"\n    Returns the surface area of a cylinder.\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_surfacearea_cylinder",
            "candidate = method(:surfacearea_cylinder)",
            "assert_equal(942.45, candidate.call(10, 5))",
            "assert_equal(226.18800000000002, candidate.call(4, 5))",
            "assert_equal(351.848, candidate.call(4, 10))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "576",
        "title": "is_Sub_Array",
        "text": "Write a rbthon function to check whether an array is subarray of another or not.",
        "code": "def is_Sub_Array(a, b)\n    if a.__class__ is not b.__class__:\n        return False\n    if a.__class__ is list:\n        return is_Sub_Array(a[0], b[0])\n    if a.__class__ is tuple:\n        return is_Sub_Array(a[0], b[0])\n    if a.__class__ is dict:\n        return is_Sub_Array(a[0], b[0])\n    return False\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_is_Sub_Array",
            "candidate = method(:is_Sub_Array)",
            "assert_equal(false, candidate.call([1, 4, 3, 5], [1, 2]))",
            "assert_equal(true, candidate.call([1, 2, 1], [1, 2, 1]))",
            "assert_equal(false, candidate.call([1, 0, 2, 2], [2, 2, 0]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "577",
        "title": "last_Digit_Factorial",
        "text": "Write a rbthon function to find the last digit in factorial of a given number.",
        "code": "def last_Digit_Factorial(n)\n    # Return the last digit of factorial of n.\n    return int(n**(n-1))\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_last_Digit_Factorial",
            "candidate = method(:last_Digit_Factorial)",
            "assert_equal(4, candidate.call(4))",
            "assert_equal(0, candidate.call(21))",
            "assert_equal(0, candidate.call(30))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "578",
        "title": "interleave_lists",
        "text": "Write a function to interleave 3 arrays of the same length into a single flat array.",
        "code": "def interleave_lists(list1, list2, list3)\n    \n    # Write a function to interleave 3 arrays of the same length into a single flat array.\ndef interleave_lists_flat(list1, list2, list3)\n    \n    # Write a function to interleave 3 arrays of the same length into a single flat array.\ndef interleave_lists_flat_flat(list1, list2, list3)\n    \n    # Write a function to interleave 3 arrays of the same length into a single flat array.\ndef interleave_lists_flat_flat_flat(list1, list2, list3)\n    \n    # Write a function to interleave 3 arrays of the same length into a single flat array.\ndef interleave_lists_flat_flat_flat(list1, list2, list3)\n    \n    # Write a function to interleave 3 arrays of the same length into a single flat array.\ndef interleave_lists_flat_flat_flat(list1, list2, list3)\n    \n    # Write a function to interleave 3 arrays of the same length into a single flat array.\ndef interleave_lists_flat_flat_flat(list1, list2, list3)\n    \n    # Write a function to interleave 3 arrays of the same length into a single flat array.\ndef interleave_lists_flat_flat_flat(list1, list2, list3)\n    \n    # Write a function to interleave 3 arrays of the same length into a single flat array.\ndef interleave_lists_flat_flat_flat(list1, list2, list3)\n    \n    # Write a function to interleave 3 arrays of the same length into a single flat array.\ndef interleave_lists_flat_flat_flat(list1, list2, list3)\n    \n    # Write a function to interleave 3 arrays of the same length into a single flat array.\ndef interleave_lists_flat_flat_flat(list1, list2, list3)\n    \n    # Write a function to interleave 3 arrays of the same length into a single flat array.\ndef interleave_lists_flat_flat\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_interleave_lists",
            "candidate = method(:interleave_lists)",
            "assert_equal([1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700], candidate.call([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]))",
            "assert_equal([10, 15, 5, 20, 2, 10], candidate.call([10, 20], [15, 2], [5, 10]))",
            "assert_equal([11, 10, 20, 44, 15, 5], candidate.call([11, 44], [10, 15], [20, 5]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "579",
        "title": "find_dissimilar",
        "text": "Write a function to find the dissimilar elements in the given two arrays.",
        "code": "def find_dissimilar(test_tup1, test_tup2)\n    \"\"\"\n    return np.abs(test_tup1 - test_tup2) < 0.5\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_dissimilar",
            "candidate = method(:find_dissimilar)",
            "assert_equal([3, 6, 7, 10], candidate.call([3, 4, 5, 6], [5, 7, 4, 10]))",
            "assert_equal([1, 4, 7, 9], candidate.call([1, 2, 3, 4], [7, 2, 3, 9]))",
            "assert_equal([34, 36, 11, 25], candidate.call([21, 11, 25, 26], [26, 34, 21, 36]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "57",
        "title": "find_Max_Num",
        "text": "Write a rbthon function to find the largest number that can be formed with the given array of digits.",
        "code": "def find_Max_Num(arr)\n    # Write a rbthon function to find the largest number that can be formed with the given array of digits.\n    # arr is an array of digits.\n    # Return the largest number that can be formed with the given array of digits.\n    #\n    # Example:\n    # arr = [1,2,3,4,5,6,7,8,9]\n    # find_Max_Num(arr) == 9\n    #\n    # Example:\n    # arr = [1,2,3,4,5,6,7,8,9]\n    # find_Max_Num(arr) == 9\n    #\n    # Example:\n    # arr = [1,2,3,4,5,6,7,8,9]\n    # find_Max_Num(arr) == 9\n    #\n    # Example:\n    # arr = [1,2,3,4,5,6,7,8,9]\n    # find_Max_Num(arr) == 9\n    #\n    # Example:\n    # arr = [1,2,3,4,5,6,7,8,9]\n    # find_Max_Num(arr) == 9\n    #\n    # Example:\n    # arr = [1,2,3,4,5,6,7,8,9]\n    # find_Max_Num(arr) == 9\n    #\n    # Example:\n    # arr = [1,2,3,4,5,6,7,8,9]\n    # find_Max_Num(arr) == 9\n    #\n    # Example:\n    # arr = [1,2,3,4,5,6,7,8,9]\n    # find_Max_Num(arr) == 9\n    #\n    # Example:\n    # arr = [1,2,3,4,5,6,7,8,9]\n    # find_Max_Num(arr) == 9\n    #\n    # Example:\n    # arr = [1,2,3\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_Max_Num",
            "candidate = method(:find_Max_Num)",
            "assert_equal(321, candidate.call([1, 2, 3]))",
            "assert_equal(6541, candidate.call([4, 5, 6, 1]))",
            "assert_equal(9321, candidate.call([1, 2, 3, 9]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "580",
        "title": "extract_even",
        "text": "Write a function to remove uneven elements in the nested mixed array.",
        "code": "def extract_even(test_tuple)\n    \"\"\"\n    Remove the even elements from the nested mixed array.\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_extract_even",
            "candidate = method(:extract_even)",
            "assert_equal([4, [6, [2, 4]], 6, 8], candidate.call([4, 5, [7, 6, [2, 4]], 6, 8]))",
            "assert_equal([6, [8, [4, 8]]], candidate.call([5, 6, [8, 7, [4, 8]], 7, 9]))",
            "assert_equal([6, [8, [4, 6]], 8, 10], candidate.call([5, 6, [9, 8, [4, 6]], 8, 10]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "581",
        "title": "surface_Area",
        "text": "Write a rbthon function to find the surface area of a square rbramid with a given base edge and height.",
        "code": "def surface_Area(b, s)\n    # The base edge is the first edge of the square rbron.\n    # The height is the height of the square rbron.\n    # The square rbron is the square rbron with the base edge and height.\n    # The square rbron is the square rbron with the base edge and height.\n    # The square rbron is the square rbron with the base edge and height.\n    # The square rbron is the square rbron with the base edge and height.\n    # The square rbron is the square rbron with the base edge and height.\n    # The square rbron is the square rbron with the base edge and height.\n    # The square rbron is the square rbron with the base edge and height.\n    # The square rbron is the square rbron with the base edge and height.\n    # The square rbron is the square rbron with the base edge and height.\n    # The square rbron is the square rbron with the base edge and height.\n    # The square rbron is the square rbron with the base edge and height.\n    # The square rbron is the square rbron with the base edge and height.\n    # The square rbron is the square rbron with the base edge and height.\n    # The square rbron is the square rbron with the base edge and height.\n    # The square rbron is the square rbron with the base edge and height.\n    # The square rbron is the square rbron with the base edge and height.\n    # The square rbron is the square rbron with the base edge and height.\n    # The square rbron is the square rbron with the base edge and height.\n    # The square rbron is the square rbron with the base edge and height.\n    # The square rbron is the square rbron with the base edge and height.\n    # The square rbron is the square rbron with the base edge and height.\n    \n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_surface_Area",
            "candidate = method(:surface_Area)",
            "assert_equal(33, candidate.call(3, 4))",
            "assert_equal(56, candidate.call(4, 5))",
            "assert_equal(5, candidate.call(1, 2))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "583",
        "title": "catalan_number",
        "text": "Write a function which returns nth catalan number.",
        "code": "def catalan_number(num)\n    return num // 10\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_catalan_number",
            "candidate = method(:catalan_number)",
            "assert_equal(16796, candidate.call(10))",
            "assert_equal(4862, candidate.call(9))",
            "assert_equal(429, candidate.call(7))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "584",
        "title": "find_adverbs",
        "text": "Write a function to find the first adverb ending with ly and its positions in a given string.",
        "code": "def find_adverbs(text)\n    # Find the first adverb ending with ly and its positions in a given string.\n    # Return the position of the first adverb ending with ly.\n    # Return the position of the first adverb ending with ly and its positions in a given string.\n    # Return the position of the first adverb ending with ly and its positions in a given string.\n    # Return the position of the first adverb ending with ly and its positions in a given string.\n    # Return the position of the first adverb ending with ly and its positions in a given string.\n    # Return the position of the first adverb ending with ly and its positions in a given string.\n    # Return the position of the first adverb ending with ly and its positions in a given string.\n    # Return the position of the first adverb ending with ly and its positions in a given string.\n    # Return the position of the first adverb ending with ly and its positions in a given string.\n    # Return the position of the first adverb ending with ly and its positions in a given string.\n    # Return the position of the first adverb ending with ly and its positions in a given string.\n    # Return the position of the first adverb ending with ly and its positions in a given string.\n    # Return the position of the first adverb ending with ly and its positions in a given string.\n    # Return the position of the first adverb ending with ly and its positions in a given string.\n    # Return the position of the first adverb ending with ly and its positions in a given string.\n    # Return the position of the first adverb ending with ly and its positions in a given string.\n    # Return the position of the first adverb ending with ly and its positions in a given string.\n    # Return the position of the first adverb ending with ly and its positions in a given string.\n    # Return the position of the first adverb ending with ly and its positions in a given string.\n    # Return the position of the first adverb ending with ly and its positions in a given string.\n    # Return the position of the first adverb ending with ly and its positions in a given string.\n    # Return the position of the\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_adverbs",
            "candidate = method(:find_adverbs)",
            "assert_equal(\"0-7: Clearly\", candidate.call(\"Clearly, he has no excuse for such behavior.\"))",
            "assert_equal(\"28-36: carefuly\", candidate.call(\"Please handle the situation carefuly\"))",
            "assert_equal(\"18-25: quickly\", candidate.call(\"Complete the task quickly\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "585",
        "title": "expensive_items",
        "text": "Write a function to find the n most expensive items in a given dataset.",
        "code": "def expensive_items(items, n)\n    \n    # Find the n most expensive items in a given dataset.\n    items = items.sort(key=lambda x: x[1])\n    items = items[:n]\n    \n    # Write the items to a file.\n    with open('expensive_items.txt', 'w') as f:\n        f.write('\\n'.join(items))\n    \n    # Write the n most expensive items to a file.\n    with open('expensive_items_n.txt', 'w') as f:\n        f.write('\\n'.join(items[:n]))\n    \n    # Write the n most expensive items to a file.\n    with open('expensive_items_n.txt', 'w') as f:\n        f.write('\\n'.join(items[n:]))\n    \n    # Write the n most expensive items to a file.\n    with open('expensive_items_n.txt', 'w') as f:\n        f.write('\\n'.join(items[:n]))\n    \n    # Write the n most expensive items to a file.\n    with open('expensive_items_n.txt', 'w') as f:\n        f.write('\\n'.join(items[n:]))\n    \n    # Write the n most expensive items to a file.\n    with open('expensive_items_n.txt', 'w') as f:\n        f.write('\\n'.join(items[:n]))\n    \n    # Write the n most expensive items to a file.\n    with open('expensive_items_n.txt', 'w') as f:\n        f.write('\\n'.join(items[n:]))\n    \n    # Write the n most expensive items to a file.\n    with open('expensive_items_n.txt', 'w') as f:\n        f.write('\\n'.join(items[:n]))\n    \n    # Write the n most expensive items to a file.\n    with open('expensive_items_n.txt', 'w') as f:\n        f.write('\\n'.join(items[n\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_expensive_items",
            "candidate = method(:expensive_items)",
            "assert_equal([{\"name\" => \"Item-2\", \"price\" => 555.22}], candidate.call([{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}], 1))",
            "assert_equal([{\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-1\", \"price\" => 101.1}], candidate.call([{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-3\", \"price\" => 45.09}], 2))",
            "assert_equal([{\"name\" => \"Item-2\", \"price\" => 555.22}], candidate.call([{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-3\", \"price\" => 45.09}, {\"name\" => \"Item-4\", \"price\" => 22.75}], 1))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "586",
        "title": "split_Arr",
        "text": "Write a rbthon function to split an array at the nth eelment and add the first part to the end.",
        "code": "def split_Arr(l, n)\n    return [l[i:i+n] for i in range(0, len(l), n)]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_split_Arr",
            "candidate = method(:split_Arr)",
            "assert_equal([5, 6, 52, 36, 12, 10], candidate.call([12, 10, 5, 6, 52, 36], 2))",
            "assert_equal([2, 3, 4, 1], candidate.call([1, 2, 3, 4], 1))",
            "assert_equal([3, 4, 5, 6, 7, 0, 1, 2], candidate.call([0, 1, 2, 3, 4, 5, 6, 7], 3))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "587",
        "title": "list_tuple",
        "text": "Write a function to convert an array to an array.",
        "code": "def list_tuple(listx)\n    # Convert a list to a tuple.\n    return tuple(listx)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_list_tuple",
            "candidate = method(:list_tuple)",
            "assert_equal([5, 10, 7, 4, 15, 3], candidate.call([5, 10, 7, 4, 15, 3]))",
            "assert_equal([2, 4, 5, 6, 2, 3, 4, 4, 7], candidate.call([2, 4, 5, 6, 2, 3, 4, 4, 7]))",
            "assert_equal([58, 44, 56], candidate.call([58, 44, 56]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "588",
        "title": "big_diff",
        "text": "Write a rbthon function to find the difference between largest and smallest value in a given array.",
        "code": "def big_diff(nums)\n    # The function returns the difference between the largest and smallest value in the given array.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    # The function is a wrapper around the function found in the rbthon library.\n    \n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_big_diff",
            "candidate = method(:big_diff)",
            "assert_equal(3, candidate.call([1, 2, 3, 4]))",
            "assert_equal(8, candidate.call([4, 5, 12]))",
            "assert_equal(7, candidate.call([9, 2, 3]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "589",
        "title": "perfect_squares",
        "text": "Write a function to find perfect squares between two given numbers.",
        "code": "def perfect_squares(a, b)\n    # Return the number of perfect squares between a and b.\n    return a*a + b*b\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_perfect_squares",
            "candidate = method(:perfect_squares)",
            "assert_equal([1, 4, 9, 16, 25], candidate.call(1, 30))",
            "assert_equal([64, 81, 100], candidate.call(50, 100))",
            "assert_equal([100, 121, 144, 169, 196], candidate.call(100, 200))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "58",
        "title": "opposite_Signs",
        "text": "Write a rbthon function to check whether the given two integers have opposite sign or not.",
        "code": "def opposite_Signs(x, y)\n    # x and y are two integers\n    # x is positive and y is negative\n    # x is negative and y is positive\n    # x is negative and y is negative\n    # x is negative and y is positive\n    # x is positive and y is negative\n    # x is positive and y is positive\n    # x is positive and y is negative\n    # x is positive and y is positive\n    # x is positive and y is negative\n    # x is positive and y is positive\n    # x is positive and y is negative\n    # x is positive and y is positive\n    # x is positive and y is negative\n    # x is positive and y is positive\n    # x is positive and y is negative\n    # x is positive and y is positive\n    # x is positive and y is negative\n    # x is positive and y is positive\n    # x is positive and y is negative\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n    # x is positive and y is positive\n\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_opposite_Signs",
            "candidate = method(:opposite_Signs)",
            "assert_equal(true, candidate.call(1, -2))",
            "assert_equal(false, candidate.call(3, 2))",
            "assert_equal(false, candidate.call(-10, -10))",
            "assert_equal(true, candidate.call(-2, 2))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "591",
        "title": "swap_List",
        "text": "Write a rbthon function to interchange the first and last elements in an array.",
        "code": "def swap_List(newlist)\n    # Swap the first and last elements of the list.\n    newlist[0] = newlist[1]\n    newlist[1] = newlist[0]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_swap_List",
            "candidate = method(:swap_List)",
            "assert_equal([24, 35, 9, 56, 12], candidate.call([12, 35, 9, 56, 24]))",
            "assert_equal([3, 2, 1], candidate.call([1, 2, 3]))",
            "assert_equal([6, 5, 4], candidate.call([4, 5, 6]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "592",
        "title": "sum_Of_product",
        "text": "Write a rbthon function to find the sum of the product of consecutive binomial co-efficients.",
        "code": "def sum_Of_product(n)\n    return sum(binomial(n, i) for i in range(1, n + 1))\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sum_Of_product",
            "candidate = method(:sum_Of_product)",
            "assert_equal(15, candidate.call(3))",
            "assert_equal(56, candidate.call(4))",
            "assert_equal(1, candidate.call(1))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "593",
        "title": "removezero_ip",
        "text": "Write a function to remove leading zeroes from an ip address.",
        "code": "def removezero_ip(ip)\n    # Remove leading zeroes from an ip address.\n    return ip[0] + ip[1]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_removezero_ip",
            "candidate = method(:removezero_ip)",
            "assert_equal(\"216.8.94.196\", candidate.call(\"216.08.094.196\"))",
            "assert_equal(\"12.1.24\", candidate.call(\"12.01.024\"))",
            "assert_equal(\"216.8.94.196\", candidate.call(\"216.08.094.0196\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "594",
        "title": "diff_even_odd",
        "text": "Write a function to find the difference of the first even and first odd number of a given array.",
        "code": "def diff_even_odd(list1)\n    # Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list2)\n    # Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list3)\n    # Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list4)\n    # Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list5)\n    # Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list6)\n    # Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list7)\n    # Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list8)\n    # Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list9)\n    # Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list10)\n    # Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list11)\n    # Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list12)\n    # Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list13)\n    # Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list14)\n    # Write a function to find the difference of the first even and first odd number of a given array.\ndef diff_even_odd(list15)\n    # Write\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_diff_even_odd",
            "candidate = method(:diff_even_odd)",
            "assert_equal(3, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))",
            "assert_equal(1, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
            "assert_equal(9, candidate.call([1, 5, 7, 9, 10]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "595",
        "title": "min_Swaps",
        "text": "Write a rbthon function to count minimum number of swaps required to convert one binary number represented as a string to another.",
        "code": "def min_Swaps(str1, str2)\n    # Write a rbthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef min_Swaps(str1, str2)\n    # Write a rbthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef min_Swaps(str1, str2)\n    # Write a rbthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef min_Swaps(str1, str2)\n    # Write a rbthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef min_Swaps(str1, str2)\n    # Write a rbthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef min_Swaps(str1, str2)\n    # Write a rbthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef min_Swaps(str1, str2)\n    # Write a rbthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef min_Swaps(str1, str2)\n    # Write a rbthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef min_Swaps(str1, str2)\n    # Write a rbthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef min_Swaps(str1, str2)\n    # Write a rbthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef min_Swaps(str1, str2)\n    # Write a rbthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef min_Swaps(str1, str2)\n    # Write a rbthon function\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_min_Swaps",
            "candidate = method(:min_Swaps)",
            "assert_equal(1, candidate.call(\"1101\", \"1110\"))",
            "assert_equal(\"Not Possible\", candidate.call(\"111\", \"000\"))",
            "assert_equal(\"Not Possible\", candidate.call(\"111\", \"110\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "597",
        "title": "find_kth",
        "text": "Write a function to find kth element from the given two sorted arrays.",
        "code": "def find_kth(arr1, arr2, k)\n    # Write a function to find kth element from the given two sorted arrays.\n    def find_kth(arr1, arr2, k):\n        # Write a function to find kth element from the given two sorted arrays.\n        def find_kth(arr1, arr2, k):\n            # Write a function to find kth element from the given two sorted arrays.\n            return arr1[k]\n        return find_kth(arr1, arr2, k)\n    return find_kth(arr1, arr2, k)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_kth",
            "candidate = method(:find_kth)",
            "assert_equal(6, candidate.call([2, 3, 6, 7, 9], [1, 4, 8, 10], 5))",
            "assert_equal(256, candidate.call([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7))",
            "assert_equal(8, candidate.call([3, 4, 7, 8, 10], [2, 5, 9, 11], 6))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "598",
        "title": "armstrong_number",
        "text": "Write a function to check whether the given number is armstrong or not.",
        "code": "def armstrong_number(number)\n    \"\"\"\n    return number == 1 or number == 2 or number == 3 or number == 4 or number == 5 or number == 6 or number == 7 or number == 8 or number == 9 or number == 10 or number == 11 or number == 12 or number == 13 or number == 14 or number == 15 or number == 16 or number == 17 or number == 18 or number == 19 or number == 20 or number == 21 or number == 22 or number == 23 or number == 24 or number == 25 or number == 26 or number == 27 or number == 28 or number == 29 or number == 30 or number == 31 or number == 32 or number == 33 or number == 34 or number == 35 or number == 36 or number == 37 or number == 38 or number == 39 or number == 40 or number == 41 or number == 42 or number == 43 or number == 44 or number == 45 or number == 46 or number == 47 or number == 48 or number == 49 or number == 50 or number == 51 or number == 52 or number == 53 or number == 54 or number == 55 or number == 56 or number == 57 or number == 58 or number == 59 or number == 60 or number == 61 or number == 62 or number == 63 or number == 64 or number == 65 or number == 66 or number == 67 or number == 68 or number == 69 or number == 70 or number == 71 or number == 72 or number == 73 or number == 74 or number == 75 or number == 76 or number == 77 or number == 78 or number == 79 or number == 80 or number == 81 or number == 82 or number == 83 or number == 84 or number == 85 or number == 86 or number == 87 or number == 88 or number == 89 or number == 90 or number == 91 or number == 92 or number == 93 or number == 94 or number == 95 or number == 96 or number == 97 or number == 98 or number == 99 or number == 100 or number == 101 or number == 102 or number == 103 or number == 104 or number == 105 or number == 106 or number == 107 or number == 108 or number == 109 or number == 110 or number == 111 or number == 112 or number == 113 or number == 114 or number == 115 or number == 116 or number == 117 or number == 118 or number == 119 or number == 120 or number\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_armstrong_number",
            "candidate = method(:armstrong_number)",
            "assert_equal(true, candidate.call(153))",
            "assert_equal(false, candidate.call(259))",
            "assert_equal(false, candidate.call(4458))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "599",
        "title": "sum_average",
        "text": "Write a function to find sum and average of first n natural numbers.",
        "code": "def sum_average(number)\n    sum = 0\n    for i in range(1, number):\n        sum += i\n    return sum / number\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sum_average",
            "candidate = method(:sum_average)",
            "assert_equal([55, 5.5], candidate.call(10))",
            "assert_equal([120, 8.0], candidate.call(15))",
            "assert_equal([210, 10.5], candidate.call(20))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "59",
        "title": "is_octagonal",
        "text": "Write a function to find the nth octagonal number.",
        "code": "def is_octagonal(n)\n    return n % 2 == 0\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_is_octagonal",
            "candidate = method(:is_octagonal)",
            "assert_equal(65, candidate.call(5))",
            "assert_equal(280, candidate.call(10))",
            "assert_equal(645, candidate.call(15))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "600",
        "title": "is_Even",
        "text": "Write a rbthon function to check whether the given number is even or not.",
        "code": "def is_Even(n)\n    return n % 2 == 0\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_is_Even",
            "candidate = method(:is_Even)",
            "assert_equal(false, candidate.call(1))",
            "assert_equal(true, candidate.call(2))",
            "assert_equal(false, candidate.call(3))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "602",
        "title": "first_repeated_char",
        "text": "Write a rbthon function to find the first repeated character in a given string.",
        "code": "def first_repeated_char(str1)\n    \"\"\"\n    return str1[0] if str1 else ''\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_first_repeated_char",
            "candidate = method(:first_repeated_char)",
            "assert_equal(\"a\", candidate.call(\"abcabc\"))",
            "assert_equal(nil, candidate.call(\"abc\"))",
            "assert_equal(\"1\", candidate.call(\"123123\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "603",
        "title": "get_ludic",
        "text": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
        "code": "def get_ludic(n)\n    # Get all the numbers smaller than or equal to n.\n    return [x for x in range(n) if x % 2 == 0]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_get_ludic",
            "candidate = method(:get_ludic)",
            "assert_equal([1, 2, 3, 5, 7], candidate.call(10))",
            "assert_equal([1, 2, 3, 5, 7, 11, 13, 17, 23, 25], candidate.call(25))",
            "assert_equal([1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43], candidate.call(45))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "604",
        "title": "reverse_words",
        "text": "Write a function to reverse words seperated by spaces in a given string.",
        "code": "def reverse_words(s)\n    # Create a list of all the words in the string s.\n    words = []\n    # Create a list of all the words in the string s.\n    for word in s.split():\n        # Add the word to the list of words.\n        words.append(word)\n    # Reverse the list of words.\n    for word in reversed(words):\n        # Add the word to the list of words.\n        words.append(word)\n    # Return the list of words.\n    return words\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_reverse_words",
            "candidate = method(:reverse_words)",
            "assert_equal(\"program python\", candidate.call(\"python program\"))",
            "assert_equal(\"language java\", candidate.call(\"java language\"))",
            "assert_equal(\"man indian\", candidate.call(\"indian man\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "605",
        "title": "prime_num",
        "text": "Write a function to check if the given integer is a prime number.",
        "code": "def prime_num(num)\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_prime_num",
            "candidate = method(:prime_num)",
            "assert_equal(true, candidate.call(13))",
            "assert_equal(true, candidate.call(7))",
            "assert_equal(false, candidate.call(-1010))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "606",
        "title": "radian_degree",
        "text": "Write a function to convert degrees to radians.",
        "code": "def radian_degree(degree)\n    \n    # Write a function to convert radians to degrees.\ndef radian_radian(radian)\n    \n    # Write a function to convert radians to degrees.\ndef radian_degree_radian(degree_radian)\n    \n    # Write a function to convert radians to degrees.\ndef radian_radian_degree(radian_radian)\n    \n    # Write a function to convert radians to degrees.\ndef radian_radian_radian(radian_radian_radian)\n    \n    # Write a function to convert radians to degrees.\ndef radian_radian_radian_degree(radian_radian_radian)\n    \n    # Write a function to convert radians to degrees.\ndef radian_radian_radian_radian(radian_radian_radian_radian)\n    \n    # Write a function to convert radians to degrees.\ndef radian_radian_radian_radian_degree(radian_radian_radian_radian)\n    \n    # Write a function to convert radians to degrees.\ndef radian_radian_radian_radian_radian(radian_radian_radian_radian)\n    \n    # Write a function to convert radians to degrees.\ndef radian_radian_radian_radian_radian_degree(radian_radian_radian_radian)\n    \n    # Write a function to convert radians to degrees.\ndef radian_radian_radian_radian_radian_radian(radian_radian_radian_radian)\n    \n    # Write a function to convert radians to degrees.\ndef radian_radian_radian_radian_radian_radian_degree(radian_radian_radian_radian_radian)\n    \n    # Write a function to convert radians to degrees.\ndef radian_radian_radian_radian_radian_radian_radian(radian_radian_radian_radian_radian)\n    \n    # Write a\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_radian_degree",
            "candidate = method(:radian_degree)",
            "assert_equal(1.5707963267948966, candidate.call(90))",
            "assert_equal(1.0471975511965976, candidate.call(60))",
            "assert_equal(2.0943951023931953, candidate.call(120))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "607",
        "title": "find_literals",
        "text": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "code": "def find_literals(text, pattern)\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring, a start index and an end index.\n    # The function should return the matching substring\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_literals",
            "candidate = method(:find_literals)",
            "assert_equal([\"fox\", 16, 19], candidate.call(\"The quick brown fox jumps over the lazy dog.\", \"fox\"))",
            "assert_equal([\"crazy\", 16, 21], candidate.call(\"Its been a very crazy procedure right\", \"crazy\"))",
            "assert_equal([\"will\", 35, 39], candidate.call(\"Hardest choices required strongest will\", \"will\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "608",
        "title": "bell_Number",
        "text": "Write a rbthon function to find nth bell number.",
        "code": "def bell_Number(n)\n    return n**(n-1)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_bell_Number",
            "candidate = method(:bell_Number)",
            "assert_equal(2, candidate.call(2))",
            "assert_equal(5, candidate.call(3))",
            "assert_equal(15, candidate.call(4))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "610",
        "title": "remove_kth_element",
        "text": "Write a rbthon function which takes an array and returns an array with the same elements, but the k'th element removed.",
        "code": "def remove_kth_element(list1, l)\n    # Remove the kth element from the list.\n    list1.remove(l)\n    # Return the list with the k'th element removed.\n    return list1\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_remove_kth_element",
            "candidate = method(:remove_kth_element)",
            "assert_equal([1, 1, 3, 4, 4, 5, 1], candidate.call([1, 1, 2, 3, 4, 4, 5, 1], 3))",
            "assert_equal([0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4))",
            "assert_equal([10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "611",
        "title": "max_of_nth",
        "text": "Write a function which given a matrix represented as an array of arrays returns the max of then'th column.",
        "code": "def max_of_nth(test_list, n)\n    # Write a function which given a matrix represented as an array of arrays returns the max of then'th column.\ndef max_of_nth(test_list, n)\n    # Write a function which given a matrix represented as an array of arrays returns the max of then'th column.\ndef max_of_nth(test_list, n)\n    # Write a function which given a matrix represented as an array of arrays returns the max of then'th column.\ndef max_of_nth(test_list, n)\n    # Write a function which given a matrix represented as an array of arrays returns the max of then'th column.\ndef max_of_nth(test_list, n)\n    # Write a function which given a matrix represented as an array of arrays returns the max of then'th column.\ndef max_of_nth(test_list, n)\n    # Write a function which given a matrix represented as an array of arrays returns the max of then'th column.\ndef max_of_nth(test_list, n)\n    # Write a function which given a matrix represented as an array of arrays returns the max of then'th column.\ndef max_of_nth(test_list, n)\n    # Write a function which given a matrix represented as an array of arrays returns the max of then'th column.\ndef max_of_nth(test_list, n)\n    # Write a function which given a matrix represented as an array of arrays returns the max of then'th column.\ndef max_of_nth(test_list, n)\n    # Write a function which given a matrix represented as an array of arrays returns the max of then'th column.\ndef max_of_nth(test_list, n)\n    # Write a function which given a matrix represented as an array of arrays returns the max of then'th column.\ndef max_of_nth(test_list, n)\n    # Write a function which given a matrix represented as an array of arrays returns the max of the n\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_max_of_nth",
            "candidate = method(:max_of_nth)",
            "assert_equal(19, candidate.call([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2))",
            "assert_equal(10, candidate.call([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1))",
            "assert_equal(11, candidate.call([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "612",
        "title": "merge",
        "text": "Write a rbthon function which takes an array of arrays, where each subarray has two elements, and returns an array of two arrays where the first array has the first element of each subarray and the second one has the second.",
        "code": "def merge(lst)\n    # Create a list of lists, where each sublist has two elements, and returns an array of two lists where the first list has the first element of each sublist and the second one has the second element of each sublist.\n    # The first element of each sublist is the first element of the first sublist, and the second element of each sublist is the second element of the first sublist.\n    # The second element of each sublist is the second element of the first sublist, and the first element of each sublist is the first element of the second sublist.\n    # The first element of each sublist is the first element of the first sublist, and the second element of each sublist is the second element of the first sublist.\n    # The second element of each sublist is the second element of the first sublist, and the first element of each sublist is the first element of the second sublist.\n    # The first element of each sublist is the first element of the first sublist, and the second element of each sublist is the second element of the first sublist.\n    # The first element of each sublist is the first element of the first sublist, and the second element of each sublist is the second element of the first sublist.\n    # The first element of each sublist is the first element of the first sublist, and the second element of each sublist is the second element of the first sublist.\n    # The first element of each sublist is the first element of the first sublist, and the second element of each sublist is the second element of the first sublist.\n    # The first element of each sublist is the first element of the first sublist, and the second element of each sublist is the second element of the first sublist.\n    # The first element of each sublist is the first element of the first sublist, and the second element of each sublist is the second element of the first sublist.\n    # The first element of each sublist is the first element of the first sublist, and the second element of each\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_merge",
            "candidate = method(:merge)",
            "assert_equal([[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"]], candidate.call([[\"x\", \"y\"], [\"a\", \"b\"], [\"m\", \"n\"]]))",
            "assert_equal([[1, 3, 5, 7], [2, 4, 6, 8]], candidate.call([[1, 2], [3, 4], [5, 6], [7, 8]]))",
            "assert_equal([[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"], [\"z\", \"c\", \"o\"]], candidate.call([[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"], [\"m\", \"n\", \"o\"]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "614",
        "title": "cummulative_sum",
        "text": "Write a function to find the cumulative sum of all the values that are present in the given array of arrays.",
        "code": "def cummulative_sum(test_list)\n    # Write a function to find the cumulative sum of all the values that are present in the given array of arrays.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    # The function should return the cumulative sum of the values in the given array.\n    \n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_cummulative_sum",
            "candidate = method(:cummulative_sum)",
            "assert_equal(30, candidate.call([[1, 3], [5, 6, 7], [2, 6]]))",
            "assert_equal(37, candidate.call([[2, 4], [6, 7, 8], [3, 7]]))",
            "assert_equal(44, candidate.call([[3, 5], [7, 8, 9], [4, 8]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "615",
        "title": "average_tuple",
        "text": "Write a function which takes an arrays of arrays and returns the average value for each subarray as an array.",
        "code": "def average_tuple(nums)\n    # Write a function which takes an array of arrays and returns the average value for each subarray as an array.\n    # The average value is the sum of the values in the subarrays.\n    # The average value is the sum of the values in the subarrays divided by the number of subarrays.\n    # The average value is the sum of the values in the subarrays divided by the number of subarrays divided by the number of subarrays.\n    # The average value is the sum of the values in the subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays.\n    # The average value is the sum of the values in the subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays.\n    # The average value is the sum of the values in the subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the number of subarrays divided by the\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_average_tuple",
            "candidate = method(:average_tuple)",
            "assert_equal([30.5, 34.25, 27.0, 23.25], candidate.call([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]))",
            "assert_equal([25.5, -18.0, 3.75], candidate.call([[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]]))",
            "assert_equal([305.0, 342.5, 270.0, 232.5], candidate.call([[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "616",
        "title": "tuple_modulo",
        "text": "Write a function which takes two arrays of the same length and performs the element wise modulo.",
        "code": "def tuple_modulo(test_tup1, test_tup2)\n    # Write a function which takes two arrays of the same length and performs the element wise modulo.\ndef tuple_modulo_2(test_tup1, test_tup2)\n    # Write a function which takes two arrays of the same length and performs the element wise modulo.\ndef tuple_modulo_3(test_tup1, test_tup2)\n    # Write a function which takes two arrays of the same length and performs the element wise modulo.\ndef tuple_modulo_4(test_tup1, test_tup2)\n    # Write a function which takes two arrays of the same length and performs the element wise modulo.\ndef tuple_modulo_5(test_tup1, test_tup2)\n    # Write a function which takes two arrays of the same length and performs the element wise modulo.\ndef tuple_modulo_6(test_tup1, test_tup2)\n    # Write a function which takes two arrays of the same length and performs the element wise modulo.\ndef tuple_modulo_7(test_tup1, test_tup2)\n    # Write a function which takes two arrays of the same length and performs the element wise modulo.\ndef tuple_modulo_8(test_tup1, test_tup2)\n    # Write a function which takes two arrays of the same length and performs the element wise modulo.\ndef tuple_modulo_9(test_tup1, test_tup2)\n    # Write a function which takes two arrays of the same length and performs the element wise modulo.\ndef tuple_modulo_10(test_tup1, test_tup2)\n    # Write a function which takes two arrays of the same length and performs the element wise modulo.\ndef tuple_modulo_11(test_tup1, test_tup2)\n    # Write a function which takes two arrays of the same length and performs the element wise modulo.\ndef tuple_modulo_12(test_tup1, test_tup2)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_tuple_modulo",
            "candidate = method(:tuple_modulo)",
            "assert_equal([0, 4, 5, 1], candidate.call([10, 4, 5, 6], [5, 6, 7, 5]))",
            "assert_equal([5, 5, 6, 1], candidate.call([11, 5, 6, 7], [6, 7, 8, 6]))",
            "assert_equal([5, 6, 7, 1], candidate.call([12, 6, 7, 8], [7, 8, 9, 7]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "617",
        "title": "min_Jumps",
        "text": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
        "code": "def min_Jumps(steps, d)\n    # Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    # The function should return the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    # The function should return the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    # The function should return the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    # The function should return the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    # The function should return the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    # The function should return the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    # The function should return the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    # The function should return the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    # The function should return the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    # The function should return the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    # The function should return the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    # The function should return the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    # The function should return the number of jumps required of given length to reach a point of form (d\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_min_Jumps",
            "candidate = method(:min_Jumps)",
            "assert_equal(3.5, candidate.call([3, 4], 11))",
            "assert_equal(0, candidate.call([3, 4], 0))",
            "assert_equal(1, candidate.call([11, 14], 11))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "618",
        "title": "div_list",
        "text": "Write a function to divide two arrays element wise.",
        "code": "def div_list(nums1, nums2)\n    # Write a function to divide two arrays element wise.\ndef div_list_2(nums1, nums2)\n    # Write a function to divide two arrays element wise.\ndef div_list_3(nums1, nums2)\n    # Write a function to divide two arrays element wise.\ndef div_list_4(nums1, nums2)\n    # Write a function to divide two arrays element wise.\ndef div_list_5(nums1, nums2)\n    # Write a function to divide two arrays element wise.\ndef div_list_6(nums1, nums2)\n    # Write a function to divide two arrays element wise.\ndef div_list_7(nums1, nums2)\n    # Write a function to divide two arrays element wise.\ndef div_list_8(nums1, nums2)\n    # Write a function to divide two arrays element wise.\ndef div_list_9(nums1, nums2)\n    # Write a function to divide two arrays element wise.\ndef div_list_10(nums1, nums2)\n    # Write a function to divide two arrays element wise.\ndef div_list_11(nums1, nums2)\n    # Write a function to divide two arrays element wise.\ndef div_list_12(nums1, nums2)\n    # Write a function to divide two arrays element wise.\ndef div_list_13(nums1, nums2)\n    # Write a function to divide two arrays element wise.\ndef div_list_14(nums1, nums2)\n    # Write a function to divide two arrays element wise.\ndef div_list_15(nums1, nums2)\n    # Write a function to divide two arrays element wise.\ndef div_list_16(nums1, nums2)\n    # Write a function to divide two arrays element wise.\ndef div_list_17(nums1, nums2)\n    # Write a function to divide two arrays element wise.\ndef div_list_18(nums\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_div_list",
            "candidate = method(:div_list)",
            "assert_equal([4.0, 2.5, 2.0], candidate.call([4, 5, 6], [1, 2, 3]))",
            "assert_equal([3.0, 0.5], candidate.call([3, 2], [1, 4]))",
            "assert_equal([1.8, 1.7142857142857142], candidate.call([90, 120], [50, 70]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "619",
        "title": "move_num",
        "text": "Write a function to move all the numbers to the end of the given string.",
        "code": "def move_num(test_str)\n    # Move all the numbers to the end of the given string.\n    test_str = test_str.replace(\"0\", \"\")\n    test_str = test_str.replace(\"1\", \"\")\n    test_str = test_str.replace(\"2\", \"\")\n    test_str = test_str.replace(\"3\", \"\")\n    test_str = test_str.replace(\"4\", \"\")\n    test_str = test_str.replace(\"5\", \"\")\n    test_str = test_str.replace(\"6\", \"\")\n    test_str = test_str.replace(\"7\", \"\")\n    test_str = test_str.replace(\"8\", \"\")\n    test_str = test_str.replace(\"9\", \"\")\n    test_str = test_str.replace(\"10\", \"\")\n    test_str = test_str.replace(\"11\", \"\")\n    test_str = test_str.replace(\"12\", \"\")\n    test_str = test_str.replace(\"13\", \"\")\n    test_str = test_str.replace(\"14\", \"\")\n    test_str = test_str.replace(\"15\", \"\")\n    test_str = test_str.replace(\"16\", \"\")\n    test_str = test_str.replace(\"17\", \"\")\n    test_str = test_str.replace(\"18\", \"\")\n    test_str = test_str.replace(\"19\", \"\")\n    test_str = test_str.replace(\"20\", \"\")\n    test_str = test_str.replace(\"21\", \"\")\n    test_str = test_str.replace(\"22\", \"\")\n    test_str = test_str.replace(\"23\", \"\")\n    test_str = test_str.replace(\"24\", \"\")\n    test_str = test_str.replace(\"25\", \"\")\n    test_str = test_str.replace(\"26\", \"\")\n    test_str = test_str.replace(\"27\", \"\")\n    test_str = test_str.replace(\"28\", \"\")\n    test_str =\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_move_num",
            "candidate = method(:move_num)",
            "assert_equal(\"Iloveyouthreethousand1143553000\", candidate.call(\"I1love143you55three3000thousand\"))",
            "assert_equal(\"AvengersAssemble124\", candidate.call(\"Avengers124Assemble\"))",
            "assert_equal(\"Itsourpathtoseethingsdothings11121314151617\", candidate.call(\"Its11our12path13to14see15things16do17things\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "61",
        "title": "count_Substrings",
        "text": "Write a rbthon function to count the number of substrings with the sum of digits equal to their length.",
        "code": "def count_Substrings(s)\n    return len(s)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count_Substrings",
            "candidate = method(:count_Substrings)",
            "assert_equal(6, candidate.call(\"112112\"))",
            "assert_equal(6, candidate.call(\"111\"))",
            "assert_equal(12, candidate.call(\"1101112\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "622",
        "title": "get_median",
        "text": "Write a function to find the median of two sorted arrays of same size.",
        "code": "def get_median(arr1, arr2, n)\n    # Sort the two arrays and find the median.\n    arr1.sort()\n    arr2.sort()\n    median = arr1[n//2]\n    return median\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_get_median",
            "candidate = method(:get_median)",
            "assert_equal(16.0, candidate.call([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5))",
            "assert_equal(8.5, candidate.call([2, 4, 8, 9], [7, 13, 19, 28], 4))",
            "assert_equal(25.0, candidate.call([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "623",
        "title": "nth_nums",
        "text": "Write a function to compute the n-th power of each number in an array.",
        "code": "def nth_nums(nums, n)\n    # Compute the nth power of each number in an array.\n    return [nums[i]**n for i in range(n)]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_nth_nums",
            "candidate = method(:nth_nums)",
            "assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))",
            "assert_equal([1000, 8000, 27000], candidate.call([10, 20, 30], 3))",
            "assert_equal([248832, 759375], candidate.call([12, 15], 5))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "624",
        "title": "is_upper",
        "text": "Write a rbthon function to convert a given string to uppercase.",
        "code": "def is_upper(string)\n    return string.upper() == string\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_is_upper",
            "candidate = method(:is_upper)",
            "assert_equal(\"PERSON\", candidate.call(\"person\"))",
            "assert_equal(\"FINAL\", candidate.call(\"final\"))",
            "assert_equal(\"VALID\", candidate.call(\"Valid\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "625",
        "title": "swap_List",
        "text": "Write a rbthon function to interchange the first and last element in a given array.",
        "code": "def swap_List(newlist)\n    # Swap the first and last element in the given list.\n    newlist[0] = newlist[1]\n    newlist[1] = newlist[0]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_swap_List",
            "candidate = method(:swap_List)",
            "assert_equal([3, 2, 1], candidate.call([1, 2, 3]))",
            "assert_equal([4, 2, 3, 4, 1], candidate.call([1, 2, 3, 4, 4]))",
            "assert_equal([6, 5, 4], candidate.call([4, 5, 6]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "626",
        "title": "triangle_area",
        "text": "Write a rbthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
        "code": "def triangle_area(r)\n    # Compute the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    return r*r\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_triangle_area",
            "candidate = method(:triangle_area)",
            "assert_equal(nil, candidate.call(-1))",
            "assert_equal(0, candidate.call(0))",
            "assert_equal(4, candidate.call(2))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "627",
        "title": "find_First_Missing",
        "text": "Write a rbthon function to find the smallest missing number from a sorted array of natural numbers.",
        "code": "def find_First_Missing(array)\n    # Find the first missing number in the sorted array.\n    return array[0]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_First_Missing",
            "candidate = method(:find_First_Missing)",
            "assert_equal(4, candidate.call([0, 1, 2, 3]))",
            "assert_equal(3, candidate.call([0, 1, 2, 6, 9]))",
            "assert_equal(0, candidate.call([2, 3, 5, 8, 9]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "628",
        "title": "replace_spaces",
        "text": "Write a function to replace all spaces in the given string with '%20'.",
        "code": "def replace_spaces(string)\n    return string.replace(' ', '%20')\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_replace_spaces",
            "candidate = method(:replace_spaces)",
            "assert_equal(\"My%20Name%20is%20Dawood\", candidate.call(\"My Name is Dawood\"))",
            "assert_equal(\"I%20am%20a%20Programmer\", candidate.call(\"I am a Programmer\"))",
            "assert_equal(\"I%20love%20Coding\", candidate.call(\"I love Coding\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "629",
        "title": "Split",
        "text": "Write a rbthon function to find even numbers from an array of numbers.",
        "code": "def Split(list)\n    \"\"\"\n    return list[0:len(list) // 2]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_Split",
            "candidate = method(:Split)",
            "assert_equal([2, 4], candidate.call([1, 2, 3, 4, 5]))",
            "assert_equal([4, 6, 8, 0], candidate.call([4, 5, 6, 7, 8, 0, 1]))",
            "assert_equal([8, 12], candidate.call([8, 12, 15, 19]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "62",
        "title": "smallest_num",
        "text": "Write a rbthon function to find smallest number in an array.",
        "code": "def smallest_num(xs)\n    \"\"\"\n    return min(xs)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_smallest_num",
            "candidate = method(:smallest_num)",
            "assert_equal(1, candidate.call([10, 20, 1, 45, 99]))",
            "assert_equal(1, candidate.call([1, 2, 3]))",
            "assert_equal(45, candidate.call([45, 46, 50, 60]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "630",
        "title": "get_coordinates",
        "text": "Write a function to extract all the adjacent coordinates of the given coordinate array.",
        "code": "def get_coordinates(test_tup)\n    \"\"\"\n    return [test_tup[0], test_tup[1]]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_get_coordinates",
            "candidate = method(:get_coordinates)",
            "assert_equal([[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]], candidate.call([3, 4]))",
            "assert_equal([[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]], candidate.call([4, 5]))",
            "assert_equal([[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]], candidate.call([5, 6]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "631",
        "title": "replace_spaces",
        "text": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "code": "def replace_spaces(text)\n    return text.replace(' ', '_').replace('\\n', '_').replace('\\t', '_').replace('\\r', '_')\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_replace_spaces",
            "candidate = method(:replace_spaces)",
            "assert_equal(\"Jumanji_The_Jungle\", candidate.call(\"Jumanji The Jungle\"))",
            "assert_equal(\"The Avengers\", candidate.call(\"The_Avengers\"))",
            "assert_equal(\"Fast_and_Furious\", candidate.call(\"Fast and Furious\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "632",
        "title": "move_zero",
        "text": "Write a rbthon function to move all zeroes to the end of the given array.",
        "code": "def move_zero(num_list)\n    \"\"\"\n    num_list = list(num_list)\n    num_list.append(0)\n    return num_list\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_move_zero",
            "candidate = method(:move_zero)",
            "assert_equal([1, 2, 3, 4, 0, 0], candidate.call([1, 0, 2, 0, 3, 4]))",
            "assert_equal([2, 3, 2, 4, 5, 0, 0, 0, 0], candidate.call([2, 3, 2, 0, 0, 4, 0, 5, 0]))",
            "assert_equal([1, 1, 1, 0, 0], candidate.call([0, 1, 0, 1, 1]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "633",
        "title": "pair_xor_Sum",
        "text": "Write a rbthon function to find the sum of xor of all pairs of numbers in the given array.",
        "code": "def pair_xor_Sum(arr, n)\n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    return sum\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_pair_xor_Sum",
            "candidate = method(:pair_xor_Sum)",
            "assert_equal(47, candidate.call([5, 9, 7, 6], 4))",
            "assert_equal(12, candidate.call([7, 3, 5], 3))",
            "assert_equal(4, candidate.call([7, 3], 2))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "635",
        "title": "heap_sort",
        "text": "Write a function to sort the given array.",
        "code": "def heap_sort(iterable)\n    \"\"\"\n    Heap sort.\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_heap_sort",
            "candidate = method(:heap_sort)",
            "assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], candidate.call([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))",
            "assert_equal([14, 22, 25, 25, 35, 58, 65, 75, 85], candidate.call([25, 35, 22, 85, 14, 65, 75, 25, 58]))",
            "assert_equal([1, 5, 7, 9], candidate.call([7, 1, 9, 5]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "637",
        "title": "noprofit_noloss",
        "text": "Write a function to check whether the given amount has no profit and no loss",
        "code": "def noprofit_noloss(actual_cost, sale_amount)\n    return actual_cost == 0 and sale_amount == 0\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_noprofit_noloss",
            "candidate = method(:noprofit_noloss)",
            "assert_equal(false, candidate.call(1500, 1200))",
            "assert_equal(true, candidate.call(100, 100))",
            "assert_equal(false, candidate.call(2000, 5000))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "638",
        "title": "wind_chill",
        "text": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "code": "def wind_chill(v, t)\n    return round(v * 1.8 + (t - 273.15) * 0.16, 2)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_wind_chill",
            "candidate = method(:wind_chill)",
            "assert_equal(40, candidate.call(120, 35))",
            "assert_equal(19, candidate.call(40, 20))",
            "assert_equal(6, candidate.call(10, 8))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "639",
        "title": "sample_nam",
        "text": "Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.",
        "code": "def sample_nam(sample_names)\n    \"\"\"\n    return sum(len(name) for name in sample_names)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sample_nam",
            "candidate = method(:sample_nam)",
            "assert_equal(16, candidate.call([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]))",
            "assert_equal(10, candidate.call([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]))",
            "assert_equal(6, candidate.call([\"abcd\", \"Python\", \"abba\", \"aba\"]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "63",
        "title": "max_difference",
        "text": "Write a function to find the maximum difference between available pairs in the given array array.",
        "code": "def max_difference(test_list)\n    # Write a function to find the maximum difference between two arrays.\n    def max_difference(test_list):\n        # Write a function to find the maximum difference between two arrays.\n        def max_difference(test_list):\n            # Write a function to find the maximum difference between two arrays.\n            def max_difference(test_list):\n                # Write a function to find the maximum difference between two arrays.\n                def max_difference(test_list):\n                    # Write a function to find the maximum difference between two arrays.\n                    def max_difference(test_list):\n                        # Write a function to find the maximum difference between two arrays.\n                        def max_difference(test_list):\n                            # Write a function to find the maximum difference between two arrays.\n                            def max_difference(test_list):\n                                # Write a function to find the maximum difference between two arrays.\n                                def max_difference(test_list):\n                                    # Write a function to find the maximum difference between two arrays.\n                                    def max_difference(test_list):\n                                        # Write a function to find the maximum difference between two arrays.\n                                        def max_difference(test_list):\n                                            # Write a function to find the maximum difference between two arrays.\n                                            def max_difference(test_list):\n                                                # Write a function to find the maximum difference between two arrays.\n                                                def max_difference(test_list):\n                                                    # Write a function to find the maximum difference between two arrays.\n                                                    def max_difference(test_list):\n                                                        # Write a function to find the maximum difference between two arrays.\n                                                        def max_difference(test_list):\n                                                            # Write a function to find the maximum difference between two arrays.\n                                                            def max_difference(test_list):\n                                                                # Write a function to find the maximum difference between two arrays.\n\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_max_difference",
            "candidate = method(:max_difference)",
            "assert_equal(7, candidate.call([[3, 5], [1, 7], [10, 3], [1, 2]]))",
            "assert_equal(15, candidate.call([[4, 6], [2, 17], [9, 13], [11, 12]]))",
            "assert_equal(23, candidate.call([[12, 35], [21, 27], [13, 23], [41, 22]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "640",
        "title": "remove_parenthesis",
        "text": "Write a function to remove the parenthesis and what is inbetween them from a string.",
        "code": "def remove_parenthesis(items)\n    # Remove the parenthesis and what is inbetween them from a string.\n    items = items.replace('(', '').replace(')', '')\n    return items\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_remove_parenthesis",
            "candidate = method(:remove_parenthesis)",
            "assert_equal(\"python\", candidate.call([\"python (chrome)\"]))",
            "assert_equal(\"string\", candidate.call([\"string(.abc)\"]))",
            "assert_equal(\"alpha\", candidate.call([\"alpha(num)\"]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "641",
        "title": "is_nonagonal",
        "text": "Write a function to find the nth nonagonal number.",
        "code": "def is_nonagonal(n)\n    return n % 2 == 0\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_is_nonagonal",
            "candidate = method(:is_nonagonal)",
            "assert_equal(325, candidate.call(10))",
            "assert_equal(750, candidate.call(15))",
            "assert_equal(1089, candidate.call(18))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "643",
        "title": "text_match_wordz_middle",
        "text": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "code": "def text_match_wordz_middle(text)\n    # Return True if the string is a word, False otherwise.\n    return text.startswith('z') and text.endswith('z')\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_text_match_wordz_middle",
            "candidate = method(:text_match_wordz_middle)",
            "assert_equal(true, candidate.call(\"pythonzabc.\"))",
            "assert_equal(false, candidate.call(\"zxyabc.\"))",
            "assert_equal(false, candidate.call(\"  lang  .\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "644",
        "title": "reverse_Array_Upto_K",
        "text": "Write a rbthon function to reverse an array upto a given position.",
        "code": "def reverse_Array_Upto_K(input, k)\n    \"\"\"\n    input = list(input)\n    output = []\n    for i in range(len(input)):\n        output.append(input[i])\n        output.append(input[i+k])\n    return output\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_reverse_Array_Upto_K",
            "candidate = method(:reverse_Array_Upto_K)",
            "assert_equal([4, 3, 2, 1, 5, 6], candidate.call([1, 2, 3, 4, 5, 6], 4))",
            "assert_equal([5, 4, 6, 7], candidate.call([4, 5, 6, 7], 2))",
            "assert_equal([7, 8, 9, 6, 5], candidate.call([9, 8, 7, 6, 5], 3))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "64",
        "title": "subject_marks",
        "text": "Write a function to sort an array of arrays using the second value of each array.",
        "code": "def subject_marks(subjectmarks)\n    \n    # Sort the array of arrays using the second value of each array.\n    subjectmarks.sort(key=lambda x: x[1])\n    \n    # Write a function to sort an array of arrays using the third value of each array.\n    def subject_marks_sort(subjectmarks):\n        subjectmarks.sort(key=lambda x: x[2])\n    \n    # Write a function to sort an array of arrays using the fourth value of each array.\n    def subject_marks_sort_3(subjectmarks):\n        subjectmarks.sort(key=lambda x: x[3])\n    \n    # Write a function to sort an array of arrays using the fifth value of each array.\n    def subject_marks_sort_5(subjectmarks):\n        subjectmarks.sort(key=lambda x: x[4])\n    \n    # Write a function to sort an array of arrays using the sixth value of each array.\n    def subject_marks_sort_6(subjectmarks):\n        subjectmarks.sort(key=lambda x: x[5])\n    \n    # Write a function to sort an array of arrays using the seventh value of each array.\n    def subject_marks_sort_7(subjectmarks):\n        subjectmarks.sort(key=lambda x: x[6])\n    \n    # Write a function to sort an array of arrays using the eighth value of each array.\n    def subject_marks_sort_8(subjectmarks):\n        subjectmarks.sort(key=lambda x: x[7])\n    \n    # Write a function to sort an array of arrays using the ninth value of each array.\n    def subject_marks_sort_9(subjectmarks):\n        subjectmarks.sort(key=lambda x: x[8])\n    \n    # Write a function to sort an array of arrays using the tenth value of each array.\n    def subject_marks_sort_10(subjectmarks):\n        subjectmarks.sort(key=lambda x: x[9])\n    \n    # Write a function to sort an array of arrays using the eleventh value of each array.\n    def subject_marks_sort_11(subjectmarks):\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_subject_marks",
            "candidate = method(:subject_marks)",
            "assert_equal([[\"Social sciences\", 82], [\"English\", 88], [\"Science\", 90], [\"Maths\", 97]], candidate.call([[\"English\", 88], [\"Science\", 90], [\"Maths\", 97], [\"Social sciences\", 82]]))",
            "assert_equal([[\"Social\", 33], [\"Telugu\", 49], [\"Hindhi\", 54]], candidate.call([[\"Telugu\", 49], [\"Hindhi\", 54], [\"Social\", 33]]))",
            "assert_equal([[\"Biology\", 45], [\"Physics\", 96], [\"Chemistry\", 97]], candidate.call([[\"Physics\", 96], [\"Chemistry\", 97], [\"Biology\", 45]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "65",
        "title": "recursive_list_sum",
        "text": "Write a function to flatten an array and sum all of its elements.",
        "code": "def recursive_list_sum(data_list)\n    # Write a function to flatten an array and sum all of its elements.\ndef recursive_list_sum_recursive(data_list)\n    # Write a function to flatten an array and sum all of its elements.\ndef recursive_list_sum_recursive_recursive(data_list)\n    # Write a function to flatten an array and sum all of its elements.\ndef recursive_list_sum_recursive_recursive_recursive(data_list)\n    # Write a function to flatten an array and sum all of its elements.\ndef recursive_list_sum_recursive_recursive_recursive(data_list)\n    # Write a function to flatten an array and sum all of its elements.\ndef recursive_list_sum_recursive_recursive_recursive_recursive(data_list)\n    # Write a function to flatten an array and sum all of its elements.\ndef recursive_list_sum_recursive_recursive_recursive_recursive(data_list)\n    # Write a function to flatten an array and sum all of its elements.\ndef recursive_list_sum_recursive_recursive_recursive_recursive(data_list)\n    # Write a function to flatten an array and sum all of its elements.\ndef recursive_list_sum_recursive_recursive_recursive_recursive(data_list)\n    # Write a function to flatten an array and sum all of its elements.\ndef recursive_list_sum_recursive_recursive_recursive_recursive(data_list)\n    # Write a function to flatten an array and sum all of its elements.\ndef recursive_list_sum_recursive_recursive_recursive_recursive(data_list)\n    # Write a function to flatten an array and sum all of its elements.\ndef recursive_list_sum_recursive_recursive_recursive_recursive(data_list)\n    # Write a function to flatten an array and sum all of its elements.\ndef recursive_list_sum_recursive_recursive_recursive_recursive(data_list)\n\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_recursive_list_sum",
            "candidate = method(:recursive_list_sum)",
            "assert_equal(21, candidate.call([1, 2, [3, 4], [5, 6]]))",
            "assert_equal(106, candidate.call([7, 10, [15, 14], [19, 41]]))",
            "assert_equal(210, candidate.call([10, 20, [30, 40], [50, 60]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "66",
        "title": "pos_count",
        "text": "Write a rbthon function to count the number of positive numbers in an array.",
        "code": "def pos_count(list)\n    \"\"\"\n    return sum(1 for i in list if i > 0)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_pos_count",
            "candidate = method(:pos_count)",
            "assert_equal(2, candidate.call([1, -2, 3, -4]))",
            "assert_equal(3, candidate.call([3, 4, 5, -1]))",
            "assert_equal(4, candidate.call([1, 2, 3, 4]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "67",
        "title": "bell_number",
        "text": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "code": "def bell_number(n)\n    # The number of ways to partition the set of Bell numbers.\n    return n\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_bell_number",
            "candidate = method(:bell_number)",
            "assert_equal(2, candidate.call(2))",
            "assert_equal(115975, candidate.call(10))",
            "assert_equal(6775685320645824322581483068371419745979053216268760300, candidate.call(56))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "68",
        "title": "is_Monotonic",
        "text": "Write a rbthon function to check whether the given array is monotonic or not.",
        "code": "def is_Monotonic(a)\n    \"\"\"\n    if len(a) == 0:\n        return False\n    if len(a) == 1:\n        return True\n    if len(a) == 2:\n        return a[0] == a[1]\n    return False\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_is_Monotonic",
            "candidate = method(:is_Monotonic)",
            "assert_equal(true, candidate.call([6, 5, 4, 4]))",
            "assert_equal(true, candidate.call([1, 2, 2, 3]))",
            "assert_equal(false, candidate.call([1, 3, 2]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "69",
        "title": "is_sublist",
        "text": "Write a function to check whether an array contains the given subarray or not.",
        "code": "def is_sublist(l, s)\n    return len(l) == len(s) and all(l[i] == s[i] for i in range(len(l)))\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_is_sublist",
            "candidate = method(:is_sublist)",
            "assert_equal(false, candidate.call([2, 4, 3, 5, 7], [3, 7]))",
            "assert_equal(true, candidate.call([2, 4, 3, 5, 7], [4, 3]))",
            "assert_equal(false, candidate.call([2, 4, 3, 5, 7], [1, 6]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "6",
        "title": "differ_At_One_Bit_Pos",
        "text": "Write a rbthon function to check whether the two numbers differ at one bit position only or not.",
        "code": "def differ_At_One_Bit_Pos(a, b)\n    # Write a rbthon function to check whether the two numbers differ at one bit position only or not.\n    # Return the difference between the two numbers.\n    return (a - b) & (a & b)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_differ_At_One_Bit_Pos",
            "candidate = method(:differ_At_One_Bit_Pos)",
            "assert_equal(true, candidate.call(13, 9))",
            "assert_equal(false, candidate.call(15, 8))",
            "assert_equal(false, candidate.call(2, 4))",
            "assert_equal(true, candidate.call(2, 3))",
            "assert_equal(true, candidate.call(5, 1))",
            "assert_equal(true, candidate.call(1, 5))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "70",
        "title": "get_equal",
        "text": "Write a function to find whether all the given arrays have equal length or not.",
        "code": "def get_equal(input)\n    # Write a function to find whether all the given arrays have equal length or not.\n    # The function should return True if all the given arrays have equal length,\n    # False otherwise.\n    # The function should return False if any of the given arrays have different length.\n    # The function should return True if all the given arrays have equal length,\n    # False otherwise.\n    # The function should return False if any of the given arrays have different length.\n    # The function should return True if all the given arrays have equal length,\n    # False otherwise.\n    # The function should return False if any of the given arrays have different length.\n    # The function should return True if all the given arrays have equal length,\n    # False otherwise.\n    # The function should return False if any of the given arrays have different length.\n    # The function should return True if all the given arrays have equal length,\n    # False otherwise.\n    # The function should return False if any of the given arrays have different length.\n    # The function should return True if all the given arrays have equal length,\n    # False otherwise.\n    # The function should return False if any of the given arrays have different length.\n    # The function should return True if all the given arrays have equal length,\n    # False otherwise.\n    # The function should return False if any of the given arrays have different length.\n    # The function should return True if all the given arrays have equal length,\n    # False otherwise.\n    # The function should return False if any of the given arrays have different length.\n    # The function should return True if all the given arrays have equal length,\n    # False otherwise.\n    # The function should return False if any of the given arrays have different length.\n    # The function should return True if all the given arrays have equal length,\n    # False otherwise.\n    # The function should return False if any of the given arrays have different length.\n    # The function should return True if all the given arrays have equal length,\n    # False otherwise.\n    # The function should return False if any of the given arrays have different length.\n    # The function should return True if all the given arrays have equal length,\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_get_equal",
            "candidate = method(:get_equal)",
            "assert_equal(true, candidate.call([[11, 22, 33], [44, 55, 66]]))",
            "assert_equal(false, candidate.call([[1, 2, 3], [4, 5, 6, 7]]))",
            "assert_equal(true, candidate.call([[1, 2], [3, 4]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "71",
        "title": "comb_sort",
        "text": "Write a function to sort an array of elements.",
        "code": "def comb_sort(nums)\n    # Sort the array of elements.\n    for i in range(len(nums)):\n        j = i + 1\n        while j < len(nums) and nums[j] < nums[i]:\n            nums[i], nums[j] = nums[j], nums[i]\n            j += 1\n        nums[i], nums[j] = nums[j], nums[i]\n    return nums\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_comb_sort",
            "candidate = method(:comb_sort)",
            "assert_equal([5, 15, 25, 37, 79], candidate.call([5, 15, 37, 25, 79]))",
            "assert_equal([15, 19, 22, 32, 41], candidate.call([41, 32, 15, 19, 22]))",
            "assert_equal([13, 15, 47, 99], candidate.call([99, 15, 13, 47]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "720",
        "title": "add_dict_to_tuple",
        "text": "Write a function to add a hash to the array. The output should be an array.",
        "code": "def add_dict_to_tuple(test_tup, test_dict)\n    # Add the test_dict to the test_tup.\n    test_tup[test_dict] = test_dict\n    # Return the test_tup.\n    return test_tup\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_add_dict_to_tuple",
            "candidate = method(:add_dict_to_tuple)",
            "assert_equal([4, 5, 6, {\"MSAM\" => 1, \"is\" => 2, \"best\" => 3}], candidate.call([4, 5, 6], {\"MSAM\" => 1, \"is\" => 2, \"best\" => 3}))",
            "assert_equal([1, 2, 3, {\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4}], candidate.call([1, 2, 3], {\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4}))",
            "assert_equal([8, 9, 10, {\"POS\" => 3, \"is\" => 4, \"Okay\" => 5}], candidate.call([8, 9, 10], {\"POS\" => 3, \"is\" => 4, \"Okay\" => 5}))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "721",
        "title": "maxAverageOfPath",
        "text": "Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
        "code": "def maxAverageOfPath(cost)\n\t\n\t# Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\ndef maxAverageOfPath(cost)\n\t\n\t# Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\ndef maxAverageOfPath(cost)\n\t\n\t# Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\ndef maxAverageOfPath(cost)\n\t\n\t# Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\ndef maxAverageOfPath(cost)\n\t\n\t# Given\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_maxAverageOfPath",
            "candidate = method(:maxAverageOfPath)",
            "assert_equal(5.2, candidate.call([[1, 2, 3], [6, 5, 4], [7, 3, 9]]))",
            "assert_equal(6.2, candidate.call([[2, 3, 4], [7, 6, 5], [8, 4, 10]]))",
            "assert_equal(7.2, candidate.call([[3, 4, 5], [8, 7, 6], [9, 5, 11]]))",
            "assert_equal(5.8, candidate.call([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "722",
        "title": "filter_data",
        "text": "The input is given as - a hash with a student name as a key and an array of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
        "code": "def filter_data(students, h, w)\n    # The input is given as - a hash with a student name as a key and an array of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\ndef filter_minimal_data(students, h, w)\n    # The input is given as - a hash with a student name as a key and an array of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\ndef filter_minimal_height_data(students, h, w)\n    # The input is given as - a hash with a student name as a key and an array of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\ndef filter_minimal_weight_data(students, h, w)\n    # The input is given as - a hash with a student name as a key and an array of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\ndef filter_minimal_height_weight_data(students, h, w)\n    # The input is given as - a hash with a student name as a key and an array of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\ndef filter_minimal_weight_height_weight_data(students, h, w)\n    # The input is given as - a hash with a student name as a key and an array of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_filter_data",
            "candidate = method(:filter_data)",
            "assert_equal({\"Cierra Vega\" => [6.2, 70]}, candidate.call({\"Cierra Vega\" => [6.2, 70], \"Alden Cantrell\" => [5.9, 65], \"Kierra Gentry\" => [6.0, 68], \"Pierre Cox\" => [5.8, 66]}, 6.0, 70))",
            "assert_equal({\"Cierra Vega\" => [6.2, 70], \"Kierra Gentry\" => [6.0, 68]}, candidate.call({\"Cierra Vega\" => [6.2, 70], \"Alden Cantrell\" => [5.9, 65], \"Kierra Gentry\" => [6.0, 68], \"Pierre Cox\" => [5.8, 66]}, 5.9, 67))",
            "assert_equal({\"Cierra Vega\" => [6.2, 70], \"Alden Cantrell\" => [5.9, 65], \"Kierra Gentry\" => [6.0, 68], \"Pierre Cox\" => [5.8, 66]}, candidate.call({\"Cierra Vega\" => [6.2, 70], \"Alden Cantrell\" => [5.9, 65], \"Kierra Gentry\" => [6.0, 68], \"Pierre Cox\" => [5.8, 66]}, 5.7, 64))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "723",
        "title": "count_same_pair",
        "text": "The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.",
        "code": "def count_same_pair(nums1, nums2)\n    # The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\n    # The output is defined as a list of the same length. Write a function to count indices where the arrays have the same values.\n    # The output is defined as a list of the same length. Write a function to count indices where the arrays have the same values.\n    # The output is defined as a list of the same length. Write a function to count indices where the arrays have the same values.\n    # The output is defined as a list of the same length. Write a function to count indices where the arrays have the same values.\n    # The output is defined as a list of the same length. Write a function to count indices where the arrays have the same values.\n    # The output is defined as a list of the same length. Write a function to count indices where the arrays have the same values.\n    # The output is defined as a list of the same length. Write a function to count indices where the arrays have the same values.\n    # The output is defined as a list of the same length. Write a function to count indices where the arrays have the same values.\n    # The output is defined as a list of the same length. Write a function to count indices where the arrays have the same values.\n    # The output is defined as a list of the same length. Write a function to count indices where the arrays have the same values.\n    # The output is defined as a list of the same length. Write a function to count indices where the arrays have the same values.\n    # The output is defined as a list of the same length. Write a function to count indices where the arrays have the same values.\n    # The output is defined as a list of the same length. Write a function to count indices where the arrays have the same values.\n    # The output is defined as a list of the same length. Write a function to count indices where the arrays have the same values.\n    # The output is defined as a list of the same length. Write a function to count indices where the arrays have the same values.\n    # The output\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count_same_pair",
            "candidate = method(:count_same_pair)",
            "assert_equal(4, candidate.call([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]))",
            "assert_equal(11, candidate.call([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]))",
            "assert_equal(1, candidate.call([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]))",
            "assert_equal(3, candidate.call([0, 1, 1, 2], [0, 1, 2, 2]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "724",
        "title": "power_base_sum",
        "text": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
        "code": "def power_base_sum(base, power)\n    # Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum_2(base, power)\n    # Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum_3(base, power)\n    # Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum_4(base, power)\n    # Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum_5(base, power)\n    # Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum_6(base, power)\n    # Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum_7(base, power)\n    # Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum_8(base, power)\n    # Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum_9(base, power)\n    # Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum_10(base, power)\n    # Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum_11(base, power)\n    # Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum_12(base, power)\n    # Write a function that takes base and power as\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_power_base_sum",
            "candidate = method(:power_base_sum)",
            "assert_equal(115, candidate.call(2, 100))",
            "assert_equal(37, candidate.call(8, 10))",
            "assert_equal(62, candidate.call(8, 15))",
            "assert_equal(9, candidate.call(3, 3))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "725",
        "title": "extract_quotation",
        "text": "Write a function to extract values between quotation marks \" \" of the given string.",
        "code": "def extract_quotation(text1)\n    # Extract the first word from the given string.\n    return text1.split(' ')[0]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_extract_quotation",
            "candidate = method(:extract_quotation)",
            "assert_equal([\"A53\", \"multi\", \"Processor\"], candidate.call(\"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\"))",
            "assert_equal([\"favorite\", \"apps\"], candidate.call(\"Cast your \"favorite\" entertainment \"apps\"\"))",
            "assert_equal([\"4k Ultra HD\", \"HDR 10\"], candidate.call(\"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\"))",
            "assert_equal([], candidate.call(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "726",
        "title": "multiply_elements",
        "text": "Write a function that takes as input an array of numbers (t_1,...,t_{N+1}) and returns an array of length N where the i-th element of the array is equal to t_i * t_{i+1}.",
        "code": "def multiply_elements(test_tup)\n    return test_tup[0] * test_tup[1]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_multiply_elements",
            "candidate = method(:multiply_elements)",
            "assert_equal([5, 35, 56, 80], candidate.call([1, 5, 7, 8, 10]))",
            "assert_equal([8, 20, 30, 42], candidate.call([2, 4, 5, 6, 7]))",
            "assert_equal([156, 182, 126, 135], candidate.call([12, 13, 14, 9, 15]))",
            "assert_equal([], candidate.call([12]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "728",
        "title": "sum_list",
        "text": "Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
        "code": "def sum_list(lst1, lst2)\n    return sum(lst1) + sum(lst2)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sum_list",
            "candidate = method(:sum_list)",
            "assert_equal([25, 45, 65], candidate.call([10, 20, 30], [15, 25, 35]))",
            "assert_equal([6, 8, 10], candidate.call([1, 2, 3], [5, 6, 7]))",
            "assert_equal([30, 65, 105], candidate.call([15, 20, 30], [15, 45, 75]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "72",
        "title": "dif_Square",
        "text": "Write a rbthon function to check whether the given number can be represented as the difference of two squares or not.",
        "code": "def dif_Square(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return -1\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_dif_Square",
            "candidate = method(:dif_Square)",
            "assert_equal(true, candidate.call(5))",
            "assert_equal(false, candidate.call(10))",
            "assert_equal(true, candidate.call(15))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "730",
        "title": "consecutive_duplicates",
        "text": "Write a function to remove consecutive duplicates of a given array.",
        "code": "def consecutive_duplicates(nums)\n    \"\"\"\n    return [i for i in nums if i not in nums]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_consecutive_duplicates",
            "candidate = method(:consecutive_duplicates)",
            "assert_equal([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))",
            "assert_equal([10, 15, 19, 18, 17, 26, 17, 18, 10], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))",
            "assert_equal([\"a\", \"b\", \"c\", \"d\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))",
            "assert_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "731",
        "title": "lateralsurface_cone",
        "text": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
        "code": "def lateralsurface_cone(r, h)\n    \n    # Find the lateral surface area of a cone given radius r and the height h.\n    return r*h\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_lateralsurface_cone",
            "candidate = method(:lateralsurface_cone)",
            "assert_equal(204.20352248333654, candidate.call(5, 12))",
            "assert_equal(566.3586699569488, candidate.call(10, 15))",
            "assert_equal(1521.8090132193388, candidate.call(19, 17))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "732",
        "title": "replace_specialchar",
        "text": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "code": "def replace_specialchar(text)\n    \"\"\"\n    text = text.replace(\" \", \"\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_replace_specialchar",
            "candidate = method(:replace_specialchar)",
            "assert_equal(\"Python:language::Programming:language:\", candidate.call(\"Python language, Programming language.\"))",
            "assert_equal(\"a:b:c:d:e:f\", candidate.call(\"a b c,d e f\"))",
            "assert_equal(\"ram:reshma:ram:rahim\", candidate.call(\"ram reshma,ram rahim\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "733",
        "title": "find_first_occurrence",
        "text": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "code": "def find_first_occurrence(a, x)\n    for i in range(len(a)):\n        if a[i] == x:\n            return i\n    return -1\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_first_occurrence",
            "candidate = method(:find_first_occurrence)",
            "assert_equal(1, candidate.call([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))",
            "assert_equal(2, candidate.call([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5))",
            "assert_equal(4, candidate.call([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "734",
        "title": "sum_Of_Subarray_Prod",
        "text": "Write a rbthon function to find sum of products of all possible subarrays of a given array. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/",
        "code": "def sum_Of_Subarray_Prod(arr)\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sum_Of_Subarray_Prod",
            "candidate = method(:sum_Of_Subarray_Prod)",
            "assert_equal(20, candidate.call([1, 2, 3]))",
            "assert_equal(5, candidate.call([1, 2]))",
            "assert_equal(84, candidate.call([1, 2, 3, 4]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "735",
        "title": "toggle_middle_bits",
        "text": "Write a rbthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
        "code": "def toggle_middle_bits(n)\n    if n == 0:\n        return 0\n    else:\n        return n - 1\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_toggle_middle_bits",
            "candidate = method(:toggle_middle_bits)",
            "assert_equal(15, candidate.call(9))",
            "assert_equal(12, candidate.call(10))",
            "assert_equal(13, candidate.call(11))",
            "assert_equal(127, candidate.call(65))",
            "assert_equal(115, candidate.call(77))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "736",
        "title": "left_insertion",
        "text": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-data-structure-exercise-24.php",
        "code": "def left_insertion(a, x)\n    if x < a:\n        return x\n    else:\n        return a\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_left_insertion",
            "candidate = method(:left_insertion)",
            "assert_equal(4, candidate.call([1, 2, 4, 5], 6))",
            "assert_equal(2, candidate.call([1, 2, 4, 5], 3))",
            "assert_equal(4, candidate.call([1, 2, 4, 5], 7))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "737",
        "title": "check_str",
        "text": "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "code": "def check_str(string)\n    if string[0] == 'a' or string[0] == 'e' or string[0] == 'i' or string[0] == 'o' or string[0] == 'u':\n        return True\n    else:\n        return False\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_check_str",
            "candidate = method(:check_str)",
            "assert_equal(true, candidate.call(\"annie\"))",
            "assert_equal(false, candidate.call(\"dawood\"))",
            "assert_equal(true, candidate.call(\"Else\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "738",
        "title": "geometric_sum",
        "text": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/rbthon-exercises/data-structures-and-algorithms/rbthon-recursion-exercise-9.php",
        "code": "def geometric_sum(n)\n    sum = 0\n    for i in range(1, n):\n        sum += i\n    return sum\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_geometric_sum",
            "candidate = method(:geometric_sum)",
            "assert_equal(1.9921875, candidate.call(7))",
            "assert_equal(1.9375, candidate.call(4))",
            "assert_equal(1.99609375, candidate.call(8))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "739",
        "title": "find_Index",
        "text": "Write a rbthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
        "code": "def find_Index(n)\n    for i in range(1, n+1):\n        if n % i == 0:\n            return i\n    return -1\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_Index",
            "candidate = method(:find_Index)",
            "assert_equal(4, candidate.call(2))",
            "assert_equal(14, candidate.call(3))",
            "assert_equal(45, candidate.call(4))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "740",
        "title": "tuple_to_dict",
        "text": "Write a function to convert the given array to a key-value hash using adjacent elements. https://www.geeksforgeeks.org/rbthon-convert-array-to-adjacent-pair-hash/",
        "code": "def tuple_to_dict(test_tup)\n    return {tuple_to_dict(tuple_tup[0])[0]: tuple_tup[1] for tuple_tup in test_tup}\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_tuple_to_dict",
            "candidate = method(:tuple_to_dict)",
            "assert_equal({1 => 5, 7 => 10, 13 => 5}, candidate.call([1, 5, 7, 10, 13, 5]))",
            "assert_equal({1 => 2, 3 => 4, 5 => 6}, candidate.call([1, 2, 3, 4, 5, 6]))",
            "assert_equal({7 => 8, 9 => 10, 11 => 12}, candidate.call([7, 8, 9, 10, 11, 12]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "741",
        "title": "all_Characters_Same",
        "text": "Write a rbthon function to check whether all the characters are same or not.",
        "code": "def all_Characters_Same(s)\n    \"\"\"\n    return all(c in s for c in s)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_all_Characters_Same",
            "candidate = method(:all_Characters_Same)",
            "assert_equal(false, candidate.call(\"python\"))",
            "assert_equal(true, candidate.call(\"aaa\"))",
            "assert_equal(false, candidate.call(\"data\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "742",
        "title": "area_tetrahedron",
        "text": "Write a function to caluclate the area of a tetrahedron.",
        "code": "def area_tetrahedron(side)\n    \"\"\"\n    Calculate the area of a tetrahedron.\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_area_tetrahedron",
            "candidate = method(:area_tetrahedron)",
            "assert_equal(15.588457268119894, candidate.call(3))",
            "assert_equal(692.8203230275509, candidate.call(20))",
            "assert_equal(173.20508075688772, candidate.call(10))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "743",
        "title": "rotate_right",
        "text": "Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/rbthon-program-right-rotate-array-n/",
        "code": "def rotate_right(list, m)\n    for i in range(len(list)):\n        list[i] = list[i] + list[i-m]\n    return list\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_rotate_right",
            "candidate = method(:rotate_right)",
            "assert_equal([8, 9, 10, 1, 2, 3, 4, 5, 6, 7], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))",
            "assert_equal([9, 10, 1, 2, 3, 4, 5, 6, 7, 8], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))",
            "assert_equal([6, 7, 8, 9, 10, 1, 2, 3, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "744",
        "title": "check_none",
        "text": "Write a function to check if the given array has any none value or not.",
        "code": "def check_none(test_tup)\n    if test_tup[0] == None:\n        return True\n    else:\n        return False\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_check_none",
            "candidate = method(:check_none)",
            "assert_equal(true, candidate.call([10, 4, 5, 6, nil]))",
            "assert_equal(false, candidate.call([7, 8, 9, 11, 14]))",
            "assert_equal(true, candidate.call([1, 2, 3, 4, nil]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "745",
        "title": "divisible_by_digits",
        "text": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rbthon-exercises/lambda/rbthon-lambda-exercise-24.php",
        "code": "def divisible_by_digits(startnum, endnum)\n    # Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    # Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    # Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    # Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    # Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    # Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    # Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    # Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    # Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    # Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    # Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    # Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    # Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    # Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_divisible_by_digits",
            "candidate = method(:divisible_by_digits)",
            "assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22], candidate.call(1, 22))",
            "assert_equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], candidate.call(1, 15))",
            "assert_equal([22, 24], candidate.call(20, 25))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "746",
        "title": "sector_area",
        "text": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return nil if the angle is larger than 360 degrees.",
        "code": "def sector_area(r, a)\n{\n\tif (a > 360)\n\t\treturn nil\n\treturn r * r * r * r\n}\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sector_area",
            "candidate = method(:sector_area)",
            "assert_equal(6.283185307179586, candidate.call(4, 45))",
            "assert_equal(31.808625617596654, candidate.call(9, 45))",
            "assert_equal(nil, candidate.call(9, 361))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "747",
        "title": "lcs_of_three",
        "text": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/",
        "code": "def lcs_of_three(x, y, z)\n    if x == y and z == y:\n        return \"L\"\n    if x == y and z == z:\n        return \"L\"\n    if x == z and y == z:\n        return \"L\"\n    if x == z and y == y:\n        return \"L\"\n    if x == y and z == z:\n        return \"L\"\n    if x == z and y == z:\n        return \"L\"\n    if x == z and y == y:\n        return \"L\"\n    if x == y and z == z:\n        return \"L\"\n    if x == z and y == z:\n        return \"L\"\n    if x == y and z == z:\n        return \"L\"\n    if x == z and y == z:\n        return \"L\"\n    if x == z and y == y:\n        return \"L\"\n    if x == y and z == z:\n        return \"L\"\n    if x == z and y == z:\n        return \"L\"\n    if x == z and y == y:\n        return \"L\"\n    if x == y and z == z:\n        return \"L\"\n    if x == z and y == z:\n        return \"L\"\n    if x == y and z == z:\n        return \"L\"\n    if x == z and y == y:\n        return \"L\"\n    if x == z and y == z:\n        return \"L\"\n    if x == y and z == z:\n        return \"L\"\n    if x == z and y == z:\n        return \"L\"\n    if x == y and z == z:\n        return \"L\"\n    if x == z and y == z:\n        return \"L\"\n    if x == y and z == z:\n        return \"L\"\n    if x == z and y == z:\n        return \"L\"\n    if x == z and y == y:\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_lcs_of_three",
            "candidate = method(:lcs_of_three)",
            "assert_equal(2, candidate.call(\"AGGT12\", \"12TXAYB\", \"12XBA\"))",
            "assert_equal(5, candidate.call(\"Reels\", \"Reelsfor\", \"ReelsforReels\"))",
            "assert_equal(3, candidate.call(\"abcd1e2\", \"bc12ea\", \"bd1ea\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "748",
        "title": "capital_words_spaces",
        "text": "Write a function to put spaces between words starting with capital letters in a given string.",
        "code": "def capital_words_spaces(str1)\n    # Write a function to put spaces between words starting with capital letters in a given string.\ndef capital_words_spaces_2(str1)\n    # Write a function to put spaces between words starting with capital letters in a given string.\ndef capital_words_spaces_3(str1)\n    # Write a function to put spaces between words starting with capital letters in a given string.\ndef capital_words_spaces_4(str1)\n    # Write a function to put spaces between words starting with capital letters in a given string.\ndef capital_words_spaces_5(str1)\n    # Write a function to put spaces between words starting with capital letters in a given string.\ndef capital_words_spaces_6(str1)\n    # Write a function to put spaces between words starting with capital letters in a given string.\ndef capital_words_spaces_7(str1)\n    # Write a function to put spaces between words starting with capital letters in a given string.\ndef capital_words_spaces_8(str1)\n    # Write a function to put spaces between words starting with capital letters in a given string.\ndef capital_words_spaces_9(str1)\n    # Write a function to put spaces between words starting with capital letters in a given string.\ndef capital_words_spaces_10(str1)\n    # Write a function to put spaces between words starting with capital letters in a given string.\ndef capital_words_spaces_11(str1)\n    # Write a function to put spaces between words starting with capital letters in a given string.\ndef capital_words_spaces_12(str1)\n    # Write a function to put spaces between words starting with capital letters in a given string.\ndef capital_words_spaces_13(str1)\n    # Write a function to put spaces between words starting with capital letters in a given string.\ndef capital_words_spaces_14(str1)\n    # Write a function to put spaces between words starting with capital letters in a given string.\ndef capital_words_spaces_15(str1)\n    # Write a function\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_capital_words_spaces",
            "candidate = method(:capital_words_spaces)",
            "assert_equal(\"Python\", candidate.call(\"Python\"))",
            "assert_equal(\"Python Programming Examples\", candidate.call(\"PythonProgrammingExamples\"))",
            "assert_equal(\"Get Ready To Be Coding Freak\", candidate.call(\"GetReadyToBeCodingFreak\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "749",
        "title": "sort_numeric_strings",
        "text": "Write a function to sort a given array of strings of numbers numerically. https://www.geeksforgeeks.org/rbthon-sort-numeric-strings-in-a-array/",
        "code": "def sort_numeric_strings(nums_str)\n    for i in range(len(nums_str)):\n        nums_str[i] = nums_str[i]\n        nums_str[i] = nums_str[i]\n        nums_str[i] = nums_str[i]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sort_numeric_strings",
            "candidate = method(:sort_numeric_strings)",
            "assert_equal([-500, -12, 0, 4, 7, 12, 45, 100, 200], candidate.call([\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"]))",
            "assert_equal([1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9], candidate.call([\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"]))",
            "assert_equal([1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17], candidate.call([\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "74",
        "title": "is_samepatterns",
        "text": "Write a function to check whether it follows the sequence given in the patterns array.",
        "code": "def is_samepatterns(colors, patterns)\n    \"\"\"\n    return all(colors == pattern for pattern in patterns)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_is_samepatterns",
            "candidate = method(:is_samepatterns)",
            "assert_equal(true, candidate.call([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]))",
            "assert_equal(false, candidate.call([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]))",
            "assert_equal(false, candidate.call([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "750",
        "title": "add_tuple",
        "text": "Write a function to add the given array to the given array.",
        "code": "def add_tuple(test_list, test_tup)\n    # Add the given tuple to the given list.\n    test_list.append(test_tup)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_add_tuple",
            "candidate = method(:add_tuple)",
            "assert_equal([5, 6, 7, 9, 10], candidate.call([5, 6, 7], [9, 10]))",
            "assert_equal([6, 7, 8, 10, 11], candidate.call([6, 7, 8], [10, 11]))",
            "assert_equal([7, 8, 9, 11, 12], candidate.call([7, 8, 9], [11, 12]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "751",
        "title": "check_min_heap",
        "text": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/",
        "code": "def check_min_heap(arr)\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return True\n    if len(arr) == 3:\n        return True\n    if len(arr) == 4:\n        return True\n    if len(arr) == 5:\n        return True\n    if len(arr) == 6:\n        return True\n    if len(arr) == 7:\n        return True\n    if len(arr) == 8:\n        return True\n    if len(arr) == 9:\n        return True\n    if len(arr) == 10:\n        return True\n    if len(arr) == 11:\n        return True\n    if len(arr) == 12:\n        return True\n    if len(arr) == 13:\n        return True\n    if len(arr) == 14:\n        return True\n    if len(arr) == 15:\n        return True\n    if len(arr) == 16:\n        return True\n    if len(arr) == 17:\n        return True\n    if len(arr) == 18:\n        return True\n    if len(arr) == 19:\n        return True\n    if len(arr) == 20:\n        return True\n    if len(arr) == 21:\n        return True\n    if len(arr) == 22:\n        return True\n    if len(arr) == 23:\n        return True\n    if len(arr) == 24:\n        return True\n    if len(arr) == 25:\n        return True\n    if len(arr) == 26:\n        return True\n    if len(arr) == 27:\n        return True\n    if len(arr) == 28:\n        return True\n    if len(arr) == 29:\n        return True\n    if len(arr) == 30:\n        return True\n    if len(arr) == 31:\n        return True\n    \n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_check_min_heap",
            "candidate = method(:check_min_heap)",
            "assert_equal(true, candidate.call([1, 2, 3, 4, 5, 6]))",
            "assert_equal(true, candidate.call([2, 3, 4, 5, 10, 15]))",
            "assert_equal(false, candidate.call([2, 10, 4, 5, 3, 15]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "752",
        "title": "jacobsthal_num",
        "text": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...",
        "code": "def jacobsthal_num(n)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    elif n == 15:\n        return 15\n    elif n == 16:\n        return 16\n    elif n == 17:\n        return 17\n    elif n == 18:\n        return 18\n    elif n == 19:\n        return 19\n    elif n == 20:\n        return 20\n    elif n == 21:\n        return 21\n    elif n == 22:\n        return 22\n    elif n == 23:\n        return 23\n    elif n == 24:\n        return 24\n    elif n == 25:\n        return 25\n    elif n == 26:\n        return 26\n    elif n == 27:\n        return 27\n    elif n == 28:\n        return 28\n    elif n == 29:\n        return 29\n    elif n == 30:\n        return 30\n    elif n == 31:\n        return 31\n    elif n == 32:\n        return 32\n    elif n == 33:\n        return 33\n    elif n == 34:\n        return 34\n    elif n == 35:\n        return 35\n    el\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_jacobsthal_num",
            "candidate = method(:jacobsthal_num)",
            "assert_equal(11, candidate.call(5))",
            "assert_equal(1, candidate.call(2))",
            "assert_equal(5, candidate.call(4))",
            "assert_equal(2731, candidate.call(13))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "753",
        "title": "min_k",
        "text": "Write a function to find minimum k records from array array. https://www.geeksforgeeks.org/rbthon-find-minimum-k-records-from-array-array/ - in this case a verbatim corb of test cases",
        "code": "def min_k(test_list, k)\n    for i in range(len(test_list)):\n        if test_list[i] == k:\n            return i\n    return -1\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_min_k",
            "candidate = method(:min_k)",
            "assert_equal([[\"Akash\", 2], [\"Akshat\", 4]], candidate.call([[\"Manjeet\", 10], [\"Akshat\", 4], [\"Akash\", 2], [\"Nikhil\", 8]], 2))",
            "assert_equal([[\"Akash\", 3], [\"Angat\", 5], [\"Nepin\", 9]], candidate.call([[\"Sanjeev\", 11], [\"Angat\", 5], [\"Akash\", 3], [\"Nepin\", 9]], 3))",
            "assert_equal([[\"Ayesha\", 9]], candidate.call([[\"tanmay\", 14], [\"Amer\", 11], [\"Ayesha\", 9], [\"SKD\", 16]], 1))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "754",
        "title": "extract_index_list",
        "text": "We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.",
        "code": "def extract_index_list(l1, l2, l3)\n    # We assume that l1 and l2 are arrays of the same length.\n    # We assume that l3 is an array of the same length.\n    # We assume that l1 and l2 are arrays of the same length.\n    # We assume that l3 is an array of the same length.\n    # We assume that l1 and l2 are arrays of the same length.\n    # We assume that l3 is an array of the same length.\n    # We assume that l1 and l2 are arrays of the same length.\n    # We assume that l3 is an array of the same length.\n    # We assume that l1 and l2 are arrays of the same length.\n    # We assume that l3 is an array of the same length.\n    # We assume that l1 and l2 are arrays of the same length.\n    # We assume that l3 is an array of the same length.\n    # We assume that l1 and l2 are arrays of the same length.\n    # We assume that l3 is an array of the same length.\n    # We assume that l1 and l2 are arrays of the same length.\n    # We assume that l3 is an array of the same length.\n    # We assume that l1 and l2 are arrays of the same length.\n    # We assume that l3 is an array of the same length.\n    # We assume that l1 and l2 are arrays of the same length.\n    # We assume that l3 is an array of the same length.\n    # We assume that l1 and l2 are arrays of the same length.\n    # We assume that l3 is an array of the same length.\n    # We assume that l1 and l2 are arrays of the same length.\n    # We assume that l3 is an array of the same length.\n    # We assume that l1 and l2 are arrays of the same length.\n    # We assume that l3 is an array of the same length.\n    # We assume\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_extract_index_list",
            "candidate = method(:extract_index_list)",
            "assert_equal([1, 7], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))",
            "assert_equal([1, 6], candidate.call([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]))",
            "assert_equal([1, 5], candidate.call([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))",
            "assert_equal([], candidate.call([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "755",
        "title": "second_smallest",
        "text": "Write a function to find the second smallest number in an array.",
        "code": "def second_smallest(numbers)\n    # Write a function to find the second smallest number in an array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number in the array.\n    # The function should return the smallest number\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_second_smallest",
            "candidate = method(:second_smallest)",
            "assert_equal(-2, candidate.call([1, 2, -8, -2, 0, -2]))",
            "assert_equal(-0.5, candidate.call([1, 1, -0.5, 0, 2, -2, -2]))",
            "assert_equal(nil, candidate.call([2, 2]))",
            "assert_equal(nil, candidate.call([2, 2, 2]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "756",
        "title": "text_match_zero_one",
        "text": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/rbthon-exercises/re/rbthon-re-exercise-3.php",
        "code": "def text_match_zero_one(text)\n    # This function matches a string that has an 'a' followed by one or more 'b's.\n    # It returns the number of times the string has an 'a' followed by one or more 'b's.\n    # It returns 0 if the string does not have an 'a' followed by one or more 'b's.\n    # It returns 1 if the string has an 'a' followed by one or more 'b's.\n    # It returns 2 if the string has an 'a' followed by one or more 'b's.\n    # It returns 3 if the string has an 'a' followed by one or more 'b's.\n    # It returns 4 if the string has an 'a' followed by one or more 'b's.\n    # It returns 5 if the string has an 'a' followed by one or more 'b's.\n    # It returns 6 if the string has an 'a' followed by one or more 'b's.\n    # It returns 7 if the string has an 'a' followed by one or more 'b's.\n    # It returns 8 if the string has an 'a' followed by one or more 'b's.\n    # It returns 9 if the string has an 'a' followed by one or more 'b's.\n    # It returns 10 if the string has an 'a' followed by one or more 'b's.\n    # It returns 11 if the string has an 'a' followed by one or more 'b's.\n    # It returns 12 if the string has an 'a' followed by one or more 'b's.\n    # It returns 13 if the string has an 'a' followed by one or more 'b's.\n    # It returns 14 if the string has an 'a' followed by one or more 'b's.\n    # It returns 15 if the string has an 'a' followed by one or more 'b's.\n    # It returns 16 if the string has an 'a' followed by one or more 'b's.\n    # It\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_text_match_zero_one",
            "candidate = method(:text_match_zero_one)",
            "assert_equal(false, candidate.call(\"ac\"))",
            "assert_equal(false, candidate.call(\"dc\"))",
            "assert_equal(true, candidate.call(\"abbbba\"))",
            "assert_equal(true, candidate.call(\"dsabbbba\"))",
            "assert_equal(false, candidate.call(\"asbbbba\"))",
            "assert_equal(true, candidate.call(\"abaaa\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "757",
        "title": "count_reverse_pairs",
        "text": "Write a function to count the pairs of reverse strings in the given string array. https://www.geeksforgeeks.org/rbthon-program-to-count-the-pairs-of-reverse-strings/",
        "code": "def count_reverse_pairs(test_list)\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i].upper()\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i].lower()\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i].replace(' ', '')\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i].replace('-', '')\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i].replace('+', '')\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i].replace('/', '')\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i].replace('\\\\', '')\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i].replace('*', '')\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i].replace('?', '')\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i].replace('<', '')\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i].replace('>', '')\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i].replace('|', '')\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i].replace('&', '')\n    for i\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count_reverse_pairs",
            "candidate = method(:count_reverse_pairs)",
            "assert_equal(2, candidate.call([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]))",
            "assert_equal(1, candidate.call([\"geeks\", \"best\", \"for\", \"skeeg\"]))",
            "assert_equal(2, candidate.call([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "759",
        "title": "is_decimal",
        "text": "Write a function to check whether a given string is a decimal number with a precision of 2.",
        "code": "def is_decimal(num)\n    \"\"\"\n    if not isinstance(num, str):\n        return False\n    if len(num) < 2:\n        return False\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_is_decimal",
            "candidate = method(:is_decimal)",
            "assert_equal(true, candidate.call(\"123.11\"))",
            "assert_equal(false, candidate.call(\"e666.86\"))",
            "assert_equal(false, candidate.call(\"3.124587\"))",
            "assert_equal(true, candidate.call(\"1.11\"))",
            "assert_equal(false, candidate.call(\"1.1.11\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "75",
        "title": "find_tuples",
        "text": "Write a function to find arrays which have all elements divisible by k from the given array of arrays.",
        "code": "def find_tuples(test_list, k)\n    \n    # Create a list of tuples which have all elements divisible by k.\n    test_list = [tuple(test_list)]\n    \n    # Find all tuples which have all elements divisible by k.\n    for test in test_list:\n        if test[0] % k == 0:\n            test_list.append(test)\n    \n    # Return the list of tuples which have all elements divisible by k.\n    return test_list\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_tuples",
            "candidate = method(:find_tuples)",
            "assert_equal([[6, 24, 12]], candidate.call([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6))",
            "assert_equal([[5, 25, 30]], candidate.call([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5))",
            "assert_equal([[8, 16, 4]], candidate.call([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "760",
        "title": "unique_Element",
        "text": "Write a rbthon function to check whether an array of numbers contains only one distinct element or not.",
        "code": "def unique_Element(arr)\n    # Return the number of distinct elements.\n    return len(set(arr))\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_unique_Element",
            "candidate = method(:unique_Element)",
            "assert_equal(true, candidate.call([1, 1, 1]))",
            "assert_equal(false, candidate.call([1, 2, 1, 2]))",
            "assert_equal(false, candidate.call([1, 2, 3, 4, 5]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "762",
        "title": "check_monthnumber_number",
        "text": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "code": "def check_monthnumber_number(monthnum3)\n{\n    if (monthnum3 == 1)\n    {\n        return True;\n    }\n    else if (monthnum3 == 2)\n    {\n        return True;\n    }\n    else if (monthnum3 == 3)\n    {\n        return True;\n    }\n    else if (monthnum3 == 4)\n    {\n        return True;\n    }\n    else if (monthnum3 == 5)\n    {\n        return True;\n    }\n    else if (monthnum3 == 6)\n    {\n        return True;\n    }\n    else if (monthnum3 == 7)\n    {\n        return True;\n    }\n    else if (monthnum3 == 8)\n    {\n        return True;\n    }\n    else if (monthnum3 == 9)\n    {\n        return True;\n    }\n    else if (monthnum3 == 10)\n    {\n        return True;\n    }\n    else if (monthnum3 == 11)\n    {\n        return True;\n    }\n    else if (monthnum3 == 12)\n    {\n        return True;\n    }\n    else\n    {\n        return False;\n    }\n}\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_check_monthnumber_number",
            "candidate = method(:check_monthnumber_number)",
            "assert_equal(true, candidate.call(6))",
            "assert_equal(false, candidate.call(2))",
            "assert_equal(false, candidate.call(12))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "763",
        "title": "find_min_diff",
        "text": "Write a rbthon function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
        "code": "def find_min_diff(arr, n)\n    min_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                min_diff = min(min_diff, arr[i]-arr[j])\n    return min_diff\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_min_diff",
            "candidate = method(:find_min_diff)",
            "assert_equal(1, candidate.call([1, 5, 3, 19, 18, 25], 6))",
            "assert_equal(1, candidate.call([4, 3, 2, 6], 4))",
            "assert_equal(4, candidate.call([30, 5, 20, 9], 4))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "764",
        "title": "number_ctr",
        "text": "Write a rbthon function to count number of digits in a given string.",
        "code": "def number_ctr(str)\n    return str.count(str[0])\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_number_ctr",
            "candidate = method(:number_ctr)",
            "assert_equal(1, candidate.call(\"program2bedone\"))",
            "assert_equal(1, candidate.call(\"3wonders\"))",
            "assert_equal(3, candidate.call(\"123\"))",
            "assert_equal(3, candidate.call(\"3wond-1ers2\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "765",
        "title": "is_polite",
        "text": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "code": "def is_polite(n)\n    if n == 0:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_polite(n-1) and is_polite(n-2)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_is_polite",
            "candidate = method(:is_polite)",
            "assert_equal(11, candidate.call(7))",
            "assert_equal(7, candidate.call(4))",
            "assert_equal(13, candidate.call(9))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "766",
        "title": "pair_wise",
        "text": "Write a function to return an array of all pairs of consecutive items in a given array.",
        "code": "def pair_wise(l1)\n    return [i for i in l1 if i not in l1]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_pair_wise",
            "candidate = method(:pair_wise)",
            "assert_equal([[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]], candidate.call([1, 1, 2, 3, 3, 4, 4, 5]))",
            "assert_equal([[1, 5], [5, 7], [7, 9], [9, 10]], candidate.call([1, 5, 7, 9, 10]))",
            "assert_equal([[5, 1], [1, 9], [9, 7], [7, 10]], candidate.call([5, 1, 9, 7, 10]))",
            "assert_equal([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "767",
        "title": "get_pairs_count",
        "text": "Write a rbthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input an array of numbers and the sum,",
        "code": "def get_pairs_count(arr, sum)\n    # Write a rbthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input an array of numbers and the sum,\n    # and the function returns a list of pairs whose sum is equal to \u2018sum\u2019.\n    # The function gets as input an array of numbers and the sum, and the function returns a list of pairs whose sum is equal to \u2018sum\u2019.\n    # The function gets as input an array of numbers and the sum, and the function returns a list of pairs whose sum is equal to \u2018sum\u2019.\n    # The function gets as input an array of numbers and the sum, and the function returns a list of pairs whose sum is equal to \u2018sum\u2019.\n    # The function gets as input an array of numbers and the sum, and the function returns a list of pairs whose sum is equal to \u2018sum\u2019.\n    # The function gets as input an array of numbers and the sum, and the function returns a list of pairs whose sum is equal to \u2018sum\u2019.\n    # The function gets as input an array of numbers and the sum, and the function returns a list of pairs whose sum is equal to \u2018sum\u2019.\n    # The function gets as input an array of numbers and the sum, and the function returns a list of pairs whose sum is equal to \u2018sum\u2019.\n    # The function gets as input an array of numbers and the sum, and the function returns a list of pairs whose sum is equal to \u2018sum\u2019.\n    # The function gets as input an array of numbers and the sum, and the function returns a list of pairs whose sum is equal to \u2018sum\u2019.\n    # The function gets as input an array of numbers and the sum, and the function returns a list of pairs whose sum is equal to \u2018sum\u2019.\n    # The function gets as input an array of numbers and the sum, and the function returns a list of pairs whose sum is equal to \u2018sum\u2019.\n    # The function gets as input an array of numbers\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_get_pairs_count",
            "candidate = method(:get_pairs_count)",
            "assert_equal(6, candidate.call([1, 1, 1, 1], 2))",
            "assert_equal(3, candidate.call([1, 5, 7, -1, 5], 6))",
            "assert_equal(1, candidate.call([1, -2, 3], 1))",
            "assert_equal(1, candidate.call([-1, -2, 3], -3))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "769",
        "title": "Diff",
        "text": "Write a rbthon function to get the difference between two arrays.",
        "code": "def Diff(li1, li2)\n    return li1[0] - li2[0]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_Diff",
            "candidate = method(:Diff)",
            "assert_equal([10, 20, 30, 15], candidate.call([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]))",
            "assert_equal([2, 3, 4, 5, 6, 7], candidate.call([1, 2, 3, 4, 5], [6, 7, 1]))",
            "assert_equal([2, 3, 6, 7], candidate.call([1, 2, 3], [6, 7, 1]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "770",
        "title": "odd_num_sum",
        "text": "Write a rbthon function to find the sum of fourth power of first n odd natural numbers.",
        "code": "def odd_num_sum(n)\n    return sum(odd_num(n))\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_odd_num_sum",
            "candidate = method(:odd_num_sum)",
            "assert_equal(82, candidate.call(2))",
            "assert_equal(707, candidate.call(3))",
            "assert_equal(3108, candidate.call(4))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "771",
        "title": "check_expression",
        "text": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
        "code": "def check_expression(exp)\n    if not exp:\n        return False\n    if len(exp) == 1:\n        return True\n    if len(exp) == 2:\n        return True\n    if len(exp) == 3:\n        return True\n    if len(exp) == 4:\n        return True\n    if len(exp) == 5:\n        return True\n    if len(exp) == 6:\n        return True\n    if len(exp) == 7:\n        return True\n    if len(exp) == 8:\n        return True\n    if len(exp) == 9:\n        return True\n    if len(exp) == 10:\n        return True\n    return False\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_check_expression",
            "candidate = method(:check_expression)",
            "assert_equal(true, candidate.call(\"{()}[{}]\"))",
            "assert_equal(false, candidate.call(\"{()}[{]\"))",
            "assert_equal(true, candidate.call(\"{()}[{}][]({})\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "772",
        "title": "remove_length",
        "text": "Write a function to remove all the words with k length in the given string.",
        "code": "def remove_length(test_str, k)\n    # Remove all the words with k length in the given string.\n    test_str = test_str.lower()\n    test_str = test_str.replace(' ', '')\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace('+', '')\n    test_str = test_str.replace('.', '')\n    test_str = test_str.replace('/', '')\n    test_str = test_str.replace('*', '')\n    test_str = test_str.replace('?', '')\n    test_str = test_str.replace('@', '')\n    test_str = test_str.replace('%', '')\n    test_str = test_str.replace('^', '')\n    test_str = test_str.replace('&', '')\n    test_str = test_str.replace('*', '')\n    test_str = test_str.replace('?', '')\n    test_str = test_str.replace('@', '')\n    test_str = test_str.replace('%', '')\n    test_str = test_str.replace('^', '')\n    test_str = test_str.replace('&', '')\n    test_str = test_str.replace('*', '')\n    test_str = test_str.replace('?', '')\n    test_str = test_str.replace('@', '')\n    test_str = test_str.replace('%', '')\n    test_str = test_str.replace('^', '')\n    test_str = test_str.replace('&', '')\n    test_str = test_str.replace('*', '')\n    test_str = test_str.replace('?', '')\n    test_str = test_str.replace('@', '')\n    test_str = test_str.replace('%', '')\n    test_str = test_str.replace('^', '')\n    test_str = test_str\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_remove_length",
            "candidate = method(:remove_length)",
            "assert_equal(\"person is most value\", candidate.call(\"The person is most value tet\", 3))",
            "assert_equal(\"If you me about ok\", candidate.call(\"If you told me about this ok\", 4))",
            "assert_equal(\"Forces of darkeness is the\", candidate.call(\"Forces of darkeness is come into the play\", 4))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "773",
        "title": "occurance_substring",
        "text": "Write a function to find the occurrence and position of the substrings within a string. Return nil if there is no match.",
        "code": "def occurance_substring(text, pattern)\n{\n    var index = 0;\n    var pattern_len = pattern.length;\n    var pattern_index = 0;\n    var pattern_pos = 0;\n    var pattern_len_pos = 0;\n    var match = false;\n    var match_pos = 0;\n    var match_len = 0;\n    var match_pos_len = 0;\n    var match_len_pos = 0;\n    var match_pos_len_pos = 0;\n    var match_len_pos_len = 0;\n    var match_pos_len_pos_len = 0;\n    var match_len_pos_len_pos = 0;\n    var match_pos_len_pos_len_pos = 0;\n    var match_len_pos_len_pos_len = 0;\n    var match_pos_len_pos_len_pos_len = 0;\n    var match_len_pos_len_pos_len_pos = 0;\n    var match_len_pos_len_pos_len_pos_len = 0;\n    var match_len_pos_len_pos_len_pos_len_pos = 0;\n    var match_len_pos_len_pos_len_pos_len_pos_len_pos = 0;\n    var match_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos = 0;\n    var match_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos = 0;\n    var match_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_len_pos_\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_occurance_substring",
            "candidate = method(:occurance_substring)",
            "assert_equal([\"python\", 0, 6], candidate.call(\"python programming, python language\", \"python\"))",
            "assert_equal([\"programming\", 7, 18], candidate.call(\"python programming,programming language\", \"programming\"))",
            "assert_equal([\"language\", 31, 39], candidate.call(\"python programming,programming language\", \"language\"))",
            "assert_equal(nil, candidate.call(\"c++ programming, c++ language\", \"python\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "775",
        "title": "odd_position",
        "text": "Write a rbthon function to check whether every odd index contains odd numbers of a given array.",
        "code": "def odd_position(nums)\n    \"\"\"\n    return sum(nums[i % 2] == 1 for i in range(len(nums))) == len(nums)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_odd_position",
            "candidate = method(:odd_position)",
            "assert_equal(true, candidate.call([2, 1, 4, 3, 6, 7, 6, 3]))",
            "assert_equal(true, candidate.call([4, 1, 2]))",
            "assert_equal(false, candidate.call([1, 2, 3]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "776",
        "title": "count_vowels",
        "text": "Write a function to count those characters which have vowels as their neighbors in the given string.",
        "code": "def count_vowels(test_str)\n    # Count the number of vowels in the given string.\n    vowels = 0\n    for char in test_str:\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u':\n            vowels += 1\n    return vowels\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count_vowels",
            "candidate = method(:count_vowels)",
            "assert_equal(7, candidate.call(\"bestinstareels\"))",
            "assert_equal(12, candidate.call(\"partofthejourneyistheend\"))",
            "assert_equal(5, candidate.call(\"amazonprime\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "777",
        "title": "find_sum",
        "text": "Write a rbthon function to find the sum of non-repeated elements in a given array.",
        "code": "def find_sum(arr)\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i]!= 0:\n            sum += arr[i]\n    return sum\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_sum",
            "candidate = method(:find_sum)",
            "assert_equal(21, candidate.call([1, 2, 3, 1, 1, 4, 5, 6]))",
            "assert_equal(71, candidate.call([1, 10, 9, 4, 2, 10, 10, 45, 4]))",
            "assert_equal(78, candidate.call([12, 10, 9, 45, 2, 10, 10, 45, 10]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "778",
        "title": "pack_consecutive_duplicates",
        "text": "Write a function to pack consecutive duplicates of a given array elements into subarrays.",
        "code": "def pack_consecutive_duplicates(list1)\n    # Return a list of lists of the same length as list1, where each list contains the same number of elements.\n    # The list is sorted in ascending order.\n    # The list is packed into a single array.\n    # The array is returned as a list.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n    # The function returns a list of lists.\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_pack_consecutive_duplicates",
            "candidate = method(:pack_consecutive_duplicates)",
            "assert_equal([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]], candidate.call([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))",
            "assert_equal([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]], candidate.call([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))",
            "assert_equal([[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]], candidate.call([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "77",
        "title": "is_Diff",
        "text": "Write a rbthon function to find whether a number is divisible by 11.",
        "code": "def is_Diff(n)\n    return n % 11 == 0\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_is_Diff",
            "candidate = method(:is_Diff)",
            "assert_equal(false, candidate.call(12345))",
            "assert_equal(true, candidate.call(1212112))",
            "assert_equal(false, candidate.call(1212))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "780",
        "title": "find_combinations",
        "text": "Write a function to find the combinations of sums with arrays in the given array array. https://www.geeksforgeeks.org/rbthon-combinations-of-sum-with-arrays-in-array-array/",
        "code": "def find_combinations(test_list)\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + test_list[i]\n    return test_list\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_combinations",
            "candidate = method(:find_combinations)",
            "assert_equal([[8, 11], [7, 5], [8, 14], [11, 8], [12, 17], [11, 11]], candidate.call([[2, 4], [6, 7], [5, 1], [6, 10]]))",
            "assert_equal([[10, 13], [9, 7], [10, 16], [13, 10], [14, 19], [13, 13]], candidate.call([[3, 5], [7, 8], [6, 2], [7, 11]]))",
            "assert_equal([[12, 15], [11, 9], [12, 18], [15, 12], [16, 21], [15, 15]], candidate.call([[4, 6], [8, 9], [7, 3], [8, 12]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "781",
        "title": "count_divisors",
        "text": "Write a rbthon function to check whether the count of divisors is even. https://www.w3resource.com/rbthon-exercises/basic/rbthon-basic-1-exercise-24.php",
        "code": "def count_divisors(n)\n    if n == 1:\n        return 1\n    else:\n        return count_divisors(n-1) + count_divisors(n-2)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count_divisors",
            "candidate = method(:count_divisors)",
            "assert_equal(true, candidate.call(10))",
            "assert_equal(false, candidate.call(100))",
            "assert_equal(true, candidate.call(125))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "782",
        "title": "odd_length_sum",
        "text": "Write a rbthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/",
        "code": "def odd_length_sum(arr)\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 1:\n            sum += arr[i]\n    return sum\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_odd_length_sum",
            "candidate = method(:odd_length_sum)",
            "assert_equal(14, candidate.call([1, 2, 4]))",
            "assert_equal(15, candidate.call([1, 2, 1, 2]))",
            "assert_equal(8, candidate.call([1, 7]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "783",
        "title": "rgb_to_hsv",
        "text": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/",
        "code": "def rgb_to_hsv(r, g, b)\n    # Convert rgb color to hsv color\n    h, s, v = colorsys.rgb_to_hsv(r, g, b)\n    # Convert hsv color to rgb color\n    return colorsys.hsv_to_rgb(h, s, v)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_rgb_to_hsv",
            "candidate = method(:rgb_to_hsv)",
            "assert_equal([0.0, 0.0, 100.0], candidate.call(255, 255, 255))",
            "assert_equal([120.0, 100.0, 84.31372549019608], candidate.call(0, 215, 0))",
            "assert_equal([149.26829268292684, 95.34883720930233, 84.31372549019608], candidate.call(10, 215, 110))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "784",
        "title": "mul_even_odd",
        "text": "Write a function to find the product of first even and odd number of a given array.",
        "code": "def mul_even_odd(list1)\n    # list1 is a list of integers\n    # return the product of the first even and odd number of the list\n    # list1 is a list of integers\n    # return the product of the first even and odd number of the list\n    # list1 is a list of integers\n    # return the product of the first even and odd number of the list\n    # list1 is a list of integers\n    # return the product of the first even and odd number of the list\n    # list1 is a list of integers\n    # return the product of the first even and odd number of the list\n    # list1 is a list of integers\n    # return the product of the first even and odd number of the list\n    # list1 is a list of integers\n    # return the product of the first even and odd number of the list\n    # list1 is a list of integers\n    # return the product of the first even and odd number of the list\n    # list1 is a list of integers\n    # return the product of the first even and odd number of the list\n    # list1 is a list of integers\n    # return the product of the first even and odd number of the list\n    # list1 is a list of integers\n    # return the product of the first even and odd number of the list\n    # list1 is a list of integers\n    # return the product of the first even and odd number of the list\n    # list1 is a list of integers\n    # return the product of the first even and odd number of the list\n    # list1 is a list of integers\n    # return the product of the first even and odd number of the list\n    # list1 is a list of integers\n    # return the product of the first even and odd number of the list\n    # list1 is a list of integers\n    # return the product of the first even and odd number of the list\n    # list1 is a list of integers\n    # return the product of the first even and odd number of the list\n    # list1 is a list of integers\n    # return the product of the first even and odd number of the list\n    # list1 is a list of integers\n    # return\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_mul_even_odd",
            "candidate = method(:mul_even_odd)",
            "assert_equal(4, candidate.call([1, 3, 5, 7, 4, 1, 6, 8]))",
            "assert_equal(2, candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
            "assert_equal(10, candidate.call([1, 5, 7, 9, 10]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "785",
        "title": "tuple_str_int",
        "text": "Write a function to convert array string to integer array.",
        "code": "def tuple_str_int(test_str)\n    \"\"\"\n    Convert a string to an integer array.\n    \"\"\"\n    test_str = test_str.replace(\"[\", \"\")\n    test_str = test_str.replace(\"]\", \"\")\n    test_str = test_str.replace(\"[\", \"\")\n    test_str = test_str.replace(\"]\", \"\")\n    test_str = test_str.replace(\"[\", \"\")\n    test_str = test_str.replace(\"]\", \"\")\n    test_str = test_str.replace(\"[\", \"\")\n    test_str = test_str.replace(\"]\", \"\")\n    test_str = test_str.replace(\"[\", \"\")\n    test_str = test_str.replace(\"]\", \"\")\n    test_str = test_str.replace(\"[\", \"\")\n    test_str = test_str.replace(\"]\", \"\")\n    test_str = test_str.replace(\"[\", \"\")\n    test_str = test_str.replace(\"]\", \"\")\n    test_str = test_str.replace(\"[\", \"\")\n    test_str = test_str.replace(\"]\", \"\")\n    test_str = test_str.replace(\"[\", \"\")\n    test_str = test_str.replace(\"]\", \"\")\n    test_str = test_str.replace(\"[\", \"\")\n    test_str = test_str.replace(\"]\", \"\")\n    test_str = test_str.replace(\"[\", \"\")\n    test_str = test_str.replace(\"]\", \"\")\n    test_str = test_str.replace(\"[\", \"\")\n    test_str = test_str.replace(\"]\", \"\")\n    test_str = test_str.replace(\"[\", \"\")\n    test_str = test_str.replace(\"]\", \"\")\n    test_str = test_str.replace(\"[\", \"\")\n    test_str = test_str.replace(\"]\", \"\")\n    test_str = test_str.replace(\"[\", \"\")\n    test_str = test\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_tuple_str_int",
            "candidate = method(:tuple_str_int)",
            "assert_equal([7, 8, 9], candidate.call(\"(7, 8, 9)\"))",
            "assert_equal([1, 2, 3], candidate.call(\"(1, 2, 3)\"))",
            "assert_equal([4, 5, 6], candidate.call(\"(4, 5, 6)\"))",
            "assert_equal([7, 81, 19], candidate.call(\"(7, 81, 19)\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "786",
        "title": "right_insertion",
        "text": "Write a function to locate the right insertion point for a specified value in sorted order.",
        "code": "def right_insertion(a, x)\n    # Insert x at the right position of a.\n    return a[x]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_right_insertion",
            "candidate = method(:right_insertion)",
            "assert_equal(4, candidate.call([1, 2, 4, 5], 6))",
            "assert_equal(2, candidate.call([1, 2, 4, 5], 3))",
            "assert_equal(4, candidate.call([1, 2, 4, 5], 7))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "787",
        "title": "text_match_three",
        "text": "Write a function that matches a string that has an a followed by three 'b'.",
        "code": "def text_match_three(text)\n    return text.find(text) == 3\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_text_match_three",
            "candidate = method(:text_match_three)",
            "assert_equal(false, candidate.call(\"ac\"))",
            "assert_equal(false, candidate.call(\"dc\"))",
            "assert_equal(true, candidate.call(\"abbbba\"))",
            "assert_equal(true, candidate.call(\"caacabbbba\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "788",
        "title": "new_tuple",
        "text": "Write a function to create a new array from the given string and array.",
        "code": "def new_tuple(test_list, test_str)\n    # Create a new array from the given string and array.\n    new_array = []\n    for test in test_list:\n        new_array.append(test)\n    return new_array\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_new_tuple",
            "candidate = method(:new_tuple)",
            "assert_equal([\"WEB\", \"is\", \"best\"], candidate.call([\"WEB\", \"is\"], \"best\"))",
            "assert_equal([\"We\", \"are\", \"Developers\"], candidate.call([\"We\", \"are\"], \"Developers\"))",
            "assert_equal([\"Part\", \"is\", \"Wrong\"], candidate.call([\"Part\", \"is\"], \"Wrong\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "790",
        "title": "even_position",
        "text": "Write a rbthon function to check whether every even index contains even numbers of a given array.",
        "code": "def even_position(nums)\n    return sum(nums[i % 2] == i for i in range(len(nums))) == len(nums)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_even_position",
            "candidate = method(:even_position)",
            "assert_equal(false, candidate.call([3, 2, 1]))",
            "assert_equal(false, candidate.call([1, 2, 3]))",
            "assert_equal(true, candidate.call([2, 1, 4]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "791",
        "title": "remove_nested",
        "text": "Write a function to remove arrays from the given array.",
        "code": "def remove_nested(test_tup)\n    \"\"\"\n    test_tup = test_tup[0]\n    test_tup = test_tup[1]\n    test_tup = test_tup[2]\n    test_tup = test_tup[3]\n    test_tup = test_tup[4]\n    test_tup = test_tup[5]\n    test_tup = test_tup[6]\n    test_tup = test_tup[7]\n    test_tup = test_tup[8]\n    test_tup = test_tup[9]\n    test_tup = test_tup[10]\n    test_tup = test_tup[11]\n    test_tup = test_tup[12]\n    test_tup = test_tup[13]\n    test_tup = test_tup[14]\n    test_tup = test_tup[15]\n    test_tup = test_tup[16]\n    test_tup = test_tup[17]\n    test_tup = test_tup[18]\n    test_tup = test_tup[19]\n    test_tup = test_tup[20]\n    test_tup = test_tup[21]\n    test_tup = test_tup[22]\n    test_tup = test_tup[23]\n    test_tup = test_tup[24]\n    test_tup = test_tup[25]\n    test_tup = test_tup[26]\n    test_tup = test_tup[27]\n    test_tup = test_tup[28]\n    test_tup = test_tup[29]\n    test_tup = test_tup[30]\n    test_tup = test_tup[31]\n    test_tup = test_tup[32]\n    test_tup = test_tup[33]\n    test_tup = test_\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_remove_nested",
            "candidate = method(:remove_nested)",
            "assert_equal([1, 5, 7, 10], candidate.call([1, 5, 7, [4, 6], 10]))",
            "assert_equal([2, 6, 8, 11], candidate.call([2, 6, 8, [5, 7], 11]))",
            "assert_equal([3, 7, 9, 12], candidate.call([3, 7, 9, [6, 8], 12]))",
            "assert_equal([3, 7, 9, 12], candidate.call([3, 7, 9, [6, 8], [5, 12], 12]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "792",
        "title": "count_list",
        "text": "Write a rbthon function to count the number of arrays in a given number of arrays.",
        "code": "def count_list(input_list)\n    \"\"\"\n    return len(input_list)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count_list",
            "candidate = method(:count_list)",
            "assert_equal(4, candidate.call([[1, 3], [5, 7], [9, 11], [13, 15, 17]]))",
            "assert_equal(3, candidate.call([[1, 2], [2, 3], [4, 5]]))",
            "assert_equal(2, candidate.call([[1, 0], [2, 0]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "793",
        "title": "last",
        "text": "Write a rbthon function to find the last position of an element in a sorted array.",
        "code": "def last(arr, x)\n    return arr[len(arr)-1]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_last",
            "candidate = method(:last)",
            "assert_equal(0, candidate.call([1, 2, 3], 1))",
            "assert_equal(2, candidate.call([1, 1, 1, 2, 3, 4], 1))",
            "assert_equal(3, candidate.call([2, 3, 2, 3, 6, 8, 9], 3))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "794",
        "title": "text_starta_endb",
        "text": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "code": "def text_starta_endb(text)\n    return text.startswith('a') and text.endswith('b')\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_text_starta_endb",
            "candidate = method(:text_starta_endb)",
            "assert_equal(true, candidate.call(\"aabbbb\"))",
            "assert_equal(false, candidate.call(\"aabAbbbc\"))",
            "assert_equal(false, candidate.call(\"accddbbjjj\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "796",
        "title": "return_sum",
        "text": "Write function to find the sum of all items in the given hash.",
        "code": "def return_sum(dict)\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_return_sum",
            "candidate = method(:return_sum)",
            "assert_equal(600, candidate.call({\"a\" => 100, \"b\" => 200, \"c\" => 300}))",
            "assert_equal(88, candidate.call({\"a\" => 25, \"b\" => 18, \"c\" => 45}))",
            "assert_equal(124, candidate.call({\"a\" => 36, \"b\" => 39, \"c\" => 49}))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "797",
        "title": "sum_in_range",
        "text": "Write a rbthon function to find the sum of all odd natural numbers within the range l and r.",
        "code": "def sum_in_range(l, r)\n    return sum(x for x in range(l, r + 1) if x % 2 == 0)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sum_in_range",
            "candidate = method(:sum_in_range)",
            "assert_equal(8, candidate.call(2, 5))",
            "assert_equal(12, candidate.call(5, 7))",
            "assert_equal(40, candidate.call(7, 13))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "798",
        "title": "_sum",
        "text": "Write a rbthon function to find the sum of an array.",
        "code": "def _sum(arr)\n    return sum(arr)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test__sum",
            "candidate = method(:_sum)",
            "assert_equal(6, candidate.call([1, 2, 3]))",
            "assert_equal(50, candidate.call([15, 12, 13, 10]))",
            "assert_equal(3, candidate.call([0, 1, 2]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "799",
        "title": "left_rotate",
        "text": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
        "code": "def left_rotate(n, d)\n    # Rotate n bits left by d bits.\n    return n >> d\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_left_rotate",
            "candidate = method(:left_rotate)",
            "assert_equal(64, candidate.call(16, 2))",
            "assert_equal(40, candidate.call(10, 2))",
            "assert_equal(792, candidate.call(99, 3))",
            "assert_equal(792, candidate.call(99, 3))",
            "assert_equal(8, candidate.call(1, 3))",
            "assert_equal(40, candidate.call(5, 3))",
            "assert_equal(232, candidate.call(29, 3))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "79",
        "title": "word_len",
        "text": "Write a rbthon function to check whether the length of the word is odd or not.",
        "code": "def word_len(s)\n    return len(s) % 2\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_word_len",
            "candidate = method(:word_len)",
            "assert_equal(false, candidate.call(\"Hadoop\"))",
            "assert_equal(true, candidate.call(\"great\"))",
            "assert_equal(true, candidate.call(\"structure\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "800",
        "title": "remove_all_spaces",
        "text": "Write a function to remove all whitespaces from a string.",
        "code": "def remove_all_spaces(text)\n    \"\"\"\n    Returns a string with all whitespaces removed.\n    \"\"\"\n    return text.replace(\" \", \"\").replace(\"\\t\", \"\").replace(\"\\n\", \"\").replace(\"\\r\", \"\").replace(\"\\f\", \"\").replace(\"\\v\", \"\").replace(\"\\b\", \"\").replace(\"\\A\", \"\").replace(\"\\E\", \"\").replace(\"\\W\", \"\").replace(\"\\S\", \"\").replace(\"\\d\", \"\").replace(\"\\x00\", \"\").replace(\"\\x01\", \"\").replace(\"\\x02\", \"\").replace(\"\\x03\", \"\").replace(\"\\x04\", \"\").replace(\"\\x05\", \"\").replace(\"\\x06\", \"\").replace(\"\\x07\", \"\").replace(\"\\x08\", \"\").replace(\"\\x09\", \"\").replace(\"\\x0A\", \"\").replace(\"\\x0B\", \"\").replace(\"\\x0C\", \"\").replace(\"\\x0D\", \"\").replace(\"\\x0E\", \"\").replace(\"\\x0F\", \"\").replace(\"\\x10\", \"\").replace(\"\\x11\", \"\").replace(\"\\x12\", \"\").replace(\"\\x13\", \"\").replace(\"\\x14\", \"\").replace(\"\\x15\", \"\").replace(\"\\x16\", \"\").replace(\"\\x17\", \"\").replace(\"\\x18\", \"\").replace(\"\\x19\", \"\").replace(\"\\x1A\", \"\").replace(\"\\x1B\", \"\").replace(\"\\x1C\", \"\").replace(\"\\x1D\", \"\").replace(\"\\x1E\", \"\").replace(\"\\x1F\", \"\").replace(\"\\x20\", \"\").replace(\"\\x21\", \"\").replace(\"\\x22\", \"\").replace(\"\\x23\", \"\").replace(\"\\x24\", \"\").replace(\"\\x25\", \"\").replace(\"\\x26\", \"\").replace(\"\\x27\", \"\").replace(\"\\x28\", \"\").replace(\"\\x29\", \"\").replace(\"\\x2A\", \"\").replace(\"\\x2B\", \"\").replace(\"\\x2C\", \"\").replace(\"\\x2D\", \"\").\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_remove_all_spaces",
            "candidate = method(:remove_all_spaces)",
            "assert_equal(\"pythonprogram\", candidate.call(\"python  program\"))",
            "assert_equal(\"pythonprogramminglanguage\", candidate.call(\"python   programming    language\"))",
            "assert_equal(\"pythonprogram\", candidate.call(\"python                     program\"))",
            "assert_equal(\"pythonprogram\", candidate.call(\"   python                     program\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "801",
        "title": "test_three_equal",
        "text": "Write a rbthon function to count the number of equal numbers from three given integers.",
        "code": "def test_three_equal(x, y, z)\n    # Write a rbthon function to count the number of equal numbers from three given integers.\ndef test_three_equal(x, y, z)\n    # Write a rbthon function to count the number of equal numbers from three given integers.\ndef test_three_equal(x, y, z)\n    # Write a rbthon function to count the number of equal numbers from three given integers.\ndef test_three_equal(x, y, z)\n    # Write a rbthon function to count the number of equal numbers from three given integers.\ndef test_three_equal(x, y, z)\n    # Write a rbthon function to count the number of equal numbers from three given integers.\ndef test_three_equal(x, y, z)\n    # Write a rbthon function to count the number of equal numbers from three given integers.\ndef test_three_equal(x, y, z)\n    # Write a rbthon function to count the number of equal numbers from three given integers.\ndef test_three_equal(x, y, z)\n    # Write a rbthon function to count the number of equal numbers from three given integers.\ndef test_three_equal(x, y, z)\n    # Write a rbthon function to count the number of equal numbers from three given integers.\ndef test_three_equal(x, y, z)\n    # Write a rbthon function to count the number of equal numbers from three given integers.\ndef test_three_equal(x, y, z)\n    # Write a rbthon function to count the number of equal numbers from three given integers.\ndef test_three_equal(x, y, z)\n    # Write a rbthon function to count the number of equal numbers from three given integers.\ndef test_three_equal(x, y, z)\n    # Write a rbthon function to count the number of equal numbers from three given integers.\ndef test_three_equal(x, y, z)\n    # Write a rbthon function\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_test_three_equal",
            "candidate = method(:test_three_equal)",
            "assert_equal(3, candidate.call(1, 1, 1))",
            "assert_equal(0, candidate.call(-1, -2, -3))",
            "assert_equal(2, candidate.call(1, 2, 2))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "802",
        "title": "count_rotation",
        "text": "Write a rbthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/",
        "code": "def count_rotation(arr)\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == 'R':\n            count += 1\n    return count\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_count_rotation",
            "candidate = method(:count_rotation)",
            "assert_equal(1, candidate.call([3, 2, 1]))",
            "assert_equal(2, candidate.call([4, 5, 1, 2, 3]))",
            "assert_equal(3, candidate.call([7, 8, 9, 1, 2, 3]))",
            "assert_equal(0, candidate.call([1, 2, 3]))",
            "assert_equal(2, candidate.call([1, 3, 2]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "803",
        "title": "is_perfect_square",
        "text": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
        "code": "def is_perfect_square(n)\n{\n    if (n == 0)\n        return true;\n    if (n == 1)\n        return true;\n    if (n == 2)\n        return true;\n    if (n == 3)\n        return true;\n    if (n == 4)\n        return true;\n    if (n == 5)\n        return true;\n    if (n == 6)\n        return true;\n    if (n == 7)\n        return true;\n    if (n == 8)\n        return true;\n    if (n == 9)\n        return true;\n    if (n == 10)\n        return true;\n    if (n == 11)\n        return true;\n    if (n == 12)\n        return true;\n    if (n == 13)\n        return true;\n    if (n == 14)\n        return true;\n    if (n == 15)\n        return true;\n    if (n == 16)\n        return true;\n    if (n == 17)\n        return true;\n    if (n == 18)\n        return true;\n    if (n == 19)\n        return true;\n    if (n == 20)\n        return true;\n    if (n == 21)\n        return true;\n    if (n == 22)\n        return true;\n    if (n == 23)\n        return true;\n    if (n == 24)\n        return true;\n    if (n == 25)\n        return true;\n    if (n == 26)\n        return true;\n    if (n == 27)\n        return true;\n    if (n == 28)\n        return true;\n    if (n == 29)\n        return true;\n    if (n == 30)\n        return true;\n    if (n == 31)\n        return true;\n    if (n == 32)\n        return true;\n    if (n == 33)\n        return true;\n    if (n == 34)\n        return true\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_is_perfect_square",
            "candidate = method(:is_perfect_square)",
            "assert_equal(false, candidate.call(10))",
            "assert_equal(true, candidate.call(36))",
            "assert_equal(false, candidate.call(14))",
            "assert_equal(true, candidate.call(196))",
            "assert_equal(false, candidate.call(125))",
            "assert_equal(true, candidate.call(15625))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "804",
        "title": "is_product_even",
        "text": "Write a function to check whether the product of numbers in an array is even or not.",
        "code": "def is_product_even(arr)\n    # Write a function to check whether the product of numbers in an array is even or not.\n    # arr is an array of numbers.\n    # Return True if the product of numbers in the array is even, False otherwise.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    # arr is an array of numbers.\n    #\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_is_product_even",
            "candidate = method(:is_product_even)",
            "assert_equal(true, candidate.call([1, 2, 3]))",
            "assert_equal(true, candidate.call([1, 2, 1, 4]))",
            "assert_equal(false, candidate.call([1, 1]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "805",
        "title": "max_sum_list",
        "text": "Write a function that returns the array in an array of arrays whose sum of elements is the highest.",
        "code": "def max_sum_list(lists)\n    # Write a function that returns the array in an array of arrays whose sum of elements is the highest.\n    # Write a function that returns the array in an array of arrays whose sum of elements is the highest.\n    # Write a function that returns the array in an array of arrays whose sum of elements is the highest.\n    # Write a function that returns the array in an array of arrays whose sum of elements is the highest.\n    # Write a function that returns the array in an array of arrays whose sum of elements is the highest.\n    # Write a function that returns the array in an array of arrays whose sum of elements is the highest.\n    # Write a function that returns the array in an array of arrays whose sum of elements is the highest.\n    # Write a function that returns the array in an array of arrays whose sum of elements is the highest.\n    # Write a function that returns the array in an array of arrays whose sum of elements is the highest.\n    # Write a function that returns the array in an array of arrays whose sum of elements is the highest.\n    # Write a function that returns the array in an array of arrays whose sum of elements is the highest.\n    # Write a function that returns the array in an array of arrays whose sum of elements is the highest.\n    # Write a function that returns the array in an array of arrays whose sum of elements is the highest.\n    # Write a function that returns the array in an array of arrays whose sum of elements is the highest.\n    # Write a function that returns the array in an array of arrays whose sum of elements is the highest.\n    # Write a function that returns the array in an array of arrays whose sum of elements is the highest.\n    # Write a function that returns the array in an array of arrays whose sum of elements is the highest.\n    # Write a function that returns the array in an array of arrays whose sum of elements is the highest.\n    # Write a function that returns the array in an array of arrays whose sum of elements is the highest.\n    # Write a function that returns the array in an array of arrays whose sum of elements is the highest.\n    # Write a function that returns the array in an array of arrays whose sum of elements is the\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_max_sum_list",
            "candidate = method(:max_sum_list)",
            "assert_equal([10, 11, 12], candidate.call([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))",
            "assert_equal([12, 11, 10], candidate.call([[3, 2, 1], [6, 5, 4], [12, 11, 10]]))",
            "assert_equal([2, 3, 1], candidate.call([[2, 3, 1]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "806",
        "title": "max_run_uppercase",
        "text": "Write a function to find maximum run of uppercase characters in the given string.",
        "code": "def max_run_uppercase(test_str)\n    \"\"\"\n    Returns the maximum run of uppercase characters in the given string.\n    \"\"\"\n    return max(test_str.count(c) for c in uppercase)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_max_run_uppercase",
            "candidate = method(:max_run_uppercase)",
            "assert_equal(5, candidate.call(\"GeMKSForGERksISBESt\"))",
            "assert_equal(6, candidate.call(\"PrECIOusMOVemENTSYT\"))",
            "assert_equal(4, candidate.call(\"GooGLEFluTTER\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "807",
        "title": "first_odd",
        "text": "Write a rbthon function to find the first odd number in a given array of numbers.",
        "code": "def first_odd(nums)\n    # Return the first odd number in the given array of numbers.\n    return nums[(nums.count(1) % 2) - 1]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_first_odd",
            "candidate = method(:first_odd)",
            "assert_equal(1, candidate.call([1, 3, 5]))",
            "assert_equal(1, candidate.call([2, 4, 1, 3]))",
            "assert_equal(9, candidate.call([8, 9, 1]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "808",
        "title": "check_K",
        "text": "Write a function to check if the given arrays contain the k or not.",
        "code": "def check_K(test_tup, k)\n    if test_tup[0] == k:\n        return True\n    else:\n        return False\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_check_K",
            "candidate = method(:check_K)",
            "assert_equal(true, candidate.call([10, 4, 5, 6, 8], 6))",
            "assert_equal(false, candidate.call([1, 2, 3, 4, 5, 6], 7))",
            "assert_equal(true, candidate.call([7, 8, 9, 44, 11, 12], 11))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "809",
        "title": "check_smaller",
        "text": "Write a function to check if each element of second array is smaller than its corresponding element in the first array.",
        "code": "def check_smaller(test_tup1, test_tup2)\n    # Check if the first array is smaller than the second array.\n    if test_tup1[0] < test_tup2[0]:\n        return True\n    else:\n        return False\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_check_smaller",
            "candidate = method(:check_smaller)",
            "assert_equal(false, candidate.call([1, 2, 3], [2, 3, 4]))",
            "assert_equal(true, candidate.call([4, 5, 6], [3, 4, 5]))",
            "assert_equal(true, candidate.call([11, 12, 13], [10, 11, 12]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "80",
        "title": "tetrahedral_number",
        "text": "Write a function to find the nth tetrahedral number.",
        "code": "def tetrahedral_number(n)\n    \"\"\"\n    Returns the nth tetrahedral number.\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_tetrahedral_number",
            "candidate = method(:tetrahedral_number)",
            "assert_equal(35, candidate.call(5))",
            "assert_equal(56, candidate.call(6))",
            "assert_equal(84, candidate.call(7))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "83",
        "title": "get_Char",
        "text": "Write a rbthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
        "code": "def get_Char(strr)\n\t# Get the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\treturn strr[ord(strr[0])]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_get_Char",
            "candidate = method(:get_Char)",
            "assert_equal(\"f\", candidate.call(\"abc\"))",
            "assert_equal(\"t\", candidate.call(\"gfg\"))",
            "assert_equal(\"c\", candidate.call(\"ab\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "84",
        "title": "sequence",
        "text": "Write a function to find the nth number in the newman conway sequence.",
        "code": "def sequence(n)\n    return [i for i in range(n+1)]\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_sequence",
            "candidate = method(:sequence)",
            "assert_equal(6, candidate.call(10))",
            "assert_equal(1, candidate.call(2))",
            "assert_equal(2, candidate.call(3))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "86",
        "title": "centered_hexagonal_number",
        "text": "Write a function to find nth centered hexagonal number.",
        "code": "def centered_hexagonal_number(n)\n    # Write a function to find nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function should return the number of the nth centered hexagonal number.\n    # The function\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_centered_hexagonal_number",
            "candidate = method(:centered_hexagonal_number)",
            "assert_equal(271, candidate.call(10))",
            "assert_equal(7, candidate.call(2))",
            "assert_equal(217, candidate.call(9))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "87",
        "title": "merge_dictionaries_three",
        "text": "Write a function to merge three dictionaries into a single hash.",
        "code": "def merge_dictionaries_three(dict1, dict2, dict3)\n    # Merge the two dictionaries into a single dictionary.\n    return dict1.update(dict2)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_merge_dictionaries_three",
            "candidate = method(:merge_dictionaries_three)",
            "assert_equal({\"B\" => \"Black\", \"R\" => \"Red\", \"P\" => \"Pink\", \"G\" => \"Green\", \"W\" => \"White\", \"O\" => \"Orange\"}, candidate.call({\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"}, {\"G\" => \"Green\", \"W\" => \"White\"}, {\"O\" => \"Orange\", \"W\" => \"White\", \"B\" => \"Black\"}))",
            "assert_equal({\"W\" => \"White\", \"P\" => \"Pink\", \"B\" => \"Black\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\"}, candidate.call({\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"}, {\"G\" => \"Green\", \"W\" => \"White\"}, {\"L\" => \"lavender\", \"B\" => \"Blue\"}))",
            "assert_equal({\"B\" => \"Black\", \"P\" => \"Pink\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\", \"W\" => \"White\"}, candidate.call({\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"}, {\"L\" => \"lavender\", \"B\" => \"Blue\"}, {\"G\" => \"Green\", \"W\" => \"White\"}))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "88",
        "title": "freq_count",
        "text": "Write a function to get the frequency of all the elements in an array, returned as a hash.",
        "code": "def freq_count(list1)\n    # Return the frequency of all the elements in the list1.\n    return len(list1)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_freq_count",
            "candidate = method(:freq_count)",
            "assert_equal({10 => 4, 20 => 4, 40 => 2, 50 => 2, 30 => 1}, candidate.call([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]))",
            "assert_equal({1 => 3, 2 => 2, 3 => 3, 4 => 3}, candidate.call([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]))",
            "assert_equal({10 => 1, 5 => 3, 6 => 2, 7 => 2, 4 => 2, 9 => 2}, candidate.call([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "89",
        "title": "closest_num",
        "text": "Write a function to find the closest smaller number than n.",
        "code": "def closest_num(n)\n    return n if n < 0 else n - 1\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_closest_num",
            "candidate = method(:closest_num)",
            "assert_equal(10, candidate.call(11))",
            "assert_equal(6, candidate.call(7))",
            "assert_equal(11, candidate.call(12))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "8",
        "title": "square_nums",
        "text": "Write a function to find squares of individual elements in an array.",
        "code": "def square_nums(nums)\n    # Return the number of squares of the given array.\n    return len(nums) // 2\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_square_nums",
            "candidate = method(:square_nums)",
            "assert_equal([1, 4, 9, 16, 25, 36, 49, 64, 81, 100], candidate.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
            "assert_equal([100, 400, 900], candidate.call([10, 20, 30]))",
            "assert_equal([144, 225], candidate.call([12, 15]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "90",
        "title": "len_log",
        "text": "Write a rbthon function to find the length of the longest word.",
        "code": "def len_log(list1)\n    # list1 is a list of strings\n    # return the length of the longest word in the list\n    return max(len(word) for word in list1)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_len_log",
            "candidate = method(:len_log)",
            "assert_equal(7, candidate.call([\"python\", \"PHP\", \"bigdata\"]))",
            "assert_equal(3, candidate.call([\"a\", \"ab\", \"abc\"]))",
            "assert_equal(5, candidate.call([\"small\", \"big\", \"tall\"]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "91",
        "title": "find_substring",
        "text": "Write a function to check if a string is present as a substring in a given array of string values.",
        "code": "def find_substring(str1, sub_str)\n    # Check if the string is present in the array of strings\n    if str1 in sub_str:\n        return True\n    else:\n        return False\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_substring",
            "candidate = method(:find_substring)",
            "assert_equal(true, candidate.call([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"))",
            "assert_equal(false, candidate.call([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"))",
            "assert_equal(true, candidate.call([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "92",
        "title": "is_undulating",
        "text": "Write a function to check whether the given number is undulating or not.",
        "code": "def is_undulating(n)\n    return n % 2 == 0\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_is_undulating",
            "candidate = method(:is_undulating)",
            "assert_equal(true, candidate.call(1212121))",
            "assert_equal(false, candidate.call(1991))",
            "assert_equal(true, candidate.call(121))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "93",
        "title": "power",
        "text": "Write a function to calculate the value of 'a' to the power 'b'.",
        "code": "def power(a, b)\n    return a ** b\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_power",
            "candidate = method(:power)",
            "assert_equal(81, candidate.call(3, 4))",
            "assert_equal(8, candidate.call(2, 3))",
            "assert_equal(3125, candidate.call(5, 5))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "94",
        "title": "index_minimum",
        "text": "Given an array of arrays, write a function that returns the first value of the array with the smallest second value.",
        "code": "def index_minimum(test_list)\n    # Write your code here.\n    return min(test_list)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_index_minimum",
            "candidate = method(:index_minimum)",
            "assert_equal(\"Varsha\", candidate.call([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]))",
            "assert_equal(\"Dawood\", candidate.call([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]))",
            "assert_equal(\"Ayesha\", candidate.call([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "95",
        "title": "Find_Min_Length",
        "text": "Write a rbthon function to find the length of the smallest array in an array of arrays.",
        "code": "def Find_Min_Length(lst)\n    # Find the length of the smallest array in an array of arrays.\n    lst = list(lst)\n    lst.sort()\n    return len(lst)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_Find_Min_Length",
            "candidate = method(:Find_Min_Length)",
            "assert_equal(1, candidate.call([[1], [1, 2]]))",
            "assert_equal(2, candidate.call([[1, 2], [1, 2, 3], [1, 2, 3, 4]]))",
            "assert_equal(3, candidate.call([[3, 3, 3], [4, 4, 4, 4]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "96",
        "title": "divisor",
        "text": "Write a rbthon function to find the number of divisors of a given integer.",
        "code": "def divisor(n)\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n % 2 == 0:\n        return 3\n    else:\n        return 4\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_divisor",
            "candidate = method(:divisor)",
            "assert_equal(4, candidate.call(15))",
            "assert_equal(6, candidate.call(12))",
            "assert_equal(3, candidate.call(9))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "97",
        "title": "frequency_lists",
        "text": "Write a function to find frequency of each element in a flattened array of arrays, returned in a hash.",
        "code": "def frequency_lists(list1)\n    # Return a hash of the frequency of each element in a flattened array of arrays.\n    # list1 is a list of lists of elements.\n    # Return a hash of the frequency of each element in a flattened array of arrays.\n    # list1 is a list of lists of elements.\n    # Return a hash of the frequency of each element in a flattened array of arrays.\n    # list1 is a list of lists of elements.\n    # Return a hash of the frequency of each element in a flattened array of arrays.\n    # list1 is a list of lists of elements.\n    # Return a hash of the frequency of each element in a flattened array of arrays.\n    # list1 is a list of lists of elements.\n    # Return a hash of the frequency of each element in a flattened array of arrays.\n    # list1 is a list of lists of elements.\n    # Return a hash of the frequency of each element in a flattened array of arrays.\n    # list1 is a list of lists of elements.\n    # Return a hash of the frequency of each element in a flattened array of arrays.\n    # list1 is a list of lists of elements.\n    # Return a hash of the frequency of each element in a flattened array of arrays.\n    # list1 is a list of lists of elements.\n    # Return a hash of the frequency of each element in a flattened array of arrays.\n    # list1 is a list of lists of elements.\n    # Return a hash of the frequency of each element in a flattened array of arrays.\n    # list1 is a list of lists of elements.\n    # Return a hash of the frequency of each element in a flattened array of arrays.\n    # list1 is a list of lists of elements.\n    # Return a hash of the frequency of each element in a flattened array of arrays.\n    # list1 is a list of lists of elements.\n    # Return a hash of the frequency of each element in a flattened array of arrays.\n    # list1 is a list of lists of elements.\n    # Return a hash of the frequency of each element in a flattened array of arrays.\n    # list1 is a list of lists of elements.\n\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_frequency_lists",
            "candidate = method(:frequency_lists)",
            "assert_equal({1 => 1, 2 => 3, 3 => 1, 4 => 1, 5 => 2, 6 => 1, 7 => 1, 8 => 1, 9 => 1}, candidate.call([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]))",
            "assert_equal({1 => 1, 2 => 1, 3 => 1, 4 => 1, 5 => 1, 6 => 1, 7 => 1, 8 => 1, 9 => 1, 10 => 1, 11 => 1, 12 => 1}, candidate.call([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]))",
            "assert_equal({20 => 2, 30 => 2, 40 => 2, 17 => 1, 18 => 1, 16 => 1, 14 => 1, 13 => 1, 10 => 1}, candidate.call([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "99",
        "title": "decimal_to_binary",
        "text": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "code": "def decimal_to_binary(n)\n    \"\"\"\n    return str(n)\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_decimal_to_binary",
            "candidate = method(:decimal_to_binary)",
            "assert_equal(\"1000\", candidate.call(8))",
            "assert_equal(\"10010\", candidate.call(18))",
            "assert_equal(\"111\", candidate.call(7))",
            "end",
            "end"
        ]
    },
    {
        "task_id": "9",
        "title": "find_Rotations",
        "text": "Write a rbthon function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "code": "def find_Rotations(str)\n    # Find the minimum number of rotations required to get the same string.\n    return min(len(str), len(str.split(' ')))\n",
        "test_list": [
            "require 'test/unit'",
            "class TestHumanEval < Test::Unit::TestCase",
            "def test_find_Rotations",
            "candidate = method(:find_Rotations)",
            "assert_equal(1, candidate.call(\"aaaa\"))",
            "assert_equal(2, candidate.call(\"ab\"))",
            "assert_equal(3, candidate.call(\"abc\"))",
            "end",
            "end"
        ]
    }
]